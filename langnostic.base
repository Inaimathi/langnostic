((5202 3723 531198000) :INSERT (0 :TITLE "Solid State Ownership"))
((5202 3723 531214000) :INSERT (0 :FILE "solid-state-ownership.html"))
((5202 3723 531219000) :INSERT (0 :EDITED 3610022331))
((5202 3723 531227000) :INSERT
 (0 :BODY "<p>I feel pretty good about it.</p>

<p>The installation took about four hours, but none of it was really the drives fault. Partially, it was my fault for being an idiot (forgetting that a SATA 2 drive still needs to have power connected, if you must know), but that only ate up about 15 minutes. The rest of it was some obscure, arcane Ubuntu boot setting that was causing the os to try to find drive partitions by (a non-existant) UUID. It's simple in retrospect, but when your new hard drive gives you a message along the lines of \"CANNOT FIND BOOT PARTITION; NO OPERATING SYSTEM INSTALLED\", well, it's a little nerve-wracking. You probably don't really care about the intricacies of Ubuntu installation, though, so I'll just close that subject by saying that I didn't expect to have to understand how my OS references its devices merely to install it.</p>

<p>What I'm dying to talk about is the drive. I've been reading things like \"order of magnitude improvement\" from <a href=\"http://www.joelonsoftware.com/items/2009/03/27.html\">various</a> <a href=\"http://www.codinghorror.com/blog/archives/001304.html\">people</a> who've installed SSDs and loved them, but I really wasn't sure going in that it would be worth the $250. It was either going to be another incremental boost to system performance, OR it was going to be a substantial increase but since I was now expecting it, I'd be disappointed anyway. Well, earlier in the week, my HDD kicked the bucket pretty hard. At that point, I figured \"Self, it's going to cost you about a hundred bucks for a new drive anyway. You may as well just try the SSD and get it over with.\" My plan was to grab an <a href=\"http://www.newegg.ca/Product/Product.aspx?Item=N82E16820227393&cm_re=solid_state_ocz-_-20-227-393-_-Product\">OCZ Vertex 30gb</a> (I checked my HD usage earlier in the week; I was sitting at just over 8gb used, so I knew I could get away with it), but they were out of stock so I ended up getting an <a href=\"http://www.newegg.ca/Product/Product.aspx?Item=N82E16820227461&cm_re=solid_state_ocz-_-20-227-461-_-Product\">OCZ Agility 60gb</a>. An extra 30gb never killed anyone, and it had the same read/write speeds so I was ok with that.</p>

<p>This thing is awesome.</p>

<p>It used to take about a minute to get from \"Push the power button\" to \"My desktop is loaded\". It now takes 16 seconds to get from \"Push power\" to the login screen, and loading my desktop once I'm logged in is <span style=\"font-style:italic;\">instantaneous</span>. It literally takes no time. Opening up my browser or editor is easily twice as fast as it used to be. It doesn't seem to affect the speed of saving files though, which is neither a surprise nor a deal-breaker. The other cool thing is that, other than the fan, my computer is now silent. It's a nice bonus.</p>

<p>From this day forth, all computers I buy will be equipped with SSDs.</p>
"))
((5202 3723 531264000) :INSERT (0 :POSTED 3470965200))
((5202 3723 531267000) :INSERT (0 :TAG :HARDWARE))
((5202 3723 531473000) :INSERT (1 :TITLE "Another look at Emacs"))
((5202 3723 531481000) :INSERT (1 :FILE "another-look-at-emacs.html"))
((5202 3723 531487000) :INSERT (1 :EDITED 3610311641))
((5202 3723 531490000) :INSERT
 (1 :BODY "<p>So I said a little while ago, I said I'd switch to jEdit. </p>

<img src=\"/static/img/jedit-logo.jpg\" class=\"middle small\" alt=\"The jEdit logo\" />

<p>It turns out that Emacs has bedeviled me, though, and I've been trying very hard to figure it out. Given my infatuation with LISP in general, it was pretty likely that I'd eventually stumble across the <a href=\"http://www.emacs.uniyar.ac.ru/doc/O'Reilly_Emacs/Writing%20GNU%20Emacs%20Extensions.PDF\">Emacs Extension Guide(pdf)</a>.</p>
<p>This appeals to me as perhaps nothing else can. I can develop my programming skills in [a precursor to] <a href=\"http://www.plt-scheme.org/\">my favorite language</a>, while improving the usability of my editor.</p>

<p>The defult usability is still pretty bad in most respects. </p>
<ul>
<li>The arcane shortcuts</li>
<li>the insistence on making it ridiculously hard to turn off auto-indent (even in a mode where trying to auto-indent does nothing but raise an error)</li>
<li>the requirement that its users know Lisp before using it properly</li>
<li>the clumsy initial download (and lack of bundled extensions/modes)</li>
</ul>
<p>are all obstacles. I'd go so far as to say that if not for these things, Emacs would be the text editor of choice for a majority of computer users rather than just a minority of computer programmers, because underneath that initial crusty fa&#231;ade is raw power unmatched by another editor.</p>
<p>Incidentally, I keep on seeing people complain how \"Emacs takes too long to load, so I've switched to Eclipse\". I guess I use pretty good hardware, because Emacs never takes more than half a second to open up for me (and I tend to open my editor in the morning then keep it open all day anyway). On the other hand, Eclipse has yet to fully load in under 2 minutes on that very same machine (although, to be fair, the size of my company's codebase might have something to do with that).</p>
<p>In any case, I still don't seem to thirst for the blood of <a href=\"http://thomer.com/vi/vi.html\">vi users</a> (I'm sure that part comes later), but yeah, I use <a href=\"http://www.gnu.org/software/emacs/\">Emacs</a>.</p>

<img src=\"/static/img/emacs-icon.png\" class=\"middle small\" alt=\"The Emacs logo\" />
"))
((5202 3723 531547000) :INSERT (1 :POSTED 3472002000))
((5202 3723 531552000) :INSERT (1 :TAG :EMACS))
((5202 3723 531557000) :INSERT (1 :TAG :PROGRAMMING-ENVIRONMENT))
((5202 3723 531737000) :INSERT (2 :TITLE "Contracting in PHP"))
((5202 3723 531742000) :INSERT (2 :FILE "require-base.html"))
((5202 3723 531744000) :INSERT (2 :EDITED 3610022331))
((5202 3723 531746000) :INSERT
 (2 :BODY "<p>I've been getting back to basics.</p>

<p>In terms of programming, I'm mostly mucking around in the bowels of PHP. It's an ok language. You can get things done in it, and it's not intolerable, but... </p>

<p>well... </p>

<p>there's a reason its logo isn't in the header.<a href=\"#foot-Thu-Jan-19-121206EST-2012\" name=\"note-Thu-Jan-19-121206EST-2012\">[1]</a></p>

<p>The only real reason I'm using the thing at all is that my office is slowly weaning the devs off of Java, and I've simultaneously picked up an independant contract for a LAMP project.</p>

<p>I've also got a project on the burner using Python, but I'm still using Scheme/CL/EL for my personal stuff and Ruby for my various scripting. I get the feeling that Ruby is going to be getting more of my mindshare in the near future as I gear up to start <a href=\"http://watir.com/\">automating some tests</a> for the company.</p>

<p>None of that matters though, because what I've been working on is completely language agnostic. Yes, I'm running through <a href=\"http://www.emacs.uniyar.ac.ru/doc/O'Reilly_Emacs/Writing%20GNU%20Emacs%20Extensions.PDF\">Emacs Extensions</a> at speed, which is making me better at using my editor and customizing it, but I'm also spending about 30 minutes each day on typing practice using <a href=\"http://klavaro.sourceforge.net/en/\">Klavaro</a>.</p>

<p>Talk about fundamentals.</p>

<p>It's a bit on the boring side, but here's the thing. Typing with three fingers is slow. That's where I was at a few weeks ago. Granted, because I have a ton and a half of energy, and high endurance, I was still hitting 45 wpm most of the time, but it's inefficient. When I went back to basics, that dropped down to something ridiculous like 18-20wpm, but I'm back in the high-30s/low-40s again. This time with all ten fingers. I'm ultimately hoping to get to 100wpm. This is why I decided to do the training. It's boring, yes, but this set of training is going to ~double my efficiency in all the languages I use. I can't think of anything that'll give me more bang for the buck. </p>

<p>Well, ok, maybe <a href=\"http://en.wikipedia.org/wiki/Discrete_mathematics\">one thing</a>. And I'll get to it. But that's another post.</p>

<hr />
<h5>Footnotes</h5>

<p>1 - <a href=\"#note-Thu-Jan-19-121206EST-2012\" name=\"foot-Thu-Jan-19-121206EST-2012\">[back]</a> - EDIT: PHP has since been added to the header.
"))
((5202 3723 531770000) :INSERT (2 :POSTED 3472693200))
((5202 3723 531778000) :INSERT (2 :TAG :BITCHING))
((5202 3723 531780000) :INSERT (2 :TAG :GENERAL-PROGRAMMING-THOUGHTS))
((5202 3723 531782000) :INSERT (2 :TAG :PHP))
((5202 3723 531924000) :INSERT (3 :TITLE "Just got the Little Schemer"))
((5202 3723 531932000) :INSERT (3 :FILE "little-lambda.html"))
((5202 3723 531934000) :INSERT (3 :EDITED 3610310151))
((5202 3723 531936000) :INSERT
 (3 :BODY "<p>I just got </p>

<img src=\"/static/img/little-schemer.jpg\" class=\"middle\" alt=\"The Little Schemer\" />

<p>through my company book-order (I also got <a href=\"http://mitpress.mit.edu/catalog/item/default.asp?ttype=2&tid=10663\">The Reasoned Schemer</a>, but I want to finish the first one before I move on).</p>
<p>It's at once an exercise book for Scheme/CL, and the gentlest introduction to recursive programming I've seen. I'm already fairly comfortable with both, so this is really just a refresher for me, but I could see someone new to functional programming (or programming in general) getting some serious mileage out of the text.</p>
<p>If you fit that description and are interested, <a href=\"http://www.amazon.com/Little-Schemer-Daniel-P-Friedman/dp/0262560992\">the</a> <a href=\"http://www.amazon.com/Seasoned-Schemer-Daniel-P-Friedman/dp/026256100X/ref=pd_bxgy_b_img_b\">Schemer</a> <a href=\"http://www.amazon.com/Reasoned-Schemer-Daniel-P-Friedman/dp/0262562146/ref=pd_bxgy_b_img_c\">Trilogy</a> is easily worth the $70 Amazon is charging.</p>
<p>EDIT: Ok, wow. I figured I'd breeze through this, given my experience with Scheme and recursion, but 5 chapters in, it's getting pretty interesting. It's obvious that my model of recursion was incomplete if not outright broken earlier, but dammit, I'm progressing. In any case, my point is: even if you think you're fairly familiar with Scheme, consider picking these up.</p>
"))
((5202 3723 531951000) :INSERT (3 :POSTED 3472866000))
((5202 3723 531952000) :INSERT (3 :TAG :SCHEME))
((5202 3723 532100000) :INSERT (4 :TITLE "Poking at Erlang"))
((5202 3723 532105000) :INSERT (4 :FILE "install-erl.html"))
((5202 3723 532108000) :INSERT (4 :EDITED 3610022331))
((5202 3723 532110000) :INSERT
 (4 :BODY
  "<p>It's been a while since I touched it, so I figured I'd download the Erlang reference and language implementation and play around with it. This is also the first time I've played with it while being an admitted Emacs user though (if you go far enough back in the my blog archive, you'll note that my initial reaction to Emacs was something along the lines of \"My eyes! The goggles do NOTHING!\" [runs away]).</p>
<p>Sounds like a good time to get Erlang mode running inside Emacs rather than having to muck around with <span class=\"code inline\">erl</span> in the terminal. A search for <a href=\"http://lmgtfy.com/?q=erlang+mode+emacs\">\"erlang mode emacs\"</a> links me to the Erlang/OTP site where I found the <a href=\"http://ftp.sunet.se/pub/lang/erlang/doc/reference_manual/users_guide.html\">documentation</a> earlier. Turns out that Erlang comes with <a href=\"http://ftp.sunet.se/pub/lang/erlang/doc/apps/tools/erlang_mode_chapter.html\">its own Emacs mode</a>. I guess the guys and gals over at Ericsson labs are all Emacs hackers too. (As an aside, I also found one post from a user who highly recommended the Erlang emacs mode, even to users of other editors. His advice ran something like \"What you'll want to do is type <span class=\"code inline\">$> vim ~/.emacs</span> and edit that file to include your Erlang path\". It was chuckle-worthy, at least.)</p>
<p>Anyway, it turns out that all you really need to do is install Erlang, then add <span class=\"code inline\">\"/usr/lib/erlang/lib/tools-[version number]/emacs\"</span> to your load path, and </p>

<pre>(setq erlang-root-dir <span style=\"color: #8b2252;\">\"/usr/lib/erlang\"</span>)
(setq exec-path (cons <span style=\"color: #8b2252;\">\"/usr/lib/erlang/bin\"</span> exec-path))
(<span style=\"color: #a020f0;\">require</span> '<span style=\"color: #008b8b;\">erlang-start</span>)</pre>

<p>elsewhere in your .emacs file. note that you'll need to change those directories based on where you installed Erlang (the above are what I had to do after running <span class=\"code inline\">apt-get install erlang</span>. If you did yours manually, it'll be different).</p>
<p>Once that's done, <span class=\"code inline\">M-x erlang-mode</span> gets you the right mode, and <span class=\"code inline\">M-x erlang-shell</span> gets the current buffer running <span class=\"code inline\">erl</span>.</p>
"))
((5202 3723 532132000) :INSERT (4 :POSTED 3473211600))
((5202 3723 532134000) :INSERT (4 :TAG :ELISP))
((5202 3723 532137000) :INSERT (4 :TAG :EMACS))
((5202 3723 532145000) :INSERT (4 :TAG :ERLANG))
((5202 3723 532437000) :INSERT (5 :TITLE "Some Free Time"))
((5202 3723 532447000) :INSERT (5 :FILE "define-free.html"))
((5202 3723 532451000) :INSERT (5 :EDITED 3610131633))
((5202 3723 532456000) :INSERT
 (5 :BODY "<p>I finally have some free time to write.</p>

<p>It's been hard to come by; I work at an office where <a href=\"http://steve-yegge.blogspot.com/2006/10/egomania-itself.html\">the Agile Mafia</a> has taken over, and the only visible result I've observed is that there's less free time and more shitty, un-maintainable products. It's weird, because looking around at real tech companies, you'd get the impression that Agile was dead (or at least, restricted to the less ridiculous aspects). I'm here to tell you that if you're at anything other than a tech-focused company, you get to put up with all the annoyance of \"weekly sprints\", \"daily scrum\" and \"tighter scheduling\" without getting any of the real or imagined benefits.</p>

<p>Here's the result, from someone at ground zero:</p>

<ol>
  <li>You're always forced to over-commit.</li>
  <li>You're held to your commitments, and missing a deadline (no matter how unreasonable) is seen as a failure on your part.</li>
  <li>Bug fixing and testing is expected to go on for 1/4 as long as development.</li>
  <li>When there are issues on live, you are expected to handle those, then work overtime to catch up with your actual work (because the plans are always made on the assumption that <em>this time</em> nothing will go wrong).</li>
</ol>

<p>Number 1 means that there's never really enough time to get everything done. Number 2 means that it's actually better, from the incentive perspective, to half-ass everything you're tasked with so that you can call it \"done\", and tell yourself and your peers that you'll fix it later. Number 3 means that in any given release, half or more of the major issues get pushed out onto our clients (who promptly complain about those issues and cause number 4). Finally, number 4 means that there's never enough time to fix the defects introduced in numbers 1 and 2.</p>

<p>Ironically, number 2 also means that if performance is measured closely enough and used as a gauge enough times, anyone that tries to point out and/or work against the negative re-enforcement loop gets canned.</p>

<p>In other words, I have observed that the Agile process, used as it is at my company decreases the number of competent developers/designers, decreases the quality of work done, decreases the number of working features present at any given time and (if I can imagine their viewpoint for a moment) erodes client good-will. This sounds like it's bad.</p>

<p>I don't even want to think about a general case though. I'm thinking right now. A feature I'm working on is languishing. It doesn't get attention because it's really only been requested by a couple of clients, and because the rest of the dev team though it would be trivial. It wasn't I've watched the programmer responsible struggle the entire way through. Hell, the flash side alone was struggle enough. The back-end accounting logic for this thing must have been monstrous. We're at the last day right now. Tonight. As I write this, it's 11:45 pm on the Friday before release, and I know it's going out on Monday, come hell or high-water.</p>

<p>The process we're using, and the assumptions we've internalized combine to mean that I can't fix it. That if I try and succeed, I'll get a talking to. If I try and fail, it'll just re-enforce the perception that the process should not be deviated from.</p>

<p>Superstition is infuriating in others, though I realize that it must affect me at some point as well.</p>
"))
((5202 3723 532508000) :INSERT (5 :POSTED 3475544400))
((5202 3723 532514000) :INSERT (5 :TAG :GENERAL-PROGRAMMING-THOUGHTS))
((5202 3723 532519000) :INSERT (5 :TAG :IDEA-PEELING))
((5202 3723 532523000) :INSERT (5 :TAG :SPECULATION))
((5202 3723 532863000) :INSERT (6 :TITLE "Patterns"))
((5202 3723 532873000) :INSERT (6 :FILE "patterns.html"))
((5202 3723 532878000) :INSERT (6 :EDITED 3610022331))
((5202 3723 532887000) :INSERT
 (6 :BODY
  "<p>I've been noticing two patterns lately in my various activities. They're not really bad or good (or at least, I'm unsure which); it's just some digital behaviors I've noticed in myself.</p>
<p>Firstly, anything of even vague importance on my personal workstations is a git repository that I've made it a habit to udate each time I use each machine. Between the three independant computers I use on a daily basis, my data is pretty safe from a random hardware malfunction. Granted a building fire or similar would still take them all out but a single piddling hard-drive failure isn't something that strikes fear into my heart at this point. My most used git commands are (in descending order</p>

<ol>
  <li>git add .</li>
  <li>git checkout <branch> <file></li>
  <li>git commit -m</li>
  <li>(since I started using git from Emacs; see below) git log</li>
</ol>

<p>Next, Emacs and Gimp are quickly supplanting almost every program I used to use. In fact (for my personal work) I now basically live in Emacs, Gimp, Inkscape and Chrome. Gimp gets used for image manipulation (Inkscape just for vectors), Google Chrome for the obvious, and Emacs for everything else. I used to use Terminal to run <span class=\"code inline\">git</span>, <span class=\"code inline\">erl</span>, <span class=\"code inline\">mzscheme</span> and (every once in a while) <span class=\"code inline\">SBCL</span>. Since getting heavily into Emacs, <a href=\"http://www.neilvandyke.org/quack/\">Quack</a> lets me drop into an improved mzscheme prompt, <a href=\"http://www.erlang.org/doc/apps/tools/erlang_mode_chapter.html\">erlang-shell</a> does the same thing for erl, and despite my earlier complaints, <a href=\"http://common-lisp.net/project/slime/\">SLIME</a> is actually very nice once you're already comfortable with Lisp and Emacs. Emacs 22+ also comes with a <a href=\"http://alexott.net/en/writings/emacs-vcs/EmacsGit.html\">git package</a> that you just need to require to get a pretty freakin' good interface going.</p>
<p>As an aside, if you're interested in picking up Emacs, I highly recommend these <a href=\"http://steve.yegge.googlepages.com/effective-emacs\">two</a> <a href=\"http://steve-yegge.blogspot.com/2006/06/shiny-and-new-emacs-22.html\">articles</a> by Steve Yegge, and <a href=\"http://xahlee.org/emacs/elisp.html\">Xah's awesome tutorials</a>. If you're interested in picking up a Lisp dialect and don't already know the editor very well, I actually recommend staying away from Emacs until you have a firm grip on <a href=\"http://www.plt-scheme.org/\">PLT Scheme</a>, then coming back and picking up Elisp once you're more familiar with the language.</p>
<p>Like I said, I'm not sure whether these pattrns are positive or not, but they remain as I've stated them:</p>

<ol>
  <li>Anything even remotely important on a machine I pilot is in a GIT repo.</li>
  <li>I use a grand total of 4 programs for any and all personal projects (and the usage is skewed heavily towards Emacs and Chrome).</li>
</ol>
"))
((5202 3723 532941000) :INSERT (6 :POSTED 3475890000))
((5202 3723 532945000) :INSERT (6 :TAG :EMACS))
((5202 3723 532948000) :INSERT (6 :TAG :GIT))
((5202 3723 532951000) :INSERT (6 :TAG :PROGRAMMING-ENVIRONMENT))
((5202 3723 533360000) :INSERT (7 :TITLE "Upgrading to Ubuntu 9.10"))
((5202 3723 533368000) :INSERT (7 :FILE "define-upgrade-9.10.html"))
((5202 3723 533370000) :INSERT (7 :EDITED 3610022331))
((5202 3723 533373000) :INSERT
 (7 :BODY
  "<p>So I've upgraded to <a href=\"http://www.ubuntu.com/\">ubuntu 9.10</a>. They've put a lot of effort into making the UI more consistant, which is nice I guess. Also, it's shaved off a further four seconds from my startup routine; the system itself now starts up about 2 seconds faster, and they changed the login screen so that I can just hit <span class=\"code inline\">&lt;<span style=\"color: #0000ff;\">ret</span>&gt;</span> instead of typing in my user name (which saved the other two seconds).</p>
<p>That's really not why I finally decided to ugrade though <a href=\"http://web.psung.name/emacs/setup.html\">this is</a>. Ubuntu 9.20 has <span class=\"code inline\">apt-get</span> support for emacs 23, and I really didn't feel like going through a manual install from their <a href=\"http://ftp.gnu.org/pub/gnu/emacs/\">ftp site</a>. That seems like something I'd have had to do in 1998, not 12 years after the fact.</p>
<p>A few things were obsoleted, but noting important. Though, you may wanna take that with a grain of salt. Like I said last time, I basically live in Emacs, Gimp/Inkscape and Chrome now. Ok, and every once in a while I'll drop into DrScheme for the macro-stepper, Klavaro for keyboard practice or into terminal because Emacs' GIT mode doesn't provide <span class=\"code inline\">git-init</span> or <span class=\"code inline\">git-pull</span> (funny story, I actually got Emacs 23 because it supports tab completion when executing shell commands, which would let me write my own little add-ons for those two git commands to obviate the terminal entirely).</p>
<p>Anyway, my point is: the list of applications that I use is short. None of the above have broken, but if you use other programs, check whether they're still supported (one I was surprised to see obsoleted was gcc 4.3, so it doesn't hurt to check).</p>
<p>My .emacs is getting fatter, by the way. Here's the latest evolution:</p>

<pre>(setq inferior-lisp-program <span style=\"color: #8b2252;\">\"/usr/bin/sbcl\"</span>)
(setq load-path (append load-path (list <span style=\"color: #8b2252;\">\"~/emods\"</span> <span style=\"color: #8b2252;\">\"~/emods/slime\"</span> <span style=\"color: #8b2252;\">\"/usr/lib/erlang/lib/tools-2.6.2/emacs\"</span> <span style=\"color: #8b2252;\">\"/usr/share/doc/git-core/contrib/emacs\"</span>)))

(setq erlang-root-dir <span style=\"color: #8b2252;\">\"/usr/lib/erlang\"</span>)
(setq exec-path (cons <span style=\"color: #8b2252;\">\"/usr/lib/erlang/bin\"</span> exec-path))

(setq x-select-enable-clipboard t)

(<span style=\"color: #a020f0;\">require</span> '<span style=\"color: #008b8b;\">vc-git</span>)
(<span style=\"color: #a020f0;\">when</span> (<span style=\"color: #a020f0;\">featurep</span> '<span style=\"color: #008b8b;\">vc-git</span>) (add-to-list 'vc-handled-backends 'git))
(<span style=\"color: #a020f0;\">require</span> '<span style=\"color: #008b8b;\">git</span>)
(autoload 'git-blame-mode <span style=\"color: #8b2252;\">\"git-blame\"</span>
  <span style=\"color: #8b2252;\">\"Minor mode for incremental blame for Git.\"</span> t)

(<span style=\"color: #a020f0;\">require</span> '<span style=\"color: #008b8b;\">htmlize</span>)
(<span style=\"color: #a020f0;\">require</span> '<span style=\"color: #008b8b;\">blog-mode</span>)
(<span style=\"color: #a020f0;\">require</span> '<span style=\"color: #008b8b;\">quack</span>)
(<span style=\"color: #a020f0;\">require</span> '<span style=\"color: #008b8b;\">erlang-start</span>)
(<span style=\"color: #a020f0;\">require</span> '<span style=\"color: #008b8b;\">slime</span>)
(<span style=\"color: #a020f0;\">require</span> '<span style=\"color: #008b8b;\">redo</span>)
(<span style=\"color: #a020f0;\">require</span> '<span style=\"color: #008b8b;\">php-mode</span>)
(autoload 'js2-mode <span style=\"color: #8b2252;\">\"js2\"</span> nil t)
(add-to-list 'auto-mode-alist '(<span style=\"color: #8b2252;\">\"\\\\.js$\"</span> . js2-mode) '(<span style=\"color: #8b2252;\">\"\\\\.ss$\"</span> . scheme-mode))

(add-hook 'php-mode-hook
          (<span style=\"color: #a020f0;\">lambda</span> () (define-key php-mode-map (kbd <span style=\"color: #8b2252;\">\"&lt;tab&gt;\"</span>) (<span style=\"color: #a020f0;\">lambda</span> () (interactive) (insert-char 9 1)))))

(setq scroll-bar-mode-explicit t)
(set-scroll-bar-mode `right)

(global-set-key (kbd <span style=\"color: #8b2252;\">\"&lt;f5&gt;\"</span>) 'eval-buffer)
(global-set-key (kbd <span style=\"color: #8b2252;\">\"&lt;f7&gt;\"</span>) 'call-last-kbd-macro)

(global-set-key (kbd <span style=\"color: #8b2252;\">\"C-w\"</span>) (<span style=\"color: #a020f0;\">lambda</span> () (interactive) (kill-buffer nil)))

(global-set-key (kbd <span style=\"color: #8b2252;\">\"C-z\"</span>) 'undo)
(global-set-key (kbd <span style=\"color: #8b2252;\">\"C-y\"</span>) 'redo)

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">other-window-backward</span> (<span style=\"color: #228b22;\">&amp;optional</span> n)
  (interactive <span style=\"color: #8b2252;\">\"p\"</span>)
  (other-window (- (or n 1))))

(global-set-key (kbd <span style=\"color: #8b2252;\">\"C-n\"</span>) 'other-window)
(global-set-key (kbd <span style=\"color: #8b2252;\">\"C-S-n\"</span>) 'other-window-backward)
(global-set-key (kbd <span style=\"color: #8b2252;\">\"C-a\"</span>) 'mark-whole-buffer)

(tool-bar-mode nil)
(menu-bar-mode 0)

(custom-set-variables
  <span style=\"color: #b22222;\">;; </span><span style=\"color: #b22222;\">custom-set-variables was added by Custom.
</span>  <span style=\"color: #b22222;\">;; </span><span style=\"color: #b22222;\">If you edit it by hand, you could mess it up, so be careful.
</span>  <span style=\"color: #b22222;\">;; </span><span style=\"color: #b22222;\">Your init file should contain only one such instance.
</span>  <span style=\"color: #b22222;\">;; </span><span style=\"color: #b22222;\">If there is more than one, they won't work right.
</span> '(cua-mode t nil (cua-base))
 '(htmlize-output-type (quote inline-css))
 '(iswitchb-mode t)
 '(show-paren-mode t)
 '(transient-mark-mode t))
(put 'downcase-region 'disabled nil)
(custom-set-faces
  <span style=\"color: #b22222;\">;; </span><span style=\"color: #b22222;\">custom-set-faces was added by Custom.
</span>  <span style=\"color: #b22222;\">;; </span><span style=\"color: #b22222;\">If you edit it by hand, you could mess it up, so be careful.
</span>  <span style=\"color: #b22222;\">;; </span><span style=\"color: #b22222;\">Your init file should contain only one such instance.
</span>  <span style=\"color: #b22222;\">;; </span><span style=\"color: #b22222;\">If there is more than one, they won't work right.
</span> )</pre>

<p>Changes from last time:</p>

<ol>
<li><span class=\"code inline\">(tool-bar-mode nil)</span> and <span class=\"code inline\">(menu-bar-mode 0)</span> are now in my default .emacs instead of just on the netbook. Yegge <a href=\"http://steve.yegge.googlepages.com/effective-emacs\">suggests removing the GUI right away</a>, but it actually takes a while before you get used to using the keyboard for <em>everything</em> (and in fact, if you want inter-application copy/paste and you don't know enough elisp to change how the default kill/yank functions work, you <em>have</em> to use the corresponding menu items). I'm far enough along that I don't need the training wheels anymore, and it gives me another 5-6 lines of editor space on screen, so they're gone.</li>
<li><span class=\"code inline\">iswitchb mode</span> is on by default. It adds one keystroke to the process of making a buffer not tied to a file, but it makes finding existing buffers easy enough that it's worth the trade.</li>
<li>Lots more mode-includes including <span class=\"code inline\">htmlize</span>, my own <span class=\"code inline\">blog-mode</span> (which I'm using <em>right now</em> to type this), language support for Erlang, Scheme, and Common Lisp (php and JavaScript have been there for quite a while), and hooks into Git mode.</li>
<li>Parentheses are being highlighted by default. I get the feeling it was made for Lisp coding, but it's actually even more useful in JavaScript with jQuery, where a code block might look something like</li>
</ol>

<pre>$(<span style=\"color: #8b2252;\">'#something'</span>).click(<span style=\"color: #a020f0;\">function</span> () {
   stuff = [$(<span style=\"color: #008b8b;\">this</span>).attr(<span style=\"color: #8b2252;\">'id'</span>), $(<span style=\"color: #008b8b;\">this</span>).attr(<span style=\"color: #8b2252;\">'class'</span>), $(<span style=\"color: #008b8b;\">this</span>).attr(<span style=\"color: #8b2252;\">'src'</span>)];
   <span style=\"color: #a020f0;\">for</span>(i <span style=\"color: #a020f0;\">in</span> stuff){
      clickFunction(stuff[i]);
   }});</pre>


<p>In these cases, parenthesis highlighting (which also highlights [] and {}) is critical for making sure you close them all properly, and in the right order. You could probably do it by hand without help, but I wouldn't envy you that task.</p>
<p>EDIT: After upgrading my desktop, I went to upgrade my other machines to 9.10. The HP Mini 1035nr upgrade was not seamless. Almost, but not quite. I had to run </p>
<pre>sudo apt-get install --reinstall bcmwl-kernel-source</pre>
<p>to enable the wireless card.</p>
"))
((5202 3723 533462000) :INSERT (7 :POSTED 3476149200))
((5202 3723 533467000) :INSERT (7 :TAG :EMACS))
((5202 3723 533471000) :INSERT (7 :TAG :PROGRAMMING-ENVIRONMENT))
((5202 3723 533867000) :INSERT (8 :TITLE "New Keyboard"))
((5202 3723 533877000) :INSERT (8 :FILE "define-peripherals.html"))
((5202 3723 533881000) :INSERT (8 :EDITED 3610022331))
((5202 3723 533885000) :INSERT
 (8 :BODY "<p>I got something yesterday</p>

<iframe width=\"420\" height=\"315\" src=\"http://www.youtube.com/embed/vuymT9lglJo\" frameborder=\"0\" allowfullscreen></iframe><a href=\"#foot-Thu-Jan-19-125059EST-2012\" name=\"note-Thu-Jan-19-125059EST-2012\">[1]</a>

<p>It's awesome. Not only is it about 1/3 the size of my current <a href=\"http://www.newegg.ca/Product/Product.aspx?Item=N82E16823109160&cm_re=microsoft_keyboard-_-23-109-160-_-Product\">Microsoft-made behemoth</a>, but it types better too. As in the key action is much smoother, and hitting the spacebar takes exactly as much effort as hitting a regular key (my HP mini managed this too, but the space on that MS ergonomic board is noticeably harder to press down than any of the others).</p>
<p>Now that I've had a chance to compare these two IRL, I have to say that the <a href=\"http://store.apple.com/ca/product/MB869LL/A?fnode=MTY1NDA1Mg&mco=MTA4Mzc5NDY\">Apple mini-keyboards</a> are really no substitute. They have the standard apple spring system, which isn't terrible, but it's nowhere near as good. That's a clear win for the Happy Hacking Lite 2.</p>
<p>The layout choices are really personal preference. The ESC key on HH is where ` is on the Mac, the area around the \\ is a little shuffled so that Delete ends up directly above return (which doesn't usually bother me since I've been trying to prefer backward-word-kill to backspace), and the Alt and Cmd keys switched places. That last one is a problem, but they give you a switch at the back of the keyboard to reverse their positions back to keyboard standard. I just used it and am thinking no more about it. The other active switch on my little keyboard is the one that makes the Delete key act as backspace. (Even though I use backward-word-kill, it's still more common to backspace than to delete).</p>
<p>I am keeping the mac keyboard for the Mac though; the OS X version of HH2 has an elephant-style return key which I dislike, so I'm not about to shell out another $100 bucks for one (I may eventually burn $300 or so to get my hands on a <a href=\"http://www.amazon.com/Happy-Hacking-Keyboard-Professional2-Black/dp/B000EXZ0VC/ref=sr_1_2?ie=UTF8&s=electronics&qid=1267677806&sr=8-2\">Happy Hacking 2 Pro</a>, but not any time soon).</p>
<p>A second peripheral I tried out it the <a href=\"http://www.tigerdirect.ca/applications/SearchTools/item-details.asp?EdpNo=5574658&CatId=140\">Bamboo Touch</a> (not the <a href=\"http://www.tigerdirect.ca/applications/SearchTools/item-details.asp?EdpNo=5574660&CatId=140\">Pen and Touch</a>, which is actually a separate product).</p>
<p>That one sucks balls. It's basically a trackpad that lets you use two fingers. I don't know about you, but when I'm using a computer that has a trackpad, the first thing I do is plug in a mouse or trackball. The reason I bought the thing is that I thought it acted like a tablet, except without a pen. And no, it's really not the same thing. The difference is that you never have to lift your pen from the tablet to recenter it, the way you used to with old mice.</p>
<p>If you tap the lower left area of a tablet, your cursor automagically appears on the lower left of your screen. Likewise, if you tap the top right corner of your tablet, the cursor teleports to the top right corner of your screen. If you use your finger to tap on your Bamboo Touch ... your cursor stays where it is and invokes the click event. In other words, in order to get the cursor from the top right corner of the screen to the lower left, you start with your finger at the top right, drag it towards the lower left until you inevitably run out of room, then raise your finger, put it back at the top right and repeat this process 'till you get where you're going. On a large screen, you might have to do this 4 to 5 times. Teleporting is really the only reason I use tablets instead of mice; once you get used to the behaviour, it saves you seconds per mouse trip. </p>
<p>This is not a customization accident, or mistake. This is <a href=\"http://www.facebook.com/topic.php?uid=7616161690&topic=10936\">the intended behaviour</a>, and that link will take you to a page where a Wacom rep is trying to happily explain how easy it is to get your pen to behave in \"mouse mode\". In other words, the only thing you can do is disable the behaviour you'd like.</p>
<p>Until they resolve this, I'm sticking with my tablet and trackball, thank you.</p>


<hr />
<h5>Footnotes</h5>

<p>1 - <a href=\"#note-Thu-Jan-19-125059EST-2012\" name=\"foot-Thu-Jan-19-125059EST-2012\">[back]</a> - I closed my old account in a vain attempt to associate it with this gmail account. It was an unboxing of a <a href=\"http://pfuca-store.stores.yahoo.net/haphackeylit1.html\">Happy Hacking 2 Lite keyboard</a></p>
"))
((5202 3723 533949000) :INSERT (8 :POSTED 3476581200))
((5202 3723 533955000) :INSERT (8 :TAG :HARDWARE))
((5202 3723 533960000) :INSERT (8 :TAG :PROGRAMMING-ENVIRONMENT))
((5202 3723 533965000) :INSERT (8 :TAG :PROGRAMMING-INTERFACES))
((5202 3723 534341000) :INSERT (9 :TITLE "Machines at Work"))
((5202 3723 534350000) :INSERT (9 :FILE "define-work.html"))
((5202 3723 534354000) :INSERT (9 :EDITED 3610131927))
((5202 3723 534358000) :INSERT
 (9 :BODY
  "<p>So lately, I've been thinking about my work setup for hacking, and it occurs that the environment is in need of an overhaul. I've been using Windows and Eclipse, for god's sake. That's not even really excuseable. I mean yeah, I can hide behind the fact that my business card says \"Graphic Designer\" and take the perspective that it's the responsibility of our lone network admin to figure shit out for me, but that seems less satisfactory than doing something about it. It's not really perceived as a big deal; the rest of the team uses windows too (and our resident x-programmer is at once a Windows and Java fanatic), so there's bound to be little help and perhaps a little resistance. Here are the big reasons I'm thinking about switching now:</p>

<ol>
  <li>We're planning to upgrade OSes soon anyway; it'll probably end up being to Windows 7, but I think I can at least change a couple of minds in IT given that our production servers are in fact running on Linux anyway.</li>
  <li>Between Windows, the anti-virus software, outlook and some other utilities, my boot time is in the area of 4 minutes. That doesn't sound too bad, except that my home workstation (which is ostensibly just for fun) boots in under 20 seconds. Also, because it's windows ...</li>
  <li>... I have to reboot it at least once a day or it starts getting sluggish to the point of unuseability. Just. Perfect.</li>
  <li>I get the feeling that our admin could fix this had he taken levels in programmer, but Linux is much more easily scriptable. Specifically, the setup process is scriptable. Because of the <code>apt-get</code> facility (and our particular mix of technologies), it's perfectly possible for me to write a shell-script to set up a Linux dev machine from scratch. It's basically the standard LAMP stack plus Tomcat and Java 6. Eclipse and Subversion might take a bit of configuring, but since I use GIT (which can seamlessly interoperate thanks to git-svn) and Emacs, my install is essentially <span class=\"code inline\">apt-get emacs23 git-core git-svn</span>. Hell, I've even got lines in there to do a full checkout of the trunk and latest branch once git is installed.</li>
  <li>The current \"solution\" is a base image (Windows with an unconfigured outlook, and printer drivers) which the dev then has to spend about a day (two or three the first time) prepping to get up and running. This leaves something to be desired.</li>
</ol>

<h3>Emacs ping</h3>

<p>I haven't been doing any hardcore elisp hacking for the last few days, but I still make it a habit to eliminate inefficiencies. I ended up removing <span class=\"code inline\">uniquify</span> from my <span class=\"code inline\">.emacs</span>. It wasn't getting used (and I noticed a little note it came with to the effect that it has some slight conflicts with <span class=\"code inline\">iswitchb mode</span>, which I <em>do</em> make extensive use of). I also ripped out the option in <span class=\"code inline\">smart-tab</span> that has it use <span class=\"code inline\">hippie-expand</span>. It was much too overzealous in various places.</p>
<p>On the additions side, blog-mode now auto-closes tags when I type the \">\" character (which is a behavior I'm thinking about just hooking into HTML mode), and I set the otherwise undefined <span class=\"code inline\">C-'</span> to <span class=\"code inline\">comment-or-uncomment-region</span>. This is another one of those times where it would have served me quite well to read up on stuff as a first reflex. I ended up reading about <span class=\"code inline\">comment-region</span> and <span class=\"code inline\">uncomment-region</span>, then spending 20 minutes or so hacking together a woefully inadequate way of getting one key-press to toggle commented state for a given region, then I stumbled across <span class=\"code inline\">comment-or-uncomment-region</span> on an unrelated trip through <span class=\"code inline\">apropos</span>.</p>
<p>Bottom line is, I don't think I'll ever be done optimizing, but I'm ok with that. This is an advantage of Emacs which I'm happy to have.</p>
<p>A little while ago, while I was still using Gedit for my typing needs, I decided that I really wanted non-broken frames (\"winows\" in Emacs parlance) in my editor, and I spent a good two or three hours searching around for an add-on to it that would do what I wanted. It's been a while so the situation might have changed, but as I recall, there was one add-on that added a single, secondary frame that basically got treated as a second instance of Gedit (except it didn't auto-save, or ask you to save any changes when you quit the main Gedit window), and a second add-on that did precisely what I wanted but wouldn't be available for another year and a half. This illustrates the common state of editors: they're great if you ignore their limitations or resign yourself to living with them.</p>
<p>Emacs is different; because hacking on it is central to the idea, there's very rarely a feature you could imagine that you can't also implement yourself with a few hours of typing. Even better than that, small changes are trivial to add. That tag-closing function I whipped up that auto-fires on my typing\">\"? That took about 40 seconds to add. And no, it's not done yet, I'll probably change its binding or behavior, but the fact that I <em>can</em> is awesome. </p>
<p>It feels very gratifying that the cycle of </p>
<ul>
  <li>Think up new feature</li>
  <li>Code it</li>
  <li>Test it</li>
  <li>Use it</li>
</ul>
<p>could be so fast.</p>

<span style=\"font-weight:bold;\">Addendum:</span>
<p>I decided to change up the interaction on that auto tag-close function to fire when I type \"&lt;/\" rather than \">\" (which is to say, when I type \"/\", Emacs checks if the previous char is \"<\", and fires the tag-close event if it is, otherwise it just inserts \"/\" as usual).</p>
																																	  <p>Closing tags on \">\" with a save-excursion is what Eclipse does as I recall, so I sort of assumed it would be the correct behavior. It turns out that if I have any say in the matter, it's vastly preferable to have my editor close that tag when I'm already  half-way into it. I may change it back again later, depending on what I notice during actual use, but this way seems to grant me more control so far.</p>

<!--  LocalWords:  scriptable interoperate unconfigured uncomment
 -->
"))
((5202 3723 534441000) :INSERT (9 :POSTED 3477099600))
((5202 3723 534445000) :INSERT (9 :TAG :EMACS))
((5202 3723 534448000) :INSERT (9 :TAG :PROGRAMMING-ENVIRONMENT))
((5202 3723 534456000) :INSERT (9 :TAG :PROGRAMMING-INTERFACES))
((5202 3723 534791000) :INSERT
 (10 :TITLE "Minor Ergonomics, and Boring Office Update"))
((5202 3723 534799000) :INSERT (10 :FILE "ergonomics.html"))
((5202 3723 534803000) :INSERT (10 :EDITED 3610310222))
((5202 3723 534808000) :INSERT
 (10 :BODY "<p>I got something new.</p>

<img src=\"/static/img/keyboard-tray.jpg\" class=\"middle\" alt=\"Keyboard tray box\" />

<p>Pretty good as far as keyboard trays go, but I still find myself wanting one of those squishy wrist-rest pads. The default wrist bit on this tray isn't <em>terribly</em> uncomfortable, but it doesn't quite compress right. And for all the awesome work PFU did on <a href=\"http://www.fentek-ind.com/happyhacking.htm\">this little beast</a> in terms of key placement/spacing/spring system, they didn't put any effort at all into making the wrist comfortable. That's the one thing I miss from my <a href=\"http://www.microsoft.com/hardware/mouseandkeyboard/productdetails.aspx?pid=043\">old behemoth</a> (which is now comfortably at the office). I still prefer the HHL2 for speed; the keys are actually spaced close enough together (and consistently sized enough) that I get a fairly significant boost just from using it (on average 5 wpm). </p>
<p>It's a +5 Keyboard of Speed. Together with my +1 Trackball of Accuracy and +2 Monitors of Insight, as well as the Hard Drive of Premonition, my home machine is now <em>significantly</em> better, in all ways, than my work setup.</p>
<p>Ahem.</p>
<p>There's this little slide-out sub-tray for the mouse, but since I have a tiny keyboard and a trackball, both of my peripherals fit comfortably on one half of the main area. I could use it for drinks I guess.</p>
<p>The only complaint I have is that Fellowes are fucking liars. In fact, <em>anyone</em> that tells you their keyboard tray has \"easy installation\" is a fucking liar, and you can tell them I said so. It was a pain in the ass. Granted, in this case it was worth it for the extra space and long-term comfort I got out of it, but there was significant short-term <em>dis</em>comfort.</p>

<h3>Office Follow-Up</h3>
<p>Almost done configuring my dev environment for work. It's been bearable for a few days actually, so I've managed to get some work done at least, but there's still kinks here and there. The current plan is to get everything I need together in one place (and for the record, it's about twice as much as the documentation would have me believe I need), then create a bootable flash-drive with a dev-environment shell script to take care of everything other than the OS installation. I should be able to announce a dev-environment-on-a-stick (with your choice of editor) next week.</p>

<h3>Still working with Emacs</h3>
<p>I'm still updating my .emacs and associated files. The other day, I finally got off my ass and installed <a href=\"http://ourcomments.org/Emacs/nXhtml/doc/nxhtml.html\">nXhtml mode</a>. Which I'm not using right now, incidentally, I prefer the vanilla <span class=\"code inline\">html-mode</span> for my everyday editing, but nXhtml provides a lot of much-needed functionality for editing PHP, JSP and mixed HTML/JS/CSS files (I try to minimize that last group, but you still run across them sometimes).</p>
<p>I'm also adding little convenience functions. Things like <span class=\"code inline\">git-svn-fetch</span> and <span class=\"code inline\">git-svn-commit</span> which let me seamlessley interoperate with my office-mates without giving me the giant headaches associated with Subversion use. I'm sure it's very nice for people that are used to CVS and VSS, but I <em>grew up with</em> <a href=\"http://git-scm.com/\">GIT</a> and <a href=\"http://mercurial.selenic.com/\">Mercurial</a>. If you think I'll go back to centralized source control without a fight, you've got another thing coming.</p>
<p>Other new stuff includes in no particular order <span class=\"code inline\">ant-build-project</span>, <span class=\"code inline\">restart-tomcat</span>, <span class=\"code inline\">stop-tomcat</span>, and <span class=\"code inline\">deploy-static</span>. That last one is actually a copy of a couple ant tasks we have, which essentially just copy a whole bunch of css, js, jpg and jsp static files from our local repo to our local tomcat deployment. The thing is, the build file copies in the naive sense, whereas my emacs function uses <span class=\"code inline\">rsync</span>, and is therefore about ten billion times faster.</p>
<p>Most of that last set wouldn't have been possible without a little help from <a href=\"http://stackoverflow.com/\">StackOveflow</a>. I guess no-one's really thought about it, so Emacs doesn't have a built-in <span class=\"code inline\">sudo-shell-command</span>. Meaning I had to write my own (which is still better than waiting for the maintainer of my IDE to patch their oversight). Here's what I came up with after consulting the overflow boards:</p>

<pre>(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">sudo-shell-command</span> (command)
  (shell-command (concat <span style=\"color: #bc8f8f;\">\"echo \"</span> (read-passwd <span style=\"color: #bc8f8f;\">\"Password: \"</span>) <span style=\"color: #bc8f8f;\">\" | sudo -S \"</span> command)))

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">chain-sudo-shell-command</span> (command-list)
  (<span style=\"color: #a020f0;\">let</span> ((prefix (concat <span style=\"color: #bc8f8f;\">\"echo \"</span> (read-passwd <span style=\"color: #bc8f8f;\">\"Password: \"</span>) <span style=\"color: #bc8f8f;\">\" | sudo -S \"</span>)))
    (mapcar (<span style=\"color: #a020f0;\">lambda</span> (a-command)
              (shell-command (concat prefix a-command)))
            command-list)))
</pre>

<p>I use the first one if I can because the second one is more dependant on side-effects, and it only shows the output from the last command it recieved (so if I misspelled something in command 3 of 6 that I pass to it, I'll never know until it screws up something I'd much rather not get screwed up).</p>
"))
((5202 3723 534881000) :INSERT (10 :POSTED 3477873600))
((5202 3723 534885000) :INSERT (10 :TAG :ELISP))
((5202 3723 534903000) :INSERT (10 :TAG :EMACS))
((5202 3723 534916000) :INSERT (10 :TAG :HARDWARE))
((5202 3723 534920000) :INSERT (10 :TAG :PROGRAMMING-ENVIRONMENT))
((5202 3723 534923000) :INSERT (10 :TAG :PROGRAMMING-INTERFACES))
((5202 3723 535204000) :INSERT (11 :TITLE "On Quitting"))
((5202 3723 535212000) :INSERT (11 :FILE "exit.html"))
((5202 3723 535214000) :INSERT (11 :EDITED 3610022331))
((5202 3723 535217000) :INSERT
 (11 :BODY
  "<p>I haven't really had time to work on personal projects the past while. Other personal projects and various contract projects keep on getting in the way, which is sad, but necessary. </p>

<p>The reason for the title here isn't that I'm quitting any of them. Far from it. As of next week, my current employer will be my former employer. It was fun stuff for a little while, and it taught me a lot about development practices, about building systems, about maintaining systems, and about development methodologies. Mostly, it taught me what not to do, which is valuable in a sense. I'm off to another company that needs a hacker/UI guy, where if all goes well, I'll get to put together a few products and a team for them. I'll do my best not to repeat history in any of the fundamentally broken ways I've observed. It was a good job for a while though, I don't want to take that away from them. I enjoyed myself. The context switches were enough to keep me focused and engaged for a time. Problem is, really, there was a hard cap on how much I could grow for a bunch of woefully common reasons, most of which I've already blogged about here. Training was non-existent. So was downtime, but it never really got pitched that way so it was hard to admit from inside the vortex. At the cycle post-mortem, we had this ceremony of listing all the things that were good and all the things that were bad. There was always a note to the effect of \"Good: team really stepped up and pulled together\" (read: \"the team worked truly excessive overtime to hit the obviously over-inflated goals which got handed down from on high\"). After the third time, I stopped bothering to point out that this was a ridiculous assertion. That there was nothing Good about voluntary slavery, or massive overtime. That really, by planning only slightly more effectively, we could reduce the amount of work necessary while increasing the quality of output and completely obviate the need for \"really stepping up\". It's a hard position to take when your teammates are all utterly convinced that overtime is as inevitable as object-orientation and IDE addiction. Which says a thing or two about a thing or two.</p>

<p>I kept getting misty-eyed this week. They're my friends, of course, and that won't change just because I'm taking my skill to another employer. Why would I ever leave? Ohmygod, what have I done?! I loved it here! It's a land of gumdrops and rainbows and unicorns where nothing can possibly go wrong!! It was more or less at that point that I stumbled into our sprint-planning meeting about 15 minutes late. I took my seat quietly, and checked out the room. Yup, they were performing The Ritual, and they were onto \"What went badly\". Sure enough \"Really stepped up/pulled together\" was over on the \"Good\" side, and \"Too many last-minute objective changes, not enough testing\" was already listed under the bad pile. I watched a lot of the old problems get paraded out and discussed. Then we got to the what's up next slide. And I'll be goddamned if I didn't suddenly feel a rush of relief that it was my last week as I was staring at the four months worth of work (and counting) that we were expected to finish in the next month. </p>

<p>Someone once told me that I wouldn't make a good leader because I'm too negative. I always have the \"Well, we're gonna take that hill, but die doin' it\" attitude. I'm not sure anyone could blame me, because I've seen the death-march-inducing, motivation-sapping effects of over-optimism, and I'll stick to my way thanks. Pessimism keeps your team from getting killed.</p>

<p>Anyway, it's not my problem anymore. Perspective is kind of nice that way.</p>

<p>Hopefully next week, I get to get back to hacking. I'll need to update my resume and portfolio, and maybe re-jig my website now that I know more or less what the fuck I'm doing. I don't really feel like a Graphic Designer anymore. Not sure if I ever did, but it's even more obvious after that stint in IT. I need to make a shirt that reads </p>

<pre>\"Human, Chaotic Good
Illustrator 5/Programmer 4/Fighter 2\"
</pre>
"))
((5202 3723 535268000) :INSERT (11 :POSTED 3480292800))
((5202 3723 535271000) :INSERT (11 :TAG :GENERAL-PROGRAMMING-THOUGHTS))
((5202 3723 535273000) :INSERT (11 :TAG :IDEA-PEELING))
((5202 3723 535282000) :INSERT (11 :TAG :SPECULATION))
((5202 3723 535582000) :INSERT (12 :TITLE "What happened to the Neutrino?"))
((5202 3723 535590000) :INSERT (12 :FILE "what-happened-to-the-neutrino.html"))
((5202 3723 535598000) :INSERT (12 :EDITED 3610022331))
((5202 3723 535602000) :INSERT
 (12 :BODY "<p>I have absolutely no fucking idea.</p>

<p>There <a href=\"http://www.techspot.com/review/170-ocz-neutrino-netbook/\">are</a> <a href=\"http://www.laptopmag.com/review/laptops/ocz-neutrino.aspx\">reviews</a> <a href=\"http://techreport.com/articles.x/16729\">abound</a> around the net of this cool little beast. There are at least two <a href=\"http://www.youtube.com/watch?v=GNqpiGLdzNc\">unboxing</a> <a href=\"http://www.viddler.com/explore/TestFreaks/videos/293/\">videos</a> and various specs and product shots, and various onine stores <a href=\"http://www.newegg.com/Product/ProductList.aspx?Submit=ENE&DEPA=0&Order=BESTMATCH&Description=ocz+neutrino&x=0&y=0\">list it</a> (granted, as \"out of stock\", but still, it's not a ghost). No stores carry them. No online stores have them in stock. There were a grand total of two listed globally on Ebay (one of those is now sitting in the Canadian customs office in Toronto, waiting to get shipped to me next week).</p>

<p><a href=\"http://www.ocztechnology.com/products/diy_notebooks/ocz_neutrino_10-diy_netbook\">OCZ's product page</a> is, shall we say, unhelpful. The interesting bit is that they still have a <a href=\"http://www.ocztechnology.com/aboutocz/press/2009/328\">press release circa 2009</a> that lists OCZ as a \"DIY netbook solution\", and contains a link to that product page I mentioned. Their <a href=\"http://www.ocztechnology.com/products/diy_notebooks/\">DIY notebook section</a> lists nothing, and their End Of Life products make no mention of the pint-sized hulk. There's plenty of noise on the <a href=\"http://www.ocztechnologyforum.com/forum/forum.php\">OCZ Forum</a> (including a guide for <a href=\"http://www.ocztechnologyforum.com/forum/showthread.php?56406-Running-OS-X-Leopard-on-Neutrino-UPDATED-to-10.6.2&highlight=neutrino\">getting OS X running on the Neutrino</a>, which doesn't surprise me because with the right extra gear, that netbook could actually be more powerful spec-wise than my iMac desktop).</p>

<p>That's it though. Had I not lucked out on Ebay, I wouldn't be able to get one of these, and I'm not sure why given that it doesn't seem to be discontinued.</p>

<p>Why the questions? I'm glad you asked. It's because this seems like such a badass idea that I have to support it. They made a netbook you could feed commodity parts. No special ram, none of this HP Mini expansion port bullshit where they try to sell you a $70 cable so that you can connect it to an <a href=\"http://accessories.us.dell.com/sna/products/Displays/productdetail.aspx?c=us&l=en&cs=19&sku=320-8321\">external monitor</a>, no 1.8 inch hard drives. It's all standard laptop gear, so if you're a computer nerd like me, you already have the components lying around to make it cool. The units come without RAM or HHD, but because it uses standard 2.5 inch SATA drives, you can use some standard laptop RAM and SSD and get the thing up to standard laptop performance level. It <em>could</em> democratize netbooks in a pretty fundamental way, and remove much of the need for traditional laptops, <em>if</em> people could get it.</p>

<p>So yeah. Here's hoping this isn't some sort of widely-spread but poorly-executed conspiracy to keep the Neutrino out of users' hands.</p>
"))
((5202 3723 535647000) :INSERT (12 :POSTED 3480465600))
((5202 3723 535653000) :INSERT (12 :TAG :HARDWARE))
((5202 3723 535658000) :INSERT (12 :TAG :SPECULATION))
((5202 3723 536111000) :INSERT (13 :TITLE "On Neutrinos"))
((5202 3723 536122000) :INSERT (13 :FILE "on-neutrinos.html"))
((5202 3723 536127000) :INSERT (13 :EDITED 3610022331))
((5202 3723 536131000) :INSERT
 (13 :BODY
  "<p>I'm typing this on my badass new netbook, and ironically, hating every second of it. Not that it's a bad notebook, it's just that I haven't had the time to bend it to my will yet, so this is coming to you live from Windows 7's Notepad instead of my usual Ubuntu/Emacs combo.</p>

<p>So a comparison to my previous netbook of choice is in order (for those of you just tuning in, I used to tote an HP Mini 1035nr which my GF is now probably going to inherit).</p>

<p>In descending order of importance (to me anyway)</p>

<p>OCZ Neutrino:</p>

<ul>
  <li>Has a matte screen (so it's better than the HP right there as far as I'm concerned)</li>
  <li>Takes standard 2.5 inch HDDs (not that it mattered, since the Ebay unit I got came with its own 64gb SSD)</li>
  <li>Has standard VGA out</li>
  <li>Easier to open up and tinker with</li>
  <li>Has a better placed power button (where you'd expect, just above and to the left of the keyboard instead of on the front of the unit)</li>
</ul>

<p>HP Mini 1035nr:</p>

<ul>
  <li>Has a bigger keyboard (not much bigger, but it still took me about an hour to get used to the switch)</li>
  <li>Has evenly sized keys (the Neutrino does too, for the most part, but the punctuation keys in the lower right are all narrower than the rest. Again, nothing huge, but there is a noticeable difference to get used to, and it's a lot easier to accidentally type \"./\" instead of \".\")</li>
  <li>Lighter and smaller (the Neutrino has about a third of a pound on the HM Mini, and it's about a half-inch taller, presumably to keep such a roomy interior for mods)</li>
</ul>

<p>The biggest loss I'll be taking is actually the keyboard. Not quite a huge deal, but enough for me to try checking out how easy it would be to do a keyboard transplant here. The gains are monstrous. More RAM, bigger (and much, MUCH faster) HDD, and a matte screen (didn't think it would make as much of a difference as it is, frankly). The only other difference is the track-pad, which I didn't put as an advantage or disadvantage for either. The Neutrino has the classic laptop-style pad with buttons directly blow it, while the HP mini has a button to either side of the trackpad. That lets them save some space, but it's also easier to use once you get used to it.</p>

<h3>5 Keyboard Commandments</h3>

<p>I've been kind of obsessed with keyboarding lately, and I've come up with a list of things that I've seen make up a good keyboard. I doubt I'll ever be in a position to design my own for mass-manufacture, so here's what I found out. Hopefully, people in a position to do something about it read this before it's too late.</p>

<h2>1. Thou shalt not fuck with key sizes.</h2>

<p>Except for the arrows/Tab/CTRL/Shift/Caps/Return (and F-keys if present), all keys should be the same size.</p>

<h2>2. Thou shalt not squander the home row.</h2>

<p>No one, including every office-drone I've ever observed (and I've had occasion to observe a LOT, across many demographics) ever EVER uses Caps Lock. I've seen it exactly once, and it was by accident. You'd think that those all-caps posts you see around the net owe their existence to the CapsLock. If you wanted to preserve that particular segment of our culture, rest assured that CapsLock has nothing to do with it; from observation, people tend to use their off hand to hold down shift and type with only their main hand. Seriously. There is no reason to crowd the home row with something no one uses. By all means, put your precious CapsLock somewhere, but make sure it's out of the way.</p>

<h2>3. Thou shalt consider the wrists.</h2>

<p>My one complaint about the Happy Hacking line of keyboards is that they <em>necessitate</em> the purchase of squishy wrist-pads. This is a big reason that I still have my MS Behemoth with me; it's built for all-round typing comfort. So I prefer that comfort when I know I'm typing for hours at a time, but I like the Happy Hacking for bursts of intense typing (because I can get a higher speed with the smaller keyboard area). Interestingly, laptops and netbooks solve this problem by default because the body of the unit tends to be much deeper than the keyboard, so you can comfortably rest your wrists on the remaining body. Apple keyboards try to solve the same problem by keeping the lowest possible profile, so that you can effectively rest your wrists on the surrounding desk space. It work or not depending on who you talk to.</p>

<h2>4. Thou shalt not take up an acre.</h2>

<p>Make the keyboard as small as possible (not smaller). Don't mess with key-sizes, and by all means make larger-keyed keyboards for people with giant hands, but as a rule, the keyboard should take up as little space as possible. This means no extraneous \"Mail\" or \"Calculator\" key, no number pad/arrow cluster where you can get away with it, and no extraneous space between keys. This works to make typing faster (because your fingers don't have as far to travel to the next keystroke), and it also takes away some of the pain of mouse/trackball use (because you can keep your pointing device closer to your keyboard, thus reducing the time it takes to switch). This also means avoiding the break where possible; that's a comfort optimization that costs speed.</p>

<h2>5. Thou shalt assign Home, PgUp, PgDown, and End to the Fn-Arrows</h2>

<p>This is simple. It makes sense. Fn+Left takes you to the beginning of a line, Fn+Right to the end, Fn+Up/Down move you up or down a page respectively. DO NOT BIND Fn+Arrows TO SOMETHING STUPID LIKE VOLUME CONTROL OR BRIGHTNESS. It's not clever, it sucks. And if you do it, YOU suck.</p>

<p>I'm tempted to say \"6. Thou shalt not endorse the elephant-style return key\", but that may actually be personal preference. I prefer the single-line-height key on the home row, but that's just because I'm used to it.</p>
"))
((5202 3723 536223000) :INSERT (13 :POSTED 3480984000))
((5202 3723 536229000) :INSERT (13 :TAG :GENERAL-PROGRAMMING-THOUGHTS))
((5202 3723 536235000) :INSERT (13 :TAG :HARDWARE))
((5202 3723 536239000) :INSERT (13 :TAG :PROGRAMMING-ENVIRONMENT))
((5202 3723 536248000) :INSERT (13 :TAG :SPECULATION))
((5202 3723 536650000) :INSERT (14 :TITLE "On Managing Windows"))
((5202 3723 536658000) :INSERT (14 :FILE "on-managing-windows.html"))
((5202 3723 536661000) :INSERT (14 :EDITED 3610022331))
((5202 3723 536664000) :INSERT
 (14 :BODY
  "<p>So I've had my neutrino up and running for a few days now. It's been quite fine. Other than one or two random hiccups in the <a href=\"http://www.ubuntu.com/getubuntu/download-netbook\">netbook remix of Ubuntu 9.10</a>, it's been smooth sailing. Startup is easily three times as fast as my <a href=\"http://www.shopping.hp.com/go/mini\">HP Mini</a> was (due in no small part to <a href=\"http://www.newegg.ca/Product/Product.aspx?Item=N82E16820211353&cm_re=2gb_laptop_ram-_-20-211-353-_-Product\">the</a> <a href=\"http://www.newegg.ca/Product/Product.aspx?Item=N82E16820167014&Tpk=intel%20solid%20state%2064gb\">components</a> the Neutrino can take). I'm still gobsmacked by how much actual difference the matte screen makes, by the way. My HP mini travelled with me quite a bit, and it tended to get a lot of gunk on its screen (judging by the pattern, it was being picked up off the keyboard when I closed it, despite the fact that I kept a cleaning cloth between the board and screen), it also reflected in all sorts of lighting conditions, to the point that I couldn't actually use it on the bus or streetcar a large part of the time. The <a href=\"http://www.newegg.ca/Product/Product.aspx?Item=N82E16856172009&cm_re=neutrino-_-56-172-009-_-Product\">Neutrino</a> doesn't have either problem. The matte screen takes care of most reflections, and it's slightly inset, which means the surface never makes contact with the keyboard.</p>

<p>Sound and webcam are both much better on the new thing, though I don't have much occasion to use either in my daily activities. I also haven't gotten to testing out how it works with a second screen. Again, really no call for it. When I'm out and about, carrying a second monitor is impractical, and as comfortable as the neutrino is, when I'm at home I still prefer my desktop colossus.</p>

<p>What I have found is that <a href=\"http://xmonad.org/\">Xmonad</a> helps. I'm still not a <a href=\"http://www.haskell.org/\">haskeller</a>, though it's quite tempting to drop everything and learn it given what I keep reading about its performance, and Xmonad may finally push me to pick it up. I doubt I'll ever use it on a desktop machine (or for that matter, on my netbook if I have it hooked up to multiple monitors). It's set up to be minimalistic. Which means that a whole bunch of things you take for granted in GNOME need to be done manually (like connecting to your local wireless network, or setting up keyboard shortcuts/switching out caps-lock, or setting up a way to launch programs other than the command line). It's really all stuff I should know anyway, but I don't need to with my usual routine.</p>

<p>Just to remind everyone, I live in exactly three applications (with two more coming out very rarely for specific purposes). The three are <a href=\"http://www.gnu.org/software/emacs/\">Emacs</a>, <a href=\"http://www.gimp.org/\">GIMP</a> and <a href=\"http://www.mozilla.com/en-US/firefox/firefox.html\">a</a> <a href=\"http://www.google.com/chrome/?brand=CHMB&utm_campaign=en&utm_source=en-ha-na-us-sk&utm_medium=ha\">browser</a> (which one varies depending on what exactly I'm doing at the time). On some rare occasions, I bust out <a href=\"http://www.inkscape.org/\">Inkscape</a> (to edit vector images) and <a href=\"http://www.plt-scheme.org/\">DrScheme</a> (for the fantastic macro-stepper). Ok, yes, fair, I also use <a href=\"http://klavaro.sourceforge.net/en/\">Klavaro</a> for keyboard training and <a href=\"http://projects.gnome.org/rhythmbox/\">Rhythmbox</a> for tunes. The first one gets run once per day, and the second is a fire-and-forget program. </p>

<p>You'll notice that Terminal is no longer in that list. That's because these days when I need to do something terminal related, I either whip up a quick Emacs function and bind it to an appropriate key-combination (if it's a command I find myself using a lot), or I use <span class=\"code inline\">M-x term</span> rather than hopping out of Emacs, possibly hitting <span class=\"code inline\">C-x 3</span> first to get another vertical window fir my terminal session. In other words, the way I use my computer, <em>Emacs is my window manager</em>. GNOME is just there to take care of the background bullshit like connecting to wireless on my behalf, keeping the system clock ticking, and letting me know when there are updates to be had. Other than my Emacs monitor, all screens are taken up by exactly one window, and I tend to organize several workspaces (each oriented for a specific task) so that I can switch as seamlessly as possible.</p>

<p>So I don't see Xmonad usurping my window-manager of choice.</p>

<p>That said, it has one very real advantage to GNOME, and that's a lack of status and toolbars. That's two additional vertical lines of text. It doesn't sound like much, but it's worth quite a bit on a 10\" screen. Since I never really connect to wireless nets while I'm on a bus/streetcar/subway, the advantages of GNOME make no difference there. So, while I'm on the go, Xmonad is a superior window manager for my netbook. Granted, all I do is run the one instance of Emacs, but that's all that's on my screen. No toolbars, no status bars, just one giant Emacs window with minibuffer. You'd be surprised how cool that feels if you're a big enough nerd.</p>
"))
((5202 3723 536734000) :INSERT (14 :POSTED 3481502400))
((5202 3723 536737000) :INSERT (14 :TAG :PROGRAMMING-ENVIRONMENT))
((5202 3723 536964000) :INSERT (15 :TITLE "Apache Blues and General Update"))
((5202 3723 536972000) :INSERT (15 :FILE "apache-blues.html"))
((5202 3723 536986000) :INSERT (15 :EDITED 3610022331))
((5202 3723 536989000) :INSERT
 (15 :BODY "<p>Apache.</p>
<p>Sucks.</p>
<p>Balls.</p>
<p>It took me about four hours today to figure out why the hell I couldn't use my localhost to test pages in my home directory. It's never come up before because every single other computer I've set this up on has just worked right off the bat. It turns out that what I had to do is run the command <span class=\"code inline\">chmod o+x ./</span> in the home directory. So I guess this is actually an example of how Unix sucks balls? For the record, I realize that I'm a bit more ham-handed than the average server-admin at handling my OS and permissions, but I refuse to believe that it was all my damn fault. There's nothing anywhere that might have tipped me off to what was happening. A terribly generic error message, a completely useless error dump in the logs (literally more generic than the error message), and a <a href=\"http://httpd.apache.org/docs/1.3/misc/FAQ.html#malfiles\">bunch</a> of <a href=\"http://www.spiration.co.uk/post/1195/You%20don't%20have%20permission%20to%20access%20root%20on%20this%20serv\">documentation/discussion</a> that gave flat-out incorrect responses, or pointed me in precisely the wrong direction. This is probably just because I spend so much of my time thinking about usability, but the affordance level here is awful. </p>
<p>You literally need to know about the magic button in order to fix a problem like this. There's nothing that indicates this disease given the symptom, and the solution is peripheral and non-obvious. This is quite possibly the worst way to design software, and all it really did was force me to redouble my efforts to <a href=\"http://www.google.ca/search?aq=f&sourceid=chrome&ie=UTF-8&q=yaws\">learn</a> <a href=\"http://docs.plt-scheme.org/web-server/index.html\">about</a> <a href=\"http://opensource.franz.com/aserve/\">alternatives</a> to this giant mud-ball called a server (not that AllegroServe is any better by most accounts, but's still worth a look if you're running your app in Common Lisp.</p>
<p>Other than that, pretty badass. Kicking ass and taking names at the new place. I've written up a draft of my thoughts, but I sort of deliberatly haven't published them yet. It seems like I'd need a bit more time to get the lay of the land around here before I can come to any conclusions on how things are going to go, or even whether I made the formally correct decision leaving I Love Rewards. I'm leaning towards \"yes\" on the latter, but we'll see. There's this objective affectation that I like to adopt, specifically because it's a bit tougher to think in those terms about stuff like major life decisions. I don't want to get into the endlessley self-reenforcing pattern that humans tend to display, but I also don't want to gimp my chances at a new place by assuming things are worse than they are.</p>
<p>For the moment, I'm looking at this as an excellent opportunity. It's a place that's just displaying a nascent hint of IT-centricness (in a good way), and I want to do absolutely everything in my power to make sure this place goes in the right direction. Not necessarily my direction, but I get the feeling I can ease a lot of growing pains if I make the right choices, and there are definitely leapfrog processes and technologies I can share. </p>
<p>The only thing I'm sure of is that it'll be interesting. </p>
"))
((5202 3723 537031000) :INSERT (15 :POSTED 3482971200))
((5202 3723 537034000) :INSERT (15 :TAG :BITCHING))
((5202 3723 537037000) :INSERT (15 :TAG :PROGRAMMING-ENVIRONMENT))
((5202 3723 537461000) :INSERT (16 :TITLE "Retrospective"))
((5202 3723 537472000) :INSERT (16 :FILE "retrospective.html"))
((5202 3723 537477000) :INSERT (16 :EDITED 3610301318))
((5202 3723 537482000) :INSERT
 (16 :BODY "<p>For the record, I have no idea how I got here.</p>

<p>Starting from a Windows-using Graphic Design graduate three years ago (who incidentally really <span style=\"font-weight: bold;\">really</span> didn't want to learn about PHP and databases because it seemed too complicated), and ending up as a Netbook-toting, Linux-using, command-line slinging Scheme hacker who uses Emacs and Conkeror as his editor and browser respectively.</p>

<p>Which is not to say that I don't draw anymore. In fact (perhaps ironically?) I draw better now than I ever have ever. It actually took dropping comics to get further, which was fucking unexpected to say the least. Not in the sense of \"grownups don't draw comics\", in the sense that my mind needed change. Had I spent my entire childhood gleefully slinging oil-paints around, I'd need a change from that too. In the same way that it doesn't do to be an <a href=\"http://www.oreillynet.com/ruby/blog/2006/03/interviewing_ruby_programmers.html\">X programmer</a>, it doesn't do to be an X-artist. You don't even see it while you <span style=\"font-weight: bold;\">are</span> an X-artist, because it doesn't occur to you to think outside of your own experience, but it's amazing how constricting habits can start to feel after a while. Ironically, you'll only ever recognize the discomfort after you stretch your wings. </p>

<p>I know roughly ten billion times more than I did back when I was bitching about how JavaScript was too hard, and it's getting to the point where I'm realizing how little that actually is. I'm remembering incidents from not two years ago where I didn't even think to question a colleague of mine when he insisted that Photoshop actions were the best way of automating image-resizing (incidentally, <a href=\"http://www.imagemagick.org/script/index.php\">they're not</a>). I remember more recent arguments, still from the old office, about how we shouldn't use <a href=\"http://git-scm.com/\">git</a> because \"there's nothing wrong with Subversion\", or wondering how to programmtically generate buttons or CSS. Those don't seem like real problems anymore. I'd take a couple days to resolve each. At the outside.</p>

<p>After growing by leaps and bounds, I want to go farther. As weird and intense as the trip so far has been, I want to run faster. And I still think I can do it. Which gives me this eery feeling that I just don't know enough yet.</p>

<h1>Conkering</h1>

<p>On a completely different note, I started using a new browser, and it's fucking awesome.</p>

<p>I've sort of been looking for a browser to replace Chrome for a while now. It's good, and it maximizes screen real-estate (which is important because I use a <a href=\"http://www.laptopmag.com/review/laptops/ocz-neutrino.aspx\">certain netbook</a> very often, and you want every milimeter of a 10 inch screen contributing). A while ago, Firefox started to bother me. I noticed that between the various bars and tool dealies they had, my browsing real-estate was reduced to unacceptably low levels. I switched to <a href=\"http://www.google.com/chrome\">Chrome</a> because it has exactly one line of tabs at the top (your favorites can be toggled with Ctrl-B, so you have them when you need 'em, and not otherwise). A few bugs started burning pretty badly lately, though. The <span style=\"font-weight: bold;\">number 1</span> being that (ironically) <span style=\"font-weight: bold;\">Chrome randomly fails to log into Gmail on Linux</span>. </p>

<p>So here were my requirements:</p>

<p>1. Maximized screen real-estate</p>
<p>2. Intuitive shortcuts</p>
<p>3. Cross-platform</p>

<p>And last (but I really wasn't too hopeful here)</p>

<p>4. Decent keyboard browsing support. (so I could avoid using the trackpad)</p>

<p>First thing I looked at was <a href=\"http://www.gnu.org/software/w3/\">W3 mode</a>, because I've become quite the Emacs ardent since <a href=\"http://defpackage.blogspot.com/2009/07/emacs.html\">first discovering it</a>. It's really not acceptable. It works ok if you just browse text-based sites, but most of the stuff I browse isn't text-based. I also discovered that I had additional requirements that hadn't been apparent earlier.</p>

<p>3b. It should be sufficient for testing websites/webapps</p>
<p>3c. It should handle graphic browsing</p>

<p>I also tried Konqueror, actually installing KDE on my netbook before realizing that it's not what I'm after. It has some good ideas, but it's heavy on the chrome, and I prefer my computer be fast rather than look cool. As I was searching around for Konqueror tutorials, trying to figure out whether I can at least use it for my desktop, I stumbled across <a href=\"http://bc.tech.coop/blog/060603.html\">a page mentioning Conkeror</a>.</p>

<p><span style=\"font-weight: bold;\">Firefox for Emacs users</span></p>

<p>...</p>

<p>Go on...</p>

<p>It turns out that <a href=\"http://conkeror.org/\">Conkeror</a> is a JavaScript-based, Emacs-like browser based on the <a href=\"https://developer.mozilla.org/en/XULRunner\">XULRunner engine</a>. </p>

<p>It's a clear win.</p>

<p>1. Check. It uses the whole screen (no address-bar, no favorites, no bullshit, just the familiar mini-buffer at the bottom).</p>
<p>2. Check. I realize they wouldn't be intuitive for everyone, but I already love and use Emacs, so it was a very easy transition to make. Two days in, it's as if I've been using it for years.</p>
<p>3. Check. Based on the XULRunner engine, and it runs on Windows, OS X and Linux (it even has apt-get support on Ubuntu).</p>
<p>3b. Check. It's as good as Firefox, and may actually be better for <a href=\"http://conkeror.org/WebDevelopment\">development/testing</a> because it gives you full access to the DOM via JavaScript hooks.</p>
<p>3c. Check.</p>
<p>4. Oh you <span style=\"font-weight: bold;\">bet</span> that's a Check. It chugs a bit when there's six billion links on a page, but otherwise fine.</p>

<p>So yeah. I'll be brushing up on my JavaScript a bit more because I now have reason to. I doubt I'll be customizing my browser anywhere near as much as my editor, but I've already made some edits for the sake of sanity.</p>

<pre><span style=\"color: #ffa500;\">minibuffer_auto_complete_default</span>=<span style=\"color: #5f9ea0;\">true</span>;
<span style=\"color: #ffa500;\">url_completion_use_bookmarks</span>=<span style=\"color: #5f9ea0;\">false</span>;
<span style=\"color: #ffa500;\">url_completion_use_history</span>=<span style=\"color: #5f9ea0;\">true</span>;
<span style=\"color: #ffa500;\">xkcd_add_title</span> = <span style=\"color: #5f9ea0;\">true</span>;

define_key(content_buffer_normal_keymap, <span style=\"color: #bc8f8f;\">\"N\"</span>, <span style=\"color: #bc8f8f;\">\"follow-new-buffer\"</span>);
define_key(content_buffer_normal_keymap, <span style=\"color: #bc8f8f;\">\"V\"</span>, <span style=\"color: #bc8f8f;\">\"view-source\"</span>);

define_key(default_base_keymap, <span style=\"color: #bc8f8f;\">\"C-c\"</span>, <span style=\"color: #bc8f8f;\">\"cmd_copy\"</span>);
define_key(default_base_keymap, <span style=\"color: #bc8f8f;\">\"C-v\"</span>, <span style=\"color: #bc8f8f;\">\"cmd_paste\"</span>);
define_key(default_base_keymap, <span style=\"color: #bc8f8f;\">\"C-w\"</span>, <span style=\"color: #bc8f8f;\">\"kill-current-buffer\"</span>);

define_webjump(<span style=\"color: #bc8f8f;\">\"youtube\"</span>, <span style=\"color: #bc8f8f;\">\"http://www.youtube.com/results?search_query=%s&amp;aq=f\"</span>);
define_webjump(<span style=\"color: #bc8f8f;\">\"stock\"</span>, <span style=\"color: #bc8f8f;\">\"http://www.sxc.hu/browse.phtml?f=search&amp;txt=%s&amp;w=1&amp;x=0&amp;y=0\"</span>);
define_webjump(<span style=\"color: #bc8f8f;\">\"plt\"</span>, <span style=\"color: #bc8f8f;\">\"http://docs.racket-lang.org/search/index.html?q=%s\"</span>);</pre>

<p>It's more verbose than the comparable code would be in Elisp, but there probably won't be as much of it total. One completely unexpected cool thing about this is that I now use my keyboard for everything, except starting Emacs and Conkeror. I'm definitely starting to get the attitude of \"mouse use=cache miss\", and I find myself wanting to eliminate it as much as possible. To that end, I'll be trying out <a href=\"http://www.nongnu.org/stumpwm/\">Stumpwm</a> when I get a little free time, just to eliminate those first two mouse clicks. Xmonad is tempting, but I'm really not sure I want to cram Haskell into my head at this point just to run a window manager. I already have Scheme, JavaScript, Elisp, PHP, Erlang, Python and Ruby competing for mindshare, and Common Lisp seems like it'd fit more comfortably. I still want to learn Haskell eventually, but I need some breathing room first. I'm sure there's a mental-indigestion point that I'm approaching, and I really don't want to spend a few weeks on the metaphorical shitter.</p>
"))
((5202 3723 537604000) :INSERT (16 :POSTED 3485217600))
((5202 3723 537611000) :INSERT (16 :TAG :GENERAL-PROGRAMMING-THOUGHTS))
((5202 3723 537616000) :INSERT (16 :TAG :IDEA-PEELING))
((5202 3723 537620000) :INSERT (16 :TAG :SPECULATION))
((5202 3723 538151000) :INSERT (17 :TITLE "The Upside of Apathy"))
((5202 3723 538161000) :INSERT (17 :FILE "apathy.html"))
((5202 3723 538166000) :INSERT (17 :EDITED 3610022331))
((5202 3723 538170000) :INSERT
 (17 :BODY "<p>The Upside of Apathy</p>

<p>I think it's finally time to record my thoughts on the new workplace (and in the process muse over some things that have been on my mind lately). And yeah, that bleak sounding title is the reason I'm about twice as satisfied here as I was back at I Love Rewards.</p>

<p>First things first, full disclosure, my first project here was in PHP. And they do their share of .NET programming (and I suspect that a lot of the driver work gets done in C or maybe even Assembly, but that's unverified). They interact with the Postscript standard a lot, but no one does it by hand. Because we serve the medical industry, there's also large parts of CCR and HL7 slung around on a regular basis. That's particularly bad if you understand what those acronyms mean. CCR is an XML-based standard circa 1998, and it exemplifies everything that eventually made sane minds give up that markup for today's light-weight formats. It's the only data standard I've seen that, and I promise I'm not making this up, you have to pay in order to get a copy of. It seems like that would defeat the purpose. HL7 is what you would expect out of a Unix shop from the early ninties. It's a pipe-delimited text stream whose definitions document runs to a hundred pages or so.</p>

<p>OS-wise, I'm in the minority with one other developer who thinks we ought to be using linux-based servers, and I'm actually the only one electing to go with Linux + Emacs for my desktop needs. The place is thick with MSVS and the like. Finally, I'm the only one who uses source control (and it's GIT, as if you had to ask by this point).</p>

<p>So why am I happy in the face of these conditions? It's because, for the most part, I've been hacking Scheme and Elisp through the past few months, and using whatever additional tools I wanted to.</p>

<p>Scheme? At a place that also potentially uses Assembly? Well, yeah. It turns out that no one outside of IT is religious in the least about what languages, tools or systems you choose to use. They really only care that the result is business-applicable in some way, cheap and fast. So as long as you hit those, they don't particularly care. I couldn't get away with this at many other places. Being a Linux-toting, Emacs-using Scheme hacker in the middle of a vast Windows ecology, I mean. There are remarkably few job openings in the field, especially in the bustling, skilled-programmer-metropolis of Toronto. If you want a capitol-J Job here, you need to know (and be willing to work with) Java or C#, the COBOLs of the modern world. Every once in a while someone wants a Python or PHP hacker for some contract work.</p>

<p>But apathy has an upside, like I said, and I'll take it.</p>

<p>It's really interesting to me that once again, passionate, caring (but woefully uninformed) MBAs seem to fuck everything up. If Ken was a hands-on leader, I'd probably have had to learn Java or C# too, or at the very least content myself with constant PHP. This is the Paul Graham effect in full swing; big companies use languages and tools that get sold to the management, not to the devs (and to be fair, if the devs got to pick, we'd all probably be working in C++ and it would be worse). Little companies use the juice that gives the the highest ratio of miles to millileters.</p>

<p>This is the crux of the problem though. The decisions here are such that most people have no idea what the right answer is. Most business people pick what's advertised; thay want to go with the flow. Most devs pick what's fastest in the machine sense; once they're done writing reams of code for their hello world, they want the machine to execute as fast as possible (Contractors seem to want what gives them as many billable hours as possible while not raising too many eyebrows, but that's far from unique to the IT business so I'm disregarding it). It's pretty obvious to the reasoned observer that neither are the correct answer. They might accidentally yield correct answers, but there's nothing about either thought process that makes the right answer more likely than (or even equally likely as) the wrong one. The specific answer depends on the specific situation, granted, but I put forth that in all cases, <span style=\"font-weight: bold;\">the correct answer is the most expressive language that will fit on the target hardware</span>. You do want to optimize speed, but not from the machine's perspective. Code needs to be fast and easy to make and maintain, rather than run, which means that you want as little a gap between what you can express and what you want to express. The complaint that gets levelled at non-C languages is that they're slow, which is true until you consider that ~2.4 gH dual-cores and 6gb ram setups are now common on the home market. If you're working on the latest 8-bit IC from Atmel, ok, yes, use C or Forth and constrain yourself to either manual bit-twiddling or the stack. If you're on the desktop, or god help you, a fucking server cluster and still managing memory yourself, then someone (and it may have been you) has made a poor choice on your behalf. This is the sort of obsesive behaviour whose logical conclusion is hand-counting your cereal flakes every morning to make sure you're getting precisely 1024 of them. I think we can agree that the sane thing to do is fill the bowl, hoping the offsets average out in the long term, and getting on with your day.</p>

<p>It seems that democracy doesn't really work here either, because as I hinted above, I doubt that most programmers would pick the most expressive language. They'd either pick what they know just because they happen to know it already, or they'd pick a language that let them code as close to the metal as possible. So how do I know <span style=\"font-weight: bold;\">they're</span> wrong, as opposed to <span style=\"font-weight: bold;\">me</span> being wrong? Well, that's where the issue goes to shit. The reason I know they're wrong is that I've worked with the low-level languages (C and Forth), I've worked with what I'll call the mid-level languages (Python, Ruby, Java, C#, PHP), and I've worked with four or five LISPs (which I stereotypically place at the top of the progression). As per <a href=\"http://www.paulgraham.com/avg.html\">PG's Blub Paradox</a>, I know that the non-lisps are missing some crucial features that I find myself using on a fairly regular basis (not even macros, interestingly. The prefix notation itself seems to pack a lot of the punch on its own). Also, I've clocked myself as \"fast\" with some of these languages and \"slow\" with others. The reason the issue goes to shit here is that this argument will only convince people who have already given several LISPs a fair try and have worked in some other languages from accross the continuum. Those people don't need convincing; if they've come that far, it's a good bet that they've <a href=\"http://bc.tech.coop/blog/\">stuck with LISP</a> in some form, or that they're one of the few, vocal pessimists around, loudly proclaiming <a href=\"http://steve-yegge.blogspot.com/\">\"all languages suck balls\"</a>. The people that need convincing are the ones that are currently convinced that C# or Java alone represents the limits of \"programming\", or the ones that look upon learning new languages as procrastinating.</p>

<p>It's ironic to consider, but it seems like it might just be easier to sell Scheme to the managers and let the traditional pyramid bear the change out. Managers understand the argument \"this way is faster\", and don't particularly care about the rest as long as you can prove that. There's trouble this way too, though. You see, it's fairly easy to make the argument \"this way makes me faster\", as long as it's true and you can demonstrate this. But the argument \"This will make <span style=\"font-weight: bold;\">you</span> faster\" is another matter entirely. For starters, in a shop of C programmers, it's patently false. It'll take months of genuine practice to get to a higher level of productivity if your team doesn't already know LISP. There's exactly one other way to go, and that's competing at the company level. In other words, start a bunch of Scheme/CL shops and watch them out-compete the ever-loving fuck out of the Algol descendants. Watch them driven before you, and blah blah blah. It seems like it would work, as long as we stop the AI winter thing from happening again, which looked like it was the result of promising too much, delivering too little, while focusing too much on the math and linguistics and not enough on the business end.</p>

<p>In other words, Scheme for business logic instead of research. I think I can do it. I'm certainly in a position to. Even if not, I'll try my hardest and let you know how it goes.</p>
"))
((5202 3723 538288000) :INSERT (17 :POSTED 3491265600))
((5202 3723 538294000) :INSERT (17 :TAG :GENERAL-PROGRAMMING-THOUGHTS))
((5202 3723 538298000) :INSERT (17 :TAG :IDEA-PEELING))
((5202 3723 538303000) :INSERT (17 :TAG :SCHEME))
((5202 3723 538308000) :INSERT (17 :TAG :SPECULATION))
((5202 3723 539047000) :INSERT (18 :TITLE "Yegge Strikes Back from the Grave"))
((5202 3723 539058000) :INSERT (18 :FILE "yegge-strikes-back.html"))
((5202 3723 539064000) :INSERT (18 :EDITED 3610022331))
((5202 3723 539069000) :INSERT
 (18 :BODY "<p>So I've been fooling around with some new stuff.</p>

<p>Actually, before I tell you about that, quick update. dieCast is now in the early beta stages. It's actually capable of supporting games, but it's got a long way to go before it's something I'll be proud of. We're about three months away from a public beta from where I'm sitting. For the testing stage, I'm ending up using some creative-commons enabled sprites. I'll probably keep them as a subset of the final sprite lineup, if the license permits, but the intention is to get original artwork up.</p>

<p>Ok, now then.</p>

<p>I've been fooling around with some new stuff.</p>

<p>Or rather, some very very old stuff. Over the last couple of days, I've decided to pick up Common Lisp and Portable Allegro Serve again. I gave up on trying to install PAS on SBCL after about twenty minutes though, and promptly switched out to Hunchentoot, and all I really have to say is </p>

<p>Holy.</p>

<p>Shit.</p>

<p>I already have some projects underway with PLT Racket (including Diecast), but goddamit, I think I made the wrong decision. The quote from <a href=\"http://steve-yegge.blogspot.com/2006/04/lisp-is-not-acceptable-lisp.html\">Yegge</a> goes something like \"Most newcomers independently come to the same conclusion; Scheme is the better language, but Common Lisp is the right choice for production work.\" Bottom line, I remember disagreeing a long time ago, but I've uh... independently come to the same conclusion.</p>

<p>PLT Racket seems to be as good as Scheme gets. It has built-in support for everything from hashes and regexps to x-path and http. It has file-system bindings, guaranteed tail-recursion and pretty much the best package system I've seen (from the downloaders' perspective, at least, Scribble is a bit of a bitch to get familiar with if you plan to actually document your own code).</p>

<p>So why am I having serious second thoughts?</p>

<p>Lots and lots of little things. Now that I've <span style=\"font-weight: bold;\">actually</span> had some time to play with both contenders, mastered both IDEs, played with both macro debuggers, ran web servers on both and lived in each language for a decent length of time, I think I can finally compare them, and gain some sliver of insight from the comparison. And it's a damn close race. The biggest differences turn out not to be what everyone was pointing at. I have a link in the sidebar over there pointing to \"Scheme vs. Common Lisp\", which purports to tell you the differences between the two, and maybe three of those actually trip you up to any significant degree.</p>

<p>So here's the big stuff. PLT Racket vs Common Lisp from a young hacker's perspective.</p>

<p>1. Documentation</p>

<p>The <a href=\"http://docs.racket-lang.org/\">PLT Docs</a> are badass, and centralized. Second to none. They have Ajax search running over all functions in their implementation (and you need it with the amount of stuff it has), code examples all over the place, and a comprehensive set of tutorials perfect for beginners. Common Lisp probably has more overall information on it, but it's scattered across <a href=\"http://www.cliki.net/index\">CLiki</a>, <a href=\"http://www.cl-user.net/asp/fVOm/sdataQ1UwW195cQ5hDQ3TOH8X8yBX8yBXnMq=/sdataQu3F$sSHnB==\">Common Lisp Directory</a>, <a href=\"http://www.lispworks.com/documentation/HyperSpec/Front/\">Hyperspec</a>, <a href=\"http://weitz.de/hunchentoot/\">various indie package pages</a> and <a href=\"http://bc.tech.coop/blog/\">Bill Clementson's archives</a>. <span class=\"code inline\">M-x slime-documentation-lookup</span> helps, but it only searches the Hyperspec. That's plenty of info for the veteran, but (if I could imagine my point of view about two years ago) it wouldn't be sufficient for someone who's, say, looking for a complete listing of format-string options (As a public service, the way you find that is to look up <span class=\"code inline\">format</span>, then scroll about half-way down the page where you will be pointed to section 22.3 for more information on formatted output).</p>

<p>2. Package Repositories/Installation tools</p>

<span class=\"edit\">EDIT:
<p>I can't believe I managed to go so long without adding this note. As of the end of 2010, <a href=\"http://www.quicklisp.org/beta/\">quicklisp</a> also exists, and is awesome. That means that the gripes I had about <code>asdf</code>ing things are moot, since you don't need to for the most part. Thanks to <a href=\"http://www.quicklisp.org/beta/#basic-commands\"><code>ql:system-apropos</code></a>, it's also fairly easy to find CL packages, so I guess PLT Scheme (now Racket) no longer wins this one. I have no idea what they've been up to for the last year though, so they probably made a thousand and one improvements all over the place too.</p>

Thu, 11 Oct, 2012</span>

<p>Common Lisp has <span class=\"code inline\">asdf</span>, which is awesome compared to the tools found in most other languages I've used, but PLT beats it pretty handily. It's basically the same story as documentation. There's technically more stuff out there for CL, but it's scattered, and since development is distributed, you'll get some duplication of effort. There are four or five different HTTP servers, for example, and at least three HTML-templating libraries. Granted, there's a clear \"best\" in each category, but you really need to do your reading in order to find that out. PLT has a smaller offering (the biggest gaping holes are in the document generation area; there is no such thing as a good PLT Racket PDF/PostScript generator), but it's neatly organized, indexed, and accessed by typing <span class=\"code inline\">(require (planet [package-name]))</span> in the declaration section of whichever file you need the new package for. No hunting, no missing GPG keys. These first two points are probably the ones I'll miss most from the PLT offering.</p>

<p>3. The Web Server</p>

<p>This is actually a place where more choice would do PLT Racket some good. They do have a pretty cool web server, but it's far from fast in practice. It also seems to crash more often than I'd like for a production app. Nothing like once per week, but it's happened a few times so far. The trouble is how it behaves. It's basically Tomcat, minus the copious installation headaches; you need to get all your code in order, make sure it'll run, then execute. And that's it. If you need to make changes (like, while developing web apps) you need to tweak the code, then restart the server, then re-navigate to the page you were just on because it auto-generates new urls each time. This is an exercise in frustration, and is one reason that I've still kept up on my PHP and Python skills this entire time. The languages may be slightly worse, but they're interpreted, so a change doesn't need to bring down the whole server. That's how <a href=\"http://weitz.de/hunchentoot/\">Hunchentoot</a> works. You load your files, then start the server. If you need to make a change, you evaluate the new code against the actual, still-running server. I wouldn't use this in the wild, but during the development stage, it is hot, buttered, bacon-wrapped power. That alone seems to be enough to pull CL into the lead as far as my use of it is concerned. </p>

<p>Now in, PLT's defense, they're aware of this. There was a concern about keeping LISP's inherently reflective nature, and they decided not to because it trips up so many people that they figured it wasn't worth the headaches. So the server forces you out while it runs, and the REPL bugs you to do a clean run every once in a while if your source has changed. I appreciate the sentiment, because it really was made to be a teaching tool, but I'm being mighty tempted by the dark side regardless. There's also a concerted effort from PLT to keep things byte-oriented. For example, there is no supported way to get a list of POST/GET parameters out of a request (other than \"manually\") in PLT scheme. \"Manually\" entails getting a list of binding objects out of the request and mapping over them to get a list of byte-strings out. There's also a few other little gotchas (like how awkward it is to actually create a link whose result is another scheme function, and how url-based dispatch is for whatever reason NOT the default).</p>

<p>4. The Format function</p>

<p>This may sound like a nitpick, but I'm not into the nitpicks yet. This is actually a difference. In PLT Racket, you're stuck with <span class=\"code inline\">(format \"~a\" blah)</span>. It only accepts formatting directives, rather than CL's richer set of formatting, flow control and kitchen sink. It also always returns its result, and doesn't have the option of printing to standard-out (you have to use <span class=\"code inline\">printf</span> for that). I didn't think this would make as big a difference as it did, actually, because I've gotten used to the simpler Scheme <span class=\"code inline\">format</span>, but hot damn is it awesome to be able to do something like <span class=\"code inline\">(format nil \"~a ~{ ~a: ~@[ ~a ~]~}\" (car blah) (cdr blah))</span> instead of resorting to several function calls for the same effect.</p>

<p>5. Plists</p>

<p>Basically same story as above. I forgot how useful these actually were for day-to-day purposes. I mean, I still bust out hashes for bigger stuff, but little tasks all over the place are made just a tiny bit easier with the use of p-lists instead of a-lists.</p>

<p>6. Function names.</p>

<p>Ok, now we're into picking nits. It's not a huge deal, but the scheme conventions are cleaner and more consistent. If you're dealing with a predicate, it ends with \"?\", if you're dealing with a side-effect function, it ends with \"!\". Common lisp has a grab-bag. Some predicates end with \"p\" (as in <span class=\"code inline\">listp</span>), but most are just the unmodified word (as in <span class=\"code inline\">member</span>). Also under this category is the lisp-1 vs lisp-2 thing; because there's separate namespaces for functions and variables in CL, there's two let types (<span class=\"code inline\">let</span> for variables and <span class=\"code inline\">flet</span> for functions) and two definition types (<span class=\"code inline\">defun</span> and <span class=\"code inline\">defvar</span>). Because functions get treated differently from other variables, some things are a bit trickier in CL; for example, while you can still do <span class=\"code inline\">(apply (lambda () 42) '())</span> or <span class=\"code inline\">(mapcar (lambda (num) (* 2 num)) '(1 2 3 4 5))</span>, you actually can't do something like <span class=\"code inline\">(setf foo (lambda () 42))</span> followed by <span class=\"code inline\">(foo)</span> (you would either need to call foo with <span class=\"code inline\">(funcall foo)</span> or define it as <span class=\"code inline\">(setf (symbol-function 'foo) (lambda () 42))</span>). The Scheme equivalent is <span class=\"code inline\">(define foo (lambda () 42))</span>, after which <span class=\"code inline\">(foo)</span> does exactly what you think it will.</p>

<p>7. Macros</p>

<p>PLT Racket has <span class=\"code inline\">define-syntax-rule</span> and <span class=\"code inline\">define-syntax</span>, as well as library support for <span class=\"code inline\">define-macro</span>, which is a copy of CL's non-hygenic <span class=\"code inline\">defmacro</span>. In practice, I found myself using <span class=\"code inline\">define-macro</span> most of the time, so it shouldn't be too big a problem to switch here. Admittedly, <span class=\"code inline\">define-syntax</span> made it extremely easy to define recursive macros, but lisp has a number of iteration options that make it close to a non-issue.</p>

<p>8. Iteration</p>

<p>This one's probably the tiniest deal there is. Common Lisp has a bunch of iteration functions/procedures, from the <span class=\"code inline\">loop</span> macro to <span class=\"code inline\">dolist</span>, to <span class=\"code inline\">mapcar</span> and friends. Scheme really only had <span class=\"code inline\">map</span> and tail recursion, and I sort of preferred that. The reason I list this as \"tiny deal\" is that my particular CL implementation (SBCL if you must know) does tail-call optimization anyway, so I could just keep up my wicked, functional ways if I wanted to.</p>

<p>9. The IDE</p>

<p>For beginners, PLT wins it. I remember having this conversation with myself earlier; a binary IDE portable across OS X, Linux and Windows, with nice buttons to do things like \"Run\" and \"Macro Step\". It's perfect when you're starting out because it's nothing like the near-vertical learning curve of Emacs, but it ultimately limits you. Since I started with PLT Racket, Emacs has become the main program I use. Seriously, something like 75% of all my computer time is spent here, and the rest is split between Klavaro and Conkeror. I'm contemplating getting a shirt that says something along the lines of \"Emacs is my master now\". Long story short, once you know LISP (or, to be more precise, three LISPs), Emacs is by far the better IDE.</p>

<p>Now that I've laid down all my gripes, the pattern emerges, and it's definitely what Yegge was talking about. Scheme is built to teach and learn (and possibly prove things formally). Even PLT Racket, whose developers are self-declared hackers who go above and beyond the R6RS implementation to provide a pretty decent production candidate, errs on the side of making things easier for beginners rather than easy for veterans, and it stresses academic application over production application. Common Lisp is the precise reverse. It exacts a heavy toll in experience and patience, and the reward is a measure of power beyond other options. It's also crafted (or perhaps evolved would be a better word) for production rather than theoretical purity. I can appreciate that.</p>

<p>So there. If you want the executive summary:</p>

<p>PLT Racket: Theoretical purity and conistancy before practical considerations. Centralized development, indexed for your convenience. Make it easy to learn, consider the newbies.</p>

<p>Common Lisp: Get shit done first, consistency and purity are acceptable collateral damage for terseness. Distributed development, find what you can. Make it powerful, the newbies better watch and learn first.</p>

<p>The choice is pretty simple. Common Lisp wins as soon as you know what you're doing. But while you're getting your bearings straight, go for PLT Racket. For what it's worth, I won't abandon it. I still plan to put out a decent PostScript generation library for PLaneT before I get working on CL hardcore, and I'll always keep it around as a second scripting language (along with Ruby), <span style=\"font-weight: bold;\">and</span> I still have several Scheme projects to maintain, but the days of typing <span class=\"code inline\">M-x run-scheme</span> instead of <span class=\"code inline\">M-x slime</span> consistently are over for me.</p>
"))
((5202 3723 539276000) :INSERT (18 :POSTED 3494462400))
((5202 3723 539282000) :INSERT (18 :TAG :COMMON-LISP))
((5202 3723 539287000) :INSERT (18 :TAG :SCHEME))
((5202 3723 539730000) :INSERT (19 :TITLE "Lisp and CSS"))
((5202 3723 539738000) :INSERT (19 :FILE "lisp-and-css.html"))
((5202 3723 539742000) :INSERT (19 :EDITED 3610022331))
((5202 3723 539746000) :INSERT
 (19 :BODY
  "<p>So the Reddit/Y Combinator spike seems to have died down, which means I can return to blissful obscurity. Not that arguing with <a href=\"http://faculty.cs.byu.edu/~jay/home/\">Jay freaking McCarthy</a> of <a href=\"http://racket-lang.org/\">PLT Racket</a> and getting to thank <a href=\"http://www.blogger.com/profile/11896508961236679878\">Xah Lee</a> for his <a href=\"http://xahlee.org/emacs/emacs.html\">Emacs</a> <a href=\"http://xahlee.org/emacs/elisp.html\">tutorials</a> wasn't the high-point of my day yesterday, but I sort of write these posts in order to get stuff out of my head rather than to have them read.</p>

<p>I got to the point of needing some CSS in a lisp app a little while ago, and while I was typing it up, I thought \"Hang on, self, I'm sure there's a way to get this done in lisp instead of repeating yourself this much in CSS\". Checking online, sure enough there's a library for it (<a href=\"http://www.cliki.net/css-lite\">css-lite</a>, which is available through <span class=\"code inline\">asdf</span>).</p>

<p>The asdf version seems to have some bugs in it, sadly.</p>

<pre>
* (asdf-install 'css-lite)

[snip installation trace...]

* (<span style=\"color: #a020f0;\">require</span> '<span style=\"color: #5f9ea0;\">css-lite</span>)

NIL

* (css-lite:css ((<span style=\"color: #bc8f8f;\">\"body\"</span>) (<span style=\"color: #da70d6;\">:height</span> <span style=\"color: #bc8f8f;\">\"50px\"</span> <span style=\"color: #da70d6;\">:width</span> <span style=\"color: #bc8f8f;\">\"100px\"</span>)))

<span style=\"color: #bc8f8f;\">\"
body {
height, '50px', width, '100px':nil;
}\"</span></pre>


<p>That's not <em>exactly</em> what I meant.</p>

<p>I'm sure the <a href=\"http://github.com/paddymul/css-lite\">git-hub version</a> has this stuff resolved, but by this point I was already on the \"How hard could this possibly be?\" train of thought.</p>

<p>Inputs and outputs are strings by the css-lite convention, so it seems like it should be pretty simple to output. Well, it is.</p>

<pre>
(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">css</span> (directives)
  (apply #'concatenate 
         (cons 'string 
               (mapcar #'(<span style=\"color: #a020f0;\">lambda</span> (dir) (format nil <span style=\"color: #bc8f8f;\">\"~(~a { ~{~a: ~a; ~}}~)~%\"</span> (car dir) (cdr dir)))
                       directives))))

* (<span style=\"color: #a020f0;\">defvar</span> <span style=\"color: #b8860b;\">test</span> `((body <span style=\"color: #da70d6;\">:margin</span> 5px <span style=\"color: #da70d6;\">:padding</span> 0px <span style=\"color: #da70d6;\">:font-family</span> sans-serif <span style=\"color: #da70d6;\">:font-size</span> medium <span style=\"color: #da70d6;\">:text-align</span> center)
             (\\#page-box <span style=\"color: #da70d6;\">:width</span> 1100px)
             (<span style=\"color: #bc8f8f;\">\".box-one, .box-two\"</span> <span style=\"color: #da70d6;\">:width</span> 200px <span style=\"color: #da70d6;\">:float</span> left <span style=\"color: #da70d6;\">:overflow</span> hidden <span style=\"color: #da70d6;\">:margin</span> <span style=\"color: #bc8f8f;\">\"0px 5px 5px 0px\"</span> <span style=\"color: #da70d6;\">:padding</span> 0px)))

TEST

* (css test)

<span style=\"color: #bc8f8f;\">\"body { margin: 5px; padding: 0px; font-family: sans-serif; font-size: medium; text-align: center; }
#page-box { width: 1100px; }
.box-one, .box-two { width: 200px; float: left; overflow: hidden; margin: 0px 5px 5px 0px; padding: 0px; }
\"</span></pre>

<p>Tadaah!</p>

<p>It could be more efficient if I used reduce instead of having <span class=\"code inline\">mapcar</span> and <span class=\"code inline\">concatenate</span> as separate steps.</p>

<pre>
(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">css</span> (directives)
  (<span style=\"color: #a020f0;\">flet</span> ((format-directive (d) (format nil <span style=\"color: #bc8f8f;\">\"~(~a { ~{~a: ~a; ~}}~)~%\"</span> (car d) (cdr d))))
    (reduce (<span style=\"color: #a020f0;\">lambda</span> (a b)
              (<span style=\"color: #a020f0;\">let</span> ((final-a (<span style=\"color: #a020f0;\">if</span> (listp a) (format-directive a) a)))
                (concatenate 'string final-a  (format-directive b))))
            directives)))

* STYLE-WARNING: redefining CSS in DEFUN

CSS

* (css test)

<span style=\"color: #bc8f8f;\">\"body { margin: 5px; padding: 0px; font-family: sans-serif; font-size: medium; text-align: center; }
#page-box { width: 1100px; }
.box-one, .box-two { width: 200px; float: left; overflow: hidden; margin: 0px 5px 5px 0px; padding: 0px; }
\"</span>

* (<span style=\"color: #a020f0;\">defvar</span> <span style=\"color: #b8860b;\">box</span> '(<span style=\"color: #da70d6;\">:margin</span> <span style=\"color: #bc8f8f;\">\"32px 10px 10px 5px\"</span> <span style=\"color: #da70d6;\">:padding</span> 10px))

BOX

* (css `((body ,@box <span style=\"color: #da70d6;\">:font-family</span> sans-serif <span style=\"color: #da70d6;\">:font-size</span> medium <span style=\"color: #da70d6;\">:text-align</span> center)))

<span style=\"color: #bc8f8f;\">\"body { margin: 32px 10px 10px 5px; padding: 10px; font-family: sans-serif; font-size: medium; text-align: center; }
\"</span></pre>

<p>That should do it. So yeah, there's a quick and dirty non-validating CSS generator. It took about 10 minutes to write (and most of that was trying to figure out why it wasn't working, then realizing that I'm no longer using Scheme and that <span class=\"code inline\">foldl</span> therefore doesn't exist), which is probably less time than it would take to go online, download a fix for css-lite, install it and try it again. I would submit it to git-hub or something, but 6 lines of code seems somehow unworthy of its own module. </p>

<p>I feel this also validates my statements about the <span class=\"code inline\">format</span> function in the last post. In scheme, this css transformer would have to resort to another couple of function calls. It's that short in part because I was able to take advantage of CL's embedded formatting DSL.</p>
"))
((5202 3723 539821000) :INSERT (19 :POSTED 3494721600))
((5202 3723 539825000) :INSERT (19 :TAG :COMMON-LISP))
((5202 3723 539829000) :INSERT (19 :TAG :CSS))
((5202 3723 539839000) :INSERT (19 :TAG :IDEA-PEELING))
((5202 3723 540129000) :INSERT (20 :TITLE "My Thoughts"))
((5202 3723 540136000) :INSERT (20 :FILE "defun-my-thoughts.html"))
((5202 3723 540138000) :INSERT (20 :EDITED 3610022331))
((5202 3723 540141000) :INSERT
 (20 :BODY
  "<p>I gotta tell you; when I started out with PLT Scheme, I wouldn't have thought I'd end up here. Here being an Emacs using CL-slinger.</p>

<p>It just sort of snuck up on me. It's really embarassing now, but the thing that tipped the scales most strongly in favor of PLT when I was starting out was the goddamn shiny IDE. It didn't enter into it how terse or how flexible the system was, all that mattered was that it be simple to use. This may be a primary driving force behind the general IDE craze that seems to be raging through development communities lately. It might just be my perspective, but it's feeling awful lonely over here in Emacs land. There are <a href=\"http://bc.tech.coop/blog/\">some</a> <a href=\"http://sachachua.com/blog/2004/11/notable-people-who-use-emacs/\">popular</a> <a href=\"http://www.erlang.org/\">adherents</a> out there, but by and large, people I talk to these days hack primarily in <a href=\"http://msdn.microsoft.com/en-us/vstudio/default.aspx\">MSVS</a> or <a href=\"http://www.eclipse.org/\">Eclipse</a>. Hell, I went to the Toronto Lisp Users group last week, where you'd think there would be lots of support for Emacs, only to find that it was me by my lonesome. One guy hacked on Clojure in Eclipse, two of them used LispWorks and one didn't comment. The IDEs are winning in terms of number of users at least. Not sure whether it's a win on the productivity end, but hey.</p>

<p>So I guess it's not that embarassing.</p>

<p>Once I got hooked by the IDE, and the docs, and the package, it all just seemed so nice. Certainly better than my days hacking on Python/PHP (and even slightly better than my half-year of toying with Erlang). I never did figure out the profiler, but the macro stepper was really cool, and having errors highlighted with little arrows in DrScheme is so sweet that I actually started welcoming them for a while there. Slowly though, stuff changed. Without even realizing it, I was spending more and more time in Emacs. Whether in an editing mode, or the built-in GIT mode, or eshell, Emacs was starting to become my window manager. Before I noticed the change, I was using <span class=\"code inline\">run-scheme</span> rather than the IDE. I still had to pull it out for macro stepping, but it was tolerable. </p>

<p>Then I realized that I was really using three or four different libraries out of one category, and all of them were available for Common Lisp. Then I realized that CL also has a <a href=\"http://www.cliki.net/cl-typesetting\">PDF</a>-<a href=\"http://www.cliki.net/CL-PDF\">generating</a> library. Aged and imperative, yes, but at least I wouldn't have had to <a href=\"http://github.com/Inaimathi/poSStscript\">roll my own</a> that way. When the realization finally hit me that Emacs won in my mind, I sat down and thought about what really makes sense for me development-wise. Turns out that if you already know Emacs, <span style=\"font-weight: bold;\">and</span> you already know a couple of lisps in addition to CL, <a href=\"http://common-lisp.net/project/slime/\">SLIME</a> is the best IDE you could hope for. Along with the built-in GIT support, swank, Lisp-Mode keybindings and Auto-Complete mode, SLIME's REPL/macroexpander/documentation-lookup/profiler push the environment over the edge.</p>

<p>So I hack on Common Lisp now, I guess. Man, I'd better get around to replacing that logo bar, it's getting pretty dated.)</p>
"))
((5202 3723 540183000) :INSERT (20 :POSTED 3495758400))
((5202 3723 540185000) :INSERT (20 :TAG :BITCHING))
((5202 3723 540187000) :INSERT (20 :TAG :COMMON-LISP))
((5202 3723 540189000) :INSERT (20 :TAG :LISP))
((5202 3723 540420000) :INSERT (21 :TITLE "cl-inception"))
((5202 3723 540426000) :INSERT (21 :FILE "inception.html"))
((5202 3723 540428000) :INSERT (21 :EDITED 3610022331))
((5202 3723 540430000) :INSERT
 (21 :BODY "[cl-inception.jpg]

<p>That's just about what I spent the last four hours feeling like. I've been working semi-feverishly on a version of the formlet macros for Common Lisp.  Automatic validation is surprisingly difficult when you break it down. If you want to do it well, I mean. The thing could easily have been half-assed in half the time, and three-quarters the code. But I meant to do it well, so it took a while. It's still not anywhere near perfect. If you tried to get it to generate a form called \"form-values\", I imagine it would snarl at you like some lovecraftean horror. I'll be plugging the holes over the next little while with judicious use of <a href=\"http://www.gigamonkeys.com/book/macros-defining-your-own.html\"><span class=\"code inline\">with-gensyms</span></a>, but that'll only add one layer to a construct already six dreams deep.</p>

<p>It's fucking bizarre, I tell you. On days like this, I can sort of see why people stay away from LISPS in general. Not all minds can be made to twist in on themselves indefinitely; mine was barely capable of six levels, like I said. By which I mean, the formlet system I wrote is made up of a function and a macro (<span class=\"code inline\">show-[name]-form</span> and <span class=\"code inline\">def-form</span>). <span class=\"code inline\">show-[name]-form</span> is a function that calls the <span class=\"code inline\">show-form</span> macro to generate partial HTML and invoke the <span class=\"code inline\">form-element</span> macro, which expands into the actual low-level HTML boilerplate. <span class=\"code inline\">def-form</span> is a macro that expands into the appropriate <span class=\"code inline\">show-[name]-form</span> function, and defines a validator function, itself composed of no less than four nested macros.</p>

<p>It sounds like a complete goddamn birdsnest, and it kind of is, but every layer of complexity is warranted, as far as I know (if it isn't, please, PLEASE tell me that, and point me to simpler code that does what this does). </p>

<p>Here's the thing. If you're just looking at how to generate the HTML on forms (a-la the PLT Formlet system), it's ridiculously easy. I could have gotten away with a macro and a half instead of the layer cake that I ended up with, but the issue there is that that way wouldn't have saved me much time or code. The hard part on a form is <span style=\"font-weight: bold;\">not</span> displaying it. That is the easy part. If I may say so, the <span style=\"font-weight: bold;\">trivial</span> part. If your system does nothing else, then it is balanced on a precarious edge between the twin pits of \"break-even\" and \"not worth using\". The <span style=\"font-weight: bold;\">difficult</span> part is validation. At the high level, it sounds simple (which is probably why I was foolhearty enough to attempt it); </p>

<ol>
  <li>Take in the form results and a list of predicates.</li>
  <li>Run the predicates over the results.</li>
  <li>If they all passed, do something, otherwise, send them back with a little note saying what they need to fix.</li>
</ol>

<p>Tadaah!</p>

<p>But those three steps (if you wanna do them properly) have so many moving parts that it necessitates many, many macros. For starters, there are fundamentally two types of forms; the type where you need to validate each field (like a registration form, or other long list of inputs), and the type where you need to check the whole form in aggregate (like a login form, where you really only care whether you were just handed a valid name/password pair, and in fact you <span style=\"font-weight: bold;\">don't want</span> to tell the user which of the two they got wrong).</p>

<p>That second group runs out of situations fairly quickly; you just need to display one error message for the form and send the user back, or let them through if they got it right. Done.</p>

<p>The first group is what caused most of the work. First off, each input needs its own predicate, and its own failure message. If you want to provide good signage, it's also not sufficient to <span class=\"code inline\">and</span> the list of predicates over the inputs; you want to iterate through the full list no matter how many mistakes you find, and then mark them all off in the error listing. When you get back, you need to display each error next to the appropriate input, and (for non-passwords), you want to keep any inputs the user sent you that validated ok. As if that weren't enough, those pesky users like labels too, so that they can see what they're filling out, and you need to support (at minimum) <span class=\"code inline\">input type=text</span>, <span class=\"code inline\">input type=password</span>, <span class=\"code inline\">textarea</span>, <span class=\"code inline\">select</span>, <span class=\"code inline\">checkbox</span> if you want to be useful. <span class=\"code inline\">option</span> can be useful, but you can get by with <span class=\"code inline\">select</span> in a pinch. The end result is that you need to track</p>

<ol>
  <li>field names</li>
  <li>field types</li>
  <li>user input for each field</li>
  <li>a predicate for each field</li>
  <li>an error message for each field</li>
</ol>

<p>and good <span style=\"font-weight: bold;\">god</span>, do the interactions make me want to headdesk. #2 specifically sounds easy, but gets mean fast when you think about it. I won't go into the details, but keep in mind that it's not enough to just keep track of a <span class=\"code inline\">type</span> property and switch it out; a <span class=\"code inline\">select</span> has a fundamentally different tree structure underneath than a <span class=\"code inline\">textarea</span>, which is again fundamentally different from an <span class=\"code inline\">input</span>. When I say different, I mean that they track user input in different ways, need different things changed out when they error, have different consequences when setting their value (and different methods of setting it, too) and behave differently on screen.</p>

<p>I'm not posting the code here, it'll be at <a href=\"http://github.com/Inaimathi/cl-fomlets\">github</a>. If you can do better, please, <span style=\"font-weight: bold;\">please</span> do so, and let me know.</p>

<p>In the meantime, I honestly feel like I should be spinning a top and eying it warily.</p>
"))
((5202 3723 540487000) :INSERT (21 :POSTED 3496017600))
((5202 3723 540490000) :INSERT (21 :TAG :BITCHING))
((5202 3723 540492000) :INSERT (21 :TAG :COMMON-LISP))
((5202 3723 540494000) :INSERT (21 :TAG :HUNCHENTOOT))
((5202 3723 540741000) :INSERT (22 :TITLE "OS Experiments and Project Update"))
((5202 3723 540747000) :INSERT (22 :FILE "crunchbang.html"))
((5202 3723 540749000) :INSERT (22 :EDITED 3610022331))
((5202 3723 540751000) :INSERT
 (22 :BODY
  "<p>As much as I like sitting at post number 42, it's time for an update.</p>

<p>I've been testing another distro of linux (well, not another distro, really. An Ubuntu derivative called Crunchbang), and I really thought it was going to unseat Ubuntu as my OS of choice. The main killer, it turns out, was <span class=\"code inline\">xorg.conf</span>.</p>

<p>First, the good stuff. It's simple, it has better keyboard support for launching programs than Ubuntu, and its performance is through the roof. It actually flies on the toy laptop I have lying around for this kind of experimentation (a Compaq Presario R3000 I picked up for $20 about two years ago. It has a 1.4ghz processor, a whopping 256 megs of ram and a 5400rpm, 30gb hard drive). Even with those specs, Crunchbang is usable. So I was all psyched up to install it on my netbook to get a bit more performance out of it, just because I do actually do some development on it when I'm out and about. Two things are making it unacceptable though.</p>

<p>One, and this is the main one, <span class=\"code inline\">xorg.conf</span>. To the Linux veterans this is probably a joke, but it's pretty difficult for the newbs. There was sparse information on configuring monitors this way back when it was mandatory, and you could never be sure that you were pasting the appropriate things because, apparently, different distros had different conventions about it. When I searched (and I mean everywhere; old linux sites, the various StackExchange sites, the Ubuntu docs and the Ubuntu forums), all I found were horribly outdated pointers, and one or two comments about how \"xorg.conf isn't really used anymore, just use xrandr\". Which is great, except that <span class=\"code inline\">xrandr</span> doesn't seem to auto-detect additional monitors in Crunchbang, so I still need to know how to configure them the old way. The other common instruction I found was to copy-paste existing parts of your current conf file. Which I'm sure was great advice at one point, but current Ubuntu/cruchbang xorgs look something like</p>

<pre>
<span style=\"color: #b8860b;\">Section</span> <span style=\"color: #bc8f8f;\">\"Device\"</span>
        <span style=\"color: #b8860b;\">Identifier</span>      <span style=\"color: #bc8f8f;\">\"Configured Video Device\"</span>
<span style=\"color: #b8860b;\">EndSection</span>

<span style=\"color: #b8860b;\">Section</span> <span style=\"color: #bc8f8f;\">\"Monitor\"</span>
        <span style=\"color: #b8860b;\">Identifier</span>      <span style=\"color: #bc8f8f;\">\"Configured Monitor\"</span>
<span style=\"color: #b8860b;\">EndSection</span>

<span style=\"color: #b8860b;\">Section</span> <span style=\"color: #bc8f8f;\">\"Screen\"</span>
        <span style=\"color: #b8860b;\">Identifier</span>      <span style=\"color: #bc8f8f;\">\"Default Screen\"</span>
        <span style=\"color: #b8860b;\">Monitor</span>         <span style=\"color: #bc8f8f;\">\"Configured Monitor\"</span>
        <span style=\"color: #b8860b;\">Device</span>          <span style=\"color: #bc8f8f;\">\"Configured Video Device\"</span>
<span style=\"color: #b8860b;\">EndSection</span></pre>

<p>which doesn't seem to contain useful information. All it tells me is that all these options are now configured elsewhere, and I have no idea where that is. The other big problem with <span class=\"code inline\">xorg.conf</span> editing is that you have to restart the X server each time you want to test it out, and (at least on Crunchbang and Ubuntu) the error messages you get aren't exactly useful. They basically say \"there was an error in your xorg.conf\". </p>

<p>Thank you. Which section and line would be useful. Even if you drill down further into the error log, it typically (again, for me at least) just said that the error was a missing <span class=\"code inline\">EndSection</span> on the last line, even though there were no missing <span class=\"code inline\">EndSection</span>s, and the last line consisted of nothing else. It took me something like two hours to track down enough info about the basics to get the screen mirrored on an external monitor (before that, the extra screen was just displaying various seizure-encouraging light patterns). Xrandr still doesn't see the extra monitor by the way, so I still have to muck about further with <span class=\"code inline\">xorg.conf</span>.</p>

<p>Second, and this is the tiny problem almost not worth mentioning, but it's not an issue in Ubuntu. It doesn't have apt-get access to emacs23. If I want to <span class=\"code inline\">apt-get install emacs</span>, it gives me version 22.1 or so. I could spend a bit of time figuring out how to script a <span class=\"code inline\">wget</span> to the GNU ftp site, then run the appropriate commands to untar and install it properly (it's probably just <span class=\"code inline\">make</span> and <span class=\"code inline\">make install</span>, though I've never had to do it so I don't know), but my fucking around time-budget is officially used up for this week.</p>

<p>So there. That's why I'm keeping Ubuntu 10.x. For what it's worth, until I hit the iceberg that is <span class=\"code inline\">xorg.conf</span>, this was going to be a blog post about why I switched. Seriously, I had notes ready and everything. So if you don't need more than one monitor for whatever reason, or you're a xorg wizard and still on Ubuntu, give it a try.</p>

<p>Other than my OS experimentation, I've also been toying with the formlet system I shamelessly lifted out of PLT Racket (still at the <a href=\"http://github.com/Inaimathi/formlets\">GitHub page</a>, but now there's documentation), and I also released that CSS module I wrote about a little while back. I honestly wasn't going to, but those 12 or so lines of code found their way into every single project I've worked on since. Code reuse is good, I hear. The project page is <a href=\"http://github.com/Inaimathi/cl-css\">here</a>, and it is likewise accompanied by a nice little Markdown-enabled documentation sheet.</p>

<p>The big additions since you last saw these projects are</p>

<h3>Formlets now support recaptcha.</h3>

<p>You like how I'm adding high level support like this before the thing can even generate checkboxes, huh? Well, it might be a bit dumb, but I feel no shame in admitting that the order of operations is self-centered. Which is to say, I add features as I need them, not as they make sense in theory. It just so happens that I had call for text inputs, textareas, passwords and recaptcha before one of my projects called for checkboxes, radio buttons or select boxes. I'm sure it'll change soon.</p>

<h3>CSS compilation</h3>

<p>This one's obviously from the css generator. Basically, a task called for a several-hundred-line stylesheet. While it wasn't performing too badly, I realized that eventually, there would be a call for CSS that you could cache (as opposed to the inline styles then generated by <span class=\"code inline\">cl-css</span>). So, I added <span class=\"code inline\">compile-css</span>, which takes a file path and some <span class=\"code inline\">cl-css</span>-able s-expressions and outputs them as flat CSS. Tadaah! If you're running Hunchentoot (or any other server really, <span class=\"code inline\">cl-css</span> is simple enough that I can confidently call it portable) from behind Apache or nginx, you can now have the front-facing server serve out a flat-file stylesheet and still get the benefit of declaring your CSS more succinctly in Lisp.</p>

<h3>Documentation</h3>

<p>Like I said earlier, there's some simple docs included with both projects which you can thank GitHub for. The main reason I wrote them was seriously because there's this little notice that tries to guilt you into putting in a README if you don't have one already. It supports markdown, textile, rdoc, and a bunch of other psuedo-markup languages meant for displaying plaintext while still supporting automatic conversion to HTML. Mine are written in markdown, mainly because I'm already familiar with it, and I managed to find a decent Emacs editing mode for it.</p>

<h3>ASDF-ability</h3>

<p>I'm probably late to this party, given that <a href=\"http://www.quicklisp.org/\">quicklisp</a> is now in public beta stages, but I set up ASDF packages for both <span class=\"code inline\">formlets</span> and <span class=\"code inline\">cl-css</span>, and hooked them up to the <a href=\"http://www.cliki.net/index\">CLiki</a>. So unless it (the CLiki, I mean) goes down again, you can install them both by doing</p>

<pre>(<span style=\"color: #a020f0;\">require</span> '<span style=\"color: #5f9ea0;\">asdf</span>)
(<span style=\"color: #a020f0;\">require</span> '<span style=\"color: #5f9ea0;\">asdf-install</span>)
(asdf-install:install 'cl-css)
(asdf-install:install 'formlets)
</pre>
"))
((5202 3723 540833000) :INSERT (22 :POSTED 3497659200))
((5202 3723 540835000) :INSERT (22 :TAG :BITCHING))
((5202 3723 540837000) :INSERT (22 :TAG :COMMON-LISP))
((5202 3723 540839000) :INSERT (22 :TAG :PROGRAMMING-ENVIRONMENT))
((5202 3723 541022000) :INSERT (23 :TITLE "Thoughts on Cooks [sic] Source"))
((5202 3723 541028000) :INSERT (23 :FILE "thoughts-on-cooks-source.html"))
((5202 3723 541036000) :INSERT (23 :EDITED 3610133717))
((5202 3723 541038000) :INSERT
 (23 :BODY
  "<p>No programming discussion this time. Just some thoughts I had today.</p>
<p>So I caught wind of <a href=\"http://www.facebook.com/pages/Cooks-Source-Magazine/196994196748\">this</a> during my daily Reddit trawl at lunch, and I didn't think much of it. Then I noticed Neil Gaiman and Wil Wheaton were chiming in via twitter. Then I saw a link to the magazine's <a href=\"http://www.facebook.com/pages/Cooks-Source-Magazine/196994196748\">FaceBook</a> page which was in the process of defacement. I chuckled about it, then I went back to work. When I got home, it was still happening. The FB was up to 2200 \"friends\", the <a href=\"http://www.facebook.com/pages/Cooks-Source-Magazine/196994196748#!/pages/Cooks-Source-Magazine/196994196748?v=app_2373072738\">discussion group</a> was filled with people now <a href=\"http://www.facebook.com/topic.php?uid=196994196748&topic=23238\">investigating Cooks Source articles from the archives</a> under suspicion that Gaudio wasn't the first victim of this editor (she wasn't, by the way).</p>
<p>The flippant, asinine email (which I won't copy here; you can find it easily enough by now) probably fueled internet anger more than any kind of legal offense, but this didn't stop people from writing things like \"thief\", \"plagiarist\" and \"copyright infringement\" on the <a href=\"http://cookssource.com/\">Cooks Source</a> wall. Many of them also wrote \"Twatwaffle\", and various Chuck Norris/Monty Python references, but hey, this is the internet. Well, while online content certainly isn't 'public domain' as Ms Griggs claimed, the accusations don't seem fair. </p>
<p>First, she's not a thief. In the same way that someone who downloads a movie illegally isn't a thief. That is an offense, but stealing ain't the right one because the victim isn't actually being deprived of anything when someone makes a copy (many argue that they're deprived of potential profits, but even if that held water legally, it's a moot point in this case because Gaudio's blog is free). </p>
<p>Second, she's not a plagiarist. She might be an idiot with a tin ear for period-piece writing, a poor editor, a worse speller, and a self-righteous, uninformed ass, but she did credit Gaudio for the article (whereas plagiarism would have entailed putting someone else's name on the byline).</p>
<p>The third accusation of \"copyright infringement\", is prickly too. It's not that she didn't do it, according to the letter of current law, it's pretty clear she did. And to be fair, this is pretty much the one place where I feel copyright is approaching a good thing (someone reproducing others' works without permission or compensation and for the express purpose of making money by it). I'm still torn between the implications here, because the outrage tells me that even while ACTA is on many minds, and most folks I talk to complain about how restrictive current copyright is, a very vocal part of the internet still considers it a good thing. The really worrying part for me is that a CC-attribution-share-alike license (which all of my online work has been released under) would expressly allow what happened here.</p>
<p>I hate to be the killjoy, or to call down the internet thunder, but I wouldn't have a problem with that part of what she did. Endorsing an open culture doesn't just work when you argue against DRM on music and games, or when someone tries to shut down Pirate Bay, or when people hell-bent on censorship cry \"DMCA!\" without cause. It means that everyone gets access to your stuff too.</p>
<p>By all means, continue trolling. Assholes deserve to be slapped around just for being assholes, doubly so when they're also grossly incompetent and quick to resort to the \"N years experience\" argument. But I'm going to go on record as saying that I think reproducing work you find online isn't a bad thing. If it is, it <span style=\"font-weight: bold;\">shouldn't be</span> a bad thing. The entire advantage that the internet has over traditional media is that digital copying lets information fly around the globe at almost the speed of light. If you invoke copyright, you slow that information down by artificial means. It's at once inefficient and depressing that people would suffer the lack of light-speed just to keep their ideas under control.</p>
<p>Plagiarism sucks, self-righteous assholes suck, but copying shouldn't.</p>
"))
((5202 3723 541079000) :INSERT (23 :POSTED 3497832000))
((5202 3723 541081000) :INSERT (23 :TAG :COPYRIGHT-BULLSHIT))
((5202 3723 541083000) :INSERT (23 :TAG :IDEA-PEELING))
((5202 3723 541085000) :INSERT (23 :TAG :SPECULATION))
((5202 3723 541288000) :INSERT (24 :TITLE "Debian"))
((5202 3723 541293000) :INSERT (24 :FILE "new-thoughts.html"))
((5202 3723 541295000) :INSERT (24 :EDITED 3610022331))
((5202 3723 541300000) :INSERT
 (24 :BODY
  "<p>I'm temporarily writing in Gedit (lacking the internet connection I'd need to <span class=\"code inline\">apt-get intall emacs23</span> and bend it to my will. Already I find myself annoyed by the pretentious little toolbar, tab array and pretty icons at the top of the screen, and the useless little status bar at the bottom. On a 23, I probably wouldn't have noticed, but on my netbook, this is a pretty severe infringement of my space.</p>

<p>That's not what I wanted to talk about though.</p>

<p>I ended up installing Debian linux on three of my machines just to find out that it's about the same deal as Ubuntu these days, right down to the window manager. It installs fewer things by default, and you can't download a single-disc installer for it, and you can't REALLY install it without a network connection, but I still tried it, and it's still pretty much equivalent. Hell, it even accepts <span class=\"code inline\">apt-get</span> commands, so I don't have to port my startup scripts, though I did have to add a couple of repositories in order to get apt-get access to <span class=\"code inline\">pacpl</span>, <span class=\"code inline\">emacs23</span> and a version of <span class=\"code inline\">sbcl</span> that doesn't crash like a champ when trying to install <span class=\"code inline\">ironclad</span> through <span class=\"code inline\">quicklisp</span>. This means that I just have the task of presenting you with <span class=\"code inline\">diff Ubuntu Debian</span> on three different computers, which is significantly easier than reviewing Debian.</p>

<p>The first thing that struck me is that Debian has a working amd64 implementation. Theoretically, Ubuntu does too, but here's the thing. I have two Intel machines (an old Pentium 2 and an Atom) and one AMD64 machine (a Phenom 2 x4). The intel startup disks I burned (for each 9.04, 9.10 and 10.04 Ubuntu) <span style=\"font-weight: bold;\">never have a problem</span>. Not once. The install has gone flawlessly each time. The AMD machine is the precise opposite story. Not only did I end up making two copies of each startup disk (one at the standard speed, one at the slowest possible) just to make sure the CDs weren't at fault, but I also tried the same install from a bootable USB key. No dice. Ubuntu <span style=\"font-weight: bold;\">does not like</span> AMD, apparently, because it took me no less than 17 attempts to get a single copy of Ubuntu 10.04 working on that desktop machine. Once it worked, it wasn't quite smooth sailing either; it would crash out randomly, and I became convinced through hardware surgery that it was a software problem. My intel machines (including that 8 year old laptop I wrote about a little while back) have never had problems. So, one giant check for Debian.</p>

<p>The missing repos are a bit annoying. Debian by default has access to older versions of some programs I use frequently. This isn't a problem for the most part, until it is. The way I found out was trying to install <span class=\"code inline\">ironclad</span> through <span class=\"code inline\">quicklisp</span>, which kept complaining that it didn't have access to <span class=\"code inline\">sb-byte-rotate</span> (which is an SBCL component that shouldn't need to be installed separately). This was infuriating until I took a look at the output of <span class=\"code inline\">sbcl --version</span>, only to find out it was 1.0.14. I don't need to be bleeding edge, exactly, but that was a little ridiculous. This isn't a huge deal, because the two are essentially interoperable. All it takes is adding a couple of lines to your .sources file and <span class=\"code inline\">apt-get update</span>ing, and you're good to go, so about 10 minutes after finding out what the issue was, I was sitting on sbcl 1.0.29 (which includes <span class=\"code inline\">sb-byte-rotate</span>) and merrily quicklisping away. It's still not zero-effort though, so one small check for Ubuntu.</p>

<p>In the same vein of missing repos, almost to the point that it should be the same objection, Debian really doesn't want you using proprietary drivers. This is ok, I like the initiative of aggressively pushing for open software. Except that my 8 year old guinea pig has a Broadcom wireless card that I need the <span class=\"code inline\">bcm43</span> drivers to use. And my netbook has some Intel branded card that I still haven't gotten working. Wireless is important, guys. We don't all have (or want to have) a web of CAT5 running the floor of our computer and living rooms. Ubuntu solves this by leaving the proprietary drivers out, but gives you a simple interface for turning them on if it detects you have some proprietary hardware in your machine. On Debian, you need to research the problem, enable the correct repos and install these drivers yourself. A check for Ubuntu.</p>

<p>Ubuntu has out-of-the-box support for multiple monitors. Debian does too, except that by default, it just mirrors your screen, which isn't what you want. I haven't gotten it to work yet, but based on what I'm reading, it will only require <span class=\"code inline\">xrandr</span> trickery, and some mild configuration changes to Gnome, as opposed to <span class=\"code inline\">xorg.conf</span> hackery (alternatly, I could just upgrade Gnome, but I'm looking at switching to <span class=\"code inline\">stumpwm</span> in the near future anyway, so I want a way of using multiple monitors with X11 that doesn't depend on a specific desktop). Another small check for Ubuntu.</p>

<p>So there. The way it looks to break down is that Debian stays on my AMD machine at home, and I keep Ubuntu on the various Intel machines I own. It shouldn't be too big a pain in the ass, given their similarities, they're almost silently interoperable.</p>
"))
((5202 3723 541352000) :INSERT (24 :POSTED 3498440400))
((5202 3723 541354000) :INSERT (24 :TAG :FREE-SOFTWARE))
((5202 3723 541356000) :INSERT (24 :TAG :PROGRAMMING-ENVIRONMENT))
((5202 3723 541568000) :INSERT (25 :TITLE "Debian Follow-up, and StumpWM"))
((5202 3723 541573000) :INSERT (25 :FILE "debian-and-stump-w-m.html"))
((5202 3723 541578000) :INSERT (25 :EDITED 3610022331))
((5202 3723 541580000) :INSERT
 (25 :BODY
  "<p>Ok, so remember how I said I added some of the latest Ubuntu repos to my Debian sources.list just to hit one or two installs?</p>

<p>Don't do that.</p>

<p>For the love of God, don't. Or, at least, remove them from your sources file afterwards. I was happy enough with the stability of Debian this weekend, so I decided to run my install script (which includes things from audio-editing programs to inkscape, to emacs to several languages). Bad idea, to put it mildly. I had no idea what the hell I was doing at the time, so I just hit <span class=\"code inline\">y ret</span> a whole bunch of times, and in the process fucked up my sytem. I knew I was boned about the time I saw</p>

<pre>removing gnome-network-manager
removing gnome-desktop
removing gnome-tray
removing x-server
[more bad stuff]</pre>

<p>whizz by on the terminal window. When I next restarted, I got a friendly little prompt, and that's it. My data was still intact, but I didn't have a network connection for perhaps obvious reasons, so I <span class=\"code inline\">mount</span>ed a usb-stick and got the shit I've been working on for the past day or so off, and prepared to reinstall (I don't know nearly enough about Linux innards to attempt surgery at this point). </p>

<p>I had a thought though; my current installation was Debian Lenny, and there was a \"testing\" version out called Squeeze (\"testing\" is in quotes, because by all accounts I've read, it's rock solid by this point). It took a bit of counter-intuitive navigation on the Debian site to get to the <a href=\"http://www.debian.org/devel/debian-installer/\">squeeze installer</a>, but I guess that's reasonable; they want most people to install the \"stable\" release, not the \"testing\" or \"unstable\" ones. So there, I'm typing to you live from Debian Squeeze, and I have to tell you, it's good. The biggest gripes I had from the last post have been addressed; the new version of Gnome plays nice with two monitors out of the box, and the squeeze repos have more recent installs of the programs I use than Ubuntu. Specifically, I get out-of-the-box <span class=\"code inline\">apt-get</span> access to <span class=\"code inline\">emacs23</span>, <span class=\"code inline\">sbcl 1.0.40</span>, <span class=\"code inline\">haskell-platform</span>, <span class=\"code inline\">pacpl</span> and <span class=\"code inline\">synfig</span>.</p>

<p>So there. Debian beats Ubuntu from my perspective at this point.</p>

<p>At this point, since I was already ass-deep in installs anyway, putting in <span class=\"code inline\">StumpWM</span> seemed like a logical conclusion. So I did. And I'm in love. It's Emacs for window management. Just as a note, I've found that any software I could describe as \"Emacs for [n]\" is something I'd probably like. Sadly, between Emacs, Emacs for the web and Emacs for window management, I get the feeling we're about tapped out now. I like GIMP, but it's not exactly \"Emacs for images\". I've set up a minimal <span class=\"code inline\">.stumpwmrc</span> file like so</p>

<pre>
<span style=\"color: #b22222;\">;; </span><span style=\"color: #b22222;\">Psst, Emacs. This is a -*- lisp -*- file.
</span>(<span style=\"color: #a020f0;\">in-package</span> <span style=\"color: #7a378b;\">:stumpwm</span>)
(message <span style=\"color: #8b2252;\">\"Loading rc ...\"</span>)

<span style=\"color: #b22222;\">;;; </span><span style=\"color: #b22222;\">Program definitions
</span>(defcommand emacs () () (run-or-raise <span style=\"color: #8b2252;\">\"emacs\"</span> '(<span style=\"color: #7a378b;\">:class</span> <span style=\"color: #8b2252;\">\"Emacs\"</span>)))
(defcommand browser () () (run-or-raise <span style=\"color: #8b2252;\">\"conkeror\"</span> '(<span style=\"color: #7a378b;\">:class</span> <span style=\"color: #8b2252;\">\"Conkeror\"</span>)))

<span style=\"color: #b22222;\">;;;</span><span style=\"color: #b22222;\">Reloading
</span>(defcommand reinit () () (run-commands <span style=\"color: #8b2252;\">\"reload\"</span> <span style=\"color: #8b2252;\">\"loadrc\"</span>))

<span style=\"color: #b22222;\">;;;</span><span style=\"color: #b22222;\">Keybindings
</span>(define-key *root-map* (kbd <span style=\"color: #8b2252;\">\"b\"</span>) <span style=\"color: #8b2252;\">\"browser\"</span>)
(define-key *root-map* (kbd <span style=\"color: #8b2252;\">\"C-q\"</span>) <span style=\"color: #8b2252;\">\"quit\"</span>)
(define-key *root-map* (kbd <span style=\"color: #8b2252;\">\"C-r\"</span>) <span style=\"color: #8b2252;\">\"reinit\"</span>)

<span style=\"color: #b22222;\">;;;</span><span style=\"color: #b22222;\">Things that happen on StumpWM startup
</span>(run-shell-command <span style=\"color: #8b2252;\">\"/usr/bin/trayer --SetDockType false --transparent true --expand false\"</span>)
(run-shell-command <span style=\"color: #8b2252;\">\"nm-applet --sm-disable\"</span>)</pre>

<p>just to get everything up and running (<span class=\"code inline\">trayer</span> is needed to get the <span class=\"code inline\">nm-applet</span> working so I can has internets).</p>

<p>It's occurred to me that, now that my window manager is a Lisp machine, I could hard-wire \"web-jumps\" into my environment with Firefox. Not sure if it'd be worth giving up the keyboard shortcuts, but I would get HTML5 support, and all of my scripting would be done in Lisp at that point (rather than a JS/Lisp split).  I'm really not up for that this weekend, but I'll keep playing with Stump. So far, it's good stuff.</p>
"))
((5202 3723 541629000) :INSERT (25 :POSTED 3498699600))
((5202 3723 541631000) :INSERT (25 :TAG :PROGRAMMING-ENVIRONMENT))
((5202 3723 541780000) :INSERT (26 :TITLE "Not Blubbing"))
((5202 3723 541787000) :INSERT (26 :FILE "not-blubbing.html"))
((5202 3723 541789000) :INSERT (26 :EDITED 3610022331))
((5202 3723 541791000) :INSERT
 (26 :BODY
  "<p>I've been trying to get my mind around <a href=\"http://learnyouahaskell.com/\">Haskell</a> for the past little while. That's not a link to <a href=\"http://haskell.org/\">Haskell.org</a>, incidentally, but the way people talk about it, <a href=\"http://learnyouahaskell.com/\">Learn You A Haskell For Great Good</a> may as well be the official site. It's referenced so commonly that people usually call it LYAH. The learning process not easy going, I have to tell you. Probably because it's both the first strongly typed, and the first purely functional language I've tried seriously to learn (as you can see by the logo array above). I'm going to keep at it; this isn't anywhere near the first brick wall I've attempted to headbutt through, but I'm observing some disturbing patterns in my thoughts, and I need to get them out.</p>

<p>It's surprising how tempting it is to say \"bah, these Monads aren't worth my time; what do I need them for?\"</p>

<p>The same thoughts commonly arise about strong typing and purity; it's really <span style=\"font-weight: bold;\">really</span> tempting to drop the learning and just run back to Common Lisp/Erlang/Ruby for my programming purposes. The trouble is, this is precisely where the <a href=\"http://www.paulgraham.com/avg.html\">Blub Paradox</a> strikes. Ok, yes fair, I can say \"How can these Haskellers get anything done without macros?\", but the thoughts I'm having are surprisingly similar to \"This is just like Common Lisp, except for all this weird, hairy stuff I don't understand\".</p>

<p>I'm not afraid of looking up the hierarchy, it's just unsettling that I can't tell and may be lulling myself into a false sense of superiority. The worst possible outcome here is that my internal biases rob me of power I might otherwise wield. A bad, but certainly tolerable outcome is \"wasting\" the time it takes to learn new concepts and techniques that are merely <span style=\"font-weight: bold;\">as</span> effective (or slightly less effective) than ones I already know. The best case is clambering through to find techniques I can apply unilaterally to my projects, both professional and personal.</p>

<p>Looking at it that way, it's pretty obvious that the correct (but admittedly, seemingly insane) answer is to keep hitting this wall with my head, and hope it collapses before I do.</p>
"))
((5202 3723 541813000) :INSERT (26 :POSTED 3498872400))
((5202 3723 541815000) :INSERT (26 :TAG :GENERAL-PROGRAMMING-THOUGHTS))
((5202 3723 541817000) :INSERT (26 :TAG :LANGUAGES))
((5202 3723 542158000) :INSERT
 (27 :TITLE "Language Smackdown Notes and Smalltalk"))
((5202 3723 542165000) :INSERT (27 :FILE "language-smackdown.html"))
((5202 3723 542175000) :INSERT (27 :EDITED 3610022331))
((5202 3723 542178000) :INSERT
 (27 :BODY
  "<p>I went to the <a href=\"http://gtalug.org/wiki/Meetings:2010-12\">Dynamic Languages Smackdown</a> yesterday, and I'm recording my thoughts before losing too many of them. It was an event hosted by <a href=\"http://gtalug.org/wiki/Main_Page\">GTALUG (the Greater Toronto Area Linux User Group)</a>, and basically involved advocates of 7 languages standing up and talking about theirs.</p>

<p>Before I go any further, as an aside, the irony of a guy who writes a blog called \"Language Agnostic\" going to something called the \"Dynamic Languages Smackdown\" is not lost on me. It turns out I wasn't the only language nerd there though, and if nothing else I got a <a href=\"http://pragprog.com/titles/btlang/seven-languages-in-seven-weeks\">new book recommendation</a> out of it.</p>

<p>The seven languages were Smalltalk, Ruby, Python, Erlang, Lisp, JavaScript and Perl, and the format was</p>

<ul>
  <li>Introduction</li>
  <li>Questions from the audience</li>
  <li>Questions</li>
  <li>Code examples</li>
</ul>

<p>To summarize, I kicked off (subtly, so no one seems to blame me yet) a line of questioning dealing with canonical implementations that more or less got touched on repeatedly throughout the talk. Erlang guy had it easy, because that language <span style=\"font-weight: bold;\">actually</span> has just one canonical implementation (with one attempted port to the JVM that apparently no one takes seriously yet). Other than Erlang, what struck me here is how diverse the pool actually is. I mostly hack Common Lisp these days, and only vigorously play with Ruby, Erlang and Haskell (and PHP at work, but as you can see by the logo bar, I'm not terribly proud of that), so I was under the impression that Lisp was the only freak language that had so many implementations to choose from<a name=\"smackDownn1\" href=\"#smackDownf1\">[1]</a>. That turned out to be a misconception; Ruby has JRuby and Iron Ruby (both of which purportedly conform to the same spec and are both interchangeable and \"official\" as far as the community is concerned), Myles Braithwaite put up a slide listing twenty or so different Python implementations (which disparately support Python 2.5, 2.9 and 3.x specs), Smalltalk has at least two open-source forks (and <a href=\"http://smalltalk.gnu.org/\">gnu-smalltalk</a>, but that wasn't really discussed), the Perl community is apparently split between 5 and 6 and JavaScript has at least three different server-side implementations (the client-side situation is worse).</p>

<p>It's weird, because as I've said, I was under the impression that \"a language\" meant one canonical implementation with one or two experimental projects, but (at least in the dynamic world) that seems to be false. It's odd, because people cite \"difficulty choosing an implementation\" as one of the principal reasons not to go with Common Lisp. I guess it's more of an excuse after all.</p>

<p>The other big surprise was the age of the advocates. Of the seven, only Alan Rocker (the Perlmonger of the group) had the sort of beard you'd expect, and everyone other than Alan and Yanni (the Smalltalk presenter) seemed to be a student. I'm particularly happy about this since Lisp gets cast as the old-man's language, but in reality, programmers my age seem to be more common. Not that \"age of the community\" is important in any tangible way, just interesting.</p>

<p>\"Smackdown\" thankfully turned out to be too strong a word; other than a fierce rivalry between the Python and Ruby presenters (and a few low-blows from both of them aimed at JavaScript), everyone was respectful of the other languages there. It was fairly informative, and I'm going to pick up and play with Clojure, a Smalltalk (either gnu or <a href=\"http://pharo-project.org/home\">Pharo</a>) and more Python as a direct result. </p>

<p>A note for future presentations in this vein though:</p>

<ol>
  <li>Please don't do code examples last. This should have been done up-front with the introductions, and probably allotted 15 minutes or so per language. Alan didn't even get enough time to present his.</li>
  <li>Either admit that these discussions will take more than two hours, or invite fewer languages at once. The conversations easily could have continued for a further hour or two (and probably did at the pub after the event, but I had work the next day, so I couldn't go).</li>
  <li>Be prepared with the slides beforehand (anyone else would be able to blame PowerPoint, but this was the Linux User Group, so you don't get that luxury).</li>
</ol>

<h3>Preliminary Impressions of Smalltalk</h3>

<p>I did briefly try to get into Pharo, but I found it annoying to say the least. This doesn't mean I won't keep trying; I had a negative initial reaction to pretty much every language I currently know and love. There are some definite initial concerns though, the biggest of which is that Pharo insists that you use its \"Environment\" (which is only really a big deal because of the way that environment is constructed). It's heavily mouse-dependent (in fact the intro text suggests you get yourself a three-button mouse with a scroll-wheel to get the most out of it), and it insists on handling its own windowing (which means if you got used to a <a href=\"http://www.bluetile.org/\">tiling</a> <a href=\"http://www.nongnu.org/stumpwm/\">window</a> <a href=\"http://www.winsplit-revolution.com/\">manager</a>, you are <span style=\"font-weight: bold;\">so</span> screwed. The gnu implementation is titled \"The Smalltalk for those who can type\", so at least I know I'm not alone. Minor concerns about image-based development include things like \"How does source control work?\" and \"how do I use Pharo on a team?\", but I'm sure those are resolved and I simply haven't dug deeply enough to have an idea of how yet.</p>

<hr />

<p>1 <a name=\"smackDownf1\" href=\"#smackDownn1\">[back]</a> - First off, the \"language\" is split into Scheme, Common Lisp, and Other. In the Scheme corner, you have <a href=\"http://racket-lang.org/\">Racket (formerly PLT)</a>, <a href=\"http://www.gnu.org/software/guile/guile.html\">Guile</a>, <a href=\"http://code.google.com/p/termite/\">Termite</a> (which runs on top of <a href=\"http://dynamo.iro.umontreal.ca/~gambit/wiki/index.php/Main_Page\">Gambit</a>), <a href=\"http://www-sop.inria.fr/mimosa/fp/Bigloo/\">Bigloo</a>, <a href=\"http://www.gnu.org/software/kawa/\">Kawa</a> and <a href=\"http://sisc-scheme.org/\">SISC</a> (and a bunch of smaller ones). In Common Lisp, there's <a href=\"http://www.sbcl.org/\">SBCL</a>, <a href=\"http://www.cons.org/cmucl/\">CMUCL</a>, <a href=\"http://www.gnu.org/software/clisp/\">Clisp</a>, <a href=\"http://common-lisp.net/project/armedbear/\">Armed Bear</a> and <a href=\"http://www.lispworks.com/\">LispWorks</a> (and about 10 smaller ones). Finally in \"Other\", you find crazy things like <a href=\"http://www.gnu.org/software/emacs/emacs-lisp-intro/\">Emacs Lisp</a>, <a href=\"http://en.wikipedia.org/wiki/AutoLISP\">AutoLisp</a>, <a href=\"http://www.paulgraham.com/arc.html\">Arc</a>, <a href=\"http://clojure.org/\">Clojure</a> and <a href=\"http://www.newlisp.org/\">newLisp</a> (which are all technically Lisps, but conform to neither the Common Lisp nor Scheme standards). This is sort of why I thought having a representative for \"Lisp\" is kind of a joke at a talk like this; which Lisp are you talking about?</p>

<!--  LocalWords:  GTALUG Smalltalk Erlang JVM Haskell PHP JRuby Braithwaite smalltalk Perlmonger Yanni Clojure Pharo 
-->
"))
((5202 3723 542265000) :INSERT (27 :POSTED 3501378000))
((5202 3723 542270000) :INSERT (27 :TAG :GENERAL-PROGRAMMING-THOUGHTS))
((5202 3723 542274000) :INSERT (27 :TAG :NOTES))
((5202 3723 542278000) :INSERT (27 :TAG :SMALLTALK))
((5202 3723 542791000) :INSERT (28 :TITLE "Bluetile"))
((5202 3723 542801000) :INSERT (28 :FILE "bluetile.html"))
((5202 3723 542806000) :INSERT (28 :EDITED 3610022331))
((5202 3723 542809000) :INSERT
 (28 :BODY
  "<p>Just a quick update this week; I intend to record my thoughts on Bluetile (and I guess possibly xmonad by extension, but I get the feeling you could hammer the latter into a workable solution).</p>

<p>To start with</p>

<h3>Why a Tiling WM?</h3>

<p>I actually get asked this at work, so I won't assume that you're automatically on-board with the idea of using a tiling window manager. The most common questions are \"Why?\" and \"Isn't it hard learning all those keystrokes?\" The second is the easier question, so I'll answer it first; yes. But a good window manager should let you adjust keybindings<a href=\"#bluetilef1\" name=\"bluetilen1\">[1]</a>, and the point here is to make your environment fast, not so easy to learn that the office secretary could use your computer in a pinch.</p>

<p>The answer to the first question is basically that. </p>

<p>It makes you faster.</p>

<p>Think about your editor. Actually, if you don't use Emacs, think about your editor. If you use Emacs, you already know what I'm talking about here; just skip to the next heading, where I give you the lowdown on Bluetile. Think about how you use that editor. Do you grab your mouse, and head over to the file menu every time you need to copy and paste something, or do you just <span class=\"code inline\">Ctrl-c Ctrl-v</span>? I'm hoping this is a ridiculous question; of course you use the keyboard shortcut when you can. It's faster. It would be utterly ridiculous to have to do everything with the mouse. Well, that's basically why. When you realize that the keyboard is so much faster, following that thread to its conclusion tells you that, except in special circumstances<a href=\"#bluetilef2\" name=\"bluetilen2\">[2]</a>, you should use the keyboard as your primary input peripheral. If you analyze your mousing actions on a day-to-day basis, it'll occur to you that you spend a lot of time in a few different ways.</p>

<ol>
  <li>Browsing the net (where you use the mouse to click on links and right-click on various things).</li>
  <li>Running programs (either from the dock on OS X or from the Start menu/desktop icons on Linux/Windows)</li>
  <li>Moving, sizing and adjusting windows (especially if you've got multiple, large screens. I typically have my editor, browser, debugger, a terminal window and maybe a movie to watch in the background. As I type this, I'm watching a talk on <a href=\"http://vimeo.com/4725365\">\"Models and Theories\" by Peter Norvig</a>, which I can heartily recommend.)</li>
</ol>

<p>The first point is something that you'd want a keyboard-driven browser for (I use <a href=\"http://conkeror.org/\">Conkeror</a> for preference, though most people seem to have decided to live with the mouse in the context of their browser), but 2 and 3 are both things that a good tiling window manager will solve for you. Depending on the manager, you either get a \"run\" command (a keystroke that brings up a little input where you can type the name of the program you want to run), or a keystroke for the most common programs, or both, which means that you don't need to rely on the mouse to run programs. You just need to hit <span class=\"code inline\">Win-p</span> and type <span class=\"code inline\">emacs</span> or (in my case) hit <span class=\"code inline\">C-t C-e</span>. Either of these is faster than grabbing the mouse, getting to your desktop, moving the cursor over and double-clicking on the Emacs icon. </p>

<p>Moving, sizing and adjusting is typically done in order to get maximum use of your screen real-estate. For my part, I rarely want overlapping windows, but I always want as much of my screen used as possible. The way tiling WMs work is by automatically laying out any windows you open so that they take up as much space as you need (either by letting you specify splits and groups as in StumpWM, or by letting you manage layouts in xmonad). By remembering a few extra keystrokes, you free yourself entirely from the mouse. </p>

<p>So that's why.</p>

<h3>Bluetile (really)</h3>

<p>That brings me to <a href=\"http://www.bluetile.org/\">Bluetile</a>. I've been using <a href=\"http://www.nongnu.org/stumpwm/\">StumpWM</a> for my purposes, but I wanted to try out the competition. Bluetile is a derivative of <a href=\"http://xmonad.org/\">xmonad</a>, the Haskell-based tiling WM, with an aim of being easy for beginners to get into. They do this, kind of ironically, by putting in mouse-oriented controls and by running on top of Gnome instead of standalone. That's pretty sweet, actually, and it seems to be fairly easy for beginners to get into. The trouble is that it doesn't do a very good job solving the problems I mentioned above (so while it's easy to get into, I doubt it would do a good job convincing beginners that tiling WMs are worth the trouble). First, it provides on-screen icons for navigation (each of which have keyboard counterparts, I'm just bemoaning the waste of screen space), and it keeps toolbars and gaps between windows so that you can still see your start bar and background. The gaps have no reason I can see; the toolbars are kept so that you can still click on windows and drag them around, which sort of defeats the purpose.</p>

<p>That's all nitpicks though, and you could argue that beginners would find it easier than the full-keyboard control of something like the standard xmonad or Stump. The big downside for me is actually the awkward screen model. I can imagine things going well on a single ginormous screen, and if I was running on one of <a href=\"http://www.apple.com/imac/\">the 27\" iMacs</a>, there'd be no problem. The trouble comes when you have multiple monitors, because the way xmonad seems to track them is by assigning a different \"workspace\" to each monitor. I'm sure this fit the program model perfectly, but it means that <span class=\"code inline\">Alt-Tab</span> only cycles between open windows on whichever monitor you have focus, and you have to pick your \"focused\" monitor. It's possible that I'm spoiled and this is actually how most TWMs work, but Stump doesn't seem to treat windows on different physical screens as separate areas, and I don't need to pick a working monitor. The other issue it brings up is with workspace switching. Because Bluetile gives you 9 workspaces (and assigns 1 to your first monitor, and 2 to your second), you need to be careful about which you switch to lest you screw yourself. For example, if you open Emacs on one monitor and a browser on another, then switch to <span class=\"code inline\">workspace 2</span>, they switch places. That is, your Emacs window gets shunted to monitor 2 while your browser gets pulled to the one you were looking at. That's not really what I want if I have multiple screens staring at me. If you then switch to <span class=\"code inline\">workspace 4</span> (lets say you have Movie Player open there), your Emacs window stays where it is and <span class=\"code inline\">workspace 4</span> replaces your browser in monitor 1. Now, moving back to <span class=\"code inline\">workspace 1</span> causes your Emacs window to fly back onto monitor 1 and Movie Player to go to monitor 2. In other words, you're technically back where you started, except that <span class=\"code inline\">workspace 2</span> now contains Movie Player instead of your browser. How do you get back to your initial setup? You have to switch to <span class=\"code inline\">workspace 2</span> then to <span class=\"code inline\">workspace 4</span> then back to <span class=\"code inline\">workspace 1</span>. This leaves something to be desired; and demonstrates that by conflating \"monitors\" and \"workspaces\", grater user-side complexity is achieved with no visible upside.</p>

<p>Treating monitors this way also introduces an extra level of complexity in the UI; you also need keys to select your primary monitor (they're <span class=\"code inline\">Win-w</span>, <span class=\"code inline\">Win-e</span> and <span class=\"code inline\">Win-r</span> in Bluetile; I don't know what happens if you have more than three monitors). That's too much to keep in my head, and this is coming from someone who uses Emacs. I won't be switching to Bluetile any time soon, and their docs give the impresion that this was pretty much how xmonad handles things too, which is sad. And means I'm sticking with Stump for the forseeable future.</p>

<hr />

<p>1 <a href=\"#bluetilen1\" name=\"bluetilef1\">[back]</a> - So you don't so much have to memorize them as come up with some simple mnemonics and then assign keys to match those. For example, my <span class=\"code inline\">.stumpwmrc</span> is set so that <span class=\"code inline\">C-[keystroke]</span> starts up programs, <span class=\"code inline\">C-M-[keystroke]</span> runs a work-related shortcut (such as remote desktop, or opening my timesheet file) and <span class=\"code inline\">M-[keystroke]</span> does wm-related tasks. <span class=\"code inline\">[keystroke]</span> is typically just the first letter of whatever I'm trying to do (so <span class=\"code inline\">C-e</span> runs <span style=\"font-weight: bold;\">E</span>macs and <span class=\"code inline\">C-M-r</span> runs <span style=\"font-weight: bold;\">R</span>emote Desktop). This is a mnemonic that makes sense for my workflow. I could easily have just kept track of my most common tasks and bound each to an F key.</p>

<p>2 <a href=\"#bluetilen2\" name=\"bluetilef2\">[back]</a> - For example, if you need to do some drawing. Either of decorative pieces/icon modifications for a web app or for the UI layouts in an environment like Flash/VB. In this situation, it goes without saying that you actually want a tablet, or a trackball, or a multi-touch trackpad, as opposed to a vanilla mouse. The only thing I'd use the traditional option for these days is gaming, and even then, tablets give you an edge if you know what you're doing because of the 1:1 mapping of screen to tablet.</p>
"))
((5202 3723 542930000) :INSERT (28 :POSTED 3501896400))
((5202 3723 542936000) :INSERT (28 :TAG :PROGRAMMING-ENVIRONMENT))
((5202 3723 543395000) :INSERT (29 :TITLE "Omega"))
((5202 3723 543402000) :INSERT (29 :FILE "omega.html"))
((5202 3723 543405000) :INSERT (29 :EDITED 3610022331))
((5202 3723 543407000) :INSERT
 (29 :BODY
  "<p>I've been thinking about languages a lot lately. Which is kind of a joke, given the title of my blog, but I actually mean \"I've been thinking about them more than usual\". This thought has been specifically dominated by thoughts of the Blub hierarchy as proposed by Paul Graham. </p>

<p>I'm not sure what's on top.</p>

<p>PG claims \"Lisp\", I've seen many that shout \"Ruby\", I've <span style=\"font-weight: bold;\">met</span> many that claim \"Haskell\". In fact, if you participate in programming discussion for any length of time, there's a pretty good chance that you'll meet someone for every language (other than C) claiming it's Omega. It's ridiculous, of course. All most of them are really claiming is \"This is the most powerful language I know how to work with\", which is not the same thing as \"the most powerful language\". It's easy to see that trying to compare in any supposedly objective sense would cause giant hatestorms and various infighting. So people are perhaps justified in making statements like</p>

<span class=\"quote\">\"You don't compare a hammer with a screwdriver, but you use the one that fits your task & way of thinking/education/needed level of abstraction the most. Also, since the one doing the comparison is biased by the fact that he knows at least one of the two, or at least prefers one of the two, it is hard to find a truly objective criteria for comparing them (exceptions exist).\" <span class=\"sig\">-<a href=\"http://programmers.stackexchange.com/users/2439/rook\">Rook</a>, <a href=\"http://programmers.stackexchange.com/\">pogrammers.SE</a></span></span>

<p>when discussing language comparison. That was an answer from <a href=\"http://programmers.stackexchange.com/questions/21891/are-language-comparisons-meaningful/21894#21894\">a question</a> about whether language comparison was useful. As of this writing, it has been closed and re-opened twice, and the original asker has accepted (then unaccepted, then accepted again) a joke answer. This is perhaps more telling of the culture of programmers.SE than of the question, but it doesn't seem like an uncommon response. People duck comparisons precisely because languages are half tools and half religions, and no one wants a crusade declared. But, well, you need to compare.</p>

<span class=\"quote\">\"A language is a tool. That said, I've seen really, really crappy tools before. No one wants to work with a hammer whose head is liable to fly off and hit another carpenter in the stomach. Likewise, if you noticed your fellow worker's hammer was in that shape, you'd probably steer clear of them when they were using it. It's also important to really understand which tool it is. You can't use a screwdriver and hammer interchangeably (though some try desperately). Hell you can't even use all hammers interchangeably; you need a sledge for some things, a mallet for others and a tack for yet others. If you use the inappropriate tool, then at best, you'll do a poorer job, at worst you'll injure yourself or a co-worker.\" <span class=\"sig\">-me, programmers.SE</span></span>

<p>Graham goes further, stating that not only can you compare languages in terms of power, but goes on to point out the obvious corollary that there is therefore such a thing as an empirically best language. As a note, I agree with him, but \"which religion is best?\" is a question you just don't discuss in polite society, so I haven't pushed the idea on any forum I frequent. It makes sense though. No one would disagree that Assembly < Cobol < Python on the power scale (I'm defining \"power\" as a non-specific mix of expressiveness, terseness, maintainability, readability and flexibility). And even admitting that simple truth exposes you to the idea that there's a ladder, or tree, or at least concentric circles of languages with one (or a relatively small group) taking the prime position. </p>

<p>Omega. </p>

<p>Graham puts Lisp there, but he's making the same claim that any Ruby ardent or avid Haskeller are expressing; \"Of all the languages I know, this one is the most powerful\". The thing is, I haven't heard many convincing arguments to the contrary. The best argument aimed at Lisp these days is that it's slow, and even then, slow in what sense? It can certainly do the job of server software, or even local desktop/console software on today's powerful systems. Remember, Lisp was called slow back when 1Gz was the sort of processing power you paid many thousands of dollars for. I have more than that right now in my $300 dollar netbook. We're fast approaching an age where a phone you get for free with a subscription is more powerful. \"Slow\" just isn't a good enough strike against a language to discount it anymore. Other than that, people complain about the parentheses, which is an empty complaint at best, and typically a trolling attempt. The only good argument against Lisp as Omega comes from an unlikely source.</p>

<span class=\"quote\">\"I don't think it's necessarily Omega. The Haskellers and MLers say 'Well, from where we sit, Common Lisp looks like Blub. You just don't understand the brilliance of strong inferred typing'. And they may be right. Of course, Common Lispers look at Haskell and say 'Well, Haskell's really Blub, because you guys don't have macros'. It may be the case that there is no Omega, or that Common Lisp and Haskell are on different branches of the lattice, and someone's gonna find a way to unify them and a few other good ideas and make Omega.\" <span class=\"sig\">-Peter Seibel, <a href=\"http://www.youtube.com/watch?v=VeAdryYZ7ak\">Practical Common Lisp Talk at Google</a></span></span>

<p>It's an interesting fact that practitioners of either language can point to lack of features in the other. That has some pretty obvious corollaries as well. </p>
<p>
  <ol>
    <li>There may be such a thing as the most powerful language right now, but it may involve trade-offs (I don't know what it is, but one exists. I'll call it \"Alpha\" so as not to offend anyone). </li>
    <li>There is such a thing as the language that will be the best for the next 10 to 100 years (This one may or may not exist in some form today; it might be unified from several current languages as Seibel alludes. I'll use his name and call it \"Omega\"). </li>
    <li>There is such a thing as the most powerful language that could exist on current machine architectures (This one almost certainly doesn't exist yet, and may never be embodied in an implementation. It's just the limit, in the calculus sense, of what we can hope to achieve with a language along the axes of expressiveness, terseness, maintainability, readability and flexibility. This one I'll call <span class=\"code inline\">0</span>).</li>
  </ol>
</p>

<p>I'm not sure what Alpha is. I'm not sure anyone knows, because as I've said, people tend to bind that variable to whichever is the most powerful language they currently know. <span class=\"code inline\">0</span> is far away, and I won't even try talking about it today, because I don't have anywhere near enough information to make a decent guess at what it'll look like. So what does Omega look like? Well, Graham effectively says it's Arc (or what Arc will evolve into). Others variously substitute their own languages. There's a sizable community which thinks it's Haskell. Some ardents think it's Lisp. A few would like you to believe it's Java, despite the recent turbulence between Oracle and Google. And there are a couple of personalities in the industry who are vigorously pushing either Ruby or C#. Yegge echoes Seibel pretty closely</p>

<span class=\"quote\">\"[T]he Wizard will typically write in one of the super-succinct, \"folding languages\" they've developed on campus, usually a Lisp or Haskell derivative.\" <span class=\"sig\">-Steve Yegge, <a href=\"http://steve-yegge.blogspot.com/2006/07/wizard-school.html\">Wizard School</a></span></span>

<p>It's a line from one of his humorous, fictional pieces wherein he describes a Hogwart's-like school that churns out wonder-kid programmers, but it still seems like a vote for the Haskell/Common Lisp unification theory. It might happen. If it does, it'll be a race between the Haskellers and Lispers to out-evolve one another. In order to converge, Haskell needs to strap on prefix notation and macros, make IO easy (rather than possible), and blur the line between run-time, read-time and compile-time. Lisp needs declarative matching definitions, lazyness, currying (possibly eliminating the separate function namespace), strong types and a few small syntactic constructs (function composition and list destructuring leap to mind first). Lisp has a longer list to run through, but keep in mind that because it <span style=\"font-weight: bold;\">has</span> macros, almost all of them can theoretically be added by you as you need them, rather than by CL compiler writers as they decide it's worth it. </p>

<p>It's also worth noting that the last point in Haskell's list is a pretty tricky proposition. How do you blur read/compile/run time when one of your goals is to have a complete type system? Well. REPLs for Haskell exist, so I assume it's possible, but making it part of the language core doesn't seem to be a priority at the moment (and probably won't be for a while due to the performance hits it imposes, and the perception performance hits still have in the general public of programmers). That's not the only hard bit either language would have though. How do you implement full currying <span style=\"font-weight: bold;\">and</span> optional/default/keyword/rest arguments? Haskell purports to solve the problem by defaulting to currying, and giving you the option of passing a hash-table (basically) as an argument to implement flexibility. LISP gives you <span class=\"code inline\">&rest</span>, <span class=\"code inline\">&body</span> <span class=\"code inline\">&key</span> and very simple default argument declaration, but \"solves\" the currying issue by making currying explicit. Neither language's solution satisfies, because sometimes you want flexible arguments (and counter-arguing by saying \"well, if you need them, you've factored your application wrong\" is missing the point; expressiveness is a measure of power, remember, and <span style=\"font-weight: bold;\">having</span> to think about the world in a particular way is a strike against you in that sense), and sometimes you want implicit currying (this is perhaps most obvious when writing in Haskell's point-free style, and if you've never done so, I doubt I could convince you).</p>

<p>As a common lisper, there are a bunch of things I'd like to steal from Haskell, if I could. The pattern-matching definitions are certainly useful in some places, list destructuring would help, and function composition seems useful (though this is, like <span class=\"code inline\">defmacro</span>, the sort of construct you have to understand first, in order to find places that it would greatly simplify). I'll check later, but I have a sneaking suspicion that someone has already lifted all of the above into a library somewhere on github or savannah. Even if not, list destructuring and function composition seem like they'd be easy enough to implement. The latter as a call to <span class=\"code inline\">destructuring-bind</span>, the former as a simple <span class=\"code inline\">fold</span> macro.</p>

<p>From the other side, there's already two projects underway; <a href=\"http://www.liskell.org/\">Liskell</a> is a competing compiler to GHC that has a prefix notation and outputs the same machine code, and <a href=\"http://chrisdone.com/posts/2010-11-25-lisk-lisp-haskell.html\">Lisk</a> is a pre-processor for GHC that takes specific prefix notation forms and converts them programatically back to the Haskell source code before invoking the compiler. Lisk's creator talked briefly about macros, but the project is early enough along that nothing much more specific is out there right now (I'm watching <a href=\"https://github.com/chrisdone/lisk\">his github repo</a> with interest though).</p>

<p>I haven't a clue how to place my own bet. I tried starting this paragraph both with \"My bet's on Lisp...\" and \"My bet's on Haskell...\", but each beginning got to a logical dead end within two sentences. It doesn't seem like one can completely absorb the other. But, if Haskell + Lisp makes Omega, we'll see what it looks like shortly (by which I mean ~10 years) because cross-pollination is already happening, and it's not a far jump from there to full-on unification. Or maybe things get bloodier as the preview to Barski's Land of Lisp implies, who knows. </p>

<p>Either way, we'll see soon enough.</p>

<p>EDIT: rocketnia posted <a href=\"http://arclanguage.org/item?id=13165\">a particularly thoughtful response</a> to the above post at the Arc Forum. He points out that there may not be an Alpha, Omega and <span class=\"code inline\">0</span>, but rather \"[L]ocal optima that can't be unified into Omega\". I could have sworn I addressed this point (and acknowledged it, but stated that I was more interested the unification idea today), but my only mention of it is \"...with one (or a relatively small group) taking the prime position.\" Apologies. He also explains a lot about how macros might coexist with a strong type system.</p>
"))
((5202 3723 543563000) :INSERT (29 :POSTED 3502501200))
((5202 3723 543566000) :INSERT (29 :TAG :GENERAL-PROGRAMMING-THOUGHTS))
((5202 3723 543583000) :INSERT (29 :TAG :IDEA-PEELING))
((5202 3723 543586000) :INSERT (29 :TAG :LANGUAGES))
((5202 3723 543588000) :INSERT (29 :TAG :SPECULATION))
((5202 3723 543916000) :INSERT (30 :TITLE "Writing C in Lisp"))
((5202 3723 543923000) :INSERT (30 :FILE "writing-c-in-lisp.html"))
((5202 3723 543935000) :INSERT (30 :EDITED 3610308585))
((5202 3723 543938000) :INSERT
 (30 :BODY
  "<p>I'm sick today, so I figured I'd write something so that I can at least retain the impression of productivity.</p>

<p>Lately, I've been working on a little pet project of mine which has to do with the codebase for <a href=\"http://members.fortunecity.com/salkosuo/elite-for-emacs/0.10.0/index.html\">Elite for Emacs</a> (a port of Ian Bell and David Braben's original <a href=\"http://en.wikipedia.org/wiki/Elite_(video_game)\">Elite</a> game for my favorite editor). I liked the original, and while I didn't play it in 1984 (too busy being born that year), I did enjoy it quite a bit. The Emacs version is text driven, of course, but that's not all bad. I'll come back to why in a later post, but first I want to heap some scorn on this code. It's not that I hate it particularly. It works, for the most part, and it doesn't have to be fast (performance requirements are unsurprisingly low in a single-player game in Emacs). It's just that whenever I try to read any piece of elite-for-emacs, I come away with the impression that someone sat down and carefully thought of the worst possible way to do something, then implemented it. The result is an extremely verbose transliteration of a C program into Emacs Lisp. I'm going to dissect it here so that I can learn something, and so that hopefully, if there are hardcore C programmers out there learning Lisp, they won't pull things like this again.</p>

<p>This didn't start out as a re-write, just so you know.</p>

<p>I just wanted to fix a couple of bugs with weird control characters showing up in planet descriptions, change the behavior of a couple of commands for ease of use, and remove one or two components. It won't be a rewrite in the \"throw it out and start over sense\", but after peeking under the hood, it looks like I'll replace very close to all of the 4205 lines of code that make up this \"port\" of the original (either C or Assembly) codebase before I'm satisfied. There are some mistakes. Not in the sense that they don't produce working code, but in the sense that there are much simpler, easier and more accurate ways of doing the same thing in Elisp. Here are some before shots of common idioms I've found in no particular order:</p>

<pre>(<span style=\"color: #a020f0;\">if</span> foo
    (<span style=\"color: #a020f0;\">progn</span> bar
           baz))

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">foo</span> (a)
  (<span style=\"color: #a020f0;\">let</span> ()
    (<span style=\"color: #a020f0;\">progn</span>
      (baz)
      (mumble))))

(<span style=\"color: #a020f0;\">if</span> foo
    (<span style=\"color: #a020f0;\">progn</span> (setq b bar))
    (<span style=\"color: #a020f0;\">progn</span> (setq b baz)))

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">foo</span> ()
  (<span style=\"color: #a020f0;\">let</span> ((a)
        (b)
        (c))
    (setq a bar)
    (setq b baz)
    (setq c mumble)
    (<span style=\"color: #a020f0;\">progn</span>
      ...)))

(<span style=\"color: #a020f0;\">let</span> ((a)
      (i 0)
      (b ()))
  (<span style=\"color: #a020f0;\">while</span> (&lt; i (length foo))
    (<span style=\"color: #a020f0;\">progn</span>
      (setq a (car foo))
      (setq b (append b (list (mumble a))))
      (setq i (+1 i))))
  b))
</pre>

<img src=\"/static/img/progn-progn-everywhere.jpg\" class=\"middle\" alt=\"progn everywhere...\" />

<p>If you want to see the complete, non-elided code, check out <a href=\"(elite-for-emacs-commander-fuel cmdr)\">the project page</a>. It's pretty much more of the same, with some odd byte/numeric indexing operations thrown in where they probably don't belong.</p>

<p>As far as I can tell, the snippets above should have been respectively</p>

<pre>(<span style=\"color: #a020f0;\">when</span> foo bar baz)

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">foo</span> (a)
  (baz)
  (mumble))

(setq b (<span style=\"color: #a020f0;\">if</span> foo bar baz))<span style=\"color: #b22222;\">;; </span><span style=\"color: #b22222;\">I'm leaving the setq in for demonstration purposes, but the actual task could have been done functionally
</span>
(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">foo</span> ()
  (<span style=\"color: #a020f0;\">let</span> ((a bar)
        (b baz)
        (c mumble))
      ...)) 

(<span style=\"color: #a020f0;\">mapcar</span> 'mumble foo)
</pre>

<p>I'm not pointing this out to be mean. This code was written way back in 2003 (I'm using an earlier version that doesn't include combat/missions/GUI/windowed interface because my purposes demand simplicity, but the later code still makes use of the above idioms from what I saw). It's possible that some of this stuff was necessary at the time because of bugs in Emacs, or the peculiarities of Elisp. Not terribly likely, but possible. Anyway, here's why I don't like the above.</p>

<ul>
  <li>The <span class=\"code inline\">when</span> macro exists. <span class=\"code inline\">(when foo bar baz)</span> does <span class=\"code inline\">bar</span> and <span class=\"code inline\">baz</span> if <span class=\"code inline\">foo</span> is true (<span class=\"code inline\">unless</span> is a similar construct that does exactly what you'd expect given <span class=\"code inline\">when</span>). Keep in mind that in Elisp, <span class=\"code inline\">()</span>, <span class=\"code inline\">'()</span> and <span class=\"code inline\">nil</span> are \"false\" and anything else is \"true\" for boolean purposes.</li>
  <li>The last value in a lisp block is returned implicitly. you can use this property to chain calls on objects instead of explicitly <span class=\"code inline\">setf</span>ing an intermediate variable then <span class=\"code inline\">copy</span>ing. This applies to <span class=\"code inline\">if</span> too, which is why you can do <span class=\"code inline\">(setq b (if foo bar baz))</span> instead of having to put <span class=\"code inline\">setq</span> in both branches of the conditional.</li>
  <li>You don't need to declare variables in lisp. If you want to establish local bindings <span class=\"code inline\">(let ((a 1) (b 2) ...) [body])</span> is the way to do it. You can also use <span class=\"code inline\">let*</span> if you want the temporary variables to refer to each other, for example <span class=\"code inline\">(let* ((a 1) (b (+ 3 a))) b)</span> would return <span class=\"code inline\">4</span>. You do need to keep the two straight in your head, because <span class=\"code inline\">(let ((a 1) (b (+ 3 a))) b)</span> would return an error (specifically, it would complain that the variable <span class=\"code inline\">a</span> is unbound). This is because <span class=\"code inline\">let</span> doesn't guarantee that its bindings will be done in the order they are presented. <span class=\"code inline\">let*</span> does this, but it's considered good style to use <span class=\"code inline\">let</span> where you can. If you need to define temporary functions, use <span class=\"code inline\">flet</span>.</li>
  <li><span class=\"code inline\">progn</span> isn't necessary everywhere. Use it if you need to do multiple things in one branch of an <span class=\"code inline\">if</span> statement. Keep in mind that <span class=\"code inline\">when</span>, <span class=\"code inline\">unless</span> and <span class=\"code inline\">cond</span> have implicit <span class=\"code inline\">progn</span> for their blocks, so you don't need to type it out. New Lisp coders might think this is analogous to the missing curlies problem in C-like languages. I've been chewed out for doing things like

<pre><span style=\"color: #a020f0;\">if</span>(foo) bar();
<span style=\"color: #a020f0;\">else</span> baz();</pre>

in javascript code. The argument is always that if someone later adds <span class=\"code inline\">mumble</span> to the else block, but forgets to add curly braces, they'll get a fairly hard-to-find bug.

<pre><span style=\"color: #a020f0;\">if</span>(foo) bar();
<span style=\"color: #a020f0;\">else</span> mumble();
     baz();
</pre>

In case you didn't catch it, that makes <span class=\"code inline\">baz()</span> unconditional, which is presumably not what you want. The correct way of doing it, I'm told, is 
<pre><span style=\"color: #a020f0;\">if</span>(foo){
    bar();
} <span style=\"color: #a020f0;\">else</span> {
    baz();
}</pre>

or

<pre><span style=\"color: #a020f0;\">if</span>(foo)
{
    bar();
} 
<span style=\"color: #a020f0;\">else</span> 
{
    baz();
}</pre>


depending on who's talking. In an imperative language with optional curlies/parentheses/brackets, this matters, so I'm not arguing that you should all stop using curly braces except where explicitly required. However, the fact that Lisp is fully parenthesized almost makes this a non-issue, a functional style mitigates it further, and in any case, adding <span class=\"code inline\">progn</span> all over the place isn't the right way to address it.</li>

  <li>It's very common in Lisp to want to iterate over a sequence, do something to each member of that sequence, and return the resulting list. The name given to this oddly specific idea is \"mapping\". The specific function you use is called different things (<span class=\"code inline\">map</span>, <span class=\"code inline\">mapcar</span> or similar) depending on which language you're in, and there are one or two subtleties (for instance, Elisp's <span class=\"code inline\">mapcar</span> only takes a unary function and a single sequence, Scheme's <span class=\"code inline\">map</span> can only take lists and not any sequence, etc.), but odds are that if you search the docs of a given functional language for \"map\", you'll find a function that does the above. When you're dealing with a sequence of things, it's a mistake to use <span class=\"code inline\">while</span> with an explicit, manual counter. I'd use <span class=\"code inline\">mapcar</span> or similar, and fall back to recursion (with tail calls where applicable) for more general purposes.</li>
</ul>

<p>There are more things I could gripe about, and my sinister purpose in toying with this code is unrevealed, <span style=\"font-weight: bold;\">and</span> I feel like I've only started off a much larger conversation about what it actually means to learn to program in a given language, but I think I need to go lie down now. This got enough stuff off my chest that I can continue to wade through the code for a while without bitching internally.</p>
"))
((5202 3723 544045000) :INSERT (30 :POSTED 3503883600))
((5202 3723 544047000) :INSERT (30 :TAG :COMMON-LISP))
((5202 3723 544050000) :INSERT (30 :TAG :ELISP))
((5202 3723 544055000) :INSERT (30 :TAG :LISP))
((5202 3723 544345000) :INSERT (31 :TITLE "XMonad Up Close"))
((5202 3723 544351000) :INSERT (31 :FILE "xmonad-up-close.html"))
((5202 3723 544354000) :INSERT (31 :EDITED 3610022331))
((5202 3723 544357000) :INSERT
 (31 :BODY
  "<p>I'm taking another, closer look at XMonad this week. StumpWM is awesome for straight-up coding, and its extensive use of the Emacs model means that there was very little learning curve for me to struggle against. A few things were starting to burn my ass though, and while I tolerate small blemishes there are two other forces at work here. First, I've tried hard to make sure that my tools enable rather than limit me (and one of the things that started to burn my ass was a specific GIMP-related bug that did limit me). And second, I've been looking for an excuse to pick up Haskell for more than casual play for a very long time now.</p>

<p>As a public service, here are the few issues that I ran into with StumpWM (I don't intend to dwell on this, just be aware of them. I can still recommend it heartily if you're an Emacs user that won't run up against these specific points):</p>

<ol>
  <li>It crashes every time I try to open a file with <a href=\"http://www.gimp.org/\">GIMP</a></li>
  <li>It has some odd issues with Mplayer (<a href=\"http://www.mail-archive.com/stumpwm-devel@nongnu.org/msg01671.html\">naive fix here</a>).</li>
  <li>It doesn't seem to like nautilus (which is mainly an issue when I'm trying to browse through a folder full of images; this is one of the few places in my day-to-day computing activities where a command line is less efficient than a GUI) </li>
</ol>

<p>That's it. Now, to be fair, #3 is only relevant if you don't use StumpWM as a window manager on top of a desktop environment, #2 has <a href=\"http://www.mail-archive.com/stumpwm-devel@nongnu.org/msg01671.html\">a workaround</a> that I've been using successfully, and #1 only <span style=\"font-weight: bold;\">really</span> bites you if you're <a href=\"http://www.d20srd.org/srd/classes/multiclass.htm\">multiclassing</a> Illustrator/Programmer, which is not unheard of, but keep in mind that YMMV here.</p>

<p>It's actually sort of amazing that I got by for such a long time without noticing #1. After noticing it, I got into the habit of spending most of my time in StumpWM, and switching into Gnome/Bluetile for GIMP work. And that worked out just fine when most one or the other type of work was a vast majority of my time. Sadly (fortunately?) a couple weeks ago, my schedule started rebalancing into about 50/50 graphics and coding (I'm doing some concept work, which involves a web app, but no code yet so my tablet and degree are finally being put through their paces). It was surprising how horribly annoying the start-up wait time for Gnome/Bluetile can be. I've written about it already, and my conclusion on Bluetile was, basically, that it was overtly complex but a workable beginners' TWM. Certainly not something I'd use as my first choice, in any case. Add to that the fact that I had been spoiled by StumpWMs' nearly instantaneous start-up, and those WM switches were starting to look ugly. It actually changed the way I thought; I'd get all my coding done first, then do my image work all at once, just to minimize the impact of that switch.</p>

<p>This was clearly not an optimal situation.</p>

<p>By chance, I stumbled onto a <a href=\"http://www.reddit.com/r/linux/comments/f5cdo/\">reddit post bemoaning that Gnome lag</a>. Long story short, the poster used <a href=\"http://www.xfce.org/\">XFCE4</a>, <a href=\"http://en.wikipedia.org/wiki/XDM_(display_manager)\">XDM</a> and <a href=\"http://www.ubuntu.com/server\">Ubuntu server edition</a> to put together a minimal, but snappy desktop environment. It looked interesting, and passed the Compaq Test<a href=\"#xmonadUpClosef1\" name=\"xmonadUpClosen1\">[1]</a> so I took the weekend to replace Gnome with XFCE4 on each of my machines (I kept them all <a href=\"http://www.debian.org/devel/debian-installer/\">Debian Squeeze</a>, rather than downloading <a href=\"http://www.ubuntu.com/server/get-ubuntu/download\">Ubuntu server 10.10</a>, and I used <a href=\"http://www.haskell.org/haskellwiki/Xmonad/Using_xmonad_in_XFCE#Configuring_XMonad_to_work_with_Xfce\">xmonad</a> instead of XDM because I primarily wanted tiling rather than mousing). There's bound to be more updates about this as I nail down specific stuff, but it's working very well so far. I have tiling where I need it, and (because of XFCE4) I can use pointing devices when they're appropriate. My <span class=\"code inline\">~/.xmonad/xmonad.hs</span> is pretty minimal at this point:</p>

<pre><span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">XMonad</span>
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">XMonad.Config.Xfce</span>

<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">XMonad.Actions.Submap</span>
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">XMonad.Util.EZConfig</span>

<span style=\"color: #a020f0;\">import</span> <span style=\"color: #a020f0;\">qualified</span> <span style=\"color: #228b22;\">Data.Map</span> <span style=\"color: #a020f0;\">as</span> <span style=\"color: #228b22;\">M</span>

<span style=\"color: #0000ff;\">main</span> <span style=\"color: #a0522d;\">=</span> xmonad <span style=\"color: #a0522d;\">$</span> xfceConfig { modMask <span style=\"color: #a0522d;\">=</span> mod4Mask }
       <span style=\"color: #a0522d;\">`additionalKeys`</span>
       [ ((mod4Mask, xK_p), spawn <span style=\"color: #8b2252;\">\"exe=`dmenu_path | dmenu` &amp;&amp; eval \\\"exec $exe\\\"\"</span>)
       , ((mod4Mask, xK_Return), spawn <span style=\"color: #8b2252;\">\"xterm\"</span>)
       <span style=\"color: #b22222;\">-- </span><span style=\"color: #b22222;\">, ((control, xK_space), spawn \"xdotool text 'testing testing'\")
</span>       <span style=\"color: #b22222;\">-- </span><span style=\"color: #b22222;\">, ((controlMask, xK_t), submap . M.fromList $
</span>       <span style=\"color: #b22222;\">--                         </span><span style=\"color: #b22222;\">[ ((0, xK_p), spawn \"exe=`dmenu_path | dmenu` &amp;&amp; eval \\\"exec $exe\\\"\")
</span>       <span style=\"color: #b22222;\">--                         </span><span style=\"color: #b22222;\">, ((0, xK_Return), spawn \"xterm\")
</span>       <span style=\"color: #b22222;\">--                         </span><span style=\"color: #b22222;\">, ((0, xK_t), spawn \"xdotool key ctrl+t\")
</span>       <span style=\"color: #b22222;\">--                         </span><span style=\"color: #b22222;\">])
</span>       ]</pre>

<p>The commented stuff has to do with tweaks I'm trying to make. Xmonad+XFCE4 hits all of the pain points I was having with StumpWM, but it introduces a couple of its own (less severe, from my perspective).</p>

<p>First, the mod-keys aren't on the home row; I have to contort my left pinky/ring finger/thumb (still haven't decided which feels least uncomfortable) in an odd way to hit the <span class=\"code inline\">Win</span> or <span class=\"code inline\">Alt</span> keys in a way that never happened when <span class=\"code inline\">mod</span> was effectively <span class=\"code inline\">C-t</span>. Granted that may have made it very slightly more awkward to add tabs in some browsers, but there are workarounds. Also luckily, <span class=\"code inline\">XMonad.Actions.Submap</span> exists, which means I can write up a key list that's less RSI-inducing (the only reason this is commented above is that I can't get <span class=\"code inline\">xdotool</span> working as advertised).</p>

<p>Second, there's that layer of user-facing complexity that comes from distinguishing between screens and workspaces. I've had time to reflect since my Bluetile writeup, and it seems like a lot of time in StumpWM gets spent screen-juggling (making sure that Emacs and Chrome stayed on my main monitor and mplayer/terminals/secondary apps on the other one). This is because Stump doesn't make that key distinction. When you cycle to the next window, it's the same window you've got open (regardless of which workspace you've currently got it on). That's easier to learn because you have to think about a single list of windows, but trickier to use because it's that much more likely to blow your layout by pulling a window you don't mean to. XMonad goes the other way; there are three explicit keystrokes to switch the \"focused\" monitor (and as far as I can tell, if you have more than 3, you're screwed), but the upside is that windows will stay where you put them, workspace-wise.</p>

<p>It also looks like I'll have to do some light Haskell learning to get full benefit, but if you've ever talked to me about computers IRL, you know that I don't consider that downside.</p>

<hr />

<p>1 <a href=\"#xmonadUpClosen1\" name=\"xmonadUpClosef1\">[back]</a> - \"The Compaq test\" is something I put any desktop environment or WM through before switching; it involves building it on a $20 Compaq Presario R3000 (with a 1.4ghz processor, a whopping 256 MB of ram and a 5400rpm HDD) and using it for a weekend to see how it works. The reasoning is that if it's tolerable on the Compaq, then it'll fly on my desktop machine. It's something I reserve for background software, not things like Emacs or GIMP themselves. My rule of thumb is that anything I'm thinking of using that has to be on all the time should do better than \"awful\" on the Compaq test.</p>
"))
((5202 3723 544451000) :INSERT (31 :POSTED 3504834000))
((5202 3723 544454000) :INSERT (31 :TAG :PROGRAMMING-ENVIRONMENT))
((5202 3723 544668000) :INSERT (32 :TITLE "Best Buy and Monitor Suspension"))
((5202 3723 544674000) :INSERT (32 :FILE "best-buy.html"))
((5202 3723 544676000) :INSERT (32 :EDITED 3610022331))
((5202 3723 544679000) :INSERT
 (32 :BODY "So I placed an order for something that's been a long time coming.

monitor-arm.jpg

The same order will also contain a new wireless keyboard I'll be trying out. It does something a bit odd with the arrow keys, but other than that, seemed to work pretty well when I tried it in store.

ms-arc-keyboard.jpg

It probably won't to replace my [keyboards of choice](happy hacking), but it'll function as a nice spare for working on off machines. It does have a much smaller receiver than the wireless keyboard I currently use in the livingroom, so it might find a permanent home there.

Now I'm used to ordering shit from newegg.ca, maybe I'm a bit spoiled, but this order was far from error free. So, for the benefit of people who want to get decent pricing on monitor arms, here's a guide to ordering things from BestBuy.ca with BestBuy gift cards.

Step 1 - Shop

Find the stuff you want and get it into your shopping cart (this works the same as on every online store ever).

Step 2 - Checkout

Click \"Checkout\". If you've never ordered something from BestBuy before, you'll need to register by telling them your email and setting your BestBuy password.

Step 3 - Address

Fill in your shipping and billing addresses (if you don't have them memorized, make sure to write at least the phone numbers down; you'll need to enter them a few times and the last phone field doesn't autocomplete for whatever reason).

Step 4 - Payment Information

Get your gift card out and enter the 16 digit number from the back (be sure to omit the spaces, the BestBuy devs don't believe in <span class=\"code inline\">.replace()</span>) then scratch off the security strip and enter the confirmation code. If you like, you can check the balance on your card before continuing just to make sure. Once you've entered your gift card info, click \"Apply\". This should cause your order to error, saying \"ERROR: This order cannot be processed at this time. Please try again later.\".

Step 5 - Address

You can't refresh, or hit back (well, you can, but you'll be prompted to refresh, at which point it will leave you with a blank form anyway) so just click on your cart and start the order again. Re-enter your addresses (if you just clicked \"Add to Address Book\" in step 3, note that your billing address is now entered in the shipping address fields, and your billing address fields are empty).

Step 6 - Payment Information

Re-enter your gift card numbers and click \"Apply\". This time your order should go through. After a short loading screen, you will be told that your \"credit card\" was declined (if you took more than 5 minutes to correct your address for whatever reason, you will instead be told that it has been 30 minutes since any activity and your connection has been terminated; either way proceed to the next step).

Step 7 - Address

Re-enter your addresses (make sure to correct the shipping address again).

Step 8 - Payment Information

Enter your gift card information. This time the order should go through (for realsies). You should get an on-screen receipt, which will contain your order number. Print this page (or at least save it as a PDF); you should get a copy emailed to you, but better to be safe.

Step 9 - The Aftermath

You will be sent a confirmation email, saying that your order has been accepted and will be shipped in two days. If your order contains items from multiple suppliers, you will get one confirmation per supplier. You will also get an email saying that your payment method was declined by the second supplier. This will happen even if you have enough money on the gift card. The second supplier will try to charge your gift card again the following day (you won't get a confirmation email if this succeeds but it should, with no action on your part, as long as you have enough balance remaining). Wait two days to see if the order ships before calling CS; they're very nice people, but they'll tell you no more than I just did, and they can't seem to help much in this situation.

And that's it. You've just ordered something from BestBuy. It'll be there in about four days via Canada Post expedited delivery. By \"there\", I mean \"at the <span style=\"font-weight: bold;\">billing</span> address\".

Monitor Arm

First impressions are pretty good, except that it didn't come with a key screw that would let me use the clamp option, so I'll need to drill a hole in my desk this weekend before I mount stuff. It's fully articulated and there's a pretty wide range of configurations possible (it may finally enable a sane 3-monitor setup). The main win for me is that I'll reclaim a lot of my desk space because the arm is tall enough to keep my monitors above theorking area (and I can move them out of the way in any case). It'll also even out my monitor options; currently I have an older Dell 23\" wide-screen (which came with a fully rotatable/tilting stand), and an NEC 22\" widescreen (which can basically just tilt about an inch).
"))
((5202 3723 544731000) :INSERT (32 :POSTED 3505266000))
((5202 3723 544733000) :INSERT (32 :TAG :PROGRAMMING-ENVIRONMENT))
((5202 3723 544735000) :INSERT (32 :TAG :PROGRAMMING-INTERFACES))
((5202 3723 545004000) :INSERT (33 :TITLE "Old Machines"))
((5202 3723 545011000) :INSERT (33 :FILE "old-computers.html"))
((5202 3723 545013000) :INSERT (33 :EDITED 3610312348))
((5202 3723 545015000) :INSERT
 (33 :BODY "<p>I'm not attached to things.</p>

<p>My grandfather was; whenever we'd do some carpentry or light construction, he'd insist that we save old screws and nails we found. It's always seemed weird to me because even in the old country, nails and screws are things you can get at the hardware store for $20 per 5 lbs, so there never seemed to be much of a point in saving old ones. Whenever I'd point this out, he'd reply \"You never know when a nail will come in handy\", and proceed to stash stray nails in variously sized glass jars. Ok, yes, this was across the Atlantic, so what he actually said was \"Nikad neznaš kad ćeš trebati čavlića\", but you get the point. He had a musty attic full of clothes he wore decades ago, books he read once, games he played when he was a kid, traveling cases that had only been used once, and a thousand other treasures that I never got to see, but that he likely also could have discarded with no disadvantages. I'm sure there was some socio-political reason for this, but I'm digressing.</p>

<p>I'm not attached to things, and I can say this as someone who has observed humans attached to things. But I still feel a bit perturbed when someone throws a computer away. I'm sure my descendants will have the same reaction I had to the old nails. \"Grandpa, you can buy computers for 2¢ per core, they come with ten free petabytes of memory and a lifetime supply of storage on the Googazon servers. Why are you keeping those old things?\" I can already feel the urge to tell those smarmy cunts to get the hell off my lan...</p>

<p>For the moment though, I'm slightly less than insane for putting old machines to use. Last week I stumbled upon an <a href=\"http://www0.shopping.com/Hewlett-Packard-HP-Pavilion-6645C-D9948AABA/info\">HP Pavillion</a> circa 1998 (well, I assume it was thereabouts since it still had Windows 98 installed). With a roaring 566 MHz processor, a truly awe-inspiring 64 MB of SDRAM, and a massive 15GB hard drive. I've been meaning to set up a backup server for my setup here anyway. I still had to spend some money on a couple of hard drives (about $50 each for 160GB IDE drives, I had one lying around, but the rest of my spares are all SATA. Could have saved some money by getting a <a href=\"http://www.tigerdirect.ca/applications/SearchTools/item-details.asp?EdpNo=4143846&sku=ULT40322\">couple of adapters</a> instead, but I didn't think soon enough. I'll get some of these if the drives ever fail) and an Ethernet card ($4.99).</p>

<p>The first thing I had to do was remove a few unwanted items. </p>

<img src=\"/static/img/old-machines-01.jpg\" class=\"middle\" alt=\"Floppy drive\" />

<p>As committed as I am to reusing old machines, I've still got to admit that there's very little use today for a phone modem or floppy drive. They were fairly easy to remove; just a couple of mounting screws internally. What was slightly tougher was this plastic face-plate that covered the area next to the front-facing USB port; it was held in by a small, springy metallic assembly that I had to lever out with a Swiss army knife (I wanted another hard drive to go there).</p>

<img src=\"/static/img/old-machines-02.jpg\" class=\"middle\" alt=\"Metal thing\" />

<img src=\"/static/img/old-machines-03.jpg\" class=\"middle\" alt=\"Face plate\" />

<p>Next up, I ripped out the 15GB drive it came with, popped in one of my 160GB ones and threw in that Ethernet card for good measure. Then I installed Ubuntu Server 10.10. It could have been Debian, but I wanted to try out the latest Ubuntu release, and there are some things I'd like to do with <span class=\"code inline\">pacpl</span> that don't seem to work on my Debian machine. The trade-off is that Emacs seems to misbehave out of the box on Ubuntu, but this isn't exactly going to be a development machine so that's ok. The only stuff that went on was <a href=\"http://www.openssh.com/\">SSH server</a>, <a href=\"http://git-scm.com/\">GIT</a> and <a href=\"http://www.ruby-lang.org/en/\">Ruby</a> (my language of choice for quick and dirty scripting).</p>

<p>Once the system was installed, the CD drive could come out (not about to install MS Word or any such nonsense; any other software that goes on this machine will come in through the network). That turned out to be easier said than done though; it was secured by screws on both sides, so I had to completely disassemble the box to get at it.</p>

<img src=\"/static/img/old-machines-04.jpg\" class=\"middle\" />

<img src=\"/static/img/old-machines-05.jpg\" class=\"middle\" alt=\"Open sesame!\" />

<img src=\"/static/img/old-machines-06.jpg\" class=\"middle\" alt=\"Opened sesame\" />

<p>The hard drive destined for the position was going to rattle in a slot that size, and while I don't plan to race this machine around the block or anything, it's probably better to be safe. A couple of <a href=\"http://www.nextag.com/hard-drive-adapter-bracket/stores-html\">drive brackets</a> made sure it would stay in place. Shop around if you plan on buying some, incidentally, I just put that link up because it was the first I found; there were actually a couple of braces lying around from my last case so I didn't need to order any. It also seems like you could improvise a set if you didn't feel like buying them.</p>

<img src=\"/static/img/old-machines-07.jpg\" class=\"middle\" alt=\"HDD rails\" />

<img src=\"/static/img/old-machines-08.jpg\" class=\"middle\" alt=\"HDD rails, another perspective\" />

<p>With everything hooked up, it was time to boot back into the machine.</p>

<img src=\"/static/img/old-machines-09.jpg\" class=\"middle\" alt=\"'Orphan'. It seemed appropriate.\" />

<p>That in-congruent looking mesh plate covering the top drive is a spare from the same case that had the extra brackets. And yes, I named the machine \"orphan\". It seemed appropriate. Here's <span class=\"code inline\">ls /dev</span>, showing the new drives (still haven't formatted them, that'll be for next weekend).</p>

<img src=\"/static/img/old-machines-10.jpg\" class=\"middle\" alt=\"First ls of the system\" />

<p>And that's it. I dropped it into a little wheel assembly that's been going unused since I got that mammoth tower for my main machine. It gives it a somewhat R2-D2 feel (this may be the start of an art project). </p>

<img src=\"/static/img/old-machines-11.jpg\" class=\"middle\" alt=\"Case on wheels\" />

<p>I'll put together some scripts to copy out key directories from my other machines and that'll be that. I guess I could also use it as a full-out <a href=\"http://www.newegg.ca/Store/SubCategory.aspx?SubCategory=124&name=Network-Storage-NAS\">NAS</a> (ok, I technically am, but you know what I mean) or streaming server, but I'm not sure how far those 566MHz and 64MB of RAM are going to stretch. In any case, even with the slightly higher price/GB I had to pay for IDE drives, converting this old machine was much cheaper than shelling out for a pre-built.</p>

<p>The <a href=\"http://www.microsoft.com/hardware/mouseandkeyboard/ProductDetails.aspx?pid=120\">Microsoft Arc keyboard</a> came in quite handy with this project. It's fairly ergonomic, the arrow oddity isn't as annoying as it seems it should be, and the transmitter is easy enough to move around. It's definitely a step up from wrangling USB cables from my main machine about three feet to the side. My only complaint is that it friggin <span style=\"font-weight: bold;\">devours</span> batteries, compelled like some primal beast, always growling for more. That's easy enough to solve, I guess, just remove the batteries when it's not in use, but that's a small annoyance on an otherwise perfect spare keyboard.</p>

<!--  LocalWords:  Pavillion Ok Nikad neznaš kad ćeš trebati čavlića socio Googazon SDRAM IDE SATA pacpl ok px that'll deselectBloggerImageGracefully friggin
 -->
           "))
((5202 3723 545096000) :INSERT (33 :POSTED 3505611600))
((5202 3723 545098000) :INSERT (33 :TAG :HARDWARE))
((5202 3723 545369000) :INSERT (34 :TITLE "Heart Ruby"))
((5202 3723 545375000) :INSERT (34 :FILE "heart-ruby.html"))
((5202 3723 545377000) :INSERT (34 :EDITED 3610022331))
((5202 3723 545379000) :INSERT
 (34 :BODY
  "<p>I really do have to update that header more frequently. It's been a good year and a half since I did anything other than some light <span class=\"code inline\">make</span> scripting in Python, JavaScript may as well be <a href=\"http://jquery.com/\">jQuery</a> as far as my recent use of it is concerned, and I haven't done much more than some very lightweight playing in Erlang. Most of my time at work has been getting spent ass-deep in PHP which wasn't very pleasant even back when it was one of two languages I knew. The rest of it is tilted heavily towards the lisps (Common Lisp, Elisp, Scheme, in that order), and I'm still trying to get my head around Haskell through some <a href=\"http://en.wikibooks.org/wiki/Write_Yourself_a_Scheme_in_48_Hours\">tutorial</a> and semi-involved <a href=\"http://snapframework.com/\">practice</a>. The practice will actually increase soon; a friend of mine wants some help with his website, and he's convinced that having it written in a lesser-known language will make it less likely to get hacked (he's had some security troubles lately). I tried to explain that this isn't actually how cryptography works, but he's having none of it. His instructions were \"I don't care what you use, as long as it's not PHP\". Score.</p>

<p>The last piece up there is Ruby, which I've had an odd relationship with. I tried out Rails a while back, but didn't like the amount of magic involved (and the various \"convention vs. configuration\"/security exploit stories I keep hearing about through friends aren't exactly tempting me back). I also tried out some Windows automation back when \"Windows\" was a thing I used for work rather than just for playing 10 year old video games. We also run Redmine at the office, so I've had to spend a very little bit of time making cosmetic UI changes. The point is, I've yet to write more than maybe 200 lines of Ruby in one sitting, but I still like it. It's clean somehow. Simple. In a way that Python never felt, even though the syntactic whitespace forces more visual consistency onto it. Despite my low line-count, <span class=\"code inline\">ruby-full</span> is still firmly wedged in the <span class=\"code inline\">## languages</span> section of my installation shell script, and the only reason my installation shell-script isn't itself written in Ruby is that the language isn't bundled with Debian.</p>

<p>I'm musing on this now, because I recently received a reminder of how beautiful it can be for simple scripting purposes. I had a problem with my XFCE4 setup. Actually, not a problem, just something that wasn't going quite as smoothly as it might have. I use multiple monitors on each of my multiple machines, you see. My desktop has two, my laptops share an external, and my work machine travels with me so it actually has two different monitors to interface with depending on where it is. The key is, no matter where I am, the situation is the same; I just want my monitors arranged left to right, each at the highest possible resolution. XFCE doesn't seem to have an option for that, so my initial approach was just to manually check <span class=\"code inline\">xrandr</span> output and type out the appropriate combination of <span class=\"code inline\">--output</span>, <span class=\"code inline\">--mode</span> and <span class=\"code inline\">--right-of</span> to get it working. It dawned on me the other day that this is pretty inefficient given how consistent the pattern is, and since I occasionally profess to know how to program, I should be able to do something about it. The problem is that step one of the process is parsing the output from a shell command, which surprisingly few languages care to do. Luckily, Ruby is one of them. My initial pass worked, but it was ugly (and I won't inflict it upon you here). After consulting <a href=\"http://codereview.stackexchange.com/questions/597/autodetecting-monitors-in-xfce\">codereview.SE</a>, it was whittled down to</p>

<pre><span style=\"color: #b22222;\">#</span><span style=\"color: #b22222;\">!/usr/bin/ruby</span>

<span style=\"color: #a020f0;\">def</span> <span style=\"color: #0000ff;\">xrandr_pairs</span> (xrandr_output)
<span style=\"color: #b22222;\">## </span><span style=\"color: #b22222;\">Returns [[&lt;display name&gt;, &lt;max-resolution&gt;] ...]
</span>  display = <span style=\"color: #8b2252;\">/^(\\S+)/</span>
  option = <span style=\"color: #8b2252;\">/^\\s+(\\S+)/</span>
  xrandr_output.scan(<span style=\"color: #8b2252;\">/</span><span style=\"color: #a0522d;\">#{display}</span><span style=\"color: #8b2252;\">.*\\n</span><span style=\"color: #a0522d;\">#{option}</span><span style=\"color: #8b2252;\">/</span>)
<span style=\"color: #a020f0;\">end</span>

<span style=\"color: #a020f0;\">def</span> <span style=\"color: #0000ff;\">xrandr_string</span> (x_pairs)
<span style=\"color: #b22222;\">## </span><span style=\"color: #b22222;\">Takes [[&lt;display name&gt;, &lt;max-resolution&gt;] ...] and returns an xrandr command string
</span>  cmd = <span style=\"color: #8b2252;\">\"xrandr --output </span><span style=\"color: #a0522d;\">#{x_pairs[0][0]}</span><span style=\"color: #8b2252;\"> --mode </span><span style=\"color: #a0522d;\">#{x_pairs[0][1]}</span><span style=\"color: #8b2252;\">\"</span>
  args = x_pairs.each_cons(2).map <span style=\"color: #a020f0;\">do</span> |(previous_output, previous_mode), (output, mode)|
      <span style=\"color: #8b2252;\">\"--output </span><span style=\"color: #a0522d;\">#{output}</span><span style=\"color: #8b2252;\"> --mode </span><span style=\"color: #a0522d;\">#{mode}</span><span style=\"color: #8b2252;\"> --right-of </span><span style=\"color: #a0522d;\">#{previous_output}</span><span style=\"color: #8b2252;\">\"</span>
  <span style=\"color: #a020f0;\">end</span>
  [cmd, *args].join(<span style=\"color: #8b2252;\">\" \"</span>)
<span style=\"color: #a020f0;\">end</span>

exec xrandr_string(xrandr_pairs(<span style=\"color: #8b2252;\">`xrandr`</span>))
</pre>

<p>which is pretty beautiful, as far as I'm concerned. </p>

<p>It's elegant for shell scripting for a two reasons; </p>

<p>First, Ruby has a wide range of options for calling the shell. <span class=\"code inline\"><a href=\"http://www.ruby-doc.org/core/classes/Kernel.html#M001438\">exec</a></span> seems tailor-made for the purpose above (it replaces the current Ruby process with a call to the command you pass it), <span class=\"code inline\"><a href=\"http://www.ruby-doc.org/core/classes/Kernel.html#M001442\">spawn</a></span> is useful if you want to do things in parallel and <span class=\"code inline\"><a href=\"http://www.ruby-doc.org/core/classes/Kernel.html#M001408\">`</a></span> delimits a special string type that gets executed synchronously as a shell command and returns that commands' output. </p>

<p>Second, any string can be a template. This includes special strings like regexes and backticks, which is why you can compose larger regular expressions from simpler pieces as in <span class=\"code inline\">xrandr_pairs</span> above. You can stitch <span class=\"code inline\">#{ }</span> into any string you like, and the contents can be any expression, not necessarily a string. A minor, but important part is that I didn't have to call a function in order to make a string a template (there's no call to <span class=\"code inline\">printf</span> or <span class=\"code inline\">format</span>), and the contents are inlined (I'm doing <span class=\"code inline\"><span style=\"color: #8b2252;\">\"Foo #{bar} #{baz}\"</span></span> as opposed to  <span class=\"code inline\"><span style=\"color: #8b2252;\">\"Foo #{1} #{2}\"</span> bar baz</span>) which makes the result that much more obvious. Neither would matter much proportionally in a big project, but when I'm working on a 16 line script, I'll to knock out every bit of cognitive overhead I can.</p>

<p>That's why I still use it. I never liked Ruby for big stuff, or even medium stuff, but I almost instantly reach for it to do anything under 50 lines or so that needs to talk to the shell.</p>
"))
((5202 3723 545462000) :INSERT (34 :POSTED 3505784400))
((5202 3723 545464000) :INSERT (34 :TAG :RUBY))
((5202 3723 545833000) :INSERT
 (35 :TITLE "Quicklisp, Linode, Hacking in the pejorative and other notes..."))
((5202 3723 545843000) :INSERT (35 :FILE "hacking.html"))
((5202 3723 545846000) :INSERT (35 :EDITED 3610022331))
((5202 3723 545848000) :INSERT
 (35 :BODY
  "<p>This week has been kind of a mixed bag for me; I've been thinking about a bunch of stuff, but not enough about each thing to justify a whole blog post. So here's the result of my mental mastication. It's not pretty, but perhaps it will be nourishing.</p>

<h2>On serving data</h2>

<p>I've been administering my own server for the last little while. First for DieCast (which is on hold for the moment 'cause the server was needed for something else) then to host some ASDF files (which are actually back up now; you should be able to <span class=\"code inline\">asdf-install:install 'cl-css</span> or <span class=\"code inline\">'formlets</span> without serious problems), and now for a couple of websites I'm doing work on. The experience has taught me three things.</p>

<p>1. Common Lisp webapp deployment sucked balls before <a href=\"http://www.quicklisp.org/beta/\">Quicklisp</a></p>

<p>My first <a href=\"http://nginx.org/en/\">nginx</a>+<a href=\"http://weitz.de/hunchentoot/\">Hunchentoot</a> setup took hours. Some of this was for lack of familiarity with the apps because my <span style=\"font-weight: bold;\">second</span> deployment took hours (fewer of them though). Which is an excellent improvement, but still not good in the absolute sense. The main problem was actually setting up Hunchentoot; it has many dependencies (many of which have several recursive dependencies of their own), each of which need to be downloaded and evaluated separately, each of which has at least one compiler warning, and one of which usually fails to download. The worst deployment after the first involved a key ASDF-package hosting site going down. That meant I had to go out and download + install + load all of Hunchentoots' dependencies recursively <span style=\"font-weight: bold;\">by hand</span> in order to get them running. Sadly, lacking encyclopedic knowledge of Hunchentoot, this meant I had to try <span class=\"code inline\">(asdf-install:install 'hunchentoot)</span>, wait for it to error out, get the piece it errored on, install it and try again. <span style=\"font-weight: bold;\">Once</span> the server was up it was awesome, but getting it to that state was a pain in the ass the likes of which I'm having trouble analogizing properly. Quicklisp does it in 10 minutes, while simultaneously massaging my aching shoulders. I really hope zach doesn't start charging, because I get the feeling many Common Lispers would end up owing him their house (he welcomes <a href=\"http://www.quicklisp.org/donations.html\">donations</a>, of course).</p>

<p>2. System setup sucked balls before Linode</p>

<p>I used to use <a href=\"http://www.cirrushosting.com/toronto-web-hosting-canada.html\">Cirrus Hosting</a>. And actually still do at work; we had them before I came in, and they're pretty good so I don't have a burning need to switch over, but we'll see what's possible once our subscription is up. Basically, I was used to a VPS being more or less just a regular server, except virtual. You have to spend a bit of time installing the distro, reboot, and install. It turns out that if you put thought into the process, a lot of that startup time can be done away with behind the scenes. <a href=\"http://www.linode.com/\">Linode</a> has put <span style=\"font-weight: bold;\">a lot</span> of thought into the process. Going from one linux distro to another takes something like 5 minutes. I found this out bouncing between different linuxes (<a href=\"http://superuser.com/questions/130490/what-is-the-plural-of-linux\">linuxen? linuces?</a>); the process was initiated and that's typically a cue for sandwiches, but I didn't have enough time. Needless to say, it was a pleasant surprise the first time a deployment from bare metal to a running Common Lisp server took less than half an hour.</p>

<p>3. Break-in attempts are surprisingly common</p>

<p>If I'm to believe my <span class=\"code inline\">auth.log</span>, a concerted effort at hacking is made by some jackass roughly every two days. Needless to say, my <span class=\"code inline\">iptables</span> have been modified. It's different IPs, but always the same MO; they try some random common usernames, fail and go away. Apparently it's escaped their notice that I switched to RSA keys and disabled password/PAM authentication. To be fair, checking the logs, it seems that before the change to key-based auth, the situation regularly looked like</p>

<pre>Feb 10 07:40:04 Invalid user abc from 61.240.36.1
Feb 10 07:40:07 Invalid user abc123 from 61.240.36.1
Feb 10 07:40:10 Invalid user benjamin from 61.240.36.1
Feb 10 07:40:12 Invalid user lstiburekz from 61.240.36.1
Feb 10 07:40:15 Invalid user kent from 61.240.36.1
Feb 10 07:40:18 Invalid user jabber from 61.240.36.1
Feb 10 07:40:20 Invalid user andres from 61.240.36.1
Feb 10 07:40:23 Invalid user dovecot from 61.240.36.1
Feb 10 07:40:26 Invalid user magda from 61.240.36.1
Feb 10 07:40:28 Invalid user alex from 61.240.36.1
Feb 10 07:40:31 Invalid user stefan from 61.240.36.1
Feb 10 07:40:34 Invalid user stefano from 61.240.36.1
Feb 10 07:40:36 Invalid user cristi from 61.240.36.1
Feb 10 07:40:39 Invalid user claudi from 61.240.36.1
Feb 10 07:40:42 Invalid user sarah from 61.240.36.1
Feb 10 07:40:44 Invalid user smokeping from 61.240.36.1
Feb 10 07:40:47 Invalid user fetchmail from 61.240.36.1
Feb 10 07:40:50 Invalid user backinfo from 61.240.36.1
Feb 10 07:40:53 Invalid user umberto from 61.240.36.1
Feb 10 07:40:55 Invalid user mauro from 61.240.36.1
Feb 10 07:40:58 Invalid user jana from 61.240.36.1
Feb 10 07:41:01 Invalid user adriano from 61.240.36.1
Feb 10 07:41:03 Invalid user xenie from 61.240.36.1
Feb 10 07:41:06 Invalid user lea from 61.240.36.1
Feb 10 07:41:09 Invalid user joule from 61.240.36.1
Feb 10 07:41:11 Invalid user Debian-exim from 61.240.36.1
Feb 10 07:41:14 Invalid user unbunutu from 61.240.36.1
Feb 10 07:41:17 Invalid user cacti from 61.240.36.1
Feb 10 07:41:19 Invalid user polycom from 61.240.36.1
Feb 10 07:41:23 Invalid user payala from 61.240.36.1
Feb 10 07:41:26 Invalid user nicola from 61.240.36.1
Feb 10 07:41:28 Invalid user melo from 61.240.36.1
Feb 10 07:41:31 Invalid user axfrdns from 61.240.36.1
Feb 10 07:41:34 Invalid user tinydns from 61.240.36.1
Feb 10 07:41:36 Invalid user dnslog from 61.240.36.1
Feb 10 07:41:39 Invalid user dnscache from 61.240.36.1
Feb 10 07:41:42 Invalid user qmails from 61.240.36.1
Feb 10 07:41:45 Invalid user qmailr from 61.240.36.1
Feb 10 07:41:47 Invalid user qmailq from 61.240.36.1
Feb 10 07:41:50 Invalid user qmailp from 61.240.36.1
Feb 10 07:41:53 Invalid user qmaill from 61.240.36.1
Feb 10 07:41:55 Invalid user qmaild from 61.240.36.1
Feb 10 07:41:58 Invalid user alias from 61.240.36.1
Feb 10 07:42:01 Invalid user vpopmail from 61.240.36.1
Feb 10 07:42:03 Invalid user ldap from 61.240.36.1
Feb 10 07:42:06 Invalid user gica from 61.240.36.1
Feb 10 07:42:09 Invalid user sympa from 61.240.36.1
Feb 10 07:42:11 Invalid user snort from 61.240.36.1
Feb 10 07:42:14 Invalid user hsqldb from 61.240.36.1
Feb 10 07:42:17 Invalid user member from 61.240.36.1
Feb 10 07:42:20 Invalid user chizai from 61.240.36.1
Feb 10 07:42:22 Invalid user yakuji from 61.240.36.1
Feb 10 07:42:25 Invalid user gijyutsu from 61.240.36.1
Feb 10 07:42:28 Invalid user kaihatsu from 61.240.36.1
Feb 10 07:42:30 Invalid user iwafune from 61.240.36.1
Feb 10 07:42:33 Invalid user oomiya from 61.240.36.1
Feb 10 07:42:36 Invalid user seizou from 61.240.36.1
Feb 10 07:42:38 Invalid user gyoumu from 61.240.36.1
Feb 10 07:42:41 Invalid user boueki from 61.240.36.1
Feb 10 07:42:44 Invalid user eigyou from 61.240.36.1
Feb 10 07:42:46 Invalid user soumu from 61.240.36.1
Feb 10 07:42:49 Invalid user hanaco_admin from 61.240.36.1
Feb 10 07:42:52 Invalid user hanaco from 61.240.36.1
Feb 10 07:42:54 Invalid user system from 61.240.36.1
Feb 10 07:42:57 Invalid user tenshin from 61.240.36.1
Feb 10 07:43:00 Invalid user avahi from 61.240.36.1
Feb 10 07:43:02 Invalid user beaglidx from 61.240.36.1
Feb 10 07:43:05 Invalid user wwwuser from 61.240.36.1
Feb 10 07:43:08 Invalid user savona from 61.240.36.1
Feb 10 07:43:10 Invalid user trthaber from 61.240.36.1
Feb 10 07:43:13 Invalid user proftpd from 61.240.36.1
Feb 10 07:43:16 Invalid user bind from 61.240.36.1
Feb 10 07:43:19 Invalid user wwwrun from 61.240.36.1
Feb 10 07:43:21 Invalid user ales from 61.240.36.1</pre>

<p>whereas I now merely get the occasional</p>

<pre>Feb 12 11:53:12 Invalid user oracle from 212.78.238.237
Feb 12 11:53:13 Invalid user test from 212.78.238.237
Feb 12 12:03:59 Invalid user apache from 79.174.78.179
Feb 12 20:16:59 Invalid user postgres from 79.174.78.179</pre>

<p>So it helps, but the regularity of these attacks is still surprising to me. It seems a bit odd that a script would keep trying if it got the <span class=\"code inline\">refused (publickey)</span> error, so I'm forced to conclude that there are one or two spammers out there manually looking for servers they can break into. That's ... odd. And I can't shake this picture of a 12 year old in some spamming sweatshop somewhere failing to break into my server and missing his quota as a result.</p>

<h2>On starting up</h2>

<p>So remember back in the prehistoric ninties, when the likes of <a href=\"http://en.wikipedia.org/wiki/Super_Nintendo_Entertainment_System\">this strange creature</a> walked the earth? When the <a href=\"http://en.wikipedia.org/wiki/PlayStation_(console)\">Playstation</a> first introduced the idea of CD-based games to the console market, a friend of mine flatly said he preferred his SNES. When questioned about it, his reasoning boiled down to one word. </p>

<p><span class=\"code inline\">\"Loading...\"</span> </p>

<p>For the youth who never experienced this; a Super Nintendo had no loading screens anywhere. You put the cartridge in, hit the power button, and it would go straight to the logo screen. While in-game, moving between areas was instantaneous. It seems like most people working in the consumer electronics industry today have either forgotten that instant usage is really good, or they never thought so to begin with. The latest generation of consoles has loading screens friggin everywhere. A different friend of mine purchased a <span style=\"font-weight: bold;\">TV</span> recently that has a 30 second boot cycle, and comes with a network connection for the purpose of <span style=\"font-weight: bold;\">getting firmware updates</span>. A fucking <span style=\"font-weight: bold;\">teevee</span>. It's hilarious that between the TV boot time and the console boot time (and I won't even mention the <span style=\"font-weight: bold;\">install time</span> on the console because it's really unfair), it actually takes longer to start a game of whatever in his living room than it does on my computer. Weird, because I thought the whole point of consoles was that they were special-purpose devices specifically designed to run games. Entertainment isn't the end of this trend though; my phone now also takes about a minute to start up (which is fair I guess, since it basically <span style=\"font-weight: bold;\">is</span> a computer now, complete with a flavor of Linux and a web browser). Finally, my parents recently renovated their kitchen and procured for it a, I shit you not, dishwasher that needs to boot before it starts pulling in water.</p>

<p>At what point did this start happening? When the hell did the decision get made in the bowels of Sony corporate HQ that it was ok for my display to have a configuration cycle? If this is where the future of TVs is going, I may very well have already bought my last non-monitor display. But beyond entertainment, my greater concern is the trend of <a href=\"http://en.wikipedia.org/wiki/Ephemeralization\">ephemeralization</a> (as <a href=\"http://www.paulgraham.com/tablets.html\">elaborated by Graham</a> to mean \"...the increasing tendency of physical machinery to be replaced by what we would now call software.\") combined with the new human habit of sticking computers into things means that we are likely to soon have shoes, lip-balm and kitchen cutlery that come with their own fabulously designed and meticulously polished loading screens.</p>

<p>Somehow, I'm not enraptured by this prospect.</p>

<h2>On data moving</h2>

<p>It's come to my attention that the Canadian government has recently had a <a href=\"http://www.tmcnet.com/scripts/print-page.aspx?PagePrint=http://telecommunications.tmcnet.com/topics/telecommunications/articles/144739-canadians-brawl-over-internet-usage-caps.htm\">nontrivial</a> (and <a href=\"http://communities.canada.com/vancouversun/blogs/innovation/archive/2011/02/14/shaw-seeks-customer-feedback-on-usage-based-internet-charges.aspx?CommentPosted=true#commentmessage\">ongoing</a>) <a href=\"http://openmedia.ca/meter\">tussle</a> with the CRTC and the major Canadian ISPs about whether or not they should be allowed to charge arms and legs for data overages. That last link was actually to the <a href=\"http://openmedia.ca/meter\">Open Media</a> site, which is organizing a petition against the CRTCs move. If you're in Canada, you should probably sign it. My position is basically that I don't care, because the way I use the internet, 40GB is essentially unlimited. I'm not a <a href=\"http://ca.netflix.com/Default?autoRedirect=off&mqso=80027678\">netflix</a> user (though I'm constantly told I should be) I don't <a href=\"http://thepiratebay.org/\">torrent</a> the <a href=\"http://www.lmptfy.com/?q=games&t=400\">games</a> like the kids these days, and downloading Linux packages is a joke if you're running the minimal system I've got over here. The single largest component I install is <span class=\"code inline\">haskell-platform</span>, which takes something like 600Mb. With an M. Even with my fiancee being perhaps the worlds' biggest <a href=\"http://www.youtube.com/\">YouTube</a> <a href=\"http://www.youtube.com/user/juicytuesday\">makeup</a> <a href=\"http://www.youtube.com/user/MissChievous\">video</a> <a href=\"http://www.youtube.com/user/sayanythingbr00ke\">fiend</a>, we've never actually approached the limit of our plan. My interest in this fight is purely in the interest of a theoretically unfettered future; one where data is as free as it could possibly be, and that world includes no limits on how much it's allowed to move per month (incidentally, that's also why I frown when I see things <a href=\"http://www.reddit.com/r/programming/comments/fkt7t/nemerle_factor_alice_ml_and_other_programming/\">like this</a> happening; freedom of information includes the right for said information to exist). So I'm against the CRTC here, but seemingly not for the same reason as anyone in a 100 km radius of me.</p>
"))
((5202 3723 545998000) :INSERT (35 :POSTED 3506648400))
((5202 3723 546000000) :INSERT (35 :TAG :GENERAL-PROGRAMMING-THOUGHTS))
((5202 3723 546002000) :INSERT (35 :TAG :HOSTING))
((5202 3723 546005000) :INSERT (35 :TAG :IDEA-PEELING))
((5202 3723 546007000) :INSERT (35 :TAG :SPECULATION))
((5202 3723 546360000) :INSERT (36 :TITLE "CLSQL. And NOTHING ELSE."))
((5202 3723 546367000) :INSERT (36 :FILE "clsql.html"))
((5202 3723 546369000) :INSERT (36 :EDITED 3610022331))
((5202 3723 546371000) :INSERT
 (36 :BODY
  "<p>I am discussing CLSQL this week. If you don't want to hear about it, here's <a href=\"http://s521.photobucket.com/albums/w334/smackentosh/?action=view&current=1275822438839.jpg&mediafilter=images\">a picture of two llamas instead</a>.</p>

<p>So I've decided to switch over to <a href=\"http://clsql.b9.com/\">CLSQL</a> from <a href=\"http://www.hackinghat.com/index.php/cl-mysql\">cl-mysql</a> for my Common Lisp databasing needs. Partly because CLSQL provides a database-agnostic, s-expression based syntax for SQL queries (as opposed to string-representations) , partly because it seems to be closer to a \"standard\" CL database library, but mainly because it's installable thorough quicklisp, whereas cl-mysql is only installable by downloading the tarball from <a href=\"https://github.com/hackinghat/cl-mysql\">its github</a> and <span class=\"code inline\">asdf-install:install</span>ing that. Then crossing your fingers that you only get 37 compilation errors.</p>

<p>As usual, here's the experience from the perspective of a not-particularly-bright, young lisper.</p>

<p>Before I even get into using it, though, I have to admit that installation wasn't free of speed bumps. Using <span class=\"code inline\">(ql:quickload \"clsql\")</span> seemed to install and include the thing correctly, but as soon as I tried to use <span class=\"code inline\">connect</span>, it barfed at me, saying that it couldn't compile the C ffi libraries clsql was expecting. This particular machine is running on Debian 6 (the Intel 32 version) and SBCL 1.0.40.0 (this was also before the recent Quicklisp beta update, so it may not even be an issue anymore). Anyway, it turns out that I had to <span class=\"code inline\">apt-get install cl-sql</span>. <span class=\"code inline\">libmysqlclient-dev</span> was installed already (zach told me to check in <a href=\"http://stackoverflow.com/questions/5032566/clsql-trouble-in-sbcl\">our brief SO correspondence</a>), but that didn't seem to make a difference. On my desktop at home, I've got pretty much the same setup, except it's an AMD 64 machine instead of an Intel, and that seemed to trigger a couple of warnings (though following the <span class=\"code inline\">[Accept]</span> restarts got it into a workable state). Finally, I had one last problem on my Linode (where I hadn't thought to install <span class=\"code inline\">gcc</span> for some odd reason, so the C ffi libraries had no hope of compiling). That's the installation headaches over with.</p>

<p>TL;DR;so far: if you have any problems, make sure to install <span class=\"code inline\">libmysqlclient-dev</span>, <span class=\"code inline\">gcc</span> and <span class=\"code inline\">cl-sql</span> from the Debian repos. Expect two warnings on AMD machines (which you can <span class=\"code inline\">[Accept]</span> through).</p>

<p>The actual usage is fairly simple, assuming you're already familiar with SQL. There are two interfaces; a functional one and an OO one that binds tables to CLOS objects. I don't know much about that second one, so this is going to deal with my use of the functional interface.</p>

<p>If you're going to be doing this through the repl, you'll need to evaluate</p>

<pre>(connect '(<span style=\"color: #8b2252;\">\"localhost\"</span> <span style=\"color: #8b2252;\">\"database-name\"</span> <span style=\"color: #8b2252;\">\"database-user-name\"</span> <span style=\"color: #8b2252;\">\"password\"</span>) 
         <span style=\"color: #7a378b;\">:database-type</span> <span style=\"color: #7a378b;\">:mysql</span>) 
(start-sql-recording)
(enable-sql-reader-syntax)
<span style=\"color: #b22222;\">;; </span><span style=\"color: #b22222;\">I'm using :mysql. You could use something else, it shouldn't matter for the purposes of this article
</span></pre>

<p>The use of <span class=\"code inline\">connect</span> is fairly self-explanatory. <span class=\"code inline\">start-sql-recording</span> returns the SQL equivalent of any cl-sql query you evaluate (so don't use it in files, it's just for repl purposes). Finally, the call to <span class=\"code inline\">enable-sql-reader-syntax</span> lets you use CLSQLs bracket-delimited SQL macros in the REPL. If you've got a file you want to use CLSQL in (as opposed to at the repl), put <span class=\"code inline\">(file-enable-sql-reader-syntax)</span> at the top, right (after the <span class=\"code inline\">in-package</span> statement if you have one). The syntax works in two relevant ways. </p>

<p>First, it converts lisp-case expressions to SQL_CASE expressions. For example</p>

<pre>(create-table [users]
              '(([user-id] integer <span style=\"color: #7a378b;\">:not-null</span> <span style=\"color: #7a378b;\">:unique</span> 
                           <span style=\"color: #7a378b;\">:primary-key</span> <span style=\"color: #7a378b;\">:auto-increment</span>)
                ([first-name] (string 50)) ([last-name] (string 50)) 
                ([num-logins] integer) ([password] string) ([salt] string)))

&gt;<span style=\"color: #b22222;\">;; </span><span style=\"color: #b22222;\">2011-03-03T09:41:44 localhost/database/user =&gt; CREATE TABLE USERS (USER_ID INT NOT NULL UNIQUE PRIMARY KEY AUTO_INCREMENT, FIRST_NAME CHAR(50), LAST_NAME CHAR(50), NUM_LOGINS INT(11), PASSWORD VARCHAR(255), SALT VARCHAR(255)) Type=</span><span style=\"color: #ff4500; font-weight: bold; text-decoration: underline;\">InnoDB</span><span style=\"color: #b22222;\">
</span></pre>

<p>If you're using a database other than MySQL, the CREATE TABLE statement will look different (if you want to play around creating stuff, you can find the CLSQL column-type reference about half-way down <a href=\"http://clsql.b9.com/manual/def-view-class.html\">this page</a>).</p>

<p>Second, it'll give you access to a subset of lisp for the purposes of creating SQL expressions, as in the <span class=\"code inline\">:where</span> clause here</p>

<pre>(select [*] 
        <span style=\"color: #7a378b;\">:from</span> [user] 
        <span style=\"color: #7a378b;\">:where</span> [and [= [first-name] <span style=\"color: #8b2252;\">\"Inai\"</span>] 
                    [= [last-name] <span style=\"color: #8b2252;\">\"mathi\"</span>]])

&gt;<span style=\"color: #b22222;\">;; </span><span style=\"color: #b22222;\">2011-03-03T12:41:40 localhost/database/user =&gt; SELECT * FROM USER WHERE ((FIRST_NAME = 'Inai') AND (LAST_NAME = '</span><span style=\"color: #cdad00; font-weight: bold; text-decoration: underline;\">mathi</span><span style=\"color: #b22222;\">'))</span></pre>

<p>Like I said, it takes a subset of lisp, not the whole thing, so while you can construct pretty elaborate where clauses using <span class=\"code inline\">(and|or|[=><]</span>, you can't do something like </p>

<pre>(update-records [user] 
                <span style=\"color: #7a378b;\">:attributes</span> '([num-logins]) 
                <span style=\"color: #7a378b;\">:values</span> '([+ 1 [num-logins]]))</pre>

<p>Incidentally, that's one of the two ways you can organize column name and values in a query. The other (which I prefer whenever I'm changing more than one attribute at a time) is to pass up attribute-value pairs like so</p>

<pre>(insert-records <span style=\"color: #7a378b;\">:into</span> [user] 
                <span style=\"color: #7a378b;\">:av-pairs</span> `(([first-name] <span style=\"color: #8b2252;\">\"Inai\"</span>) ([last-name] <span style=\"color: #8b2252;\">\"mathi\"</span>) 
                            ([password] ,(salt-password pw salt)) 
                            ([salt] ,salt)))</pre>

<p>As in regular SQL (or, at least, MySQL sql), if you're inserting a value for each column, in order, you can leave out the <span class=\"code inline\">:attributes</span> specification altogether. Simple, right? As long as you know SQL and Lisp, I mean.</p>

<p>The pitfalls i've hit in the coding bit really have more to do with some MySQL-specific (I guess?) things that I still didn't expect to be handling myself. For example, the first time I saw their <span class=\"code inline\">[ ]</span> notation, I thought \"Oh, this is a way to translate some stuff to SQL notation\". It seemed like a safe assumption that this would include things like <span class=\"code inline\">[now]</span> or <span class=\"code inline\">[(now)]</span>, one of which I thought would call the sql <span class=\"code inline\">NOW();</span> function to get the current datetime in the appropriate format. And that's a no. I honestly didn't think I'd have to write</p>

<pre>(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">mysql-now</span> ()
  (<span style=\"color: #a020f0;\">multiple-value-bind</span> 
        (second minute hour date month year day-of-week dst-p tz) 
      (get-decoded-time)
    (<span style=\"color: #a020f0;\">declare</span> (ignore day-of-week dst-p tz))
    <span style=\"color: #b22222;\">;; </span><span style=\"color: #b22222;\">~2,'0d is the designator for a two-digit, zero-padded number
</span>    (format nil <span style=\"color: #8b2252;\">\"~a-~2,'0d-~2,'0d ~2,'0d:~2,'0d:~2,'0d\"</span> 
                 year month date hour minute second)))
</pre>

<p>myself, but there you have it. Also, TIL that <span class=\"code inline\">multiple-value-bind</span> has an odd indeting pattern.</p>

<p>The next thing is that the <span class=\"code inline\">timestamp</span> column type doesn't seem to be supported by CLSQLs functional interface. The <a href=\"http://clsql.b9.com/manual/def-view-class.html\">reference page</a> I linked earlier states that you should be able to specify a timestamp column using <span class=\"code inline\">wall-time</span>, but that creates a vanilla datetime in MySQL (timestamps are separate, and will store the current time whenever that row is <span class=\"code inline\">INSERT</span>ed or <span class=\"code inline\">UPDATE</span>d). The solution seems to be </p>

<ol>
  <li>Don't use timestamp columns, and instead manually call <span class=\"code inline\">mysql-now</span> when I need to update timestamps</li>
  <li>Sidestep the CLSQL reader syntax by using the <span class=\"code inline\">query</span> function anywhere you want a timestamp.</li>
</ol>

<p>The second is unacceptable because it's basically what cl-mysql does by default, except without the automatic sql escaping. The default CLSQL syntax handles this, by the way, so feel perfectly free to call your admin account \"'); DROP TABLE USERS; SELECT '\", it shouldn't cause any trouble other than being annoying to type each time. To be fair, I'd probably only have to use SQL literals at table creation, so it wouldn't be the end of the world, but it's also not ideal. Not using timestamps where they're appropriate just because my tools don't like it is even worse. Hopefully, a solution presents itself, but judging from the <a href=\"http://stackoverflow.com/questions/5147296/clsql-timestamp-column-type\">response over at SO</a>, I'm not holding my breath. Maybe I'm using <span class=\"code inline\">wall-time</span> incorrectly, or there's another column specifier that gets the correct behavior in MySQL, I dunno.</p>

<p>The only other problem I'm having is understanding how exactly you're supposed to use the <span class=\"code inline\">with-connection</span> and <span class=\"code inline\">with-default-connection</span> functions. Using <span class=\"code inline\">with-default-connection</span> doesn't seem to close the connection or (return it to the pool if you're using one). <span class=\"code inline\">with-connection</span> does, but it gives you style-warnings if you don't explicitly pass that connection to any queries you wrap in it. </p>

<p>This last one is probably a broken understanding on my part though. Intuitively, I'd expect to either</p>

<ul>
  <li>Wrap each handler function in a <span class=\"code inline\">with-connection</span> (so that any database hits happening as a result of that handler share a connection)</li>
  <li>Wrap each database-manipulating function in a <span class=\"code inline\">with-connection</span> (so that each database hit has its own connection. Sounds bad, but it's actually manageable on my current project)</li>
  <li>Start a connection with the server, and use that one to handle all traffic (which sounds scary in many ways, so I'm not seriously considering)</li>
</ul>

<p>The second honestly sounds like the right choice (though I could be wrong depending on how much overhead is associated with starting a connection to the database server; I should run that through the profiler this weekend), but the first one is also acceptable. The trouble is that I can't reconcile either with the fact that <span class=\"code inline\">with-connection</span> really seems to want me passing explicit database references around. Like I said, more research is necessary.</p>

<p>Sorry for starting this month out on the boring side, but I've been poking at this for a week or so, and I needed to clear my head of it.</p>
"))
((5202 3723 546509000) :INSERT (36 :POSTED 3508117200))
((5202 3723 546511000) :INSERT (36 :TAG :CLSQL))
((5202 3723 546513000) :INSERT (36 :TAG :COMMON-LISP))
((5202 3723 546910000) :INSERT (37 :TITLE "Formlets and Loop"))
((5202 3723 546920000) :INSERT (37 :FILE "formlets-and-loop.html"))
((5202 3723 546925000) :INSERT (37 :EDITED 3610022331))
((5202 3723 546935000) :INSERT
 (37 :BODY "<p>Just a quick update today.</p>

<p>First, I've pushed an update to <a href=\"https://github.com/Inaimathi/formlets\">the formlets project</a> on github. It now supports input type <span class=\"code inline\">file</span> (which includes managing the enctype properly, displaying file inputs and providing a couple of basic predicate generators for validation). Check the <a href=\"https://github.com/Inaimathi/formlets\">project page</a>, or the <a href=\"https://github.com/Inaimathi/formlets/wiki\">new wiki</a>, both of which have slightly more robust documentation than you'll find here. </p>

<p>There's really no occasion to this, by the way. I try to be a self-centered realist in terms of design philosophy, so the only reason I added <span class=\"code inline\">file</span> fields here was that I finally found I needed them. It actually surprises me quite a bit that I got by for so long with only inputs, passwords, textareas and recaptchas, but there you have it. I'm in the middle of another project at work now though, so I may soon add options and dates. Don't hold your breath though.</p>

<p>Second, I've been figuring out <span class=\"code inline\">loop</span> for the past little while (and re-wrote a lot of the formlet internals with it, now that I've realized that it can basically do everything). The pieces that loop helped in are ones that would otherwise have to be expressed in terms of recursion and some intermediary variables. If you want to take a look at it in action, check out the \"Validation related functions\" section in <a href=\"https://github.com/Inaimathi/formlets/commit/0e9f9bd1f608ff9f02867e895385c5455ce365ee#formlets.lisp\">this diff</a>. Seven lines of loop saved me something like 12 lines of recursion and siz lines of helper function. And not only that, but it's (in my opinion, obviously) much easier for a human reader to parse this way. I haven't learned it yet, and doubt I ever will, given <a href=\"http://www.lispworks.com/documentation/HyperSpec/Body/m_loop.htm\">its specification</a>. It looks like <span class=\"code inline\">loop</span> itself is, without exaggeration, several times more complicated than the rest of Common Lisp combined. <span class=\"code inline\">iterate</span> doesn't seem to be much better in this regard, by the way. It seems to be <span class=\"code inline\">loop</span> with a few extra parens thrown in. But <span class=\"code inline\">loop</span> isn't hard to learn because it doesn't have enough parentheses, it's hard to understand becuase it's mind-bendingly complicated.</p>

<p>In any case, I've found tutorials on both <a href=\"http://common-lisp.net/project/iterate/doc/Don_0027t-Loop-Iterate.html\">iterate</a> and <a href=\"http://www.ai.sri.com/pkarp/loop.html\">loop</a> (as well as the <a href=\"http://cl-cookbook.sourceforge.net/files.html\">CL cookbook loop entry</a> and <a href=\"http://www.gigamonkeys.com/book/loop-for-black-belts.html\">Seibels' treatment in PCL</a>). The two things that I needed to know in order to make that formlets code work were either omitted or buried, or merely implied. Specifically, I needed to interate by two elements of a list, and I needed to be able to return a flat list that had double the elements of the input (collecting two elements per input element). Basically</p>

<pre>'(<span style=\"color: #7a378b;\">:a</span> 1 <span style=\"color: #7a378b;\">:b</span> 2 <span style=\"color: #7a378b;\">:c</span> 3 <span style=\"color: #7a378b;\">:d</span> 4) =&gt; '(<span style=\"color: #7a378b;\">:a</span> <span style=\"color: #7a378b;\">:b</span> <span style=\"color: #7a378b;\">:c</span> <span style=\"color: #7a378b;\">:d</span>)
'(<span style=\"color: #7a378b;\">:a</span> <span style=\"color: #7a378b;\">:b</span> <span style=\"color: #7a378b;\">:c</span> <span style=\"color: #7a378b;\">:d</span>) =&gt; '(<span style=\"color: #7a378b;\">:a</span> <span style=\"color: #8b2252;\">\"A\"</span> <span style=\"color: #7a378b;\">:b</span> <span style=\"color: #8b2252;\">\"B\"</span> <span style=\"color: #7a378b;\">:c</span> <span style=\"color: #8b2252;\">\"C\"</span> <span style=\"color: #7a378b;\">:d</span> <span style=\"color: #8b2252;\">\"D\"</span>)
</pre>

<p>That's very slightly beyond <span class=\"code inline\">mapcar</span> as far as I know, so the way it ended up getting written was a recursion. That ended up being very complicated (not that the situation helped; this would have been relatively straightforward in regular code, but throw in two or three steps of macroexpansion, and it gets ugly fast). So, for my own future reference (and hopefully, for the benefit of anyone else that does a search on this), here's how you do it with loop.</p>

<pre><span style=\"color: #b22222;\">;; </span><span style=\"color: #b22222;\">Iterating by multiple elements
</span>(<span style=\"color: #a020f0;\">defvar</span> <span style=\"color: #a0522d;\">test-list</span> '(<span style=\"color: #7a378b;\">:a</span> 1 <span style=\"color: #7a378b;\">:b</span> 2 <span style=\"color: #7a378b;\">:c</span> 3 <span style=\"color: #7a378b;\">:d</span> 4))
&gt; TEST-LIST

(<span style=\"color: #a020f0;\">loop</span> 
   for (key value) on test-list by #'cddr
   collecting key)
&gt; (<span style=\"color: #7a378b;\">:A</span> <span style=\"color: #7a378b;\">:B</span> <span style=\"color: #7a378b;\">:C</span> <span style=\"color: #7a378b;\">:D</span>)

<span style=\"color: #b22222;\">;; </span><span style=\"color: #b22222;\">Collecting multiple elements
</span>(setf test-list '(<span style=\"color: #7a378b;\">:a</span> <span style=\"color: #7a378b;\">:b</span> <span style=\"color: #7a378b;\">:c</span> <span style=\"color: #7a378b;\">:d</span>))
&gt; (<span style=\"color: #7a378b;\">:A</span> <span style=\"color: #7a378b;\">:B</span> <span style=\"color: #7a378b;\">:C</span> <span style=\"color: #7a378b;\">:D</span>)

(<span style=\"color: #a020f0;\">loop</span> 
   for key in test-list
   collecting key 
   collecting (string key))
&gt; (<span style=\"color: #7a378b;\">:A</span> <span style=\"color: #8b2252;\">\"A\"</span> <span style=\"color: #7a378b;\">:B</span> <span style=\"color: #8b2252;\">\"B\"</span> <span style=\"color: #7a378b;\">:C</span> <span style=\"color: #8b2252;\">\"C\"</span> <span style=\"color: #7a378b;\">:D</span> <span style=\"color: #8b2252;\">\"D\"</span>)
</pre>

<p>You can actually skip the \"ing\" in this case, writing the last two clauses as <span class=\"code inline\">collect key collect (string key)</span>. There's also no requirement for making this a multi-line statement, I just feel that it's easier to read here.</p>

<p>Third, and no one other than me cares, so you may want to go read <a href=\"http://bc.tech.coop/blog/081231.html\">something interesting</a> instead.</p>

[74 wpm.jpg]

<p>I know it's not very impressive yet, but keep in mind that I started off in the 35-45 range. Hopefully, I can crack 100 this year.</p>
"))
((5202 3723 547017000) :INSERT (37 :POSTED 3508376400))
((5202 3723 547022000) :INSERT (37 :TAG :COMMON-LISP))
((5202 3723 547026000) :INSERT (37 :TAG :HUNCHENTOOT))
((5202 3723 547455000) :INSERT (38 :TITLE "Parenscript"))
((5202 3723 547465000) :INSERT (38 :FILE "parenscript.html"))
((5202 3723 547469000) :INSERT (38 :EDITED 3610022331))
((5202 3723 547473000) :INSERT
 (38 :BODY
  "<p>Recently, I picked up <a href=\"http://common-lisp.net/project/parenscript/\">parenscript</a>. I've been meaning to, it's available through <a href=\"http://www.quicklisp.org/\">quicklisp</a>, and there was an increasing amount of repetition in my js code, so I gave it a shot. I'm about half way through putting together my first js file with it, and goddamn is this sweet.</p>

<p>I've read <a href=\"http://news.ycombinator.com/item?id=978299\">arguments</a> that it creates a needless abstraction over JS that's better handled through jQuery (which I have some experience with). That's actually one of the reasons I've been a bit slow on the draw to this one. A combination of assuming that additional abstraction would cost more than it would benefit, and having experience with a technology that's Good Enough™. After having put together cl-css, though, I've noticed that even a minimal Lisp-based abstraction layer over a target language gives you a lot. If nothing else, you get macros and backquoting for free.</p>

<p>In the case of parenscript, there's actually a bigger win (which has variously been \"solved\" by <a href=\"http://www.mattsnider.com/javascript/template-string-replacement-function/\">regex templating</a>, <a href=\"http://ejohn.org/blog/javascript-micro-templating/\">hidden concatenation</a> and <a href=\"http://code.google.com/p/trimpath/wiki/JavaScriptTemplates\">frameworks</a> of <a href=\"http://www.prototypejs.org/api/template\">varying success</a>). Well, there's no reason to deal with JavaScripts' downright criminal lack of string templating with the grin-and-bear method. Even beyond that, there are quite a few places where the right thing for your JS code to do is generate further HTML. You sometimes want these components generated on the client side, because they're useless clutter if the client has javascript disabled.</p>

<p>Out of curiosity, have you ever tried doing that by hand? I'll wait, go ahead, give it a shot. Load up a blank page, include jQuery, then let me know what the best way is to generate the HTML for a google-maps-esque UI widget with javascript. </p>

<p>Well, here's how html-generation looks in parenscript</p>

<pre>(chain ($ <span style=\"color: #8b2252;\">\".ui-container\"</span>)
       (prepend 
          (who-ps-html (<span style=\"color: #7a378b;\">:div</span> <span style=\"color: #7a378b;\">:class</span> <span style=\"color: #8b2252;\">\"ui-widgets\"</span>
                           (<span style=\"color: #7a378b;\">:img</span> <span style=\"color: #7a378b;\">:id</span> <span style=\"color: #8b2252;\">\"directions\"</span> <span style=\"color: #7a378b;\">:src</span> <span style=\"color: #8b2252;\">\"directions.jpg\"</span>)
                           (<span style=\"color: #7a378b;\">:img</span> <span style=\"color: #7a378b;\">:id</span> <span style=\"color: #8b2252;\">\"street-view\"</span> <span style=\"color: #7a378b;\">:src</span> <span style=\"color: #8b2252;\">\"street-view\"</span>))))
       (css (create <span style=\"color: #7a378b;\">:cursor</span> <span style=\"color: #8b2252;\">\"pointer\"</span>)))</pre>

<p>In other words, exacly like html-generation in <span class=\"code inline\">cl-who</span> (which is to say, beautiful). The <span class=\"code inline\">chain</span> calls are ugly<a href=\"#parenscriptf1\" name=\"parenscriptn1\">[1]</a> in comparison to the standard jQuery <span class=\"code inline\">$(<span style=\"color: #8b2252;\">\".foo\"</span>).bar()</span>, and <span class=\"code inline\">create</span> isn't objectively brilliant<a href=\"#parenscriptf2\" name=\"parenscriptn2\">[2]</a>, but the ability to do string templating and HTML generation in Lisp is such a load off my mind that I don't care. It adds a minor inconvenience in places I couldn't bring myself to care about, but provides relief specifically in the most tedious and error-prone parts of javascript development. </p>

<p>There's very little that wouldn't strike me as an improvement over</p>

<pre>$(<span style=\"color: #8b2252;\">\".ui-container\"</span>)
    .prepend(<span style=\"color: #8b2252;\">\"&lt;div class='ui-widgets'&gt;\"</span>
             + <span style=\"color: #8b2252;\">\"&lt;img id='directions' src='directions-icon.jpg' /&gt;\"</span>
             + <span style=\"color: #8b2252;\">\"&lt;img id='street-view' src='street-view-icon.jpg' /&gt;\"</span>
             + <span style=\"color: #8b2252;\">\"&lt;/div&gt;\"</span>)
    .css({<span style=\"color: #8b2252;\">\"cursor\"</span>: <span style=\"color: #8b2252;\">\"pointer\"</span>});</pre>

<p>And god help you if you need to sneak a variable in as the content/class-name of one of those tags.</p>

<p>Keep in mind that this is for a simple, throwaway example. If I wanted to get fancy, I'd throw in some stitched functions and macros (in fact, I'll post the code of that module I'm working on once I finish the thing, and I'll try to work out how I would have done it by hand).</p>

<p>So yeah. My first reaction was a resounding \"Meh. I don't need this level of abstraction. I already know jQuery\". The ability to have <span class=\"code inline\">defmacro</span> and <span class=\"code inline\">format</span> available to me while writing Javascript piqued my interest, and <span class=\"code inline\">who-ps-html</span> just sort of sealed the deal.</p>

<p>It's a little embarrassing that the title of this blog is becoming less and less accurate the more time I spend with Lisp. I've been using an increasing number of s-exp generators (<a href=\"http://weitz.de/cl-who/\">cl-who</a>, <a href=\"http://www.cliki.net/cl-css\">cl-css</a>, <a href=\"http://clsql.b9.com/\">clsql</a> and <a href=\"http://common-lisp.net/project/parenscript/\">parenscript</a>, in case you were keeping score). Actually, embarrassing isn't the right word for it. </p>

<p>Worrying.</p>

<p><span class=\"quote\">Tools, of course, can be the subtlest of traps. One day, I know, I must smash the emerald.</span></p>

<hr />

<p>1 <a href=\"#parenscriptn1\" name=\"parenscriptf1\">[back]</a> For single method calls, anyway. In any case, I get the feeling I could macro my way out of this pretty easily. Something like</p>

<pre>(defpsmacro $ (selector <span style=\"color: #228b22;\">&amp;body</span> chains)
  `(chain (j-query ,selector)
      ,@chains))</pre>

<p>seems to more or less solve my pain points.</p>

<pre>(ps ($ <span style=\"color: #8b2252;\">\".ui-container\"</span>
       (prepend (who-ps-html (<span style=\"color: #7a378b;\">:div</span> <span style=\"color: #7a378b;\">:class</span> <span style=\"color: #8b2252;\">\"ui-widgets\"</span>
                                   (<span style=\"color: #7a378b;\">:img</span> <span style=\"color: #7a378b;\">:id</span> <span style=\"color: #8b2252;\">\"directions\"</span> <span style=\"color: #7a378b;\">:src</span> <span style=\"color: #8b2252;\">\"directions.jpg\"</span>)
                                   (<span style=\"color: #7a378b;\">:img</span> <span style=\"color: #7a378b;\">:id</span> <span style=\"color: #8b2252;\">\"street-view\"</span> <span style=\"color: #7a378b;\">:src</span> <span style=\"color: #8b2252;\">\"street-view\"</span>))))
       (css (create <span style=\"color: #7a378b;\">:cursor</span> <span style=\"color: #8b2252;\">\"pointer\"</span>))))

&gt; <span style=\"color: #8b2252;\">\"jQuery('.ui-container').prepend('&lt;DIV CLASS=\\\"ui-widgets\\\"&gt;&lt;IMG ID=\\\"directions\\\" SRC=\\\"directions.jpg\\\"&gt;&lt;IMG ID=\\\"street-view\\\" SRC=\\\"street-view\\\"&gt;&lt;/DIV&gt;').css({ 'cursor' : 'pointer' });\"</span></pre>

<p><span class=\"code inline\">j-query</span> seems really weird, but it expands properly, and it'll only ever show up in the macro definition anyway.</p>

<p>2 <a href=\"#parenscriptn2\" name=\"parenscriptf2\">[back]</a> I personally prefer <span class=\"code inline\">(create :foo <span style=\"color: #8b2252;\">\"bar\"</span> :baz <span style=\"color: #8b2252;\">\"mumble\"</span>)</span> to <span class=\"code inline\">{ 'foo' : 'bar', 'baz' : 'mumble' }</span>, but I'm sure many would disagree.</p>
  "))
((5202 3723 547598000) :INSERT (38 :POSTED 3508549200))
((5202 3723 547603000) :INSERT (38 :TAG :COMMON-LISP))
((5202 3723 547607000) :INSERT (38 :TAG :PARENSCRIPT))
((5202 3723 548207000) :INSERT (39 :TITLE "Puzzling with Lisp"))
((5202 3723 548217000) :INSERT (39 :FILE "cryptoarithmetic.html"))
((5202 3723 548222000) :INSERT (39 :EDITED 3610022331))
((5202 3723 548226000) :INSERT
 (39 :BODY
  "<p>This post started out as a reply to a lisper-in-training on <a href=\"http://codereview.stackexchange.com/\">codereview.SE</a>. It got pretty long, so I ended up posting the final solution <a href=\"http://codereview.stackexchange.com/questions/1227/common-lisp-solve-a-cryptoarithmetic-problem\">there</a>, and the story here. For those too lazy to click, the problem was given as</p>

<pre><code>;; Cryptoarithmetic. In cryptoarithmetic problems, we are given a problem wherein the digits are replaced
;; with characters representing digits. A solution to such a problem is a set of digits that, when substituted
;; in the problem, gives a true numerical interpretation. Example:
;;   IS
;;   IT
;;   __
;;   OK
;;
;;   Has a solution { I = 1; K = 1; O = 3; S = 5; T = 6}.  For each of the below cryptoarithmetic problems,
;;   write a program that finds all the solutions in the shortest possible time.
;;
;;   IS     I
;;   IT    AM
;;   __    __
;;   OK    OK
</code></pre>

<p>The original poster put up a brute force solution, so I figured I'd follow suit (I'm sure there's a way to reduce the problem space significantly, but I've spent quite enough time on this puzzle. If you'd like to upstage me, <a href=\"http://codereview.stackexchange.com/questions/1227/common-lisp-solve-a-cryptoarithmetic-problem/\">feel more than free</a>).</p>

<hr />

<p>Ok, so I sat down for a while (probably longer than I should have) and thought how I would actually put together a brute-force solution to this. Basically, the ideal scenario is: for the input <code>IS IT OK</code>, I would have a function to compute <code>(= (+ IS IT) OK)</code>.</p>

<pre><code>(lambda (s i |t| o k) ;; T is a reserved symbol, so I must escape the t
  (= (+ (digits-&gt;number i s) (digits-&gt;number i |t|)) (digits-&gt;number o k)))
</code></pre>

<p>If I had this function, I could simply </p>

<pre><code>(loop for i from 0 to 99999
      when (apply [that function] (number-&gt;digits i)) 
      collect (number-&gt;bindings i '(s i |t| o k)))
</code></pre>

<span class=\"edit\">EDIT: I was severely under-optimistic here; the <b>ideal</b> situation would be to have a function that does
<pre><span style=\"color: #00ffff;\">(</span><span style=\"color: #a020f0;\">lambda</span> (s i |t| o k)
  (<span style=\"color: #a020f0;\">when</span> (= (+ (digits-&gt;number i s) (digits-&gt;number i |t|)) (digits-&gt;number o k))
    (list <span style=\"color: #8b2252;\">\"s\"</span> s <span style=\"color: #8b2252;\">\"i\"</span> i <span style=\"color: #8b2252;\">\"t\"</span> |t| <span style=\"color: #8b2252;\">\"o\"</span> o <span style=\"color: #8b2252;\">\"k\"</span> k)))
</pre>

which I could then use by doing <code>(<span style=\"color: #a020f0;\">loop</span> for i from 0 to 99999 when (apply [that function] (number-&gt;digits i)) collect it)</code> Let this be a lesson to you; always apply the maximum amount of wishful thinking (the <a href=\"http://codereview.stackexchange.com/questions/1227/common-lisp-solve-a-cryptoarithmetic-problem/1251#1251\">response over at CR</a> has <code>solution-fn</code> generate this function rather than the original).
</span>

<p>That would give me the list of all single-digit bindings for the letters \"S I T O K\" that satisfy the problem. Ok, so what do I need for that? First off, </p>

<pre><code>(defun digits-&gt;number (&amp;rest digits) 
   (parse-integer (coerce digits 'string)))

(defun number-&gt;digits (num &amp;optional (pad-to 5)) 
   (coerce (format nil (concatenate 'string\"~\" (write-to-string pad-to) \",'0d\") num) 'list))

(defun numbers-&gt;bindings (num bindings)
   (let ((digits (number-&gt;digits num)))
      (mapcar (lambda (b d) `(,b . ,(parse-integer (format nil \"~a\" d)))) bindings digits)))
</code></pre>

<p>those helpers were mentioned, and seem simple enough (I'm defining them as naively as possible, with no eye to performance right now, so don't bother pointing out that strings are slow). The last thing I need is something that takes a problem string (like <code>\"it is ok\"</code>) and returns that <code>lambda</code> above. So, here's the magic trick.</p>

<pre><code>(defmacro solution-fn (problem-string)
  (let* ((terms (string-&gt;terms problem-string))
     (args (remove-duplicates (apply #'append terms))))
    `(lambda ,args
       (= (+ ,@(loop for term in (cdr terms) collect `(digits-&gt;number ,@term)))
      (digits-&gt;number ,@(car terms))))))
</code></pre>

<p>That introduces one more helper function, <code>string-&gt;terms</code>, which should return <pre><code>'((|o| |k|) (|i| |t|) (|i| |s|))</code></pre> given \"is it ok\". It actually doesn't matter what order the rest are in, as long as the \"answer\" (\"ok\" in this case) is the first element. Here's what the function looks like:</p>

<pre><code>(defun string-&gt;terms (problem-string)
  (reverse
   (mapcar (lambda (s) (mapcar (lambda (i) (intern (format nil \"~a\" i))) 
                   (coerce s 'list)))
       (cl-ppcre:split \" \" (string-downcase problem-string)))))
</code></pre>

<p>you'll have to install and include <code>cl-ppcre</code> to use <code>cl-ppcre:split</code>. I recommend <a href=\"http://www.quicklisp.org/beta/\">quicklisp</a> for your installation needs. I'm downcasing to avoid that problem with <code>T</code> being a reserved symbol. If you macroexpand <code>(solution-fn \"is it ok\")</code>, you get</p>

<pre><code>(LAMBDA (|o| |k| |t| |i| |s|)
  (= (+ (DIGITS->NUMBER |i| |t|) (DIGITS->NUMBER |i| |s|))
     (DIGITS->NUMBER |o| |k|)))
</code></pre>

<p>Tadaaah!</p>

<pre><code>(loop for i from 0 to 99999 ;;careful to enter these correctly
      when (apply (solution-fn \"is it ok\") (number-&gt;digits i)) 
      collect (numbers-&gt;bindings i '(|o| |k| |t| |i| |s|))) ;;note the re-ordered args to match output from `solution-fn`
</code></pre>

<p>Gives you the solution in reasonable time (assuming you don't want to solve for more than 5 digits).</p>

<p>...</p>

<p>That's not very satisfying though, is it. With this solution, we'd need to manually figure out the order of arguments in the final function, and we'd have to enter the correct number of <code>9</code>s for those arguments. Whenever there's an easy-to-miss detail in the code somewhere, I like to make sure it's as hard to miss as possible. The best way to make it hard to miss is to tell the program to take care of these details itself.</p>

<span class=\"quote\">I object to doing things computers can do.<span class=\"sig\">-Olin Shivers</span></span>

<pre><code>(defmacro solve-for (problem-string)
  (let* ((terms (string-&gt;terms problem-string))
     (args (remove-duplicates (apply #'append terms)))
     (nines (parse-integer (coerce (make-list (length args) :initial-element #\\9) 'string))))
    `(loop for i from 0 to ,nines
       when (apply (solution-fn ,problem-string) (number-&gt;digits i))
       collect (numbers-&gt;bindings i ',args))))
</code></pre>

<p>Now, <code>(solve-for \"it is ok\")</code> will give you the answer you need. And it'll work for similar problems. That's not really the solution yet though; the problem asks for \"shortest possible time\", and so far I've been paying for simplicity with increased runtime. I don't trust myself here though; a priori reasoning about efficiency is fine for a first stab at the problem, but when I want to optimize, the profiler is my friend. After turning profiling on for my helper functions in <code>SLIME</code> and running <code>solve-for</code> for <code>\"it is ok\"</code>, <code>\"its not ok\"</code>, <code>\"i am ok\"</code>, <code>\"i am not ok\"</code> and (accidentally) <code>\"it no ok\"</code>, <code>M-x slime-profile-report</code> spits out...</p>

<pre><code>seconds  |     gc     |     consed     |    calls   |  sec/call  |  name

  62.983 |      1.732 | 23,736,407,072 | 11,203,305 |   0.000006 | NUMBER-&gt;DIGITS
  14.780 |      0.092 |  3,777,455,536 | 43,600,000 |  0.0000003 | DIGITS-&gt;NUMBER
   0.037 |      0.004 |     11,936,688 |      3,305 |   0.000011 | NUMBERS-&gt;BINDINGS
   0.000 |      0.000 |         37,008 |          8 |   0.000000 | STRING-&gt;TERMS

  77.800 |      1.828 | 27,525,836,304 | 54,806,618 |            | Total
</code></pre>

<p>So the bottleneck is clearly <code>number-&gt;digits</code> by a pretty wide margin and this really shouldn't come as a shock given how I've been representing digits. Time to change that. <em>This</em> is where I'll resort to some light side-effect. When I get a big, <em>necessary</em> performance boost in return.</p>

<pre><code>(defun number-&gt;digits (num &amp;optional (pad-to 5))
  (let ((temp num)
    (digits nil))
    (loop do (multiple-value-call 
         (lambda (rest d) (setf temp rest digits (cons d digits)))
           (floor temp 10))
          until (= pad-to (length digits)))
    digits))
</code></pre>

<p>And, of course, I need to go back and make sure that the appropriate functions are now expecting a list of integers rather than a list of chars. That ends up very slightly simplifying <code>numbers-&gt;bindings</code></p>

<pre><code>(defun numbers-&gt;bindings (num bindings) 
  (let ((digits (number-&gt;digits num))) (mapcar (lambda (b d) `(,b . ,d)) bindings digits)))
</code></pre>

<p>and complicating <code>digits-&gt;number</code></p>

<pre><code>(defun digits-&gt;number (&amp;rest digits)
  (apply #'+ (loop for d in (reverse digits) for i from 0
           collect (* d (expt 10 i)))))
</code></pre>

<p>Lets see. After <code>solve</code> ing <code>for</code> <code>\"it is ok\"</code>, <code>\"its not ok\"</code>, <code>\"i am ok\"</code>, <code>\"i am not ok\"</code> and (not accidentally this time) <code>\"it no ok\"</code> again:</p>

<pre><code>seconds  |     gc     |     consed    |    calls   |  sec/call  |  name

  10.993 |      0.752 | 7,199,265,488 | 43,900,000 |  0.0000003 | DIGITS-&gt;NUMBER
   5.009 |      0.224 | 1,069,467,616 | 11,304,260 |  0.0000004 | NUMBER-&gt;DIGITS
  0.0003 |      0.000 |       634,880 |      4,260 |  0.0000001 | NUMBERS-&gt;BINDINGS
   0.000 |      0.000 |        48,224 |         10 |   0.000000 | STRING-&gt;TERMS

  16.002 |      0.976 | 8,269,416,208 | 55,208,530 |            | Total
</code></pre>

<p>Which is a pretty drastic improvement to <code>number-&gt;digits</code>. <code>digits-&gt;number</code> is doing worse now though. I'll try out something else. Intuitively, this should be worse, but you never know 'till you try a few million times.</p>

<pre><code>(defun digits-&gt;number (&amp;rest digits) (parse-integer (format nil \"~{~a~}\" digits)))
</code></pre>

<pre><code>seconds  |     gc     |     consed     |    calls   |  sec/call  |  name 

  61.560 |      2.489 | 27,440,408,672 | 43,900,000 |   0.000001 | DIGITS-&gt;NUMBER
   3.973 |      0.004 |         96,832 | 11,304,260 |  0.0000004 | NUMBER-&gt;DIGITS
   0.004 |      0.000 |        593,920 |      4,260 |   0.000001 | NUMBERS-&gt;BINDINGS
   0.000 |      0.000 |         47,232 |         10 |   0.000000 | STRING-&gt;TERMS

  65.537 |      2.493 | 27,441,146,656 | 55,208,530 |            | Total
</code></pre>

<p>Ok, looks like I didn't need the profiler to figure that one out; intuition is sometimes right. I'm reverting to the numeric version, and the only other things I'll test is inlining <code>solution-fn</code> and changing a <code>reverse</code> out for <code>nreverse</code> in <code>digits-&gt;number</code>. It doesn't seem like these will make a <em>huge</em> difference, but it should improve the memory situation by a bit (and <code>digits-&gt;number</code> is hurting on conses). </p>

<pre><code>seconds  |     gc     |     consed    |    calls   |  sec/call  |  name  

   7.627 |      0.400 | 4,363,098,528 | 43,900,000 |  0.0000002 | DIGITS-&gt;NUMBER
   4.388 |      0.160 |   776,123,744 | 11,304,260 |  0.0000004 | NUMBER-&gt;DIGITS
   0.004 |      0.000 |       876,544 |      4,260 |   0.000001 | NUMBERS-&gt;BINDINGS
   0.000 |      0.000 |        21,600 |          5 |   0.000000 | STRING-&gt;TERMS

  12.019 |      0.560 | 5,140,120,416 | 55,208,525 |            | Total
</code></pre>

<p>Not bad. 3 fewer seconds of runtime in exchange for a single lambda inlining and one additional character in a function name. It's actually more drastic, because upon inspection, about 90% of that boost comes from <code>nreverse</code>, so it's not really even worth the in-lining (which costs a lot of readability). At this point, </p>

<pre><code>(progn (solve-for \"it is ok\") 
       (solve-for \"its not ok\") 
       (solve-for \"i am ok\") 
       (solve-for \"i am not ok\") 
       (solve-for \"it no ok\"))
</code></pre>

<p>runs in just under 15 seconds with profiling off (and about a minute with the whole package profiled), which is pretty good by my estimation. If you <em>really</em> wanted to tune performance 

- Firstly, <code>digits->number</code> can do some of its calculations at macroexpansion time (since by that point, we know what number of digits we're expecting in each term, we could create a custom function with the specific arity we need instead of using a <code>&rest</code> argument).

- Secondly, <code>numbers->bindings</code> can be folded into <code>solution-fn</code> (so that it generates a function that returns either a set of bindings, or <code>nil</code>, instead of <code>t</code> or <code>nil</code>). That should save another couple of seconds.

- Thirdly you could spend some time figuring out an algorithmic solution

- Finally you could parallelize this operation. Remember, we're just applying a function to each element of the list of integers between 0 and 99999... Since there are no sequential data dependencies, there's no reason it couldn't be broken up into equal pieces across a server cluster if you wanted to solve \"the quick brown fox jumps over the lazy dog\". 

I think I'll cut it here though. I've already spent about two hours on this article, and that feels like it's more than enough.

By the by, I'm experimenting with a markdown converter this time (instead of using my usual <span class=\"code inline\">blog-mode</span>). Some assembly has been required in a couple of places (mainly that paste of the problem, and the profiler reports), but I might try again next time, with this in mind. I'm finding the lack of code highlighting and proper formatting annoying, frankly, so I'm not sure if I'll be giving it another whirl.</p>
"))
((5202 3723 548402000) :INSERT (39 :POSTED 3508808400))
((5202 3723 548406000) :INSERT (39 :TAG :COMMON-LISP))
((5202 3723 549074000) :INSERT (40 :TITLE "Javascript with a Lisp"))
((5202 3723 549089000) :INSERT (40 :FILE "javascript-with-a-lisp.html"))
((5202 3723 549092000) :INSERT (40 :EDITED 3610300182))
((5202 3723 549094000) :INSERT
 (40 :BODY
  "<p>Obviously, I'm not a vet yet, so take these musings on <a href=\"http://common-lisp.net/project/parenscript/\">Parenscript</a> with a grain of salt. Also, feel free to look up the <a href=\"http://common-lisp.net/project/parenscript/tutorial.html\">tutorial</a> they provide for a more hands-on approach; I'm just talking about my experience with it, not attempting to teach it.</p>

<p>There are some ugly, un-abstractable patterns in JavaScript code (which you'll be familiar with if you've ever done more than a tiny bit of jQuery development). They show up often, and you can't really do much about them in JS without resorting to <span class=\"code inline\">eval</span>. Which you shouldn't do. Parenscript knocks most of them out cold. The argument about jQuery being Good Enough™ also turns out to be moot, since you can easily compose work in both (that is, include jQuery and use Parenscript to generate framework code rather than plain JavaScript). I've created exactly three JS files with this so far, and here are some macros that I'm not sure I'd be willing to do without (I'll start small).</p>

<pre>(defpsmacro $ (selector <span style=\"color: #a0522d;\">&amp;body</span> chains)
  `(chain (j-query ,selector)
          ,@chains))
</pre>

<p>That's the pretty essential one I mentioned <a href=\"/article?name=parenscript.html\">last time</a>; it just lets you do things like</p>

<pre>($ <span style=\"color: #8b2252;\">\".target-div\"</span> 
     (css (create :height 30 :background-color <span style=\"color: #8b2252;\">\"#f00\"</span>)) 
     (effect <span style=\"color: #8b2252;\">\"explode\"</span> 3000))
</pre>

<p>it's just keeping pace with jQuery. Next up </p>

<pre>(defpsmacro \\ (<span style=\"color: #a0522d;\">&amp;body</span> body) `(lambda () ,@body))
</pre>

<p>I... honestly wasn't expecting to use this. I'm borrowing <a href=\"http://www.haskell.org/haskellwiki/Haskell\">Haskell</a>'s anonymous function notation for brevity, but only because there's no actual λ key on my keyboard. This is something you don't even notice while coding in JavaScript. You just get used to having to wrap various random things in <span class=\"code inline\">function () { ... }</span>. It never occurs how annoying this is until you get the chance to do away with it.</p>

<pre>(defpsmacro doc-ready (<span style=\"color: #a0522d;\">&amp;body</span> body)
  `($ document
      (ready (\\ ,@body))))
</pre>

<p>Told you <span class=\"code inline\">\\</span> would come in handy (and this is one of the about twenty places it shows up in a 70-line parenscript file). This isn't particularly interesting; just shortcut notation for <span class=\"code inline\">$(document).ready(function () { ... });</span>.</p>

<pre>(defpsmacro defpsajax (name (<span style=\"color: #228b22;\">&amp;rest</span> args) url <span style=\"color: #228b22;\">&amp;optional</span> (success '(<span style=\"color: #a020f0;\">lambda</span> (data) ($d data))))
  `(<span style=\"color: #a020f0;\">defun</span> ,name ,args
     (chain $ (ajax (create <span style=\"color: #7a378b;\">:url</span> ,url
       <span style=\"color: #7a378b;\">:data</span> (create ,@(<span style=\"color: #a020f0;\">loop</span> for a in args collect (intern (to-str a) <span style=\"color: #7a378b;\">:keyword</span>) collect a))
       <span style=\"color: #7a378b;\">:context</span> (@ document body)
       <span style=\"color: #7a378b;\">:type</span> <span style=\"color: #8b2252;\">\"POST\"</span>
       <span style=\"color: #7a378b;\">:success</span> ,success
       <span style=\"color: #7a378b;\">:error</span> (<span style=\"color: #a020f0;\">lambda</span> (a b error) ($d a b error)))))))
</pre>

<p>An odd note; I have to quote the default optional function (as above), but I must pass unquoted lambdas in, otherwise it barfs. This one's a bit heavier. It's a shortcut for defining ajax functions. This is the sort of thing you just plain can't do in vanilla javascript. You'd have to define it as</p>

<pre><span style=\"color: #a020f0;\">function</span> <span style=\"color: #0000ff;\">defPsAjax</span>(<span style=\"color: #2e8b57;\">address</span>, <span style=\"color: #2e8b57;\">dataSet</span>, <span style=\"color: #2e8b57;\">fn</span>) {
    <span style=\"color: #a020f0;\">if</span>(!fn) <span style=\"color: #0000ff;\">fn</span> = <span style=\"color: #a020f0;\">function</span> (<span style=\"color: #2e8b57;\">data</span>) {$d(data);};
    $.ajax({ <span style=\"color: #a0522d;\">url</span>: address,
             <span style=\"color: #a0522d;\">type</span>: <span style=\"color: #8b2252;\">'post'</span>,
             <span style=\"color: #a0522d;\">data</span>: dataSet,
             <span style=\"color: #a0522d;\">success</span>: fn,
             <span style=\"color: #0000ff;\">error</span>: <span style=\"color: #a020f0;\">function</span> (<span style=\"color: #2e8b57;\">a</span>, <span style=\"color: #2e8b57;\">b</span>, <span style=\"color: #2e8b57;\">error</span>) {$d(a, b, error);}
           });
}</pre>

<p>and then use it by doing something like</p>

<pre><span style=\"color: #a020f0;\">function</span> <span style=\"color: #0000ff;\">foo</span>(<span style=\"color: #2e8b57;\">bar</span>) {
    defPsAjax(<span style=\"color: #8b2252;\">\"/url\"</span>, { <span style=\"color: #a0522d;\">\"bar\"</span>: bar }, <span style=\"color: #a020f0;\">function</span> (<span style=\"color: #2e8b57;\">data</span>) { <span style=\"text-decoration: underline;\">baz;</span> }); 
}</pre>

<p>instead of being able to</p>

<pre>(defpsajax foo (bar) <span style=\"color: #8b2252;\">\"/url\"</span> (lambda (data) baz))
</pre>

<p>I have two problems with that. First, it doesn't kill the boilerplate around defining foo (which you don't have to deal with if you use the macro). Second, that shorter macro definition expands into a full <span class=\"code inline\">$.ajax</span> call, which means there's no additional overhead from <span class=\"code inline\">foo</span> calling <span class=\"code inline\">defPsAjax</span> at runtime. Together, those problems prevent you from properly expressing things in vanilla jQuery; you'll incur (significant) readability and (probably trivial) performance penalties by creating enough intermediate functions. Neither penalty piles up if you use <span class=\"code inline\">defpsmacro</span>.</p>

<p>There are also a few nice things I get for free (rather than having to define them). As I mentioned <a href=\"/article?name=parenscript.html\">last time</a>, having <span class=\"code inline\">who-ps-html</span> (for easy HTML generation with javascript) and <span class=\"code inline\">format</span> (for string templating) was already enough to tempt me into using parenscript. Putting strings together in js is fugly. I'm aware of the hacks, and they're not nearly as satisfying as just having a proper string-formatting primitive available in the language. Trying the same tactic with strings which contain HTML tags crosses over into <a href=\"http://marketthoughtsandanalysis.blogspot.com/2010/05/ugly-ugly.html\">pug fugly</a> territory without so much as a warning. Even if you absolutely must concatenate strings at runtime, <span class=\"code inline\">(+ foo \", \" bar \" || \" baz)</span> is still easier than <span class=\"code inline\">foo + \", \" + bar + \" || \" + baz</span>. There's a couple of other similarly useful things that you don't see until you work with them. <span class=\"code inline\">let</span> and <span class=\"code inline\">let*</span> are both supported, for starters. <span class=\"code inline\">let*</span> is actually pretty straightforward</p>

<Pre>(<span style=\"color: #a020f0;\">let*</span> ((a 2)
       (b (+ 2 a)))
    (foo a b))
</pre>

<p>expands into</p>

<pre><span style=\"color: #a020f0;\">var</span> <span style=\"color: #a0522d;\">a</span> = 2;
<span style=\"color: #a020f0;\">var</span> <span style=\"color: #a0522d;\">b</span> = 2 + a;
foo(a, b);</pre>

<p>but the equivalent <span class=\"code inline\">let</span> maintains the limitation that declarations don't refer to each other.</p>

<pre><span style=\"color: #a020f0;\">var</span> <span style=\"color: #a0522d;\">a1</span> = 2;
<span style=\"color: #a020f0;\">var</span> <span style=\"color: #a0522d;\">b</span> = 2 + a;
foo(a1, b);</pre>

<p>That might be problematic if you're the sort of person who names variables with numbers at the end. I'm not, so I'll take it.</p>

<p>Another free advantage is optional arguments and implicit returns.</p>

<pre>(defun foo (bar <span style=\"color: #a0522d;\">&amp;optional</span> (baz <span style=\"color: #8b2252;\">\"mumble\"</span>)) baz)
</pre>

<p>expands into the javascript</p>

<pre><span style=\"color: #a020f0;\">function</span> <span style=\"color: #0000ff;\">foo</span> (<span style=\"color: #2e8b57;\">bar</span>, <span style=\"color: #2e8b57;\">baz</span>)<span style=\"color: #ff0000;\">{</span>
    <span style=\"color: #a020f0;\">if</span>(baz === <span style=\"color: #008b8b;\">undefined</span>) {
       baz = <span style=\"color: #8b2252;\">\"mumble\"</span>;
    }
    <span style=\"color: #a020f0;\">return</span> baz;
}</pre>

<p>That's it for the good stuff I've discovered so far (although if you don't agree that macros, easy html formatting, real optional arguments and implicit return are a pretty big pile of win, <a href=\"http://en.wikipedia.org/wiki/Jeff_Foxworthy\">you might be a JavaScript programmer</a><a href=\"#onparenscriptf1\" name=\"onparenscriptn1\">[1]</a>). </p>

<p>Lets talk about where Parenscript can bite you in the ass.</p>

<p>First, avoid it if you're a lisp newb. There are <span style=\"font-weight: bold;\">a lot</span> of parentheses running around when you write your javascript code this way, and just one can make the difference between <span class=\"code inline\">$(foo).bar({'a': b});</span> and <span class=\"code inline\">$(foo).bar.create('a', b);</span>. The real downfall here is that, unlike in plain Common Lisp, it won't throw an error about unbalanced parentheses (if you don't have enough parentheses, it'll still tell you, but it won't give you the typical \"expecting [n] args\" error if you transpose one). Instead of erroring, it will generate incorrect JS code. This is actually a good argument for using macro-heavy parenscript code because the fewer actual expressions you have to type, the less chance there is that you mistype one. Use your macroexpander and <span class=\"code inline\">show-paren-mode</span> aggressively.</p>

<p>Second, the <span class=\"code inline\">chain</span> macro has some fairly odd behaviour with other macros, and it keeps you from abstracting certain patterns without resorting to <span class=\"code inline\">ps*</span> instead of <span class=\"code inline\">ps</span>. For instance</p>

<pre>(defpsmacro highlight (<span style=\"color: #a0522d;\">&amp;optional</span> (color <span style=\"color: #8b2252;\">\"\\#0f0\"</span>))
  `(effect <span style=\"color: #8b2252;\">\"highlight\"</span> (create :color ,color) 500))
</pre>

<p>Having defined that, I would expect <span class=\"code inline\">(ps ($ \"foo\" (highlight)))</span> to expand into <span class=\"code inline\">$(<span style=\"color: #8b2252;\">\"foo\"</span>).effect('highlight', { 'color': '#0f0' }, 500);</span>, but it actually does <span class=\"code inline\">$(<span style=\"color: #8b2252;\">\"foo\"</span>).highlight();</span>. If I wanted to get that first expansion, I'd have to define highlight as </p>

<pre>(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">highlight</span> (<span style=\"color: #228b22;\">&amp;optional</span> (color <span style=\"color: #8b2252;\">\"\\#0f0\"</span>))
  `(effect <span style=\"color: #8b2252;\">\"highlight\"</span> (create <span style=\"color: #7a378b;\">:color</span> ,color) 500))
</pre>

<p>and call it by doing <span class=\"code inline\">(ps* `($ <span style=\"color: #8b2252;\">\"foo\"</span> ,(highlight)))</span>. That's not actually <span style=\"font-weight: bold;\">horrible</span> (we're only into regular fugly here) but it prevents you from fully using your macroexpander, does no work at macroexpansion time and requires you to quote your input. Manageable, but still a net loss.</p>

<p>The last part is that your javascript definitions share the Lisp namespace. Which makes sense, since one of the goals of Parenscript is to have js and CL interoprerate at some level, but it still caught me slightly by surprise. What I mean specifically is</p>

<pre>(ps (defun foo () bar))</pre>

<p>In addition to expanding out to <span class=\"code inline\"><span style=\"color: #a020f0;\">function</span> <span style=\"color: #0000ff;\">foo</span> () { <span style=\"color: #a020f0;\">return</span> bar; }</span>, it also defines a Lisp function in the current package called <span class=\"code inline\">foo</span>. The reason I found this out is that I have a habit of giving JS ajax functions the same name as the functions they'll be interacting with on the server side. Don't do that. I spent a good 15 minutes trying to debug a very odd <span class=\"code inline\">wrong number of arguments</span> error before realizing that I was accidentally shadowing the function I needed to call.</p>

<p>As a final note, and this should really go without saying, parenscript is <span style=\"font-weight: bold;\">not</span> a way to avoid learning JavaScript or jQuery (or your framework of choice). It's a way to simplify development work with them <span style=\"font-weight: bold;\">after</span> you know them cold and have more than a few hours logged with Common Lisp. Use it properly and it'll serve you well, go in with a broken/incomplete understanding of JavaScript at your own peril.</p>

<hr />

<p>1 - <a href=\"#onparenscriptn1\" name=\"onparenscriptf1\">[back]</a> I'm putting this footnote here because I don't want that comment to sound bigoted. I make a distinction between \"someone who knows JavaScript\" (a programmer who, among other languages, also uses JavaScript) and \"JavaScript programmer\" (someone who knows only JavaScript and is zealously convinced it's Good Enough™). I have nothing against the first group. I have the same contempt for the second group that I reserve for all [x] programmers, whether [x] is JavaScript, C, Java, Basic, C#, Haskell or Lisp.</p>
     "))
((5202 3723 549220000) :INSERT (40 :POSTED 3509841600))
((5202 3723 549222000) :INSERT (40 :TAG :CLIENT-SIDE))
((5202 3723 549225000) :INSERT (40 :TAG :COMMON-LISP))
((5202 3723 549227000) :INSERT (40 :TAG :PARENSCRIPT))
((5202 3723 549581000) :INSERT (41 :TITLE "A Little Bit of Elisp"))
((5202 3723 549587000) :INSERT (41 :FILE "a-little-bit-of-elisp.html"))
((5202 3723 549595000) :INSERT (41 :EDITED 3610301059))
((5202 3723 549597000) :INSERT
 (41 :BODY
  "<p>I've had too much Common Lisp coding at work this week. I basically did two 12 hour sessions across Wednesday and Thursday, then a 4 hour on Friday with a little time off for fighting PHP-related fires and a bit of sleep. So today, I took a break. And what did I do on my break, you might ask? </p>

<p>I hacked Emacs Lisp.</p>

<p>I tell ya, my fiancee loves me. That's right. I took a break from my Common Lisp day-job by getting up on Saturday and dusting off some old Elisp code I had lying around. I touched up some <code>git-mode</code> customizations, an <a href=\"http://codereview.stackexchange.com/questions/45/emacs-etags-shortcut-functions\">etags library</a> I sometimes use, and my <code>.emacs</code> itself, but my main target was the <code>blog-mode</code> module (which I've actually been using to write these articles, except for <a href=\"/article?name=cryptoarithmetic.html\">one awkward brush with a markdown converter</a>). It has served, but the code was far from elegant, and there were a couple of features I've been meaning to add, but never quite got around to, always telling myself to just get through the blog post instead. The code is <b>still</b> far from elegant, so I won't talk about that, but the features are there. </p>

<p>First thing, and probably the most pressing, is that those nice highlighted code-blocks were getting annoying. It would work fine for plain gray text (which I use sometimes, in small inline snippets), but to do it properly, I had to paste code into a separate buffer, turn on the correct highighting mode, run htmlize-buffer on it, then paste it back into the blog post and maybe tweak it for good measure. I figured that my ideal interaction would be the code auto-detecting what language I'm using and highighting correctly, but one step back would be asking for a highlighting mode and applying it to the code I wanted to htmlize. So here's how that looks</p>

<pre><span style=\"color: #b22222;\">;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; </span><span style=\"color: #b22222;\">&lt;pre&gt; and &lt;code&gt; definitions
</span>(definsert code-block <span style=\"color: #8b2252;\">\"&lt;pre&gt;\"</span> <span style=\"color: #8b2252;\">\"&lt;/pre&gt;\"</span>)
(definsert inline-code <span style=\"color: #8b2252;\">\"&lt;code&gt;\"</span> <span style=\"color: #8b2252;\">\"&lt;/code&gt;\"</span>)

<span style=\"color: #b22222;\">;; </span><span style=\"color: #b22222;\">region versions are more complicated to accomodate htmlize
</span>(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">region-to-inline-code</span> (code-mode)
  <span style=\"color: #8b2252;\">\"HTMLize just the current region and wrap it in a &lt;code&gt; block\"</span>
  (interactive <span style=\"color: #8b2252;\">\"CMode name: \"</span>)
  (<span style=\"color: #a020f0;\">let*</span> ((start (region-beginning))
         (end (region-end))
         (htmlified (get-htmlified-region start end code-mode)))
    (delete-region start end)
    (insert-inline-code)
    (insert htmlified)))

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">region-to-code-block</span> (code-mode)
  <span style=\"color: #8b2252;\">\"HTMLize the current region and wrap it in a &lt;pre&gt; block\"</span>
  (interactive <span style=\"color: #8b2252;\">\"CMode name: \"</span>)
  (<span style=\"color: #a020f0;\">let*</span> ((start (region-beginning))
         (end (region-end))
         (result (get-htmlified-region start end code-mode)))
    (delete-region start end)
    (insert-code-block)
    (insert result)))

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">get-htmlified-region</span> (start end code-mode)
  <span style=\"color: #8b2252;\">\"Returns a string of the current region HTMLized with highlighting according to code-mode\"</span>
  (<span style=\"color: #a020f0;\">let</span> ((htmlified nil))
    (clipboard-kill-ring-save start end)
    (get-buffer-create <span style=\"color: #8b2252;\">\"*blog-mode-temp*\"</span>) <span style=\"color: #b22222;\">;;</span><span style=\"color: #b22222;\">using 'with-temp-buffer here doesn't apply correct higlighting
</span>    (<span style=\"color: #a020f0;\">with-current-buffer</span> <span style=\"color: #8b2252;\">\"*blog-mode-temp*\"</span>
      (funcall code-mode)
      (clipboard-yank)
      (setq htmlified (substring (htmlize-region-for-paste (point-min) (point-max)) 6 -6)))
    (kill-buffer <span style=\"color: #8b2252;\">\"*blog-mode-temp*\"</span>)
    htmlified))</pre>

<p>I pasted that block in from my code file, highlighted it, then typed <code>C-c C-p emacs-lisp-mode [ret]</code>, in case you were wondering. The result was that pretty block above. <code>region-to-code-block</code> and <code>region-to-inline-code</code> are actually the same function except for which insert they use, and I <b>would</b> factor that out if it ever got to the point that there needed to be a third function doing the same, but it doesn't seem worth it for just two functions.</p>

<span class=\"edit\">EDIT:

<p>Ok, ok goddammit. Here. They're simplified now.</p>

<pre>(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">region-to-inline-code</span> (code-mode)
  <span style=\"color: #8b2252;\">\"HTMLize just the current region and wrap it in a &lt;code&gt; block\"</span>
  (interactive <span style=\"color: #8b2252;\">\"CMode name: \"</span>)
  (htmlized-region code-mode #'insert-inline-code))

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">region-to-code-block</span> (code-mode)
  <span style=\"color: #8b2252;\">\"HTMLize the current region and wrap it in a &lt;pre&gt; block\"</span>
  (interactive <span style=\"color: #8b2252;\">\"CMode name: \"</span>)
  (htmlized-region code-mode #'insert-code-block))

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">htmlized-region</span> (code-mode insert-fn)
  (<span style=\"color: #a020f0;\">let*</span> ((start (region-beginning))
         (end (region-end))
         (result (get-htmlified-region start end code-mode)))
    (delete-region start end)
    (funcall insert-fn)
    (insert result)))</pre>
Sun, 27 Mar, 2011</span>

<p>I uh, also put in an edit block function and a footnote manager<a href=\"#foot-Sun-Mar-27-013129EDT-2011\" name=\"note-Sun-Mar-27-013129EDT-2011\">[1]</a>. The edit blocks are pretty self-explanatory; just a block with a date at the bottom to indicate when I did the thing. After a couple of definition macros<a href=\"#foot-Sun-Mar-27-013353EDT-2011\" name=\"note-Sun-Mar-27-013353EDT-2011\">[2]</a>, it's actually a one-liner.</p>

<pre>(deftag edit <span style=\"color: #8b2252;\">\"&lt;span class=\\\"edit\\\"&gt;EDIT:\\n\\n\"</span> (concat <span style=\"color: #8b2252;\">\"\\n\"</span> (format-time-string <span style=\"color: #8b2252;\">\"%a, %d %b, %Y\"</span> (current-time)) <span style=\"color: #8b2252;\">\"&lt;/span&gt;\"</span>))</pre>

<p>The footnote manager is a bit more complex. I've actually been doing them manually for the last little while, which started to get frustrating<a href=\"#foot-Sun-Mar-27-013612EDT-2011\" name=\"note-Sun-Mar-27-013612EDT-2011\">[3]</a>. The process was to put a numbered tag down with <code>&lt;<span style=\"color: #0000ff;\">a</span> <span style=\"color: #a0522d;\">name</span>=<span style=\"color: #8b2252;\">\"somethingHopefullyUnique\"</span>&gt;</code>, and hook it up to a correspondingly numbered [back] link at the bottom of the page, then write the footnote, then find my way back. The linking turns out to be the hardest part there, because these posts potentially get displayed together on my blog, so I had to be very careful to make the name unique across the entire blogs' history, not just within that article<a href=\"#foot-Sun-Mar-27-014303EDT-2011\" name=\"note-Sun-Mar-27-014303EDT-2011\">[4]</a>. With this new function, instead it's <code>C-c f</code> to insert a fresh footnote, or <code>C-c C-f</code> to convert the selected region to a footnote. The links are generated and numbered automatically, so all I have to do is actually write the footnote<a href=\"#foot-Sun-Mar-27-014111EDT-2011\" name=\"note-Sun-Mar-27-014111EDT-2011\">[5]</a>.</p>

<pre><span style=\"color: #b22222;\">;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; </span><span style=\"color: #b22222;\">footnote definitions
</span>(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">insert-footnote</span> ()
  <span style=\"color: #8b2252;\">\"Inserts footnote, and a return link at the bottom of the file. 
   Moves point to footnote location.\"</span>
  (interactive)
  (<span style=\"color: #a020f0;\">progn</span> (footnotes-header)
         (<span style=\"color: #a020f0;\">let</span> ((footnote-name (format-time-string <span style=\"color: #8b2252;\">\"%a-%b-%d-%H%M%S%Z-%Y\"</span> (current-time)))
               (num (number-to-string (+ 1 (count-footnotes)))))
           (insert <span style=\"color: #8b2252;\">\"&lt;a href=\\\"#foot-\"</span> footnote-name <span style=\"color: #8b2252;\">\"\\\" name=\\\"note-\"</span> footnote-name <span style=\"color: #8b2252;\">\"\\\"&gt;[\"</span> num <span style=\"color: #8b2252;\">\"]&lt;/a&gt;\"</span>)
           (goto-char (point-max))
           (insert <span style=\"color: #8b2252;\">\"\\n\\n\"</span> num <span style=\"color: #8b2252;\">\" - &lt;a href=\\\"#note-\"</span> footnote-name <span style=\"color: #8b2252;\">\"\\\" name=\\\"foot-\"</span> footnote-name <span style=\"color: #8b2252;\">\"\\\"&gt;[back]&lt;/a&gt; - \"</span>))))

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">region-to-footnote</span> ()
  <span style=\"color: #8b2252;\">\"Inserts a footnote at point and return link at the bottom. Moves the current region to the end of the file. 
   Leaves point where it is.\"</span>
  (interactive)
  (<span style=\"color: #a020f0;\">save-excursion</span> (kill-region (region-beginning) (region-end))
         (insert-footnote)
         (yank)))

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">footnotes-header</span> ()
  <span style=\"color: #8b2252;\">\"Inserts footnote header if not already present\"</span>
  (<span style=\"color: #a020f0;\">unless</span> (<span style=\"color: #a020f0;\">save-excursion</span> (search-forward blog-footnote-header nil t))
    (<span style=\"color: #a020f0;\">save-excursion</span> 
      (goto-char (point-max))
      (insert <span style=\"color: #8b2252;\">\"\\n\\n\"</span> blog-footnote-header))))

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">count-footnotes</span> ()
  <span style=\"color: #8b2252;\">\"Returns the number of footnotes in the current file. Used for human-readable note labels\"</span>
  (interactive)
  (<span style=\"color: #a020f0;\">save-excursion</span>
    (<span style=\"color: #a020f0;\">if</span> (not (search-forward blog-footnote-header nil t))
        0
      (<span style=\"color: #a020f0;\">let</span> ((count -1))
        (<span style=\"color: #a020f0;\">while</span> (<span style=\"color: #a020f0;\">progn</span> (setq count (1+ count))
                      (search-forward <span style=\"color: #8b2252;\">\"&lt;a href=\\\"#note-\"</span> nil t)))
        count))))</pre>

<p>Boy, that's playing hell with the highlighting right now. It's fairly self-explanatory; <code>count-footnotes</code> counts up how many footnotes I have left, <code>footnotes-header</code> checks if there's a footnote header in the post already<a href=\"#foot-Sun-Mar-27-014807EDT-2011\" name=\"note-Sun-Mar-27-014807EDT-2011\">[6]</a>, <code>insert-footnote</code> just creates a new footnote/backlink and takes me to the bottom of the page to write it, and finally, <code>region-to-footnote</code> takes the current region and converts it to a new footnote (leaving the point where it is).</p>

<p>Even though it's a simple, and specific<a href=\"#foot-Sun-Mar-27-015109EDT-2011\" name=\"note-Sun-Mar-27-015109EDT-2011\">[7]</a> piece of code, I still learned a lot by testing it out like this. Specifically, the code formatting functions need to accept <code>nil</code> as an argument<a href=\"#foot-Sun-Mar-27-015300EDT-2011\" name=\"note-Sun-Mar-27-015300EDT-2011\">[8]</a> (which should take 5 minutes), and the footnote section needs a way to re-number footnotes and jump between corresponding note/back links (which seems like it could take a while).</p>

<p>I'm going to sleep now though; I'll leave those features for the next time I need a break from Common Lisp.</p>

<span class=\"edit\">EDIT:

<p>Ok, so it was actually slightly less than 5 minutes to get the code argument done; one line change did it (see if you can guess which one)</p>

<pre>(<span style=\"color: #a020f0;\">when</span> (fboundp code-mode) (funcall code-mode))</pre>

<p>The latest is now up <a href=\"https://github.com/Inaimathi/emacs-utils\">at github</a>.</p>
Sun, 27 Mar, 2011</span>

<hr />
<h5>Footnotes</h5>

<p>1 - <a href=\"#note-Sun-Mar-27-013129EDT-2011\" name=\"foot-Sun-Mar-27-013129EDT-2011\">[back]</a> - And yes, since you ask, I am basically using this post as a way to test the editing mode I'm talking about.</p>
<p>2 - <a href=\"#note-Sun-Mar-27-013353EDT-2011\" name=\"foot-Sun-Mar-27-013353EDT-2011\">[back]</a> - If you want to see the definition macros, check out <a href=\"https://github.com/Inaimathi/emacs-utils\">the github page</a> I started for my little utility files. The documentation is extremely light, but it's only because I fully expect to be the only one using these.</p>
<p>3 - <a href=\"#note-Sun-Mar-27-013612EDT-2011\" name=\"foot-Sun-Mar-27-013612EDT-2011\">[back]</a> - To the point that I would frequently include a long, rambling paranthetical comment instead of putting the damned thought in a footnote, where it belongs. Interface difficulties really do lead to a lot of shoddy work, it seems.</p>
<p>4 - <a href=\"#note-Sun-Mar-27-014303EDT-2011\" name=\"foot-Sun-Mar-27-014303EDT-2011\">[back]</a> - The way I'd been doing that was by using the article name and a number in the <code>href</code> and <code>name</code> parameters. The mode is actually better, using a date and timestamp.</p>
<p>5 - <a href=\"#note-Sun-Mar-27-014111EDT-2011\" name=\"foot-Sun-Mar-27-014111EDT-2011\">[back]</a> - I still haven't found a way to automate writing these columns, but that's not the same as saying it can't be done.</p>
<p>6 - <a href=\"#note-Sun-Mar-27-014807EDT-2011\" name=\"foot-Sun-Mar-27-014807EDT-2011\">[back]</a> - And adds one if it doesn't exist yet.</p>
<p>7 - <a href=\"#note-Sun-Mar-27-015109EDT-2011\" name=\"foot-Sun-Mar-27-015109EDT-2011\">[back]</a> - Which is to say, it had a very specific goal in mind.</p>
<p>8 - <a href=\"#note-Sun-Mar-27-015300EDT-2011\" name=\"foot-Sun-Mar-27-015300EDT-2011\">[back]</a> - (and default to <code>fundamental-mode</code> in that case)</p>
"))
((5202 3723 549728000) :INSERT (41 :POSTED 3510100800))
((5202 3723 549730000) :INSERT (41 :TAG :ELISP))
((5202 3723 550045000) :INSERT (42 :TITLE "Switching"))
((5202 3723 550055000) :INSERT (42 :FILE "on-switching.html"))
((5202 3723 550060000) :INSERT (42 :EDITED 3610022331))
((5202 3723 550064000) :INSERT
 (42 :BODY
  "<p>This won't be a long entry, but I still have to get it down out of my head before long.</p>

<p>I had this 24 inch iMac around for a few years. Got it back when 2GB of ram was a lot and a 2.4 Ghz single core was blazingly fast. Played around with it for a while and it served well for various design tasks. When I switched gears to more development than design a couple of years ago, I also put together a modest Linux machine. It actually started out with worse specs than the Mac. A much smaller hard drive, 1GB of ram and I forget how fast the processor was. Definitely not very; I remember getting the cheapest AMD I could find. It could grow though. I've always liked tinkering and building machines, but having used Macs through my university years made me forget how much fun it was for a little while. Before long, I was tuning and tweaking again. A slightly better processor here, a bit more ram there. Eventually, SSDs got cheap enough that I could afford a small one. The Linux machine began to rival, and eventually surpass the shiny giant.</p>

<p>I kept the Mac as a design machine, just to run Photoshop/Illustrator and (occasionally) Flash. After about half a year of this, I realized that my time was spent primarily in Emacs on the Linux machine and secondarily in a browser/terminal (on either machine). The miniscule remainder was actually using Photoshop/Illustrator. I had also taken up GIMP for smaller jobs, just so I wouldn't have to switch back and forth between computers. It became obvious that as shiny as it was, the Apple desktop wasn't doing much for me, so I gave it to my fiancee. She fell in love with it, not that she would admit that as a former Windows user. And I mean \"user\" in the sense of \"end user\". A computer is a tool that lets her do the stuff she's really interested in. She doesn't care how it functions on the inside, as long as it does what she wants it to. In any case, she got quite comfortable with the Apple setup in short order.</p>

<p>Well, earlier today, the Mac died.</p>

<p>She was doing something random with her Kindle when it shut down randomly. It wouldn't come back up, or respond to any of the start-up keys, and it wouldn't boot from its installation DVD either. So we were staring down the OS X equivalent of the blue screen of death. The problem potentially wasn't as simple as the hard drive getting borked. Given that <a href=\"http://news.cnet.com/8301-13506_3-10210484-17.html\">the mere process of replacing a hard drive</a> for one of these units involved supplies we'd have to go shopping for, she decided she'd just switch<a href=\"#foot-Sun-Apr-10-001631EDT-2011\" name=\"note-Sun-Apr-10-001631EDT-2011\">[1]</a>. She wouldn't go back to Windows, so I got her onto Ubuntu without much convincing.</p>

<p>Ok, that was the background. Here's the story.</p>

<p>I mentioned being a graphic designer. Actually that should probably say \"Graphic Designer\" because I have the degree to back up those capitals. So when I say that I underestimated the importance of UI on the decision making of end-users, understand the implications.</p>

<p>She was intensely disappointed by pretty much everything she's seen of other Linux machines, so I more or less gave up on turning this into a house that respects the four freedoms <a href=\"#foot-Sun-Apr-10-001905EDT-2011\" name=\"note-Sun-Apr-10-001905EDT-2011\">[2]</a>. The thing that ended up placating her is, and I shit you not, <a href=\"http://glx-dock.org/\"><code>cairo-dock</code></a> set to auto-start at login with the spaces widget removed and the trash icon enabled. OpenOffice is close enough to MS Word for the stuff she does, Rhythmbox syncs with her iPod and her <a href=\"http://www.google.com/chrome/?brand=CHMB&utm_campaign=en&utm_source=en-ha-na-us-sk&utm_medium=ha\">browser of choice</a> is available. She still wants Photoshop, so I may need to resort to some VirtualBox shenanigans, but I'm hoping to get her using GIMP instead. Those are nitpicks though. It turns out that dock and the iPod syncing were the deal-breakers.</p>

<p>This isn't meant to be funny, by the way. It's here to serve as a reminder of how small a change it takes for an end user to willingly switch.</p>

<hr />
<h5>Footnotes</h5>

<p>1 - <a href=\"#note-Sun-Apr-10-001631EDT-2011\" name=\"foot-Sun-Apr-10-001631EDT-2011\">[back]</a> - I've got some extra supplies lying around. Nothing terribly impressive, but still enough to put together a half-way decent backup machine together in an hour or so if I need to.</p>

<p>2 - <a href=\"#note-Sun-Apr-10-001905EDT-2011\" name=\"foot-Sun-Apr-10-001905EDT-2011\">[back]</a> - It's still not incidentally. As I said, she owns a Kindle, and an iPod from a while back, but our desktops are now all open source software and commodity hardware.</p>
"))
((5202 3723 550127000) :INSERT (42 :POSTED 3511310400))
((5202 3723 550132000) :INSERT (42 :TAG :HARDWARE))
((5202 3723 550136000) :INSERT (42 :TAG :IDEA-PEELING))
((5202 3723 550142000) :INSERT (42 :TAG :PROGRAMMING-ENVIRONMENT))
((5202 3723 550153000) :INSERT (42 :TAG :PROGRAMMING-INTERFACES))
((5202 3723 550157000) :INSERT (42 :TAG :SPECULATION))
((5202 3723 551355000) :INSERT (43 :TITLE "Writing Less C in Lisp"))
((5202 3723 551363000) :INSERT (43 :FILE "less-c-in-lisp.html"))
((5202 3723 551365000) :INSERT (43 :EDITED 3610311467))
((5202 3723 551367000) :INSERT
 (43 :BODY
  "<p>It seems that I only ever get around to working on this pet project when I'm sick (which I was earlier this week). It's taken almost 5 months at this point, but the <code>hours</code> counter is really closer to ~15, which means that I could have done the work during a single, particularly slow, weekend.</p>

<p>Anyway, moving on, I've been plaing around with the codebase for Elite for Emacs (and there's <a href=\"/article?name=writing-c-in-lisp.html\">a post around here somewhere</a> that details some of the blunders  it contains). Today, I'm dealing with the next level up; not pointing out where primitives are being misused, but pointing out needless patterns where they don't belong and showing one way of composing them properly. Actually, now that I look at it, I'd better take a single pattern out and deconstruct it lest I bore the ever-living shit out of everyone, including me. I'm also not eliding anything this time, this is going to deal with specifics from the <a href=\"http://members.fortunecity.com/salkosuo/elite-for-emacs/0.10.0/index.html\">Elite for Emacs 0.1</a> codebase and how I'm thinking about re-implementing them.</p>

<h3>Describing Things</h3>

<p>Actually, before I get to that one,</p>

<h3>Random Numbers</h3>

<p>At a cursory examination, <code>elite-for-emacs-*.el</code> contains <code>myrand</code>, <code>randbyte</code>, <code>rand1</code> <b>and</b> <code>gen_rnd_number</code> (and no uses of the the built-in <code>rand</code> function). They may or may not do similar things. The author also insists on tracking his own random number seed in a global variable (and re-generating it with a function named <code>mysrand</code>). Here's a sample</p>

<pre>(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">gen_rnd_number</span> ()
  (<span style=\"color: #a020f0;\">let</span> ((a)
        (x))        
    (setq x (logand (* (fastseedtype-a rnd_seed) 2) #xFF))<span style=\"color: #b22222;\">;</span><span style=\"color: #b22222;\">
</span>    (setq a (+ x (fastseedtype-c rnd_seed)))
    (<span style=\"color: #a020f0;\">if</span> (&gt; (fastseedtype-a rnd_seed) 127)
        (setq a (1+ a)))
    (setf (fastseedtype-a rnd_seed) (logand a #xFF))
    (setf (fastseedtype-c rnd_seed) x)
    (setq a (/ a 256))<span style=\"color: #b22222;\">;</span><span style=\"color: #b22222;\"> /* a = any carry left from above */
</span>    (setq x (fastseedtype-b rnd_seed))

    (setq a (logand (+ a x (fastseedtype-d rnd_seed)) #xFF))
    
    (setf (fastseedtype-b rnd_seed) a)
    (setf (fastseedtype-d rnd_seed) x)
    a))</pre>

<p>I'm not sure why Lisp coders get stick for re-implementing infrastructure if <b>this</b> is reasonably common in the outside world. Building your own byte-oriented random number generator is something a Lisp <b>can</b> do, but<a href=\"#foot-Wed-Apr-20-105412EDT-2011\" name=\"note-Wed-Apr-20-105412EDT-2011\">[1]</a> you really <b>shouldn't</b>. If you were in the middle of writing your own implementation of <code>rand</code> in Elisp, Common Lisp or Scheme before you started reading this, please just do us both a favor and stop.</p>

<p>Now then.</p>

<h3>Describing Things</h3>

<p>Here's how Elite for Emacs generates planet descriptions.</p>

<pre>(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">elite-for-emacs-planet-description</span> (galaxy-index system-index)
  <span style=\"color: #8b2252;\">\"Return planet description\"</span>
  (<span style=\"color: #a020f0;\">let</span> ((planet-sys)
        (rnd_seed))
    (setq planet-sys (aref (aref elite-for-emacs-galaxies-in-universe galaxy-index) system-index))
    (setq rnd_seed (copy-fastseedtype (plansys-goatsoupseed planet-sys)))
    (setq elite-for-emacs-planet-description <span style=\"color: #8b2252;\">\"\"</span>)
    (goat_soup <span style=\"color: #8b2252;\">\"\\x8F is \\x97.\"</span> planet-sys)
    elite-for-emacs-planet-description))</pre>

<p>Which actually lulled me into a false sense of security the first time around because it seemed</p>

<ol>
  <li>functional-ish <em>(it isn't upon closer inspection, note that it returns <code>elite-for-emacs-planet-description</code>, which isn't set anywhere in the body of the definition)</em></li>
  <li>short <em>(once you understand everything it calls... not so much)</em></li>
  <li>simple <em>(maybe I'd better just show you)</em></li>
</ol>

<p>There's at least one thing there that should have set off definite alarms though. What kind of name is <code>goat_soup</code>?</p>

<pre>(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">goat_soup</span> (source planet-sys)
  (<span style=\"color: #a020f0;\">let</span> ((c)
        (rnd)
        (source-list nil)
        (tmp)
        (i)
        (len)
        (x))
      (setq tmp (split-string source <span style=\"color: #8b2252;\">\"\"</span>))
      (setq source-list nil)
      (<span style=\"color: #a020f0;\">while</span> tmp
        (setq c (car tmp))
        (setq source-list (append source-list (list (string-to-char c))))
        (setq tmp (cdr tmp)))
      (<span style=\"color: #a020f0;\">while</span> source-list
        (setq c (car source-list))
            (<span style=\"color: #a020f0;\">if</span> (&lt; c #x80)
                (setq elite-for-emacs-planet-description (concat elite-for-emacs-planet-description (list c)))
              (<span style=\"color: #a020f0;\">progn</span>
                (<span style=\"color: #a020f0;\">if</span> (&lt;= c #xa4)
                    (<span style=\"color: #a020f0;\">progn</span> (setq rnd (gen_rnd_number))
                      (setq tmp 0)<span style=\"color: #b22222;\">;;</span><span style=\"color: #b22222;\">true: non-zero, zer=false
</span>                      (<span style=\"color: #a020f0;\">if</span> (&gt;= rnd #x33)
                          (setq tmp (1+ tmp)))
                      (<span style=\"color: #a020f0;\">if</span> (&gt;= rnd #x66)
                          (setq tmp (1+ tmp)))
                      (<span style=\"color: #a020f0;\">if</span> (&gt;= rnd #x99)
                          (setq tmp (1+ tmp)))
                      (<span style=\"color: #a020f0;\">if</span> (&gt;= rnd #xCC)
                          (setq tmp (1+ tmp)))
                      (goat_soup (nth tmp (nth (- c #x81) desc_list)) planet-sys)<span style=\"color: #b22222;\">; </span><span style=\"color: #b22222;\">.option[()+(rnd &gt;= 0x66)+(rnd &gt;= 0x99)+(rnd &gt;= 0xCC)] planet-sys))
</span>                  (<span style=\"color: #a020f0;\">progn</span> <span style=\"color: #b22222;\">;;</span><span style=\"color: #b22222;\">switch...
</span>                    (<span style=\"color: #a020f0;\">cond</span> ((= c #xB0)<span style=\"color: #b22222;\">;;</span><span style=\"color: #b22222;\">planet name
</span>                           (setq elite-for-emacs-planet-description 
                                 (concat elite-for-emacs-planet-description 
                                         (capitalize (plansys-name planet-sys))))
                           <span style=\"color: #b22222;\">;;</span><span style=\"color: #b22222;\">(insert (capitalize (plansys-name planet-sys)))
</span>                      )
                     ((= c #xB1)<span style=\"color: #b22222;\">;; </span><span style=\"color: #b22222;\">/* &lt;planet name&gt;ian */
</span>                      (setq tmp (capitalize (plansys-name planet-sys)))
                      (<span style=\"color: #a020f0;\">if</span> (and (not (string-match <span style=\"color: #8b2252;\">\"e$\"</span> tmp)) (not (string-match <span style=\"color: #8b2252;\">\"i$\"</span> tmp)))
                          (setq elite-for-emacs-planet-description (concat elite-for-emacs-planet-description tmp))
                        (<span style=\"color: #a020f0;\">progn</span> <span style=\"color: #b22222;\">;;</span><span style=\"color: #b22222;\">(setq tmp \"helleinooio\")
</span>                          (setq elite-for-emacs-planet-description (concat elite-for-emacs-planet-description (substring tmp 0 (1- (length tmp))) <span style=\"color: #8b2252;\">\"ian\"</span> ))<span style=\"color: #b22222;\">;;</span><span style=\"color: #b22222;\">(insert (substring tmp 0 (1- (length tmp))))
</span>                          )))
                     ((= c #xB2)<span style=\"color: #b22222;\">;;</span><span style=\"color: #b22222;\">/* random name */
</span>                      (setq i 0)
                      (setq len (logand (gen_rnd_number) 3))
                      (<span style=\"color: #a020f0;\">while</span> (&lt;= i len)
                        (setq x (logand (gen_rnd_number) #x3e))
                        (<span style=\"color: #a020f0;\">if</span> (/= (aref pairs x) 46)<span style=\"color: #b22222;\">;;</span><span style=\"color: #b22222;\">46='.' (string-to-char \".\")
</span>                            (setq elite-for-emacs-planet-description (concat elite-for-emacs-planet-description (char-to-string (aref pairs x))))
                             )
                         (<span style=\"color: #a020f0;\">if</span> (and (&gt; i 0) (/= (aref pairs (1+ x)) 46))
                             (setq elite-for-emacs-planet-description (concat elite-for-emacs-planet-description (char-to-string (aref pairs (1+ x)))))
                             )
                         (setq i (1+ i)))
<span style=\"color: #b22222;\">;; </span><span style=\"color: #b22222;\">                                             case 0xB2: /* random name */
</span><span style=\"color: #b22222;\">;; </span><span style=\"color: #b22222;\">                             {       int i;
</span><span style=\"color: #b22222;\">;; </span><span style=\"color: #b22222;\">                                     int len = gen_rnd_number() &amp; 3;
</span><span style=\"color: #b22222;\">;; </span><span style=\"color: #b22222;\">                                     for(i=0;i&lt;=len;i++)
</span><span style=\"color: #b22222;\">;; </span><span style=\"color: #b22222;\">                                     {       int x = gen_rnd_number() &amp; 0x3e;
</span><span style=\"color: #b22222;\">;; </span><span style=\"color: #b22222;\">                                             if(pairs0[x]!='.') printf(\"%c\",pairs0[x]);
</span><span style=\"color: #b22222;\">;; </span><span style=\"color: #b22222;\">                                             if(i &amp;&amp; (pairs0[x+1]!='.')) printf(\"%c\",pairs0[x+1]);
</span><span style=\"color: #b22222;\">;; </span><span style=\"color: #b22222;\">                                     }
</span><span style=\"color: #b22222;\">;; </span><span style=\"color: #b22222;\">                             }       break;
</span>
                       ))))))
            (setq source-list (cdr source-list)))))</pre>

<img src=\"/static/img/My-mind-is-full-of-setq.jpg\" class=\"middle\" alt=\"Jackie Chan knows a surprising amount of Common Lisp\" />

<p>The kind that designates a procedure built out of dead things, most of which you'd really rather not think about. </p>

<p>A casual reading shows quite a bit of side effect, and use of at least three of the anti-patterns I mentioned <a href=\"/article?name=writing-c-in-lisp.html\">last time around</a>. I've removed the irrelevant comments<a href=\"#foot-Wed-Apr-20-105710EDT-2011\" name=\"note-Wed-Apr-20-105710EDT-2011\">[2]</a>, but the above is still considerably longer than what I consider good style for a single function, and complex enough that I was inclined to think \"rewrite\" even before I went through it. Later on, there's a snippet of code that looks like</p>

<pre>(<span style=\"color: #a020f0;\">defconst</span> <span style=\"color: #a0522d;\">desc_list</span>
  (list
<span style=\"color: #b22222;\">;; </span><span style=\"color: #b22222;\">81 */
</span>        (list <span style=\"color: #8b2252;\">\"fabled\"</span> <span style=\"color: #8b2252;\">\"notable\"</span> <span style=\"color: #8b2252;\">\"well known\"</span> <span style=\"color: #8b2252;\">\"famous\"</span> <span style=\"color: #8b2252;\">\"noted\"</span>)
<span style=\"color: #b22222;\">;; </span><span style=\"color: #b22222;\">82 */
</span>        (list <span style=\"color: #8b2252;\">\"very\"</span> <span style=\"color: #8b2252;\">\"mildly\"</span> <span style=\"color: #8b2252;\">\"most\"</span> <span style=\"color: #8b2252;\">\"reasonably\"</span> <span style=\"color: #8b2252;\">\"\"</span>)
<span style=\"color: #b22222;\">;; </span><span style=\"color: #b22222;\">83 */
</span>        (list <span style=\"color: #8b2252;\">\"ancient\"</span> <span style=\"color: #8b2252;\">\"\\x95\"</span> <span style=\"color: #8b2252;\">\"great\"</span> <span style=\"color: #8b2252;\">\"vast\"</span> <span style=\"color: #8b2252;\">\"pink\"</span>)
<span style=\"color: #b22222;\">;; </span><span style=\"color: #b22222;\">84 */
</span>        (list <span style=\"color: #8b2252;\">\"\\x9E \\x9D plantations\"</span> <span style=\"color: #8b2252;\">\"mountains\"</span> <span style=\"color: #8b2252;\">\"\\x9C\"</span> <span style=\"color: #8b2252;\">\"\\x94 forests\"</span> <span style=\"color: #8b2252;\">\"oceans\"</span>)
<span style=\"color: #b22222;\">;; </span><span style=\"color: #b22222;\">... continues for a further 69 lines</span></pre>

<p>What it does in context, basically, is take the string <code><span style=\"color: #8b2252;\">\"\\x8F is \\x97.\"</span></code> and expand it out recursively until all the \"byte\" references are gone and it ends up with a little semi-sensical, explanatory description like <span style=\"color: #8b2252;\">\"The planet is reasonably famous for its inhabitants' ingrained shyness but scourged by deadly edible wolfs.\"</span> or <span style=\"color: #8b2252;\">\"The planet is famous for its pink parking meters.\"</span>. </p>

<p>The problem I hinted at last time, and wanted to discuss this time out, is this idea of byte-orientation. This is an architecture built by someone used to assembly or C, that then tried to shoehorn the same way of looking at the world into Lisp. I wouldn't mind so much, but it's far too easy to imagine someone hacking together a system like this and thinking to themselves \"Wow, this really sucks. I could have done it MUCH more efficiently in C, and I wouldn't have had to deal with all this 'list' nonsense. I guess Lisp is just a language for masochists...\". Going against the grain of any language creates the impression that it's less powerful than it really is, and this is a prime example. The author uses excessive byte and integer indexing operations where simpler (and, in this case, more performant) lisp primitives like <code>rand</code>, <code>nth</code> and plist/alist/hash-tables would do.</p>

<p>I took a minute out at the beginning of this post to point out how this codebase re-implements random number generation at a very low level. Well, the reason I consider it an egregious mistake here is that the main place I found that particular generator used is in <code>goat_soup</code> above, where it's used to index into a vector of expansions. The really funny part is that I could see this being implemented as a performance/space optimization in a C version of the game, but when you're dealing with string representations of bytes that you have to split and convert before operating on, any gains fly directly out the window.</p>

<p>It's beside the point, though. Remember, Lisp is a symbolic language. So here's a Lispier way of generating some planet descriptions.</p>

<pre>(<span style=\"color: #a020f0;\">defparameter</span> <span style=\"color: #a0522d;\">*planet-desc-grammar*</span>
  (list <span style=\"color: #7a378b;\">:root</span> '((<span style=\"color: #8b2252;\">\" is \"</span> <span style=\"color: #7a378b;\">:reputation</span> <span style=\"color: #8b2252;\">\" for \"</span> <span style=\"color: #7a378b;\">:subject</span>) 
                (<span style=\"color: #8b2252;\">\" is \"</span> <span style=\"color: #7a378b;\">:reputation</span> <span style=\"color: #8b2252;\">\" for \"</span> <span style=\"color: #7a378b;\">:subject</span> <span style=\"color: #8b2252;\">\" and \"</span> <span style=\"color: #7a378b;\">:subject</span>) 
                (<span style=\"color: #8b2252;\">\" is \"</span> <span style=\"color: #7a378b;\">:reputation</span> <span style=\"color: #8b2252;\">\" for \"</span> <span style=\"color: #7a378b;\">:subject</span> 
                 <span style=\"color: #8b2252;\">\" but \"</span> <span style=\"color: #7a378b;\">:adj-opposing-force</span> <span style=\"color: #8b2252;\">\" by \"</span> <span style=\"color: #7a378b;\">:historic-event</span>)
                (<span style=\"color: #8b2252;\">\" is \"</span> <span style=\"color: #7a378b;\">:adj-opposing-force</span> <span style=\"color: #8b2252;\">\" by \"</span> <span style=\"color: #7a378b;\">:historic-event</span>) 
                (<span style=\"color: #8b2252;\">\", a \"</span> <span style=\"color: #7a378b;\">:adj-negative</span> <span style=\"color: #8b2252;\">\" \"</span> <span style=\"color: #7a378b;\">:syn-planet</span>))
        <span style=\"color: #7a378b;\">:subject</span> '((<span style=\"color: #8b2252;\">\"its \"</span> <span style=\"color: #7a378b;\">:adjective</span> <span style=\"color: #8b2252;\">\" \"</span> <span style=\"color: #7a378b;\">:place</span>) 
                   (<span style=\"color: #8b2252;\">\"its \"</span> <span style=\"color: #7a378b;\">:adjective</span> <span style=\"color: #8b2252;\">\" \"</span> <span style=\"color: #7a378b;\">:passtime</span>) 
                   (<span style=\"color: #8b2252;\">\"the \"</span> <span style=\"color: #7a378b;\">:adj-fauna</span> <span style=\"color: #8b2252;\">\" \"</span> <span style=\"color: #7a378b;\">:fauna</span>) 
                   (<span style=\"color: #8b2252;\">\"its inhabitants' \"</span> <span style=\"color: #7a378b;\">:adj-local-custom</span> 
                    <span style=\"color: #8b2252;\">\" \"</span> <span style=\"color: #7a378b;\">:inhabitant-property</span>) 
                   <span style=\"color: #7a378b;\">:passtime</span>) 
        <span style=\"color: #7a378b;\">:passtime</span> '((<span style=\"color: #7a378b;\">:fauna</span> <span style=\"color: #8b2252;\">\" \"</span> <span style=\"color: #7a378b;\">:drink</span>) (<span style=\"color: #7a378b;\">:fauna</span> <span style=\"color: #8b2252;\">\" \"</span> <span style=\"color: #7a378b;\">:food</span>) 
                    (<span style=\"color: #8b2252;\">\"its \"</span> <span style=\"color: #7a378b;\">:adjective</span> <span style=\"color: #8b2252;\">\" \"</span> <span style=\"color: #7a378b;\">:fauna</span> <span style=\"color: #8b2252;\">\" \"</span> <span style=\"color: #7a378b;\">:food</span>) 
                    (<span style=\"color: #7a378b;\">:adj-activity</span> <span style=\"color: #8b2252;\">\" \"</span> <span style=\"color: #7a378b;\">:sport</span>) 
                    <span style=\"color: #8b2252;\">\"cuisine\"</span> <span style=\"color: #8b2252;\">\"night-life\"</span> <span style=\"color: #8b2252;\">\"casinos\"</span> <span style=\"color: #8b2252;\">\"sit-coms\"</span>) 
        <span style=\"color: #7a378b;\">:historic-event</span> '((<span style=\"color: #7a378b;\">:adj-disaster</span> <span style=\"color: #8b2252;\">\" civil war\"</span>) 
                          (<span style=\"color: #7a378b;\">:adj-threat</span> <span style=\"color: #8b2252;\">\" \"</span> <span style=\"color: #7a378b;\">:adj-fauna</span> <span style=\"color: #8b2252;\">\" \"</span> <span style=\"color: #7a378b;\">:fauna</span> <span style=\"color: #8b2252;\">\"s\"</span>) 
                          (<span style=\"color: #8b2252;\">\"a \"</span> <span style=\"color: #7a378b;\">:adj-threat</span> <span style=\"color: #8b2252;\">\" disease\"</span>) 
                          (<span style=\"color: #7a378b;\">:adj-disaster</span> <span style=\"color: #8b2252;\">\" earthquakes\"</span>) 
                          (<span style=\"color: #7a378b;\">:adj-disaster</span> <span style=\"color: #8b2252;\">\" solar activity\"</span>)) 
        <span style=\"color: #7a378b;\">:place</span> '((<span style=\"color: #7a378b;\">:fauna</span> <span style=\"color: #7a378b;\">:flora</span> <span style=\"color: #8b2252;\">\" plantations\"</span>) (<span style=\"color: #7a378b;\">:adj-forest</span> <span style=\"color: #8b2252;\">\" forests\"</span>) 
                 <span style=\"color: #7a378b;\">:scenery</span> <span style=\"color: #8b2252;\">\"forests\"</span> <span style=\"color: #8b2252;\">\"mountains\"</span> <span style=\"color: #8b2252;\">\"oceans\"</span>)
        <span style=\"color: #7a378b;\">:technology</span> '(<span style=\"color: #7a378b;\">:passtime</span> <span style=\"color: #8b2252;\">\"food blenders\"</span> <span style=\"color: #8b2252;\">\"tourists\"</span> <span style=\"color: #8b2252;\">\"poetry\"</span> <span style=\"color: #8b2252;\">\"discos\"</span>) 
        <span style=\"color: #7a378b;\">:inhabitant-property</span> '((<span style=\"color: #8b2252;\">\"loathing of \"</span> <span style=\"color: #7a378b;\">:technology</span>) 
                               (<span style=\"color: #8b2252;\">\"love for \"</span> <span style=\"color: #7a378b;\">:technology</span>) 
                               <span style=\"color: #8b2252;\">\"shyness\"</span> <span style=\"color: #8b2252;\">\"silliness\"</span> <span style=\"color: #8b2252;\">\"mating traditions\"</span>) 
        <span style=\"color: #7a378b;\">:fauna</span> '(<span style=\"color: #8b2252;\">\"talking tree\"</span> <span style=\"color: #8b2252;\">\"crab\"</span> <span style=\"color: #8b2252;\">\"bat\"</span> <span style=\"color: #8b2252;\">\"lobster\"</span> <span style=\"color: #8b2252;\">\"shrew\"</span> <span style=\"color: #8b2252;\">\"beast\"</span> <span style=\"color: #8b2252;\">\"bison\"</span> 
                 <span style=\"color: #8b2252;\">\"snake\"</span> <span style=\"color: #8b2252;\">\"wolf\"</span> <span style=\"color: #8b2252;\">\"yak\"</span> <span style=\"color: #8b2252;\">\"leopard\"</span> <span style=\"color: #8b2252;\">\"cat\"</span> <span style=\"color: #8b2252;\">\"monkey\"</span> <span style=\"color: #8b2252;\">\"goat\"</span> <span style=\"color: #8b2252;\">\"fish\"</span> 
                 <span style=\"color: #8b2252;\">\"snail\"</span> <span style=\"color: #8b2252;\">\"slug\"</span> <span style=\"color: #8b2252;\">\"asp\"</span> <span style=\"color: #8b2252;\">\"moth\"</span> <span style=\"color: #8b2252;\">\"grub\"</span> <span style=\"color: #8b2252;\">\"ant\"</span>) 
        <span style=\"color: #7a378b;\">:flora</span> '((<span style=\"color: #7a378b;\">:fauna</span> <span style=\"color: #8b2252;\">\"-weed\"</span>) <span style=\"color: #8b2252;\">\"plant\"</span> <span style=\"color: #8b2252;\">\"tulip\"</span> <span style=\"color: #8b2252;\">\"banana\"</span> <span style=\"color: #8b2252;\">\"corn\"</span> <span style=\"color: #8b2252;\">\"carrot\"</span>) 
        <span style=\"color: #7a378b;\">:scenery</span> '(<span style=\"color: #8b2252;\">\"parking meters\"</span> <span style=\"color: #8b2252;\">\"dust clouds\"</span> <span style=\"color: #8b2252;\">\"ice bergs\"</span> 
                   <span style=\"color: #8b2252;\">\"rock formations\"</span> <span style=\"color: #8b2252;\">\"volcanoes\"</span>) 
        <span style=\"color: #7a378b;\">:reputation</span> '((<span style=\"color: #7a378b;\">:emphasis</span> <span style=\"color: #8b2252;\">\" \"</span> <span style=\"color: #7a378b;\">:reputation</span>) 
                      <span style=\"color: #8b2252;\">\"fabled\"</span> <span style=\"color: #8b2252;\">\"notable\"</span> <span style=\"color: #8b2252;\">\"well known\"</span> <span style=\"color: #8b2252;\">\"famous\"</span> <span style=\"color: #8b2252;\">\"noted\"</span>) 
        <span style=\"color: #7a378b;\">:emphasis</span> '(<span style=\"color: #8b2252;\">\"very\"</span> <span style=\"color: #8b2252;\">\"mildly\"</span> <span style=\"color: #8b2252;\">\"most\"</span> <span style=\"color: #8b2252;\">\"reasonably\"</span>) 
        <span style=\"color: #7a378b;\">:drink</span> '(<span style=\"color: #8b2252;\">\"juice\"</span> <span style=\"color: #8b2252;\">\"brandy\"</span> <span style=\"color: #8b2252;\">\"water\"</span> <span style=\"color: #8b2252;\">\"brew\"</span> <span style=\"color: #8b2252;\">\"gargle blasters\"</span>) 
        <span style=\"color: #7a378b;\">:sport</span> '(<span style=\"color: #8b2252;\">\"hockey\"</span> <span style=\"color: #8b2252;\">\"cricket\"</span> <span style=\"color: #8b2252;\">\"karate\"</span> <span style=\"color: #8b2252;\">\"polo\"</span> <span style=\"color: #8b2252;\">\"tennis\"</span> <span style=\"color: #8b2252;\">\"quiddich\"</span>) 
        <span style=\"color: #7a378b;\">:food</span> '(<span style=\"color: #8b2252;\">\"meat\"</span> <span style=\"color: #8b2252;\">\"cutlet\"</span> <span style=\"color: #8b2252;\">\"steak\"</span> <span style=\"color: #8b2252;\">\"burgers\"</span> <span style=\"color: #8b2252;\">\"soup\"</span>) 
        <span style=\"color: #7a378b;\">:adjective</span> '((<span style=\"color: #7a378b;\">:emphasis</span> <span style=\"color: #8b2252;\">\" \"</span> <span style=\"color: #7a378b;\">:adjective</span>) 
                     <span style=\"color: #7a378b;\">:adj-local-custom</span> <span style=\"color: #7a378b;\">:adj-fauna</span> <span style=\"color: #7a378b;\">:adj-forest</span> <span style=\"color: #7a378b;\">:adj-disaster</span> 
                     <span style=\"color: #8b2252;\">\"great\"</span> <span style=\"color: #8b2252;\">\"pink\"</span> <span style=\"color: #8b2252;\">\"fabulous\"</span> <span style=\"color: #8b2252;\">\"hoopy\"</span> 
                     <span style=\"color: #8b2252;\">\"funny\"</span> <span style=\"color: #8b2252;\">\"wierd\"</span> <span style=\"color: #8b2252;\">\"strange\"</span> <span style=\"color: #8b2252;\">\"peculiar\"</span>) 
        <span style=\"color: #7a378b;\">:adj-fauna</span> '(<span style=\"color: #7a378b;\">:adj-threat</span> <span style=\"color: #8b2252;\">\"mountain\"</span> <span style=\"color: #8b2252;\">\"edible\"</span> <span style=\"color: #8b2252;\">\"tree\"</span> <span style=\"color: #8b2252;\">\"spotted\"</span> <span style=\"color: #8b2252;\">\"exotic\"</span>) 
        <span style=\"color: #7a378b;\">:adj-negative</span> '((<span style=\"color: #7a378b;\">:adj-negative</span> <span style=\"color: #8b2252;\">\", \"</span> <span style=\"color: #7a378b;\">:adj-negative</span>) 
                        <span style=\"color: #8b2252;\">\"boring\"</span> <span style=\"color: #8b2252;\">\"dull\"</span> <span style=\"color: #8b2252;\">\"tedious\"</span> <span style=\"color: #8b2252;\">\"revolting\"</span>) 
        <span style=\"color: #7a378b;\">:adj-local-custom</span> '(<span style=\"color: #8b2252;\">\"ancient\"</span> <span style=\"color: #8b2252;\">\"exceptional\"</span> <span style=\"color: #8b2252;\">\"eccentric\"</span> <span style=\"color: #8b2252;\">\"ingrained\"</span> <span style=\"color: #8b2252;\">\"unusual\"</span>) 
        <span style=\"color: #7a378b;\">:adj-forest</span> '(<span style=\"color: #8b2252;\">\"tropical\"</span> <span style=\"color: #8b2252;\">\"vast\"</span> <span style=\"color: #8b2252;\">\"dense\"</span> <span style=\"color: #8b2252;\">\"rain\"</span> <span style=\"color: #8b2252;\">\"impenetrable\"</span> <span style=\"color: #8b2252;\">\"exuberant\"</span>) 
        <span style=\"color: #7a378b;\">:adj-disaster</span> '(<span style=\"color: #8b2252;\">\"frequent\"</span> <span style=\"color: #8b2252;\">\"occasional\"</span> <span style=\"color: #8b2252;\">\"unpredictable\"</span> <span style=\"color: #8b2252;\">\"dreadful\"</span> <span style=\"color: #7a378b;\">:adj-threat</span>) 
        <span style=\"color: #7a378b;\">:adj-threat</span> '(<span style=\"color: #8b2252;\">\"killer\"</span> <span style=\"color: #8b2252;\">\"deadly\"</span> <span style=\"color: #8b2252;\">\"evil\"</span> <span style=\"color: #8b2252;\">\"lethal\"</span> <span style=\"color: #8b2252;\">\"vicious\"</span>) 
        <span style=\"color: #7a378b;\">:adj-activity</span> '(<span style=\"color: #8b2252;\">\"ice\"</span> <span style=\"color: #8b2252;\">\"mud\"</span> <span style=\"color: #8b2252;\">\"zero-g\"</span> <span style=\"color: #8b2252;\">\"virtual\"</span> <span style=\"color: #8b2252;\">\"vacuum\"</span> <span style=\"color: #8b2252;\">\"Australian, indoor-rules\"</span>) 
        <span style=\"color: #7a378b;\">:adj-opposing-force</span> '(<span style=\"color: #8b2252;\">\"beset\"</span> <span style=\"color: #8b2252;\">\"plagued\"</span> <span style=\"color: #8b2252;\">\"ravaged\"</span> <span style=\"color: #8b2252;\">\"cursed\"</span> <span style=\"color: #8b2252;\">\"scourged\"</span>) 
        <span style=\"color: #7a378b;\">:syn-planet</span> '(<span style=\"color: #8b2252;\">\"planet\"</span> <span style=\"color: #8b2252;\">\"world\"</span> <span style=\"color: #8b2252;\">\"place\"</span> <span style=\"color: #8b2252;\">\"little planet\"</span> <span style=\"color: #8b2252;\">\"dump\"</span>)))</pre>

<p>That's the data, at any rate. The above uses all the original words and combinations from the Elisp codebase (I did add \"Australian, indoor-rules\" to the activity adjective list, and made sure \"quiddich\" was a possible sport, but that's all), so the descriptions popping out of it should be the same as those coming out of <code>goat_soup</code> and friends. Note that the <code>*</code> surrounding the variable name denote a global variable<a href=\"#foot-Wed-Apr-20-110208EDT-2011\" name=\"note-Wed-Apr-20-110208EDT-2011\">[3]</a>. Note also that instead of using byte relations, the <code>plist</code> approach lets me avoid splitting strings in intermediate steps. A terminal is a string and a non-terminal is an atom. The way to unfold these is</p>

<pre>(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">expand-production</span> (production grammar)
  (<span style=\"color: #a020f0;\">cond</span> ((stringp production) production)
        ((symbolp production) 
         (expand-production (pick-g production grammar) grammar))
        ((listp production) 
         (reduce (<span style=\"color: #a020f0;\">lambda</span> (a b) 
                   (concatenate 'string a (expand-production b grammar))) 
                 (cons <span style=\"color: #8b2252;\">\"\"</span> production)))))</pre>

<code>pick-g</code> is a function that takes a key and grammar, and returns a random expansion of that key in that grammar.

<pre>(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">pick-g</span> (key grammar) 
  (<span style=\"color: #a020f0;\">let</span> ((choices (getf grammar key)))
    (nth (random (length choices)) choices)))</pre>

<p>In other words, </p>

<ul>
  <li>a string gets returned</li>
  <li>an atom gets expanded (by looking it up in the grammar and picking a random possible expansion)</li>
  <li>a list gets expanded (by expanding each of its elements)</li>
</ul>

<pre>* (expand-production <span style=\"color: #7a378b;\">:root</span> *planet-desc-grammar*)

<span style=\"color: #8b2252;\">\" is fabled for its inhabitants' ancient love for ice tennis\"</span>
* (expand-production <span style=\"color: #7a378b;\">:root</span> *planet-desc-grammar*)

<span style=\"color: #8b2252;\">\", a revolting little planet\"</span></pre>

<p>All I have to make sure is that these get displayed along with the planet name and we're golden. This is the sort of elegance that Lisp is capable of when you go with the grain. ~140 lines of flaming death and side effects replaced by two recursive functions and a <code>plist</code> that succinctly and accurately signal the intent of the programmer. I wouldn't be particularly surprised if there's an even simpler way to accomplish the same thing, actually. </p>

<h3>Naming Things</h3>

<p>Planet names seem like they should be implemented the same way, given what they really are. In fact, I did just implement them as another grammar that depends on the same functions to unfold, but the original takes a different approach.</p>

<pre><span style=\"color: #b22222;\">;; </span><span style=\"color: #b22222;\">buried at line ~103 of a single function that generates a planet
</span>  <span style=\"color: #b22222;\">;</span><span style=\"color: #b22222;\">set name
</span>  <span style=\"color: #b22222;\">;</span><span style=\"color: #b22222;\">init alphabet pairs
</span>  (setq pair1 (* (logand (lsh (seedtype-w2 s) -8) 31) 2))
  (tweakseed s)
  (setq pair2 (* (logand (lsh (seedtype-w2 s) -8) 31) 2))
  (tweakseed s)
  (setq pair3 (* (logand (lsh (seedtype-w2 s) -8) 31) 2))
  (tweakseed s)
  (setq pair4 (* (logand (lsh (seedtype-w2 s) -8) 31) 2))
  (tweakseed s)
  <span style=\"color: #b22222;\">;</span><span style=\"color: #b22222;\">Always four iterations of random number
</span>  (setq planet-name
        (concat 
         (code-to-char (aref pairs pair1))
         (code-to-char (aref pairs (1+ pair1)))
         (code-to-char (aref pairs pair2))
         (code-to-char (aref pairs (1+ pair2)))
         (code-to-char (aref pairs pair3))
         (code-to-char (aref pairs (1+ pair3)))))
  (<span style=\"color: #a020f0;\">if</span> (/= longnameflag 0)
      (<span style=\"color: #a020f0;\">progn</span>
        (setq planet-name 
              (concat
               planet-name
               (code-to-char (aref pairs pair4))
               (code-to-char (aref pairs (1+ pair4)))))))
  (setf (plansys-name thissys) (stripout planet-name <span style=\"color: #8b2252;\">\".\"</span>))</pre>

<code>pairs</code> showed up in <code>goat_soup</code> too, and it's defined as 

<pre>(<span style=\"color: #a020f0;\">defconst</span> <span style=\"color: #a0522d;\">pairs</span> 
  <span style=\"color: #8b2252;\">\"..LEXEGEZACEBISOUSESARMAINDIREA.ERATENBERALAVETIEDORQUANTEISRION\"</span>
  <span style=\"color: #8b2252;\">\"Characters for planet names.\"</span>)</pre>

<p><code>s</code> is passed as an argument to the planet-generator, the rest of which I won't inflict upon you, I think you may have gotten the idea already. In other words, planets are restricted to 4 syllable names put together by side-effect in the procedure that creates planets. They're put together by using byte operations on a string that represents the valid pair combinations contained in a planet name.</p>

<p>Well, seeing as I already put together a convention for unfolding components to strings by using a recursive function and a <code>plist</code>, I figured I'd do the same for this. Code reuse is good, I hear.</p>

<pre>(<span style=\"color: #a020f0;\">defparameter</span> <span style=\"color: #a0522d;\">*planet-name-grammar*</span>
  <span style=\"color: #b22222;\">;</span><span style=\"color: #b22222;\">be mindful of name probabilities if you try to reduce duplication here
</span>  (list <span style=\"color: #7a378b;\">:root</span> '((<span style=\"color: #7a378b;\">:starter</span> <span style=\"color: #7a378b;\">:link</span> <span style=\"color: #7a378b;\">:ender</span>) (<span style=\"color: #7a378b;\">:starter</span> <span style=\"color: #7a378b;\">:partition</span> <span style=\"color: #7a378b;\">:ender</span>) 
                (<span style=\"color: #7a378b;\">:starter</span> <span style=\"color: #7a378b;\">:partition</span> <span style=\"color: #7a378b;\">:link</span> <span style=\"color: #7a378b;\">:ender</span>) 
                (<span style=\"color: #7a378b;\">:starter</span> <span style=\"color: #7a378b;\">:partition</span> <span style=\"color: #7a378b;\">:root</span>) 
                (<span style=\"color: #7a378b;\">:starter</span> <span style=\"color: #7a378b;\">:link</span> <span style=\"color: #7a378b;\">:link</span> <span style=\"color: #7a378b;\">:ender</span>) (<span style=\"color: #7a378b;\">:starter</span> <span style=\"color: #7a378b;\">:ender</span>))
        <span style=\"color: #7a378b;\">:starter</span> '((<span style=\"color: #7a378b;\">:starter</span> <span style=\"color: #7a378b;\">:link</span>)
                   <span style=\"color: #8b2252;\">\"aa\"</span> <span style=\"color: #8b2252;\">\"ae\"</span> <span style=\"color: #8b2252;\">\"al\"</span> <span style=\"color: #8b2252;\">\"an\"</span> <span style=\"color: #8b2252;\">\"ao\"</span> <span style=\"color: #8b2252;\">\"ar\"</span> <span style=\"color: #8b2252;\">\"at\"</span> <span style=\"color: #8b2252;\">\"az\"</span> <span style=\"color: #8b2252;\">\"be\"</span> 
                   <span style=\"color: #8b2252;\">\"bi\"</span> <span style=\"color: #8b2252;\">\"ce\"</span> <span style=\"color: #8b2252;\">\"di\"</span> <span style=\"color: #8b2252;\">\"ed\"</span> <span style=\"color: #8b2252;\">\"en\"</span> <span style=\"color: #8b2252;\">\"er\"</span> <span style=\"color: #8b2252;\">\"es\"</span> <span style=\"color: #8b2252;\">\"ge\"</span> <span style=\"color: #8b2252;\">\"in\"</span> 
                   <span style=\"color: #8b2252;\">\"is\"</span> <span style=\"color: #8b2252;\">\"la\"</span> <span style=\"color: #8b2252;\">\"le\"</span> <span style=\"color: #8b2252;\">\"ma\"</span> <span style=\"color: #8b2252;\">\"on\"</span> <span style=\"color: #8b2252;\">\"or\"</span> <span style=\"color: #8b2252;\">\"qu\"</span> <span style=\"color: #8b2252;\">\"ra\"</span> <span style=\"color: #8b2252;\">\"re\"</span> 
                   <span style=\"color: #8b2252;\">\"ri\"</span> <span style=\"color: #8b2252;\">\"so\"</span> <span style=\"color: #8b2252;\">\"te\"</span> <span style=\"color: #8b2252;\">\"ti\"</span> <span style=\"color: #8b2252;\">\"us\"</span> <span style=\"color: #8b2252;\">\"ve\"</span> <span style=\"color: #8b2252;\">\"xe\"</span> <span style=\"color: #8b2252;\">\"za\"</span>)
        <span style=\"color: #7a378b;\">:ender</span> '((<span style=\"color: #7a378b;\">:link</span> <span style=\"color: #7a378b;\">:ender</span>) 
                 <span style=\"color: #8b2252;\">\"aa\"</span> <span style=\"color: #8b2252;\">\"al\"</span> <span style=\"color: #8b2252;\">\"at\"</span> <span style=\"color: #8b2252;\">\"di\"</span> <span style=\"color: #8b2252;\">\"ti\"</span> <span style=\"color: #8b2252;\">\"so\"</span> <span style=\"color: #8b2252;\">\"ce\"</span> <span style=\"color: #8b2252;\">\"re\"</span> <span style=\"color: #8b2252;\">\"za\"</span> 
                 <span style=\"color: #8b2252;\">\"in\"</span> <span style=\"color: #8b2252;\">\"ed\"</span> <span style=\"color: #8b2252;\">\"or\"</span> <span style=\"color: #8b2252;\">\"an\"</span> <span style=\"color: #8b2252;\">\"ma\"</span> <span style=\"color: #8b2252;\">\"ab\"</span> <span style=\"color: #8b2252;\">\"ge\"</span> <span style=\"color: #8b2252;\">\"aq\"</span> <span style=\"color: #8b2252;\">\"en\"</span> 
                 <span style=\"color: #8b2252;\">\"ri\"</span> <span style=\"color: #8b2252;\">\"ve\"</span> <span style=\"color: #8b2252;\">\"ag\"</span> <span style=\"color: #8b2252;\">\"qu\"</span> <span style=\"color: #8b2252;\">\"us\"</span> <span style=\"color: #8b2252;\">\"es\"</span> <span style=\"color: #8b2252;\">\"ex\"</span> <span style=\"color: #8b2252;\">\"ae\"</span> <span style=\"color: #8b2252;\">\"on\"</span> 
                 <span style=\"color: #8b2252;\">\"bi\"</span> <span style=\"color: #8b2252;\">\"xe\"</span> <span style=\"color: #8b2252;\">\"le\"</span> <span style=\"color: #8b2252;\">\"is\"</span> <span style=\"color: #8b2252;\">\"er\"</span> <span style=\"color: #8b2252;\">\"be\"</span> <span style=\"color: #8b2252;\">\"la\"</span> <span style=\"color: #8b2252;\">\"ar\"</span> <span style=\"color: #8b2252;\">\"az\"</span> 
                 <span style=\"color: #8b2252;\">\"io\"</span> <span style=\"color: #8b2252;\">\"sb\"</span> <span style=\"color: #8b2252;\">\"te\"</span> <span style=\"color: #8b2252;\">\"ra\"</span> <span style=\"color: #8b2252;\">\"ia\"</span> <span style=\"color: #8b2252;\">\"nb\"</span>)
        <span style=\"color: #7a378b;\">:link</span> '((<span style=\"color: #7a378b;\">:link</span> <span style=\"color: #7a378b;\">:link</span>) (<span style=\"color: #7a378b;\">:link</span> <span style=\"color: #7a378b;\">:link</span>)
                <span style=\"color: #8b2252;\">\"at\"</span> <span style=\"color: #8b2252;\">\"an\"</span> <span style=\"color: #8b2252;\">\"ri\"</span> <span style=\"color: #8b2252;\">\"es\"</span> <span style=\"color: #8b2252;\">\"ed\"</span> <span style=\"color: #8b2252;\">\"bi\"</span> <span style=\"color: #8b2252;\">\"ce\"</span> <span style=\"color: #8b2252;\">\"us\"</span> <span style=\"color: #8b2252;\">\"on\"</span> 
                <span style=\"color: #8b2252;\">\"er\"</span> <span style=\"color: #8b2252;\">\"ti\"</span> <span style=\"color: #8b2252;\">\"ve\"</span> <span style=\"color: #8b2252;\">\"ra\"</span> <span style=\"color: #8b2252;\">\"la\"</span> <span style=\"color: #8b2252;\">\"le\"</span> <span style=\"color: #8b2252;\">\"ge\"</span> <span style=\"color: #8b2252;\">\"i\"</span> <span style=\"color: #8b2252;\">\"u\"</span> 
                <span style=\"color: #8b2252;\">\"xe\"</span> <span style=\"color: #8b2252;\">\"in\"</span> <span style=\"color: #8b2252;\">\"di\"</span> <span style=\"color: #8b2252;\">\"so\"</span> <span style=\"color: #8b2252;\">\"ar\"</span> <span style=\"color: #8b2252;\">\"e\"</span> <span style=\"color: #8b2252;\">\"s\"</span> <span style=\"color: #8b2252;\">\"na\"</span> <span style=\"color: #8b2252;\">\"is\"</span> 
                <span style=\"color: #8b2252;\">\"za\"</span> <span style=\"color: #8b2252;\">\"re\"</span> <span style=\"color: #8b2252;\">\"ma\"</span> <span style=\"color: #8b2252;\">\"or\"</span> <span style=\"color: #8b2252;\">\"be\"</span> <span style=\"color: #8b2252;\">\"en\"</span> <span style=\"color: #8b2252;\">\"qu\"</span> <span style=\"color: #8b2252;\">\"a\"</span> <span style=\"color: #8b2252;\">\"n\"</span> 
                <span style=\"color: #8b2252;\">\"r\"</span> <span style=\"color: #8b2252;\">\"te\"</span> <span style=\"color: #8b2252;\">\"t\"</span>)
        <span style=\"color: #7a378b;\">:partition</span> '(<span style=\"color: #8b2252;\">\"-\"</span> <span style=\"color: #8b2252;\">\"'\"</span> <span style=\"color: #8b2252;\">\" \"</span>)))</pre>

<a href=\"#foot-Wed-Apr-20-110844EDT-2011\" name=\"note-Wed-Apr-20-110844EDT-2011\">[4]</a>And that's that. It unfolds into planet names with the same mechanisms

<pre>* (string-capitalize (expand-production <span style=\"color: #7a378b;\">:root</span> *planet-name-grammar*))

<span style=\"color: #8b2252;\">\"Ri Orleio\"</span>
* (string-capitalize (expand-production <span style=\"color: #7a378b;\">:root</span> *planet-name-grammar*))

<span style=\"color: #8b2252;\">\"Xenain\"</span>

* (string-capitalize (expand-production <span style=\"color: #7a378b;\">:root</span> *planet-name-grammar*))

<span style=\"color: #8b2252;\">\"Es'Ae\"</span></pre>

<p><code>string-capitalize</code> just makes sure it looks like a proper name (it's <a href=\"http://www.lispworks.com/documentation/HyperSpec/Body/f_stg_up.htm#string-capitalize\">a lisp primitive</a>, so I won't define it here). The important part, which I'll likely cover in a future post, is that making things functional aids in composeability. The <code>setq</code> sequence from the original codebase has no hope of being reused anywhere because it intentionally grubs about in the surrounding state. If nothing else, the <code>expand-production</code> approach ensures that if I ever need a planet name in some other context, I can easily generate it. Also, as we've seen already, abstracting out the general pattern of \"compose strings from a given pattern of components\" easily pays for itself with even one instance of reuse.</p>

<h3>My Sinister Purpose</h3>

<p>The reason I've been picking away at this codebase isn't idle fancy<a href=\"#foot-Wed-Apr-20-111010EDT-2011\" name=\"note-Wed-Apr-20-111010EDT-2011\">[5]</a>, or an intense hatred of Sami Salkosuo<a href=\"#foot-Wed-Apr-20-111105EDT-2011\" name=\"note-Wed-Apr-20-111105EDT-2011\">[6]</a>. It's that I've been putting together a little web game based on it. It's still not done, mind you, but I'm going to try to put something together fairly soon for you to poke at (even if it's ugly as sin from the visual perspective to start with). If nothing else, I'm tossing the ported Common Lisp codebase up onto <a href=\"https://github.com/Inaimathi\">my GitHub</a> this weekend so that some other pedantic bore can pick apart a project I was just doing in my spare time. After two articles full of bitching about poor style and inelegant expression, it seems like it's only fair.</p>


<hr />
<h5>Footnotes</h5>

<p>1 - <a href=\"#note-Wed-Apr-20-105412EDT-2011\" name=\"foot-Wed-Apr-20-105412EDT-2011\">[back]</a> - Especially considering the situation.</p>
<p>2 - <a href=\"#note-Wed-Apr-20-105710EDT-2011\" name=\"foot-Wed-Apr-20-105710EDT-2011\">[back]</a> - Which weren't particularly horrible, most of them were upholding the time-honored tradition of testing by <code>printf</code></p>
<p>3 - <a href=\"#note-Wed-Apr-20-110208EDT-2011\" name=\"foot-Wed-Apr-20-110208EDT-2011\">[back]</a> - It's not enforced except in one or two places, but it is a style convention. SBCL <b>will</b> bitch at you if you try to do something like <code>(<span style=\"color: #a020f0;\">let</span> ((*foo* '(bar baz))) ...)</code>, for example. Not refuse to run it of course, but it'll warn you that it's using a lexical binding for <code>*foo*</code>.</p>
<p>4 - <a href=\"#note-Wed-Apr-20-110844EDT-2011\" name=\"foot-Wed-Apr-20-110844EDT-2011\">[back]</a> - That's the first time that my blog-mode highligher chugged for a second before coming back with the result, by the by, take a look at the source code and see if you can see why.</p>
<p>5 - <a href=\"#note-Wed-Apr-20-111010EDT-2011\" name=\"foot-Wed-Apr-20-111010EDT-2011\">[back]</a> - Or at least, not <b>just</b> idle fancy.</p>
<p>6 - <a href=\"#note-Wed-Apr-20-111105EDT-2011\" name=\"foot-Wed-Apr-20-111105EDT-2011\">[back]</a> - Which I don't have. I've never met the guy, and he couldn't possibly have known that I'd be going through his hobby-horse with a sledgehammer at some point in the distant future of 2011.</p>
"))
((5202 3723 551892000) :INSERT (43 :POSTED 3512260800))
((5202 3723 551899000) :INSERT (43 :TAG :COMMON-LISP))
((5202 3723 552600000) :INSERT (44 :TITLE "Game Jam"))
((5202 3723 552610000) :INSERT (44 :FILE "game-jam.html"))
((5202 3723 552615000) :INSERT (44 :EDITED 3610022331))
((5202 3723 552619000) :INSERT
 (44 :BODY
  "<p>The first part is a journal of thoughts as they were happening, so try not to laugh at me too hard. The second part is a bit of reflection on the <a href=\"https://github.com/Inaimathi/cl-leet\">project so far</a>. This is a summary/record of my week participating in the <a href=\"http://lispgames.org/index.php/2011_Spring_Lisp_Game_Jam\">2011 Spring Lisp Game Jam</a>. Hopefully, it's useful to someone (the very act of writing it was very useful to me).</p>

<hr />

<h3>April 23</h3>

<p>I did the first public facing push of this code-base at about 4:00 am my time today, and then curled up into bed. When I got up at 10:30, there was already a bug report waiting for me. Not off to a spectacular start...</p>

<p>The problem turned out to be how cl-css handles file compilation. Specifically, it fails if the directory it's trying to compile to doesn't exist. At this point, I'm ready to load up <code>cl-fad</code> to whip up a simple fix, except that <code>cl-fad</code> doesn't have a function to create directories. Okay... maybe it's a Lisp primitive then? A quick search for \"directory\" over at the <a href=\"http://www.lispworks.com/documentation/HyperSpec/Front/X_AllSym.htm\">hyperspec symbol index</a> turns up nothing. So...huh? I spend 10 minutes checking the <a href=\"http://cl-cookbook.sourceforge.net/\">cookbook</a> and googling fruitlessly<a href=\"#foot-Sat-Apr-30-024647EDT-2011\" name=\"note-Sat-Apr-30-024647EDT-2011\">[1]</a>. That doesn't discourage me though. I commonly run into situations where I have a naive mental model of a given problem that some Lisper has already built an elegant solution to. So I google the more general case <code>common lisp making directory</code>, which turns up a <a href=\"http://www.lispworks.com/kb/a461eb08ebd7270580256b680068e9ca.html\">lispworks doc page</a> abut <code><a href=\"http://www.lispworks.com/documentation/HyperSpec/Body/f_ensu_1.htm#ensure-directories-exist\">ensure-directories-exist</a></code>. </p>

<p>This is what I meant. When I'm making a directory, I really just want a place to put some specific file. Abstracting the basic directory creation means that I don't have to special-case the situation where multiple nested directories are required, and I also don't need to worry about checking whether the directory exists before creating it. Elegant. Maybe this is a good start. Day 1 and I'm already learning something.</p>

<h3>April 24</h3>

<p>I went pretty batshit on the code-base today, removing anything that looked like an unnecessary additional step. I'd been keeping the model and view as separate as possible because of an assumption that there would be some sort of SQL database involved in the game eventually. I may still need to switch to one at some point, so the move might come back to bite me in the ass, but the barriers got broken down. Mostly it was intermediate functions all over the place that slightly simplified the next set of intermediate functions<a href=\"#foot-Sat-Apr-30-024740EDT-2011\" name=\"note-Sat-Apr-30-024740EDT-2011\">[2]</a>. Things like <code>planet-info</code> and <code>inventory</code> which took model structs and returned <code>plists</code> instead. To be fair, that actually did help at some point; since there doesn't seem to be a way to map over a <code>struct</code>, it was very easy to dump an entire <code>plist</code> into the view with a <code>loop</code>.</p>

<p>Anyway, I made the decision during my shower that I'm keeping the <code>struct</code> approach since I think it might help with the concurrency issues I'll be facing next. There's also one decision from earlier that's sort of coming back to haunt me there. The way that a given <code>captain</code>'s current planet is stored is as a string of that planets' name. That meant that I needed a function called <code>planet-name->planet</code> early on, and it meant that any manipulation of the current planet happened directly on the <code>*galaxy*</code>. It's fine for a single player, but more would cause some odd errors that wouldn't be particularly fun. The way I'm thinking of solving that is by having each captain copy out the current planet, and keep track of transactions they conduct. The total changes would then get applied when they travel. A given market could still dip into the negatives in some circumstances, but it should serve to make it much harder to force an error on an opponent sharing your planet.</p>

<p>Finally, markets behave differently now. Instead of static prices, each market generates a new price from the <code>*tradegoods*</code> and averages (By which I mean \"gets the arithmetic mean of\") that with its current price. It just makes sure that markets tend to stabilize over time, while hopefully keeping enough fluctuations to make profit possible.</p>

<h3>April 25</h3>

<p>Changed up a lot more of the system. Today, I focused on the <code>purchase!</code>/<code>convey!</code> end of things rather than the basic model. Basically, captains now have a copy of the planet they take with them and merge transactions back later. As I mentioned yesterday, this isn't a measure to make sure that no more product leaves a planet than absolutely should. In fact, I'm tempted to make deficit exports an explicit mechanic, upping the price of a good fairly substantially if it slides into the negatives. That would also play off a tweak I want to make to the <code>market-produce!</code> function. Namely, generating <code>(+ 4d20-30 (/ productivity tech-level))</code> instead of the current <code>(+ 2d20 (/ productivity tech-level))</code> to allow goods to be consumed as well as created by planets<a href=\"#foot-Sat-Apr-30-025032EDT-2011\" name=\"note-Sat-Apr-30-025032EDT-2011\">[3]</a>.</p>

<p>Today's lesson<a href=\"#foot-Sat-Apr-30-025041EDT-2011\" name=\"note-Sat-Apr-30-025041EDT-2011\">[4]</a> was that state is fucking hard. Introducing side-effects to a primarily functional system played more hell with my code than I thought it would. I still don't know if I squashed every possible bug with that transaction system. It's enough to make me go paranoid and start sprinkling <code>assert</code>s in the vicinity of all <code>setf</code>s and <code>!</code>s. I won't yet; I'll wait 'till something unexpected blows up, but I can see an argument for it here. The end result is that this game should now be playable by more than one human at a time. There's no explicit goals yet, I'm going to save that for later, I think, but you can still get a few friends together on a lan<a href=\"#foot-Sat-Apr-30-025129EDT-2011\" name=\"note-Sat-Apr-30-025129EDT-2011\">[5]</a> and play economic hell with a small galaxy with the game as it stands.</p>

<p>[Break time to remodel my kitchen. Did a bit of light view coding, but nothing interesting to report.]</p>

<h3>April 28</h3>

<p>Spent today mainly on the UI end. Making it pretty-ish and squashing a few display bugs I came across. Still not happy with the default theme, but it's all I'll have time for in a week. I did make an effort to completely disconnect it from all other code, so others can theoretically just push a folder of images+theme.css to add a new one. The entire experience was a bit surreal; in the middle of using GIMP to do some graphic design work, I found myself embroiled in a conversation on Reddit about how GIMP is not good enough to do design work. Since the best argument I read was \"But, I <b>like</b> Photoshop!\" I'll stick with the free<a href=\"#foot-Sat-Apr-30-025452EDT-2011\" name=\"note-Sat-Apr-30-025452EDT-2011\">[6]</a> version, thank you.</p>

<p>Part of that UI tweaking mentioned above was adding jQuery and jQuery UI to the codebase. I didn't want to have to tell people to go download it themselves, and there's really nothing that needs to be done other than putting them in the correct directories. The downside is that this is now considered a Javascript project by GitHub. Which, ok, I guess is true by character count, but it still feels inaccurate.</p>

<h3>April 29</h3>

<p>I realized earlier today that my time's officially up for this little project<a href=\"#foot-Sat-Apr-30-025551EDT-2011\" name=\"note-Sat-Apr-30-025551EDT-2011\">[7]</a>. Technically, time ran out about an hour ago, but I kinda got into the swing of things and decided to finish one last TODO before doing a final check-in for the event and collecting my thoughts. That ended up taking more time than I thought it would, but it really was my own fault for giving into indecision for so long. The game looks passable, it plays nicely, doesn't seem to blow up<a href=\"#foot-Sat-Apr-30-025613EDT-2011\" name=\"note-Sat-Apr-30-025613EDT-2011\">[8]</a> and is actually pretty fun<a href=\"#foot-Sat-Apr-30-025631EDT-2011\" name=\"note-Sat-Apr-30-025631EDT-2011\">[9]</a>. I really shouldn't have picked out something this ambitious for a week I knew I'd be occupied, but hey. Such is life, I guess. I'll keep working on it for as long as I can stand to look at the code-base, but for the moment, it's done.</p>

<p>Anyway, lets get to the juice; here's the distillation of what I learned in trying to put together a small-ish game in Lisp over the course of a week.</p>

<p><b>Incremental beats planned...</b></p>

<p>It was honestly surprising <i>how</i> true this turned out to be. I started out trying to plan out as much stuff as possible into the future, going so far as to put several levels of indirection into the model in case of a switch to a relational database later. That... was a tremendous waste of time. Both in the sense that useless code was produced as a result, and that I then had to spend time going through call-trees to figure out what a given function was actually doing. I <a href=\"https://github.com/Inaimathi/cl-leet/commit/43d5fe31e00f0bbe2c6eddcab7211d59567f19ac\">got fed up</a> with that fairly early on in the week and went on an already noted rampage through the model, deleting everything that I wasn't actively calling <i>right now</i>, preferably in multiple places.</p>

<p>Overall, the time spent just diving in and writing code resulted in a lot more of the final code-base than carefully plotting out where I needed to go<a href=\"#foot-Sat-Apr-30-025825EDT-2011\" name=\"note-Sat-Apr-30-025825EDT-2011\">[10]</a>. That's probably partly a result of the plans not being comprehensive enough, and partly a result of the plans changing mid-way. I'd argue that's healthy though; there are some specific interaction points that I'd have been hard pressed to predict in advance, but that became perfectly obvious when I tried to implement them properly.</p>

<p>Don't read this as \"don't plan\", because it does save a bit of time, but not as much as I thought<a href=\"#foot-Sat-Apr-30-025905EDT-2011\" name=\"note-Sat-Apr-30-025905EDT-2011\">[11]</a>. My best guess is that there's some point of diminishing returns with planning. You want to do about that much because doing less causes some pretty serious headaches in terms of direction, but if you do more, you're not helping (and are likely hurting). That's just a hypothesis based on my experience, of course, I'd love to see some experimental data about it.</p>

<p><b>...but remember to fix it up</b></p>

<p>The other side of the incremental approach is that it ends up producing a lot more code. The main catch is that you need to remember to stay flexible, since you might be changing large portions of the system at any given point. Even so, prospective coding still turned out to be a very powerful tool. Producing more code does mean that you have to periodically measure and cut again. There are already two places where I can see a lack of planning costing me efficiency, but I'm not sure I would have been able to predict that in advance.</p>

<p><b>Distractions hurt. A lot.</b></p>

<p>That really shouldn't even need saying, but there you have it. Trying to code up a storm doesn't work out very well when you're also re-modeling your kitchen. I'll know for next time, I guess. The one upshot is that it resulted in a system that's easy to fit in my head basically by <i>necessity</i>, because I had no hope whatsoever of getting an entire 8 hour stretch of time devoted to it.</p>

<p><b>Deadlines help. A lot. No, more than that.</b></p>

<p>I've had this project on the back-burner for close to four months. In those four months, I've managed to put together a half-way decent name generator and comb over the code-base for <a href=\"http://members.fortunecity.com/salkosuo/elite-for-emacs/\">Elite for Emacs</a> a dozen times or so. In the past five days or so, I did the rest of it<a href=\"#foot-Sat-Apr-30-030242EDT-2011\" name=\"note-Sat-Apr-30-030242EDT-2011\">[12]</a>. The deadline helped get me in gear where I probably would have sat indecisively for a further few months. Even with all the distractions, I easily did four times as much work since the beginning of the game jam as I did since starting on this.</p>

<p><b>Reflection helps. A lot. No, more than that. Keep going. A bit more. Ok, there.</b></p>

<p>Even more than the deadline, the fact that I had to look at this from different perspectives helped a lot. It wasn't just writing code, there was also a lot of brain power spent on thinking about how I would explain the code, what it meant in the grander scheme of the project, and whether there was a better way of doing it. It's a bit counter-intuitive, but it seems that reflection (thinking about things you've just done) is a lot more useful and a lot more productive than planning (thinking about things you're going to be doing soon). I didn't end up explaining it very well regardless, but the process of thinking up said explanations seemed to help in the construction regardless.</p>

<p><b>I don't know enough</b></p>

<p>Probably the biggest one. I'm not sure if any hypothetical reader can apply this, but I sure as hell will. I've got a lot of learning left to go in pretty much every direction. First, I get the feeling that most of the model could have been put together much better using CLOS than my current approach of <code>structs</code> and functions. For example, <code>planet-produce!</code>, <code>add-to-market!</code>, <code>banned?</code> and <code>local?</code><a href=\"#foot-Sat-Apr-30-030439EDT-2011\" name=\"note-Sat-Apr-30-030439EDT-2011\">[13]</a> would have made more sense as methods. I can say that without actually knowing much about CLOS other than the name, and I'll be going through documentation and tutorials as soon as I can squeeze it into my day. The 3D math is also something I'm rusty on. I could swear I used to know this stuff back in high school, but got surprisingly little use out of it since. It would have helped a lot. Specifically, having a clearer understanding of 3D transformation would have let me create an actual 3D interface instead of faking it poorly with layers. I've ... gotta work on that. Lastly<a href=\"#foot-Sat-Apr-30-030534EDT-2011\" name=\"note-Sat-Apr-30-030534EDT-2011\">[14]</a>, I still have no clue how to use <a href=\"http://www.lispworks.com/documentation/HyperSpec/Body/m_loop.htm\"><code>loop</code></a> properly. I gather I'm not alone since it gets its own chapter in both <a href=\"http://www.gigamonkeys.com/book/loop-for-black-belts.html\">PCL</a> and the <a href=\"http://cl-cookbook.sourceforge.net/loop.html\">CL Cookbook</a>, but it still caught me by surprise how deep the construct is.</p>

<p>So there. I knew I knew little, but it turns out I knew less than I knew.</p>

<p>That's certainly something to fix for next time.</p>

<hr />
<h5>Footnotes</h5>

<p>1 - <a href=\"#note-Sat-Apr-30-024647EDT-2011\" name=\"foot-Sat-Apr-30-024647EDT-2011\">[back]</a> - \"I guess Lisp can't create directories.\" Is what I would have thought about two years ago</p>
<p>2 - <a href=\"#note-Sat-Apr-30-024740EDT-2011\" name=\"foot-Sat-Apr-30-024740EDT-2011\">[back]</a> - And by \"slightly\", I mean \"almost not at all\"; the functions that did do necessary abstraction are still there</p>
<p>3 - <a href=\"#note-Sat-Apr-30-025032EDT-2011\" name=\"foot-Sat-Apr-30-025032EDT-2011\">[back]</a> - Produced, on balance, but it opens up that scarcity mechanic</p>
<p>4 - <a href=\"#note-Sat-Apr-30-025041EDT-2011\" name=\"foot-Sat-Apr-30-025041EDT-2011\">[back]</a> - Or, rather, reminder.</p>
<p>5 - <a href=\"#note-Sat-Apr-30-025129EDT-2011\" name=\"foot-Sat-Apr-30-025129EDT-2011\">[back]</a> - Or an open server, if you're feeling especially frisky</p>
<p>6 - <a href=\"#note-Sat-Apr-30-025452EDT-2011\" name=\"foot-Sat-Apr-30-025452EDT-2011\">[back]</a> - Libre, not gratis (although GIMP is that too).</p>
<p>7 - <a href=\"#note-Sat-Apr-30-025551EDT-2011\" name=\"foot-Sat-Apr-30-025551EDT-2011\">[back]</a> - leastwise, my time for the Game Jam is up</p>
<p>8 - <a href=\"#note-Sat-Apr-30-025613EDT-2011\" name=\"foot-Sat-Apr-30-025613EDT-2011\">[back]</a> - even when there are multiple people playing at once</p>
<p>9 - <a href=\"#note-Sat-Apr-30-025631EDT-2011\" name=\"foot-Sat-Apr-30-025631EDT-2011\">[back]</a> - though at the moment, it's really a lot of economic activity for its own sake because I didn't get to <a href=\"https://github.com/Inaimathi/cl-leet/issues/10\">TODO: Goals</a> or <a href=\"https://github.com/Inaimathi/cl-leet/issues/11\">TODO: Ship upgrades</a> yet</p>
<p>10 - <a href=\"#note-Sat-Apr-30-025825EDT-2011\" name=\"foot-Sat-Apr-30-025825EDT-2011\">[back]</a> - which is to say, most of the code resulting from careful planning was later replaced by code that had an immediate, unplanned need</p>
<p>11 - <a href=\"#note-Sat-Apr-30-025905EDT-2011\" name=\"foot-Sat-Apr-30-025905EDT-2011\">[back]</a> - and probably not as much as <i>you</i> think, if you're a <a href=\"http://www.joelonsoftware.com/\">Joel</a> fan</p>
<p>12 - <a href=\"#note-Sat-Apr-30-030242EDT-2011\" name=\"foot-Sat-Apr-30-030242EDT-2011\">[back]</a> - which is to say, ported it from Elisp to CL, a working market system, GUI with faux-3D interface, debugging and a copious amount of testing</p>
<p>13 - <a href=\"#note-Sat-Apr-30-030439EDT-2011\" name=\"foot-Sat-Apr-30-030439EDT-2011\">[back]</a> - and others besides, I'm sure</p>
<p>14 - <a href=\"#note-Sat-Apr-30-030534EDT-2011\" name=\"foot-Sat-Apr-30-030534EDT-2011\">[back]</a> - or, at least, the last specific thing I was surprised to find myself ignorant of</p>
"))
((5202 3723 552817000) :INSERT (44 :POSTED 3513124800))
((5202 3723 552823000) :INSERT (44 :TAG :COMMON-LISP))
((5202 3723 552827000) :INSERT (44 :TAG :GENERAL-PROGRAMMING-THOUGHTS))
((5202 3723 552831000) :INSERT (44 :TAG :HUNCHENTOOT))
((5202 3723 552839000) :INSERT (44 :TAG :SPECULATION))
((5202 3723 553045000) :INSERT (45 :TITLE "Quite possibly The Best Line Ever"))
((5202 3723 553053000) :INSERT (45 :FILE "best-line-ever.html"))
((5202 3723 553057000) :INSERT (45 :EDITED 3610022331))
((5202 3723 553061000) :INSERT
 (45 :BODY
  "<blockquote>“I don’t believe in magic that works whether or not you believe in it!” <span class=\"sig\"><a href=\"http://yudkowsky.net/rational/the-simple-truth\">-Markos Sophisticus Maximus from </a></span></blockquote>
      "))
((5202 3723 553067000) :INSERT (45 :POSTED 3513556800))
((5202 3723 553621000) :INSERT (46 :TITLE "Freedom"))
((5202 3723 553628000) :INSERT (46 :FILE "freedom.html"))
((5202 3723 553631000) :INSERT (46 :EDITED 3610022331))
((5202 3723 553633000) :INSERT
 (46 :BODY
  "<p>The discussions around communities I frequent has recently touched on the idea of freedom; specifically, what it means in the context of software. We've moved past the <a href=\"http://en.wikipedia.org/wiki/Gratis_versus_libre\">gratis vs libre</a> confusion, thankfully, but there are still arguments about what \"free\" really means. Some are under the impression that in this context it means \"I should be free to get my work done\". That's a noble goal, but it misses the point somewhat. The sentiment behind that statement was <a href=\"http://www.reddit.com/r/linux/comments/gywoj/adobe_and_linux_creative_suite_for_linux/\">in defending PhotoShop</a> (\"It shouldn't matter that I'm using proprietary software, the point is that it can do the job\"). A fellow redditor puts it better than I could;</p>

<blockquote>
  <p>Software freedom is as much about choice as Lincoln's Emancipation Proclamation was about giving people the choice as to whether they wanted to retain slavery or not. Software freedom is about ending certain restrictive forms of software licensing and distribution which are harmful to the public and to technological progress in general. <span class=\"sig\">-<a href=\"http://www.reddit.com/user/spiceweasel\">spiceweasel</a></span></p>
</blockquote>

<p>Laced with the standard internet forum hyperbole, but it gets the point across. It's not about \"freedom of choice\", it's about some freedoms that are fundamental to the creation of software</p>

<blockquote>
<ul>
  <li>The freedom to run the program, for any purpose (freedom 0).</li>
  <li>The freedom to study how the program works, and change it to make it do what you wish (freedom 1). Access to the source code is a precondition for this.</li>
  <li>The freedom to redistribute copies so you can help your neighbor (freedom 2).</li>
  <li>The freedom to distribute copies of your modified versions to others (freedom 3). By doing this you can give the whole community a chance to benefit from your changes. Access to the source code is a precondition for this.<span class=\"sig\">-<a href=\"http://www.gnu.org/philosophy/free-sw.html\">GNU Free Software Definition</a></span></li>
</ul>
</blockquote>

<p>These are important freedoms to programmers and to users who understand programs. I certainly wouldn't trade them for anything in my private life, which is why I've been trying like hell to make this a free software household with as few compromises as possible.</p>

<h3>Freedom?</h3>

<p>Now lets be honest from the other perspective. </p>

<p>GIMP contains about <a href=\"http://manual.gimp.org/en/gimp-introduction-history-2-0.html\">230 000 lines of C code</a>. Inkscape was at <a href=\"http://inkscape.org/status/status_20031215.php\">132 134 lines of C/C++ back in 2003</a> (pretty sure they've racked up a few 10Ks in the past 8 years or so). I have good cause to believe that PhotoShop is much larger<a href=\"#foot-Wed-May-18-234811EDT-2011\" name=\"note-Wed-May-18-234811EDT-2011\">[2]</a>. I get that it would be morally better for PhotoShop to become a piece of libre software, but I'm having trouble convincing myself that there would be a practical benefit for the end user.</p>

<p>Here's an example near and dear to my heart. Emacs. It's extensible and reasonably simple to tweak. If you know Elisp, you can push it further than I've seen any other editor go. Aside from the fact that I've hooked in quite a number<a href=\"#foot-Wed-May-18-234920EDT-2011\" name=\"note-Wed-May-18-234920EDT-2011\">[3]</a> of components released by other Emacs users, I've also written a few of my own, and lightly amended some that I include. As the GNU page says, \"Access to the source code is a precondition for this\". When I say \"simple to tweak\", by the way, I mean \"I can put together a new mode in an hour or two\". In fact, as I was writing this article, I decided to take a poke at <a href=\"https://github.com/Inaimathi/emacs-utils/blob/master/blog-mode.el\">blog-mode</a> to change how a couple things work, and I didn't have to so much as <i>restart</i> Emacs. Hypothetically, if I had to restart (or god forbid, re-compile it) every time I tweaked something, there would be a little less incentive for me to engage in this kind of tool-building myself. There's some pre-conditions to building a system that behaves this way:</p>

<p>0. components must be hot-swappable</p>

<p>1. required code must be terse (but not past that threshold that takes it to <code><a href=\"http://perl.plover.com/obfuscated/\">line-noise</a></code> levels)</p>

<p>2. it must be simple and consistent enough that it doesn't take all of your brainpower over several hours to get into it and make changes (or, you must be able to more or less ignore the rest of the system while making changes to a specific piece)</p>

<p>3. An error can't bring the whole thing crashing down. It needs to toss you an exception gracefully, let you try some stuff to fix the problem dynamically and then continue on its merry way <i>without</i> a restart.</p>

<p>The reason I bring this up is</p>

<blockquote>
  <p>1. The freedom to study how the program works, and change it to make it do what you wish</p>
</blockquote>

<p>Exactly how does Freedom One work if the program in question is larger than you can fit into your head? What if you <i>can</i> fit it into your head, but it takes several days or weeks of study? What if you can edit it but every time you tweak anything, you need to go through a 20 minute compilation step? Or even if you only had to go through that if you made some mistake in your tweaks? What if you didn't know the language it was written in, or didn't know how to program in the first place? At what point, exactly, can we say that whether the piece of software you've got cracked open is Free or not, you are not free to change it? It surprised me to no end to hear that there are actually people out there using Emacs who have neither the ability nor the desire to program in <i>any</i> language, let alone a quirky dialect of Lisp that's used exclusively for Emacs extension and development, but they apparently exist. In fact, outside the Emacs users community, non-programmers are the vast majority. Free Software must seem like the craziest catch 22 ever to them. </p>

<p>You have the right and freedom to study and change this immeasurably complex machine that you can't possibly understand without devoting your life to (and which <i>will</i> barf at you with the slightest provocation).</p>

<p>If you line this up with the argument about Freedom and PhotoShop, it's pretty obvious what's happening. Hell, Stallman knew exactly what's happening a while ago.</p>

<blockquote>
  The public traded nominal freedoms that it was not in a position to exercise and in exchange got some benefit (the benefit of more books being written). So if you have something that you can't use at all and you trade it for something of some value to you, you have gained. Whether or not it's the best possible deal you could have made, that's another question, but at least it was a beneficial deal.<span class=\"sig\">-Richard Stallman (in his <a href=\"http://www.youtube.com/watch?v=SNBMdDaYhZA\">talk at University of Calgary</a>)</span>
</blockquote>

<p>(The above was in reference to the establishment of copyright, but the principles still apply)</p>

<p>The people using Adobe's software don't have a hope of studying and changing it even if they had access to the complete source code, so why the hell should they care that they're <i>also</i> deprived of that source code? Or legally barred from studying and changing it? From the outside, it must seem like passing a law against unassisted breathing on the fucking moon. The <i>user-facing</i> documentation of PhotoShop is thick enough to beat someone to death with (or it used to be before it was digitized), so the sheer volume of developer-facing docs that comes out of this monstrosity is probably enough to drive someone to madness. If you provide a tool to aid in the understanding of an immeasurably complex machine, but that tool is itself immeasurably complex, you've done no good.</p>

<p>Freedom One does matter to me, but it's only because the software I use is (for the most part) simple and open enough to actually change myself. It matters in that situation whether I'm allowed to.</p>

<p>Is it enough that some awe-inspiring genius exists out there somewhere that can dive in and re-write PS in short order? Or that if the source was opened, there could possibly be a group of people that could fork it and make steady progress? Turning this over and over in my mind, I can only see a moral distinction and not a practical one. If the end user has no way of exercising their Freedom One, then I'm doubtful that the majority of them will ever take up the Free Software banner, and opening up something like PhotoShop runs into some fairly obvious walls. First, the sheer size of the thing means that a theoretical fork of the codebase would go literally nowhere for a very long time as people ramped up. Second, the people who tend to use it aren't programmers, and that's actually three big potential problems, take your pick. </p>

<p>Second a) the size of the team is going to be small. Probably smaller than is useful on a task like this. </p>

<p>Second b) the people you get aren't going to have the vested interest that comes with building a tool that they themselves want to use. They'll have to rely on the time tested method of <a href=\"http://steve-yegge.blogspot.com/2008/08/business-requirements-are-bullshit.html\">gathering requirements</a> if they're going to <i>grow</i> the program at all.</p>

<p>Second c) the team is going to be made up mostly of non-programmers, which sounds like almost-certain-fail from the get-go.</p>

<p>There's an entirely other discussion to be had about the middling UI quality in projects that aren't of direct use to programmers, but I'm not getting into that one with this little sleep.</p>

<h3>Freedom!</h3>

<p>It's beginning to dawn on me that if you really support the idea of Free Software, you are also logically opposed to the idea of monolithic systems. That if your goal is to maximize the Freedom of users, you <b>can not</b> hand them many hundred thousand lines of code (with an optional several thousand pages of documentation) and be content that you did your job. That suggests some basic principles by which to build Free Software</p>

<ul>
  <li>it needs to be built in small, individually understandable pieces (a few hundred lines across one file, not a few hundred thousand across hundreds)</li>
  <li>large systems need to be built more or less by combining smaller systems</li>
  <li>a large system shouldn't fail because one or more components failed</li>
  <li>a system should be modifiable without restarting</li>
</ul>

<p>Which is more or less how the *nix culture likes to build things from what I've seen. The trouble is how to reconcile this with the needs of end-users, and more specifically the moral/practical ramifications of doing so. Making things as easy as possible for non-programmers<a href=\"#foot-Thu-May-19-001035EDT-2011\" name=\"note-Thu-May-19-001035EDT-2011\">[4]</a> implies monoliths. They need as much of their computing experience handled by the computer as possible. It's really not acceptable, for example, to have the end user specify which audio/video codec and resolution to use for converting an mp4 to an avi. They likely don't know what a codec is, for starters. </p>

<p>The question I'm going to wrestle with for the next little while is what to do about those people. On the one hand, I really don't think a rational approach is \"Well, they should just learn how to program\". That's a deathtrap, and if you disagree with me, I invite you to try talking about it to a medical receptionist sometime. The thing is, unless the end user is properly engaged and shown how their own freedoms are being infringed upon by proprietary software, they'll never jump ship. The next question is: is it morally right to grudge them the choice of trading nominal freedoms they are not in a position to exercise in exchange for some benefit? If a graphic designer chooses to use PhotoShop, should I be telling them to stop and use GIMP instead because proprietary software is a social problem, or is that fair play until they try to get <i>me</i> to switch back to Adobes' steaming pile? </p>

<p>I have no answers for now, and I'm heading to sleep before I fall over onto my keyboard, but the thoughts are still bugging me in an odd way. Hopefully this piece released some pressure for the short term, at least.</p>


<hr />
<h5>Footnotes</h5>

<p>1 - <a href=\"#note-Wed-May-18-234811EDT-2011\" name=\"foot-Wed-May-18-234811EDT-2011\">[back]</a> - I'm making the assumption since Adobe arguably has more man-hours to throw at the thing, releases new versions fairly regularly, has to implement a lot more compatibility with legacy/third-party file formats and supports color modes that GIMP doesn't. Granted the <i>combined</i> SLOCs of Inkscape/GIMP/Scribus/Synfig probably outweigh the Adobe Suite because the latter group shares some code, but comparing one to one programs seems like it would tilt the scales towards the proprietary offering.</p>

<p>2 - <a href=\"#note-Wed-May-18-234920EDT-2011\" name=\"foot-Wed-May-18-234920EDT-2011\">[back]</a> -  17 to be precise.</p>

<p>3 - <a href=\"#note-Thu-May-19-001035EDT-2011\" name=\"foot-Thu-May-19-001035EDT-2011\">[back]</a> - Who, again, are actually the majority of humans, and will probably remain so for a long time yet. Though I agree with Sussman that <a href=\"http://video.google.com/videoplay?docid=-2726904509434151616#\">there's immense value in teaching programming to non-programmers</a>.</p>
"))
((5202 3723 553766000) :INSERT (46 :POSTED 3514680000))
((5202 3723 553769000) :INSERT (46 :TAG :FREE-SOFTWARE))
((5202 3723 553772000) :INSERT (46 :TAG :GENERAL-PROGRAMMING-THOUGHTS))
((5202 3723 553997000) :INSERT (47 :TITLE "Ugh."))
((5202 3723 554006000) :INSERT (47 :FILE "php.html"))
((5202 3723 554008000) :INSERT (47 :EDITED 3610300578))
((5202 3723 554010000) :INSERT
 (47 :BODY
  "<p>I'm officially taking a break from thinking. And I'm doing it by taking in some contract work. NDAs are signed, and contracts exchanged, so while I can't really tell you specifics, it's a WordPress site. Nothing so nourishing as my usual fare; this is the proverbial greasy, bacon and cheese pizza for the soul.</p>

<p>The situation has blown me away, by the way. Did you know that there's a staggering amount of money out there for enterprising young hacker/graphic-designer dual classes willing to tweak around with CSS and PHP? It's bizarre because there's nothing inherently difficult about this. It's a fairly well documented, intuitively-named, neatly-packaged pile of security-errors-waiting-to-happen and all you really need to do is poke at a couple of places to make the colors show up right and the logo line up with the menu. It feels strange. I <i>know</i> I struggled with this same shit back at school, but it doesn't feel tough any more. It feels a bit like getting past Cinnabar Island with your pack of level 45 motherfuckers and finding yourself back in idyllic Pallet Town tearing through now-helpless level ~3 Pidgeys. That analogy may brand me as an irredeemable nerd, so feel free to substitute a more mainstream level-grinding RPG if you like. My point is, I used to be helpless in this situation, and I am now arranging reality to suit my whim.</p>

<p>The odd part given my recent thoughts, the really odd part, is that it pays <i>at all</i>. Let alone well. This is a simple task that anyone with sufficient time, interest and an internet connection (broadband optional) can learn how to do. It's the ultimate expression of freedom brought about by the GPL style of licensing and application design I talked about earlier. Why the ever-loving <b>fuck</b> aren't there more non-moron contractors taking advantage of the situation? Why aren't these jobs being shipped overseas like so many people seem to think all IT should be? If I had to pick <i>one</i> type of development that a language barrier wouldn't cock up, it would be CMS tweakery. Oddly, it's the one type of IT work that doesn't seem to be going anywhere, at least for the short term, because every place I've worked at so far and every client I've contracted with is having some local WordPress/Joomla/Drupal work done<a href=\"#foot-Sun-Jun-12-123210EDT-2011\" name=\"note-Sun-Jun-12-123210EDT-2011\">[1]</a>.</p>

<p>Back to the Free thing though, since that's what I was thinking about prior to my break. How does PHP+WordPress support those freedoms? First off, it actually <a href=\"http://wordpress.org/about/gpl/\">is GPL2</a><a href=\"#foot-Sun-Jun-12-123225EDT-2011\" name=\"note-Sun-Jun-12-123225EDT-2011\">[2]</a> but second off, it hits all of my added requirements, seemingly by accident.</p>

<blockquote>
  <p>0. components must be hot-swappable</p>
  <p>1. required code must be terse (but not past that threshold that takes it to line-noise levels)</p>
  <p>2. it must be simple and consistent enough that it doesn't take all of your brainpower over several hours to get into it and make changes (or, you must be able to more or less ignore the rest of the system while making changes to a specific piece)</p>
  <p>3. An error can't bring the whole thing crashing down. It needs to toss you an exception gracefully, let you try some stuff to fix the problem dynamically and then continue on its merry way without a restart.<span class=\"sig\">-me, <a href=\"/article?name=freedom.html\">last time</a></span></p>
</blockquote>

<p>Components are hot-swappable thanks to how it interacts with Apache<a href=\"#foot-Sun-Jun-12-123259EDT-2011\" name=\"note-Sun-Jun-12-123259EDT-2011\">[3]</a>. WordPress is terse yet readable, it's consistent enough that I can get into the codebase easily <b>and</b> I can ignore pieces outside the specific widget/CSS component/theme I'm dealing with at whatever granularity. Finally, an error nukes a page, but doesn't crash the entire site (unless it's made in a template, but that's to be expected). Take <i>that</i>, every language I have at least a vague interest in. I read somewhere that the winner of a solution race frequently isn't the best, rather the worst that's still Good Enough™. This ... may sadly be that. Much as I wish a better language had a stronger web presence, PHP seems to be it outside of \"actual\" programmers<a href=\"#foot-Sun-Jun-12-123418EDT-2011\" name=\"note-Sun-Jun-12-123418EDT-2011\">[4]</a>. </p>

<p>So yeah. I'd prefer the dominating position to be held by a functional, consistent, macro-enabled (or lazy), assertion-capable (or strong-type-inferencing), namespace-enabled language without a deprecated list that includes half its functions, but PHP has floated to the top. And I'm kind of happy about that. Between its pervasiveness<a href=\"#foot-Sun-Jun-12-123509EDT-2011\" name=\"note-Sun-Jun-12-123509EDT-2011\">[5]</a>, GPLv2 licensing of key applications and inherently open code, PHP may be doing more to promote Freedom in the Stallman sense than perhaps any other server-side language. Of course I should probably ding it for also being behind Facebook, but <i>maybe</i> it's time to put a new logo up in the title bar...</p>


<hr />
<h5>Footnotes</h5>

<p>1 - <a href=\"#note-Sun-Jun-12-123210EDT-2011\" name=\"foot-Sun-Jun-12-123210EDT-2011\">[back]</a> - I've also seen exactly one SharePoint, which I'm told I should be thankful that I didn't have to maintain</p>

<p>2 - <a href=\"#note-Sun-Jun-12-123225EDT-2011\" name=\"foot-Sun-Jun-12-123225EDT-2011\">[back]</a> - so it supports the <a href=\"http://www.gnu.org/philosophy/free-sw.html\">four freedoms</a></p>

<p>3 - <a href=\"#note-Sun-Jun-12-123259EDT-2011\" name=\"foot-Sun-Jun-12-123259EDT-2011\">[back]</a> - or <a href=\"http://nginx.org/\">whatever</a> <a href=\"http://www.lighttpd.net/\">server</a> <a href=\"http://www.hiawatha-webserver.org/\">you use</a></p>

<p>4 - <a href=\"#note-Sun-Jun-12-123418EDT-2011\" name=\"foot-Sun-Jun-12-123418EDT-2011\">[back]</a> - who are a minority as evidenced by the <a href=\"http://www.scriptol.com/cms/popularity.php\">numbers</a>; WordPress, Joomla and Drupal between them have truly intimidating market share</p>

<p>5 - <a href=\"#note-Sun-Jun-12-123509EDT-2011\" name=\"foot-Sun-Jun-12-123509EDT-2011\">[back]</a> - in terms of deployment and number of \"native speakers\"</p>
  "))
((5202 3723 554068000) :INSERT (47 :POSTED 3516753600))
((5202 3723 554071000) :INSERT (47 :TAG :GENERAL-PROGRAMMING-THOUGHTS))
((5202 3723 554073000) :INSERT (47 :TAG :PHP))
((5202 3723 554294000) :INSERT (48 :TITLE "Kindle and Thoughts about Work"))
((5202 3723 554299000) :INSERT (48 :FILE "kindle.html"))
((5202 3723 554301000) :INSERT (48 :EDITED 3610273171))
((5202 3723 554303000) :INSERT
 (48 :BODY "<p>So I got something in the mail a week ago.</p>

<img src=\"/static/img/kindle.jpg\" class=\"middle\" alt=\"A kindle\" />

<p>Ok, not in the mail, UPS delivered it in their usual, careless manner, but I'm not talking about that right now.</p>

<p>There were a few alternatives I could have picked from, including the awesome looking <a href=\"http://gizmodo.com/5807381/barnes-and-noble-simple-touch-nook-review-this-is-the-e+reader-you-want\">Nook Simple Touch</a><a href=\"#foot-Mon-Jul-18-111527EDT-2011\" name=\"note-Mon-Jul-18-111527EDT-2011\">[1]</a>, but I went with the closed option this time. I feel like a traitor already, subscribing to this stupid, proprietary, walled-garden of a device clearly meant as a leash to Amazon's book store.</p>

<p>There's a lot obviously wrong with it that's wrong with much of the closed software world. Things have been engineered properly, or at least as properly as they can be given the constraints, but actually using the device runs you up against some small yet annoying limits pretty quickly. That you can't get custom wallpapers or arrange your books into categories from your computer without jailbreaking. That there's no such thing as a standalone notepad app, and you can't build it because the Kindle SDK is in beta, and signing up requires you to submit an application proposal for review. That the browser usability isn't exactly stellar, but you can't really do anything about it because you don't have the source, or the ability to make it run client-side scripts.</p>

<p>The reason that made me purchase this, over any other ereader out there, is the free (as in beer) 3G wireless attached to it. This is a taste of the future for someone living in Canada (or, from what I hear, in most places outside of Japan and South Korea) and I wasn't about to wait the several years it's going to take for other device providers to get their shit together.</p>

<p>It's still not my ideal device<a href=\"#foot-Mon-Jul-18-111609EDT-2011\" name=\"note-Mon-Jul-18-111609EDT-2011\">[2]</a>, but about as close as I can get with consumer-grade electronics at the moment. The biggest differences between it and the other devices I've tried variously<a href=\"#foot-Mon-Jul-18-111657EDT-2011\" name=\"note-Mon-Jul-18-111657EDT-2011\">[3]</a> are the size, battery life and global 3G. Small size is obviously an advantage, but this thing is <i>ridiculously</i> light; at about 9 ounces it's actually competing with my cellphone in terms of portability. As an aside, it's also rather sturdy. Not that I'd try playing catch with it or anything, but it's definitely not as fragile as the stuff coming out of Cupertino. The battery-life is hands down best among portables; between the ARM processor and e-ink screen, power consumption is low enough to give it \"two months\" between charges. Realistically, it's two weeks or so, but that's still a damn sight better than competition. Like I said, the 3G is the winner here; it lets me do things like check various entertaining reddits on my way home, or check my email. Technically, I could do this with my phone too, but the screen is tiny enough to make it annoying, and the battery life is flaky enough that I have to charge the thing every day if I want to do any semi-serious browsing on it.</p>

<p>That's it for my new toys (for now anyway).</p>

<p>Work-wise. Man, I dunno. Non-free development has some pretty serious drawbacks. Not the least of which is that you can't really talk about implementation specifics without an NDA, and that's annoying as all shit. I'm working on an implementation of an online proofing tool (which you can actually see running over <a href=\"http://www.mdx-proof.com/\">here</a>; don't talk to me about the name, that's all the marketing guys) built in Common Lisp. The work is a lot of fun, and I get to very slowly nudge my limits in terms of solid user interface development and flexible coding, but I can't actually show it to anyone. It's improving at the glacial pace necessitated by the fact that I'm the only coder on it full time, and the rest of the people looking at it don't really know Lisp very well. I'm hoping to turn that around soon; arguing with marketing and sales people about why we should put something out into the copyleft ecology is...difficult. I haven't tried mentioning \"Free software\" because these are guys that'll respond according <a href=\"http://www.google.ca/url?sa=t&source=video&cd=1&ved=0CDYQtwIwAA&url=http://www.youtube.com/watch?v=-fCxf5c1Qyw\">Raymond's</a> predictions of business people.</p>

<p>The way they see it, we can sell it if we own it, and damn the consequences. Granted, the pool of programmers available for a Common Lisp web project is kind of narrow, but we could really do some good here, I get the feeling. Both in the sense that having such a project might make it easier to identify the next few people we want to hire (and we will at some point), and in the sense that opening it up will make it a better, more widely used product. And in the sense that free use of our tool would likely benefit the users. <b>And</b>, perhaps most significantly, I'll be able to put snippets up here or at <a href=\"http://codereview.stackexchange.com/\">codereview.SE</a> without worrying about the people helping me getting sued at some undetermined point in the future.</p>

<p>Not much of a segway there, granted, but I'm starting to get pissed off. I have seven or eight different blog posts floating around in my head, half finished and in the process of construction, so I had to get something out here, even if it's not polished. There are <a href=\"http://www.reddit.com/r/IAmA/comments/avkcv/i_am_maddox_ama/c0jmbjz\">differing opinions</a> about how you should write, and I tend to hold with the <a href=\"http://www.zefrank.com/theshow/archives/2006/07/071106.html\">brain crack</a> angle. Seven ideas in the air and none on a hard drive sounds like I'm going too far in the perpetual-polishing direction. </p>

<hr />
<h5>Footnotes</h5>

<p>1 - <a href=\"#note-Mon-Jul-18-111527EDT-2011\" name=\"foot-Mon-Jul-18-111527EDT-2011\">[back]</a> - Which is a real, no-fooling, <a href=\"http://www.youtube.com/watch?v=YJ9j70OFjac\">rootable</a> Android device with an e-ink touchscreen, a micro-SD card reader, and a month-long battery life.</p>

<p>2 - <a href=\"#note-Mon-Jul-18-111609EDT-2011\" name=\"foot-Mon-Jul-18-111609EDT-2011\">[back]</a> - That would be a color unit whose screen projects directly onto my retinas, has removable media/USB slots and connects directly to my thenarm, hypothenarm, interossei and lumbrical muscles for input.</p>

<p>3 - <a href=\"#note-Mon-Jul-18-111657EDT-2011\" name=\"foot-Mon-Jul-18-111657EDT-2011\">[back]</a> - The i-family, laptops and netbooks.</p>
"))
((5202 3723 554364000) :INSERT (48 :POSTED 3519950400))
((5202 3723 554367000) :INSERT (48 :TAG :GENERAL-PROGRAMMING-THOUGHTS))
((5202 3723 554743000) :INSERT (49 :TITLE "Joel Test Patch"))
((5202 3723 554749000) :INSERT (49 :FILE "joel-test.html"))
((5202 3723 554751000) :INSERT (49 :EDITED 3610022331))
((5202 3723 554753000) :INSERT
 (49 :BODY "<p>Dear Mr. Spolsky,</p>

<p>I've been a big fan of your blog while you were updating it regularly. It was a very good collection of essays on managing a software enterprise from the Windows/shrinkwrap perspective (the second one is actually a distinction I learned from reading your excellent <a href=\"http://www.joelonsoftware.com/articles/FiveWorlds.html\">Five Worlds</a> piece which still rings true for me).</p>

<p>During a recent spare moment, I re-read <a href=\"http://www.joelonsoftware.com/articles/fog0000000043.html\">The Joel Test</a>, and seriously considered how closely an organization that scores between 8 and 12 would resemble a place where I'd like to work. A few bugs emerged; </p>

<ul>
  <li>I would <i>not</i> enjoy working at a place that still insists on CVS (SVN would be acceptable if for no other reason than <a href=\"http://www.kernel.org/pub/software/scm/git/docs/git-svn.html\">git-svn</a> exists and is bi-directional)</li>
  <li>\"The Best Tools Money Can Buy\", in the sense of hardware, isn't really necessary (in other circumstances, I'd argue that it's unnecessary in the software sense too, because I'm unsure money can buy the best software tools, but I'll put that down to my bias as a Linux user and say no more about it)</li>
  <li>Specs and schedules aren't necessarily the best way to do things. Both words also have a lot of baggage and history, and as a result, some organizations may claim a point or two here even if they're doing it wrong, while others might be penalized even though they adhere to the principles explained in the associated other articles you've written.</li>
</ul>

<p>That said, I humbly submit the following patch for your consideration. Hopefully, I'm not wrong about all of it (if nothing else, I welcome a counter-argument and explanation of why I'm wrong).</p>

<p>Yours</p>

<p>-Inaimathi</p>

========================================

<span class=\"diff\">
<span class=\"label\">
<p>diff -u joel-test.html joel-test-edits.html</p>
<p>--- joel-test.html   2011-07-20 10:28:40.000000000 -0400</p>
<p>+++ joel-test-edits.html  2011-07-20 11:05:06.000000000 -0400</p>
<p>  @@ -5,14 +5,14 @@</p></span>

<p>The Joel Test</p>

<p><span class=\"diff-removed\">-Do you use source control?</span></p>
<p><span class=\"diff-added\">+Do you use distributed source control?</span></p>
<p>Can you make a build in one step?</p>
<p>Do you make daily builds?</p>
<p>Do you have a bug database?</p>
<p>Do you fix bugs before writing new code?</p>
<p><span class=\"diff-removed\">-Do you have an up-to-date schedule?</span></p>
<p><span class=\"diff-added\">+Do you have an up-to-date schedule or work queue?</span></p>
<p><span class=\"diff-removed\">-Do you have a spec?</span></p>
<p><span class=\"diff-added\">+Do you have a minimal spec?</span></p>
<p><span class=\"diff-removed\">-Do you use the best tools money can buy?</span></p>
<p>Do programmers have quiet working conditions?</p>
<p>Do you have testers?</p>
<p>Do new candidates write code during their interview?</p>
<p>Do you do hallway usability testing?</p>
<p><span class=\"label\">@@ -24,8 +24,8 @@</span></p>
<p>Of course, these are not the only factors that determine success or failure: in particular, if you have a great software team working on a product that nobody wants, well, people aren't going to want it. And it's possible to imagine a team of \"gunslingers\" that doesn't do any of this stuff that still manages to produce incredible software that changes the world. But, all else being equal, if you get these 12 things right, you'll have a disciplined team that can consistently deliver.</p>
<p><span class=\"diff-removed\">-1. Do you use source control?</span></p>
<p><span class=\"diff-removed\">-I've used commercial source control packages, and I've used CVS, which is free, and let me tell you, CVS is fine. But if you don't have source control, you're going to stress out trying to get programmers to work together. Programmers have no way to know what other people did. Mistakes can't be rolled back easily. The other neat thing about source control systems is that the source code itself is checked out on every programmer's hard drive -- I've never heard of a project using source control that lost a lot of code.</span></p>
<p><span class=\"diff-added\">+1. Do you use distributed source control?</span></p>
<p><span class=\"diff-added\">+I've used commercial source control packages, and I've used Mercurial, which is free, and let me tell you, any of the free tools (Mercurial, Git, Bazaar) are fine. But if you don't have source control, you're going to stress out trying to get programmers to work together. Mistakes can't be rolled back easily. The other neat thing about distributed source control systems is that the source code itself is checked out on every programmer's hard drive -- I've never heard of a project using distributed source control that lost any code, or lost any time as a result of a poor network connection to the office.</span></p>
<p>2. Can you make a build in one step?</p>
<p>By this I mean: how many steps does it take to make a shipping build from the latest source snapshot? On good teams, there's a single script you can run that does a full checkout from scratch, rebuilds every line of code, makes the EXEs, in all their various versions, languages, and #ifdef combinations, creates the installation package, and creates the final media -- CDROM layout, download website, whatever.</p>
<p><span class=\"label\">@@ -82,7 +82,7 @@</span></p>
<p>Another great thing about keeping the bug count at zero is that you can respond much faster to competition. Some programmers think of this as keeping the product ready to ship at all times. Then if your competitor introduces a killer new feature that is stealing your customers, you can implement just that feature and ship on the spot, without having to fix a large number of accumulated bugs.</p>
<p><span class=\"diff-removed\">-6. Do you have an up-to-date schedule?</span></p>
<p><span class=\"diff-added\">+6. Do you have an &lt;b&gt;up-to-date&lt;/b&gt; schedule or work queue?</span></p>
<p>Which brings us to schedules. If your code is at all important to the business, there are lots of reasons why it's important to the business to know when the code is going to be done. Programmers are notoriously crabby about making schedules. \"It will be done when it's done!\" they scream at the business people.</p>
<p>Unfortunately, that just doesn't cut it. There are too many planning decisions that the business needs to make well in advance of shipping the code: demos, trade shows, advertising, etc. And the only way to do this is to have a schedule, and to keep it up to date.</p>
<p><span class=\"label\">@@ -91,7 +91,9 @@</span></p>
<p>Keeping schedules does not have to be hard. Read my article Painless Software Schedules, which describes a simple way to make great schedules.</p>
<p><span class=\"diff-added\">+A work queue is the exact same thing, but without the mental baggage that people bring to the table when discussing scheduling (I prefer to ask this one, because it's inherently up-to-date, and people who make a schedule at the beginning of the project then never look at it again tend to mentally skip over \"up-to-date\" and just answer \"yes\"). Please read the <a href=\"http://www.joelonsoftware.com/articles/fog0000000245.html\">Painless Software Schedules</a> linked above. In fact, here, have another <a href=\"http://www.joelonsoftware.com/articles/fog0000000245.html\">link</a>. The point of the exercise, whether it's a schedule or work queue is that it's something you update each day to reflect the current state as honestly and recently as possible.</span></p>
<p><span class=\"diff-removed\">-7. Do you have a spec?</span></p>
<p><span class=\"diff-added\">+7. Do you have a minimal spec?</span></p>
<p>Writing specs is like flossing: everybody agrees that it's a good thing, but nobody does it. </p>
<p>I'm not sure why this is, but it's probably because most programmers hate writing documents. As a result, when teams consisting solely of programmers attack a problem, they prefer to express their solution in code, rather than in documents. They would much rather dive in and write code than produce a spec first.</p>
<p><span class=\"label\">@@ -100,6 +102,10 @@</span></p>
<p>My pet theory is that this problem can be fixed by teaching programmers to be less reluctant writers by sending them off to take an intensive course in writing. Another solution is to hire smart program managers who produce the written spec. In either case, you should enforce the simple rule \"no code without spec\".</p>
<p><span class=\"diff-added\">+Don't take this to mean that you should mandate several hundred page documents before any code is done; the spec needs to be just detailed enough that someone other than the writer can correctly understand what's being built. If you keep it minimal, you'll also keep yourself out of the temptation to use the spec as a club against your customers (whether internal or external).</span></p>
<p><span class=\"diff-added\">+</span></p>
<p><span class=\"diff-added\">+An alternative to the spec is a requirements database to go with that bug tracking database that you need. The point here is to make sure your spec can grow and be read by anyone who needs it any time, avoid the \"spec-as-club\" and \"feature-vs-bug\" arguments while still collapsing the waveform. You do <i>not</i> want to work on Schrödinger's project. Ever.</span></p>
<p><span class=\"diff-added\">+</span></p>
<p>Learn all about writing specs by reading my 4-part series.</p>
<p>8. Do programmers have quiet working conditions?</p>
<p><span class=\"label\">@@ -117,25 +123,14 @@</span></p>
<p>Now let's move them into separate offices with walls and doors. Now when Mutt can't remember the name of that function, he could look it up, which still takes 30 seconds, or he could ask Jeff, which now takes 45 seconds and involves standing up (not an easy task given the average physical fitness of programmers!). So he looks it up. So now Mutt loses 30 seconds of productivity, but we save 15 minutes for Jeff. Ahhh!</p>
<p><span class=\"diff-removed\">-9. Do you use the best tools money can buy?</span></p>
<p><span class=\"diff-removed\">-Writing code in a compiled language is one of the last things that still can't be done instantly on a garden variety home computer. If your compilation process takes more than a few seconds, getting the latest and greatest computer is going to save you time. If compiling takes even 15 seconds, programmers will get bored while the compiler runs and switch over to reading The Onion, which will suck them in and kill hours of productivity.</span></p>
<p><span class=\"diff-removed\">-</span></p>
<p><span class=\"diff-removed\">-Debugging GUI code with a single monitor system is painful if not impossible. If you're writing GUI code, two monitors will make things much easier.</span></p>
<p><span class=\"diff-removed\">-</span></p>
<p><span class=\"diff-removed\">-Most programmers eventually have to manipulate bitmaps for icons or toolbars, and most programmers don't have a good bitmap editor available. Trying to use Microsoft Paint to manipulate bitmaps is a joke, but that's what most programmers have to do.</span></p>
<p><span class=\"diff-removed\">-At my last job, the system administrator kept sending me automated spam complaining that I was using more than ... get this ... 220 megabytes of hard drive space on the server. I pointed out that given the price of hard drives these days, the cost of this space was significantly less than the cost of the toilet paper I used. Spending even 10 minutes cleaning up my directory would be a fabulous waste of productivity.</span></p>
<p><span class=\"diff-removed\">-</span></p>
<p><span class=\"diff-removed\">-Top notch development teams don't torture their programmers. Even minor frustrations caused by using underpowered tools add up, making programmers grumpy and unhappy. And a grumpy programmer is an unproductive programmer.</span></p>
<p><span class=\"diff-removed\">-</span></p>
<p><span class=\"diff-removed\">-To add to all this... programmers are easily bribed by giving them the coolest, latest stuff. This is a far cheaper way to get them to work for you than actually paying competitive salaries!</span></p>
<p><span class=\"diff-removed\">-</span></p>
<p><span class=\"diff-added\">+<span style=\"color: #b22222;\">&lt;!-- I've been doing research on what I want for my next development machine, and come to the conclusion that I don't need anywhere near \"The Best Tools Money Can Buy\" to do development work anymore. Give bonus points if each of the developers actually have 16 cores, 64GB of ram, and multiple terabytes worth of SATA3 SSDs in their desktops, but you can get a <a href=\"http://shop.lenovo.com/SEUILibrary/controller/e/webca/LenovoPortal/en_CA/catalog.workflow:category.details?current-catalog-id=12F0696583E04D86B9B79B0FEC01C087&current-category-id=F074AD2090D2080CC2F15C0005A1FD1F\">damn fine machine for well under $3000</a> (less if you want to hand your devs desktops), which wasn't exactly true back in ye olde yeare 2000e. If you have a choice between sending annoying emails to your developers or buying $400 worth of additional hard drive space, you should obviously save your fellows the trouble, but don't ding your organization for failing to allocate an annual $14 000 per developer budget for machines. --&gt;</span></span></p>
<p><span class=\"diff-removed\">-10. Do you have testers?</span></p>
<p><span class=\"diff-added\">+9. Do you have testers?</span></p>
<p>If your team doesn't have dedicated testers, at least one for every two or three programmers, you are either shipping buggy products, or you're wasting money by having $100/hour programmers do work that can be done by $30/hour testers. Skimping on testers is such an outrageous false economy that I'm simply blown away that more people don't recognize it.</p>
<p>Read Top Five (Wrong) Reasons You Don't Have Testers, an article I wrote about this subject.</p>
<p><span class=\"diff-removed\">-11. Do new candidates write code during their interview?</span></p>
<p><span class=\"diff-added\">+10. Do new candidates write code during their interview?</span></p>
<p>Would you hire a magician without asking them to show you some magic tricks? Of course not.</p>
<p>Would you hire a caterer for your wedding without tasting their food? I doubt it. (Unless it's Aunt Marge, and she would hate you forever if you didn't let her make her \"famous\" chopped liver cake).</p>
<p><span class=\"label\">@@ -144,9 +139,11 @@</span></p>
<p>Please, just stop doing this. Do whatever you want during interviews, but make the candidate write some code. (For more advice, read my Guerrilla Guide to Interviewing.)</p>
<p><span class=\"diff-removed\">-12. Do you do hallway usability testing?</span></p>
<p><span class=\"diff-added\">+11. Do you do hallway usability testing?</span></p>
<p>A hallway usability test is where you grab the next person that passes by in the hallway and force them to try to use the code you just wrote. If you do this to five people, you will learn 95% of what there is to learn about usability problems in your code.</p>
<p><span class=\"diff-added\">+If you want the quickest possible primer on minimal testing techniques, take a look at the second half of <a href=\"http://businessofsoftware.org/video_08_skrug.aspx\">Steve Krug's 2008 Business of Software talk</a>. If you're out to do the least amount of user testing you can get away with, just take his advice.</span></p>
<p><span class=\"diff-added\">+</span></p>
<p>Good user interface design is not as hard as you would think, and it's crucial if you want customers to love and buy your product. You can read my free online book on UI design, a short primer for programmers.</p>
<p>But the most important thing about user interfaces is that if you show your program to a handful of people, (in fact, five or six is enough) you will quickly discover the biggest problems people are having. Read Jakob Nielsen's article explaining why. Even if your UI design skills are lacking, as long as you force yourself to do hallway usability tests, which cost nothing, your UI will be much, much better.</p>
<p><span class=\"label\">Diff finished.  Wed Jul 20 11:09:46 2011</span></p>
</span>
 "))
((5202 3723 554899000) :INSERT (49 :POSTED 3520123200))
((5202 3723 554901000) :INSERT (49 :TAG :IDEA-PEELING))
((5202 3723 554906000) :INSERT (49 :TAG :PROGRAMMING-ENVIRONMENT))
((5202 3723 554908000) :INSERT (49 :TAG :PROGRAMMING-INTERFACES))
((5202 3723 554910000) :INSERT (49 :TAG :SPECULATION))
((5202 3723 555287000) :INSERT (50 :TITLE "Formlets and defclass"))
((5202 3723 555293000) :INSERT (50 :FILE "formlets-and-defclass.html"))
((5202 3723 555295000) :INSERT (50 :EDITED 3610301083))
((5202 3723 555297000) :INSERT
 (50 :BODY
  "<p>Ok, I am <i>officially</i> off this fucking <a href=\"/article?name=php.html\">self-imposed thinking break</a>.</p>

<p>By the by, in the post I linked above, I idly mused about why more people aren't making money tweaking PHP/CSS full time with WordPress. I'll save you the suspense; it's because the activity is mind-numbingly, eye-stabbingly <b>boring</b>. No one would do it for fun (except perhaps when working on their own monstrous websites, but at that point... why use PHP again? It's not like you're getting paid). So yeah, the cash is good, but it's because anyone who's out of university runs as fast as their fresh degree can take them in the other direction. There's probably a solution somewhere in there that pays well, <i>and</i> doesn't induce a boredom-related coma. I'll look for it eventually, but this week, I finally sat down and forced myself through a <a href=\"http://cl-cookbook.sourceforge.net/clos-tutorial/index.html\">very nice CLOS tutorial</a> and a <a href=\"http://www.lispworks.com/documentation/HyperSpec/Body/m_defcla.htm#defclass\">page</a> or <a href=\"http://www.lispworks.com/documentation/HyperSpec/Body/m_defmet.htm#defmethod\">two</a> of <a href=\"http://www.lispworks.com/documentation/HyperSpec/Front/index.htm\">the spec</a>.</p>

<p>Really, I've been meaning to do this ever since <a href=\"/article?name=game-jam.html\">my feeble attempt</a> at the <a href=\"http://lispgames.org/index.php/2011_Spring_Lisp_Game_Jam\">2011 Spring Lisp Game Jam</a> taught me the hard way just how little I know about <code>loop</code>, CLOS and object-orientation in general. The hard way because this isn't some theoretical exercise where a certain language feature might come in handy; there are parts of that project that could have been modeled much cleaner as objects. This weekend, I got to thinking that <a href=\"https://github.com/Inaimathi/formlets\">the formlet project</a> I've been kicking around since getting a small taste from <a href=\"http://docs.racket-lang.org/web-server/formlets.html?q=formlet#(form._((lib._web-server/formlets/syntax..rkt)._formlet))\">PLT Racket</a> might be similarly object-appropriate. It's heavily inspired by their implementation, except that I go the extra step and automate validation at the same time. I think I had a semi-coherent rant about that lying around somewhere. The solution wasn't very clearly thought out, but I still think I was onto something. The pattern for form use is very consistent and simple; so why <i>should</i> I do something the computer can handle for me? I still need to add support for ajax, and a last handful of HTML form fields, but even in its half-assed, purely macro-driven form, it saved me <i>a lot</i> of typing at work and play. Trouble was that it was too difficult to add features. And hey, it looks like I could model it pretty well with objects, so I sat down with some documentation and copious amounts of <a href=\"http://www.youtube.com/watch?v=F9zT5VZKHI0\">green tea</a> to see how far I could get in a weekend.</p>

<p><a href=\"https://github.com/Inaimathi/formlets/commit/844ea0042b15dc6be0e506b65a7f3cc28056eb42\">Pretty far</a>, it turns out.</p>

<p>It's not quite a rewrite because stuff was kept, but that diff says I added/deleted 602 lines, and <code>wc -l *.lisp *.asd *.md</code> is telling me that I've got 555 lines total. So... yeah.</p>

<p>The declarations have been simplified. I did my best to carve out the annoyances, including</p>

<ul>
  <li>There's no <code>show-[name]-formlet</code> function anymore, there's just a <code>show</code> method that handles all formlet and field output, as well as a <code>show-formlet</code> macro for ease-of-use purposes</li>
  <li>That <code>show-formlet</code> macro <i>doesn't</i> need any magical values passed to it because the validating and sending pages are communicating via huncentoots' <code>session-value</code> now</li>
  <li>It is now easy to add additional field type handlers (just add a new <code>defclass</code>, <code>show</code>, and potentially <code>validate</code> method)</li>
  <li>I've got the HTML output functions isolated enough that it actually wouldn't be very hard at all to port away from <code>cl-who</code> (<i>I'm</i> not going to, because it's the best of the lisp->html markup languages I've seen so far, but feel free to; it won't take you more than a few hours)</li>
  <li>The hunchentoot-specific stuff is isolated in the <code>define-formlet</code> and <code>show-formlet</code> helper macros and a tiny bit in the <code>post-value</code> method (which means that the previous non-goal of portability across Lisp servers may also be attainable)</li>
</ul>

<p>I've also added bunches of features that will come in handy in an ongoing work project. I <i>think</i> I've got a semi-handle on the CLOS stuff, having slogged through this. I don't imagine it's the greatest OO code in the world, but it's certainly a step up from defining tons of functions. The biggest difference in expressiveness actually came from the method system (though, full disclosure, I haven't yet plumbed the depths of <a href=\"http://www.lispworks.com/documentation/HyperSpec/Body/m_defgen.htm#defgeneric\"><code>defgeneric</code></a>).</p>

<p>Basically, it's possible to model the HTML fields as a series of subclasses. For starters, a regular field</p>

<pre>(<span style=\"color: #a020f0;\">defclass</span> <span style=\"color: #228b22;\">formlet-field</span> ()
  ((name <span style=\"color: #7a378b;\">:reader</span> name <span style=\"color: #7a378b;\">:initarg</span> <span style=\"color: #7a378b;\">:name</span>)
   (validation-functions <span style=\"color: #7a378b;\">:accessor</span> validation-functions 
                         <span style=\"color: #7a378b;\">:initarg</span> <span style=\"color: #7a378b;\">:validation-functions</span> <span style=\"color: #7a378b;\">:initform</span> nil)
   (default-value <span style=\"color: #7a378b;\">:reader</span> default-value <span style=\"color: #7a378b;\">:initarg</span> <span style=\"color: #7a378b;\">:default-value</span> 
                  <span style=\"color: #7a378b;\">:initform</span> nil)
   (error-messages <span style=\"color: #7a378b;\">:accessor</span> error-messages <span style=\"color: #7a378b;\">:initarg</span> <span style=\"color: #7a378b;\">:error-messages</span> 
                   <span style=\"color: #7a378b;\">:initform</span> nil)))</pre>


<p>is fairly self-explanatory. It has a name, a set of validation functions and associated error messages, and a default value (which I actually haven't implemented yet, but each field has the slot and it's properly assigned by <code>define-formlet</code>). I realize that I could also model the different HTML outputs as a field, but I chose to do it as methods. The basic form fields are </p>

<pre>(<span style=\"color: #a020f0;\">defclass</span> <span style=\"color: #228b22;\">text</span> (formlet-field) ())
(<span style=\"color: #a020f0;\">defclass</span> <span style=\"color: #228b22;\">textarea</span> (formlet-field) ())
(<span style=\"color: #a020f0;\">defclass</span> <span style=\"color: #228b22;\">password</span> (formlet-field) ())
(<span style=\"color: #a020f0;\">defclass</span> <span style=\"color: #228b22;\">file</span> (formlet-field) ())
(<span style=\"color: #a020f0;\">defclass</span> <span style=\"color: #228b22;\">checkbox</span> (formlet-field) ())</pre>

<p>These hold no surprises. They all have very slightly different <code>show</code> methods, but it's trivial differences. The HTML representation is subtly different, but they all generate exactly one return value and don't need to be primed. As an example, here's the <code>show</code> method for <code>textarea</code></p>

<pre>(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">show</span> ((field textarea) <span style=\"color: #228b22;\">&amp;optional</span> value error)
  (html-to-str (<span style=\"color: #7a378b;\">:textarea</span> <span style=\"color: #7a378b;\">:name</span> (name field) (str value)) (str (show error))))</pre>

<p>That first argument may look a bit odd if you're in the state I was at the beginning of the weekend. This is a method, not a function, so that's not a default value for <code>field</code>, rather it's <code>field</code>s expected type. Basically, if you call <code>show</code> on a <code>field</code> of type <code>textarea</code>, you'll get that particular view function. Instead of, say, this one</p>

<pre>(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">show</span> ((field file) <span style=\"color: #228b22;\">&amp;optional</span> value error)
  (html-to-str (<span style=\"color: #7a378b;\">:input</span> <span style=\"color: #7a378b;\">:name</span> (name field) <span style=\"color: #7a378b;\">:type</span> <span style=\"color: #8b2252;\">\"file\"</span> <span style=\"color: #7a378b;\">:class</span> <span style=\"color: #8b2252;\">\"file\"</span>) 
               (str (show error))))</pre>

<p>which would only apply to a <code>field</code> of type <code>file</code>. </p>

<p>Moving on, the next set of fields introduces a bit of a twist.</p>

<pre>(<span style=\"color: #a020f0;\">defclass</span> <span style=\"color: #228b22;\">formlet-field-set</span> (formlet-field)
  ((value-set <span style=\"color: #7a378b;\">:reader</span> value-set <span style=\"color: #7a378b;\">:initarg</span> <span style=\"color: #7a378b;\">:value-set</span> <span style=\"color: #7a378b;\">:initform</span> nil))
  (<span style=\"color: #7a378b;\">:documentation</span> <span style=\"color: #8b2252;\">\"This class is for fields that show the user a list of options\"</span>))

(<span style=\"color: #a020f0;\">defclass</span> <span style=\"color: #228b22;\">select</span> (formlet-field-set) ())
(<span style=\"color: #a020f0;\">defclass</span> <span style=\"color: #228b22;\">radio-set</span> (formlet-field-set) ())</pre>

<p>Ok, yes, <code>radio-set</code> isn't technically an HTML field, but I'm not sure that's a reasonable approach. I can't think of a situation where a single <code>radio</code> button would be needed, but a lone <code>checkbox</code> couldn't do the job. Anyway, the twist is that while these fields return a single value, they make the user choose from a set of different options rather than entering data (or just accepting/rejecting as with the single checkbox situation). The main difference is that you need to allow for a set of values to be specified in the field as options that the user can choose from, and you potentially need to apply the <code>checked</code> or <code>selected</code> property to the currently selected field. Here's what that looks like</p>

<pre>(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">show</span> ((field radio-set) <span style=\"color: #228b22;\">&amp;optional</span> value error)
  (html-to-str (<span style=\"color: #a020f0;\">loop</span> for v in (value-set field)
                     do (htm (<span style=\"color: #7a378b;\">:span</span> <span style=\"color: #7a378b;\">:class</span> <span style=\"color: #8b2252;\">\"input+label\"</span> 
                                (<span style=\"color: #7a378b;\">:input</span> <span style=\"color: #7a378b;\">:type</span> <span style=\"color: #8b2252;\">\"radio\"</span> <span style=\"color: #7a378b;\">:name</span> (name field) <span style=\"color: #7a378b;\">:value</span> v 
                                        <span style=\"color: #7a378b;\">:checked</span> (<span style=\"color: #a020f0;\">when</span> (string= v value) <span style=\"color: #8b2252;\">\"checked\"</span>))
                                        (str v))))
               (str (show error))))</pre>

<p>Note that this is all still defining a single method. Before I knew about this, I would have done something like defining separate <code>show-textarea</code>, <code>show-file</code> and <code>show-radio-set</code>, or having a single <code>cond</code> somewhere, dispatching and treating each element differently somewhere. In fact, that's how my formlet system worked for a fairly long time. I'm rather happy I took the time to learn this way.</p>

<p>The last set of fields proved to be most problematic, and only because of how Hunchentoot deals with <code>post-parameter</code>.</p>

<pre>(<span style=\"color: #a020f0;\">defclass</span> <span style=\"color: #228b22;\">formlet-field-return-set</span> (formlet-field-set) ()
  (<span style=\"color: #7a378b;\">:documentation</span> <span style=\"color: #8b2252;\">\"This class is specifically for fields that return multiple values from the user\"</span>))

(<span style=\"color: #a020f0;\">defclass</span> <span style=\"color: #228b22;\">multi-select</span> (formlet-field-return-set) ())
(<span style=\"color: #a020f0;\">defclass</span> <span style=\"color: #228b22;\">checkbox-set</span> (formlet-field-return-set) ())</pre>

<p>We're not just specifying a set of potential choices here, we're now also getting a set back from the user to play around with. Which means that it's not enough to compare the current value against each option, we need to check whether each option is a member of the set of values.</p>

<pre>(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">show</span> ((field multi-select) <span style=\"color: #228b22;\">&amp;optional</span> value error)
  (html-to-str (<span style=\"color: #7a378b;\">:select</span> <span style=\"color: #7a378b;\">:name</span> (name field) <span style=\"color: #7a378b;\">:multiple</span> <span style=\"color: #8b2252;\">\"multiple\"</span> <span style=\"color: #7a378b;\">:size</span> 5
                        (<span style=\"color: #a020f0;\">loop</span> for v in (value-set field)
                              do (htm (<span style=\"color: #7a378b;\">:option</span> <span style=\"color: #7a378b;\">:value</span> v 
                                               <span style=\"color: #7a378b;\">:selected</span> (<span style=\"color: #a020f0;\">when</span> (member v value <span style=\"color: #7a378b;\">:test</span> #'string=) <span style=\"color: #8b2252;\">\"selected\"</span>)
                                                         (str v)))))
               (str (show error))))</pre>

<p><b>But</b>. We also need a way of getting those values in the first place. As I said, Hunchentoot fought me on this. The <code>(post-parameters*)</code> are represented as an <a href=\"http://www.lispworks.com/documentation/HyperSpec/Body/26_glo_a.htm#alist\"><code>alist</code></a>, which is alright if a bit more verbose than I hoped, but at the same time, <code>(post-parameter \"field\")</code> seems to be a very thin wrapper around <code>(cdr (assoc \"field\" (post-parameters*))</code>. Which means that if I want to get all of the values of a particular field out of the posted data, I need to traverse that <code>alist</code> and filter it myself. So, here's how I did that</p>

<pre>(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">post-value</span> ((field formlet-field) post-alist)
  (cdr (assoc (name field) post-alist <span style=\"color: #7a378b;\">:test</span> #'string=)))

(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">post-value</span> ((field formlet-field-return-set) post-alist)
  (<span style=\"color: #a020f0;\">loop</span> for (k . v) in post-alist
        if (string= k (name field)) collect v))</pre>

<p>Now, bear in mind that I was (and still am) operating of very little sleep, so I can guarantee that this isn't the best solution, but it does what I need very simply. When I need the set of values posted, it's as easy as </p>

<pre>(mapcar (<span style=\"color: #a020f0;\">lambda</span> (field) (post-value field (post-parameters*))) (fields formlet))</pre>

<p>Which doesn't look nearly as easy as it seemed in my mind, but it's still not too hairy to parse. I probably didn't need to go quite as crazy on the hierarchy my first time out. But it <i>was</i> my first time out. And I wanted to learn something. Next time, I'm hoping to finally have a little tutorialette that I've been kicking around fininished. Something related to <a href=\"http://www.gigamonkeys.com/book/object-reorientation-generic-functions.html\">CLOS</a> and <a href=\"http://clsql.b9.com/\">clsql</a>.</p>

<p>Right, that's it. I've uploaded a fresh copy of <a href=\"https://github.com/Inaimathi/formlets\">the formlet system</a> to <a href=\"https://github.com/Inaimathi\">my github</a>, and to <a href=\"http://173.255.226.138/formlets.tar.gz\">an asdf-able location</a> (so <code>(asdf-install:install 'formlets)</code> should work). Still no gpg key. I'm working on it, if you'll believe that. If you find any issues, feel free to <a href=\"https://github.com/Inaimathi/formlets/issues?sort=created&direction=desc&state=open\">note them</a> (I actually check my github tracker more often than my email).</p>

<p>And now, if you'll excuse me, I'm going to go collapse into bed for about 12 hours.</p>

<span class=\"edit\">EDIT:
<p>Ok, seriously, done dicking around with the formatting around now.</p>

<p>If it's any consolation at all, the actual project is properly indented.</p>

Tue, 02 Aug, 2011</span>
"))
((5202 3723 555471000) :INSERT (50 :POSTED 3521246400))
((5202 3723 555476000) :INSERT (50 :TAG :CLOS))
((5202 3723 555479000) :INSERT (50 :TAG :COMMON-LISP))
((5202 3723 555483000) :INSERT (50 :TAG :PHP))
((5202 3723 557358000) :INSERT
 (51 :TITLE "CL-Chan (a CLSQL and Hunchentoot crash course) - Part 1"))
((5202 3723 557369000) :INSERT (51 :FILE "using-clsql.html"))
((5202 3723 557372000) :INSERT (51 :EDITED 3610300662))
((5202 3723 557374000) :INSERT
 (51 :BODY
  "<p>Ever since I was made <a href=\"/article?name=game-jam.html\">keenly aware of my shortcomings</a>, I've been reading up on a various things including <a href=\"http://cl-cookbook.sourceforge.net/clos-tutorial/index.html\">CLOS</a> and <a href=\"http://clsql.b9.com/manual/ch02s02.html\">the OO interface to CLSQL</a>. Probably the best resource available right now is the <a href=\"http://clsql.b9.com/documentation.html\">CLSQL documentation</a> itself, and that's not a compliment. It's basically a (not particularly complete) reference piece that gives you a function listing and some minor explanation. As far as I can tell, it doesn't get you significantly more information than a few <code>describe</code> and <code>inspect</code> calls.</p>

<p>Searching for <a href=\"http://www.google.ca/search?q=clsql+tutorial\">clsql tutorial</a> brings up a Bill Clementson <a href=\"http://bc.tech.coop/blog/040608.html\">column on CLSQL basics</a> and a pretty long forum argument between Slobodan Blazeski and (among others) <a href=\"http://hillview.1on.de/authors/2-Holger-Schauer\">Holger Schauer</a>, <a href=\"http://www.xach.com/\">Zach Beane</a> and <a href=\"http://wozniak.ca/\">Geoff Wozniak</a> about the seeming poor quality of a webapp tutorial by Slobodan to illustrate CLSQL in conjunction with Hunchentoot. I say \"seemingly\" because the original was apparently put up as a PDF on MegaUpload, then taken down in favor of being posted on Slobodan's personal site, and then taken down altogether (all of the links in that thread currently lead to 404 errors).</p>

<p>And that's it.</p>

<p>So, I figured I could put something together. At first it was going to be the standard \"Hello World\" of webapps (a <a href=\"http://docs.racket-lang.org/continue/index.html\">blog</a>), but then I figured, fuck it, lets make <a href=\"http://www.4chan.org/\">4chan</a>. </p>

<div class=\"note assumptions\"><h3>Assumptions Note</h3><span class=\"note-body\">
    <h3>Things this tutorial assumes:</h3>
    <p><b>You know the very basics of Lisp, SQL and HTML</b></p>
    <p>I won't bother teaching you what <code>(+ 1 2)</code> does or the basics of how the REPL works; there are <a href=\"http://www.gigamonkeys.com/book/\">better</a> <a href=\"http://www.cs.sfu.ca/CC/310/pwfong/Lisp/1/tutorial1.html\">places</a> to learn that. I also won't be teaching you how to <a href=\"http://www.w3schools.com/sql/default.asp\">SELECT * FROM employees;</a>, that horse has been shot, bludgeoned, stomped on, kicked, salted and kicked again. Finally, I assume you know a thing or two about <a href=\"http://www.google.ca/search?aq=f&sourceid=chrome&ie=UTF-8&q=html\">HTML</a>, if not web development proper.</p>
    <p><b>You have a Lisp and environment installed and configured to your liking (<a href=\"http://www.quicklisp.org/beta/\">quicklisp</a> optional, but recommended) </b></p>
    <p>It can be as simple as Notepad with SBCL+<a href=\"http://xach.com/lisp/linedit-screencast.gif\">linedit</a> in a terminal, or <a href=\"http://www.lispworks.com/downloads/index.html\">LispWorks</a> or <a href=\"http://www.gnu.org/software/emacs/\">Emacs</a>+<a href=\"http://common-lisp.net/project/slime/\">SLIME</a> (I prefer the third, but won't be using any arcane keyboard shortcuts without explaining them here).</p>
    <p>If you don't, <a href=\"http://common-lisp.net/project/lispbox/\">LispBox</a> is a very good starting point.</p>
    <p><b>You have a database picked out and installed</b></p>
    <p>I use MySQL, but <a href=\"http://clsql.b9.com/manual/prerequisites.html#id430640\">clsql supports many more</a> (and the syntax is the same no matter which you pick, so you'll get your money's worth here in any case)</p>

    <h3>Things it does not assume (and that you therefore may want to skip through):</h3>
    <p><b>You are an advanced Lisper</b></p>
    <p>I won't teach you about the REPL, or how to use Lisp as a calculator, but I will have some notes here about (for example) package basics.</p>
    <p><b>You have used clsql or CLOS before</b></p>
    <p>I'm aiming at CLOS/clsql newbs here, so I may cover some of the same ground as the mentioned documentation and tutorial. Skip those bits that you already know.</p>
    <p><b>You have built a Lisp webapp before</b></p>
    <p>There are a few tutorials running around, but I won't assume that you've read all or any of them. Again, skip the bits you know (though if you're familiar with CLOS, clsql and Lisp web-development, why are you reading this?)</p>
    <p><b>You are using SBCL (though I am, so let me know if something here fails to work on your end)</b></p>
    <p>I assume you're using a Common Lisp (and not a Scheme or one of the mongrels like <a href=\"http://www.reddit.com/r/lisp/comments/ghqxs/introduction_to_newlisp_wikibook/c1noc0d\">newLISP</a> or <a href=\"http://www.paulgraham.com/arc.html\">Arc</a>), and that said Common Lisp is compatible with both <a href=\"http://weitz.de/hunchentoot/\">Hunchentoot</a> and <a href=\"http://clsql.b9.com/platforms.html\">CLSQL</a>. Other than that though, go nuts.</p>
    <p><b>You are psychic</b></p>
    <p>I'll try specifically to explain the things that were less than obvious to me while I was learning this material. Some stuff tends to get accidentally glossed over as trivial (it's also possible that I'm just thick, in which case, skip the obvious bits).</p>
  </span>
</div>

<p>So lets get right to it.</p>

<p>Start a new file and get this into it, then save it as <code>cl-chan.lisp</code> </p>

<pre>(<span style=\"color: #a020f0;\">defpackage</span> <span style=\"color: #228b22;\">:cl-chan</span> (<span style=\"color: #7a378b;\">:use</span> <span style=\"color: #7a378b;\">:cl</span> <span style=\"color: #7a378b;\">:cl-who</span> <span style=\"color: #7a378b;\">:hunchentoot</span>))
(<span style=\"color: #a020f0;\">in-package</span> <span style=\"color: #7a378b;\">:cl-chan</span>)

(<span style=\"color: #a020f0;\">defvar</span> <span style=\"color: #a0522d;\">*web-server*</span> (start (make-instance 'acceptor <span style=\"color: #7a378b;\">:port</span> 4242)))</pre>

<p>Then hop into your REPL and load :cl-who + :hunchentoot, followed by cl-chan</p>

<div class=\"note beginner\"><h3>Beginner Note</h3><span class=\"note-body\">

    <p>You can do that by typing</p>

<pre>    (<span style=\"color: #a020f0;\">require</span> '<span style=\"color: #008b8b;\">cl-who</span>)
    (<span style=\"color: #a020f0;\">require</span> '<span style=\"color: #008b8b;\">hunchentoot</span>)
    (<span style=\"color: #a020f0;\">require</span> '<span style=\"color: #008b8b;\">clsql</span>)</pre>

    <p>if you already have them installed. If you don't, then you might be able to install them (on a good day, in certain implementations, if you're lucky and if your last name begins and ends with \"T\") by typing</p>

<pre>    (<span style=\"color: #a020f0;\">require</span> '<span style=\"color: #008b8b;\">asdf</span>)
    (<span style=\"color: #a020f0;\">require</span> '<span style=\"color: #008b8b;\">asdf-install</span>)
    (asdf-install:install 'cl-who)
    (asdf-install:install 'hunchentoot)
    (asdf-install:install 'clsql)</pre>

    <p>I've been told that doesn't work on all implementations (though it does work on the SBCL you can get out of the Debian repos). If you're smart, you will instead <a href=\"http://www.quicklisp.org/beta/\">go here</a> and follow the installation instructions, then type</p>

<pre>    (ql:quickload (list <span style=\"color: #7a378b;\">:cl-who</span> <span style=\"color: #7a378b;\">:hunchentoot</span> <span style=\"color: #7a378b;\">:clsql</span>))</pre>

    <p>That same statement will load local copies if you already have them installed, by the way. After all that, load your original file by typing</p>

    (load \"path-to/cl-chan.lisp\")
  </span>
</div>

<p>then crack a browser open and head on over to <code>http://localhost:4242</code> to see the default Hunchentoot page.</p>

<p>Woo.</p>

<p>Party.</p>

<p>Ok, ok, lets get to something at least slightly workable quickly.</p>

<p>Add the following just below that <code>defvar</code>:</p>

<pre>(<span style=\"color: #a020f0;\">define-easy-handler</span> (front-page <span style=\"color: #7a378b;\">:uri</span> <span style=\"color: #8b2252;\">\"/\"</span>) ()
  (<span style=\"color: #a020f0;\">with-html-output-to-string</span> (*standard-output* nil <span style=\"color: #7a378b;\">:prologue</span> t <span style=\"color: #7a378b;\">:indent</span> t)
    (<span style=\"color: #7a378b;\">:html</span> <span style=\"color: #7a378b;\">:xmlns</span> <span style=\"color: #8b2252;\">\"http://www.w3.org/1999/xhtml\"</span> <span style=\"color: #7a378b;\">:xml</span>\\<span style=\"color: #7a378b;\">:lang</span> <span style=\"color: #8b2252;\">\"en\"</span> <span style=\"color: #7a378b;\">:lang</span> <span style=\"color: #8b2252;\">\"en\"</span>
           (<span style=\"color: #7a378b;\">:head</span> (<span style=\"color: #7a378b;\">:meta</span> <span style=\"color: #7a378b;\">:http-equiv</span> <span style=\"color: #8b2252;\">\"Content-Type\"</span> <span style=\"color: #7a378b;\">:content</span> <span style=\"color: #8b2252;\">\"text/html;charset=utf-8\"</span>)
                  (<span style=\"color: #7a378b;\">:title</span> <span style=\"color: #8b2252;\">\"Test Page\"</span>))
           (<span style=\"color: #7a378b;\">:body</span> (<span style=\"color: #7a378b;\">:h1</span> <span style=\"color: #8b2252;\">\"This is NOT the default page\"</span>)
                  (<span style=\"color: #7a378b;\">:p</span> <span style=\"color: #8b2252;\">\"Nope.\"</span>)))))</pre>

<p>and refresh your browser.</p>

<div class=\"note beginner\"><h3>Beginner Note</h3><span class=\"note-body\">
<p>The first bit we did was define a namespace (\"package\") called <code><span style=\"color: #7a378b;\">:cl-chan</span></code>. You can find specifics and some more advanced uses <a href=\"http://www.gigamonkeys.com/book/programming-in-the-large-packages-and-symbols.html\">here</a>, but the basic reason for this is to manage how the symbols we'll be defining interact on the global level. The basic <code><span style=\"color: #7a378b;\">:use</span></code> directive we used specified that our package would import all exported symbols from three other packages; </p>

<ul>
  <li><code><span style=\"color: #7a378b;\">:cl</span></code> (all the basic Common Lisp functions; if you get into the situation where you've defined a package and odd things are happening in expressions that really shouldn't error, what's probably going on is that you forgot to include <code><span style=\"color: #7a378b;\">:cl</span></code>), </li>
  <li><code><span style=\"color: #7a378b;\">:cl-who</span></code> (an HTML generation library) and</li>
  <li><code><span style=\"color: #7a378b;\">:hunchentoot</span></code> (a lisp-based web-server). We'll talk about namespace conflicts a later.</li>
</ul>

    <p><code>(<span style=\"color: #a020f0;\">in-package</span> <span style=\"color: #7a378b;\">:cl-chan</span>)</code> means that any symbol following it will be evaluated in the package <code><span style=\"color: #7a378b;\">:cl-chan</span></code> instead of in the global namespace.</p>

    <p>The <code>defvar</code> line defines a new variable, stores an acceptor there and starts a server listening on port 4242 using the <code>start</code> method. You can later stop the server by evaluating <code>(stop *web-server*)</code> (you don't need to at the moment).</p>

    <p>Finally, the <code>define-easy-handler</code> line sets up a handler at \"localhost:4242/\" that will return a simple page. The <code><span style=\"color: #7a378b;\">:cl-who</span></code> markup you see should be self-explanatory if you know HTML.</p>
  </span>
</div>

<p>Right. So a chan is a collection of boards, each of which is a collection of threads, each of which is a collection of comments. Lets start at the bottom, since that'll be the fastest way of getting something relevant on screen. A comment is composed of</p>

<ul>
  <li>a name</li>
  <li>an email</li>
  <li>a subject</li>
  <li>a comment</li>
  <li>an image</li>
  <li>a posted date/time</li>
  <li>a password (for deletion purposes)</li>
</ul>

<p>We won't be dealing with the image and password for a while, so the obvious thing to do is</p>

<pre>(<span style=\"color: #a020f0;\">defclass</span> <span style=\"color: #228b22;\">comment</span> ()
  ((author <span style=\"color: #7a378b;\">:reader</span> author <span style=\"color: #7a378b;\">:initarg</span> <span style=\"color: #7a378b;\">:author</span> <span style=\"color: #7a378b;\">:initform</span> nil)
   (email <span style=\"color: #7a378b;\">:reader</span> email <span style=\"color: #7a378b;\">:initarg</span> <span style=\"color: #7a378b;\">:email</span> <span style=\"color: #7a378b;\">:initform</span> nil)
   (subject <span style=\"color: #7a378b;\">:reader</span> subject <span style=\"color: #7a378b;\">:initarg</span> <span style=\"color: #7a378b;\">:subject</span> <span style=\"color: #7a378b;\">:initform</span> nil)
   (body <span style=\"color: #7a378b;\">:reader</span> body <span style=\"color: #7a378b;\">:initarg</span> <span style=\"color: #7a378b;\">:body</span> <span style=\"color: #7a378b;\">:initform</span> nil)
   (date-time <span style=\"color: #7a378b;\">:reader</span> date-time <span style=\"color: #7a378b;\">:initarg</span> <span style=\"color: #7a378b;\">:date-time</span>)))</pre>

<p>Which is an awful lot of repetitious typing. Almost enough that I'm tempted to write myself a macro, since I try to use the same symbol as the name, reader and initarg for a given class. The first bit in each slot is a slot name, the keyword arguments are</p>

<ul>
  <li><code><span style=\"color: #7a378b;\">:reader</span></code> -- the name of the function which will return that slots' value (if you want one that will also let you modify the value, you should make it an <code><span style=\"color: #7a378b;\">:accessor</span></code> instead)</li>
  <li><code><span style=\"color: #7a378b;\">:initarg</span></code> -- the name of the parameter that will accept a value for this slot when you call <code>make-instance</code> (you actually have to name it with a colon at the beginning there; <code><span style=\"color: #7a378b;\">:author</span></code>, not <code>author</code>, it matters)</li>
  <li><code><span style=\"color: #7a378b;\">:initform</span></code> -- the default value of the slot if none is passed in (a class doesn't store <code>nil</code> by default; if you try to get the value of a slot that hasn't been set, you get an error).</li>
</ul>

<p>So, lets try it out.</p>

<pre>(<span style=\"color: #a020f0;\">defparameter</span> <span style=\"color: #a0522d;\">test-comment</span> 
  (make-instance 'comment 
                 <span style=\"color: #7a378b;\">:author</span> <span style=\"color: #8b2252;\">\"me\"</span> <span style=\"color: #7a378b;\">:email</span> <span style=\"color: #8b2252;\">\"my@email.com\"</span> <span style=\"color: #7a378b;\">:subject</span> <span style=\"color: #8b2252;\">\"FRIST!!1!one!\"</span>
                 <span style=\"color: #7a378b;\">:body</span> <span style=\"color: #8b2252;\">\"I am most certainly the first poster in this fine establishment\"</span>
                 <span style=\"color: #7a378b;\">:date</span> (get-universal-time)))</pre>

<div class=\"note beginner\"><h3>Beginner Note</h3><span class=\"note-body\">
    <p>A parameter is like a <a href=\"http://www.lispworks.com/documentation/HyperSpec/Body/m_defpar.htm#defvar\">variable</a>, except that they act differently if you try to define one with an existing name. If you <code>defvar</code> a variable that already exists, it keeps the old value (you actually have to use <code>setf</code> explicitly), whereas if you <code>defparameter</code> a parameter that exists, it gets the new value. <code>(get-universal-time)</code> is a function that returns the current number of seconds since the epoch (in Common Lisp, that's 00:00 Jan 1, 1900 GMT, as it happens). We won't need to do anything with it 'till later.</p>
  </span>
</div>

<p>Hop on over to the REPL and kick the tires a bit;</p>

<pre>&gt; (author test-comment)
<span style=\"color: #8b2252;\">\"me\"</span>
&gt; (body test-comment)
<span style=\"color: #8b2252;\">\"I am most certainly the first poster in this fine establishment\"</span>
&gt; (setf (body test-comment) <span style=\"color: #8b2252;\">\"BLARGFGHH!\"</span>)
The function (SETF BODY) is undefined.
   [Condition of type UNDEFINED-FUNCTION]

Restarts:
 0: [RETRY] Retry SLIME REPL evaluation request.
 1: [*ABORT] Return to SLIME's top level.
 2: [TERMINATE-THREAD] Terminate this thread (#&lt;THREAD <span style=\"color: #8b2252;\">\"repl-thread\"</span> RUNNING {1003108271}&gt;)

Backtrace:
  0: (<span style=\"color: #8b2252;\">\"bogus stack frame\"</span>)
  1: (SB-INT:SIMPLE-EVAL-IN-LEXENV (SETF (BODY TEST-COMMENT) <span style=\"color: #8b2252;\">\"Blah\"</span>) #&lt;NULL-LEXENV&gt;)
 --more--</pre>

<p>So that didn't work out so well. Remember, we defined all of these slots as having a <code><span style=\"color: #7a378b;\">:reader</span></code>, not an <code><span style=\"color: #7a378b;\">:accessor</span></code>. We could have given them both, or just an accessor, but we won't really be needing to mess with a comment once it's been posted, so this should be ok. Use the <code>ABORT</code> restart to get back into the REPL. </p>

<div class=\"note beginner\"><h3>Beginner Note</h3><span class=\"note-body\">
    I'm not sure how it works elsewhere, but if you're using Emacs, you can invoke a restart by typing the number next to it and hitting Return. So in this case, it'll be <code>1 RET</code>
  </span>
</div>

<p>Ok, now lets show that. Head over to that <code>define-easy-handler</code> from earlier and change the contents of the body tag to</p>

<pre>(<span style=\"color: #7a378b;\">:body</span> (<span style=\"color: #a020f0;\">with-slots</span> (author email subject body date-time) test-comment
         (htm (<span style=\"color: #7a378b;\">:div</span> <span style=\"color: #7a378b;\">:class</span> <span style=\"color: #8b2252;\">\"comment\"</span>
                    (<span style=\"color: #7a378b;\">:span</span> <span style=\"color: #7a378b;\">:class</span> <span style=\"color: #8b2252;\">\"header\"</span> 
                           (str author) (str email) 
                           (str date-time) (str subject))
                    (<span style=\"color: #7a378b;\">:span</span> <span style=\"color: #7a378b;\">:class</span> <span style=\"color: #8b2252;\">\"body\"</span> 
                           (<span style=\"color: #7a378b;\">:p</span> (str body)))))))</pre>

<p>and evaluate the function again.</p>

<div class=\"note beginner\"><h3>Beginner Note</h3><span class=\"note-body\">
    You can certainly do that by using the same <code>(load <span style=\"color: #8b2252;\">\"path-to/cl-chan.lisp\"</span>)</code> statement as earlier, or by copy-pasting the function into your REPL. If you're using Emacs, you can also just get your cursor somewhere in the body of the function and hit <code>C-M-x</code>. Other environments probably have similar functionality.
  </span>
</div>

<p>Refreshing your browser should show you a fairly poorly formatted comment across two lines. Hey, it's a start. The first two things to notice are the <code>htm</code> and <code>str</code> tokens. These are part of the <code><span style=\"color: #7a378b;\">:cl-who</span></code> library; they're actually tokens for the HTML generator, and not real functions so they'll error if you try to use them outside a <code><span style=\"color: #a020f0;\">with-html-...</span></code> macro. They're just escapes to let you write dynamic HTML as part of <code><span style=\"color: #7a378b;\">:cl-who</span></code> markup (without the <code>htm</code> after <code><span style=\"color: #a020f0;\">with-slots</span></code>, you'd get <code>undefined function</code> errors for <code><span style=\"color: #7a378b;\">:div</span></code>, <code><span style=\"color: #7a378b;\">:span</span></code> and <code><span style=\"color: #7a378b;\">:p</span></code>.</p>

<p>The <code><span style=\"color: #a020f0;\">with-slots</span></code> macro is something you can use to address several slots from an object at once. Without it, we would have to do <code>(author test-comment)</code>, <code>(email test-comment)</code> and so on (had we not defined <code><span style=\"color: #7a378b;\">:reader</span></code>s earlier, we'd have to use the even more laborious <code>(slot-value test-comment 'author)</code>).</p>

<p>One comment does not a board make, though. So lets get another in here. Add this one below the first <code>test-comment</code></p>

<pre>(<span style=\"color: #a020f0;\">defparameter</span> <span style=\"color: #a0522d;\">test-comment2</span> 
  (make-instance 'comment 
                 <span style=\"color: #7a378b;\">:author</span> <span style=\"color: #8b2252;\">\"someone else\"</span> <span style=\"color: #7a378b;\">:email</span> <span style=\"color: #8b2252;\">\"you@fmail.com\"</span> <span style=\"color: #7a378b;\">:subject</span> <span style=\"color: #8b2252;\">\"Stop being a douchebag\"</span>
                 <span style=\"color: #7a378b;\">:date-time</span> (get-universal-time)))</pre>

<p>and load it into your lisp. Now, it would obviously be annoying as fuck to write out the entire display code for yet another comment when we know we'll have to deal with dozens. So, lets add the first dose of actual object-orientation.</p>

<pre>(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">echo</span> ((a-comment comment))
  (<span style=\"color: #a020f0;\">with-html-output-to-string</span> (*standard-output* nil <span style=\"color: #7a378b;\">:indent</span> t)
    (<span style=\"color: #a020f0;\">with-slots</span> (author email subject body date-time) a-comment
      (htm (<span style=\"color: #7a378b;\">:div</span> <span style=\"color: #7a378b;\">:class</span> <span style=\"color: #8b2252;\">\"comment\"</span>
                 (<span style=\"color: #7a378b;\">:span</span> <span style=\"color: #7a378b;\">:class</span> <span style=\"color: #8b2252;\">\"header\"</span> 
                        (str author) (str email) 
                        (str date-time) (str subject))
                 (<span style=\"color: #7a378b;\">:span</span> <span style=\"color: #7a378b;\">:class</span> <span style=\"color: #8b2252;\">\"body\"</span> 
                        (<span style=\"color: #7a378b;\">:p</span> (str body))))))))</pre>

<p>Put that anywhere you like in the file (after your <code>in-package</code> line) and evaluate it, then test it out in the REPL;</p>

<pre>&gt; (echo test-comment)
<span style=\"color: #8b2252;\">\"
&lt;div class='comment'&gt;
  &lt;span class='header'&gt;memy@email.com3522954339FRIST
  &lt;/span&gt;
  &lt;span class='body'&gt;
    &lt;p&gt;I am most certainly the first poster in this fine establishment
    &lt;/p&gt;
  &lt;/span&gt;
&lt;/div&gt;\"</span>
&gt; (echo test-comment2)
<span style=\"color: #8b2252;\">\"
&lt;div class='comment'&gt;
  &lt;span class='header'&gt;someone elseyou@fmail.com3522956120Stop being a douchebag
  &lt;/span&gt;
  &lt;span class='body'&gt;
    &lt;p&gt;
    &lt;/p&gt;
  &lt;/span&gt;
&lt;/div&gt;\"</span></pre>

<p>A <code>method</code> is like an <code>un</code> (in that you can <code>def</code> them both), but it can specialize on one or more classes. Take a look at where it says <code>((a-comment comment))</code>; that means that the <code>method</code> accepts one argument named <code>a-comment</code>, and that argument must be of class <code>comment</code>. From what I've seen, the correct convention is actually to name the argument after its class (so I really should have done ((comment comment)), but that's a bit harder to explain clearly).</p>

<p>Now that we've got the method, lets go ahead and re-define the body of the <code>front-page</code></p>

<pre>(<span style=\"color: #7a378b;\">:body</span> (str (echo test-comment))
       (str (echo test-comment2)))</pre>

<p>Re-evaluate it and refresh your browser; you should now be seeing both poorly-formatted comments one on top of the next. So multiple comments we've got, but there's more to a board than comments; we need threads too, right? A thread is a collection of comments belonging to a board. Lets just get that defined just below the <code>comment</code> class.</p>

<pre>(<span style=\"color: #a020f0;\">defclass</span> <span style=\"color: #228b22;\">thread</span> ()
  ((board <span style=\"color: #7a378b;\">:reader</span> board <span style=\"color: #7a378b;\">:initarg</span> <span style=\"color: #7a378b;\">:board</span>)
   (comments <span style=\"color: #7a378b;\">:accessor</span> comments <span style=\"color: #7a378b;\">:initarg</span> <span style=\"color: #7a378b;\">:comments</span>)))</pre>

<p>Note that we didn't specify <code><span style=\"color: #7a378b;\">:initform</span></code>s for <code>comments</code> or <code><span style=\"color: #0000ff; font-weight: bold;\">:board</span></code> because every thread has those filled (there wouldn't be a thread otherwise). And, lets get a test-thread going. Add this to your file and evaluate it.</p>

<pre>(<span style=\"color: #a020f0;\">defparameter</span> <span style=\"color: #a0522d;\">test-thread</span> 
  (make-instance 'thread
                 <span style=\"color: #7a378b;\">:board</span> <span style=\"color: #8b2252;\">\"a\"</span>
                 <span style=\"color: #7a378b;\">:comments</span> (list test-comment test-comment2)))</pre>

<p>And lets get another couple of comments in there for good measure;</p>

<pre>(<span style=\"color: #a020f0;\">defparameter</span> <span style=\"color: #a0522d;\">test-comment3</span> (make-instance 'comment 
                                           <span style=\"color: #7a378b;\">:subject</span> <span style=\"color: #8b2252;\">\"You must be new here\"</span>
                                           <span style=\"color: #7a378b;\">:body</span> <span style=\"color: #8b2252;\">\"trolled-softly.jpg\"</span>
                                           <span style=\"color: #7a378b;\">:date-time</span> (get-universal-time)))

(<span style=\"color: #a020f0;\">defparameter</span> <span style=\"color: #a0522d;\">test-comment4</span> (make-instance 'comment 
                                           <span style=\"color: #7a378b;\">:body</span> <span style=\"color: #8b2252;\">\"[Something vaguely anti-semetic.]\"</span>
                                           <span style=\"color: #7a378b;\">:date-time</span> (get-universal-time)))</pre>

<p>We defined our first <code><span style=\"color: #7a378b;\">:accessor</span></code> earlier, by the way. It's no different from a <code><span style=\"color: #7a378b;\">:reader</span></code> except that you can modify the slot after its declared (which is sort of important if you're going to be replying to threads). Lets add those two other comments to the test thread. Nothing special; just hop over into the REPL</p>

<pre>&gt; (comments test-thread)
(#&lt;COMMENT {C1F3AF9}&gt; #&lt;COMMENT {100425C101}&gt;) 

&gt; <span style=\"color: #b22222;\">;; </span><span style=\"color: #b22222;\">your comment will probably look slightly different; that's ok</span>
; No Value

&gt; (setf (comments test-thread) 
           (append (comments test-thread) 
                   (list test-comment3 test-comment4)))
(#&lt;COMMENT {C1F3AF9}&gt; 
 #&lt;COMMENT {10048B3291}&gt; 
 #&lt;COMMENT {10048B32F1}&gt; 
 #&lt;COMMENT {100425C101}&gt;)</pre>

<p>There. Now that we have a thread with four comments, lets show that.</p>

<pre>(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">echo</span> ((thread thread))
  (<span style=\"color: #a020f0;\">let</span> ((first-comment (car (comments thread))))
    (<span style=\"color: #a020f0;\">with-html-output</span> (*standard-output* nil <span style=\"color: #7a378b;\">:indent</span> t)
      (<span style=\"color: #a020f0;\">with-slots</span> (author email subject body date-time) first-comment
        (htm (<span style=\"color: #7a378b;\">:div</span> <span style=\"color: #7a378b;\">:class</span> <span style=\"color: #8b2252;\">\"thread\"</span>
                   (<span style=\"color: #7a378b;\">:span</span> <span style=\"color: #7a378b;\">:class</span> <span style=\"color: #8b2252;\">\"header\"</span> 
                          (str author) (str email) 
                          (str date-time) (str subject))
                   (<span style=\"color: #7a378b;\">:span</span> <span style=\"color: #7a378b;\">:class</span> <span style=\"color: #8b2252;\">\"body\"</span> 
                          (<span style=\"color: #7a378b;\">:p</span> (str body)))
                   (<span style=\"color: #a020f0;\">dolist</span> (r (cdr (comments thread)))
                     (str (echo r))))))))</pre>

<div class=\"note pedantic\"><h3>Pedantic Note</h3><span class=\"note-body\">
    <p>Note that we're using <code><span style=\"color: #a020f0;\">with-html-output</span></code> instead of <code><span style=\"color: #a020f0;\">with-html-output-to-string</span></code>. Only the top level one actually has to be the <code>to-string</code> variant, and using the plain version of the macro lets us omit <code>str</code> calls on the output of this function. If you want, you can re-define <code>echo</code> for <code>comment</code>s the same way, which would let you write the <code>dolist</code> in the <code>thread</code> <code>echo</code> as</p>

<pre>(<span style=\"color: #a020f0;\">dolist</span> (r (cdr (comments thread))) (echo r))</pre>

  </span>
</div>

<p>A method for the <code>thread</code> object! This is the other difference between a <code>method</code> and an <code>un</code>; you can have multiple <code>method</code>s with the same name which specialize on different objects. If you call <code>echo</code> on a <code>comment</code>, it'll evaluate the first one we defined. If you call it on a <code>thread</code>, it'll evaluate this new one (also note that part of our definition of <code>echo</code> for threads involves calling <code>echo</code> on each reply to the thread, which means that every element of <code>(cdr (comments thread))</code> must be an <code>echo</code>able object). Amend your <code>front-page</code> <code><span style=\"color: #7a378b;\">:body</span></code> again;</p>

<pre>(<span style=\"color: #7a378b;\">:body</span> (echo test-thread))</pre>

<p>We defined <code>echo</code> such that you don't need the <code>str</code> this time (check the <i>Pedantic Note</i> above for details). Refreshing your screen should now show you four poorly styled comments stacked on top of one another. Actually, lets do something about that too. Create a new file called cl-chan.css and add this to it:</p>

<pre><span style=\"color: #0000ff;\">.thread </span>{ <span style=\"color: #a0522d;\">background-color</span>: #ddf; <span style=\"color: #a0522d;\">padding</span>: 10px; <span style=\"color: #a0522d;\">margin-bottom</span>: 10px; }
<span style=\"color: #0000ff;\">.thread .omitted </span>{ <span style=\"color: #a0522d;\">color</span>: #88f; <span style=\"color: #a0522d;\">font-weight</span>: bold; }
<span style=\"color: #0000ff;\">.comment </span>{ <span style=\"color: #a0522d;\">background-color</span>: #aaf; <span style=\"color: #a0522d;\">border</span>: 2px solid #88f; <span style=\"color: #a0522d;\">padding</span>: 5px 5px 0px 5px; <span style=\"color: #a0522d;\">margin-bottom</span>: 10px; }
<span style=\"color: #0000ff;\">.header span </span>{ <span style=\"color: #a0522d;\">margin-right</span>: 3px; }
<span style=\"color: #0000ff;\">.header .subject </span>{ <span style=\"color: #a0522d;\">font-weight</span>: bold; }
<span style=\"color: #0000ff;\">.comment .header span </span>{ <span style=\"color: #a0522d;\">color</span>: #55f; }
<span style=\"color: #0000ff;\">.comment p </span>{ <span style=\"color: #a0522d;\">margin</span>: 3px; }</pre>

<p>then redefine your <code>front-page</code> to</p>

<pre>(<span style=\"color: #a020f0;\">define-easy-handler</span> (front-page <span style=\"color: #7a378b;\">:uri</span> <span style=\"color: #8b2252;\">\"/\"</span>) ()
  (<span style=\"color: #a020f0;\">with-html-output-to-string</span> (*standard-output* nil <span style=\"color: #7a378b;\">:prologue</span> t <span style=\"color: #7a378b;\">:indent</span> t)
    (<span style=\"color: #7a378b;\">:html</span> <span style=\"color: #7a378b;\">:xmlns</span> <span style=\"color: #8b2252;\">\"http://www.w3.org/1999/xhtml\"</span> <span style=\"color: #7a378b;\">:xml</span>\\<span style=\"color: #7a378b;\">:lang</span> <span style=\"color: #8b2252;\">\"en\"</span> <span style=\"color: #7a378b;\">:lang</span> <span style=\"color: #8b2252;\">\"en\"</span>
           (<span style=\"color: #7a378b;\">:head</span> (<span style=\"color: #7a378b;\">:meta</span> <span style=\"color: #7a378b;\">:http-equiv</span> <span style=\"color: #8b2252;\">\"Content-Type\"</span> <span style=\"color: #7a378b;\">:content</span> <span style=\"color: #8b2252;\">\"text/html;charset=utf-8\"</span>)
                  (<span style=\"color: #7a378b;\">:title</span> <span style=\"color: #8b2252;\">\"Test Page\"</span>)
                  (<span style=\"color: #7a378b;\">:link</span> <span style=\"color: #7a378b;\">:rel</span> <span style=\"color: #8b2252;\">\"stylesheet\"</span> <span style=\"color: #7a378b;\">:type</span> <span style=\"color: #8b2252;\">\"text/css\"</span> <span style=\"color: #7a378b;\">:href</span> <span style=\"color: #8b2252;\">\"/cl-chan.css\"</span>))
           (<span style=\"color: #7a378b;\">:body</span> (echo test-thread)))))</pre>

<p>finally, add this at the bottom of the file:</p>

<pre>(push 
 (create-static-file-dispatcher-and-handler 
  <span style=\"color: #8b2252;\">\"/cl-chan.css\"</span> (merge-pathnames <span style=\"color: #8b2252;\">\"cl-chan.css\"</span>)) 
 *dispatch-table*)</pre>

<div class=\"note style\"><h3>Style Note</h3><span class=\"note-body\">
    If you really want to do it right, you should probably create a sub-directory for the CSS files and make that <code>create-folder-dispatcher-and-handler</code> instead.

    You might also want to look into the existing <a href=\"http://www.cliki.net/CSS\">CSS generators</a> in Lisp instead of doing the work by hand, although it probably won't save you much typing on something this minimal.
  </span>
</div>

<p><code>create-static-file-dispatcher-and-handler</code> takes a uri relative to your site and a file path, and serves up that path when that uri is requested.</p>

<p><code>*dispatch-table*</code> is where Hunchentoot figures out how to route incoming requests. By default it only has one entry; <code>default-dispatcher</code>, which gets called if no other dispatcher fits the request (by default, it's set to a Hunchentoot error page).</p>

<p><code>merge-pathnames</code> creates a path given two other paths (we passed in \"cl-chan.css\", the second path is optional and defaults to the directory you ran your Lisp from).</p>

<p>Refreshing after <i>that</i> should get you something slightly better than plain text. The header bar is still unreadable though. You may have noticed a few lines in the CSS that said something about <code>.comment .header span</code> and <code>.header span</code>; that's called foreshadowing.</p>

<pre>(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">echo-header</span> ((comment comment))
  (<span style=\"color: #a020f0;\">with-html-output</span> (*standard-output*)
    (<span style=\"color: #7a378b;\">:span</span> <span style=\"color: #7a378b;\">:class</span> <span style=\"color: #8b2252;\">\"header\"</span> 
           (<span style=\"color: #a020f0;\">dolist</span> (elem '(author email date-time subject))
             (htm (<span style=\"color: #7a378b;\">:span</span> <span style=\"color: #7a378b;\">:class</span> (format nil <span style=\"color: #8b2252;\">\"~(~a~)\"</span> elem) (str (slot-value comment elem))))))))</pre>

<p>We're resorting to <code>slot-value</code> and <code>dolist</code> instead of using <code><span style=\"color: #a020f0;\">with-slots</span></code> because we're assigning a CSS class to each span that matches the slot name. We'll also need to redefine the <code>echo</code> methods to call this one where they need to output comment headers</p>

<pre>(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">echo</span> ((thread thread))
  (<span style=\"color: #a020f0;\">let</span> ((first-comment (car (comments thread))))
    (<span style=\"color: #a020f0;\">with-html-output</span> (*standard-output* nil <span style=\"color: #7a378b;\">:indent</span> t)
      (htm (<span style=\"color: #7a378b;\">:div</span> <span style=\"color: #7a378b;\">:class</span> <span style=\"color: #8b2252;\">\"thread\"</span>
                 (echo-header comment)
                 (<span style=\"color: #7a378b;\">:span</span> <span style=\"color: #7a378b;\">:class</span> <span style=\"color: #8b2252;\">\"body\"</span> 
                        (<span style=\"color: #7a378b;\">:p</span> (str (body first-comment))))
                 (<span style=\"color: #a020f0;\">dolist</span> (r (cdr (comments thread)))
                   (str (echo r))))))))

(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">echo</span> ((comment comment))
  (<span style=\"color: #a020f0;\">with-html-output-to-string</span> (*standard-output* nil <span style=\"color: #7a378b;\">:indent</span> t)
    (htm (<span style=\"color: #7a378b;\">:div</span> <span style=\"color: #7a378b;\">:class</span> <span style=\"color: #8b2252;\">\"comment\"</span>
               (echo-header comment)
               (<span style=\"color: #7a378b;\">:span</span> <span style=\"color: #7a378b;\">:class</span> <span style=\"color: #8b2252;\">\"body\"</span> 
                      (<span style=\"color: #7a378b;\">:p</span> (str (body comment))))))))</pre>

<p>And we can now actually <i>read</i> the comments. Feel free to take some time out and make it pretty, if you like; it's beyond the scope of this tutorial to teach CSS, so <a href=\"http://www.w3schools.com/css/\">here's reference</a> instead.</p>

<p>Now, we've got a thread, which is ok, but we also need boards. A board is a collection of threads with a name. It'll probably have other stuff as we move through this exercise, but a name and some threads will suffice for now.</p>

<pre>(<span style=\"color: #a020f0;\">defclass</span> <span style=\"color: #228b22;\">board</span> ()
  ((name <span style=\"color: #7a378b;\">:reader</span> name <span style=\"color: #7a378b;\">:initarg</span> <span style=\"color: #7a378b;\">:name</span>)
   (threads <span style=\"color: #7a378b;\">:accessor</span> threads <span style=\"color: #7a378b;\">:initarg</span> <span style=\"color: #7a378b;\">:threads</span> <span style=\"color: #7a378b;\">:initform</span> nil)))</pre>

<p>For our purposes, it would also be helpful to have a slightly longer thread.</p>

<pre>(<span style=\"color: #a020f0;\">defparameter</span> <span style=\"color: #a0522d;\">test-thread2</span>
  (make-instance 'thread
                 <span style=\"color: #7a378b;\">:board</span> <span style=\"color: #8b2252;\">\"a\"</span>
                 <span style=\"color: #7a378b;\">:first-comment</span> test-comment
                 <span style=\"color: #7a378b;\">:replies</span> (make-list 42 <span style=\"color: #7a378b;\">:initial-element</span> test-comment3)))</pre>

<p>And define the test board</p>

<pre>(<span style=\"color: #a020f0;\">defparameter</span> <span style=\"color: #a0522d;\">test-board</span>
  (make-instance 'board
                 <span style=\"color: #7a378b;\">:name</span> <span style=\"color: #8b2252;\">\"a\"</span>
                 <span style=\"color: #7a378b;\">:threads</span> (list test-thread 
                                test-thread2 
                                test-thread 
                                test-thread2 
                                test-thread)))</pre>

<p>Now, we know how to echo a thread (output all of its comments with the first one acting as the root element), and we know how to echo an individual comment (output the header in spans, followed by the body), but a board isn't dealt with the same way. The way you <code>echo</code> a board is you output the board's name in giant letters, followed by an <code>&lt;<span style=\"color: #0000ff;\">hr</span> /&gt;</code>, followed by a summary of each thread it contains (a summary is the first comment along with the last five, along with a little label telling us how many were omitted). The best way to do that would probably be to let a thread summarize itself instead of echoing its whole contents.</p>

<pre>(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">summarize</span> ((thread thread) <span style=\"color: #228b22;\">&amp;optional</span> (preview-comment-count 5))
  (<span style=\"color: #a020f0;\">let*</span> ((preview-comments (last (cdr (comments thread)) preview-comment-count))
         (omitted-count (- (length (cdr (comments thread))) (length preview-comments)))
         (first-comment (car (comments thread))))
    (<span style=\"color: #a020f0;\">with-html-output</span> (*standard-output* nil <span style=\"color: #7a378b;\">:indent</span> t)
      (<span style=\"color: #7a378b;\">:div</span> <span style=\"color: #7a378b;\">:class</span> <span style=\"color: #8b2252;\">\"thread\"</span>
            (echo-header first-comment)
            (<span style=\"color: #7a378b;\">:span</span> <span style=\"color: #7a378b;\">:class</span> <span style=\"color: #8b2252;\">\"body\"</span> 
                   (<span style=\"color: #7a378b;\">:p</span> (str (body first-comment))))
            (<span style=\"color: #a020f0;\">when</span> (&gt; omitted-count 0)
              (htm (<span style=\"color: #7a378b;\">:p</span> <span style=\"color: #7a378b;\">:class</span> <span style=\"color: #8b2252;\">\"omitted\"</span> 
                       (str (format nil <span style=\"color: #8b2252;\">\"~a comments omitted (and we don't do pictures yet)\"</span> 
                                    omitted-count)))))
            (<span style=\"color: #a020f0;\">dolist</span> (r preview-comments)
              (str (echo r)))))))</pre>

<p>With that, echoing a board becomes trivial.</p>

<pre>(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">echo</span> ((board board))
  (<span style=\"color: #a020f0;\">with-html-output</span> (*standard-output* nil <span style=\"color: #7a378b;\">:indent</span> t)
    (<span style=\"color: #7a378b;\">:h1</span> (str (name board))) (<span style=\"color: #7a378b;\">:hr</span>)
    (<span style=\"color: #a020f0;\">dolist</span> (thread (threads board))
      (summarize thread))))</pre>

<p>There's really nothing new in either of these code blocks (other than my obvious fear of magic numbers exemplified by making the <code>preview-comment-count</code> an optional argument), so change the <code>:body</code> of your <code>define-easy-handler</code> declaration to <code>(echo test-board)</code> and check out your handiwork in the browser. The next step here is adding navigation. You want to be able to click on a comment to read the thread, and, more importantly, reply to it. To start with, add a link to your <code>summarize</code> method that leads to \"/thread\". The method should now look something like</p>

<pre>(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">summarize</span> ((thread thread) <span style=\"color: #228b22;\">&amp;optional</span> (preview-comment-count 5))
  (<span style=\"color: #a020f0;\">let*</span> ((preview-comments (last (cdr (comments thread)) preview-comment-count))
         (omitted-count (- (length (cdr (comments thread))) (length preview-comments)))
         (first-comment (car (comments thread))))
    (<span style=\"color: #a020f0;\">with-html-output</span> (*standard-output* nil <span style=\"color: #7a378b;\">:indent</span> t)
      (<span style=\"color: #7a378b;\">:div</span> <span style=\"color: #7a378b;\">:class</span> <span style=\"color: #8b2252;\">\"thread\"</span>
            (echo-header first-comment)
            (<span style=\"color: #7a378b;\">:a</span> <span style=\"color: #7a378b;\">:href</span> <span style=\"color: #8b2252;\">\"/thread\"</span> <span style=\"color: #8b2252;\">\"Reply\"</span>)
            (<span style=\"color: #7a378b;\">:span</span> <span style=\"color: #7a378b;\">:class</span> <span style=\"color: #8b2252;\">\"body\"</span> (<span style=\"color: #7a378b;\">:p</span> (str (body first-comment))))
            (<span style=\"color: #a020f0;\">when</span> (&gt; omitted-count 0)
              (htm (<span style=\"color: #7a378b;\">:p</span> <span style=\"color: #7a378b;\">:class</span> <span style=\"color: #8b2252;\">\"omitted\"</span> 
                       (str (format nil <span style=\"color: #8b2252;\">\"~a comments omitted (and we don't do pictures yet)\"</span> 
                                    omitted-count)))))
            (<span style=\"color: #a020f0;\">dolist</span> (r (cdr preview-comments)) (str (echo r)))))))</pre>

<p>Also, declare the \"/thread\" page itself.</p>

<pre>(<span style=\"color: #a020f0;\">define-easy-handler</span> (thread <span style=\"color: #7a378b;\">:uri</span> <span style=\"color: #8b2252;\">\"/thread\"</span>) ()
  (<span style=\"color: #a020f0;\">with-html-output-to-string</span> (*standard-output* nil <span style=\"color: #7a378b;\">:prologue</span> t <span style=\"color: #7a378b;\">:indent</span> t)
    (<span style=\"color: #7a378b;\">:html</span> <span style=\"color: #7a378b;\">:xmlns</span> <span style=\"color: #8b2252;\">\"http://www.w3.org/1999/xhtml\"</span> <span style=\"color: #7a378b;\">:xml</span>\\<span style=\"color: #7a378b;\">:lang</span> <span style=\"color: #8b2252;\">\"en\"</span> <span style=\"color: #7a378b;\">:lang</span> <span style=\"color: #8b2252;\">\"en\"</span>
           (<span style=\"color: #7a378b;\">:head</span> (<span style=\"color: #7a378b;\">:meta</span> <span style=\"color: #7a378b;\">:http-equiv</span> <span style=\"color: #8b2252;\">\"Content-Type\"</span> <span style=\"color: #7a378b;\">:content</span> <span style=\"color: #8b2252;\">\"text/html;charset=utf-8\"</span>)
                  (<span style=\"color: #7a378b;\">:title</span> (str (board test-thread)))
                  (<span style=\"color: #7a378b;\">:link</span> <span style=\"color: #7a378b;\">:rel</span> <span style=\"color: #8b2252;\">\"stylesheet\"</span> <span style=\"color: #7a378b;\">:type</span> <span style=\"color: #8b2252;\">\"text/css\"</span> <span style=\"color: #7a378b;\">:href</span> <span style=\"color: #8b2252;\">\"/cl-chan.css\"</span>))
           (<span style=\"color: #7a378b;\">:body</span> (echo test-thread)))))</pre>

<p>Go ahead and check out the result in your browser. Click around a bit, if you like. Before we go on, you may have noticed that <code>thread</code> and <code>front-page</code> have a lot in common. In fact, the only differences are the <code><span style=\"color: #0000ff; font-weight: bold;\">:title</span></code> property and the contents of <code><span style=\"color: #0000ff; font-weight: bold;\">:body</span></code>. Normally, I wouldn't bother pulling out a pattern that only occurs twice, but I'm fairly sure we're going to want pages other than a board and a thread before we're done, <i>and</i> this one is fairly laborious to type out so...</p>

<pre>(<span style=\"color: #a020f0;\">defmacro</span> <span style=\"color: #0000ff;\">page-template</span> ((<span style=\"color: #228b22;\">&amp;key</span> title) <span style=\"color: #228b22;\">&amp;body</span> body)
  `(<span style=\"color: #a020f0;\">with-html-output-to-string</span> (*standard-output* nil <span style=\"color: #7a378b;\">:prologue</span> t <span style=\"color: #7a378b;\">:indent</span> t)
     (<span style=\"color: #7a378b;\">:html</span> <span style=\"color: #7a378b;\">:xmlns</span> <span style=\"color: #8b2252;\">\"http://www.w3.org/1999/xhtml\"</span> <span style=\"color: #7a378b;\">:xml</span>\\<span style=\"color: #7a378b;\">:lang</span> <span style=\"color: #8b2252;\">\"en\"</span> <span style=\"color: #7a378b;\">:lang</span> <span style=\"color: #8b2252;\">\"en\"</span>
            (<span style=\"color: #7a378b;\">:head</span> (<span style=\"color: #7a378b;\">:meta</span> <span style=\"color: #7a378b;\">:http-equiv</span> <span style=\"color: #8b2252;\">\"Content-Type\"</span> <span style=\"color: #7a378b;\">:content</span> <span style=\"color: #8b2252;\">\"text/html;charset=utf-8\"</span>)
                   (<span style=\"color: #7a378b;\">:title</span> (str ,title))
                   (<span style=\"color: #7a378b;\">:link</span> <span style=\"color: #7a378b;\">:rel</span> <span style=\"color: #8b2252;\">\"stylesheet\"</span> <span style=\"color: #7a378b;\">:type</span> <span style=\"color: #8b2252;\">\"text/css\"</span> <span style=\"color: #7a378b;\">:href</span> <span style=\"color: #8b2252;\">\"/cl-chan.css\"</span>))
            (<span style=\"color: #7a378b;\">:body</span> ,@body))))</pre>

<p>That'll let us re-write <code>front-page</code> and <code>thread</code> as</p>

<pre>(<span style=\"color: #a020f0;\">define-easy-handler</span> (front-page <span style=\"color: #7a378b;\">:uri</span> <span style=\"color: #8b2252;\">\"/\"</span>) ()
  (page-template (<span style=\"color: #7a378b;\">:title</span> <span style=\"color: #8b2252;\">\"cl-chan\"</span>)
    (echo test-board)))

(<span style=\"color: #a020f0;\">define-easy-handler</span> (thread <span style=\"color: #7a378b;\">:uri</span> <span style=\"color: #8b2252;\">\"/thread\"</span>) ()
  (page-template (<span style=\"color: #7a378b;\">:title</span> (board test-thread))
    (echo test-thread)))</pre>

<p>without really losing any readability. Right, now then. The inputs. Teaching how HTML forms work isn't really the focus of this guide, so I'm gonna go ahead and cheat because I really <i>really</i> don't feel like going through the entire submit->validate->show-errors||proceed semi-loop.</p>

<pre>&gt; (asdf-install:install 'formlets)
[[snip]]
FORMLETS

&gt; (<span style=\"color: #a020f0;\">defpackage</span> <span style=\"color: #228b22;\">:cl-chan</span> (<span style=\"color: #7a378b;\">:use</span> <span style=\"color: #7a378b;\">:cl</span> <span style=\"color: #7a378b;\">:cl-who</span> <span style=\"color: #7a378b;\">:hunchentoot</span> <span style=\"color: #7a378b;\">:formlets</span>))
#&lt;PACKAGE <span style=\"color: #8b2252;\">\"CL-CHAN\"</span>&gt;</pre>

<p>It's <a href=\"https://github.com/Inaimathi/formlets\">a library</a> I wrote a little while ago to help me reduce the boilerplate involved with using HTML forms, drawing inspiration heavily from the <a href=\"http://racket-lang.org/\">Racket</a> (then PLT Scheme) implementation. I won't teach you this, just show you the code involved and offer a shortened explanation so we can move on.</p>

<pre>(<span style=\"color: #a020f0;\">define-formlet</span> (post-comment-form)
    ((author text) (email text) (subject text) (body textarea) (captcha recaptcha))
  (<span style=\"color: #a020f0;\">let</span> ((new-comment (make-instance 'comment
                                    <span style=\"color: #7a378b;\">:author</span> author <span style=\"color: #7a378b;\">:email</span> email 
                                    <span style=\"color: #7a378b;\">:subject</span> subject <span style=\"color: #7a378b;\">:body</span> body
                                    <span style=\"color: #7a378b;\">:date-time</span> (get-universal-time))))
    (setf (replies test-thread)
          (append (replies test-thread) (list new-comment)))
    (redirect <span style=\"color: #8b2252;\">\"/thread\"</span>)))</pre>

<p>Since we're using <a href=\"http://www.google.com/recaptcha\">recaptcha</a>, you'll also need to do </p>

<pre>(setf formlets:*public-key* [my-public-key] formlets:*private-key* [my-private-key])</pre>

<p>You can get your keys by <a href=\"http://www.google.com/recaptcha/whyrecaptcha\">signing up</a> (it's free, and they don't need any personal details other than, I believe, an email). Finally, modify your thread page to show that formlet</p>

<pre>(<span style=\"color: #a020f0;\">define-easy-handler</span> (thread <span style=\"color: #7a378b;\">:uri</span> <span style=\"color: #8b2252;\">\"/thread\"</span>) ()
  (page-template (<span style=\"color: #7a378b;\">:title</span> (board test-thread))
    (show-formlet post-comment-form)
    (echo test-thread)))</pre>

<p>That was a formlet declaration, by the by; it has 5 fields (three regular inputs named <code>author</code>, <code>email</code> and <code>subject</code> respectively, a textarea named <code>body</code> and a <a href=\"http://www.google.com/recaptcha\">recaptcha</a> field named <code>captcha</code>). In this case, all the fields are un-validated (except for the captcha which always validates). When the user correctly enters the captcha, we'll add their comment to the test-thread and redirect them to the \"/thread\" page. After evaluating all that, you should be able to see a <code>reply</code> link on on each thread on the front page and a comment form at the top of the thread page. It actually works, for some value of \"works\", so you can try to add some messages to the <code>test-thread</code>.</p>

<p>We want to be able to add threads too though, not just reply to them. There's two ways we could do that;</p>

<p>First, we could add a hidden field to the <code>post-comment-form</code> that would contain either a reference to the thread or \"new\" (and post a new thread when it was \"new\"). That would let us reuse the same formlet.</p>

<p>Second, we could define a new formlet that just added a new thread to the board. There would be some additional boilerplate, but the two would be kept entirely separate rather than relying on a piece of information being passed to the client and then being passed back.</p>

<p>Despite the fact that relying on the client isn't always the best idea, it would probably work well here. However, we'll actually want to make the <code>body</code> (and eventual <code>image</code>) fields mandatory when you're starting a new thread, which means that we do actually need to handle validation differently for both situations, even though they involve the same fields. Ah well. If we need to define a third similar formlet, we can factor the common points out with a macro later.</p>

<pre>(<span style=\"color: #a020f0;\">define-formlet</span> (post-thread-form)
    ((author text) (email text) (subject text)
     (body textarea <span style=\"color: #7a378b;\">:validation</span> ((longer-than? 5) <span style=\"color: #8b2252;\">\"You need to type at least six characters here.\"</span>))
     (captcha recaptcha))
  (<span style=\"color: #a020f0;\">let*</span> ((new-comment (make-instance 'comment
                                     <span style=\"color: #7a378b;\">:author</span> author <span style=\"color: #7a378b;\">:email</span> email 
                                     <span style=\"color: #7a378b;\">:subject</span> subject <span style=\"color: #7a378b;\">:body</span> body
                                     <span style=\"color: #7a378b;\">:date-time</span> (get-universal-time)))
         (new-thread (make-instance 'thread <span style=\"color: #7a378b;\">:board</span> <span style=\"color: #8b2252;\">\"a\"</span> <span style=\"color: #7a378b;\">:first-comment</span> new-comment)))
    (push new-thread (threads test-board))
    (redirect <span style=\"color: #8b2252;\">\"/\"</span>)))</pre>

<p>Add it to the <code>board</code> class' <code>echo</code> method too</p>

<pre>(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">echo</span> ((board board))
  (<span style=\"color: #a020f0;\">with-html-output</span> (*standard-output* nil <span style=\"color: #7a378b;\">:indent</span> t)
    (<span style=\"color: #7a378b;\">:h1</span> (str (name board)))
    (<span style=\"color: #7a378b;\">:hr</span>)
    (show-formlet post-thread-form)
    (<span style=\"color: #7a378b;\">:hr</span>)
    (<span style=\"color: #a020f0;\">dolist</span> (thread (threads board))
      (summarize thread))))</pre>

<p>Refreshing should get you the same front page, but with a form to let you start a new thread. We're temporarily cheating on the <i>display</i> of threads by just showing test-thread all the time, so you can't actually see or reply to the others, but that still Actually Works™. For a tutorial titled \"Crash Course on CLSQL and Hunchentoot\", we haven't done a whole lot of CLSQL yet. We, actually, haven't so much as included it. Lets change that. Change your <code>defpackage</code> line to</p>

<pre>(<span style=\"color: #a020f0;\">defpackage</span> <span style=\"color: #228b22;\">:cl-chan</span> (<span style=\"color: #7a378b;\">:use</span> <span style=\"color: #7a378b;\">:cl</span> <span style=\"color: #7a378b;\">:cl-who</span> <span style=\"color: #7a378b;\">:hunchentoot</span> <span style=\"color: #7a378b;\">:formlets</span> <span style=\"color: #7a378b;\">:clsql</span>))</pre>

<p>and re-evaluate it. That should cause an error. Ok, ok, I promise to stop teasing after this, but this is just a point you should probably know if you're going to be developing in Lisp. Those of you who know what just happened, resolve the conflict by picking the <code>clsql:select</code> option, and skip the following note.</p>

<div class=\"note beginner\"><h3>Beginner Note</h3><span class=\"note-body\">

    <p>Namespace conflicts happen sometimes. Packages you want to include both export the same, perfectly reasonable name and when you <code><span style=\"color: #7a378b;\">:use</span></code> them both without specifying what to do about the conflict, your Lisp throws you an error.</p>

    <p>In this case, the conflict is with the symbol <code>select</code>. <code><span style=\"color: #7a378b;\">:formlets</span></code> exports a <code>select</code> class (named after the HTML <a href=\"http://www.w3schools.com/tags/tag_select.asp\">Select</a> tag that it models) and <code><span style=\"color: #7a378b;\">:clsql</span></code> exports a <code>select</code> function (named after the SQL <a href=\"http://www.w3schools.com/sql/sql_select.asp\">SELECT</a> statement that <i>it</i> models). Both packages made the right choice of name for the thing they're trying to represent, but they wouldn't play nice in the same namespace. So it's a good thing Lisp has built-in namespace management.</p>
    
    <p>Now, if we weren't planning on using <code>select</code> at all, we could just add a shadow statement like so:</p>

<pre>(<span style=\"color: #a020f0;\">defpackage</span> <span style=\"color: #228b22;\">:cl-chan</span> (<span style=\"color: #7a378b;\">:use</span> <span style=\"color: #7a378b;\">:cl</span> <span style=\"color: #7a378b;\">:cl-who</span> <span style=\"color: #7a378b;\">:hunchentoot</span> <span style=\"color: #7a378b;\">:formlets</span> <span style=\"color: #7a378b;\">:clsql</span>)
  (<span style=\"color: #7a378b;\">:shadow</span> <span style=\"color: #7a378b;\">:select</span>))</pre>

    <p>and be done with it. However, while our project won't call for the <code>select</code> <b>tag</b> yet (possibly at all), we will be using the <code>select</code> <b>statement</b> quite a bit. In that situation, you actually want to specify a <code><span style=\"color: #7a378b;\">:shadowing-import-from</span></code> like this:</p>

<pre>(<span style=\"color: #a020f0;\">defpackage</span> <span style=\"color: #228b22;\">:cl-chan</span> (<span style=\"color: #7a378b;\">:use</span> <span style=\"color: #7a378b;\">:cl</span> <span style=\"color: #7a378b;\">:cl-who</span> <span style=\"color: #7a378b;\">:hunchentoot</span> <span style=\"color: #7a378b;\">:formlets</span> <span style=\"color: #7a378b;\">:clsql</span>)
  (<span style=\"color: #7a378b;\">:shadowing-import-from</span> <span style=\"color: #7a378b;\">:clsql</span> <span style=\"color: #7a378b;\">:select</span>))</pre>

    <p>That tells Lisp to import the <code>select</code> symbol from the <code>:clsql</code> package, and shadow the rest of them.</p>
  </span>
</div>

<p>Ok, first thing to do is make sure you have a database and user set up in whatever db engine you use. You'll need to create a user too, and give the user permissions to the database (for this tutorial, you can just use your root user instead of creating a new one, but you shouldn't do that on a production server). The process varies depending on DB, so check the docs for yours.</p>

<p>Next, we need to change our defclass statements slightly. Lets start with <code>comment</code></p>

<pre>(def-view-class comment ()
  ((id <span style=\"color: #7a378b;\">:accessor</span> id <span style=\"color: #7a378b;\">:initarg</span> <span style=\"color: #7a378b;\">:id</span> <span style=\"color: #7a378b;\">:type</span> integer 
       <span style=\"color: #7a378b;\">:db-constraints</span> (<span style=\"color: #7a378b;\">:not-null</span> <span style=\"color: #7a378b;\">:auto-increment</span>) <span style=\"color: #7a378b;\">:db-kind</span> <span style=\"color: #7a378b;\">:key</span>)
   (thread-id <span style=\"color: #7a378b;\">:reader</span> thread-id <span style=\"color: #7a378b;\">:initarg</span> <span style=\"color: #7a378b;\">:thread-id</span> <span style=\"color: #7a378b;\">:type</span> integer)
   (author <span style=\"color: #7a378b;\">:reader</span> author <span style=\"color: #7a378b;\">:initarg</span> <span style=\"color: #7a378b;\">:author</span> <span style=\"color: #7a378b;\">:initform</span> nil <span style=\"color: #7a378b;\">:type</span> string)
   (email <span style=\"color: #7a378b;\">:reader</span> email <span style=\"color: #7a378b;\">:initarg</span> <span style=\"color: #7a378b;\">:email</span> <span style=\"color: #7a378b;\">:initform</span> nil <span style=\"color: #7a378b;\">:type</span> string)
   (subject <span style=\"color: #7a378b;\">:reader</span> subject <span style=\"color: #7a378b;\">:initarg</span> <span style=\"color: #7a378b;\">:subject</span> <span style=\"color: #7a378b;\">:initform</span> nil <span style=\"color: #7a378b;\">:type</span> string)
   (body <span style=\"color: #7a378b;\">:reader</span> body <span style=\"color: #7a378b;\">:initarg</span> <span style=\"color: #7a378b;\">:body</span> <span style=\"color: #7a378b;\">:initform</span> nil <span style=\"color: #7a378b;\">:type</span> string)
   (date-time <span style=\"color: #7a378b;\">:reader</span> date-time <span style=\"color: #7a378b;\">:initarg</span> <span style=\"color: #7a378b;\">:date-time</span> <span style=\"color: #7a378b;\">:type</span> wall-time)))</pre>

<p>Not all <i>that</i> much has actually changed. It's defined with def-view-class rather than plain defclass, we added an <code>id</code> field (whose <code>:db-constraints</code> and <code>:db-kind</code> field should make the intent clear if you know anything about databases), we added a <code>thread-id</code> field to show what thread this comment belongs to, and we added some admittedly poor type annotations to the rest of the fields. You actually need the <code>id</code> field, by the way. If you want <code>clsql</code> to update your data properly through the class-based interface, each record needs a <code>:key</code>, and it needs to be set (if that isn't the case, it'll just add a new record rather than editing the existing one).</p>

<p>Note that <code>date-time</code> is of type <code>wall-time</code> rather than <code>integer</code> which means we'll need to do a bit of shuffling in how we assign it. CLSQL actually has a bunch of really useful, but as far as I know largely undocumented, utilities for dealing with times, dates and durations. Define a new function called <code>now</code>:</p>

<pre>(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">now</span> () (clsql-sys:utime-&gt;time (get-universal-time))</pre>

<p>and call it instead of <code>(get-universal-time)</code> to set the <code>date-time</code> slot on a comment (you can just do a search-and-replace here; we haven't used <code>univeral-time</code>s for anything else).</p>

<div class=\"note package\"><h3>Package Note</h3><span class=\"note-body\">
<p>A point of interest, <code>clsql-sys</code> has plenty of similar utility functions, but they're not documented anywhere other than in the code itself (check out the test suite buried in the clsql-sys source) and in <a href=\"http://clsql.b9.com/manual/def-view-class.html\">three half-line blurbs about wall-time, date and duration</a> in the official documentation. This kind of poor visibility is what led me to re-invent the wheel <a href=\"/article?name=clsql.html\">last time</a> in defining my own <code>mysql-time</code> function the hard way.</p>

<p>Other stuff you might find interesting (some of which we will touch on later):</p>
    
<pre>make-duration
parse-timestring
parse-datestring
time-difference <span style=\"color: #b22222;\">;; </span><span style=\"color: #b22222;\">it has all the usual arithmetic items too, 
</span>                <span style=\"color: #b22222;\">;; </span><span style=\"color: #b22222;\">this just happens to be the most useful, IMO
</span>print-date <span style=\"color: #b22222;\">;; </span><span style=\"color: #b22222;\">which, oddly, takes a <code>wall-time</code>, 
</span>           <span style=\"color: #b22222;\">;; </span><span style=\"color: #b22222;\">not a <code>date</code>, and accepts the following 
</span>           <span style=\"color: #b22222;\">;; </span><span style=\"color: #b22222;\">format options: 
</span>           <span style=\"color: #b22222;\">;;    </span><span style=\"color: #b22222;\">:time-of-day :long-day :month :month-year 
</span>           <span style=\"color: #b22222;\">;;    </span><span style=\"color: #b22222;\">:full :full+weekday :daytime :day
</span>clsql-sys:date-&gt;time
clsql-sys:time-&gt;date
clsql-sys::days-in-month <span style=\"color: #b22222;\">;;</span><span style=\"color: #b22222;\">yup, not even external</span></pre>
  </span>
</div>

<p>The transformation of a thread is a little more interesting.</p>

<pre>(def-view-class thread ()
  ((id <span style=\"color: #7a378b;\">:accessor</span> id <span style=\"color: #7a378b;\">:initarg</span> <span style=\"color: #7a378b;\">:id</span> <span style=\"color: #7a378b;\">:type</span> integer 
       <span style=\"color: #7a378b;\">:db-constraints</span> (<span style=\"color: #7a378b;\">:not-null</span> <span style=\"color: #7a378b;\">:auto-increment</span>) <span style=\"color: #7a378b;\">:db-kind</span> <span style=\"color: #7a378b;\">:key</span>)
   (board-id <span style=\"color: #7a378b;\">:reader</span> board-id <span style=\"color: #7a378b;\">:initarg</span> <span style=\"color: #7a378b;\">:board-id</span> <span style=\"color: #7a378b;\">:type</span> integer)
   (comments <span style=\"color: #7a378b;\">:accessor</span> comments <span style=\"color: #7a378b;\">:db-kind</span> <span style=\"color: #7a378b;\">:join</span>
             <span style=\"color: #7a378b;\">:db-info</span> (<span style=\"color: #7a378b;\">:join-class</span> comment <span style=\"color: #7a378b;\">:home-key</span> id <span style=\"color: #7a378b;\">:foreign-key</span> thread-id <span style=\"color: #7a378b;\">:set</span> t))))</pre>

<p>We add an <code>id</code> slot here too, but the declaration of <code>comments</code> is our first example of the <code><span style=\"color: #0000ff; font-weight: bold;\">:db-kind :join</span></code> notation. The important parts are</p>

<ul>
  <li><code><span style=\"color: #0000ff; font-weight: bold;\">:db-info</span></code> <i>must</i> be provided if you have <code><span style=\"color: #0000ff; font-weight: bold;\">:db-kind</span> <span style=\"color: #0000ff; font-weight: bold;\">:join</span></code>.</li>
  <li><code><span style=\"color: #0000ff; font-weight: bold;\">:join-class</span></code> must designate another class defined by <code>def-view-class</code> (in this case <code>comment</code>, obviously).</li>
  <li><code><span style=\"color: #0000ff; font-weight: bold;\">:home-key</span></code> and <code><span style=\"color: #0000ff; font-weight: bold;\">:foreign-key</span></code> specify which columns to join on (you can specify either single columns or multiple columns, as in <code>'(id thread-id)</code>, for example).</li>
  <li><code><span style=\"color: #0000ff; font-weight: bold;\">:set</span></code> is a boolean that specifies whether this join should expect multiple values. It's <code>nil</code> by default, but in this case, we <i>are</i> expecting a set of comments to be returned, so we need to set it.</li>
  <li>the results of a <code><span style=\"color: #7a378b;\">:join</span></code> are returned as a list of matching elements, so we won't need to change how we deal with comments in any of the <code>thread</code> methods</li>
</ul>

<p>The boards declaration shouldn't present any surprises</p>

<pre>(def-view-class board ()
  ((id <span style=\"color: #7a378b;\">:accessor</span> id <span style=\"color: #7a378b;\">:initarg</span> <span style=\"color: #7a378b;\">:id</span> <span style=\"color: #7a378b;\">:type</span> integer 
       <span style=\"color: #7a378b;\">:db-constraints</span> (<span style=\"color: #7a378b;\">:not-null</span> <span style=\"color: #7a378b;\">:auto-increment</span>) <span style=\"color: #7a378b;\">:db-kind</span> <span style=\"color: #7a378b;\">:key</span>)
   (name <span style=\"color: #7a378b;\">:reader</span> name <span style=\"color: #7a378b;\">:initarg</span> <span style=\"color: #7a378b;\">:name</span> <span style=\"color: #7a378b;\">:type</span> (string 5))
   (threads <span style=\"color: #7a378b;\">:accessor</span> threads <span style=\"color: #7a378b;\">:db-kind</span> <span style=\"color: #7a378b;\">:join</span>
            <span style=\"color: #7a378b;\">:db-info</span> (<span style=\"color: #7a378b;\">:join-class</span> thread <span style=\"color: #7a378b;\">:home-key</span> id <span style=\"color: #7a378b;\">:foreign-key</span> board-id <span style=\"color: #7a378b;\">:set</span> t))))</pre>

<p>The only new thing here is that <code>name</code> is of type <code>(string 5)</code>, which just means that <code>5</code> will be passed as the width of that column (in MySQL, this will be represented as a <code>VARCHAR(5)</code> column; it may be different in other databases). You can do the same sort of thing with <code>integer</code>, <code>varchar</code>, <code>float</code>, and <code>number</code> fields to limit length.</p>

<p>Once you've got the classes defined, you can automatically create tables based on them by using <code>create-view-from-class</code>. Lets connect and create those tables</p>

<pre>&gt; (connect '(<span style=\"color: #8b2252;\">\"localhost\"</span> <span style=\"color: #8b2252;\">\"cl_chan\"</span> <span style=\"color: #8b2252;\">\"me\"</span> <span style=\"color: #8b2252;\">\"my password\"</span>) <span style=\"color: #7a378b;\">:database-type</span> <span style=\"color: #7a378b;\">:mysql</span>) <span style=\"color: #b22222;\">;; </span><span style=\"color: #b22222;\">obviously, you'll want to change the :mysql to your DB type and \"me\"/\"my password\" to your information
</span>#&lt;CLSQL-MYSQL:MYSQL-DATABASE localhost/cl_chan/me OPEN {BA80359}&gt;
&gt; (<span style=\"color: #a020f0;\">dolist</span> (c '(board thread comment)) (create-view-from-class c))
NIL</pre>

<p>A similar function, <code>drop-view-from-class</code> will let you delete the tables later (you don't need to do this right now). Lets get our data into our DB. We're kind of starting from scratch because we want the DB to handle assigning IDs to everything (even though we could easily guess them at this point).</p>

<pre>&gt; (<span style=\"color: #a020f0;\">defparameter</span> <span style=\"color: #a0522d;\">test-board</span> (make-instance 'board <span style=\"color: #7a378b;\">:name</span> <span style=\"color: #8b2252;\">\"a\"</span>))
TEST-BOARD
&gt; (update-records-from-instance test-board)
1</pre>

<p>The return value from the function is the ID the database assigned to that record. Obviously, \"a\" being the first board, it's assigned the id 1. At this stage, we also need to change our handlers and our methods slightly. First up, lets get a board page up</p>

<pre>(<span style=\"color: #a020f0;\">define-easy-handler</span> (board <span style=\"color: #7a378b;\">:uri</span> <span style=\"color: #8b2252;\">\"/board\"</span>) ()
  (page-template (<span style=\"color: #7a378b;\">:title</span> <span style=\"color: #8b2252;\">\"cl-chan\"</span>)
    (<span style=\"color: #a020f0;\">let</span> ((board (caar (select 'board <span style=\"color: #7a378b;\">:where</span> [= [slot-value 'board 'id] 1]))))
      (echo board))))</pre>

<p>The <code>select</code> statement there should be decipherable to you if you're familiar with SQL (we only have one board, so I'm hard-coding the board ID right now, we'll change that later). First thing to note is that <code>caar</code> call wrapping <code>select</code>. <code>select</code> always returns a list of lists. It's a bit annoying here because we're only selecting one thing, so it would be helpful to just return a single item. But if we did, for example</p>

<pre>(select 'board 'thread 'comment)</pre>

<p>then we'd actually want a list of lists (<code>((board thread comment) (board thread comment) ...)</code>). I guess the developers of <code>clsql</code> thought it better to be consistent than convenient (which I agree with up to a point, and this isn't past that point yet).</p>

<p>Notice also that the <code><span style=\"color: #7a378b;\">:where</span></code> clause is expressed as a keyword argument. The square brackets delimit expressions that are going to be translated mechanically to SQL behind the scenes. The thing is, they're implemented as reader macros, so you'll need to add</p>

<pre>(file-enable-sql-reader-syntax)</pre>

<p>to your file (just below the <code>in-package</code> line), as well as evaluate </p>

<pre>&gt; (enable-sql-reader-syntax)
NIL</pre>

<p>at the REPL. If you don't, you'll get some odd undefined-variable errors. We'll need to re-write our <code>post-thread-form</code> too</p>

<pre>(<span style=\"color: #a020f0;\">define-formlet</span> (post-thread-form)
    ((author text) (email text) (subject text)
     (body textarea <span style=\"color: #7a378b;\">:validation</span> ((longer-than? 5) <span style=\"color: #8b2252;\">\"You need to type at least six characters here.\"</span>))
     (captcha recaptcha))
  (<span style=\"color: #a020f0;\">let*</span> ((thread-id (update-records-from-instance
                     (make-instance 'thread <span style=\"color: #7a378b;\">:board-id</span> 1)))
         (new-comment (make-instance 'comment 
                                     <span style=\"color: #7a378b;\">:thread-id</span> thread-id
                                     <span style=\"color: #7a378b;\">:author</span> author <span style=\"color: #7a378b;\">:email</span> email 
                                     <span style=\"color: #7a378b;\">:subject</span> subject <span style=\"color: #7a378b;\">:body</span> body
                                     <span style=\"color: #7a378b;\">:date-time</span> (now))))
    (update-records-from-instance new-comment)
    (redirect <span style=\"color: #8b2252;\">\"/board\"</span>)))</pre>

<p>After evaluating all that, hop into your browser and add a thread. If you've done everything correctly, you'll notice that <i>nothing happened</i>. Hop into the REPL, just to make sure something else didn't go wrong; you should be able to do</p>

<pre>&gt; (select 'thread)
((#&lt;THREAD {B5D5D49}&gt;))

&gt; (select 'comment)
((#&lt;COMMENT {B64AE29}&gt;))</pre>

<p>There'll be more of them if you tried a few times. So the threads and comments are being generated, but they're not showing up on your page. This is actually a feature of CLSQL. A caching feature. I don't mean for that to sound tongue-in-cheek, it's very useful when you have a somewhat static set of data and you'd like to save database round-trips. In those situations, you'd want to keep caching on globally and specify the individual non-caching <code>select</code>s by doing</p>

<pre>(select 'foo <span style=\"color: #7a378b;\">:caching</span> nil)</pre>

<p>It's just that <i>this</i> isn't that kind of project. We'd like non-caching to be the default (and we'll specify the places where caching <i>should</i> happen). So add</p>

<pre>(setf *default-caching* nil)</pre>

<p>near the top of your file and evaluate it. Go ahead and refresh, and you should see your new threads. Of course, clicking \"Reply\" does <i>not</i> do what we want at this point. Lets fix the <code>thread</code> page and finally get this thing off the ground.</p>

<pre>(<span style=\"color: #a020f0;\">define-formlet</span> (post-comment-form)
    ((thread-id hidden) 
     (author text) (email text) (subject text) (body textarea)
     (captcha recaptcha))
  (<span style=\"color: #a020f0;\">let</span> ((new-comment (make-instance 'comment
                                    <span style=\"color: #7a378b;\">:thread-id</span> (parse-integer thread-id)
                                    <span style=\"color: #7a378b;\">:author</span> author <span style=\"color: #7a378b;\">:email</span> email 
                                    <span style=\"color: #7a378b;\">:subject</span> subject <span style=\"color: #7a378b;\">:body</span> body
                                    <span style=\"color: #7a378b;\">:date-time</span> (now))))
    (update-records-from-instance new-comment)
    (redirect (format nil <span style=\"color: #8b2252;\">\"/thread?thread-id=~a\"</span> thread-id))))

(<span style=\"color: #a020f0;\">define-easy-handler</span> (thread-page <span style=\"color: #7a378b;\">:uri</span> <span style=\"color: #8b2252;\">\"/thread\"</span>) (thread-id)
  (<span style=\"color: #a020f0;\">let</span> ((thread (caar (select 'thread <span style=\"color: #7a378b;\">:where</span> [= [slot-value 'thread 'id] thread-id]))))
    (page-template (<span style=\"color: #7a378b;\">:title</span> (or (title (car (comments thread))) (id thread)))
      (echo thread))))</pre>

<p>You'll also need to change the <code>show-formlet</code> line in the <code>thread</code>s' <code>echo</code> method to</p>

<pre>(show-formlet post-comment-form <span style=\"color: #7a378b;\">:default-values</span> (list (id thread)))</pre>

so that the hidden field we've got going will actually have the correct default value.

<p>Note that we've got a new field to let us know which thread is being replied to (we could have done this through hunchentoots' <code><a href=\"http://weitz.de/hunchentoot/#sessions\">session</a></code>, but that would have some odd corner cases if someone wanted to keep in multiple threads at once). Adding an argument to an easy-handler just makes sure it's bound appropriately (so the <code>thread-id</code> in those <code><span style=\"color: #7a378b;\">:where</span></code> and <code><span style=\"color: #7a378b;\">:default-values</span></code> clauses will be set to the correct values).</p>

<div class=\"note pedantic\"><h3>Pedantic Note</h3><span class=\"note-body\">
    <p>Just as an addendum, keep in mind two things here.</p>

    <p>One, if you feel like calling <code>get-parameter</code> manually, you call it with the lower-cased string. Above, it would be <code>(get-parameter <span style=\"color: #8b2252;\">\"thread-id\"</span>)</code>, not <code>(get-parameter <span style=\"color: #7a378b;\">:thread-id</span>)</code> or <code>(get-parameter <span style=\"color: #8b2252;\">\"THREAD-ID\"</span>)</code>. Those are all different things (the second one will throw an error, I think, the third one will just return NIL).</p>

    <p>Two, any values you get back this way are <b>strings</b>, no matter what they actually represent. It doesn't matter in this case because the <code>CLSQL</code> reader macro handles it intelligently, and <code>formlets</code> converts anything it gets into a string anyway. However, if we wanted to create a new DB object (as in the formlet above), or do a standard numeric comparison, however, we'd need to convert from string. So, </p>

<pre>    (= 1 (parse-integer thread-id))</pre>
    
    and not

<pre>    (= 1 thread-id)</pre>

    the-more-you-know.jpg
  </span>
</div>

<p>Finally, change the reply link in the <code>summarize</code> method to point to <code>(format nil <span style=\"color: #8b2252;\">\"/thread?thread-id=~a\"</span> (id thread))</code> instead of <code><span style=\"color: #8b2252;\">\"/thread\"</span></code> (so that you can just click on the \"Reply\" link to get around). Go ahead and add some threads, then respond to them. You should be able to at this point.</p>

<p>I honestly thought this was going to be a shorter piece, but it's at 6k words and I've just managed to explain how to put together a very simple non-image message board. I'm calling this Part 1 and picking it up later. The code so far is over at <a href=\"https://github.com/Inaimathi/cl-chan\">github</a>, in case you feel like starting from something when you tinker. If you feel like doing some exercises in the meantime, use what we've learned here to implement multiple boards (everything should be in place for that to be a simple tweak).</p>

<p>Still to Come: multiple boards, images, working with uploads and defining <code>asdf-system</code>s.</p>
  "))
((5202 3723 558131000) :INSERT (51 :POSTED 3523320000))
((5202 3723 558134000) :INSERT (51 :TAG :CLSQL))
((5202 3723 558137000) :INSERT (51 :TAG :CLOS))
((5202 3723 558139000) :INSERT (51 :TAG :COMMON-LISP))
((5202 3723 558142000) :INSERT (51 :TAG :HUNCHENTOOT))
((5202 3723 558413000) :INSERT (52 :TITLE "Intermission"))
((5202 3723 558419000) :INSERT (52 :FILE "using-clsql-intermission.html"))
((5202 3723 558424000) :INSERT (52 :EDITED 3610022331))
((5202 3723 558457000) :INSERT
 (52 :BODY "<p>Break time.</p>

<p>I have been researching various options for image sizing, and I do plan on finishing up the crash course sometime soon, but I saw <a href=\"http://www.reddit.com/r/gnu/comments/jyh4o/with_the_proliferation_of_static_site_generators/\">a thread</a> that sent me off thinking about something else.</p>

<p>Someone on Reddit linked to an article about <a href=\"http://www.jeremyscheff.com/2011/08/jekyll-and-other-static-site-generators-are-currently-harmful-to-the-free-open-source-software-movement/\">static site generators (and their effect on software freedom)</a>, in which the writer posits that it would be really nice to have a Free Software competitor to <a href=\"http://disqus.com/welcome/\">Disqus</a>.</p>

<p>Well, I'm not going to say \"<a href=\"https://github.com/Inaimathi/clomments\">delivered</a>\" yet, because this is the merest hint of an attempt at a solution, but I threw something together in the couple of hours I could spare between <a href=\"http://stackoverflow.com/questions/7247861/sbcl-error-with-cl-smtp\">postfix woes</a> and various marketing initiatives at <a href=\"http://medirexsys.com/\">the company</a>.</p>

<p>I won't try to go over any of the code, that was through <a href=\"https://github.com/Inaimathi/clomments\">the github link</a>, in case you missed <a href=\"https://github.com/Inaimathi/clomments\">it</a>, but I want to formalize a little of my thought process on where this actually needs to go to be a real competitor, just so that I can remember when I go back to work on it this weekend.</p>

<p><h3>The Idea</h3></p>

<p>Is, simply enough, to offload the comment system for a given page to a third party server. Either so that the maintainer of that page doesn't have to fart around with databases, or for that extra performance kick (since the first server no longer needs to serve up dynamic content at all), or because software as a service is in again, I really don't know. </p>

<p>Anyway, the point is, instead of keeping your own comment database locally, you just echo a static page with a line or two of <a href=\"http://api.jquery.com/jQuery.post/\">trixy javascript</a>, and your comments get pulled in on the clients' time.</p>

<p>
  So the basic feature set here is pretty sparse:
  <ul>
    <li>Track comments on a per-page basis</li>
    <li>Allow adding/liking/disliking/reporting of individual comments</li>
    <li>Allow replying to individual comments (not <i>strictly</i> necessary, but nice)</li>
  </ul>
</p>
<p>
  It wouldn't be any fun if that was all though. It would also be nice if
  <ul>
    <li>you could submit to [social site of choice] through one button click</li>
    <li>you could edit your comments</li>
    <li>spam sites could be tracked</li>
    <li>spam/low-rating comments could be omitted/hidden by default</li>
  </ul>
</p>
<p>
  Finally, to support the Free Software objective, it needs to:
  <ul>
    <li>be AGPL (so that anyone can run their own for their friends if they feel like)</li>
    <li>be written in a Free language (which is no problem at all)</li>
    <li>allow full data exports (so that you could move pages between servers if you wanted)</li>
  </ul>
</p>
<p>This is a reasonably simple problem. Not trivial, but it looks like it would take a couple of weeks of serious work to knock out something useful. To the point that I have no idea how building a company around doing it is even possible. The only thing I can imagine is that the data storage and security around it is somehow more challenging than organizing the actual functionality (which is consistent with my observations of other software).</p>
<p>Well, that's that. <a href=\"http://clomments.inaimathi.ca/test\">Kick the tires</a>, but don't blow my server up, and I'll do some more hacking on it later in the week.</p>
<span class=\"edit\">EDIT:
  <p>It's been brought to my attention that people would like to get stuff running <i>right now</i>. Ok, didn't really plan for it but here goes (assuming you're on Debian)</p>
  <ol>
    <li><code>apt-get install sbcl mysql-server cl-sql</code></li>
    <li><code>git clone https://github.com/Inaimathi/clomments.git</code></li>
    <li>create a database and user <i>and change the definition of <code>*db-spec*</code> in <code>package.lisp</code> to match</i></li>
    <li>install <a href=\"http://www.quicklisp.org/beta/\">quicklisp</a> <i>Is there still a lisper that doesn't use this? I'm getting kind of sick of mentioning it.</i></li>
    <li><code>cd clomments; sbcl --eval \"(ql:quickload :clomments)\"</code> <i>If you're on a 64 bit machine, you may get some warnings starting up. Continue through them, and it should be fine (it's to do with cffi bindings for clsql)</i></li>
    <li>Once in SBCL 
      <pre>(create-view-from-class 'comment)
	(create-view-from-class 'page)</pre></li>
    <li>Go to <code>http://localhost:4242/test</code> in a browser</li>
  </ol>
  <p>I <i>promise</i> I will streamline this as soon as I get the regulation 4 hours of sleep I'm entitled to per week.</p>
  Tue, 30 Aug, 2011</span>
<span class=\"edit\">EDIT:
  <p>Also, I'm perfectly aware why there are extra spaces this time; it's because I'm starting to use regulation xhtml markup instead of relying on Blogger's seemingly flaky spacing feature. It seems like you can only set it globally for a given blog though, so I can't just switch over one post at a time. I'll need to go through my archives and wrap everything in <code>&lt;<span style=\"color: #0000ff;\">p</span>&gt;</code> tags first.</p>
  Tue, 30 Aug, 2011</span>
"))
((5202 3723 558511000) :INSERT (52 :POSTED 3523665600))
((5202 3723 558513000) :INSERT (52 :TAG :CLIENT-SIDE))
((5202 3723 558516000) :INSERT (52 :TAG :COMMON-LISP))
((5202 3723 558518000) :INSERT (52 :TAG :IDEA-PEELING))
((5202 3723 558520000) :INSERT (52 :TAG :JAVASCRIPT))
((5202 3723 558523000) :INSERT (52 :TAG :SPECULATION))
((5202 3723 558762000) :INSERT
 (53 :TITLE "\"Mapping CLOS\", or \"Yak Shaving for Fun and No Profit\""))
((5202 3723 558773000) :INSERT
 (53 :FILE "yak-shaving-for-fun-and-no-profit.html"))
((5202 3723 558776000) :INSERT (53 :EDITED 3610301266))
((5202 3723 558778000) :INSERT
 (53 :BODY
  "<p>Just a quick update today; I have more work than I think I can handle for the foreseeable future. A combination of problems I've never solved at work, some odd contract requests and several projects I've gotten myself into in my personal time. You already know about the <a href=\"/article?name=using-clsql.html\">CLSQL/Hunchentoot crash course</a>, and the <a href=\"https://github.com/Inaimathi/clomments\">clomments</a> system. You probably don't know about the last two, one of which sort of chains off of clomments (and the other I'm conveniently ignoring this post other than that sentence).</p>

<p>The background is that I wanted conversation threads in clomments. As in, when you see a comment, you should be able to reply to it. You <a href=\"http://www.ferdychristant.com/blog/archive/DOMM-7QJPM7\"><i>can</i> store that kind of thing in a relational database</a>, but it feels a bit hackish. Especially if you want the system to scale out. I've looked at a <a href=\"http://www.mongodb.org/\">couple</a> of <a href=\"http://couchdb.apache.org/\">nosql</a> databases in the past and have been looking for an excuse to use them in practice. Well, it turns out that <a href=\"http://wiki.apache.org/couchdb/How_to_store_hierarchical_data\">storing hierarchical data is relatively simple</a> in them. I picked CouchDB for no particular reason (<a href=\"https://github.com/fons/cl-mongo\">quicklisp</a> has support for <a href=\"https://github.com/fons/cl-mongo\">cl-mongo</a>, <a href=\"http://common-lisp.net/project/clouchdb/\">clouchdb</a> <i>and</i> <a href=\"https://github.com/sykopomp/chillax\">chillax</a>), and tried out a few things. Unfortunately, clouchdb has at least one <a href=\"http://stackoverflow.com/questions/7537018/clouchdb-error-with-id\">annoying bug</a> that prevents me from using it. It wouldn't normally, I've already sent a one-liner patch to the author, but he's currently working at one of these Disney-style-IP places that own your intellectual property, dna and all derivative works of both (I'm paraphrasing), so he can't actually merge that patch any time soon.</p>

<p>Ok, so I guess I'm using <a href=\"http://wiki.apache.org/couchdb/Chillax\">chillax</a> then, which kind of saddens me because I'd prefer a project that used the same naming convention as the project I'm using it for, but that's beside the point. In either case, <a href=\"http://common-lisp.net/project/clouchdb/#examples\">interacting with Couch from CL</a> is kind of a pain in the ass. It involves tons of <a href=\"http://www.ida.liu.se/imported/cltl/clm/node153.html\">alists</a> and many traversals of the same, which isn't <i><a href=\"http://drhorrible.com/\">horrible</a></i>, but definitely not as pleasant as <a href=\"http://drhorrible.com/\">interacting through CLOS</a> the way I have been in CLSQL. Looking around, there doesn't seem to be an ORM-style thing already built for Couch or Mongo, so I figured I'd try my hand at one as part of the clomments project. I don't have anything workable yet, I've just been playing around so far, but the first leg of research has turned up a rather annoying implementation detail that segues nicely into the title of this article.</p>

<p>Do you know how to <a href=\"http://www.lispworks.com/documentation/HyperSpec/Body/f_mapc_.htm\">map</a> over a CLOS object?</p>

<p>If you've never thought about it before, feel free to go investigating. Hopefully, you have a better time than I did. If you just want to do it in SBCL, it's actually fairly simple</p>

<pre>(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">slot-names</span> (class)
  (mapcar #'sb-pcl:slot-definition-name
          (sb-pcl:class-slots class)))

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">map-slots</span> (fn instance)
  (<span style=\"color: #a020f0;\">loop</span> for slot-name in (slot-names (class-of instance))
        collect (funcall fn slot-name (slot-value instance slot-name))))</pre>

<p>The problem, as the astute among you have already noticed, is <code>sb-pcl</code>. That's actually an SBCL-only CLOS library that implements various functions found in the <a href=\"http://www.cs.cmu.edu/afs/cs/project/ai-repository/ai/lang/lisp/doc/standard/ansi/clos/0.html\">spec</a>. Other lisps don't make the same decisions, so if you want to make these functions portable, you need to do some more work. Either going what I call <a href=\"http://stackoverflow.com/questions/3086561/make-clos-objects-printable-in-lisp\">\"the insane route\"</a> (which I took some cues from) and conditionally define each function that deals with a class, or the <code>clsql-sys</code> route in which you don't specify a package for these functions, but rather <code><span style=\"color: #7a378b;\">:use</span></code> different modules conditionally as part of your package definition. That looks like </p>

<pre>(<span style=\"color: #a020f0;\">defpackage</span> #<span style=\"color: #7a378b;\">:clos-utils</span>
    (<span style=\"color: #7a378b;\">:use</span> #<span style=\"color: #7a378b;\">:common-lisp</span>)
  (<span style=\"color: #7a378b;\">:shadowing-import-from</span> 
   <span style=\"color: #b22222;\">#+openmcl-native-threads #:ccl</span>
   <span style=\"color: #b22222;\">#+cmu #:pcl</span>
   #+sbcl #<span style=\"color: #7a378b;\">:sb-pcl</span>
   <span style=\"color: #b22222;\">#+lispworks #:hcl</span>
   <span style=\"color: #b22222;\">#+allegro #:mop</span>
   <span style=\"color: #b22222;\">#+clisp #:clos</span>
   #<span style=\"color: #7a378b;\">:class-slots</span> #<span style=\"color: #7a378b;\">:slot-definition-name</span>))

(<span style=\"color: #a020f0;\">in-package</span> <span style=\"color: #7a378b;\">:clos-utils</span>)

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">slot-names</span> (class)
  (mapcar #'slot-definition-name
          (class-slots class)))

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">map-slots</span> (fn instance)
  (<span style=\"color: #a020f0;\">loop</span> for slot-name in (slot-names (class-of instance))
        collect (funcall fn slot-name (slot-value instance slot-name))))</pre>

<p>That's still not fully portable, by the way. <code>openmcl</code> apparently calls <code>class-slots</code> <code>class-instance-slots</code> if it doesn't have <code>openmcl-native-threads</code>. But it's <i>reasonably</i> close to portable. Having come down off a week or so of Python/Ruby scripting, that...was a lot more work than I expected to do for a task like this. Hopefully this saves someone else out there some time (or causes someone to contact me, pointing out a much easier way of doing it). Anyhow, that's phase one of creating CLOS-based bindings for CouchDB, which will then let me succinctly work on clomments which should eventually increase the amount of Freedom on the net by some small increment.</p>
"))
((5202 3723 558845000) :INSERT (53 :POSTED 3525825600))
((5202 3723 558847000) :INSERT (53 :TAG :CLOS))
((5202 3723 558849000) :INSERT (53 :TAG :COMMON-LISP))
((5202 3723 559064000) :INSERT (54 :TITLE "Old Machines Redux"))
((5202 3723 559070000) :INSERT (54 :FILE "old-machines-redux.html"))
((5202 3723 559072000) :INSERT (54 :EDITED 3610313008))
((5202 3723 559074000) :INSERT
 (54 :BODY
  "<p>I was actually just contemplating my <a href=\"/article?name=old-computers.html\">current backup</a> setup here, when I came across two things. First, <a href=\"http://www.reddit.com/r/linux/comments/kwpc6/has_anyone_else_built_a_system_entirely_out_of/\">a thread</a> asking about these experiences, and second, another discarded machine.</p>

<img src=\"/static/img/old-machines-redux-01.jpg\" class=\"middle\" />

<p>It even had the Windows License key sticker still attached. No severed monitor cable to laugh at this time, but still.</p>

<img src=\"/static/img/old-machines-redux-02.jpg\" class=\"middle\" />

<p>Booting this one up showed me an, actually, respectable 1.7 Ghz processor and a full gig of Ram. Cracking the case also yielded a couple of surprises. One, whoever last used this machine had it hooked up to a vacuum cleaner running in reverse for at least six months. The amount of dust was insane. To the point that I had to don a facemask/goggles and clean it out outside<a href=\"#foot-Sun-Oct-02-112818EDT-2011\" name=\"note-Sun-Oct-02-112818EDT-2011\">[1]</a>. Two, this thing actually contained an old Micro ATX motherboard<a href=\"#foot-Sun-Oct-02-113214EDT-2011\" name=\"note-Sun-Oct-02-113214EDT-2011\">[2]</a>.</p>

<img src=\"/static/img/old-machines-redux-03.jpg\" class=\"middle\" />

<p>I was surprised, because it had the standard, giant tower typical to desktops of the past few years. One trip to the local computer store provided an appropriate Micro/Mini ATX case.</p>

<img src=\"/static/img/old-machines-redux-04.jpg\" class=\"middle\" />

<p>Transplanting the board over was straightforward, except for two things. First, since this was a found machine, I didn't have that little reference card for what each of the case pins does, so I had to create my own based on what the current case hookup looked like. The USB connectors also took some guesswork since the two cases actually had different types of plugs for them<a href=\"#foot-Sun-Oct-02-122431EDT-2011\" name=\"note-Sun-Oct-02-122431EDT-2011\">[3]</a>.</p>

<img src=\"/static/img/old-machines-redux-05.jpg\" class=\"middle\" />

<p>Second, I don't happen to have a Mini-ATX-sized ethernet card lying around, so the existing one had to tolerate some minor mods.</p>

<img src=\"/static/img/old-machines-redux-06.jpg\" class=\"middle\" />

<img src=\"/static/img/old-machines-redux-07.jpg\" class=\"middle\" />

<p>At more or less this time, one of my cats decided it was a good time to put their tail in the path of my chair wheels. I had to take ten minutes or so to calm the little guy down before going further.</p>

<p>I tested whether the thing boots before arranging all that hardware in the case. There really isn't much room in these, it doesn't even look like I can get a second hard drive in unless I want to leave it hanging outside somewhere. The drive that was in the original case was fucked (which I assume is why this unit was disposed of), so I had to pop in one of my spares. It ended up getting a 40GB Western Digital. In the process of picking a new drive, I realized that two of the three stashed ones were out too. I'll strip them for magnets later, I guess.</p>

<img src=\"/static/img/old-machines-redux-08.jpg\" class=\"middle\" />

<p>This brings my lifetime hard drive failure record by brand up to</p>

<ul>
  <li>3/6 - Maxtor</li>
  <li>1/1 - Fujitsu</li>
  <li>0/4 - OCZ</li>
  <li>2/43 - Western Digital</li>
</ul>

<p>Which actually isn't too shabby overall.</p>

<p>This time, I decided to throw a copy of <a href=\"http://parabolagnulinux.org/https/\">Parabola</a> on it.</p> 

<img src=\"/static/img/old-machines-redux-09.jpg\" class=\"middle\" />

<p>The installation was entirely uneventful except for the hard-drive and cat-related problems I've mentioned already. The only challenging part was actually folding everything down into a case that small. There's just a birds nest of wires in there, but it boots and runs properly.</p>

<img src=\"/static/img/old-machines-redux-10.jpg\" class=\"middle\" />

<p>I'm not entirely sure what I'll use this one for, since we have a media PC in the living room already. I might just get a VGA to RCA converter and toss it in the bedroom with our CRT. The other option is to use it as a random dev box to play around with.</p>

<hr />
<h5>Footnotes</h5>

<p>1 - <a href=\"#note-Sun-Oct-02-112818EDT-2011\" name=\"foot-Sun-Oct-02-112818EDT-2011\">[back]</a> - No pictures of that sadly, though I can assure you that the dust is now providing nesting materials for no fewer than nine neighborhood birds.</p>

<p>2 - <a href=\"#note-Sun-Oct-02-113214EDT-2011\" name=\"foot-Sun-Oct-02-113214EDT-2011\">[back]</a> - As an aside, it seems that <a href=\"http://en.wikipedia.org/wiki/Computer_form_factor#Tabular_information\">\"Micro ATX\" is a larger form factor than \"Mini ATX\"</a>, which I thought was a little odd. I assume that the team developing the \"Mini ATX\" was done second and had to settle for the less impressive name</p>


<p>3 - <a href=\"#note-Sun-Oct-02-122431EDT-2011\" name=\"foot-Sun-Oct-02-122431EDT-2011\">[back]</a> - The old one had one chunky plug that fit over the entire USB pin-set while the new one actually had a separate wire per port and each one had a separate plug for the ground pin</p>
"))
((5202 3723 559131000) :INSERT (54 :POSTED 3526516800))
((5202 3723 559135000) :INSERT (54 :TAG :HARDWARE))
((5202 3723 559398000) :INSERT
 (55 :TITLE "Screen for StumpWM/Xmonad Users - GNU Screen as a window manager"))
((5202 3723 559405000) :INSERT (55 :FILE "screen-for-stump-users.html"))
((5202 3723 559407000) :INSERT (55 :EDITED 3610022331))
((5202 3723 559412000) :INSERT
 (55 :BODY
  "<p>The first part is exposition. If you're just interested in how to set up Screen as a StumpWM analogue, skip to the next heading.</p>

<p>I've been thinking about window management again, for my own purposes and bouncing around between combination of Xmonad, StumpWM, XFCE and GNOME (as well as trying the two tiling managers standalone). </p>

<p>Using XFCE and GNOME standalone really wasn't going to do anything for me, I already knew that. Using the lightweights on <i>theiir</i> own had a few minor annoyances that I tried to fix by running them together.</p>

<p>Out of the box, neither Xmonad nor StumpWM</p>

<ul>
  <li>support a nautilus/thunar style file display (and I sometimes need it)</li>
  <li>auto-connect to my wireless network</li>
  <li>automatically mount external media (or watch for new drives being added and mount them as necessary)</li>
</ul>

<p>It's becoming clear that I don't want a regular point-and-click interface by default anymore, except for one or two specialized tasks for which <code>nautilus --no-desktop</code> should suffice.</p>

<p>I also don't really use removable media anymore. Maybe my memory is a bit clouded, but it seems that I used <i>a lot</i> more USB keys, DVDs and CDs back when I was a Windows/OS X user. It's possible that I was just being stupid, but it seemed like the easiest way of sharing data between two different machines<a href=\"#foot-Thu-Oct-06-092559EDT-2011\" name=\"note-Thu-Oct-06-092559EDT-2011\">[1]</a>. That flat out doesn't happen anymore. We only have Linux machines in the house now (split between Debian, Parabola and Ubuntu, in order of descending quantity), so when I want to share data between them, I use <code>scp</code>, or possibly <code>rsync</code> depending on the specific situation. I don't do backups to DVD or CD anymore; I just use hard drives and the only computer that needs to play DVD media is in the livingroom<a href=\"#foot-Thu-Oct-06-092727EDT-2011\" name=\"note-Thu-Oct-06-092727EDT-2011\">[2]</a>. I also don't install things from CDs, except for Debian itself.</p>

<p>Finally, connecting to my wireless network isn't automatically handled, and I do still need to do that with my netbook, but I can <a href=\"https://github.com/Inaimathi/shell-ui/blob/master/ruby/wlan\">work around it</a><a href=\"#foot-Thu-Oct-06-112837EDT-2011\" name=\"note-Thu-Oct-06-112837EDT-2011\">[3]</a>. Granted, I could have just memorized how to do it via <code>iwconfig</code> and friends, but this way is simpler from the interface perspective.</p>

<p>Bottom line; I don't need a desktop environment anymore. I'm good with the plain window manager. So it looks like GNOME is coming off my own desktop this weekend and Stump is getting re-instated as the manager of choice. The thing is, I also have a few old machines lying around that chug noticeably under any sort of graphic interface. And it turns out that if I'm willing to ditch nautilus, and fend for myself in terms of mounting media/connecting to networks, then I can go all the way to terminal.</p>

<p>I've been using <a href=\"http://www.gnu.org/s/screen/\">GNU Screen</a> as a way of deploying Lisp applications, but looking over the <a href=\"http://www.gnu.org/software/screen/manual/html_node/Default-Key-Bindings.html\">keybindings</a> and <code>man</code> page, it looks like it can serve as a respectable alternative to a tiling window manager.</p>

<h3>Screen WM</h3>

<p>The default control combination is <code>C-a</code> instead of <code>C-t</code>, and the keys are significantly different, and you can't extend it in Lisp<a href=\"#foot-Thu-Oct-06-114732EDT-2011\" name=\"note-Thu-Oct-06-114732EDT-2011\">[4]</a>, but it looks like a fairly simple <code>.screenrc</code> file can turn it into Stump-Lite. Here's a quick breakdown, assuming the default bindings:</p>

<ul>
  <li><code>C-a ?</code> shows you the help screen. </li>
  <li><code>C-a c</code> starts a new terminal in the same session (when you re-attach later, you'll have both of these)</li>
  <li><code>C-a |</code> splits the screen vertically (note that screen doesn't automatically start a second terminal). Equivalent to <code>C-t S</code></li>
  <li><code>C-a S</code> splits screen horizontally. Equivalent to <code>C-t s</code></li>
  <li><code>C-a TAB</code> moves to the next split</li>
  <li><code>C-a X</code> removes the current split</li>
  <li><code>C-a C-a</code> pulls the other terminal. Equivalent to <code>C-t C-t</code></li>
  <li><code>C-a n</code>/<code>C-a C-n</code> cycles to the next terminal (<code>C-a p</code>/<code>C-a C-p</code> cycles backward)</li>
</ul>

<p>In other words, out of the box, you've got the same basic window management shortcuts this way. And if you feel like remembering extra keys, feel free to commit the above to memory. As for me, my <code>.screenrc</code> file is going to look something like</p>

<pre>
startup_message off

<span style=\"color: #a0522d;\">bind</span> S split -v
<span style=\"color: #a0522d;\">bind</span> s split
<span style=\"color: #a0522d;\">bind</span> R remove
<span style=\"color: #a0522d;\">bind</span> ^e screen emacs -nw</pre>

<p>On a machine where I plan to use terminal exclusively, I'll also add</p>

<pre>escape ^t
bind ^t other</pre>

<p>to mirror the StumpWM keys I'm already used to.</p>

<p>Incidentally, that last line in part one is what got me convinced that <code>screen</code> could credibly replace <a href=\"http://en.wikipedia.org/wiki/X_Window_System\">X</a> for my purposes (assuming I'm working anywhere other than my dual-screen setup). It seems like you can wire up arbitrary shell commands and bind them to keypresses (use <code>exec</code> instead of <code>screen</code> if you don't want to start a new window for them). I left it out, but you can also put regular <code>screen</code> calls in <code>.screenrc</code> like so</p>

<pre>split
resize 60
screen -t lynx lynx
screen -t emacs emacs -nw
focus
screen -t top top
focus</pre>

<p>in order to customize your startup routine. I'm sure I could get more complex than that, but it illustrates the point. That snippet starts me off with a horizontal split. The top frame is <code>emacs</code>, the bottom frame is <code>top</code> and <code>lynx</code> is running in the background.</p>

<p>The stuff that I'll be missing this way is</p>

<ul>
  <li>A <code>dmenu</code>-like command (it seems like you can't have screen prompt for user input to then use in a keybinding; I'll have to do more research. The only thing I'd do with this is setup some <code>lynx</code> webjumps in any case.)</li>
  <li>X windows (so no GIMP, <code>gitk</code> or a graphic browser on my dev machine, which is actually a good thing on balance since that'll reduce Reddit use)</li>
  <li>Resizing mode (you <i>can</i> resize windows in screen, but you do it by typing in a height/width in lines/cols to set the width to, rather than the Stump resize mode where you can incrementally tweak windows)</li>
  <li>A <code>run-or-raise</code> equivalent (the <code>C-t C-e</code> binding as above will actually start a new <code>emacs</code> every time rather than switching to it if one already exists)</li>
</ul>

Given how my <code>.stumpwmrc</code> is shaping up, I don't think this'll be a big sacrifice. The thing I think I'll miss most is actually <code>gitk</code>. I'll let you know how it goes.

<hr />
<h5>Footnotes</h5>

<p>1 - <a href=\"#note-Thu-Oct-06-092559EDT-2011\" name=\"foot-Thu-Oct-06-092559EDT-2011\">[back]</a> - Whether they were both mine and sitting in my room, or not and lying on a table in the OCAD student lounge.</p>

<p>2 - <a href=\"#note-Thu-Oct-06-092727EDT-2011\" name=\"foot-Thu-Oct-06-092727EDT-2011\">[back]</a> - And has a standard GNOME 2 setup out of deference to my wife, who hasn't taken the Computer Nerd prestige class remaining a regular nerd.</p>


<p>3 - <a href=\"#note-Thu-Oct-06-112837EDT-2011\" name=\"foot-Thu-Oct-06-112837EDT-2011\">[back]</a> -  Been meaning to do a writeup on that little UI layer I'm slowly using to coat my shell experience. <a href=\"https://github.com/Inaimathi/shell-ui/blob/master/ruby/pack\">pack</a> and <a href=\"https://github.com/Inaimathi/shell-ui/blob/master/ruby/unpack\">unpack</a> have already left me smiling several times.</p>


<p>4 - <a href=\"#note-Thu-Oct-06-114732EDT-2011\" name=\"foot-Thu-Oct-06-114732EDT-2011\">[back]</a> - :(</p>
"))
((5202 3723 559492000) :INSERT (55 :POSTED 3526862400))
((5202 3723 559495000) :INSERT (55 :TAG :IDEA-PEELING))
((5202 3723 559497000) :INSERT (55 :TAG :PROGRAMMING-ENVIRONMENT))
((5202 3723 559499000) :INSERT (55 :TAG :SHELL))
((5202 3723 559805000) :INSERT (56 :TITLE "ScreenWM Follow-up"))
((5202 3723 559811000) :INSERT (56 :FILE "screen-wm-followup.html"))
((5202 3723 559814000) :INSERT (56 :EDITED 3610022331))
((5202 3723 559816000) :INSERT
 (56 :BODY
  "<p>So I had enough theorizing last week, and am currently putting the setup through the Compaq Test [TM].</p>

<p>Preliminary observations are good; now that I've fixed the minor ui annoyances pertaining to <code>screen</code> and <code>blog-mode</code>, this is a very comfortable editing environment. I don't actually have the wireless drivers installed on this machine yet, so I'll have to plug into the router later in order to <i>post</i> this piece, but it's quite snappy considering the hardware I'm actually working with<a href=\"#foot-Mon-Oct-10-162114EDT-2011\" name=\"note-Mon-Oct-10-162114EDT-2011\">[1]</a>.</p>

<p>Hell, <code>slime</code> works pretty well too. Except that <code>paredit</code><a href=\"#foot-Mon-Oct-10-162255EDT-2011\" name=\"note-Mon-Oct-10-162255EDT-2011\">[2]</a> seems to have it in for me in various ways. It's nothing I can't work around with some judicious re-binding, but it's extensive enough that I don't want to attempt it today.</p>

<p>I started with a fresh install of Debian Squeeze<a href=\"#foot-Mon-Oct-10-162750EDT-2011\" name=\"note-Mon-Oct-10-162750EDT-2011\">[3]</a> and basically just ran the following</p>

<pre><span style=\"color: #ff0000;\">## </span>Basic dev tools
apt-get install emacs slime git-core mplayer lynx screen openssh-server gnupg
apt-get install sbcl python-setuptools ruby-full erlang

<span style=\"color: #ff0000;\">## </span>app configuration
wget http://beta.quicklisp.org/quicklisp.lisp
su inaimathi -c <span style=\"color: #00ff00;\">\"sbcl --load install.lisp\"</span>

<span style=\"color: #ff0000;\">## </span>I. Fucking. Hate. Caps. Lock.
sed -i <span style=\"color: #00ff00;\">'s/XKBOPTIONS=\"\"/XKBOPTIONS=\"ctrl:nocaps\"/g'</span> /etc/default/keyboard
/etc/init.d/console-setup reload</pre>

<p>in order to get everything running the way I like. <code>install.lisp</code> contains</p>

<pre>(load <span style=\"color: #00ff00;\">\"quicklisp.lisp\"</span>)

(quicklisp-quickstart:install)
(ql:add-to-init-file)

(ql:quickload <span style=\"color: #0000ff; font-weight: bold;\">:linedit</span>)
(linedit:install-repl)

(<span style=\"color: #00ffff; font-weight: bold;\">with-open-file</span> (s (merge-pathnames <span style=\"color: #00ff00;\">\".sbclrc\"</span>) <span style=\"color: #0000ff; font-weight: bold;\">:direction</span> <span style=\"color: #0000ff; font-weight: bold;\">:output</span> <span style=\"color: #0000ff; font-weight: bold;\">:if-exists</span> <span style=\"color: #0000ff; font-weight: bold;\">:append</span> <span style=\"color: #0000ff; font-weight: bold;\">:if-does-not-exist</span> <span style=\"color: #0000ff; font-weight: bold;\">:create</span>)
  (format s <span style=\"color: #00ff00;\">\";;; Check for --no-linedit command-line option.
</span><span style=\"color: #ff0000;\">(</span><span style=\"color: #00ff00;\">if (member \\\"--no-linedit\\\" sb-ext:*posix-argv* :test 'equal)
  (setf sb-ext:*posix-argv* 
        (remove \\\"--no-linedit\\\" sb-ext:*posix-argv* :test 'equal))
  (when (interactive-stream-p *terminal-io*)
    (require :sb-aclrepl)
    (ql:quickload \\\"linedit\\\")
    (funcall (intern \\\"INSTALL-REPL\\\" :linedit)
             :wrap-current t)))\"</span>))

(ql:quickload (list <span style=\"color: #0000ff; font-weight: bold;\">:drakma</span> <span style=\"color: #0000ff; font-weight: bold;\">:cl-who</span> <span style=\"color: #0000ff; font-weight: bold;\">:cl-ppcre</span> <span style=\"color: #0000ff; font-weight: bold;\">:cl-fad</span> <span style=\"color: #0000ff; font-weight: bold;\">:hunchentoot</span> <span style=\"color: #0000ff; font-weight: bold;\">:clsql</span> <span style=\"color: #0000ff; font-weight: bold;\">:cl-smtp</span> <span style=\"color: #0000ff; font-weight: bold;\">:cl-base64</span> <span style=\"color: #0000ff; font-weight: bold;\">:ironclad</span> <span style=\"color: #0000ff; font-weight: bold;\">:trivial-shell</span>))
(quit)</pre>

<p>Which just configures <code>quicklisp</code> and <code>linedit</code> to run whenever I start <code>sbcl</code>. After that , it was just a matter of importing my Emacs settings<a href=\"#foot-Mon-Oct-10-163306EDT-2011\" name=\"note-Mon-Oct-10-163306EDT-2011\">[4]</a>, and <code>.screenrc</code> file. I didn't end up keeping the fancy settings I was thinking about last week, by the way. It currently contains, in its entirety</p>

<pre>screen -t emacs emacs -nw

startup_message off

<span style=\"color: #0000ff; font-weight: bold;\">bind</span> S split -v
<span style=\"color: #0000ff; font-weight: bold;\">bind</span> s split
<span style=\"color: #0000ff; font-weight: bold;\">bind</span> R remove
<span style=\"color: #0000ff; font-weight: bold;\">bind</span> ^e screen emacs -nw
<span style=\"color: #0000ff; font-weight: bold;\">bind</span> ^w screen webjump

markkeys <span style=\"color: #00ff00;\">\"h=^b:l=^f:$=^e\"</span></pre>

<p>which is as basic as it could possibly be, except for the line that calls a program named <code>webjump</code>. That's actually a convenience script of my own devising that simulates my <code>conkeror</code> webjumps from the desktop machine. It reads</p>

<pre><span style=\"color: #ff0000;\">#</span>!/usr/bin/ruby

require <span style=\"color: #00ff00;\">'uri'</span>

print <span style=\"color: #00ff00;\">\"Webjump: \"</span>
input = gets.chomp.split(<span style=\"color: #00ff00;\">\" \"</span>, 2)

<span style=\"color: #00ffff; font-weight: bold;\">def</span> <span style=\"color: #0000ff; font-weight: bold;\">get_url</span>(input)
  jump = input[0]
  query = <span style=\"color: #00ff00;\">URI</span>.escape(input[1])
  jumps = {
    <span style=\"color: #00ff00;\">\"youtube\"</span> =&gt; <span style=\"color: #00ff00;\">\"http://www.youtube.com/results?search_query=</span><span style=\"color: #ffff00;\">#{query}</span><span style=\"color: #00ff00;\">\\&amp;aq=f\"</span>,
    <span style=\"color: #00ff00;\">\"stockxchange\"</span> =&gt; <span style=\"color: #00ff00;\">\"http://www.sxc.hu/browse.phtml?f=search\\&amp;txt=</span><span style=\"color: #ffff00;\">#{query}</span><span style=\"color: #00ff00;\">\\&amp;w=1\\&amp;x=0\\&amp;y=0\"</span>,
    <span style=\"color: #00ff00;\">\"google\"</span> =&gt; <span style=\"color: #00ff00;\">\"http://www.google.com/search?q=</span><span style=\"color: #ffff00;\">#{query}</span><span style=\"color: #00ff00;\">\\&amp;ie=utf-8\\&amp;oe=utf-8\\&amp;aq=t\"</span>,
    <span style=\"color: #00ff00;\">\"wikipedia\"</span> =&gt; <span style=\"color: #00ff00;\">\"http://en.wikipedia.org/wiki/Special:Search?search=</span><span style=\"color: #ffff00;\">#{query}</span><span style=\"color: #00ff00;\">\\&amp;sourceid=Mozilla-search\"</span>,
    <span style=\"color: #00ff00;\">\"gmail\"</span> =&gt; <span style=\"color: #00ff00;\">\"http://mail.google.com\"</span>  
  }
  jumps[jumps.keys.find{|k| k =~ <span style=\"color: #00ff00;\">/</span><span style=\"color: #ffff00;\">#{jump}</span><span style=\"color: #00ff00;\">/</span>}]
<span style=\"color: #00ffff; font-weight: bold;\">end</span>

url = get_url(input)
<span style=\"color: #00ffff; font-weight: bold;\">if</span> url
  system(<span style=\"color: #00ff00;\">\"lynx\"</span>, url)
<span style=\"color: #00ffff; font-weight: bold;\">else</span>
  puts <span style=\"color: #00ff00;\">\"Can't find webjump '</span><span style=\"color: #ffff00;\">#{input[0]}</span><span style=\"color: #00ff00;\">'\"</span>
<span style=\"color: #00ffff; font-weight: bold;\">end</span></pre>

<p>which is quite useful when I need to search for something quickly. I'm thinking about changing it such that it just takes a command-line option for which webjump to use so that I could actually keybind <code>google-search</code> as opposed to <code>webjump</code> (I've observed that \"go something something\" is used far more commonly than any of the others).</p>

<p>Like I said, that's it. It's an extremely minimal system, and it doesn't have any kind of multi-monitor support, but it gives me the important little comforts I've been used to (like tabbing between applications and convenient, keyboard-based browsing) without the need to start up an instance of X<a href=\"#foot-Mon-Oct-10-164445EDT-2011\" name=\"note-Mon-Oct-10-164445EDT-2011\">[5]</a>. That greatly increases the universe of useable machines for me.</p>

<p>The only things I'm still missing:

  <ul>
    <li>a klavaro-analogue <i>I still have no way of practicing typing from the command line (which is kind of ironic)</i></li>
    <li>more shell-friendly bindings for <code>paredit</code></li>
    <li>multi-monitor support <i>which I have no idea where to even start on</i></li>
  </ul>
</p>

<hr />
<h5>Footnotes</h5>

<p>1 - <a href=\"#note-Mon-Oct-10-162114EDT-2011\" name=\"foot-Mon-Oct-10-162114EDT-2011\">[back]</a> - An old Presario R3000 with a 1.4ghz processor and 256MB ram.</p>


<p>2 - <a href=\"#note-Mon-Oct-10-162255EDT-2011\" name=\"foot-Mon-Oct-10-162255EDT-2011\">[back]</a> - Which I've installed, and actually gotten to like under X, at the recommendation of a friend from the Toronto Lisp User Group. It's actually fantastic, but there are various key that just barf when you try using it from terminal. The default bindings for <code>slurp</code>, <code>barf</code>, <code>forward</code> and <code>back</code> s-exp operations are outright ignored, and it does something funky to my home and end keys so that they insert odd square-bracket escape sequence instead of doing what they say on the key. It's <code>paredit</code> because, all of the above works just fine in other modes.</p>


<p>3 - <a href=\"#note-Mon-Oct-10-162750EDT-2011\" name=\"foot-Mon-Oct-10-162750EDT-2011\">[back]</a> - Since the Compaq still had a copy of Parabola running from last time.</p>


<p>4 - <a href=\"#note-Mon-Oct-10-163306EDT-2011\" name=\"foot-Mon-Oct-10-163306EDT-2011\">[back]</a> - Including the steadily-growing <code>blog-mode</code>, which I've added several functions to since I started writing this piece.</p>


<p>5 - <a href=\"#note-Mon-Oct-10-164445EDT-2011\" name=\"foot-Mon-Oct-10-164445EDT-2011\">[back]</a> - Also, conveniently, lynx doesn't let me waste any time on Reddit, since I can't actually post or upvote from it.</p>
"))
((5202 3723 559905000) :INSERT (56 :POSTED 3527208000))
((5202 3723 559907000) :INSERT (56 :TAG :COMMON-LISP))
((5202 3723 559909000) :INSERT (56 :TAG :PROGRAMMING-ENVIRONMENT))
((5202 3723 559912000) :INSERT (56 :TAG :SHELL))
((5202 3723 560162000) :INSERT (57 :TITLE "Ruby vs. Python Briefly"))
((5202 3723 560167000) :INSERT (57 :FILE "ruby-vs-python-scripting.html"))
((5202 3723 560170000) :INSERT (57 :EDITED 3610022331))
((5202 3723 560172000) :INSERT
 (57 :BODY
  "<p>Ok, so I figure it's about time to live up to the title of this blog, since I've spent the vast majority of the language discussion firmly planted in parentheses. Aside from the fact that my company is starting a project in  Erlang, I've also been scripting Python and Ruby pretty heavily.</p>

<p>They're actually not very different languages. Neither is perfect from my perspective<a href=\"#foot-Mon-Oct-10-164837EDT-2011\" name=\"note-Mon-Oct-10-164837EDT-2011\">[1]</a>, and neither sucks. If I had to, I could get work done in both (and having gone through the Ruby chapter in <a href=\"http://pragprog.com/book/btlang/seven-languages-in-seven-weeks\">7 Languages in 7 Weeks</a>, I'm more inclined to look at Ruby for my next big project than I used to be). To start with, here's a boiled down, no-nonsense table that represents my perspective.</p>

<table class=\"comparison-table\"> 
  <tr><td colspan=2 style=\"text-align: center;\"><h3>...is more annoying than...</h3></td></tr>
  <tr>
    <td>
      <pre><span style=\"color: #0000ff; font-weight: bold;\">len</span>([1, 2, 3])</pre>
    </td> 
    <td>
      <pre>[1, 2, 3].length</pre>
    </td>
  </tr>
  <tr>
    <td>
      <pre><span style=\"color: #00ff00;\">\"foo \"</span> + bar + <span style=\"color: #00ff00;\">\" baz\"</span></pre>
      <div style=\"text-align: center;\">or</div>
      <pre><span style=\"color: #00ff00;\">\"foo %s bar\"</span> % bar</pre>
    </td>
    <td>
      <pre><span style=\"color: #00ff00;\">\"foo </span><span style=\"color: #ffff00;\">#{bar}</span><span style=\"color: #00ff00;\"> baz\"</span></pre>
    </td>
  </tr>
  <tr>
    <td><pre><span style=\"color: #00ff00;\">\", \"</span>.join([<span style=\"color: #00ff00;\">\"one\"</span>, <span style=\"color: #00ff00;\">\"two\"</span>, <span style=\"color: #00ff00;\">\"three\"</span>])</pre></td>
    <td><pre>[<span style=\"color: #00ff00;\">\"one\"</span>, <span style=\"color: #00ff00;\">\"two\"</span>, <span style=\"color: #00ff00;\">\"three\"</span>].join <span style=\"color: #00ff00;\">\", \"</span></pre></td>
  </tr>
  <tr>
    <td>
      <pre><span style=\"color: #0000ff; font-weight: bold;\">map</span>(<span style=\"color: #00ffff; font-weight: bold;\">lambda</span> a: a + 1, [4, 3, 2, 1])
## still makes more sense 
## than join or len, though</pre>
    </td>
    <td><pre>[4, 3, 2, 1].map {|a| a + 1}</pre></td>
  </tr>
  <tr>
    <td>
      <pre><span style=\"color: #ffff00;\">a</span> = [4, 3, 2, 1].sort()
a[0]</pre>
    </td>
    <td>
      <pre>[4, 3, 2, 1].sort[0]</pre>
    </td>
  </tr>
  <tr>
    <td><a href=\"http://stackoverflow.com/questions/191010/how-to-get-a-complete-list-of-objects-methods-and-attributes\">nothing.jpg</a></td>
    <td><code>foo.methods.sort</code></td>
  </tr>
  <tr>
    <td>
      <pre>require <span style=\"color: #00ff00;\">'optparse'</span>
require <span style=\"color: #00ff00;\">'pp'</span>
require <span style=\"color: #00ff00;\">'fileutils'</span></pre>
    </td>
    <td>
      <pre><span style=\"color: #00ffff; font-weight: bold;\">import</span> optparse, fileutils
## I also prefer the more granular 
## symbol access I get with python</pre>
    </td>
  </tr>
  <tr>
    <td>
      <pre>sudo apt-get install ruby-full
irb</pre>
    </td>
    <td>
      <pre>python</pre>
    </td>
  </tr>
  <tr><td colspan=2 style=\"text-align: center;\"><h3>...is about as annoying as...</h3></td></tr>
  <tr>
    <td>
<pre><span style=\"color: #a020f0;\">def</span> <span style=\"color: #0000ff;\">aFunction</span>(foo, bar):
    <span style=\"color: #b22222;\">#do stuff
</span>    <span style=\"color: #a020f0;\">return</span> baz</pre>
    </td>
    <td>
<pre><span style=\"color: #a020f0;\">def</span> <span style=\"color: #0000ff;\">a_function</span>(foo, bar)
  <span style=\"color: #b22222;\">#</span><span style=\"color: #b22222;\">do stuff
</span>  baz
<span style=\"color: #a020f0;\">end</span></pre>
    </td>
  </tr>
  <tr>
    <td>
<pre><span style=\"color: #a020f0;\">with</span> tempfile.NamedTempFile() <span style=\"color: #a020f0;\">as</span> tmp:
    tmp.write(<span style=\"color: #8b2252;\">\"Test test\\n\"</span>)
    <span style=\"color: #b22222;\">##more stuff</span>    
    tmp.flush()
    popen([<span style=\"color: #8b2252;\">\"lp\"</span>, <span style=\"color: #8b2252;\">\"-d\"</span>, <span style=\"color: #8b2252;\">\"a-printer\"</span>, tmp.name()])</pre>
    </td>
    <td>
      <pre><span style=\"color: #00ff00;\">Tempfile</span>.open() <span style=\"color: #00ffff; font-weight: bold;\">do</span> |tmp|
   tmp.write(<span style=\"color: #00ff00;\">\"Test test \\n\"</span>)
   <span style=\"color: #ff0000;\">## more stuff</span>
   tmp.flush
   system(<span style=\"color: #00ff00;\">\"lp\"</span>, <span style=\"color: #00ff00;\">\"-d\"</span>, <span style=\"color: #00ff00;\">\"a-printer\"</span>, tmp.name)
<span style=\"color: #00ffff; font-weight: bold;\">end</span></pre>
    </td>
  </tr>
</table>

<p>So I am slightly biased, but like I said earlier, not enough to actually decry either language. <span style=\"text-decoration: line-through;\">The biggest point in Ruby's favor is its handling of blocks (as seen in that tempfile pseudo-code). I like having an expression that says \"Create an entity, do this stuff and then clean up\", without having to clean up myself. Python doesn't like that.</span><a href=\"#foot-Mon-Oct-17-075930EDT-2011\" name=\"note-Mon-Oct-17-075930EDT-2011\">[2]</a> Gotta admit, I boggled at the <code>join</code> syntax the first time around. Rhetorically, who the hell decided it makes sense that a <code>join</code> operation is something you do to the delimiter, rather than the list? In my opinion, it would even make more sense to make it a standalone function a-la <code>len</code>.</p>

<p>I really <i>like</i> the syntactic whitespace in Python.

<pre><span style=\"color: #00ffff; font-weight: bold;\">def</span> <span style=\"color: #0000ff; font-weight: bold;\">something</span>():
    foo()
    bar()</pre>

seems like it's cleaner than the Ruby equivalent. Except that when I want to return the result of <code>bar</code> (which I do quite often, given that I much prefer functional programming to OO), I need to do so explicitly. Ruby has me waste an additional line on <code>end</code>, but returns implicitly. While I'm at it, Python libraries seem to be heavily anti-functional programming. They do the standard \"OO\" thing of exposing functionality via classes, but they also typically have a heavy reliance on side effects, which makes it harder than it ought to be to compose things. A recent example I had to go through involved using <code>pyPDF</code> and <code>reportlab</code> to process existing PDFs. You <i>can</i> do it, but the amount of fiddling involved is nontrivial if you want to decompose the problem properly because you need to do so by setting up multiple instances of <code>PdfFileReader</code>/<code>canvas</code> and making destructive changes to them.</p>

<p>Also not represented in the table is how much easier it is to install <code>python</code> packages in Debian. While <code>gem install</code> sometimes errors, I've yet to find a package I need that I can't either <code>apt-get</code> or retrieve using <code>python-setuptools</code> with no trouble at all. That's worth something (in fact, it's worth enough that I've been procrastinating on a ruby port of <code>get-youtube-series</code>, which used only included components in Python, but requires several installs in Ruby).</p>

<p>The last thing that table doesn't encompass is the version situation. That's a fairly major one from my perspective, but I'm not sure how serious it actually is. Python 3 has been out for quite a while, but it's not uncommon to see \"Supports Python 2.7\" on various frameworks/utilities. Squeeze still provides 2.6.6, Django still requires 2.[4-7] and Google app-engine is still asking for 2.5 (with 2.7 being supported as an \"experimental\" feature). That's less than encouraging. By contrast, Ruby 1.9 is fairly widely supported (though the Debian repos are still at 1.8.7). That just doesn't seem to bode well for the next version, regardless of how enthusiastic Rossum is about it.</p>

<hr />
<h5>Footnotes</h5>

<p>1 - <a href=\"#note-Mon-Oct-10-164837EDT-2011\" name=\"foot-Mon-Oct-10-164837EDT-2011\">[back]</a> - Though, to be clear, my opinion is that Ruby gets a damn sight closer than Python.</p>

<p>2 - <a href=\"#note-Mon-Oct-17-075930EDT-2011\" name=\"foot-Mon-Oct-17-075930EDT-2011\">[back]</a> - Thank you Brendan Miller for pointing me to the <code>with</code> statement (documented <a href=\"http://www.python.org/dev/peps/pep-0343/\">here</a>, <a href=\"http://effbot.org/zone/python-with-statement.htm\">here</a> and <a href=\"http://docs.python.org/release/2.5.2/ref/with.html\">here</a>) which does emulate blocks well enough for my purposes.</p>
"))
((5202 3723 560250000) :INSERT (57 :POSTED 3527726400))
((5202 3723 560252000) :INSERT (57 :TAG :PYTHON))
((5202 3723 560255000) :INSERT (57 :TAG :RUBY))
((5202 3723 560257000) :INSERT (57 :TAG :SYNTAX))
((5202 3723 560679000) :INSERT (58 :TITLE "Objective Lisp"))
((5202 3723 560690000) :INSERT (58 :FILE "objective-lisp.html"))
((5202 3723 560694000) :INSERT (58 :EDITED 3610022331))
((5202 3723 560698000) :INSERT
 (58 :BODY "<p>Stand back! I have dramatic pause an idea!</p>

<pre>(<span style=\"color: #a020f0;\">defpackage</span> <span style=\"color: #228b22;\">:objective-lisp</span>
    (<span style=\"color: #7a378b;\">:nicknames</span> <span style=\"color: #7a378b;\">:ol</span>)
    (<span style=\"color: #7a378b;\">:use</span> <span style=\"color: #7a378b;\">:cl</span>)
  (<span style=\"color: #7a378b;\">:shadow</span> #<span style=\"color: #7a378b;\">:+</span> #<span style=\"color: #7a378b;\">:-</span> #<span style=\"color: #7a378b;\">:*</span> #<span style=\"color: #7a378b;\">:/</span> 
           #<span style=\"color: #7a378b;\">:member</span> #<span style=\"color: #7a378b;\">:null</span>
           #<span style=\"color: #7a378b;\">:=</span> #<span style=\"color: #7a378b;\">:string=</span> #<span style=\"color: #7a378b;\">:eq</span> #<span style=\"color: #7a378b;\">:eql</span> #<span style=\"color: #7a378b;\">:equal</span> #<span style=\"color: #7a378b;\">:equalp</span>
           #<span style=\"color: #7a378b;\">:length</span> #<span style=\"color: #7a378b;\">:map</span> #<span style=\"color: #7a378b;\">:mapcar</span> #<span style=\"color: #7a378b;\">:concatenate</span>)
  (<span style=\"color: #7a378b;\">:export</span> #<span style=\"color: #7a378b;\">:+</span> #<span style=\"color: #7a378b;\">:-</span> #<span style=\"color: #7a378b;\">:*</span> #<span style=\"color: #7a378b;\">:/</span> 
           #<span style=\"color: #7a378b;\">:member</span> #<span style=\"color: #7a378b;\">:null</span>
           #<span style=\"color: #7a378b;\">:=</span> #<span style=\"color: #7a378b;\">:string=</span> #<span style=\"color: #7a378b;\">:eq</span> #<span style=\"color: #7a378b;\">:eql</span> #<span style=\"color: #7a378b;\">:equal</span> #<span style=\"color: #7a378b;\">:equalp</span>
           #<span style=\"color: #7a378b;\">:length</span> #<span style=\"color: #7a378b;\">:map</span> #<span style=\"color: #7a378b;\">:mapcar</span> #<span style=\"color: #7a378b;\">:concatenate</span>))
(<span style=\"color: #a020f0;\">in-package</span> <span style=\"color: #7a378b;\">:objective-lisp</span>)

<span style=\"color: #b22222;\">;;; </span><span style=\"color: #b22222;\">not, strictly speaking, relevant to what I want to discuss,
</span><span style=\"color: #b22222;\">;;; </span><span style=\"color: #b22222;\">but I figure I've already gone off the deep end just by
</span><span style=\"color: #b22222;\">;;; </span><span style=\"color: #b22222;\">writing this, so I may as well make it worth my while
</span>
(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">nullp</span> (object) (cl:null object))

<span style=\"color: #b22222;\">;;; </span><span style=\"color: #b22222;\">or is it...
</span>(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">memberp</span> (item list <span style=\"color: #228b22;\">&amp;key</span> key)
  (cl:member item list <span style=\"color: #7a378b;\">:key</span> key <span style=\"color: #7a378b;\">:test</span> #'=))

<span style=\"color: #b22222;\">;; </span><span style=\"color: #b22222;\">imagine other functions here
</span>
<span style=\"color: #b22222;\">;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;</span><span style=\"color: #b22222;\">
</span>
(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">+</span> ((num number) <span style=\"color: #228b22;\">&amp;rest</span> nums)
  (<span style=\"color: #ff0000; font-weight: bold;\">assert</span> (every #'cl:numberp nums))
  (apply cl:+ (cons num nums)))

(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">-</span> ((num number) <span style=\"color: #228b22;\">&amp;rest</span> nums)
  (<span style=\"color: #ff0000; font-weight: bold;\">assert</span> (every #'cl:numberp nums))
  (apply cl:- (cons num nums)))

(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">*</span> ((num number) <span style=\"color: #228b22;\">&amp;rest</span> nums)
  (<span style=\"color: #ff0000; font-weight: bold;\">assert</span> (every #'cl:numberp nums))
  (apply cl:* (cons num nums)))

(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">/</span> ((num number) <span style=\"color: #228b22;\">&amp;rest</span> nums)
  (<span style=\"color: #ff0000; font-weight: bold;\">assert</span> (every #'cl:numberp nums))
  (apply cl:/ (cons num nums)))

(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">length</span> (seq) (cl:length seq))

(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">map</span> ((fn function) (l list) <span style=\"color: #228b22;\">&amp;rest</span> lists)
  (<span style=\"color: #ff0000; font-weight: bold;\">assert</span> (every #'listp lists))
  (apply #'cl:mapcar fn (cons l lists)))

<span style=\"color: #b22222;\">;; </span><span style=\"color: #b22222;\">and defined for other types here
</span>
(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">concatenate</span> ((str string) <span style=\"color: #228b22;\">&amp;rest</span> strings)
  (<span style=\"color: #ff0000; font-weight: bold;\">assert</span> (every #'stringp strings))
  (apply #'cl:concatenate 'string (cons str strings)))

<span style=\"color: #b22222;\">;; </span><span style=\"color: #b22222;\">and again
</span>
(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">=</span> (a b) false)
(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">=</span> ((a number) (b number)) (cl:= a b))
(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">=</span> ((a string) (b string)) (cl:string= a b))
(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">=</span> ((a character) (b character)) (cl:char= a b))
(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">=</span> ((a symbol) (b symbol)) (cl:eq a b))
(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">=</span> ((a cons) (b cons)) (cl:equalp a b))
(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">=</span> ((a array) (b array)) (cl:equalp a b))
(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">=</span> ((a structure-object) (b structure-object)) (cl:equalp a b))

<span style=\"color: #b22222;\">;;; </span><span style=\"color: #b22222;\">really, I should do the same for all the various
</span><span style=\"color: #b22222;\">;;; </span><span style=\"color: #b22222;\">comparison functions (&gt;, &gt;=, &lt;=, &lt;), but this is
</span><span style=\"color: #b22222;\">;;; </span><span style=\"color: #b22222;\">already longer than I'd like</span></pre>

<p>Now, why would we want to do this terrible thing? Well, we probably wouldn't. I wouldn't ever straight-facedly recommend someone does this in any sort of production environment, but it does sand down some rather annoying corners<a href=\"#foot-Fri-Nov-04-235357EDT-2011\" name=\"note-Fri-Nov-04-235357EDT-2011\">[1]</a>.</p>

<p>What looking at CLOS this way gets you is the easing of a few syntactic binds at the cost of some performance.</p>

<p>
<ul>
  <li>For starters, we now have a generic <code>=</code> that can be called in pretty-much any situation<a href=\"#foot-Sat-Nov-05-000146EDT-2011\" name=\"note-Sat-Nov-05-000146EDT-2011\">[2]</a>. That lets us define <code>memberp</code> and other functions without having to pass in a test function (<code>=</code> handles dispatch itself). It also lets us define <code>map</code>/<code>concatenate</code> and similar functions without specifying what the output type is expected to be<a href=\"#foot-Sat-Nov-05-000434EDT-2011\" name=\"note-Sat-Nov-05-000434EDT-2011\">[3]</a>. </li>
  <li>As I note, it saves us from having a separate <code>=</code>, <code>char=</code> and <code>string=</code> and similar comparison operations. </li>
  <li>Finally, if we define new types (such as matrix), we are not prevented from giving them a <code>+</code> or <code>*</code> method (and we can specifically define how to go about <code>map</code>ping, <code>concatenate</code>ing or <code>length</code>ing them, if it makes sense, as well as defining the correct new equality test without having to name it <code>matrix=</code>).</li>
</ul>
</p>

<p>You could also do things like override <code>+</code> so that it performs concatenation for strings<a href=\"#foot-Sat-Nov-05-001019EDT-2011\" name=\"note-Sat-Nov-05-001019EDT-2011\">[4]</a>, though I'd shrink from going further and applying it to sequences in general, just because it's somewhat ambiguous.</p> 

<p>Because all these calls are handled by the type system, you'd also get compile-time warnings about operations that aren't defined.</p>

<p>Incidentally, I know I'm not even remotely the first person to think of doing something like this on a lark. As usual, I just wanted to get an idea far enough out of my head to take a good look at it.</p> 

<p>This has been a completely random thought about Lisp. Thank you for your time.</p>

<hr />
<h5>Footnotes</h5>

<p>1 - <a href=\"#note-Fri-Nov-04-235357EDT-2011\" name=\"foot-Fri-Nov-04-235357EDT-2011\">[back]</a> - In case you care, I stubbed my metaphorical toe on them a little while ago by trying to implement <a href=\"http://en.wikipedia.org/wiki/Matrix_(mathematics)#Basic_operations\">matrix operations</a> in CL as a learning exercise only to find that I couldn't actually give them a <code>+</code> operation. It would have to be something like <code>add</code> or <code>matrix-add</code>. No world-ending obstruction, but slightly less than satisfying. At the time I implemented it as <code>matrix-add</code>.</p>


<p>2 - <a href=\"#note-Sat-Nov-05-000146EDT-2011\" name=\"foot-Sat-Nov-05-000146EDT-2011\">[back]</a> - leaving aside the identity vs. pointer question that may actually need to be addressed differently in some cases</p>


<p>3 - <a href=\"#note-Sat-Nov-05-000434EDT-2011\" name=\"foot-Sat-Nov-05-000434EDT-2011\">[back]</a> - Although, to be fair, we do lose the ability to do something like <code>(concatenate 'string <span style=\"color: #8b2252;\">\"Hello \"</span> (list #\\t #\\h #\\e #\\r #\\e #\\!))</code></p>


<p>4 - <a href=\"#note-Sat-Nov-05-001019EDT-2011\" name=\"foot-Sat-Nov-05-001019EDT-2011\">[back]</a> - Since that seems to be well accepted in most languages by this point.</p>
"))
((5202 3723 560814000) :INSERT (58 :POSTED 3529368000))
((5202 3723 560819000) :INSERT (58 :TAG :COMMON-LISP))
((5202 3723 560826000) :INSERT (58 :TAG :IDEA-PEELING))
((5202 3723 561145000) :INSERT (59 :TITLE "PostScript and Temporary Goodbye"))
((5202 3723 561154000) :INSERT (59 :FILE "postscript.html"))
((5202 3723 561158000) :INSERT (59 :EDITED 3610022331))
((5202 3723 561162000) :INSERT
 (59 :BODY
  "<p>So I honestly thought I'd be talking about Erlang and various processing tactics relating to it. I was also potentially planning to do and talk about some more work on <a href=\"https://github.com/Inaimathi/clomments\">clomments</a>, the main off-hours project I've been trying to keep at. As an absolute <i>last</i> resort, I was going to dive into some more <a href=\"https://github.com/Inaimathi/emacs-utils\">Elisp</a>, or maybe finally talk about the <a href=\"https://github.com/Inaimathi/shell-ui\">shell-ui</a> project. It didn't occur to me that the week would see me dusting off an old implementation of <a href=\"http://planet.plt-scheme.org/package-source/Inaimathi/postscript.plt/1/0/main.ss\">postscript</a> for some new code.</p>

<p>I haven't actually <i>writtne</i> new code for it, but I have gone over what was there and flipped through the <a href=\"http://www.cappella.demon.co.uk/bookpdfs/pracpost.pdf\">few</a> <a href=\"http://www.mostlymaths.net/2008/12/quick-postscript-programming-tutorial.html\">resources</a> I <a href=\"http://www.cappella.demon.co.uk/psfiles/tinyaski.ps\">could</a> find. Postscript, the language, is actually more versatile than I gave it credit for the last time around. To the point that I might actually want to revisit postscript.plt.</p>

<p>Going through the first of the resources I mention above, it actually occurred to me that I could likely accomplish some of my goals by typing .ps directly. I'm going to try that first, but still keep the embedding option in my back pocket, most likely porting it over to CL. First impressions are that the stack is going to annoy the ever-loving fuck out of me. I remember trying out <a href=\"http://en.wikipedia.org/wiki/Forth_(programming_language)\">Forth</a> a while ago and not really minding that aspect of it<a href=\"#foot-Thu-Nov-10-220802EST-2011\" name=\"note-Thu-Nov-10-220802EST-2011\">[1]</a>, but I honestly can't see how to write a procedure that takes more than two or three parameters without doing some serious head-scratching. If you want the argument order to be at all sensible, it seems like you need to chain <a href=\"http://www.tailrecursive.org/postscript/operators.html#exch\">exch</a>, <a href=\"http://www.tailrecursive.org/postscript/operators.html#dup\">dup</a> and <a href=\"http://www.tailrecursive.org/postscript/operators.html#pop\">pop</a> like a fiend, with an <a href=\"http://www.tailrecursive.org/postscript/operators.html#index\">index</a> or two thrown in for good measure. That means functional programming in this language is at least slightly hobbled from the get-go, but it does force you to make the smallest possible procedure to avoid being shot in the foot inadvertently.</p>

<p>The other reason that implementing PostScript in another language would probably be a good idea is, ironically, performance. Not writing performance, obviously, but processing performance at the printer end. If you take a look at that <a href=\"http://www.cappella.demon.co.uk/psfiles/tinyaski.ps\">third resource I link to</a> and open it in your editor of choice, you'll notice that the author deliberately chooses one and two letter identifiers for their procedures.</p>

<p>Ordinarily, I'd agree that that's awful, but keep in mind that every extra character in an identifier is one more that <a href=\"http://en.wikipedia.org/wiki/Printer_(computing)\">the printer</a> will have to parse before outputting. Shortcutting <code>grestore</code> to <code>gr</code> or <code>lineto</code> to <code>li</code> doesn't seem like much, but compounded by the number of invocations per page, pages per document copy and then by copies per hour, I could see that getting scary pretty fast where frequent output is concerned. Now, that's really not much of a reason for me to actually apply this directly; I'd much rather write with human-readable identifier and have an intermediate machine compress the file down to a more compact format before sitting it in front of the printer. That's basically what I see using the lisp-based generator for; if I plan it out properly, the result will be a much easier language to work in that actually has more efficient output than a hand tuned chunklet of PS.</p>

<p>I was going to promise to post more related content soon, but frankly, as you can see from the <a href=\"http://www.uesp.net/wiki/Lore:Dragon_Alphabet\">new addition to the language bar</a>, you aren't likely to see me for a month or so.</p>

<hr />
<h5>Footnotes</h5>

<p>1 - <a href=\"#note-Thu-Nov-10-220802EST-2011\" name=\"foot-Thu-Nov-10-220802EST-2011\">[back]</a> - Maybe it had some syntactic help; I no longer remember, never having done any serious development in it.</p>
"))
((5202 3723 561215000) :INSERT (59 :POSTED 3529890000))
((5202 3723 561219000) :INSERT (59 :TAG :POSTSCRIPT))
((5202 3723 561525000) :INSERT (60 :TITLE "False Alarm. Also, Teensy"))
((5202 3723 561535000) :INSERT (60 :FILE "teensy.html"))
((5202 3723 561539000) :INSERT (60 :EDITED 3610022331))
((5202 3723 561542000) :INSERT
 (60 :BODY
  "<p>It turns out that I jumped the gun putting up that dragon emblem<a href=\"#foot-Fri-Nov-11-214005EST-2011\" name=\"note-Fri-Nov-11-214005EST-2011\">[1]</a>, so you won't be rid of me as soon as I was expecting. I did end up putting some hours into the PostScript generator port over to Common Lisp (and it looks about as good so far, though I still need to get my head firmly around dictionaries), but I also had to get <i>something</i> to play around with this weekend, in the absence of any Nords.</p>

<p>Actually, now that I think about it, I'm not sure I ever mentioned my dalliance with embedded programming. In an effort to add a capitol C logo to the header there, and to have some fun with low-level electronics, I bought up an <a href=\"http://www.arduino.cc/en/Main/arduinoBoardUno\">Arduino Uno</a> a while ago<a href=\"#foot-Fri-Nov-11-221146EST-2011\" name=\"note-Fri-Nov-11-221146EST-2011\">[2]</a>. This is probably going to incinerate what little programmer cred I have, but I couldn't for the life of me get <a href=\"http://www.arduino.cc/en/Main/arduinoBoardUno\">the damn IDE</a> to actually upload a program to the chip. This was a while too; the board has been sitting there disused, still retaining the <a href=\"http://www.arduino.cc/en/Tutorial/Blink\">default blink</a> program it was shipped with. I've looked at various potential fixes including getting a more recent version from the repos, downloading the <a href=\"http://www.arduino.cc/en/Main/software\">official tarballs</a> from the Arduino site, and toying with some <a href=\"http://johanneshoff.com/arduino-command-line.html\">command line</a> utilities to program the thing without that fucking annoying little collection of big shiny icons. I officially give up. That removable Atmega328 may get re-purposed at some point, but I'm not sinking another hour into figuring out exactly why the programming tools don't seem to recognize the board.</p>

<p>There's a point to all this, I swear.</p>

<p>I mentioned that I wanted something else to keep me busy through the weekend<a href=\"#foot-Fri-Nov-11-221157EST-2011\" name=\"note-Fri-Nov-11-221157EST-2011\">[3]</a>, so I ended up hitting up my local electronics store for a <a href=\"http://www.pjrc.com/teensy/\">Teensy 2.0</a>. The funny part, to me at least, is that the little packing slip that came with this chip states</p>

<blockquote>Programming Teensy with C provides access to all features. Experience with the C language and reading technical specifications is helpful. For a beginner oriented environment, [the] Arduino may be a better choice.</blockquote>

<p>The reason <i>that's</i> slightly amusing is that, as I mentioned, the Arduino constantly drove me to frustration. By contrast, I got the Teensy up and running in under ten minutes by following the <a href=\"http://www.pjrc.com/teensy/first_use.html\">Getting Started tutorial</a>. It boils down to</p>

<ul>
  <li>Install the required libraries (<code>apt-get install gcc-avr binutils-avr avr-libc libusb-dev</code>)</li>
  <li>Download the loader program (either the <a href=\"http://www.pjrc.com/teensy/loader_linux.html\">binary version</a> for your architecture, or the <a href=\"http://www.pjrc.com/teensy/loader_cli.html\">source</a>. Remember to run <code>make</code> if you go with the source version.)</li>
  <li>Plug in the Teensy</li>
  <li>Press the pushbutton to activate the HalfKay loader</li>
  <li>Load your code onto it (either by running the GUI, or by using <code>./teensy_loader_cli -mmcu=[your processor here] -wv program.hex</code>)</li>
</ul>

<p>That's that.</p>

<p>I haven't actually started anything yet, but I plan to go through the listings of a few projects to warm up, hopefully culminating in a build of a <a href=\"http://chordite.com/\">Chordite</a> and addition of a new logo in a little while.</p>

<hr />
<h5>Footnotes</h5>

<p>1 - <a href=\"#note-Fri-Nov-11-214005EST-2011\" name=\"foot-Fri-Nov-11-214005EST-2011\">[back]</a> - Canada Post cheekily celebrates <a href=\"http://en.wikipedia.org/wiki/Remembrance_Day\">Remembrance Day</a>, so I'll actually have to wait until Tuesday or so to actually get my hands on <a href=\"http://en.wikipedia.org/wiki/The_Elder_Scrolls_V:_Skyrim\">my RPG fix</a> for the year.</p>


<p>2 - <a href=\"#note-Fri-Nov-11-221146EST-2011\" name=\"foot-Fri-Nov-11-221146EST-2011\">[back]</a> - The old one with the removable Atmega chip, rather than the new one with the tiny but soldered unit.</p>


<p>3 - <a href=\"#note-Fri-Nov-11-221157EST-2011\" name=\"foot-Fri-Nov-11-221157EST-2011\">[back]</a> - As if I didn't already have enough projects in the air.</p>
"))
((5202 3723 561594000) :INSERT (60 :POSTED 3529976400))
((5202 3723 561602000) :INSERT (60 :TAG :HARDWARE))
((5202 3723 561975000) :INSERT (61 :TITLE "Clomment Moderation"))
((5202 3723 561983000) :INSERT (61 :FILE "clomments-moderation.html"))
((5202 3723 561988000) :INSERT (61 :EDITED 3610022331))
((5202 3723 561991000) :INSERT
 (61 :BODY
  "<p>It's idea-peeling time, so if you're here for insights, go away. I'm just trying to reason things out to myself.</p>

<p>I'm still trying to tackle the moderation system for <a href=\"https://github.com/Inaimathi/clomments\">clomments</a> in some reasonably simple, reasonably performant way.</p> 

<p>The questions I've got around my head are all related to the fact that each person won't be hosting their own server. As much as I'd like that to be the case because of how simple it would make things, it probably won't work out that way. This means that there'll be a need for someone other than the clomments server operator to have moderation powers on the server.</p>

<p>The authentication can all be handled using <a href=\"http://openid.net/\">the OpenID protocol</a><a href=\"#foot-Tue-Nov-29-130055EST-2011\" name=\"note-Tue-Nov-29-130055EST-2011\">[1]</a>, but moderation in a system like this adds some complexity.</p>

<p>Primarily, those complications come from the fact that the model here is a large number of servers each handling the comments sections of a small number of sites. That's not necessarily even a design point, just something I'll have to make peace with if I want to release this under AGPL. So it would be a good idea to avoid having to sign up at each clomments server in order to moderate the comments it stores. Establishing ownership of the domain could be handled by the OpenID protocol, but it won't necessarily be doing so; I don't want it to be a requirement that you host your own identity.</p>

<p>So what I'd really want is a way to moderate comments that doesn't involve setting up an account. What I've got in mind is something like</p>

<ul>
<li>allow anyone to \"moderate\" clomments on a given page</li>
<li>moderating doesn't actually delete anything; you can hide or approve a comment</li>
<li>as part of calling the clomments server, the user specifies
  <ol>
    <li>the moderator account name(s) for this page</li>
    <li>how the page treats new comments (hide-until-approved or show-unless-flagged)</li>
  </ol>
</li>
<li>the clomments server responds with a subset of comments for the given page that fit the specified moderator/behavior</li>
</ul>

<p>So, what does this get me?</p>

<p>First, a way of moderating clomments without keeping track of anything user-related. If I use OpenID and this kind of soft-moderation as the first step, I don't have to care who owns what domain or who moderates what page. An anonymous 4chan-style comments system means that I don't have to care who posts what comment. The only person has \"account information\" on the server is ... the person hosting it (their DB user name and password), and that's sort of unavoidable.</p>

<p>Second, likely a bunch of performance headaches. If I'm keeping moderation sets separate from the comment tree, I need a way of merging them for display purposes. I can probably store them in a way that makes it relatively simple to figure out what comments should be shown based on whose approvals/flags need to be taken into consideration.</p>

<p>Third, a bit of added robustness against intrusions. If someone finds out a site owners credentials and \"deletes\" all comments on a given page, for instance, no real damage has been done. As soon as control of the account is restored, all removed items can be reinstated.</p>

<p>Finally, some potential support for future features. For instance, if I'm letting anyone \"moderate\", then it would be pretty cool to write a client at some point in the future that lets a viewer apply their own preferences on top of what's been decided by the moderators.</p>

<p>Ok, so I guess I'm definitely doing it this way. The difficult part is really going to be figuring out how to store mod changes in a way that can be queried efficiently along with the comments and then acted upon in the display layer. The simplest way of the top of my head would be something like</p>

<pre>(def-view-class moderation ()
  ((id <span style=\"color: #7a378b;\">:type</span> integer <span style=\"color: #7a378b;\">:accessor</span> id <span style=\"color: #7a378b;\">:initarg</span> <span style=\"color: #7a378b;\">:id</span> <span style=\"color: #7a378b;\">:db-constraints</span> (<span style=\"color: #7a378b;\">:not-null</span> <span style=\"color: #7a378b;\">:auto-increment</span>) <span style=\"color: #7a378b;\">:db-kind</span> <span style=\"color: #7a378b;\">:key</span>)
   (user-id <span style=\"color: #7a378b;\">:type</span> integer <span style=\"color: #7a378b;\">:reader</span> user-id <span style=\"color: #7a378b;\">:initarg</span> <span style=\"color: #7a378b;\">:user-id</span>)
   (comment-id <span style=\"color: #7a378b;\">:type</span> integer <span style=\"color: #7a378b;\">:reader</span> comment-id <span style=\"color: #7a378b;\">:initarg</span> <span style=\"color: #7a378b;\">:comment-id</span>)
   (page-id <span style=\"color: #7a378b;\">:type</span> integer <span style=\"color: #7a378b;\">:reader</span> page-id <span style=\"color: #7a378b;\">:initarg</span> <span style=\"color: #7a378b;\">:page-id</span>)

   (stat <span style=\"color: #7a378b;\">:type</span> keyword <span style=\"color: #7a378b;\">:accessor</span> stat <span style=\"color: #7a378b;\">:initarg</span> <span style=\"color: #7a378b;\">:stat</span>)))</pre>

<p>At which point we'd get the comments, plus mods, out by calling a method that looks something like</p> 

<pre>(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">comments</span> ((page page) <span style=\"color: #228b22;\">&amp;rest</span> moderators)
  (select 'comment 'moderation
          <span style=\"color: #7a378b;\">:where</span> [and [null [slot-value 'comment 'parent]]
                      [= [slot-value 'comment 'page-id] (id page)]
                      [= user-id [or moderators]]]))</pre>

<p>That wouldn't run, incidentally, it's just pseudo code of what we'd want. Take a page and a list of moderators (in descending order of authority) and get the comment plus the first moderation on the list. And tadaah, what you have is a list of <code>([comment] [moderation])</code> pairs that tell you what should be shown. In fact, it may actually be better to have separate methods for \"hide-until-approved\" and \"show-unless-flagged\" sites so that the query itself would only return comments that need to be shown.</p>

<p>It's too late for me to get into thinking about that now though. Hopefully, morning me will have some good ideas on how to translate this bullshit into some vaguely runnable code.</p>

<hr />
<h5>Footnotes</h5>

<p>1 - <a href=\"#note-Tue-Nov-29-130055EST-2011\" name=\"foot-Tue-Nov-29-130055EST-2011\">[back]</a> - Which, just as a side-note, seems to be much simpler and more flexible than I sort of imagined it being. Check out the <a href=\"http://en.wikipedia.org/wiki/OpenID#Technical_Overview\">wiki page</a> for a breakdown.</p>
"))
((5202 3723 562069000) :INSERT (61 :POSTED 3531790800))
((5202 3723 562073000) :INSERT (61 :TAG :COMMON-LISP))
((5202 3723 562076000) :INSERT (61 :TAG :HUNCHENTOOT))
((5202 3723 562764000) :INSERT (62 :TITLE "Teensy Fucking Passwords"))
((5202 3723 562773000) :INSERT (62 :FILE "teensy-passwords.html"))
((5202 3723 562786000) :INSERT (62 :EDITED 3610300919))
((5202 3723 562788000) :INSERT
 (62 :BODY
  "<p>I've been trying to get to as many <a href=\"http://www.lisptoronto.org/past-meetings/discussion-meeting-november-2011\">Toronto Lisp Users' Group</a> meetings as I can since missing one a couple months ago, though I'm not entirely sure it's good for me. The <code>minutes of conversation/interesting thing</code> ratio is approaching zero, to the point that it might be more accurate to start tracking <code>interesting things/minute</code>, which is excellent except that I have this day job thing which keeps me from spending every waking moment on <a href=\"http://english.lem.pl/\">interesting fiction</a>, <a href=\"http://www.rebol.org/\">crazy languages</a>(closed source warning) and <a href=\"http://www.greenarraychips.com/home/products/\">crazier architectures</a>. That's without even accounting for the fact that my wife and I have been beating down the Thalmor on a regular basis.</p>

<p>The last link is actually what got me off my ass and seriously interested in coding again in my spare time<a href=\"#foot-Tue-Dec-13-155321EST-2011\" name=\"note-Tue-Dec-13-155321EST-2011\">[1]</a>. The thing is, as soon as I started looking at it, I had to admit that I have no fucking idea how to go about serious embedded programming, let alone how to do it with <a href=\"http://en.wikipedia.org/wiki/Forth_(programming_language)\">forth</a><a href=\"#foot-Tue-Dec-13-155347EST-2011\" name=\"note-Tue-Dec-13-155347EST-2011\">[2]</a>.</p>

<p>I also mentioned a <a href=\"/article?name=teensy.html\">little while ago</a> that I tried poking around at the <a href=\"http://www.pjrc.com/teensy/\">Teensy</a> and found it to actually work on my machine<a href=\"#foot-Tue-Dec-13-155401EST-2011\" name=\"note-Tue-Dec-13-155401EST-2011\">[3]</a>. The other thing I like is that Teensy lets me use Emacs for development, though there isn't a nicely integrated mode for compiling and loading projects/files onto the chip without jumping into an <code>eshell</code> buffer. I might want to sink some time into that...</p>

<p>No! Focus! No new shit right now!</p>

<p>Anyway, poking around is all very well, but I find that I really need a project of some sort to work on otherwise I don't internalize the concepts effectively. I do still eventually want to build myself a <a href=\"http://chordite.com/\">chordite</a> (or <a href=\"http://www.youtube.com/watch?v=URqYG-iMcTY\">something similar</a>; relevant bit at the 2:10 mark), but that looks like it'll take a lot more industrial design and wiring than I'm in the mood for. At about the same time I was thinking about all of this, I stumbled upon a <a href=\"http://www.irongeek.com/i.php?page=security/homemade-hardware-keylogger-phukd\">writeup about a hardware keylogger</a> and an article entitled <a href=\"http://me.veekun.com/blog/2011/12/04/fuck-passwords/\">fuck passwords</a>.</p>

<p>The second one is all the correct complaints about passwords and authentication that OpenID was supposed to almost solve, and that <a href=\"http://linuxproblem.org/art_9.html\">SSH keys</a> do solve for those of us lucky enough to be using SSH. The problems remaining are</p>

<ul>
  <li>Not every system uses OpenID (and even if they did, you still need to authenticate to your OpenID provider, most of whom use passwords :p)</li>
  <li>The ones that don't use OpenID are the ones you want to be most secure (banks and such), and their password constraints make them the hardest to remember</li>
  <li>The most secure thing to do is to come up with a separate password for every service and rotate them regularly, but this is hard to memorize</li>
</ul>

<p>On top of that, there are a few things<a href=\"#foot-Tue-Dec-13-155549EST-2011\" name=\"note-Tue-Dec-13-155549EST-2011\">[4]</a> that can't be solved by OpenID or RSA keys. Just keep that problem in mind.</p>

<p>The other link is called \"<a href=\"http://www.irongeek.com/i.php?page=security/homemade-hardware-keylogger-phukd\">PHUKD</a>\". And a quick glance at that spec page will tell you exactly why. It's a pranking/surveillance tool whose accompanying paper is entitled <a href=\"http://www.irongeek.com/i.php?page=security/plug-and-prey-malicious-usb-devices\">Plug and Prey: Malicious USB Devices</a>. The way that it works ostensibly this. First, you surreptitiously connect the device to your targets' computer. Then, depending on what you want, you either set the thing to record keyboard/mouse input for later collection, or have it emulate a mouse/keyboard to run random malicious programs<a href=\"#foot-Tue-Dec-13-155701EST-2011\" name=\"note-Tue-Dec-13-155701EST-2011\">[5]</a>. Like I said, the <a href=\"http://www.irongeek.com/i.php?page=security/programmable-hid-usb-keystroke-dongle#Programming_examples_and_my_PHUKD_library\">phukd library</a> makes it a fairly explicit goal to screw with people's computers in this way with a separate <code>CommandAtRunBar</code> for each of Windows, GNOME and OS X. That's just ... mean.</p>

<p>Putting it all together, and as usual, I'm almost 100% sure that I'm not even remotely the first person to think this up, but why not just put your passwords onto a hardware key?</p>

<p>It'll be something like the actual <a href=\"http://www.pjrc.com/teensy/usb_keyboard.html\">teensy keyboard</a> implementation, but bind each button to a sequence of N characters that get typed out whenever it's pushed. Here's what I came up with after a bit of fiddling (pardon the giant code block, C isn't quite as easy for me to express ideas in).</p>

<pre><span style=\"color: #7a378b;\">#include</span> <span style=\"color: #8b2252;\">&lt;avr/io.h&gt;</span>
<span style=\"color: #7a378b;\">#include</span> <span style=\"color: #8b2252;\">&lt;avr/pgmspace.h&gt;</span>
<span style=\"color: #7a378b;\">#include</span> <span style=\"color: #8b2252;\">&lt;avr/interrupt.h&gt;</span>
<span style=\"color: #7a378b;\">#include</span> <span style=\"color: #8b2252;\">&lt;util/delay.h&gt;</span>
<span style=\"color: #7a378b;\">#include</span> <span style=\"color: #8b2252;\">&lt;string.h&gt;</span>
<span style=\"color: #7a378b;\">#include</span> <span style=\"color: #8b2252;\">\"usb_keyboard.h\"</span>

<span style=\"color: #7a378b;\">#define</span> <span style=\"color: #a0522d;\">LED_CONFIG</span>      (DDRD |= (1&lt;&lt;6))
<span style=\"color: #7a378b;\">#define</span> <span style=\"color: #a0522d;\">LED_ON</span>          (PORTD &amp;= ~(1&lt;&lt;6))
<span style=\"color: #7a378b;\">#define</span> <span style=\"color: #a0522d;\">LED_OFF</span>         (PORTD |= (1&lt;&lt;6))
<span style=\"color: #7a378b;\">#define</span> <span style=\"color: #0000ff;\">CPU_PRESCALE</span>(<span style=\"color: #a0522d;\">n</span>) (CLKPR = 0x80, CLKPR = (n))

<span style=\"color: #228b22;\">uint16_t</span> <span style=\"color: #a0522d;\">idle_count</span>=0;

<span style=\"color: #228b22;\">int</span> <span style=\"color: #0000ff;\">key_from_char</span>(<span style=\"color: #228b22;\">char</span> <span style=\"color: #a0522d;\">c</span>){
  <span style=\"color: #a020f0;\">if</span> (c &gt;= <span style=\"color: #8b2252;\">'a'</span> &amp;&amp; c &lt;= <span style=\"color: #8b2252;\">'z'</span>) <span style=\"color: #a020f0;\">return</span> c - 93;
  <span style=\"color: #a020f0;\">if</span> (c &gt;= <span style=\"color: #8b2252;\">'A'</span> &amp;&amp; c &lt;= <span style=\"color: #8b2252;\">'Z'</span>) <span style=\"color: #a020f0;\">return</span> c - 61;
  <span style=\"color: #a020f0;\">if</span> (c &gt;= <span style=\"color: #8b2252;\">'1'</span> &amp;&amp; c &lt;= <span style=\"color: #8b2252;\">'9'</span>) <span style=\"color: #a020f0;\">return</span> c - 19;
  <span style=\"color: #a020f0;\">if</span> (c == <span style=\"color: #8b2252;\">'0'</span>) <span style=\"color: #a020f0;\">return</span> 39; <span style=\"color: #b22222;\">// </span><span style=\"color: #b22222;\">0 is low in ASCII, high in the USB key definition
</span> 
  <span style=\"color: #b22222;\">// </span><span style=\"color: #b22222;\">there's no easy mapping between the other ASCII characters and 
</span>  <span style=\"color: #b22222;\">// </span><span style=\"color: #b22222;\">USB keyboard keys, so these are all 
</span>  <span style=\"color: #a020f0;\">switch</span> (c) {
  <span style=\"color: #a020f0;\">case</span> 32: <span style=\"color: #a020f0;\">return</span> KEY_SPACE; <span style=\"color: #a020f0;\">break</span>;
  <span style=\"color: #a020f0;\">case</span> 33: <span style=\"color: #a020f0;\">return</span> KEY_1; <span style=\"color: #a020f0;\">break</span>;
  <span style=\"color: #a020f0;\">case</span> 34: <span style=\"color: #a020f0;\">return</span> KEY_QUOTE; <span style=\"color: #a020f0;\">break</span>;
  <span style=\"color: #a020f0;\">case</span> 35: <span style=\"color: #a020f0;\">return</span> KEY_NUMBER; <span style=\"color: #a020f0;\">break</span>;
  <span style=\"color: #a020f0;\">case</span> 36: <span style=\"color: #a020f0;\">return</span> KEY_4; <span style=\"color: #a020f0;\">break</span>;
  <span style=\"color: #a020f0;\">case</span> 37: <span style=\"color: #a020f0;\">return</span> KEY_5; <span style=\"color: #a020f0;\">break</span>;
  <span style=\"color: #a020f0;\">case</span> 38: <span style=\"color: #a020f0;\">return</span> KEY_7; <span style=\"color: #a020f0;\">break</span>;
  <span style=\"color: #a020f0;\">case</span> 39: <span style=\"color: #a020f0;\">return</span> KEY_QUOTE; <span style=\"color: #a020f0;\">break</span>;
  <span style=\"color: #a020f0;\">case</span> 40: <span style=\"color: #a020f0;\">return</span> KEY_9; <span style=\"color: #a020f0;\">break</span>;
  <span style=\"color: #a020f0;\">case</span> 41: <span style=\"color: #a020f0;\">return</span> KEY_0; <span style=\"color: #a020f0;\">break</span>;
  <span style=\"color: #a020f0;\">case</span> 42: <span style=\"color: #a020f0;\">return</span> KEYPAD_<a href=\"http://www.asterix.com/\">ASTERIX</a>; <span style=\"color: #a020f0;\">break</span>;
  <span style=\"color: #a020f0;\">case</span> 43: <span style=\"color: #a020f0;\">return</span> KEYPAD_PLUS; <span style=\"color: #a020f0;\">break</span>;
  <span style=\"color: #a020f0;\">case</span> 44: <span style=\"color: #a020f0;\">return</span> KEY_COMMA; <span style=\"color: #a020f0;\">break</span>;
  <span style=\"color: #a020f0;\">case</span> 45: <span style=\"color: #a020f0;\">return</span> KEYPAD_MINUS; <span style=\"color: #a020f0;\">break</span>;
  <span style=\"color: #a020f0;\">case</span> 46: <span style=\"color: #a020f0;\">return</span> KEY_PERIOD; <span style=\"color: #a020f0;\">break</span>;
  <span style=\"color: #a020f0;\">case</span> 47: <span style=\"color: #a020f0;\">return</span> KEYPAD_SLASH; <span style=\"color: #a020f0;\">break</span>;

  <span style=\"color: #a020f0;\">case</span> 58: <span style=\"color: #a020f0;\">return</span> KEY_SEMICOLON; <span style=\"color: #a020f0;\">break</span>;
  <span style=\"color: #a020f0;\">case</span> 59: <span style=\"color: #a020f0;\">return</span> KEY_SEMICOLON; <span style=\"color: #a020f0;\">break</span>;
  <span style=\"color: #a020f0;\">case</span> 60: <span style=\"color: #a020f0;\">return</span> KEY_COMMA; <span style=\"color: #a020f0;\">break</span>;
  <span style=\"color: #a020f0;\">case</span> 61: <span style=\"color: #a020f0;\">return</span> KEY_EQUAL; <span style=\"color: #a020f0;\">break</span>;
  <span style=\"color: #a020f0;\">case</span> 62: <span style=\"color: #a020f0;\">return</span> KEY_PERIOD; <span style=\"color: #a020f0;\">break</span>;
  <span style=\"color: #a020f0;\">case</span> 63: <span style=\"color: #a020f0;\">return</span> KEY_SLASH; <span style=\"color: #a020f0;\">break</span>;
  <span style=\"color: #a020f0;\">case</span> 64: <span style=\"color: #a020f0;\">return</span> KEY_2; <span style=\"color: #a020f0;\">break</span>;

  <span style=\"color: #a020f0;\">case</span> 91: <span style=\"color: #a020f0;\">return</span> KEY_LEFT_BRACE; <span style=\"color: #a020f0;\">break</span>;
  <span style=\"color: #a020f0;\">case</span> 92: <span style=\"color: #a020f0;\">return</span> KEY_BACKSLASH; <span style=\"color: #a020f0;\">break</span>;
  <span style=\"color: #a020f0;\">case</span> 93: <span style=\"color: #a020f0;\">return</span> KEY_RIGHT_BRACE; <span style=\"color: #a020f0;\">break</span>;
  <span style=\"color: #a020f0;\">case</span> 94: <span style=\"color: #a020f0;\">return</span> KEY_6; <span style=\"color: #a020f0;\">break</span>;
  <span style=\"color: #a020f0;\">case</span> 95: <span style=\"color: #a020f0;\">return</span> KEY_MINUS; <span style=\"color: #a020f0;\">break</span>;
  <span style=\"color: #a020f0;\">case</span> 96: <span style=\"color: #a020f0;\">return</span> KEY_TILDE; <span style=\"color: #a020f0;\">break</span>;

  <span style=\"color: #a020f0;\">case</span> 123: <span style=\"color: #a020f0;\">return</span> KEY_LEFT_BRACE; <span style=\"color: #a020f0;\">break</span>;
  <span style=\"color: #a020f0;\">case</span> 124: <span style=\"color: #a020f0;\">return</span> KEY_BACKSLASH; <span style=\"color: #a020f0;\">break</span>;
  <span style=\"color: #a020f0;\">case</span> 125: <span style=\"color: #a020f0;\">return</span> KEY_RIGHT_BRACE; <span style=\"color: #a020f0;\">break</span>;
  <span style=\"color: #a020f0;\">case</span> 126: <span style=\"color: #a020f0;\">return</span> KEY_TILDE; <span style=\"color: #a020f0;\">break</span>;

  <span style=\"color: #a020f0;\">default</span>: <span style=\"color: #a020f0;\">return</span> 0;
  }
}

<span style=\"color: #228b22;\">int</span> <span style=\"color: #0000ff;\">modifier_from_char</span>(<span style=\"color: #228b22;\">char</span> <span style=\"color: #a0522d;\">c</span>){
  <span style=\"color: #a020f0;\">if</span> ((c &gt;= <span style=\"color: #8b2252;\">'A'</span> &amp;&amp; c &lt;= <span style=\"color: #8b2252;\">'Z'</span>) ||
      c == 33 || c == 34 ||
      (c &gt;= 36 &amp;&amp; c &lt;= 38) ||
      c == 40 || c == 41 ||
      c == 58 || c == 60 ||
      (c &gt;= 62 &amp;&amp; c &lt;= 64) ||
      c == 94 || c == 95 ||
      (c &gt;= 123 &amp;&amp; c &lt;= 126)) <span style=\"color: #a020f0;\">return</span> KEY_SHIFT;
  
  <span style=\"color: #a020f0;\">return</span> 0;
}

<span style=\"color: #228b22;\">int8_t</span> <span style=\"color: #0000ff;\">usb_keyboard_print</span>(<span style=\"color: #228b22;\">char</span> *<span style=\"color: #a0522d;\">s</span>){
  <span style=\"color: #228b22;\">int</span> <span style=\"color: #a0522d;\">s_len</span> = strlen(s);
  <span style=\"color: #228b22;\">int</span> <span style=\"color: #a0522d;\">i</span>;

  <span style=\"color: #a020f0;\">for</span>(i = 0; i &lt; s_len; i++){
    usb_keyboard_press(key_from_char(s[i]), modifier_from_char(s[i]));
  }
}

<span style=\"color: #228b22;\">int</span> <span style=\"color: #0000ff;\">main</span>(<span style=\"color: #228b22;\">void</span>) {
  <span style=\"color: #228b22;\">uint8_t</span> <span style=\"color: #a0522d;\">b</span>, <span style=\"color: #a0522d;\">mask</span>, <span style=\"color: #a0522d;\">i</span>;
  <span style=\"color: #228b22;\">uint8_t</span> <span style=\"color: #a0522d;\">b_previous</span>=0xFF;
  CPU_PRESCALE(0); <span style=\"color: #b22222;\">// </span><span style=\"color: #b22222;\">set for 16 MHz clock
</span>
  DDRB = 0x00;
  PORTB = 0xFF;
 
  usb_init();
  <span style=\"color: #a020f0;\">while</span> (!usb_configured()) <span style=\"color: #b22222;\">/* </span><span style=\"color: #b22222;\">wait </span><span style=\"color: #b22222;\">*/</span> ;
  _delay_ms(1000);

  <span style=\"color: #a020f0;\">while</span> (1) {
    b = PINB;
    mask = 1;

    <span style=\"color: #a020f0;\">for</span> (i=0; i&lt;8; i++) {
      <span style=\"color: #a020f0;\">if</span> (((b &amp; mask) == 0) &amp;&amp; (b_previous &amp; mask) != 0) {
        usb_keyboard_print(<span style=\"color: #8b2252;\">\"abcdABCD1234!@#$%^&amp;*()_+|~{}:\\\"&gt;?&lt;-=\\\\`[];',./\"</span>);
      }
      mask = mask &lt;&lt; 1;
    }

    b_previous = b;
    _delay_ms(2);
  }
}</pre>

<!-- \" -->

<p>It's actually very close to the example code that runs the keyboard, except that I've modified it to take ASCII strings as input and pretend to type them out. I didn't complicate things (yet) by trying to figure out how to <a href=\"http://www.dorkbotpdx.org/blog/spacewrench/cool_thing_with_broken_teensy\">hook up an LED</a> or <a href=\"http://www.pjrc.com/teensy/sd_adaptor.html\">micro SD</a> card. It just keeps passwords in as part of the program source, and outputs one password per button.</p>

<p>I'm going to develop this over the next little while, at least while my interest is focused enough on it, into a unit that stores a bunch of passwords, lets me select which one I want (indexed by what the password belongs to), and output it. Ideally, I'd also get this down to a package <a href=\"http://www.irongeek.com/i.php?page=security/programmable-hid-usb-keystroke-dongle\">small enough</a> that I could just put on a physical keychain. That's a pretty good learning project for the short term.</p>

<p>Anyway, full circle with the fucking of passwords, when I'm done, this will be a little machine that I can plug into any USB-capable computer, push a button or two, and have it output (with much better recall and more accuracy than I could) a password that can be as massive and unique as I damn well please. It's not computer-specific (so I don't need to worry about syncing it, except for backup purposes), and it works anywhere I'd want to plug in an actual keyboard. That should kill the security problems dead. Of course, I'll need to keep some sort of safeguard in case it stops working or falls into the wrong hands, but at least I won't be forced to pick between convenience and security anymore.</p>

<p>It seems like a pretty obvious, elegant solution to the problem, conceptually. I can see why it hasn't caught on yet though; if you want to use something like this, you basically need to build it yourself. If I had to buy one of these dongles rather than build one, there's no chance in hell that I'd do it. I'd have to either really, truly, trust the provider enough to believe that they'd never snoop on my passwords or log unrelated information, OR I'd need to get a blank key and the source code and then put them together myself. There are just too many fragile points to do it any other way.</p>

<p>And that's about it. Oh, actually, I did toss this code <a href=\"http://codereview.stackexchange.com/questions/6796/keyboard-printing-with-teensy\">up to codereview</a>, in case someone out there is actually a C coder and wants to tear me a new one about something. I'm still chewing through <a href=\"https://github.com/Inaimathi/clomments\">clomments</a> issues, and I've actually done some real work on <a href=\"/article?name=using-clsql-part2.html\">cl-chan</a> which I'll hopefully be kicking up soon; just as soon as I decide how to treat the image manipulation pieces.</p>

<hr />
<h5>Footnotes</h5>

<p>1 - <a href=\"#note-Tue-Dec-13-155321EST-2011\" name=\"foot-Tue-Dec-13-155321EST-2011\">[back]</a> -  If you're also interested, but don't want to drop the $500 on a full, two-chip eval board, you can also get a <a href=\"http://www.greenarraychips.com/home/documents/budget.html\">breadboard kit</a> for about $60 total, though you have to buy the individual chip, power supply and breakout board.</p>

<p>2 - <a href=\"#note-Tue-Dec-13-155347EST-2011\" name=\"foot-Tue-Dec-13-155347EST-2011\">[back]</a> -  My only experience with it was writing a few toy programs in <a href=\"http://www.gnu.org/s/gforth/\">gforth</a>, which I get the feeling won't be very useful.</p>


<p>3 - <a href=\"#note-Tue-Dec-13-155401EST-2011\" name=\"foot-Tue-Dec-13-155401EST-2011\">[back]</a> -  In marked contrast to the more popular <a href=\"http://www.arduino.cc/\">Arduino</a>.</p>


<p>4 - <a href=\"#note-Tue-Dec-13-155549EST-2011\" name=\"foot-Tue-Dec-13-155549EST-2011\">[back]</a> -  Like the actual, physical computer I use everyday.</p>


<p>5 - <a href=\"#note-Tue-Dec-13-155701EST-2011\" name=\"foot-Tue-Dec-13-155701EST-2011\">[back]</a> - Or just commandeer the browser to take your target to <a href=\"http://www.youtube.com/watch?v=dQw4w9WgXcQ\">goatse</a></p>
"))
((5202 3723 562964000) :INSERT (62 :POSTED 3532741200))
((5202 3723 562966000) :INSERT (62 :TAG :C))
((5202 3723 562969000) :INSERT (62 :TAG :HARDWARE))
((5202 3723 562971000) :INSERT (62 :TAG :IDEA-PEELING))
((5202 3723 562973000) :INSERT (62 :TAG :PROGRAMMING-INTERFACES))
((5202 3723 562975000) :INSERT (62 :TAG :SECURITY))
((5202 3723 563147000) :INSERT (63 :TITLE "Teensy Mode"))
((5202 3723 563152000) :INSERT (63 :FILE "teensy-mode.html"))
((5202 3723 563154000) :INSERT (63 :EDITED 3610022331))
((5202 3723 563157000) :INSERT
 (63 :BODY
  "<p>Ok, this isn't one of those bullshit times where I just say \"I'm going to bed\" and then end up spending three hours explaining various shit at the expense of wakefulness the following day. Seriously, just one thing, I added a <code>teensy-mode</code> module to my <a href=\"https://github.com/Inaimathi/emacs-utils\"><code>emacs-utils</code></a> project over at github. It turns out that I can't focus to save my life, but it has been damn enjoyable jumping into code so thoroughly after the set of weeks I've just been through.</p>

<p>The relevant bits are really just</p>

<pre>(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">teensy-compile-current-file</span> ()
  (interactive)
  (shell-command (format <span style=\"color: #8b2252;\">\"%s %s\"</span> teensy-compile-file-command buffer-file-name)))

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">teensy-compile-project</span> ()
  (interactive)
  (shell-command teensy-compile-project-command))

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">teensy-load-hex-file</span> ()
  (interactive)
  (<span style=\"color: #a020f0;\">let</span> ((hex-files (directory-files (file-name-directory buffer-file-name) nil <span style=\"color: #8b2252;\">\"hex$\"</span>))
        (command (format <span style=\"color: #8b2252;\">\"%s -mmcu=%s -wv \"</span> teensy-loader-program teensy-processor-type)))
    (<span style=\"color: #a020f0;\">cond</span> ((not hex-files) (message <span style=\"color: #8b2252;\">\"No hex file found\"</span>))
          ((= 1 (length hex-files)) (shell-command (concat command (car hex-files))))
          (t (shell-command (concat command (completing-read <span style=\"color: #8b2252;\">\"Hex File: \"</span> hex-files)))))))

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">teensy-compile-project-load-file</span> ()
  (interactive)
  (<span style=\"color: #a020f0;\">progn</span> (teensy-compile-project)
         (teensy-load-hex-file)))</pre>

<p>the rest of it is various Emacs boilerplate like key and customization declarations. The one interesting thing I've learned from <i>this</i> experience is that the <code><span style=\"color: #7a378b;\">:options</span></code> keyword does pretty much jack shit. In a <code>hook</code> customization, you can presumably at least <i>see</i> the list, but it still doesn't constrain your choices to what's there. It might be nice to have the option, since the customization I had in mind was the chip-type of your Teensy board (a required option that needs to be correct or it'll hang your chip, so it's sort of critical to get it correct).</p>

<p>I'm also flaking out on actual project compilation, opting to keep the <code>make</code> command involved, which has som seriiaaah fuck this, I'm going to sleep.</p>
"))
((5202 3723 563183000) :INSERT (63 :POSTED 3532827600))
((5202 3723 563186000) :INSERT (63 :TAG :C))
((5202 3723 563187000) :INSERT (63 :TAG :ELISP))
((5202 3723 563190000) :INSERT (63 :TAG :MAKE))
((5202 3723 563482000) :INSERT
 (64 :TITLE "x220 and (unrelatedly) Portable Keyboards"))
((5202 3723 563489000) :INSERT (64 :FILE "x220.html"))
((5202 3723 563494000) :INSERT (64 :EDITED 3610310808))
((5202 3723 563496000) :INSERT
 (64 :BODY
  "<p>So I finally got a new machine. A lenovo x220 laptop. It's kind of a lightweight, but even with an i3 and only 4gb of ram, it easily doubles the specs of my netbook (RIP, battery). Speaking of which, I also got a 9-cell battery for the new box. The cost of this unit was much lower than usual because of a promotional code I stumbled upon. I haven't actually had time to take it for a spin, but the battery came about 20% charged and told me that this would be enough for 2:30 hours of operation. That. Is. Awesome.</p>

<p>The drive in it still has Windows on it so I didn't poke around much like I said. My plan is to toss an SSD in there and throw in Debian as usual<a href=\"#foot-Mon-Dec-26-224929EST-2011\" name=\"note-Mon-Dec-26-224929EST-2011\">[1]</a>. That hard drive is going to be a pain in the ass though. It <i>is</i> a standard 2.5 inch SATA drive, but it's very <i>slightly</i> shorter than the OCZ units I have lying around. That leaves me three options</p>

<ol>
  <li>Go buy a new SSD for the laptop (plausible in a little while, but I'm sort of shopped out at the moment)</li>
  <li>Mod the laptop to accept slightly taller drives (this kills the warranty, and the laptop is still covered so I don't want to fuck with it)</li>
  <li>Mod one of my drives to fit a smaller space (this also kills the warranty, but my drives are long out of their warranty period, so I give precisely zero fucks)</li>
</ol>

<p>Three is the obvious winner for the short term. I may still go get a new hard drive later; this unit supports SATA3, so I can get an extra little speed boost by shelling out. Sadly, it looks like SATA3 drives don't come smaller than 120GB, which means ~$200 or so. Incidentally, a <a href=\"http://www.newegg.ca/Product/Product.aspx?Item=N82E16820227393\">SATA2 32GB drive is down to the $60 range</a> these days, so if you're a Linux user that still has a 7200RPM, or even a 10k, you may want to pick an SSD up at these prices. The difference is noticeable.</p>

<h3>Time Passes...</h3>

<p>So that's done</p>

<img src=\"/static/img/x220-done.jpg\" class=\"middle\" alt=\"Done\" />

<p>Except that \"mod\" turned out to be a bit of an overstatement<a href=\"#foot-Mon-Dec-26-225044EST-2011\" name=\"note-Mon-Dec-26-225044EST-2011\">[2]</a>. I literally just removed the case<a href=\"#foot-Mon-Dec-26-225057EST-2011\" name=\"note-Mon-Dec-26-225057EST-2011\">[3]</a>, braced it in the laptop drive bracket using some rubber stoppers, and secured the whole thing with some electrical tape. I'm not about to get fancy for an internal component; it just needs to work, and this does. </p>

<p>That's the old install of AMD64 Squeeze I already had on the drive, and it works mostly fine but I'll still need to re-install. <a href=\"http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=626220\">The ethernet drivers in Squeeze don't support Intel's 82579LM</a>; it's already been patched in <a href=\"http://www.debian.org/devel/debian-installer/\">Wheezy</a>. There obviously aren't any plans to push new changes to the stable release, so I guess I'm moving up to testing. I don't anticipate any problems; <a href=\"http://unetbootin.sourceforge.net/\"><code>unetbootin</code></a> is running as we speak<a href=\"#foot-Mon-Dec-26-225122EST-2011\" name=\"note-Mon-Dec-26-225122EST-2011\">[4]</a>.</p>

<p>I have done a little bit of typing on it by this point; my intention was to finish this article with it, but the lack of network connectivity of any kind put a stop to that. I did notice that the keyboard was improperly set; the right side was ok, but the left side was actually vibrating with each keystroke. Undoing the keyboard screws on the back and re-setting it fixed that easily.</p>

<p>Installing Debian is pretty close to a non-event around here in terms of the attention it requires. Really, I've been thinking about prototyping some things. Firstly, the password-logger is proceeding apace, though I still don't have enough done to consider publishing. I'm at the stage where I can have it remember multiple passwords, cycle through them, and output them on a single button-press. Right now I'm playing around with a little 1x11 numeric LED display I picked up so that the unit will be able to display a label for each password, and I still want to put it together in such a way that I can add/change/delete passwords without having to recompile the thing.</p>

<p>In other news, you already know that my plans involved building a prototype of the <a href=\"http://chordite.com/\">chordite</a>, but I've also been looking at other layouts and ideas for the same purposes. I'm only about half-way through building a chordite, but here are my preliminary thoughts about all the designs I've taken a look at<a href=\"#foot-Mon-Dec-26-225548EST-2011\" name=\"note-Mon-Dec-26-225548EST-2011\">[5]</a>.</p>

<h3>Chordite</h3>
<p>Pros:</p>
<ul>
  <li>one-handed <i>(that lets you use the other hand for balance, for example, in a public transit situation)</i></li>
  <li>data entry doesn't use fingertips <i>(makes it easy to chord)</i></li>
  <li><a href=\"http://chordite.com/license.htm\">standard configuration</a> covers 84 keys <i>(the default key mapping reference is in that zip file)</i></li>
  <li>simple construction <i>(only 8 switches to wire up, and the rest can be built with a bit of cardboard and some wire coathanger)</i></li>
</ul>
<p>Cons:</p> 
<ul>
  <li>chords entered in serial <i>(so it doesn't seem like you could easily use Emacs keystrokes of the style <code>C-x C-h</code>, and it seems like this would kneecap your speed since you're doing two or three effective key-presses per keystroke)</i></li>
  <li>strapless <i>(which may or may not be comfortable, but it does mean that you thumb needs to support the board rather than being available for its own keystrokes)</i></li>
</ul>

<h3><a href=\"http://www.youtube.com/watch?v=URqYG-iMcTY#t=02m10s\">joestutes Wearable Keyboard</a></h3>
<p>Pros:</p>
<ul>
  <li>one-handed</li>
  <li>non-chording <i>(each switch is one key; I'm assuming that this would be more accurate and faster than chording; it also seems like it would make it easier to memorize)</i></li>
  <li>provides \"mouse\" through thumb-operated joystick</li>
</ul>
<p>Cons:</p>
<ul>
  <li>emulates 40 keys total, so you need a reduced character set; this is not a coding keyboard</li>
  <li>requires high level of precision control from each finger <i>(I'm actually not even sure if this is a human thing, or just my mutant hands, but I can only reliably do fine-grained independent control with my index and middle finger; the ring and pinky fingers, even on my main hand, can't really move on their own very well and almost certainly wouldn't be able to do the sort of multi-directional movement that this thing seems to need)</i></li>
  <li>construction involves wiring 40 separate switches and a joystick. That's not exactly simple.</li>
</ul>

<h3><a href=\"http://www.youtube.com/watch?v=0I3jZZrPbPs&feature=related\">Ergo Electronics Keyglove</a></h3>
<p>Pros:</p>
<ul>
  <li>tons of keys</li>
  <li>glove-based <i>(you're not actually holding anything, so you can easily switch between typing and doing something else)</i></li>
  <li>one-handed</li>
</ul>
<p>Cons:</p>
<ul>
  <li>requires high-precision movements with all fingers <i>(it works with some fairly densely packed contacts, and assumes you can hit them, with various levels of hand-contorting movements, with each finger)</i>.</li>
  <li>single keystrokes, so doing Emacs chords seems difficult if not impossible</li>
</ul>

<h3><a href=\"http://www.youtube.com/watch?v=zr1kqL08uj4#t=02m00s\">Carsten Mehring Keyglove (first prototype)</a></h3>
<p>Pros:</p>
<ul>
  <li>tons of keys</li>
  <li>glove-based</li>
  <li>Emacs-style chord capability</li>
</ul>
<p>Cons:</p>
<ul>
  <li>two-handed <i>(even though you can switch between things easily, you need both hands dedicated to typing with this one; not sure if it would work that way in practice)</i></li>
  <li>demo video translation is typeset set in Comic Sans <i>(I'm still a designer, dammit)</i></li>
</ul>

<h3><a href=\"http://www.youtube.com/watch?v=zr1kqL08uj4#t=02m43s\">Carsten Mehring Keyglove (second prototype)</a></h3>
<p>Pros:</p>
<ul>
  <li>glove-based</li>
  <li>one-handed</li>
</ul>
<p>Cons:</p>
<ul>
  <li>not entirely sure how the keystrokes are generated, and therefore how many can actually be generated <i>(it looks like it doesn't do Emacs chords either)</i></li>
</ul>

<h3><a href=\"http://www.youtube.com/watch?v=zZhWa2FfEac&feature=related\">Twiddler</a></h3>
<p>Pros:</p>
<ul>
  <li>one-handed</li>
  <li>strapped <i><i>(so your thumb is used for modifier keys)</i></i></li>
  <li>provides \"mouse\" <i>(mini joystick operated by thumb)</i></li>
  <li>thumb operates modifier keys <i>(so Emacs-style chords are easy to hit)</i></li>
</ul>
<p>Cons</p>
<ul>
  <li>none that I can see, actually</li>
</ul>

<p>Like I said, these are very preliminary thoughts. It's possible that actually using some is easier/more comfortable than I imagined based on the demo videos. A priori, it looks like the ideal is a strap-using, portable-joystick-style keyboard, <i>or</i> a two-handed glove model. Granted I've got different problems than the average user. Emacs use means I need to be able to chord multiple keys, and Tiling WM/keyboard reliance means I don't really want a pointing device most of the time.</p>

<hr />
<h5>Footnotes</h5>

<p>1 - <a href=\"#note-Mon-Dec-26-224929EST-2011\" name=\"foot-Mon-Dec-26-224929EST-2011\">[back]</a> - The documentation tells me that I'll actually need to set up one piece of non-free software to run my wireless card, which is sad, but I don't really have the time or patience to go hunt down an atheros-based card this week.</p>

<p>2 - <a href=\"#note-Mon-Dec-26-225044EST-2011\" name=\"foot-Mon-Dec-26-225044EST-2011\">[back]</a> - Which is why you don't see pictures.</p>

<p>3 - <a href=\"#note-Mon-Dec-26-225057EST-2011\" name=\"foot-Mon-Dec-26-225057EST-2011\">[back]</a> - Which is not nearly as dangerous for the drive on an SSD as it is on a traditional platter drive.</p>

<p>4 - <a href=\"#note-Mon-Dec-26-225122EST-2011\" name=\"foot-Mon-Dec-26-225122EST-2011\">[back]</a> - Those of you who already have a Debian machine set up can actually just <code>apt-get install unetbootin</code></p>

<p>5 - <a href=\"#note-Mon-Dec-26-225548EST-2011\" name=\"foot-Mon-Dec-26-225548EST-2011\">[back]</a> - Ideally, I'll actually put together one of each and take them for a test-drive, but I have no idea how long that will actually take me.</p>
"))
((5202 3723 563639000) :INSERT (64 :POSTED 3533864400))
((5202 3723 563644000) :INSERT (64 :TAG :HARDWARE))
((5202 3723 563648000) :INSERT (64 :TAG :PROGRAMMING-INTERFACES))
((5202 3723 564419000) :INSERT
 (65 :TITLE "XMonad Keybindings and an aside on Piracy"))
((5202 3723 564428000) :INSERT (65 :FILE "piracy.html"))
((5202 3723 564432000) :INSERT (65 :EDITED 3610299365))
((5202 3723 564435000) :INSERT
 (65 :BODY
  "<p>So I've gotten my x220 all set up the way I like. I ended up using XFCE as my desktop environment again, because if nothing else, I sometimes like an external monitor. Really, I expect to spend most of my time in <a href=\"/article?name=screen-wm-followup.html\">Screen</a> now that I've set up <a href=\"http://en.wikipedia.org/wiki/Wicd\">wicd</a>. By the way, in case you're trying to get it to work and failing, you actually need to specify what wireless device it should use to connect to networks. This device is almost always <code>wlan0</code>, but a default isn't set so you need to do <code>Shift+p</code> and type it in manually in the preferences screen.</p>

<p>I'm still debating window managers, and currently have both <a href=\"http://stumpwm.org/\">StumpWM</a> and <a href=\"http://xmonad.org/\">XMonad</a> installed. I've been using Stump pretty consistently lately, but I have noticed some inconveniences with it related to how window management works. The main things keeping me on it are the home-row mod \"key\" and the ability to override that \"key\" in case the program I'm using needs the keystroke. Taking a look at what XMonad config can do these days, here's how I would do the same</p>

<pre><span style=\"color: #00ffff; font-weight: bold;\">import</span> <span style=\"color: #00ff00;\">XMonad</span>
<span style=\"color: #00ffff; font-weight: bold;\">import</span> <span style=\"color: #00ff00;\">XMonad.Config.Xfce</span>

<span style=\"color: #00ffff; font-weight: bold;\">import</span> <span style=\"color: #00ffff; font-weight: bold;\">qualified</span> <span style=\"color: #00ff00;\">XMonad.StackSet</span> <span style=\"color: #00ffff; font-weight: bold;\">as</span> <span style=\"color: #00ff00;\">S</span>
<span style=\"color: #00ffff; font-weight: bold;\">import</span> <span style=\"color: #00ff00;\">XMonad.Actions.CycleWS</span>
<span style=\"color: #00ffff; font-weight: bold;\">import</span> <span style=\"color: #00ff00;\">XMonad.Actions.CycleWindows</span>
<span style=\"color: #00ffff; font-weight: bold;\">import</span> <span style=\"color: #00ff00;\">XMonad.Actions.WindowGo</span>
<span style=\"color: #00ffff; font-weight: bold;\">import</span> <span style=\"color: #00ff00;\">XMonad.Actions.GridSelect</span>

<span style=\"color: #00ffff; font-weight: bold;\">import</span> <span style=\"color: #00ff00;\">XMonad.Util.EZConfig</span>
<span style=\"color: #00ffff; font-weight: bold;\">import</span> <span style=\"color: #00ff00;\">XMonad.Util.CustomKeys</span>

<span style=\"color: #00ffff; font-weight: bold;\">import</span> <span style=\"color: #00ffff; font-weight: bold;\">qualified</span> <span style=\"color: #00ff00;\">Data.Map</span> <span style=\"color: #00ffff; font-weight: bold;\">as</span> <span style=\"color: #00ff00;\">M</span>

<span style=\"color: #0000ff; font-weight: bold;\">main</span> <span style=\"color: #ffff00;\">=</span> xmonad <span style=\"color: #ffff00;\">$</span> xfceConfig { modMask <span style=\"color: #ffff00;\">=</span> mod4Mask }
       <span style=\"color: #ffff00;\">`additionalKeysP`</span>
       [ (<span style=\"color: #00ff00;\">\"M-p\"</span>, dmenu_launch)
       , (<span style=\"color: #00ff00;\">\"M-&lt;Return&gt;\"</span>, spawn_term)
       , (<span style=\"color: #00ff00;\">\"&lt;Print&gt;\"</span>, spawn <span style=\"color: #00ff00;\">\"xfce4-screenshooter\"</span>)
       , (<span style=\"color: #00ff00;\">\"C-t p\"</span>, dmenu_launch)
       , (<span style=\"color: #00ff00;\">\"C-t C-p\"</span>, dmenu_launch)
       , (<span style=\"color: #00ff00;\">\"C-t &lt;Return&gt;\"</span>, spawn_term)
       , (<span style=\"color: #00ff00;\">\"C-t w\"</span>, nextScreen)
       , (<span style=\"color: #00ff00;\">\"C-t e\"</span>, prevScreen)
         
       , (<span style=\"color: #00ff00;\">\"C-t j\"</span>, windows <span style=\"color: #00ff00;\">S</span><span style=\"color: #ffff00;\">.</span>focusDown)
       , (<span style=\"color: #00ff00;\">\"C-t S-j\"</span>, windows <span style=\"color: #00ff00;\">S</span><span style=\"color: #ffff00;\">.</span>swapDown)
       , (<span style=\"color: #00ff00;\">\"C-t k\"</span>, windows <span style=\"color: #00ff00;\">S</span><span style=\"color: #ffff00;\">.</span>focusUp)
       , (<span style=\"color: #00ff00;\">\"C-t S-k\"</span>, windows <span style=\"color: #00ff00;\">S</span><span style=\"color: #ffff00;\">.</span>swapUp)
       , (<span style=\"color: #00ff00;\">\"C-t g\"</span>, goToSelected defaultGSConfig)
         
       , (<span style=\"color: #00ff00;\">\"C-t &lt;Space&gt;\"</span>, sendMessage <span style=\"color: #00ff00;\">NextLayout</span>)
       , (<span style=\"color: #00ff00;\">\"C-t h\"</span>, sendMessage <span style=\"color: #00ff00;\">Shrink</span>)
       , (<span style=\"color: #00ff00;\">\"C-t l\"</span>, sendMessage <span style=\"color: #00ff00;\">Expand</span>)
       , (<span style=\"color: #00ff00;\">\"C-t t\"</span>, withFocused <span style=\"color: #ffff00;\">$</span> windows <span style=\"color: #ffff00;\">.</span> <span style=\"color: #00ff00;\">S</span><span style=\"color: #ffff00;\">.</span>sink)
         
       , (<span style=\"color: #00ff00;\">\"C-t C-t\"</span>, spawn <span style=\"color: #00ff00;\">\"xdotool key ctrl+t\"</span>) <span style=\"color: #ff0000;\">-- </span>this is a lie
       ]
       
<span style=\"color: #0000ff; font-weight: bold;\">dmenu_launch</span> <span style=\"color: #ffff00;\">=</span> spawn <span style=\"color: #00ff00;\">\"exe=`dmenu_path | dmenu` &amp;&amp; eval \\\"exec $exe\\\"\"</span>
<span style=\"color: #0000ff; font-weight: bold;\">spawn_term</span> <span style=\"color: #ffff00;\">=</span> spawn <span style=\"color: #00ff00;\">\"xterm\"</span></pre>

<p>A couple of those are blatantly ridiculous (specifically the resizing options are less than helpful if you have to do <code>C-t h C-t h C-t h</code> rather than <code>S h h h</code>), and the <code>xdotool</code> command is entirely fictitious, as the comment claims. I'm actually not even sure why that is; the command works fine when I run it from terminal directly, and it also works fine on <i>any keystroke other than <code>C-t</code></i>, in both Stump and XMonad. I'm beginning to think it may be a bug in <code>xdotool</code>. Incidentally, I realize that in this one specific situation, it may have been simpler to specify my own submap, but I like the emacs-style keys enough to keep them despite a bit of repetition.</p>

<p>Ok, massive gear shift incoming. Don't say I didn't warn you.</p>

<p>There's been a lot of discussion about piracy across the <a href=\"http://www.reddit.com/r/technology\">various</a> <a href=\"http://www.reddit.com/r/AskReddit/\">reddits</a> I <a href=\"http://www.reddit.com/r/darknetplan/\">frequent</a> <a href=\"http://www.reddit.com/r/canada/comments/ne9f6/how_will_the_sopa_bill_passing_affect_our/\">lately</a>. Mostly related to the imminent <a href=\"http://en.wikipedia.org/wiki/Stop_Online_Piracy_Act\">SOPA</a> and <a href=\"http://en.wikipedia.org/wiki/PROTECT_IP_Act\">PROTECT IP</a> bills set to pass in the US. The thing that's bothered me the entire way through most of the discussions is that there isn't a standard definition of \"piracy\". Personally, I'd prefer to take <a href=\"http://www.gnu.org/philosophy/words-to-avoid.html#Piracy\">the Stallman approach</a>, just outright rejecting the legitimacy of the term, but that ship has sailed<a href=\"#foot-Tue-Dec-27-150940EST-2011\" name=\"note-Tue-Dec-27-150940EST-2011\">[1]</a>. There are <a href=\"http://en.wikipedia.org/wiki/Pirate_Parties_International\">political parties</a><a href=\"#foot-Tue-Dec-27-151156EST-2011\" name=\"note-Tue-Dec-27-151156EST-2011\">[2]</a> using the term as a rallying cry for people in favor of digital freedom and privacy, and most people joining the conversation haven't been exposed to other terms.</p>

<p>You can't help but be biased if that's all the exposure you've had, <a href=\"http://en.wikipedia.org/wiki/Jack_Sparrow\">recent hollywood romanticization of pirates</a> notwithstanding. So, here are some things to keep in mind. I'm not claiming that this is the complete conversation, but this is the 101-level thought that needs to go into a framework for deciding what your opinion of the situation is.</p>

<p>First off, \"piracy\" in the software sense translates to \"unauthorized copying\" if you want to be a bit more pedantic about it. If we look at what DMCA, SOPA et al attempt to regulate, piracy includes, but isn't limited to distributing copyrighted works for profit. To start with, here are some examples of piracy in no particular order:</p>

<ul>
  <li>posting <a href=\"http://quintela.deviantart.com/art/Zelda-fan-art-108197853\">fan art of characters you don't own</a> on a third party service</li>
  <li>selling <a href=\"http://www.thestar.com/article/561408\">homemade copies of commercial movies</a></li>
  <li>non-commercially <a href=\"http://www.youtube.com/watch?v=N1KfJHFWlhQ\">creating and posting original content that incidentally features copyrighted material</a></li>
  <li>non-commercially creating and posting <a href=\"http://www.youtube.com/watch?v=Pui0UzAFCJg\">remixed content that centrally features copyrighted material</a></li>
  <li>hosting a for-profit site whose primary use is hosting copyrighted content, or linking to torrents of copyrighted content</li>
  <li>selling <a href=\"http://en.wikipedia.org/wiki/Another_Hope\">original work featuring characters and settings you don't own</a> without the original authors' permission</li>
  <li><a href=\"http://thepiratebay.org/\">providing links or references to copyrighted material</a >or to sites which enable copyright infringement (which means that this particular page is actually engaging in piracy, we'll get back to that later)</li>
  <li>using <a href=\"http://boingboing.net/2009/10/06/the-criticism-that-r.html\">copyrighted material for the purposes of criticism</a></li>
  <li><a href=\"http://www.mtv.com/news/articles/1471036/riaa-sues-four-college-students.jhtml\">copying a music CD you own onto a private computer network</a></li>
  <li>hosting <a href=\"http://www.reddit.com/\">user-submitted content and/or links</a> which may include unauthorized copies of commercial content</li>
</ul>


<p>I'm not making a value judgment on which of the above is ok and which isn't, by the way, and you shouldn't either<a href=\"#foot-Tue-Dec-27-174847EST-2011\" name=\"note-Tue-Dec-27-174847EST-2011\">[3]</a> if you hope to build a working understanding of piracy as it applies to copyrighted works. First off, with so many examples, lets try to extract some principles so that we can figure out how the concept is structured. Based on the above, the different examples, all of which are technically piracy, vary along at least 5 axes: commercial/non-commercial, public/private, incidental/central, singular/numerous, direct/transformitive. Note that none of these are binary either/or situations; they're all on a continuum.</p>

<p><b>Commercial vs. Non-commercial</b> seems fairly straightforward; is the intent behind the copy to make money or not? It's not that cut and dried though. Copying something onto physical media takes money, and so does hosting a web server. So does recouping that cost count as a commercial venture? This is actually a stumbling block that <a href=\"http://www.youtube.com/watch?v=__fALdvvcM0#t=44m24s\">Linux development hit early on</a>; some people wanted to distribute the operating system, but the initial license forbade accepting money in return. Those would-be distributors contacted Linus about this and pointed out that even though they don't want to charge for the OS itself, the CDs they needed to use cost money, and it took time to produce them. Linus switched to the GPL2 as a result, and this sort of semi-commercial sharing (along with fully <a href=\"http://www.redhat.com/\">commercial distribution</a>) is now perfectly legal.</p>

<p>On one end is \"no money or goods change hands in compensation for the shared copy\" (think exchanging mix-tapes or posting content on Reddit without actually selling anything), on the other is \"I'm making more money the more copyrights are infringed\" (think the DVD copying organization, or an <a href=\"http://www.megaupload.com/\">advertising-supported model of file-sharing</a>)</p>

<p><b>Public vs. Private</b> is more obviously on a continuum based on that example. On one end is something like \"copying a CD or DVD you own onto your iPod\", on the other is \"Put it on the Pirate Bay\", and between the two of them are networks of varying privacy ranging from your own family LAN, to a University-only network to a <a href=\"http://www.4chan.org/\">small-esque online community</a>.</p>

<p><b>Incidental vs. Central</b>; is the entire point of the copy the copyrighted material (as in the example of fan art), or is the point something else entirely and the copyrighted material happens to be there (as in the example of <a href=\"http://www.youtube.com/watch?v=N1KfJHFWlhQ\">the first steps video</a>)? A decent test for this is: if you strip out any questionably violating material, would the media still be interesting to its target audience?</p>

<p><b>Singular vs. Numerous</b> is perhaps the most obviously measurable; how many infringements were there? At one end is making one copy of a music CD to put onto your own music device. At the other is making a few hundred thousand copies. Of course, this is made more ambiguous when you consider how digital technology actually works. In the technical sense, a new copy of a YouTube video is produced every time someone views it (even though the original poster only actually produced one copy; the upload from their computer to the YouTube server). Who takes the heat for the additional copies created when the video is viewed? Is a viewer more guilty when they use a service like <a href=\"http://keepvid.com/\">keepvid</a> to download the video rather than streaming it even though the same number of copies are created either way? The technical aspects of the implementation really begin to matter if the law assumes that all copies are equally infringing.</p>

<p><b>Direct vs. Transformitive</b> is obviously a continuum, but not very easy to measure. If you make a copy of a DVD, that's direct, but how much of a change can actually transform that media into a new work? I'm biased here, having gone through design school and come out the other end, so I'll only point out that <a href=\"http://www.youtube.com/watch?v=e0jjXTEqQP4#t=00m25s\">merely obstructing pieces strategically</a> changes the audience reaction. By the time you get to fan art/fic, entirely new works merely using existing settings and character names, it seems fair to claim that we should at least reflect on whether <a href=\"http://en.wikipedia.org/wiki/Fair_use\">Fair Use</a> might apply to the act of piracy in question.</p>

<p>So those are the axes on which piracy is currently defined. I should note that, according to related laws<a href=\"#foot-Tue-Dec-27-191213EST-2011\" name=\"note-Tue-Dec-27-191213EST-2011\">[4]</a>, all of these things qualify as piracy (and therefore constitute content that a website might get taken down over), even though only some of them are things which most humans would agree is immoral. There <i>isn't</i> an idea of degree or fair use inherent in the process of a DMCA takedown, or the upcoming SOPA takedowns, and in general the onus is on the accused to fight the accusation rather than on the accuser to prove harm. <code>Is this piracy? [ ] yes [ ] no</code>, and if <code>[x] yes</code>, it's criminal so take it down. Which should at least illustrate why I think it's important for people to understand the terms.</p>

<p>Many of the things we call \"piracy\" today are things that were considered either free or fair uses as recently as 20 years ago, many didn't exist as recently as 10 years ago, some were illegal then but probably shouldn't be anymore as a result of technological advancements, and finally some were and continue to be both unethical and illegal.</p>

<p>Now I hope you've been paying attention, because here comes the curveball.</p>

<h3>Do you support piracy?</h3>

<p><b>Richard Stallman:</b> Attacking ships and killing the entire crew to take the cargo is very bad. Now, if you mean sharing, of course you should share. Sharing is good.</p>
<p><b>Sony/RIAA/MPAA/et al:</b> No, all pirates should be executed (or at least fined their life savings and prevented from going near a computer ever again.)</p>
<p><b>You:</b>[your answer here]</p>

<p>I hope you can see how both of the extreme stances are a bit ridiculous, and that a nuanced view needs to prevail if we're going to continue this decade with any semblance of freedom. And if we refer to the thought framework I proposed earlier, it's fairly obvious <i>why</i> each of the extreme views are ridiculous.</p> 

<p>It is not ok to take the output of others' creative work without their permission and distribute it for your own profit without sharing any of the proceeds<a href=\"#foot-Tue-Dec-27-221721EST-2011\" name=\"note-Tue-Dec-27-221721EST-2011\">[5]</a>. That sort of activity is not sharing, and probably should be a criminal act. The people who do this are spiritual descendants of the original book pirates; the guys who would set up a press to run off a few thousand Dickens or Twains and sell them to line their own pockets without supporting the original writers. That's one of the few forms of copyright infringements that you can call \"theft\" without me getting pissed off at you about the implications. There is clear harm being done to the author and legitimate publishers, there is money being made, the work is not transformitive, there are multitudes of copies, those copies are public, <i>and</i> the copyrighted work is central to the exercise. Lock those fuckers up.</p>

<p>It <i>is</i> ok to take copyrighted works that you've purchased and copy them as many times as you like for personal use. You should be able to copy your CDs onto your DVDs and onto your iPods and onto your computers, and you shouldn't have to fear getting arrested and being forced to prove the legitimacy of your copies over that. You should be able to make a backup of your entire hard drive for later restoration, including all copyrighted works present on that hard drive.</p>

<p>You also should be able to post snippets of copyrighted works for educational and critical purposes, and that cuts to the point I touched on earlier about how this page can itself arguably be considered piracy. In order to semi-intelligently discuss pirate sites like <a href=\"http://thepiratebay.org/\">The Pirate Bay</a>, <a href=\"http://www.youtube.com/\">YouTube</a> and <a href=\"http://www.deviantart.com/\">DeviantArt</a>, I have to link to them. The discussion wouldn't be nearly as enlightening if you had to imagine how these sites worked based on my vague descriptions, but the act of linking connects you to these tools that you can potentially use to pirate media. The linking question is particularly relevant to sites like The Pirate Bay, which indirectly make money off of copyright infringement, but host none of the files. Conceptually, what's happening is that TPB is keeping a list of files on peoples' private computers, and handing you directions to them when you ask. If you <a href=\"http://thepiratebay.org/torrent/6896084/Debian_Plus_XFCE_i686_(Installable_Livecd_with_multimedia)\">torrent something</a>, they're not involved at all after the introductions; the data is moving directly between you and some individuals at the other end.</p>

<p>It's probably this last kind of piracy that's prompting bills like SOPA; peer to peer sharing via torrents can really only be regulated by monitoring all communications on the internet ever, checking whether they contain copyrighted content and stopping them if they do. That sounds like a bad thing to me, but ultimately it'll fall on the public and public officials to decide whether an end to piracy is worth setting up the perfect world-wide surveillance state, criminalizing cryptography again, and giving up the fair use protections that let them discuss piracy intelligently. Hopefully, that'll be a no, but even if it isn't (or you don't think it should be) you should now be equipped to tell me why without resorting to \"why do you support stealing?\" like a trained parrot.</p>

<hr />
<h5>Footnotes</h5>

<p>1 - <a href=\"#note-Tue-Dec-27-150940EST-2011\" name=\"foot-Tue-Dec-27-150940EST-2011\">[back]</a> - No pun intended there. Seriously.</p>

<p>2 - <a href=\"#note-Tue-Dec-27-151156EST-2011\" name=\"foot-Tue-Dec-27-151156EST-2011\">[back]</a> - <a href=\"http://www.pirateparty.ca/\">In Canada too</a>, by the way.</p>

<p>3 - <a href=\"#note-Tue-Dec-27-174847EST-2011\" name=\"foot-Tue-Dec-27-174847EST-2011\">[back]</a> - Yet</p>

<p>4 - <a href=\"#note-Tue-Dec-27-191213EST-2011\" name=\"foot-Tue-Dec-27-191213EST-2011\">[back]</a> - Both ones that <a href=\"http://en.wikipedia.org/wiki/Digital_Millennium_Copyright_Act\">are in effect</a>, and ones that are still <a href=\"http://en.wikipedia.org/wiki/Stop_Online_Piracy_Act\">being discussed</a>.</p>

<p>5 - <a href=\"#note-Tue-Dec-27-221721EST-2011\" name=\"foot-Tue-Dec-27-221721EST-2011\">[back]</a> - This is a matter completely separate from whether it's wise for a creative worker to grant that permission. I'm not getting into that argument today, but <a href=\"https://github.com/Inaimathi\">most of my code</a> is available under <a href=\"http://en.wikipedia.org/wiki/MIT_License\">MIT</a>/<a href=\"http://www.gnu.org/licenses/gpl-2.0.html\">GPL</a> licenses and <a href=\"http://inaimathi.deviantart.com/\">all my illustration</a> work is <a href=\"http://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, so you can probably infer what side of that argument I'm on.</p>
"))
((5202 3723 564635000) :INSERT (65 :POSTED 3534210000))
((5202 3723 564639000) :INSERT (65 :TAG :COPYRIGHT-BULLSHIT))
((5202 3723 564641000) :INSERT (65 :TAG :HASKELL))
((5202 3723 564643000) :INSERT (65 :TAG :PROGRAMMING-ENVIRONMENT))
((5202 3723 565080000) :INSERT (66 :TITLE "Passing Notes"))
((5202 3723 565088000) :INSERT (66 :FILE "passing-notes.html"))
((5202 3723 565092000) :INSERT (66 :EDITED 3610022331))
((5202 3723 565095000) :INSERT
 (66 :BODY
  "<p>So here's how you can pass messages to each other without your parents<a href=\"#foot-Mon-Jan-02-232529EST-2012\" name=\"note-Mon-Jan-02-232529EST-2012\">[1]</a> reading them.</p>

<h2>Step 1: Get Some Friends and Computers together</h2>

<p>I can't help you with this. You need some computers<a href=\"#foot-Mon-Jan-02-233301EST-2012\" name=\"note-Mon-Jan-02-233301EST-2012\">[2]</a> and you need some friends to talk to, otherwise why would you be passing messages?</p>

<h2>Step 2: Get GnuPG</h2>

<p>This should be pretty simple. If you're on Debian/Ubuntu type</p>

<pre>apt-get install gnupg</pre>

<p>If you're on Windows, you'll need to install <a href=\"http://cygwin.com/install.html\">Cygwin</a> with the gnupg package or <a href=\"http://gpg4win.org/\">gpg4win</a>, if you're on OS X, you'll need to get <a href=\"http://www.gpgtools.org/\">GPGtools</a>.</p>

<h2>Step 3: Make some keys</h2>

<p>Each of you should create a set of keys. Do that by typing</p>

<pre>gpg --gen-key</pre>

<p>GnuPG will then give you a menu that looks like this:</p>

<pre>gpg (GnuPG) 1.4.10; Copyright (C) 2008 Free Software Foundation, Inc.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Please select what kind of key you want:
   (1) RSA and RSA (default)
   (2) DSA and Elgamal
   (3) DSA (sign only)
   (4) RSA (sign only)
</pre>

<p>Accept the default by hitting <code>enter</code><a href=\"#foot-Tue-Jan-03-002304EST-2012\" name=\"note-Tue-Jan-03-002304EST-2012\">[3]</a>. It will then ask you</p>

<pre>RSA keys may be between 1024 and 4096 bits long.
What keysize do you want? (2048)</pre>

<p>Don't accept the default here, take the longest possible by typing <code>4096</code> and hitting <code>enter</code>. Next, gpg will ask when your key should expire. You can either specify days, weeks, months, years or accept the default (never expire). It's a balancing act; the more often you get new keys the more secure they will be against brute-forcing. On the other hand, each time you change your key, you need to send the new one to each of your friends and they have to remember to use the new one for passing you notes. For now, just take the default (gpg will ask for confirmation, so type <code>y</code> and hit <code>enter</code>). Next, fill in your name, email and comment and confirm them by typing <code>o</code> and then <code>enter</code>.</p>

<p>Next, enter a pass phrase. It can have spaces and it can be fairly long. Pick something easy to remember; a favorite quote or maybe a few lines from a song you like.</p>

<p>This next part may seem a bit weird, but gpg actually needs you to do some other stuff on the computer. Anything you like, but actually do things. Compose an email, check your favorite news aggregator, do some drawing, hit your head on the keyboard, kick the mouse around for a while, whatever you need to do. It may occasionally ask you to keep at it because you're not a fast enough typist with messages like</p>

<pre>Not enough random bytes available.  Please do some other work to give
the OS a chance to collect more entropy! (Need 148 more bytes)
..............+++++</pre>

<p>Eventually, it'll give you back control of your terminal, and at that point your key has been created. The hard part is done.</p>

<h2>Step 4: Share Your Keys</h2>

<p>Ok, get those friends that I told you to have ready.</p>

<p>Each of you should run the command</p>

<pre>gpg --armor --output your-name.txt --export your-name</pre>

<p>(<code>your-name</code> should be the name you typed in as part of your information in <b>Step 3</b>). <code>your-name.txt</code> is a text file that should look something like</p>

<pre>-----BEGIN PGP PUBLIC KEY BLOCK-----
Version: GnuPG v1.4.10 (GNU/Linux)

mQINBE8Ck38BEACjcS8S+F3KgQWNFNPNkQcrWcwlc8Y+3xN7pPgaS5a6+nl9MvrE
VFrj7HN528tGa+o6ztX00u4EOFJDrCFyIwVmPxEIw1xEMvl5J4lZDNdXyP96+09R
xuSUxN0Jc7TNKAr7WMtNovYKsr6ptOVexAFrpg5vH+iBZam1DhljcUFABAmy77s5
UD60L6/hDGdqtnFG5DLe3hoFY8j+2ncG4Y8DO+ivqOPEGUHhABGOg2QCv2DWMCkw
wzdx22ptWBqijsohZyy3VEHTHpns4VgD+f58st7ljqJBCVbXG6uv0E7lbDoYE0Lr
faupKGSlVdkaxJMMkzd4Dy/5piWetGYG1tEpvBgTOv18DNEYJvtBwILQG8vIFfer
vvB2JPb5KSHgs8mxQ4q2NGmxWF7T7mZ9Aowt64ltX5qazXJvFHQSXjp21Hr2J/nf
PBLSo1Nonp5pMekKonXj5mZuRNqrvG1MGtPKvI9pASQiWhhm1HK3+o+Hf2a+JbgO
MyyKr1KkRFMqUKg7G1mye55YliRVZUXm2r9qEVxNhQCeuKYq5JbGTMTzzr9UDBQL
0Ha8L9uxG+8muGV3m5bAq2MCZoYYKl6PxEgGI1HgKPUpj+CavrZ9MvNMiaHJLudh
ocP5j6XzlAniOH/7NvY87C+ggV+Ivrz6ZA+7Ih1pgk+A8I9dt2bQfOIGOwARAQAB
tDZpbmFpbWF0aGkgKFRoZSBLZXkgb2YgSW5haW1hdGhpKSA8aW5haW1hdGhpQGdt
YWlsLmNvbT6JAjgEEwECACIFAk8Ck38CGwMGCwkIBwMCBhUIAgkKCwQWAgMBAh4B
AheAAAoJEIoT8Q1crcVewcoP/2qRtMjhdCGTwL3tbV55hcXKmPLAQb5UsHL3xHJN
W62Z0zr354CpGNWjgTQ+Lf4Gv5WUMnfSR7VM48akkR5EvUwvsNhjuBeQ+kThjFib
l6xitbvxGRt/K/au4eGmlO2Xmcqm1JigGW8xXH2Gq/1EmHhDGBnE07mieP5g3K0R
XaJwbaCp5zG3z96sK8aVoNwAYqXZoZpotXQHGfiNU4AU4ZggT7lx2AGQ/kbCaPZ+
toyQTJZh95s3FCK9m8VB30KXVJBUyOg7jqqDaQxCwsXRMzK3FHnYVmLkPETVdnSK
d6bmQxcj9BLdNT8IChhInOIb/VTiBLWNDJ1SD89mzV+tWDj1CN6/9uc0yARWXQSL
rHndXZ8nbhZ9PbDEOzvG6w2R8jQ0E4Q3GLfe6yjrGOrVMG9BfUl8zbOdsIWXtrXR
34fp/w1PcnImSasYG5AtsN702LdLCxCWlf1VYKSknfnbZmL70DKVoDG4yTgjJXJc
JEdKhPzxXWUC84MANoOOvQ8nlYakI4TOlywbqScf2g+AxtjgHoNT9/JbEG0ctjIh
My6fCY3UUnfCiRjRdH7YdIPk3s3/K1i7h5FqFXzW0Xu1s4OL9KNkdtSzTI+QLM0L
Aqu7UrM2s1h7IXi/sC9Er+hNugfaPUXsgE/bncP0GywJ33zMn+klFOE+/TQeH6LS
X9YvuQINBE8Ck38BEACy3/UolznuuZqmzMLsxdfpKFZ1uxs6TlIeM0RaMXMzJau5
ho+00d1PLlwsjLSXONSS6dgd3nmiXIYAa6JS8NPlSeb1zS1rDND0y8iGL6MfgIgT
5z9yV9SYlLsc+ihPTfClUo6nqh5roMKgkBjJ32IoDK06zB/MT5ESvmV9Rb45JBel
QhEbMvIH9eCT6tDbwnkWoXwzcXYc6EM1HSyAedTKJOP+7RUljdIbwxGd/6JfGKA2
pJ7ReCVvdX1iU8dGD4YXoaDKiHmCPsONKYUOZgtaInwAHprUQTa/P67ZYtgS2+6E
WboW30vTgfr+GmzkdEfk/jDLXAK7Hck04P9pZs/TBjPLyXPuZnu2ap5RDK+/NIXc
CA0ukz7MA+MGjLmRSY05YW7dNvKxN2CYSk7n7v0eqD+9knHj5bRvfthgdws1edte
nHLKe88E+xPQDrAyzlOkFBOnVIFHZ/nn9tlDu4q8qHjO+ouOQu4/od5RcLTY4xQm
zC8A5aIS/kOzSX4wf/RZ97YNXzNzTeXu5xc1QdmSM6vgvJQ/RC3EARV3fQuI9FaA
de7w8DV7MLgXn81PLlHY98mm54JVXqNOKjUnVV2gReyDL2H3YqCzlecr0K/gMGet
NiQH+Sq80xiVd5IzkFlZMN6mdx/Ppz6nLdXZeq3IdgAPdkpXBg4BdzTxl4t5nQAR
AQABiQIfBBgBAgAJBQJPApN/AhsMAAoJEIoT8Q1crcVef+0P/iPUiEQM3oKha2ow
l57WsYgsmsYdLBx/M7WGolfUk+YMdkJV9DZbh8YW+7zBRmGHAu9g9jvpTGug1oGM
Jn5nzq6kgr+jfGhkxEOoW3T+SmbVdwia13ZG2lzyXAQRIBqJ1vYJ7FBFuluo0iG3
A7r2RchOInsYpy9+0/oKf/M/llIajURSkAafoIeeNqLPbmVxWeXvoBLSNEWJ74Ix
PmIAUGlm/O7WFREK5EjoGSRRJ/jqtwdacvs31dGLvQpVxXQAhfsVaBIyHSOGZmN1
wM+xUKRyD3bocqeijlo6FpInB0tz761XOmttS2HP4lbxDM/EOWXv1+PIqcy3TAmO
rUhXObbm1JblDgudZUh1XHcM0DJDZcl87+9qHj9tecRB2il1f7gUM7+R6qxAok+p
gBL6RVSHRabzgzEJscYc1Xylev7PNRitjSFG9KlW91SXc6FHITz57WcrsmvdMjfg
FwLcsAOzbeHn6t+81b46w4aP7oeNyZaCpYujRqm6KXcXa8/NtydeBn+ZNQsfAQXM
BUwLXJzEfosUZ4WSzBeiivxQi7hx7IBq86Xpy7TNGFW19uTOhMa0ThEVZU2ROzlI
pbnBARL2Lt7amYSOfG4oSY0jafGESgNyget+KdA+Rl0oy/6KsF5cD+f2gKWEhwX9
PzbGgzGART8EBfSEbML6gOgvyXC3
=n+lE
-----END PGP PUBLIC KEY BLOCK-----
</pre>

<p>It won't look exactly the same, yours will be different, but it will be about that wide and surrounded by the <code>--- PUBLIC KEY BLOCK ---</code> tags. That's your public key. Give it to your friends and get theirs. It doesn't matter how; either bust out the USB sticks or hop on a network and use <code>scp</code> or just paste that text to your Linked-Book-Space page or personal site. Each of you should get the key text files and run</p>

<pre>gpg --import your-friends-name.txt</pre>

<p>for every key you have. Once that's done, check that you have all your friends' keys imported by typing <code>gpg --list-keys</code> and hitting <code>enter</code>.</p>

<h2>Step 5: Send A Message</h2>

<p>Type up your message in a text file (we'll call it <code>message.txt</code>, but it can be any type of file) and then run</p>

<pre>gpg --output message.gpg --encrypt --armor --recipient your-friend --recipient your-other-friend --recipient and-so-on message.txt</pre>

<p>Here's what a text file containing \"something something dark side\" looks like after it has been encrypted.</p>

<pre>-----BEGIN PGP MESSAGE-----
Version: GnuPG v1.4.10 (GNU/Linux)

hQIMAw1KmAJVwvKhAQ//ZZf/xMd9jSW0XDX1s5uVQB39XUQq/OGMBFZN1Dk1WMbA
zZFShccV44X8NSAJu0h5S1PCdPkgQAzjecoScya9IVnSQVeyGgDP5dv7ZU4KqQQS
Pacd5J0u0BbLrHaIxSfCwchLofwGxlt52m9lAMAzlTnC4hEGxkwqo1QlM3PZZrKY
5P8abtVIv2VZXDTaDBgm1Y9KuFRrGhJtvHG8GHsg5zLuO6+gTZG6TC3F/BM5BUZZ
m0KBc8ZbztVmYbI6w6qm24M2MHExQd5tHFCx1VS51kOJ6gRg25XOFHHi8E/+F92A
bFUSh+/ZAvuPTBkjIATNI5rri7xHb+0BU1GHVSDAV0DUkI0GDMy05Hddrt/G7ORi
dsT+7BK/WipFAWpERevW65ZjaiV+sQHfj/ErjcnYV1hjRWqKJdOp4jdHROQO8ZUD
HuB6iw93i0Zo4UUb71GzptEigUriBCoRbb0q5T2cXsen8YKVXdaDr9+MTiQd8lqr
vaO4Wc/BiEkVecI9X0N63aGEoVRLLNsmBlnJGxTmOD1+WfwI1e4xlA6F5dR80nyr
T2ZuFuvhOxtSUIvWw3nb++YT0Z6hzTgD6JzffDySdBXTSozDYoFtRV34+VhD3CS0
LCVCF3ZVU+4c/Yiv72BVB1V+bJXN9BR6rmAFDTNtjnlWdubdwf8eFTMXlbvc6t7S
XAExmTYEcONMmjYG2rreIA97/6tbIrSMeWD2d3n66mLkpI8lvJMaTsBh0tS21NQ2
/Z0ixQK6OH7Vz++qmFC3sCtLKT6U8zVFtEFtLRlGV1/StKF8tC5ygMPEfewC
=MvOO
-----END PGP MESSAGE-----
</pre>

<p>You can now send this to everyone. Email, Facebook, reddit, your blog, a random comment section, anything goes. Only people with the keys you specified as <code>--recipient</code>s will be able to decrypt it.</p>

<h2>Step 6: Read A Message</h2>

<p>If you get a block like the above from one of your friends, save it to a text file called <code>encrypted.gpg</code><a href=\"#foot-Tue-Jan-03-010358EST-2012\" name=\"note-Tue-Jan-03-010358EST-2012\">[4]</a> and run</p>

<pre>gpg --output decrypted.txt --decrypt encrypted.gpg</pre>

<p>And <code>decrypted.txt</code> will now contain the note your friend passed you in plain text that you can read. Of course, anyone can read it now, so if it discusses anything you really want to keep secret, you should run <code>shred</code> on it once you've read it.</p>

<h2>Boss Fight</h2>

<p>Your homework is: use the comment section of <a href=\"http://armstrongonsoftware.blogspot.com/\">Joe Armstrong's Blog</a> to send a message to a friend that only the two of you can read. If you're feeling adventurous, send it to all of the friends you got together in <b>Step 1</b></p>

<h2>Bonus Stage</h2>

<p>Sending your friends messages that your parents can't read is nice, but if they catch you, they can still ground you until you decrypt it for them<a href=\"#foot-Tue-Jan-03-011207EST-2012\" name=\"note-Tue-Jan-03-011207EST-2012\">[5]</a>. Ideally, you'd send your friends messages that your parents or teachers <i>wouldn't even know are messages</i>. To do that, you need a second program called <code>steghide</code>. On Debian GNU/Linux, just type <code>apt-get install steghide</code> as root. Cygwin supports this package too, but I have no idea how to get it on OS X so you Mac users are on your own here.</p>

<p>Get an image, like this one</p>

[image]

<p>encrypt your message, and then run</p>

<pre>steghide embed -ef message.gpg -cf not-sure-if-secret.jpg</pre>

<p>You will be asked for a pass phrase, leave it blank for now, but you should really agree to one with your friends and use it to protect these. You can now send your friends that image via email or <a href=\"http://imgur.com/\">imgur</a>without raising suspicions (unless your parents are reading this blog). When they get it, they can run</p>

<pre>steghide extract -sf not-sure-if-secret.jpg</pre>

<p>(and enter the pass phrase if you set one) to get your encrypted message and then decrypt that to read what you sent them. You can use steghide to hide files in images or music that you can then send without raising suspicions.</p>

<h2>Secret Boss Fight</h2>

<p>Send your mailing list one of those stupid <code>Fw: Fw: Fw: Fw:</code> joke mails, but embed a secret message to one of your friends in the first picture. Ideally, that friend should be one of the people you send the email, otherwise you're needlessly spamming.</p>

<h2>Secret Boss Fight -- Stage 2</h2>

<p>Find a forum/reddit thread somewhere and carry on a steganographic, encrypted conversation about hipster ninjas with two or three of your friends.</p>

<h2>Secret Boss Fight -- Final Stage</h2>

<p>Sneak onto your friends' computer while they're in the washroom and change their desktop background to a steganographic message. Chuckle about is constantly. When asked \"What's so funny\", burst with laughter and run out of the room with your stuff.</p>


<hr />
<h5>Footnotes</h5>

<p>1 - <a href=\"#note-Mon-Jan-02-232529EST-2012\" name=\"foot-Mon-Jan-02-232529EST-2012\">[back]</a> - Or teachers, or political enemies, or competitors, what-have-you</p>

<p>2 - <a href=\"#note-Mon-Jan-02-233301EST-2012\" name=\"foot-Mon-Jan-02-233301EST-2012\">[back]</a> - If you don't have access to your own computer, you can use a usb to run <a href=\"https://wiki.ubuntu.com/LiveUsbPendrivePersistent\">Ubuntu live</a>, and merely plug it into whatever computer you do actually have access to.</p>

<p>3 - <a href=\"#note-Tue-Jan-03-002304EST-2012\" name=\"foot-Tue-Jan-03-002304EST-2012\">[back]</a> - If all of your friends can be trusted to keep secrets, you might opt to go with a <a href=\"http://www.gnupg.org/gph/en/manual.html#AEN185\">symmetric cypher</a> instead. The process of sending and receiving messages is more or less the same, but there's only one key that the entire group shares rather than there being two keys per person (a public and a private). The advantage is that there's less to keep track of. The downside is that if anyone finds out your key, <i>all</i> your notes can be cracked rather than just those sent to the person who let their key get compromised.</p>

<p>4 - <a href=\"#note-Tue-Jan-03-010358EST-2012\" name=\"foot-Tue-Jan-03-010358EST-2012\">[back]</a> - It doesn't actually need to be called that, just an example.</p>

<p>5 - <a href=\"#note-Tue-Jan-03-011207EST-2012\" name=\"foot-Tue-Jan-03-011207EST-2012\">[back]</a> - They probably won't just ask for your key because they'd have no idea what to do with it.</p>
"))
((5202 3723 565240000) :INSERT (66 :POSTED 3534469200))
((5202 3723 565245000) :INSERT (66 :TAG :IDEA-PEELING))
((5202 3723 565249000) :INSERT (66 :TAG :PROGRAMMING-ENVIRONMENT))
((5202 3723 565252000) :INSERT (66 :TAG :SECURITY))
((5202 3723 565537000) :INSERT
 (67 :TITLE "How Close can you get to a Lisp Machine?"))
((5202 3723 565546000) :INSERT
 (67 :FILE "how-close-can-you-get-to-a-lisp-machine.html"))
((5202 3723 565550000) :INSERT (67 :EDITED 3610022331))
((5202 3723 565553000) :INSERT
 (67 :BODY
  "<p>Aside from <a href=\"http://c2.com/cgi/wiki?OpenGenera\">the obvious</a>, I mean.</p>

<p><a href=\"http://www.clisp.org/clash.html\">Here's</a> what I've been playing with for the past little while.</p>

<p>Those instructions still work surprisingly well, given that they were published all of 11 years ago. Here's what I did to replicate them</p>

<pre>apt-get install clisp x-window-system
wget http://beta.quicklisp.org/quicklisp.lisp
<span style=\"color: #7a378b;\">echo</span> <span style=\"color: #8b2252;\">\"/usr/bin/clisp\"</span> &gt;&gt; /etc/shells</pre>

<p>I then installed <code>quicklisp</code> and ran <code>(ql:add-to-init-file)</code>, then manually added the following to <code>.clisprc</code>:</p>

<pre>(ql:quickload (list <span style=\"color: #7a378b;\">:cl-fad</span> <span style=\"color: #7a378b;\">:cl-ppcre</span> <span style=\"color: #7a378b;\">:trivial-shell</span>))
(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">startx</span> () (execute <span style=\"color: #8b2252;\">\"/usr/bin/X11/xinit\"</span>))</pre>

and the following to my .xinitrc

<code>clisp -x <span style=\"color: #8b2252;\">\"(progn (ql:quickload (list :clx :cl-ppcre :stumpwm)) (funcall (intern \\\"STUMPWM\\\" :stumpwm))\"</span></code> <!-- \" -->

<p>After poking around for a little while and making sure everything worked approximately correctly, I ran <code>chsh</code> and set my shell to <code>/usr/bin/clisp</code>.</p>

<p>Performance-wise, it's surprisingly snappy given</p>
<p>a - <a href=\"http://www.pcmag.com/article2/0,2817,1625692,00.asp\">what it's running on</a> and</p>
<p>b - that there are at least 3 instances of <code>clisp</code> at work at any given time. It's a toy, but quite a quick and fun toy, actually.</p>

<p>Now, granted, the title is supposed to be taken with a grain of salt<a href=\"#foot-Fri-Jan-20-224430EST-2012\" name=\"note-Fri-Jan-20-224430EST-2012\">[1]</a>, but this still feels like it's approaching the target. What I've got running is a fully open system<a href=\"#foot-Fri-Jan-20-224505EST-2012\" name=\"note-Fri-Jan-20-224505EST-2012\">[2]</a> that implements most of its components in Lisp (the shell is Clisp, the WM is Stump and the editor is Emacs). I suppose I could also throw in <a href=\"http://common-lisp.net/project/closure/\">Closure</a><a href=\"#foot-Fri-Jan-20-230358EST-2012\" name=\"note-Fri-Jan-20-230358EST-2012\">[3]</a> and <a href=\"http://common-lisp.net/project/climacs/\">Climacs</a> as well, but I'm done playing for today.</p>

<hr />
<h5>Footnotes</h5>

<p>1 - <a href=\"#note-Fri-Jan-20-224430EST-2012\" name=\"foot-Fri-Jan-20-224430EST-2012\">[back]</a> - since I've never used an <a href=\"http://en.wikipedia.org/wiki/Lisp_machine\">actual LISP Machine</a> or even the <a href=\"http://www.advogato.org/person/johnw/diary/12.html\">Open</a> Genera <a href=\"http://collison.ie/blog/2008/04/lisp-machines\">System</a>. Incidentally, these links are here to remind me to look into it when I have a spare moment, so I'm not sure how much longer I'll be able to say \"never used 'em\".</p>

<p>2 - <a href=\"#note-Fri-Jan-20-224505EST-2012\" name=\"foot-Fri-Jan-20-224505EST-2012\">[back]</a> - Except that it uses b43-fwcutter for the wireless card.</p>


<p>3 - <a href=\"#note-Fri-Jan-20-230358EST-2012\" name=\"foot-Fri-Jan-20-230358EST-2012\">[back]</a> - As an aside, that meme-space is getting pretty crowded. To the point that I have to disambiguate in conversation. There's <a href=\"http://clojure.org/\">Clojure</a> (the language), <a href=\"http://ccl.clozure.com/\">Clozure</a> (the Common Lisp implementation) and Closure (the common-lisp based <a href=\"http://common-lisp.net/project/closure/\">browser</a>/<a href=\"http://www.cliki.net/closure-html\">html-parser</a>)</p>
"))
((5202 3723 565593000) :INSERT (67 :POSTED 3536024400))
((5202 3723 565596000) :INSERT (67 :TAG :COMMON-LISP))
((5202 3723 565600000) :INSERT (67 :TAG :PROGRAMMING-ENVIRONMENT))
((5202 3723 565916000) :INSERT (68 :TITLE "WebMote and \"Open\" software"))
((5202 3723 565924000) :INSERT
 (68 :FILE "webmote-quote-open-endquote-and-depression.html"))
((5202 3723 565929000) :INSERT (68 :EDITED 3610298799))
((5202 3723 565933000) :INSERT
 (68 :BODY
  "<p>This is going to be another three-part blog. Maybe 3.5, I'll see how it goes. You may want to leave after parts 1 or 2.</p>

<h3>web-mote</h3>

<p>I've been working on a tiny little utility to marginally improve my life in an almost insignificant way.</p>

<p>You've already heard the casual references to my \"media PC\", and you may have come to the conclusion that it's just a <a href=\"http://www.newegg.com/Store/SubCategory.aspx?SubCategory=124\">standard NAS</a> setup, but no. It's actually just a regular computer hooked up to my TV through a VGA and audio wire<a href=\"#foot-Wed-Jan-25-223836EST-2012\" name=\"note-Wed-Jan-25-223836EST-2012\">[1]</a>. About a week ago, the wireless keyboard I was using started chugging and finally gave out. Well, being that I mostly listen to music and watch ridiculous low-res videos in <code>mplayer</code>, why not just get a remote working? As it happens, I also had an old iPod touch lying around literally collecting dust since I stopped carrying a mobile music device with me. So I put the two together and hacked up a little remote control server for the computer. It basically just starts <code>mplayer</code> with <code>-slave -idle</code>, runs <a href=\"http://weitz.de/hunchentoot/\">Hunchentoot</a> out front and then passes along commands when I click on the various video links. I'm using it to watch some downloaded videos from <a href=\"http://thesciencenetwork.org/programs/the-science-studio/daniel-dennet\">the science network</a> as we speak. The only gap in the interface is that I can't control the actual TV the same way yet (so I still need to get up to change channels or up the output volume)</p>

<p>The code is up <a href=\"https://github.com/Inaimathi/web-mote\">at my github</a>, as usual. I just noticed that there's no license file, though.</p>

<p>Just a second.</p>

<p>Ok. Compiling and inserting that took almost as long as writing the actual code. There you have it, in any case. I don't seriously recommend you use this program until I've ironed out one or two things, but feel free to if you like. I definitely enjoy being able to control my media center from whatever HTML client I happen to have at hand.</p>

<p>Next step: figuring out how to <a href=\"http://superuser.com/questions/198709/cheap-simple-way-to-turn-tv-on-off-using-computer-and-or-windows-meda-center-rem\">control the TV</a> through wifi (though early research is not encouraging).</p>

<h3>fingerquotes open</h3>

<p>This was just sort of depressing.</p>

<p>I dunno, maybe it's not that big a deal to most people, but I'm depressed.</p>

<p>A good third to a half of my last weekend was spent researching ways of getting <a href=\"http://en.wikipedia.org/wiki/Genera_(operating_system)\">Open Genera</a> up and running, only to find out that \"Open\" doesn't quite mean what I thought it did in this context. Granted, the system was built back in the 80s, so I guess the word may not have had the same connotation, but I still got confused.</p>

<p>It's bizarre, because I honestly don't get the point of a closed-source Lisp system. The whole point is that the entire machine is there, open to pokes and prods at its various sources and definitions. Saying that it's not being released openly or freely is just ... I dunno, off. The message is so fundamentally incongruous with the medium that it seemed to come at me entirely out of left field<a href=\"#foot-Wed-Jan-25-234149EST-2012\" name=\"note-Wed-Jan-25-234149EST-2012\">[2]</a>. I guess that'll teach me to read the license first next time.</p>

<p>I still have my <a href=\"/article?name=how-close-can-you-get-to-a-lisp-machine.html\">ersatz lisp machine</a>, I guess. And I could do a bit of poking and hacking on <a href=\"http://common-lisp.net/project/movitz/\">Movitz</a> if I really wanted to. That'll have to hold me.</p>

<hr />
<h5>Footnotes</h5>

<p>1 - <a href=\"#note-Wed-Jan-25-223836EST-2012\" name=\"foot-Wed-Jan-25-223836EST-2012\">[back]</a> - Incidentally, the mediaphiles among you should refrain from telling me that I should be using HDMI instead. Enough of my friends tell me that already, and I could give a shit. I mostly listen to music and watch almost ridiculously low-res videos; there's a separate DVD player for the <a href=\"http://www.davidattenborough.co.uk/\">occasional high-def media</a> I watch.</p>


<p>2 - <a href=\"#note-Wed-Jan-25-234149EST-2012\" name=\"foot-Wed-Jan-25-234149EST-2012\">[back]</a> - Enough to delete the relevant article from my archives (sorry, to the people who linked to it already) and never speak of it again<a href=\"#foot-Wed-Jan-25-234332EST-2012\" name=\"note-Wed-Jan-25-234332EST-2012\">[3]</a>.</p>


<p>3 - <a href=\"#note-Wed-Jan-25-234332EST-2012\" name=\"foot-Wed-Jan-25-234332EST-2012\">[back]</a> - Except for here, obviously.</p>
"))
((5202 3723 565984000) :INSERT (68 :POSTED 3536456400))
((5202 3723 565988000) :INSERT (68 :TAG :BITCHING))
((5202 3723 565992000) :INSERT (68 :TAG :COMMON-LISP))
((5202 3723 566526000) :INSERT (69 :TITLE "The Lisp Shell Followup"))
((5202 3723 566534000) :INSERT (69 :FILE "lisp-shell-followup.html"))
((5202 3723 566538000) :INSERT (69 :EDITED 3610134954))
((5202 3723 566542000) :INSERT
 (69 :BODY
  "<p>So, I may have to backtrack on what I was saying earlier. Specifically, I called <code>clisp</code> a toy shell, and I called the machine I'm currently typing this on a toy machine. I did this because, having just installed it and spent a grand total of five minutes poking around, I assumed</p>

<ul>
  <li>it wouldn't run some programs properly</li>
  <li>my scripts would now be useless</li>
  <li>cd wouldn't work</li>
  <li>I'd lose tab completion on files</li>
  <li>there would be no gains to offset all the losses</li>
  <li>it would be a pain in the ass to use a regular shell when I hit the limits of <code>clisp</code></li>
</ul>

<p>It turns out that most of those don't apply. I did actually lose tab-completion when working with files, but that's it. Pretty much every program that I want to run typically<a href=\"#foot-Sun-Jan-29-015617EST-2012\" name=\"note-Sun-Jan-29-015617EST-2012\">[1]</a> works just as well from <code>clisp</code> as it does in <code>bash</code>, scripts run exactly the same as under a standard shell when you use <code>run-shell-command</code>, <code>cd</code> is actually a function defined in <code>clisp</code>s' <code>cl-user</code>, and when I need to run a regular bash for whatever reason <code>eshell</code> can pickup the slack.</p>

<p>There's also a few non-obvious things I gain to offset losing filename tab completion.</p>

<p>First off, I get to define helper functions at my command line. One situation I've already found this useful in is copying files off my previous computer. It's a fairly specific situation, because I didn't want to sync a complete directory, but rather surgically copy over some 12 or 13 irregularly named files. That would have taken 12 or 13 separate scp calls. In regular shell, I'd have to do something like write a script for it. Having an actual language available let me pull out my first trick</p>

<pre>&gt; (<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">cp-file</span> (file-name) 
    (run-shell-command (format nil <span style=\"color: #8b2252;\">\"scp inaimathi@other-machine:.emacs.d/~a .emacs.d/\"</span>)))

CP-FILE

&gt; (cp-file <span style=\"color: #8b2252;\">\"example.el\"</span>)</pre>

<p>This isn't specific to <code>clisp</code>, obviously. I assume that <a href=\"http://rbjl.net/43-use-fresh-ruby-as-your-shell\">any</a> language <a href=\"http://stackoverflow.com/questions/209470/can-i-use-python-as-a-bash-replacement\">shell</a> you use could pull the same trick. Still, having the ability to define helpers on the fly is something I occasionally wish I had<a href=\"#foot-Sun-Jan-29-015814EST-2012\" name=\"note-Sun-Jan-29-015814EST-2012\">[2]</a>.</p>

<p>Another thing that I imagine would work in any language shell, is an easier way of defining shell scripts. I wrote a <a href=\"https://github.com/Inaimathi/shell-ui\">little set of ui utilities</a> a while ago, one of which is <code>pack</code>, a translator for various archive formats so that I can write <code>pack foo</code> rather than <code>tar -xyzomgwtfbbq foo.tar.gz foo</code></p>

<pre><span style=\"color: #b22222;\">#</span><span style=\"color: #b22222;\">!/usr/bin/ruby
</span>
require <span style=\"color: #8b2252;\">'optparse'</span>
require <span style=\"color: #8b2252;\">'pp'</span>
require <span style=\"color: #8b2252;\">'fileutils'</span>

archive_types = {
  <span style=\"color: #8b2252;\">\"tar\"</span> =&gt; [<span style=\"color: #8b2252;\">\"tar\"</span>, <span style=\"color: #8b2252;\">\"-cvf\"</span>],
  <span style=\"color: #8b2252;\">\"tar.gz\"</span> =&gt; [<span style=\"color: #8b2252;\">\"tar\"</span>, <span style=\"color: #8b2252;\">\"-zcvf\"</span>],
  <span style=\"color: #8b2252;\">\"tgz\"</span> =&gt; [<span style=\"color: #8b2252;\">\"tar\"</span>, <span style=\"color: #8b2252;\">\"-zcvf\"</span>],
  <span style=\"color: #8b2252;\">\"tar.bz2\"</span> =&gt; [<span style=\"color: #8b2252;\">\"tar\"</span>, <span style=\"color: #8b2252;\">\"-jcvf\"</span>],
  <span style=\"color: #8b2252;\">\"zip\"</span> =&gt; [<span style=\"color: #8b2252;\">\"zip\"</span>]
}

<span style=\"color: #b22222;\">########## </span><span style=\"color: #b22222;\">parsing inputs
</span>options = { <span style=\"color: #008b8b;\">:type</span> =&gt; <span style=\"color: #8b2252;\">\"tar\"</span>, <span style=\"color: #008b8b;\">:excluded</span> =&gt; [<span style=\"color: #8b2252;\">\".git\"</span>, <span style=\"color: #8b2252;\">\".gitignore\"</span>, <span style=\"color: #8b2252;\">\"*~\"</span>] }
optparse = <span style=\"color: #228b22;\">OptionParser</span>.new <span style=\"color: #a020f0;\">do</span>|opts|
  opts.on(<span style=\"color: #8b2252;\">\"-e\"</span>, <span style=\"color: #8b2252;\">\"--exclude a,b,c\"</span>, <span style=\"color: #228b22;\">Array</span>,
          <span style=\"color: #8b2252;\">\"Specify things to ignore. Defaults to [</span><span style=\"color: #a0522d;\">#{options[:excluded].join \", \"}</span><span style=\"color: #8b2252;\">]\"</span>) <span style=\"color: #a020f0;\">do</span> |e|
    options[<span style=\"color: #008b8b;\">:excluded</span>] = e
  <span style=\"color: #a020f0;\">end</span>
  opts.on(<span style=\"color: #8b2252;\">\"-t\"</span>, <span style=\"color: #8b2252;\">\"--type FILE-TYPE\"</span>,
          <span style=\"color: #8b2252;\">\"Specify archive type to make. Defaults to '</span><span style=\"color: #a0522d;\">#{options[:type]}</span><span style=\"color: #8b2252;\">'. Supported types: </span><span style=\"color: #a0522d;\">#{archive_types.keys.join \", \"}</span><span style=\"color: #8b2252;\">\"</span>) <span style=\"color: #a020f0;\">do</span> |t|
    options[<span style=\"color: #008b8b;\">:type</span>] = t
  <span style=\"color: #a020f0;\">end</span>
<span style=\"color: #a020f0;\">end</span>
optparse.parse!
<span style=\"color: #b22222;\">##########</span><span style=\"color: #b22222;\">
</span>
<span style=\"color: #228b22;\">ARGV</span>.each <span style=\"color: #a020f0;\">do</span> |target|
  <span style=\"color: #a020f0;\">if</span> <span style=\"color: #a020f0;\">not</span> archive_types[options[<span style=\"color: #008b8b;\">:type</span>]]
    puts <span style=\"color: #8b2252;\">\"Supported types are </span><span style=\"color: #a0522d;\">#{archive_types.keys.join \", \"}</span><span style=\"color: #8b2252;\">\"</span>
    exit
  <span style=\"color: #a020f0;\">elsif</span> options[<span style=\"color: #008b8b;\">:type</span>] == <span style=\"color: #8b2252;\">\"zip\"</span>
    exclude = options[<span style=\"color: #008b8b;\">:excluded</span>].map{|d| [<span style=\"color: #8b2252;\">\"-x\"</span>, d]}.flatten
  <span style=\"color: #a020f0;\">else</span>
    exclude = options[<span style=\"color: #008b8b;\">:excluded</span>].map{|d| [<span style=\"color: #8b2252;\">\"--exclude\"</span>, d]}.flatten
  <span style=\"color: #a020f0;\">end</span>
  fname = target.sub(<span style=\"color: #8b2252;\">/\\/$/</span>, <span style=\"color: #8b2252;\">\"\"</span>)
  args = archive_types[options[<span style=\"color: #008b8b;\">:type</span>]] +
    [fname + <span style=\"color: #8b2252;\">\".\"</span> + options[<span style=\"color: #008b8b;\">:type</span>], fname] +
    exclude
  system(*args)
<span style=\"color: #a020f0;\">end</span></pre>

<p>So that was necessary in bash, and because shell scripts can't easily share data, the companion script, <code>unpack</code>, had to define almost the exact same set of file-extension-to-command/option mappings<a href=\"#foot-Sun-Jan-29-015954EST-2012\" name=\"note-Sun-Jan-29-015954EST-2012\">[3]</a>. If I'm using <code>clisp</code>, I could instead write</p>

<pre>(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">pack</span> (file-name <span style=\"color: #228b22;\">&amp;key</span> (type tar) (exclude '(<span style=\"color: #8b2252;\">\".git\"</span> <span style=\"color: #8b2252;\">\".gitignore\"</span> <span style=\"color: #8b2252;\">\"*~\"</span>))) 
  (pack-file (make-instance type <span style=\"color: #7a378b;\">:file-name</span> file-name <span style=\"color: #7a378b;\">:excluded</span> exclude)))

(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">pack-file</span> ((f tar.gz))
  (run-shell-command (format nil <span style=\"color: #8b2252;\">\"tar -zcvf ~@[~{--exclude ~a~^~}~]~a\"</span> 
                             (excluded f) (file-name f))))</pre>

<p>and be done with it<a href=\"#foot-Sun-Jan-29-020048EST-2012\" name=\"note-Sun-Jan-29-020048EST-2012\">[4]</a>. This is a similar, but more extreme version of the previous point. Instead of writing shell-scripts, I can now write functions, macros or methods. These are smaller conceptual units and deal with inputs more easily, letting me focus on expressing what I want the script to do. In fact looking at language shells this way makes it obvious that things like <code>optparse</code> are just hacks to get around the way that scripts accept arguments.</p>

<p>The last cool thing is to do with the package management. I could be wrong about this, but I don't think the Lisp notion of <code>in-package</code> exists elsewhere. So I can define a package like</p>

<pre>(<span style=\"color: #a020f0;\">defpackage</span> <span style=\"color: #228b22;\">:apt-get</span> (<span style=\"color: #7a378b;\">:use</span> <span style=\"color: #7a378b;\">:cl</span>))

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">install</span> (<span style=\"color: #228b22;\">&amp;rest</span> packages)
  (su-cmd <span style=\"color: #8b2252;\">\"apt-get install ~{~(~a~)~^ ~}\"</span> packages))

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">update</span> () 
  (su-cmd <span style=\"color: #8b2252;\">\"apt-get update\"</span>))

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">search</span> (search-string) 
  (cmd <span style=\"color: #8b2252;\">\"apt-cache search '~a'\"</span> search-string))</pre>

<p>where the <code>cmd</code>s are defined as something like</p>

<pre>(<span style=\"color: #a020f0;\">defmacro</span> <span style=\"color: #0000ff;\">cmd</span> (command <span style=\"color: #228b22;\">&amp;rest</span> args)
  `(run-shell-command 
    (<span style=\"color: #a020f0;\">if</span> args `(format nil ,command ,@args) `command)))

(<span style=\"color: #a020f0;\">defmacro</span> <span style=\"color: #0000ff;\">su-cmd</span> (command <span style=\"color: #228b22;\">&amp;rest</span> args)
  `(run-shell-command 
    (format nil <span style=\"color: #8b2252;\">\"su -c \\\"~a\\\"\"</span>
            (<span style=\"color: #a020f0;\">if</span> args `(format nil ,command ,@args) `command))))</pre>

<p>The issue I'd have with defining these in, for example a Python shell, is that I'd then have a choice. I could either <code><span style=\"color: #a020f0;\">import</span></code> the file and put up with typing out the name of the module at every invocation, or I could <code><span style=\"color: #a020f0;\">import</span> install, update, search <span style=\"color: #a020f0;\">from</span></code> and then hope that I don't have to define conflicting functions<a href=\"#foot-Sun-Jan-29-020437EST-2012\" name=\"note-Sun-Jan-29-020437EST-2012\">[5]</a>. In a Lisp shell, I can define it and load it and then do <code>(<span style=\"color: #a020f0;\">in-package</span> <span style=\"color: #7a378b;\">:apt-get</span>)</code> when I need to do a series of commands relating to installing new modules.</p>

<p>Now all of these, clisp-exclusive or not, are small syntactic fixes that work around basic shell annoyances. To the point that you're probably asking yourself what the big deal is. It's basically the same reason that macros are awesome; they get rid of inconsistencies at the most basic levels of your code, and the increased simplicity you get that way has noticeable impacts further up the abstraction ladder. The sorts of things that look like minor annoyances can add up to some pretty hairy code, and cutting it off at the root often saves you more trouble than you'd think.</p>

<p>I'll admit that tab completion on file names is a pretty big thing to lose<a href=\"#foot-Sun-Jan-29-020554EST-2012\" name=\"note-Sun-Jan-29-020554EST-2012\">[6]</a>, but the things I outline above are mighty tempting productivity boosts to my shell. To the point that I'm fairly seriously debating switching over on my main machine. Between Emacs, StumpWM/Xmonad and Conkeror, it's not really as if someone else can productively use my laptop anyway. Adding an esoteric shell really doesn't seem like it would be a big negative at this point.</p>


<hr />
<h5>Footnotes</h5>

<p>1 - <a href=\"#note-Sun-Jan-29-015617EST-2012\" name=\"foot-Sun-Jan-29-015617EST-2012\">[back]</a> - Including fairly complex CLI stuff like <code>wicd-curses</code>, <code>mplayer</code> and <code>rsync --progress</code>


<p>2 - <a href=\"#note-Sun-Jan-29-015814EST-2012\" name=\"foot-Sun-Jan-29-015814EST-2012\">[back]</a> - And now, I do


<p>3 - <a href=\"#note-Sun-Jan-29-015954EST-2012\" name=\"foot-Sun-Jan-29-015954EST-2012\">[back]</a> - Except for compression rather than expansion


<p>4 - <a href=\"#note-Sun-Jan-29-020048EST-2012\" name=\"foot-Sun-Jan-29-020048EST-2012\">[back]</a> - Defining methods for each archive type, and the appropriate class, obviously


<p>5 - <a href=\"#note-Sun-Jan-29-020437EST-2012\" name=\"foot-Sun-Jan-29-020437EST-2012\">[back]</a> - Or import another module that defines new ones with the same names


<p>6 - <a href=\"#note-Sun-Jan-29-020554EST-2012\" name=\"foot-Sun-Jan-29-020554EST-2012\">[back]</a> - And I'm going to put a bit of research into not losing it
"))
((5202 3723 566681000) :INSERT (69 :POSTED 3536715600))
((5202 3723 566688000) :INSERT (69 :TAG :COMMON-LISP))
((5202 3723 566692000) :INSERT (69 :TAG :PROGRAMMING-ENVIRONMENT))
((5202 3723 566696000) :INSERT (69 :TAG :SHELL))
((5202 3723 567084000) :INSERT (70 :TITLE "Smalltalk First Impressions"))
((5202 3723 567090000) :INSERT (70 :FILE "smalltalk-first-impressions.html"))
((5202 3723 567093000) :INSERT (70 :EDITED 3610299984))
((5202 3723 567097000) :INSERT
 (70 :BODY
  "<p>I've actually been meaning to get around to trying this out ever since <a href=\"/article?name=language-smackdown.html\">the Dynamic Languages Smackdown</a><a href=\"#foot-Wed-Feb-01-220959EST-2012\" name=\"note-Wed-Feb-01-220959EST-2012\">[1]</a>.</p>

<p>So, I dusted off Pharo, which has had at least one major release since I last checked it out.</p>

<p>This time, I didn't pull punches, finding as many practical examples and tutorials to run through as I could. This includes two for Seaside<a href=\"#foot-Wed-Feb-01-221359EST-2012\" name=\"note-Wed-Feb-01-221359EST-2012\">[2]</a>, the couple for Pharo proper, and a built-in tutorial named <code>ProfSteph</code> which you can run from the greeting screen.</p>

<p>So here are my first impressions<a href=\"#foot-Wed-Feb-01-221734EST-2012\" name=\"note-Wed-Feb-01-221734EST-2012\">[3]</a>; I'm sure they'll change as I learn more about the language (and I fully intend to learn more about it)</p>

<h2>It Passes The Compaq Test</h2>

<p>This thoroughly surprised me, because Smalltalk has a reputation for being brilliant and elegant but slow. I guess the people perpetuating this reputation mean \"relative to C\", because Seaside ran quite snappily off of a rather old machine with 256MB of ram. That was an \"M\". In fact, as I write this on that same ancient machine, I'm running Seaside in the background along with Slime and getting along perfectly well<a href=\"#foot-Wed-Feb-01-222417EST-2012\" name=\"note-Wed-Feb-01-222417EST-2012\">[4]</a>.</p>

<h2>It Has \"Source\" Control</h2>

<p>The word source is quoted because it's an image-based system, but a module called <a href=\"http://wiki.squeak.org/squeak/1287\">Monticello</a> basically does for Smalltalk what <code>git</code> would do for other languages. I wouldn't mention this, except that I remember thinking about it last time, and several other people at the Smackdown expressed similar concerns. So if your main excuse for staying away from Smalltalk is \"I don't want to give up source control\", you no longer have an excuse.</p>

<h2>Fantastic IDE</h2>

<p>And this is coming from someone who usually hates IDEs. This one actually fails to get in my way at most opportunities, provides useful information and completions when I need them, is intuitive <i>and</i> well documented internally and externally, and (most importantly) does not take longer than Emacs to load up<a href=\"#foot-Wed-Feb-01-224001EST-2012\" name=\"note-Wed-Feb-01-224001EST-2012\">[5]</a>. For those of you working cross-platform, it's also fully skinnable and comes with themes appropriate for the big three OSes (each of which it runs on beautifully).</p>

<h2>Turtles All The Way Down</h2>

<p>Everything is an object. <i>Everything</i> <b>is</b> an object. Signs of this show up in the way loops and conditionals are treated, as well as the complete construction of the system<a href=\"#foot-Wed-Feb-01-225456EST-2012\" name=\"note-Wed-Feb-01-225456EST-2012\">[7]</a>. It's kind of an extension of the previous point, but I wanted to emphasize it. That fantastic environment I mentioned? It's built in Smalltalk. The main click-menu (called the World Menu) is actually represented in the image. You can head over to the class browser and find a class called <code>TheWorldMenu</code>. You can also Ctrl + right-click on any component of the menu to activate its halo and fuck with internal variables. You probably <i>shouldn't</i>, but you could. This level of introspection happens for almost<a href=\"#foot-Wed-Feb-01-224813EST-2012\" name=\"note-Wed-Feb-01-224813EST-2012\">[6]</a> every component and sub-component you can see. I imagine this is what it would feel like to work on a full-out lisp machine.</p>

<h2>Great GUI Toolkit</h2>

<p>I reserve the right to change my mind since I've only gone through some very basic activities, but it looks like it would be very easy to put together desktop applications with Smalltalk. I'm not super clear on how you'd go about deploying them, but there <a href=\"http://forum.world.st/Desktop-application-with-Pharo-td3453812.html\">seem</a> to be <a href=\"http://code.google.com/p/pharo/wiki/HowToDeployAnApplication\">ways</a>.</p>

<p>That's the stuff that's attracted me. There's downsides too, of course, but they're not enough to give me pause. If you're just looking for an excuse not to try Smalltalk out, one of these should probably be enough.</p>

<h2>No Respect for BEDMAS</h2>

<p>All of the manuals are quite explicit about this too; the fact that everything is an object means that the expression <code>3 + 5 * 2</code> isn't actually an expression. It's two binary messages being sent to two <code>SmallInteger</code>s. That means that the only reasonable way to be consistent about it is to treat arithmetic strictly from the left; so that the expression above will actually evaluate to <code>16</code> rather than the expected <code>13</code> if you try it out.</p>

<h2>Mouse-Centric</h2>

<p>This may actually be a pro for some people, but it's not for me. The environment expects you to do most things with the mouse<a href=\"#foot-Wed-Feb-01-233751EST-2012\" name=\"note-Wed-Feb-01-233751EST-2012\">[8]</a>. There's a greater than usual amount of time spent dealing with objects and widgets, so I guess that might be fair, but look. If your window system doesn't let me move between windows without reaching for the rat, you're doing something wrong. Being already used to a tiling WM just makes it that much more annoying<a href=\"#foot-Wed-Feb-01-233848EST-2012\" name=\"note-Wed-Feb-01-233848EST-2012\">[9]</a>. A lot of things <i>have</i> keyboard shortcuts, but not everything, and those things that don't are quite annoying. Not <i>exactly</i> annoying enough to jump over to <a href=\"http://smalltalk.gnu.org/\">GNU Smalltalk</a>, but still.</p>

<h2>Odd Choice of String Delimiters</h2>

<p>In Smalltalk <code><span style=\"color: #008b00;\">\"foo\"</span></code> is not the string foo. It's actually the <i>comment</i> foo. The string foo looks like <code><span style=\"color: #8b2252;\">'foo'</span></code>. How do you put an apostrophe in a string? You don''t. You either escape it with a second quote, or you use typographers’ quotes. Now you know. I'm still not entirely sure why this decision was made though. It seems like pretty much any other comment delimiters would have made more sense.</p>

<h2>Wonky Keyboard Shortcuts</h2>

<p>I'm putting this one at the bottom of the list because I'm convinced that there must be a way to change them that I just haven't discovered yet. By \"wonky\", I don't mean \"it uses the wrong letter\", I mean \"who the fuck thought this was the correct behavior?\". Things like not having Ctrl+backspace <code>backward-word-kill</code> (giving that honor to Shift+backspace for comical effect), <i>or</i> having Ctrl+x kill a line, but move forward doing it and keep the <code>\\n</code> in place, <b>or</b> having Ctrl+Right move forward a word, but skip newlines so that moving your point to the last symbol of a line is just that little bit more annoying. Also in this category, things like having <code>(</code>, <code>'</code> and <code>\"</code> auto-close themselves, but only about half the time and with a noticeable delay. Like I said, this isn't that huge a deal because I'm convinced that</p>

<ul>
  <li>There must be options I'm missing that will let me fix this</li>
  <li>Even if there is no explicit config option, there's a way to fix this through the object model, and it won't be complicated enough to drive me to drink</li>
</ul>

<p>So there. That's first impressions after about half a week of poking at Pharo. Hopefully it came off as more positive than negative, because I really do like the language so far, but my internal censor goes a bit wonky at about 11:00, and I won't get a chance to proof this until tomorrow morning.</p>

<hr />
<h5>Footnotes</h5>

<p>1 - <a href=\"#note-Wed-Feb-01-220959EST-2012\" name=\"foot-Wed-Feb-01-220959EST-2012\">[back]</a> - And now I'm shocked because I could have sworn it wasn't more than a year ago, but here we are.</p>

<p>2 - <a href=\"#note-Wed-Feb-01-221359EST-2012\" name=\"foot-Wed-Feb-01-221359EST-2012\">[back]</a> - Though the official Seaside tutorial has some issues with registering new handlers, in Pharo at least. They tell you to go the web-interface route, which consistently ignored my brilliant <code>HelloWorld</code> handler. Check the sidebar for links to working tutorials (\"Seaside 3.0 in Pharo\" actually gives you a working tour as of this writing).</p>

<p>3 - <a href=\"#note-Wed-Feb-01-221734EST-2012\" name=\"foot-Wed-Feb-01-221734EST-2012\">[back]</a> - Which differ from <a href=\"/article?name=language-smackdown.html\">Preliminary Impressions</a> in that they're founded on something more than gut feeling.</p>

<p>4 - <a href=\"#note-Wed-Feb-01-222417EST-2012\" name=\"foot-Wed-Feb-01-222417EST-2012\">[back]</a> - Though I will admit that <code>squeak</code> is at the top of <code>top</code> by using a whopping 6%-8% of my CPU and 10%-16% of my memory.</p>

<p>5 - <a href=\"#note-Wed-Feb-01-224001EST-2012\" name=\"foot-Wed-Feb-01-224001EST-2012\">[back]</a> - I'm looking at you, Eclipse. Though, to be fair, it's been a while, I guess you may have lost weight since then.</p>

<p>6 - <a href=\"#note-Wed-Feb-01-224813EST-2012\" name=\"foot-Wed-Feb-01-224813EST-2012\">[back]</a> - It does tell you to fuck off if you try to add a halo to a halo component. I'm assuming I have to edit that directly through the class editor rather than at the front end.</p>

<p>7 - <a href=\"#note-Wed-Feb-01-225456EST-2012\" name=\"foot-Wed-Feb-01-225456EST-2012\">[back]</a> - It's not cumbersome, though, every command I've typed so far has been extremely elegant, if alien (though that's just because I'm not used to it).</p>

<p>8 - <a href=\"#note-Wed-Feb-01-233751EST-2012\" name=\"foot-Wed-Feb-01-233751EST-2012\">[back]</a> - In fact, it advises you to go get a three-button mouse if you don't have one already.</p>

<p>9 - <a href=\"#note-Wed-Feb-01-233848EST-2012\" name=\"foot-Wed-Feb-01-233848EST-2012\">[back]</a> - Though I'm sure it must be possible to build one for the VM in such a way that you can easily strip it from your final product; I may look into this once I get my bearings. Edit: <a href=\"http://forum.world.st/Tiling-Window-Manager-status-update-td3561695.html\">Nevermind</a>. Though it might still be a good learning exercise.</p>
  "))
((5202 3723 567191000) :INSERT (70 :POSTED 3537061200))
((5202 3723 567193000) :INSERT (70 :TAG :SMALLTALK))
((5202 3723 567494000) :INSERT (71 :TITLE "Self Titled"))
((5202 3723 567500000) :INSERT (71 :FILE "self-titled.html"))
((5202 3723 567502000) :INSERT (71 :EDITED 3610022331))
((5202 3723 567507000) :INSERT
 (71 :BODY
  "<p>I read a <a href=\"http://stackoverflow.com/questions/9286318/why-choose-lisp-for-a-project\">question on SO</a> the other day that asks \"Why choose Lisp for a project?\". It's was closed with an almost surprisingly swift consensus, but not before three answers were thrown in (and one accepted). And that's pretty good because, as far as I'm concerned, it's the wrong question. \"Why choose a language for a project?\" is closely related to a second question, which I'll let Peter Norvig describe the shape of:</p>

<blockquote>I guess the way I look at it is; the best language to use is the one that you and your friends are most productive with. It just turned out that when Google was started, the four programmers that were there first were all C++ programmers, and they were very effective with that, and they kept going with it. 
<span class=\"sig\">-Peter Norvig, <a href=\"http://www.youtube.com/watch?v=hE7k0_9k0VA#t=03m10s\">Ask Me Anything</a></span></blockquote>

<p>I agree with his sentiments here. The language you should use when you're working on a professional project<a href=\"#foot-Thu-Feb-16-222424EST-2012\" name=\"note-Thu-Feb-16-222424EST-2012\">[1]</a> is one that your team knows and already thinks in. It would be a mistake for me, today, to start something serious up at the office using Smalltalk because I don't think in it naturally yet. Norvig's response to \"What language should I choose?\" begs a second question though, because if the best language is one you're already familiar with, then you need to ask</p>

<h2>When Should I Choose a Language?</h2>

<p>Ideally (from the perspective of making the best choice possible), you'd choose it as late as possible because, even though it's fairly difficult to explain this to non-computer people, different languages do have different trade-offs. So you either want to pick your language at the point where you have the most possible information about what the shape of your project is going to be, or you want to pick a language that's flexible enough to be used for pretty much anything.</p>

<p>The trouble is, if you subscribe to the Norvig Awesome Language Theory, you come to the conclusion that either</p>

<ul>
  <li>your choice has been made for you quite a while ago, or</li>
  <li>you should make your choice before even getting a team together (let alone deciding what you want to do)</li>
</ul>

<p>The first option happens if you're an x programmer, or if all your friends are x programmers<a href=\"#foot-Thu-Feb-16-222540EST-2012\" name=\"note-Thu-Feb-16-222540EST-2012\">[2]</a>. That's not particularly interesting to me, given how I think about development, but I may come back to it later.</p>

<p>The second option is hard because, I'll lay this down as an axiom, at <b>no point</b> in a project <b>will you know less</b> about what shape the output will take than you do before you've assembled a team. That situation screams \"Lisp\" at me, although I guess any language with sufficient ease of <a href=\"http://en.wikipedia.org/wiki/Domain-specific_language\">DSL</a> creation would do. Perhaps it screams other things to other people; I knew a guy at a former place who said</p>

<blockquote>As far as I'm concerned, unless there's a really good reason not to, you should just use PHP for web development.</blockquote>

<p>I'm not poking fun of the guy either; his reasoning is that since the standard LAMP stack is in place at half a scrillion servers around the world and counting, any bugs likely to bite over the course of a development cycle have already been found. That's the same principle as <a href=\"http://en.wikipedia.org/wiki/Linus'_Law#By_Eric_Raymond\">Raymond's statement of Linus' Law</a>. The trouble is that it leaves you faffing about with PHP even when the entire team knows a more powerful, more abstract language like Python or Ruby.</p>

<p>In fact, applied globally, this principle would have every developer on earth using <a href=\"http://www.tiobe.com/index.php/content/paperinfo/tpci/index.html\">some combination of Java, C, C++ and/or C#</a>, because odds are that every developer could scrape up ten buddies that are at least marginally proficient with those. There's a tension between \"powerful languages\" and \"popular languages\", because each brings benefits to the table. Powerful means you'll be more likely to crack through whatever problem you run into, while Popular means that a lot of problems have been pre-solved for you. Power means you'll be able to move mountains with small teams, Popularity means you'll be able to get big teams together reliably. That begs a third question, because if you've got a specific project in mind, you have to ask</p>

<h2>What kind of Project will this Be?</h2>

<p>Are you trying to solve problems for which there are no existing solutions (or for which no satisfactory solutions exist) or are you looking to create incremental improvements to existing solutions? Do you want the ability to scale to hundreds of developers under your roof, or do you want a team of 5, 10 at the outside? Do you know specifically what you want, or is the spec going to change dramatically as you move on? Do you already have a team put together, or have you resigned yourself to the hell of Hiring Humans? You will want different languages depending on your answers to these questions, regardless of what language you currently happen to know. But that begs a fourth question, because if the objectively right thing to do on a project is use a language you don't know, you have to ask</p>

<h2>When Should I Switch Languages?</h2>

<p><a href=\"http://www.paulgraham.com/avg.html\">Graham says</a> that \"[a]fter a certain age, programmers rarely switch languages voluntarily\". Which is perfectly understandable, because in light of NALT, it's really only reasonable to switch once you and all your friends are more effective with a new language than with your current language, and that takes the sort of off-hours dedication that I'm already having trouble finding at ~27<a href=\"#foot-Thu-Feb-16-222928EST-2012\" name=\"note-Thu-Feb-16-222928EST-2012\">[3]</a>. The \"why\" of it, pragmatically, is also hidden in the statement (although it's a different opinion from Graham than it is from Norvig). The Graham Awesome Language Theory states that there is a pyramid of languages, and you should switch when you realize that there's a higher one than what you already know. That fails to take the team dynamic into account though. If \"switch\" means \"start practising the higher language on your own time\", well, sure, sounds reasonable. But if you've got a team of 10<a href=\"#foot-Thu-Feb-16-223158EST-2012\" name=\"note-Thu-Feb-16-223158EST-2012\">[4]</a>, is it not a mistake to kneecap short-term progress and set yourself up for pain later<a href=\"#foot-Thu-Feb-16-223219EST-2012\" name=\"note-Thu-Feb-16-223219EST-2012\">[5]</a> in exchange for potential gains at the language level?</p>

<p>Norvig says (in effect): switch with your friends. Which may explain why people <a href=\"http://www.aaronsw.com/weblog/rewritingreddit\">switch away from Lisp</a>, even if Graham is right about the shape of the language pyramid. What good is knowing the superior language, if no other human you know speaks it?</p>

<h2>When Should <b>I</b> Switch Languages?</h2>

<p>A couple of days ago, my dad called me up. Apparently, he got a web design offer from a friend of his, but the requirements weren't exactly his field. What they meant was \"Web UI Developer\", and would I be interested? I asked for the specifics; it's a big company, I'd be working for a billing department somewhere, the pay was excellent, and the skill/experience requirements were</p>

<ul>
  <li>Javascript</li>
  <li>Java</li>
  <li>JSTL/JSP</li>
  <li>Spring MVC Framework</li>
</ul>

<p>This is the point where the language argument hit home for me. My dad isn't a programmer (he considers manual CSS/HTML to be too technical for him), and knows how much I make. So when I told him that I'd see if one of my friends wanted a Java Job because it really isn't my language, he was understandably confused.</p>

<p>\"What do you mean, it isn't your language? What difference does it make?\"</p>

<p>All the difference.</p>

<p>Because NALT tells me that if I take a Java Job, I'll be dealing with people who take Java Jobs. By and large<a href=\"#foot-Thu-Feb-16-223347EST-2012\" name=\"note-Thu-Feb-16-223347EST-2012\">[6]</a>, that means people who believe in getting through the day rather than burning with the desire to write brilliant software or exceed themselves. It means dealing with the One True Way to do Anything, which always coincidentally seems to lead through three layers of XML declarations, Eclipse plugins and/or magic. And it means having to deal with design patterns instead of abstracting away the problems that call for those solutions.</p>

<p>So I shouldn't switch languages. Explaining that to someone who isn't at ground zero is difficult, and sort of subjective in any case. In that concrete example I just offered up, I don't think it's fair to say that I chose the wrong languages. \"Getting a job as a corporate programmer\" was nowhere near my goal list when I started learning and, if anything, it's further away now.</p>

<p>It's also not really fair to say that the employer in this case made the wrong decision. Working on a web-app for a billing department isn't likely to run them up against fundamentally unsolved problems, they likely have a large number of small teams, the business guys (non-programmers) are in charge, and I have a hunch that their turnover is something above the industry average. Given the context, would you seriously recommend Haskell or Common Lisp to these people? They may be superior tools, but they're superior in precisely the way that corporate shops <i>don't</i> care about.</p>

<h2>What were we talking about again?</h2>

<p>Choosing languages. The fact is that so many factors play into what's the correct answer (if there even is one), from project goals, to company goals to the preferences your particular group. And all that is without even discussing things like technical features, platform availability, deployment strategies or performance. If you have to ask something like \"Why choose Lisp for a project?\", your entire perspective of the problem could probably use some re-thinking.</p>


<hr />
<h5>Footnotes</h5>

<p>1 - <a href=\"#note-Thu-Feb-16-222424EST-2012\" name=\"foot-Thu-Feb-16-222424EST-2012\">[back]</a> - As opposed to a toy project.</p>


<p>2 - <a href=\"#note-Thu-Feb-16-222540EST-2012\" name=\"foot-Thu-Feb-16-222540EST-2012\">[back]</a> - Where x is bound to a single programming language, regardless of what it is.</p>


<p>3 - <a href=\"#note-Thu-Feb-16-222928EST-2012\" name=\"foot-Thu-Feb-16-222928EST-2012\">[back]</a> - And I don't even have kids yet.</p>


<p>4 - <a href=\"#note-Thu-Feb-16-223158EST-2012\" name=\"foot-Thu-Feb-16-223158EST-2012\">[back]</a> - Or, as frequently happens in a larger company, several(hundred)? teams of 10.</p>


<p>5 - <a href=\"#note-Thu-Feb-16-223219EST-2012\" name=\"foot-Thu-Feb-16-223219EST-2012\">[back]</a> - At the point that you need to maintain all the beginner code you'll be writing for the first little while.</p>


<p>6 - <a href=\"#note-Thu-Feb-16-223347EST-2012\" name=\"foot-Thu-Feb-16-223347EST-2012\">[back]</a> - This has been my limited, subjective experience so far, it may not represent the Java community as a whole.</p>
"))
((5202 3723 567629000) :INSERT (71 :POSTED 3538357200))
((5202 3723 567631000) :INSERT (71 :TAG :LANGUAGES))
((5202 3723 568426000) :INSERT
 (72 :TITLE "StrifeBarge - Turn Based Web-games in Common Lisp"))
((5202 3723 568432000) :INSERT
 (72 :FILE "strifebarge--turn-based-web-games-in-common-lisp.html"))
((5202 3723 568435000) :INSERT (72 :EDITED 3610022331))
((5202 3723 568437000) :INSERT
 (72 :BODY
  "<p>I've been in kind of a blah mood lately. To the point that I didn't really feel like struggling for huge new insights at all this weekend. Hopefully, that passes, because I really don't want to get mired in mediocrity any time soon. Anyway, you didn't come here to hear me being a whiny little bitch, so let me share the small insights I <i>have</i> had the energy to pursue.</p>

<p>First off, <a href=\"https://github.com/xach/quickproject\">quickproject</a> is fairly useful. It's missing some stuff I obsess over (I'm specifically thinking license boilerplate generators and an automatic <code>git init</code>+<code>.gitignore</code> call), and it does one or two small details in a way I don't like (mainly to do with the README file), but it still beats writing the <code>package</code> and <code>asd</code> file by hand. Next time I don't particularly feel like hunting down large insights, I'll probably fork this little utility and add the stuff I want. Between this and <a href=\"http://www.quicklisp.org/\">quicklisp</a>, it's about high time I get a reasonably-sized pile of money together and <a href=\"http://www.quicklisp.org/donations.html\">send it to Zach</a>, because that fucker <b>earned</b> it if anyone has.</p>

<p>With that out of the way, here's what I ended up using a chunk of my weekend to do. Unlike my previous piece on Hunchentoot development, this is meant to be less a lesson and more of an open code review by the invisible peanut gallery. Pot shots and <a href=\"https://github.com/Inaimathi/strifebarge\">patches</a> are welcome. I've had this idea of putting together a turn-based web-game for a while now, and that's the sort of thing that doesn't really require any kind of deep learning. Just some straightforward thinking from first principles, and some light iteration. So, I whipped <i>out</i> <code>quickproject</code> and whipped <i>up</i> an <code>0.01</code>. Lets start with the <code>asd</code> and <code>package</code></p>

<pre><span style=\"color: #b22222;\">;;;; </span><span style=\"color: #b22222;\">strifebarge.asd
</span>
(asdf:defsystem #<span style=\"color: #7a378b;\">:strifebarge</span>
  <span style=\"color: #7a378b;\">:serial</span> t
  <span style=\"color: #7a378b;\">:depends-on</span> (#<span style=\"color: #7a378b;\">:hunchentoot</span>
               #<span style=\"color: #7a378b;\">:cl-who</span>
               #<span style=\"color: #7a378b;\">:ironclad</span>
               #<span style=\"color: #7a378b;\">:parenscript</span>
               #<span style=\"color: #7a378b;\">:cl-css</span>
               #<span style=\"color: #7a378b;\">:swank</span>
               #<span style=\"color: #7a378b;\">:clsql</span>)
  <span style=\"color: #7a378b;\">:components</span> ((<span style=\"color: #7a378b;\">:file</span> <span style=\"color: #8b2252;\">\"package\"</span>)
               (<span style=\"color: #7a378b;\">:file</span> <span style=\"color: #8b2252;\">\"util\"</span>)
               (<span style=\"color: #7a378b;\">:file</span> <span style=\"color: #8b2252;\">\"model\"</span>) (<span style=\"color: #7a378b;\">:file</span> <span style=\"color: #8b2252;\">\"space\"</span>) (<span style=\"color: #7a378b;\">:file</span> <span style=\"color: #8b2252;\">\"board\"</span>) (<span style=\"color: #7a378b;\">:file</span> <span style=\"color: #8b2252;\">\"game\"</span>)
               (<span style=\"color: #7a378b;\">:file</span> <span style=\"color: #8b2252;\">\"strifebarge\"</span>)))</pre>

<pre><span style=\"color: #b22222;\">;;;; </span><span style=\"color: #b22222;\">package.lisp
</span>
(<span style=\"color: #a020f0;\">defpackage</span> #<span style=\"color: #7a378b;\">:strifebarge</span>
  (<span style=\"color: #7a378b;\">:use</span> #<span style=\"color: #7a378b;\">:cl</span> #<span style=\"color: #7a378b;\">:cl-who</span> #<span style=\"color: #7a378b;\">:clsql</span> #<span style=\"color: #7a378b;\">:hunchentoot</span> #<span style=\"color: #7a378b;\">:parenscript</span>)
  (<span style=\"color: #7a378b;\">:import-from</span> #<span style=\"color: #7a378b;\">:swank</span> #<span style=\"color: #7a378b;\">:find-definition-for-thing</span>)
  (<span style=\"color: #7a378b;\">:import-from</span> #<span style=\"color: #7a378b;\">:ironclad</span> 
                #<span style=\"color: #7a378b;\">:encrypt-in-place</span> #<span style=\"color: #7a378b;\">:decrypt-in-place</span> #<span style=\"color: #7a378b;\">:make-cipher</span> #<span style=\"color: #7a378b;\">:digest-sequence</span> 
                #<span style=\"color: #7a378b;\">:octets-to-integer</span> #<span style=\"color: #7a378b;\">:integer-to-octets</span>
                #<span style=\"color: #7a378b;\">:ascii-string-to-byte-array</span> #<span style=\"color: #7a378b;\">:byte-array-to-hex-string</span>)
  (<span style=\"color: #7a378b;\">:shadow</span> #<span style=\"color: #7a378b;\">:get-time</span>))

(<span style=\"color: #a020f0;\">in-package</span> #<span style=\"color: #7a378b;\">:strifebarge</span>)

(<span style=\"color: #a020f0;\">defparameter</span> <span style=\"color: #a0522d;\">*web-server*</span> (start (make-instance 'hunchentoot:easy-acceptor <span style=\"color: #7a378b;\">:port</span> 5050)))</pre>

<p>And actually, now that I look at them, those clearly include things I haven't used yet, and may not for a while yet. I'll keep them around for the moment, but I'm leaving a mental note here that I really don't need anything past <code>:hunchentoot</code> and <code>:cl-who</code> just yet.</p>

<p>By the way, a significant chunk of this was <code>quickproject</code>-generated. I added the <code>:import-from</code> clauses, and some of the <code>:file</code> declarations, but that's pretty much it. The rest of it was created by running <code>quickproject:make-project</code> with the appropriate inputs. Moving right along, lets start with the meat of this thing</p>

<pre><span style=\"color: #b22222;\">;;;; </span><span style=\"color: #b22222;\">strifebarge.lisp
</span>
(<span style=\"color: #a020f0;\">in-package</span> #<span style=\"color: #7a378b;\">:strifebarge</span>)

(<span style=\"color: #a020f0;\">defparameter</span> <span style=\"color: #a0522d;\">*game*</span> nil)

(<span style=\"color: #a020f0;\">define-easy-handler</span> (index <span style=\"color: #7a378b;\">:uri</span> <span style=\"color: #8b2252;\">\"/\"</span>) ()
  (<span style=\"color: #a020f0;\">let</span> ((players (list (make-player 'carrier 'cruiser 'destroyer)
                       (make-player 'carrier 'cruiser 'destroyer))))
    (echo (apply #'make-game players) (car players))))

(<span style=\"color: #a020f0;\">define-easy-handler</span> (new-game <span style=\"color: #7a378b;\">:uri</span> <span style=\"color: #8b2252;\">\"/new-game\"</span>) (player-count)
  (<span style=\"color: #a020f0;\">let*</span> ((p-count (<span style=\"color: #a020f0;\">if</span> player-count (parse-integer player-count) 2)) 
         (players (<span style=\"color: #a020f0;\">loop</span> for i from 1 to p-count
                        collect (make-player 'carrier 'cruiser 'destroyer))))
    (setf *game* (apply #'make-game players))
    (redirect <span style=\"color: #8b2252;\">\"/join-game\"</span>)))

(<span style=\"color: #a020f0;\">define-easy-handler</span> (join-game <span style=\"color: #7a378b;\">:uri</span> <span style=\"color: #8b2252;\">\"/join-game\"</span>) ()
  (<span style=\"color: #ff0000; font-weight: bold;\">assert</span> (and (not (null (waiting-for *game*)))
               (null (session-value <span style=\"color: #7a378b;\">:player</span>))))
  (setf (session-value <span style=\"color: #7a378b;\">:player</span>) (pop (waiting-for *game*)))
  (redirect <span style=\"color: #8b2252;\">\"/show-game\"</span>))

(<span style=\"color: #a020f0;\">define-easy-handler</span> (show-game <span style=\"color: #7a378b;\">:uri</span> <span style=\"color: #8b2252;\">\"/show-game\"</span>) ()
  (<span style=\"color: #ff0000; font-weight: bold;\">assert</span> (not (null (session-value <span style=\"color: #7a378b;\">:player</span>))))
  (echo *game* (session-value <span style=\"color: #7a378b;\">:player</span>)))

(<span style=\"color: #a020f0;\">define-easy-handler</span> (quit-game <span style=\"color: #7a378b;\">:uri</span> <span style=\"color: #8b2252;\">\"/quit-game\"</span>) ()
  (<span style=\"color: #ff0000; font-weight: bold;\">assert</span> (not (null (session-value <span style=\"color: #7a378b;\">:player</span>))))
  (push (waiting-for *game*) (session-value <span style=\"color: #7a378b;\">:player</span>))
  (setf (session-value <span style=\"color: #7a378b;\">:player</span>) nil)
  <span style=\"color: #8b2252;\">\"You have quit the game\"</span>)

(<span style=\"color: #a020f0;\">define-easy-handler</span> (turn <span style=\"color: #7a378b;\">:uri</span> <span style=\"color: #8b2252;\">\"/turn\"</span>) (x y)
  (<span style=\"color: #ff0000; font-weight: bold;\">assert</span> (and (eq (car (turn-stack *game*)) (session-value <span style=\"color: #7a378b;\">:player</span>))
               (stringp x) (stringp y)))
  (advance-turn *game*)
  (fire *game* (session-value <span style=\"color: #7a378b;\">:player</span>) (parse-integer x) (parse-integer y))
  (redirect <span style=\"color: #8b2252;\">\"/show-game\"</span>))</pre>

<p><code>strifebarge</code> contains all the HTTP handlers this project uses. I've implemented a test handler (<code>index</code>), which does nothing now that I'm past working up the <code>echo</code> methods. It's also possible to create a <code>new-game</code>, <code>join</code> or <code>quit</code> a game, <code>show</code> the current state of a game board, and take a <code>turn</code><a href=\"#foot-Mon-Feb-20-223207EST-2012\" name=\"note-Mon-Feb-20-223207EST-2012\">[1]</a>.</p>

<p>I did mention that this was an <code>0.01</code>, so the intense lack of usability should come as no surprise to you. Firstly, there is only one <code>*game*</code>, stored in the global variable of the same name. For the moment, if anyone starts a new game, the old one gets clobbered. Secondly, note that turn order is maintained through an error mechanism. In the final game, those should actually display a little note along the lines of \"It's not your turn yet\", rather than vomiting a stack dump<a href=\"#foot-Mon-Feb-20-223214EST-2012\" name=\"note-Mon-Feb-20-223214EST-2012\">[2]</a>.</p>

<p>Lets take a closer look at how the turn mechanism is approached. It actually starts at the <code>join-game</code> handler.</p>

<pre>(<span style=\"color: #a020f0;\">define-easy-handler</span> (join-game <span style=\"color: #7a378b;\">:uri</span> <span style=\"color: #8b2252;\">\"/join-game\"</span>) ()
  (<span style=\"color: #ff0000; font-weight: bold;\">assert</span> (and (not (null (waiting-for *game*)))
               (null (session-value <span style=\"color: #7a378b;\">:player</span>))))
  (setf (session-value <span style=\"color: #7a378b;\">:player</span>) (pop (waiting-for *game*)))
  (redirect <span style=\"color: #8b2252;\">\"/show-game\"</span>))</pre>

<p>The <code>assert</code> here makes sure of two things:</p>

<ul>
  <li>The game is waiting for at least one more player to join</li>
  <li>You have not already joined a game</li>
</ul>

<p>As noted, if an <code>assert</code> statement fails, you get an error. If they both succeed, you are assigned a <code>player</code> record, stored in your <code>session</code>, to track who you are for the duration of the game<a href=\"#foot-Mon-Feb-20-223319EST-2012\" name=\"note-Mon-Feb-20-223319EST-2012\">[3]</a>. This is relevant in two ways. Firstly, the <code>board</code> is displayed differently based on which <code>player</code> is looking;  we'll see more about this later, the only hint you get from this file is the call to <code>echo</code> in <code>show-game</code>.</p>

<pre>(<span style=\"color: #a020f0;\">define-easy-handler</span> (show-game <span style=\"color: #7a378b;\">:uri</span> <span style=\"color: #8b2252;\">\"/show-game\"</span>) ()
  (<span style=\"color: #ff0000; font-weight: bold;\">assert</span> (not (null (session-value <span style=\"color: #7a378b;\">:player</span>))))
  (echo *game* (session-value <span style=\"color: #7a378b;\">:player</span>)))</pre>

<p>and secondly the <code>player</code> record in your session determines when it's your turn.</p>

<pre>(<span style=\"color: #a020f0;\">define-easy-handler</span> (turn <span style=\"color: #7a378b;\">:uri</span> <span style=\"color: #8b2252;\">\"/turn\"</span>) (x y)
  (<span style=\"color: #ff0000; font-weight: bold;\">assert</span> (and (eq (car (turn-stack *game*)) (session-value <span style=\"color: #7a378b;\">:player</span>))
               (stringp x) (stringp y)))
  (advance-turn *game*)
  (fire *game* (session-value <span style=\"color: #7a378b;\">:player</span>) (parse-integer x) (parse-integer y))
  (redirect <span style=\"color: #8b2252;\">\"/show-game\"</span>))</pre>

<p>Notice both that the <code>assert</code> in this handler makes sure that the top player on the <code>turn-stack</code> is the same as the player in your <code>session</code>, <i>and</i> that part of the handler body calls the method <code>advance-turn</code> on the current game before calling <code>fire</code> and re-displaying the game board. That segues nicely into</p>

<pre><span style=\"color: #b22222;\">;;;; </span><span style=\"color: #b22222;\">game.lisp
</span>
(<span style=\"color: #a020f0;\">in-package</span> <span style=\"color: #7a378b;\">:strifebarge</span>)

<span style=\"color: #b22222;\">;;;;;;;;;;;;;;;;;;;; </span><span style=\"color: #b22222;\">game creation and setup
</span><span style=\"color: #b22222;\">;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;</span><span style=\"color: #b22222;\">
</span>(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">make-player</span> (<span style=\"color: #228b22;\">&amp;rest</span> ship-types)
  (<span style=\"color: #a020f0;\">let</span> ((p (make-instance 'player)))
    (setf (ships p)
          (mapcar (<span style=\"color: #a020f0;\">lambda</span> (s) (make-instance s <span style=\"color: #7a378b;\">:player</span> p)) ship-types))
    p))

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">make-game</span> (<span style=\"color: #228b22;\">&amp;rest</span> players)
  (<span style=\"color: #a020f0;\">let</span> ((board (make-board (mapcan #'ships players))))
    (make-instance 'game <span style=\"color: #7a378b;\">:board</span> board 
                         <span style=\"color: #7a378b;\">:players</span> players 
                         <span style=\"color: #7a378b;\">:waiting-for</span> players 
                         <span style=\"color: #7a378b;\">:turn-stack</span> players)))

<span style=\"color: #b22222;\">;;;;;;;;;;;;;;;;;;;; </span><span style=\"color: #b22222;\">display
</span><span style=\"color: #b22222;\">;;;;;;;;;;;;;;;;;;;;;;;;;;;;</span><span style=\"color: #b22222;\">
</span>(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">echo</span> ((g game) (p player))
  (<span style=\"color: #a020f0;\">with-html-output-to-string</span> (*standard-output* nil <span style=\"color: #7a378b;\">:prologue</span> t <span style=\"color: #7a378b;\">:indent</span> t)
    (<span style=\"color: #7a378b;\">:html</span> (<span style=\"color: #7a378b;\">:body</span> (echo (board g) p)))))

<span style=\"color: #b22222;\">;;;;;;;;;;;;;;;;;;;; </span><span style=\"color: #b22222;\">actions
</span><span style=\"color: #b22222;\">;;;;;;;;;;;;;;;;;;;;;;;;;;;;</span><span style=\"color: #b22222;\">
</span>(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">advance-turn</span> ((g game))
  (<span style=\"color: #a020f0;\">if</span> (cdr (turn-stack g))
      (pop (turn-stack g))
      (setf (turn-stack g) (players g))))

(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">fire</span> ((g game) (p player) x y)
  (<span style=\"color: #a020f0;\">let</span> ((result (make-instance 
                 (<span style=\"color: #a020f0;\">if</span> (empty-space-at? (board g) x y) 'miss 'hit)
                 <span style=\"color: #7a378b;\">:player</span> p <span style=\"color: #7a378b;\">:x</span> x <span style=\"color: #7a378b;\">:y</span> y)))
    (push result (history g))
    (setf (move (space-at (board g) x y)) result)
    result))</pre>

<p>The creation and setup functions give you a pretty good idea of how <code>player</code>s and <code>games</code> are represented. For now, a <code>player</code> is just an object that has one or more <code>ship</code>s<a href=\"#foot-Mon-Feb-20-224338EST-2012\" name=\"note-Mon-Feb-20-224338EST-2012\">[4]</a>. A <code>game</code> is a slightly more complex construct; it has a <code>board</code> as well as a collection of <code>players</code>, a <code>turn-stack</code> and list of players that haven't shown up yet<a href=\"#foot-Mon-Feb-20-224349EST-2012\" name=\"note-Mon-Feb-20-224349EST-2012\">[5]</a>. We'll discuss the <code>board</code> a bit later, lets get into how <code>player</code>s and the <code>game</code> <code>function</code>. Um. I mean: function.</p>

<p>For the moment, <code>echo</code>ing a <code>game</code> just passes the buck to <code>echo</code>ing a <code>board</code> for the current player. There will eventually be things other than the board, such as various stat displays, and a turn counter. The interesting stuff here is <code>advance-turn</code> and <code>fire</code>.</p>

<pre>(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">advance-turn</span> ((g game))
  (<span style=\"color: #a020f0;\">if</span> (cdr (turn-stack g))
      (pop (turn-stack g))
      (setf (turn-stack g) (players g))))</pre>

<p>After reading this, it should be perfectly obvious what the turn stack is, and how it enforces actions. It just starts off as a copy of the list of <code>players</code> participating in the game, and we <code>pop</code> the top record off each time a turn is passed. Once we get down to the last player in the stack, we copy out the list of <code>players</code> instead of <code>pop</code>ing again. That keeps the game circular.</p>

<pre>(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">fire</span> ((g game) (p player) x y)
  (<span style=\"color: #a020f0;\">let</span> ((result (make-instance 
                 (<span style=\"color: #a020f0;\">if</span> (empty-space-at? (board g) x y) 'miss 'hit)
                 <span style=\"color: #7a378b;\">:player</span> p <span style=\"color: #7a378b;\">:x</span> x <span style=\"color: #7a378b;\">:y</span> y)))
    (push result (history g))
    (setf (move (space-at (board g) x y)) result)
    result))</pre>

<p><code>fire</code> makes a new <code>hit</code> or <code>miss</code> marker<a href=\"#foot-Mon-Feb-20-224637EST-2012\" name=\"note-Mon-Feb-20-224637EST-2012\">[6]</a> and attaches it to the space ... I mean, <code>space</code>... at the given coordinates. It also records the <code>move</code> in the <code>game</code>s <code>history</code>.</p>

<p>Again, <code>0.01</code>, so neither of these functions actually deal damage to a given <code>ship</code>, or end the game if a player has been eliminated. The turn sequence just goes on until all the players stop playing. Note one very intentional effect of this architecture though; the game supports <code>n</code> <code>player</code>s by default. It's not a two-player affair, but rather, as many as you like<a href=\"#foot-Mon-Feb-20-224841EST-2012\" name=\"note-Mon-Feb-20-224841EST-2012\">[7]</a>, as hinted at by the <code>new-game</code> handler<a href=\"#foot-Mon-Feb-20-224855EST-2012\" name=\"note-Mon-Feb-20-224855EST-2012\">[8]</a>.</p>

<p>Before we deal with the <code>space</code> and <code>board</code> files, we should probably take a look at the <code>model</code>. There are some non-obvious interactions, and I want to lay them bare before getting into how I put together the actual front end and hit tracking.</p>

<pre><span style=\"color: #b22222;\">;;;; </span><span style=\"color: #b22222;\">model.lisp
</span>
(<span style=\"color: #a020f0;\">in-package</span> <span style=\"color: #7a378b;\">:strifebarge</span>)

(<span style=\"color: #a020f0;\">defclass</span> <span style=\"color: #228b22;\">ship</span> ()
  ((space-count <span style=\"color: #7a378b;\">:reader</span> space-count <span style=\"color: #7a378b;\">:initarg</span> <span style=\"color: #7a378b;\">:space-count</span>)
   (player <span style=\"color: #7a378b;\">:reader</span> player <span style=\"color: #7a378b;\">:initarg</span> <span style=\"color: #7a378b;\">:player</span>)
   (damage <span style=\"color: #7a378b;\">:accessor</span> damage <span style=\"color: #7a378b;\">:initform</span> 0)
   (coords <span style=\"color: #7a378b;\">:accessor</span> coords <span style=\"color: #7a378b;\">:initarg</span> <span style=\"color: #7a378b;\">:coords</span>)
   (direction <span style=\"color: #7a378b;\">:accessor</span> direction <span style=\"color: #7a378b;\">:initarg</span> <span style=\"color: #7a378b;\">:direction</span>)))

(<span style=\"color: #a020f0;\">defclass</span> <span style=\"color: #228b22;\">carrier</span> (ship) ((space-count <span style=\"color: #7a378b;\">:initform</span> 5)))
(<span style=\"color: #a020f0;\">defclass</span> <span style=\"color: #228b22;\">cruiser</span> (ship) ((space-count <span style=\"color: #7a378b;\">:initform</span> 3)))
(<span style=\"color: #a020f0;\">defclass</span> <span style=\"color: #228b22;\">destroyer</span> (ship) ((space-count <span style=\"color: #7a378b;\">:initform</span> 2)))

(<span style=\"color: #a020f0;\">defclass</span> <span style=\"color: #228b22;\">move</span> ()
  ((player <span style=\"color: #7a378b;\">:reader</span> player <span style=\"color: #7a378b;\">:initarg</span> <span style=\"color: #7a378b;\">:player</span>)
   (x <span style=\"color: #7a378b;\">:reader</span> x <span style=\"color: #7a378b;\">:initarg</span> <span style=\"color: #7a378b;\">:x</span>)
   (y <span style=\"color: #7a378b;\">:reader</span> y <span style=\"color: #7a378b;\">:initarg</span> <span style=\"color: #7a378b;\">:y</span>)))

(<span style=\"color: #a020f0;\">defclass</span> <span style=\"color: #228b22;\">hit</span> (move) ())
(<span style=\"color: #a020f0;\">defclass</span> <span style=\"color: #228b22;\">miss</span> (move) ())

(<span style=\"color: #a020f0;\">defclass</span> <span style=\"color: #228b22;\">player</span> ()
  ((score <span style=\"color: #7a378b;\">:accessor</span> score <span style=\"color: #7a378b;\">:initform</span> 0)
   (sunken <span style=\"color: #7a378b;\">:accessor</span> sunken <span style=\"color: #7a378b;\">:initarg</span> <span style=\"color: #7a378b;\">:sunken</span>)
   (ships <span style=\"color: #7a378b;\">:accessor</span> ships <span style=\"color: #7a378b;\">:initarg</span> <span style=\"color: #7a378b;\">:ships</span>)))

(<span style=\"color: #a020f0;\">defclass</span> <span style=\"color: #228b22;\">board-space</span> ()
  ((x <span style=\"color: #7a378b;\">:reader</span> x <span style=\"color: #7a378b;\">:initarg</span> <span style=\"color: #7a378b;\">:x</span>)
   (y <span style=\"color: #7a378b;\">:reader</span> y <span style=\"color: #7a378b;\">:initarg</span> <span style=\"color: #7a378b;\">:y</span>)
   (contents <span style=\"color: #7a378b;\">:accessor</span> contents <span style=\"color: #7a378b;\">:initform</span> nil)
   (move <span style=\"color: #7a378b;\">:accessor</span> move <span style=\"color: #7a378b;\">:initform</span> nil)))

(<span style=\"color: #a020f0;\">defclass</span> <span style=\"color: #228b22;\">board</span> ()
  ((width <span style=\"color: #7a378b;\">:reader</span> width <span style=\"color: #7a378b;\">:initarg</span> <span style=\"color: #7a378b;\">:width</span>)
   (height <span style=\"color: #7a378b;\">:reader</span> height <span style=\"color: #7a378b;\">:initarg</span> <span style=\"color: #7a378b;\">:height</span>)
   (spaces <span style=\"color: #7a378b;\">:accessor</span> spaces <span style=\"color: #7a378b;\">:initarg</span> <span style=\"color: #7a378b;\">:spaces</span>)))

(<span style=\"color: #a020f0;\">defclass</span> <span style=\"color: #228b22;\">game</span> ()
  ((board <span style=\"color: #7a378b;\">:accessor</span> board <span style=\"color: #7a378b;\">:initarg</span> <span style=\"color: #7a378b;\">:board</span>)
   (players <span style=\"color: #7a378b;\">:accessor</span> players <span style=\"color: #7a378b;\">:initarg</span> <span style=\"color: #7a378b;\">:players</span>)
   (waiting-for <span style=\"color: #7a378b;\">:accessor</span> waiting-for <span style=\"color: #7a378b;\">:initarg</span> <span style=\"color: #7a378b;\">:waiting-for</span>)
   (turn-stack <span style=\"color: #7a378b;\">:accessor</span> turn-stack <span style=\"color: #7a378b;\">:initarg</span> <span style=\"color: #7a378b;\">:turn-stack</span>)
   (history <span style=\"color: #7a378b;\">:accessor</span> history <span style=\"color: #7a378b;\">:initform</span> nil)))</pre>

<p>You probably inferred the shape of the <code>game</code>, <code>player</code> and <code>move</code> classes based on stuff I've already shown you. The reason that <code>move</code>, <code>hit</code> and <code>miss</code> are implemented like this is twofold. First, it makes <code>echo</code>ing simple<a href=\"#foot-Mon-Feb-20-224942EST-2012\" name=\"note-Mon-Feb-20-224942EST-2012\">[9]</a>, and second, it will eventually let me do clever things like color-coding shot markers per player.</p>

<p>The new stuff here is the <code>ship</code> and associated classes. I've only implemented 3; a 5-space, a 3-space and a 2-space vessel, each of which just inherits from <code>ship</code> and sets its <code>space-count</code>. As you can see, they're already prepared to take damage, in addition to tracking their position, orientation and owner. Now that I really think about it, I'm not sure why I have a ship track its coordinates after being placed; it becomes completely irrelevant to the ship at that point. The space-count matters<a href=\"#foot-Mon-Feb-20-225043EST-2012\" name=\"note-Mon-Feb-20-225043EST-2012\">[10]</a>, but it makes no difference what specific spaces a given ship occupies and won't for a rather long while. That's definitely something I'll be removing after I finish this write-up.</p>

<p>The other new bits, which may help understand the rest of the files so I'll dwell on them a moment, are the <code>board</code> and <code>space</code> classes.</p>

<pre>(<span style=\"color: #a020f0;\">defclass</span> <span style=\"color: #228b22;\">board-space</span> ()
  ((x <span style=\"color: #7a378b;\">:reader</span> x <span style=\"color: #7a378b;\">:initarg</span> <span style=\"color: #7a378b;\">:x</span>)
   (y <span style=\"color: #7a378b;\">:reader</span> y <span style=\"color: #7a378b;\">:initarg</span> <span style=\"color: #7a378b;\">:y</span>)
   (contents <span style=\"color: #7a378b;\">:accessor</span> contents <span style=\"color: #7a378b;\">:initform</span> nil)
   (move <span style=\"color: #7a378b;\">:accessor</span> move <span style=\"color: #7a378b;\">:initform</span> nil)))</pre>

<p>A board-space has an <code>x</code> and <code>y</code> coordinate, as well as initially empty <code>contents</code> and <code>move</code> slots. You already saw what <code>move</code> does; when a <code>space</code> is fired upon, it's marked as either a hit or a miss using a shot flag<a href=\"#foot-Mon-Feb-20-225148EST-2012\" name=\"note-Mon-Feb-20-225148EST-2012\">[11]</a>. The <code>contents</code> are exactly what you'd expect; each occupied <code>space</code> carries a pointer to the <code>ship</code> it contains.</p>

<pre>(<span style=\"color: #a020f0;\">defclass</span> <span style=\"color: #228b22;\">board</span> ()
  ((width <span style=\"color: #7a378b;\">:reader</span> width <span style=\"color: #7a378b;\">:initarg</span> <span style=\"color: #7a378b;\">:width</span>)
   (height <span style=\"color: #7a378b;\">:reader</span> height <span style=\"color: #7a378b;\">:initarg</span> <span style=\"color: #7a378b;\">:height</span>)
   (spaces <span style=\"color: #7a378b;\">:accessor</span> spaces <span style=\"color: #7a378b;\">:initarg</span> <span style=\"color: #7a378b;\">:spaces</span>)))</pre>

<p>Last one, and then we can round out the methods. A <code>board</code> caches its <code>width</code> and <code>height</code>, as well as keeping the full <code>spaces</code> grid. What a grid looks like is non-obvious from just the class declaration, so this is actually the perfect segue into</p>

<pre><span style=\"color: #b22222;\">;;;; </span><span style=\"color: #b22222;\">board.lisp
</span>
(<span style=\"color: #a020f0;\">in-package</span> <span style=\"color: #7a378b;\">:strifebarge</span>)

<span style=\"color: #b22222;\">;;;;;;;;;;;;;;;;;;;; </span><span style=\"color: #b22222;\">board creation
</span><span style=\"color: #b22222;\">;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;</span><span style=\"color: #b22222;\">
</span>(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">empty-grid</span> (width height)
  (<span style=\"color: #a020f0;\">loop</span> for y from 0 to height
        collect (<span style=\"color: #a020f0;\">loop</span> for x from 0 to width collect (make-space x y))))

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">empty-board</span> (width height)
  (make-instance 'board 
                 <span style=\"color: #7a378b;\">:spaces</span> (empty-grid width height)
                 <span style=\"color: #7a378b;\">:width</span> width
                 <span style=\"color: #7a378b;\">:height</span> height))

<span style=\"color: #b22222;\">;;;;;;;;;;;;;;;;;;;; </span><span style=\"color: #b22222;\">board setup
</span><span style=\"color: #b22222;\">;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;</span><span style=\"color: #b22222;\">
</span>(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">space-at</span> ((b board) x y) (nth x (nth y (spaces b))))

(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">assign-ship-spaces</span> ((s ship) direction x y)
  (<span style=\"color: #a020f0;\">loop</span> for i from 0 to (- (space-count s) 1)
        if (eq <span style=\"color: #7a378b;\">:vertical</span> direction)
          collect (cons x (+ i y))
        else
          collect (cons (+ i x) y)))

(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">position-ship</span> ((s ship) (b board))
  (<span style=\"color: #a020f0;\">let*</span> ((x (random (- (width b) (space-count s))))
         (y (random (- (height b) (space-count s))))
         (direction (pick '(<span style=\"color: #7a378b;\">:vertical</span> <span style=\"color: #7a378b;\">:horizontal</span>)))
         (ship-spaces (assign-ship-spaces s direction x y)))
    (<span style=\"color: #a020f0;\">if</span> (every (<span style=\"color: #a020f0;\">lambda</span> (p) (empty-space-at? b (car p) (cdr p))) ship-spaces)
        (<span style=\"color: #a020f0;\">progn</span> 
          (setf (coords s) ship-spaces
                (direction s) direction)
          (<span style=\"color: #a020f0;\">loop</span> for (x . y) in ship-spaces
                do (setf (contents (space-at b x y)) s)))
        (position-ship s b))))

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">make-board</span> (list-of-ships)
  (<span style=\"color: #a020f0;\">let*</span> ((width (+ 5 (* 2 (length list-of-ships))))
         (height (+ 5 (* 2 (length list-of-ships))))
         (board (empty-board width height)))
    (<span style=\"color: #a020f0;\">dolist</span> (s list-of-ships) (position-ship s board))
    board))

<span style=\"color: #b22222;\">;;;;;;;;;;;;;;;;;;;; </span><span style=\"color: #b22222;\">display
</span><span style=\"color: #b22222;\">;;;;;;;;;;;;;;;;;;;;;;;;;;;;</span><span style=\"color: #b22222;\">
</span>(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">echo</span> ((b board) (p player))
  (<span style=\"color: #a020f0;\">with-html-output</span> (*standard-output* nil <span style=\"color: #7a378b;\">:indent</span> t)
    (<span style=\"color: #7a378b;\">:table</span> <span style=\"color: #7a378b;\">:id</span> <span style=\"color: #8b2252;\">\"game-board\"</span>
            (mapc (<span style=\"color: #a020f0;\">lambda</span> (row) 
                    (htm (<span style=\"color: #7a378b;\">:tr</span> (mapc (<span style=\"color: #a020f0;\">lambda</span> (s) (echo s p)) row)))) 
                  (spaces b)))))</pre>

<p>As you can see, that's the chunkiest single file in the package, and that's because it implements creating a <code>board</code> as well as placing <code>ship</code>s<a href=\"#foot-Mon-Feb-20-225410EST-2012\" name=\"note-Mon-Feb-20-225410EST-2012\">[12]</a>. Firstly, looking at <code>empty-board</code> and <code>space-at</code> should clear up what a <code>board</code> looks like. It's a list of lists of spaces<a href=\"#foot-Mon-Feb-20-225424EST-2012\" name=\"note-Mon-Feb-20-225424EST-2012\">[13]</a>.</p>

<p>The <code>ship</code> placement methods are worth a slightly closer look</p>

<pre>(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">assign-ship-spaces</span> ((s ship) direction x y)
  (<span style=\"color: #a020f0;\">loop</span> for i from 0 to (- (space-count s) 1)
        if (eq <span style=\"color: #7a378b;\">:vertical</span> direction)
          collect (cons x (+ i y))
        else
          collect (cons (+ i x) y)))

(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">position-ship</span> ((s ship) (b board))
  (<span style=\"color: #a020f0;\">let*</span> ((x (random (- (width b) (space-count s))))
         (y (random (- (height b) (space-count s))))
         (direction (pick '(<span style=\"color: #7a378b;\">:vertical</span> <span style=\"color: #7a378b;\">:horizontal</span>)))
         (ship-spaces (assign-ship-spaces s direction x y)))
    (<span style=\"color: #a020f0;\">if</span> (every (<span style=\"color: #a020f0;\">lambda</span> (p) (empty-space-at? b (car p) (cdr p))) ship-spaces)
        (<span style=\"color: #a020f0;\">progn</span> 
          (setf (coords s) ship-spaces
                (direction s) direction)
          (<span style=\"color: #a020f0;\">loop</span> for (space-x . space-y) in ship-spaces
                do (setf (contents (space-at b space-x space-y)) s)))
        (position-ship s b))))</pre>

<p>The <code>position-ship</code> method takes a ship and a board and positions the ship on the board. It does this by randomly picking a starting <code>x</code>/<code>y</code> coordinate and <code>direction</code>. Those are fed into <code>assign-ship-spaces</code> which returns a list of <code>(x . y)</code> corresponding to the <code>space</code>s this <code>ship</code> will take up<a href=\"#foot-Mon-Feb-20-225545EST-2012\" name=\"note-Mon-Feb-20-225545EST-2012\">[14]</a>. Once we have that, we check whether all of the generated spaces are currently empty, and if they aren't<a href=\"#foot-Mon-Feb-20-225552EST-2012\" name=\"note-Mon-Feb-20-225552EST-2012\">[15]</a>, we try again. If the given spaces are clear, we<a href=\"#foot-Mon-Feb-20-225559EST-2012\" name=\"note-Mon-Feb-20-225559EST-2012\">[16]</a> store those spaces in the ships' <code>coords</code> and the direction in <code>direction</code><a href=\"#foot-Mon-Feb-20-225609EST-2012\" name=\"note-Mon-Feb-20-225609EST-2012\">[17]</a> before assigning ship pointers to the appropriate <code>space</code>s on the <code>board</code>. Tadaah! That was the most complicated piece of this game.</p>

<p><code>make-board</code> is fairly self-explanatory; it takes a list of <code>ship</code>s and determines <code>width</code>/<code>height</code> of the map based on how many there are, then places each <code>ship</code> and returns the resulting <code>board</code> instance. The <code>board</code>s' <code>echo</code> method should make perfect sense now that you've seen what a <code>board</code> is; in order to <code>echo</code> one, we start an HTML table and map <code>echo</code> over each <code>space</code> in each row of the <code>board</code>. Before we look at <code>space</code>, lets just zoom in on one part of <code>position-ship</code>. Specifically, the part that reads </p>

<pre>...
(direction (pick '(<span style=\"color: #7a378b;\">:vertical</span> <span style=\"color: #7a378b;\">:horizontal</span>)))
...</pre>

<p><code>pick</code> isn't actually a Lisp primitive, but it's fairly simple to define. Here's</p>

<pre><span style=\"color: #b22222;\">;;;; </span><span style=\"color: #b22222;\">util.lisp
</span>
(<span style=\"color: #a020f0;\">in-package</span> <span style=\"color: #7a378b;\">:strifebarge</span>)

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">pick</span> (a-list)
  <span style=\"color: #8b2252;\">\"Randomly selects an element from the given list with equal probability.\"</span>
  (nth (random (length a-list)) a-list))

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">range</span> (a b)
  <span style=\"color: #8b2252;\">\"Returns a list of numbers starting with a and ending with b inclusive.\"</span>
  (<span style=\"color: #a020f0;\">loop</span> for i from a to b collect i))</pre>


<p>Both are fairly self-explanatory. <code>range</code> is a second utility function I defined for an earlier iteration of the codebase, but ended up refactoring out all calls to it. I'm still keeping it, probably more out of superstition than anything else. In fact, never mind, I'm adding one to the list of things I need to trim once I finish writing this.</p>

<p>Ok, all that out of the way, lets finally take a look at</p>

<pre><span style=\"color: #b22222;\">;;;; </span><span style=\"color: #b22222;\">space.lisp
</span>
(<span style=\"color: #a020f0;\">in-package</span> <span style=\"color: #7a378b;\">:strifebarge</span>)

<span style=\"color: #b22222;\">;;;;;;;;;;;;;;;;;;;; </span><span style=\"color: #b22222;\">creation and setup
</span><span style=\"color: #b22222;\">;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;</span><span style=\"color: #b22222;\">
</span>(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">make-space</span> (x y) 
  (make-instance 'board-space <span style=\"color: #7a378b;\">:x</span> x <span style=\"color: #7a378b;\">:y</span> y))

<span style=\"color: #b22222;\">;;;;;;;;;;;;;;;;;;;; </span><span style=\"color: #b22222;\">predicates
</span><span style=\"color: #b22222;\">;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;</span><span style=\"color: #b22222;\">
</span>(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">empty-space?</span> ((s board-space)) (null (contents s)))
(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">empty-space-at?</span> ((b board) x y) (null (contents (space-at b x y))))

<span style=\"color: #b22222;\">;;;;;;;;;;;;;;;;;;;; </span><span style=\"color: #b22222;\">display
</span><span style=\"color: #b22222;\">;;;;;;;;;;;;;;;;;;;;;;;;;;;;</span><span style=\"color: #b22222;\">
</span>(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">echo</span> ((s board-space) (p player))
  (<span style=\"color: #a020f0;\">with-html-output</span> (*standard-output* nil <span style=\"color: #7a378b;\">:indent</span> t)
    (<span style=\"color: #7a378b;\">:td</span> (<span style=\"color: #a020f0;\">cond</span> ((move s) (echo (move s) p))
               ((and (contents s) (eq (player (contents s)) p)) (str <span style=\"color: #8b2252;\">\"#\"</span>))
               (t (htm (<span style=\"color: #7a378b;\">:a</span> <span style=\"color: #7a378b;\">:href</span> (format nil <span style=\"color: #8b2252;\">\"/turn?x=~a&amp;y=~a\"</span> (x s) (y s)) <span style=\"color: #8b2252;\">\"~\"</span>)))))))

(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">echo</span> ((m hit) (p player))
  (<span style=\"color: #a020f0;\">with-html-output</span> (*standard-output* nil <span style=\"color: #7a378b;\">:indent</span> t)
    <span style=\"color: #8b2252;\">\"X\"</span>))

(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">echo</span> ((m miss) (p player))
  (<span style=\"color: #a020f0;\">with-html-output</span> (*standard-output* nil <span style=\"color: #7a378b;\">:indent</span> t)
    <span style=\"color: #8b2252;\">\"O\"</span>))</pre>

<p>I told you the hard part concluded with <code>make-board</code> earlier. <code>make-space</code> is a self-explanatory shortcut to using the raw <code>make-instance</code><a href=\"#foot-Mon-Feb-20-225847EST-2012\" name=\"note-Mon-Feb-20-225847EST-2012\">[18]</a>. The <code>empty</code> predicates are shorthand for checking whether a given <code>space</code> (or a <code>space</code> given by specified coordinates on a <code>board</code>) is empty.</p>

<p>The last mystery is solved with the <code>echo</code> methods here. A <code>space</code> is <code>echo</code>ed as a <code>td</code> tag, but its contents depends on certain properties of the <code>space</code>. First, if this <code>space</code> has been fired upon, we <code>echo</code> its shot marker<a href=\"#foot-Mon-Feb-20-230313EST-2012\" name=\"note-Mon-Feb-20-230313EST-2012\">[19]</a>. Second, if the space hasn't been fired upon, but contains a ship belonging to the current player, we echo a marker for a <code>ship</code><a href=\"#foot-Mon-Feb-20-230324EST-2012\" name=\"note-Mon-Feb-20-230324EST-2012\">[20]</a>. Finally, if all else fails, we output a shot link with the coordinates of the current space, and wrap it around \"~\" which looks sufficiently wave-like for this stage of development.</p>

<p>As an architectural aside, that last one is why we needed the more complex representation of <code>space</code>s. I initially toyed with just having a simple 2-dimensional list of <code>'([move] [contents])</code>, but that would have been both more difficult to abstract from other parts of the program<a href=\"#foot-Mon-Feb-20-230403EST-2012\" name=\"note-Mon-Feb-20-230403EST-2012\">[21]</a>, and it would have complicated emitting the coordinate link to <code>/turn</code>.</p>

<p>So there, putting it all together, we've got a very simple<a href=\"#foot-Mon-Feb-20-230423EST-2012\" name=\"note-Mon-Feb-20-230423EST-2012\">[22]</a> implementation of an HTTP-using multiplayer, turn-based, guessing/strategy game in Common Lisp with a grand total of 220 lines including comments<a href=\"#foot-Mon-Feb-20-230529EST-2012\" name=\"note-Mon-Feb-20-230529EST-2012\">[23]</a>. Hopefully this step-by step has been useful to someone. If nothing else, it helped me figure out where I'm going next in a much more concrete way. I need to trim a few things, add some re-direction constructs to use in place of the assertions, get cracking on a sprite-set<a href=\"#foot-Mon-Feb-20-230600EST-2012\" name=\"note-Mon-Feb-20-230600EST-2012\">[24]</a>, and figure out a good way to periodically notify clients about new developments in the game<a href=\"#foot-Mon-Feb-20-230609EST-2012\" name=\"note-Mon-Feb-20-230609EST-2012\">[25]</a>. That's it for the short term, once that's all done, I'll do another one of these little reflection/code-review articles.</p> 

<p>If you feel like poking around the codebase for your own education, or for the purposes of patching, check out the <a href=\"https://github.com/Inaimathi/strifebarge\">github repo</a>. I haven't actually decided what license I'm using yet, so maybe hold off on hacking on it until I get that cleared up.<a href=\"#foot-Mon-Feb-20-231049EST-2012\" name=\"note-Mon-Feb-20-231049EST-2012\">[26]</a></p>


<hr />
<h5>Footnotes</h5>
<p>1 - <a href=\"#note-Mon-Feb-20-223207EST-2012\" name=\"foot-Mon-Feb-20-223207EST-2012\">[back]</a> - Which fires a single shot on the specified space and passes the turn.</p>

<p>2 - <a href=\"#note-Mon-Feb-20-223214EST-2012\" name=\"foot-Mon-Feb-20-223214EST-2012\">[back]</a> - Which is what failed <code>assert</code>ions do.</p>

<p>3 - <a href=\"#note-Mon-Feb-20-223319EST-2012\" name=\"foot-Mon-Feb-20-223319EST-2012\">[back]</a> - Incidentally, this is why I wanted to include <a href=\"http://method-combination.net/lisp/ironclad/\">:ironclad</a> right out of the gate; as far as I know, Hunchentoot sessions <a href=\"http://lists.common-lisp.net/pipermail/tbnl-devel/2007-December/003795.html\">aren't particularly spoof-resistant</a>, so in a real game I'd want better player verification than this approach gives me. I'm assuming the final solution will take the form of IP and user-agent recording combined with a <a href=\"http://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange\">Diffie-Hellman handshake</a>.</p>

<p>4 - <a href=\"#note-Mon-Feb-20-224338EST-2012\" name=\"foot-Mon-Feb-20-224338EST-2012\">[back]</a> - It also has some other tracking slots, like score and how many ships they sank, but those don't get tracked quite yet.</p>

<p>5 - <a href=\"#note-Mon-Feb-20-224349EST-2012\" name=\"foot-Mon-Feb-20-224349EST-2012\">[back]</a> - That'd be <code>waiting-for</code>.</p>

<p>6 - <a href=\"#note-Mon-Feb-20-224637EST-2012\" name=\"foot-Mon-Feb-20-224637EST-2012\">[back]</a> - Depending on whether the space being fired into is <code>empty</code> or not, obviously.</p>

<p>7 - <a href=\"#note-Mon-Feb-20-224841EST-2012\" name=\"foot-Mon-Feb-20-224841EST-2012\">[back]</a> - Though I probably should have the option of limiting the count through a config variable somewhere in the final.</p>

<p>8 - <a href=\"#note-Mon-Feb-20-224855EST-2012\" name=\"foot-Mon-Feb-20-224855EST-2012\">[back]</a> - Which actually takes <code>player-count</code> as an input, and defaults to 2.</p>

<p>9 - <a href=\"#note-Mon-Feb-20-224942EST-2012\" name=\"foot-Mon-Feb-20-224942EST-2012\">[back]</a> - As you'll see when we get to the <code>space</code> file.</p>

<p>10 - <a href=\"#note-Mon-Feb-20-225043EST-2012\" name=\"foot-Mon-Feb-20-225043EST-2012\">[back]</a> - Or rather, will matter, once I start tracking ship damage.</p>

<p>11 - <a href=\"#note-Mon-Feb-20-225148EST-2012\" name=\"foot-Mon-Feb-20-225148EST-2012\">[back]</a> - An instance of the <code>move</code> class.</p>

<p>12 - <a href=\"#note-Mon-Feb-20-225410EST-2012\" name=\"foot-Mon-Feb-20-225410EST-2012\">[back]</a> - Which is only non-trivial because we're breaking tradition by placing all ships on the same board, necessitating both random placing and preventing ship collisions.</p>

<p>13 - <a href=\"#note-Mon-Feb-20-225424EST-2012\" name=\"foot-Mon-Feb-20-225424EST-2012\">[back]</a> - Subject to change to arrays in the final, but I can't be bothered to optimize at this point. On the upside, defining <code>space-at</code> explicitly means that when I change the representation of a board, I'll only have to change that single function and the <code>empty-</code> functions rather than tracking down every call to <code>nth</code>.</p>

<p>14 - <a href=\"#note-Mon-Feb-20-225545EST-2012\" name=\"foot-Mon-Feb-20-225545EST-2012\">[back]</a> - Taking into account this particular ships' length.</p>

<p>15 - <a href=\"#note-Mon-Feb-20-225552EST-2012\" name=\"foot-Mon-Feb-20-225552EST-2012\">[back]</a> - Which would signal a collision with another ship.</p>

<p>16 - <a href=\"#note-Mon-Feb-20-225559EST-2012\" name=\"foot-Mon-Feb-20-225559EST-2012\">[back]</a> - Uselessly</p>

<p>17 - <a href=\"#note-Mon-Feb-20-225609EST-2012\" name=\"foot-Mon-Feb-20-225609EST-2012\">[back]</a> - The direction will actually be useful sooner rather than later; it will help figure out how to render a ship once I start using sprites instead of the plain grid display going on currently.</p>

<p>18 - <a href=\"#note-Mon-Feb-20-225847EST-2012\" name=\"foot-Mon-Feb-20-225847EST-2012\">[back]</a> - This technique both saves some typing, and lets you be flexible about re-defining the representation of the object in question later. In this case, I could completely change how the game thinks of <code>board-space</code>s, and all I'd really need to change is the code in this file.</p>

<p>19 - <a href=\"#note-Mon-Feb-20-230313EST-2012\" name=\"foot-Mon-Feb-20-230313EST-2012\">[back]</a> - Currently, a <code>hit</code> is represented as \"X\" and a <code>miss</code> is \"O\".</p>

<p>20 - <a href=\"#note-Mon-Feb-20-230324EST-2012\" name=\"foot-Mon-Feb-20-230324EST-2012\">[back]</a> - The current representation is \"#\" for all ships, this will eventually get complicated enough to call for another <code>echo</code> method specializing on <code>ship</code>, but that can wait until I actually get some graphics up ins.</p>

<p>21 - <a href=\"#note-Mon-Feb-20-230403EST-2012\" name=\"foot-Mon-Feb-20-230403EST-2012\">[back]</a> - In the sense that changing a particular <code>space</code>s' <code>move</code> or <code>contents</code> would have necessitated at least a little grubbing around with <code>car</code> and <code>cdr</code>.</p>

<p>22 - <a href=\"#note-Mon-Feb-20-230423EST-2012\" name=\"foot-Mon-Feb-20-230423EST-2012\">[back]</a> - And still unplayable.</p>

<p>23 - <a href=\"#note-Mon-Feb-20-230529EST-2012\" name=\"foot-Mon-Feb-20-230529EST-2012\">[back]</a> - And that's even before the cuts trims I said I'd make.</p>

<p>24 - <a href=\"#note-Mon-Feb-20-230600EST-2012\" name=\"foot-Mon-Feb-20-230600EST-2012\">[back]</a> - Or try to find one.</p>

<p>25 - <a href=\"#note-Mon-Feb-20-230609EST-2012\" name=\"foot-Mon-Feb-20-230609EST-2012\">[back]</a> - My intuition tells me that long-poll/comet won't be a very good fit for Hunchentoot's view of the world, so I'll need to figure something out.</p>

<p>26 - <a href=\"#note-Mon-Feb-20-231049EST-2012\" name=\"foot-Mon-Feb-20-231049EST-2012\">[back]</a> -  It'll definitely be an open one, I'm just not sure which, though currently leaning towards <a href=\"http://www.gnu.org/licenses/agpl.html\">the AGPL</a> since the point of this is a hobby-horse/educational project. In other words, definitely hold off if you're a GNU hater.</p>
"))
((5202 3723 568881000) :INSERT (72 :POSTED 3538702800))
((5202 3723 568886000) :INSERT (72 :TAG :ALMOST-LITERATE-PROGRAMMING))
((5202 3723 568888000) :INSERT (72 :TAG :COMMON-LISP))
((5202 3723 568891000) :INSERT (72 :TAG :HUNCHENTOOT))
((5202 3723 569369000) :INSERT (73 :TITLE "Client Communication"))
((5202 3723 569378000) :INSERT (73 :FILE "client-communication.html"))
((5202 3723 569382000) :INSERT (73 :EDITED 3610022331))
((5202 3723 569386000) :INSERT
 (73 :BODY
  "<p>I'll be posting an incremental StrifeBarge update later this week, but I wanted to think aloud about a particular piece of it first. My last article concluded with a paragraph which included the action-item</p>

<blockquote>figure out a good way to periodically notify clients about new developments in the game</blockquote>

<p>Don't worry if you missed it, that post may just have shatter the \"most words\" record for Langnostic, so it's perfectly understandable if you just read up the point where I begin talking about the code and then went to do something else. I quote it above because that quote just about sets the stage for this.</p>

<p>It turns out that periodic notifications from the server are still a pain in the ass. Your options, as of almost-March 2012 are <a href=\"http://dev.w3.org/html5/websockets/\">Websockets</a>, <a href=\"http://en.wikipedia.org/wiki/Comet_(programming)\">Comet</a> (aka Long Poll, aka (God help me) Reverse Ajax), <a href=\"http://ajaxpatterns.org/Periodic_Refresh\">Ajax Polling</a> and HTML5 <a href=\"http://www.html5rocks.com/en/tutorials/eventsource/basics/\">Server-Sent-Events</a>.</p>

<h2>Websockets</h2>

<p>seem to have gotten the most press, but have so far failed to materialize. If you're familiar with network programming<a href=\"#foot-Thu-Feb-23-154642EST-2012\" name=\"note-Thu-Feb-23-154642EST-2012\">[1]</a>, this will be intuitive to you. Instead of relying on the standard request/response architecture of the web, a client and server do a handshake and establish something like a traditional, secure, bi-directional socket through which they can send each other data. In theory, that completely eliminates the need for any of the other methods. In practice, I'm not convinced.</p>

<p>The big problem is that the word \"secure\" in the previous sentence should have been in quotes, because that's been a big point of contention among implementations. Websockets seem to be, right now, where JavaScript was circa 2002. The various clients are all doing crazy or semi-crazy things their own way, which means that a server either has to make peace with the fact that a large number of visitors won't be using the tool correctly, or it has to try to disambiguate between individual <i>versions</i> of various browsers and provide a tailored protocol for most of them. Fun times, huh?</p>

<p>The first place I heard of this concept was <a href=\"http://armstrongonsoftware.blogspot.com/2009/12/comet-is-dead-long-live-websockets.html\">way back when Joe Armstrong posted</a> a<a href=\"#foot-Thu-Feb-23-154647EST-2012\" name=\"note-Thu-Feb-23-154647EST-2012\">[2]</a> example of Websocket use with YAWS, outright proclaiming the death of all the other options. I'm going to have to respectfully disagree, three years later. Of the big language implementations out there right now, only node.js has <a href=\"http://socket.io/\">a decent solution</a> for Websocket use. Essentially, they have a server and client framework that simplifies the interface, and provides automatic fallback behavior for clients that speak an older version of the protocol, or <a href=\"http://www.microsoft.com/download/en/details.aspx?id=43\">don't speak it at all</a>, or <a href=\"http://www.mozilla.org/en-US/firefox/4.0b9/releasenotes/\">speak it but disable it by default</a>. Worryingly, the ultimate fall-through is a Flash applet that establishes that same socket connection, which means some people won't be getting this either, but at least it works most of the time. No one else seems to have thought it out quite as far<a href=\"#foot-Thu-Feb-23-154658EST-2012\" name=\"note-Thu-Feb-23-154658EST-2012\">[3]</a>.</p>

<p>In any case, this is a decent choice where you need true bi-directional communication, but it seems like implementing it here would cause me some unnecessary headaches, and I don't think turn-based games strictly require it.</p>

<h2>Comet</h2>

<p>This is just a bending of the standard request/response protocol that the web is built out of. Usually, the client sends a request and the server responds to it right away, either with the requested information or an error code. \"Comet\" is a name for the situation where the server instead sits on the request until there's something new to send over, at which point it responds and the client immediately sends a new request that the server will respond to at its leisure. That's actually a pretty good option, except that I happen to be using a server<a href=\"#foot-Thu-Feb-23-154704EST-2012\" name=\"note-Thu-Feb-23-154704EST-2012\">[4]</a> that spawns a new thread per connection. In a Comet situation, this gets out of hand, because you essentially have a thread running <i>constantly</i> per user<a href=\"#foot-Thu-Feb-23-154716EST-2012\" name=\"note-Thu-Feb-23-154716EST-2012\">[5]</a>. If I were running a single threaded server, this may be a better option, but as it stands, it seems like I'd have to do a <i>lot</i> more work for what I was hoping would be a simple project. So, no dice here either, sadly.</p>

<h2>Ajax Polling</h2>

<p>I'm reasonably sure everyone who cares knows what this is by now. You have a specific page built to send out updates, and each client has code that looks something like</p>

<pre>setInterval(5000, <span style=\"color: #8b2252;\">\"updateFoo()\"</span>);

function updateFoo(){
    $.get(<span style=\"color: #8b2252;\">\"/update-url\"</span>, function (data) {
              $(<span style=\"color: #8b2252;\">\"#result\"</span>).html(data);
          });
}</pre>

<p>The end result being that you can fake bi-directional communication by just having the client poke the server repeatedly and integrate data from the responses as it goes. The only issue with this approach is the overhead; go ahead and take a look at <a href=\"http://en.wikipedia.org/wiki/XMLHttpRequest\">this breakdown of the process</a>. Calling complexity aside<a href=\"#foot-Thu-Feb-23-154755EST-2012\" name=\"note-Thu-Feb-23-154755EST-2012\">[6]</a>, by my count, a request ends up transferring twice and a bit the obvious amount of data involved<a href=\"#foot-Thu-Feb-23-154808EST-2012\" name=\"note-Thu-Feb-23-154808EST-2012\">[7]</a>. Some issues also arise from naive use of the method, which I'll get into with the final option I considered.</p>

<h2>Server-Sent-Events</h2>

<p>are basically formalized, lightweight Ajax polling with a few small benefits. The bad part is that you're still basically instructing the client to poke the server at a given interval, but the response is structured differently. Something like </p>

<pre>data: Foo bar baz</pre>

<p>with options, instead of the giant XML response. The options include multi-lining the message<a href=\"#foot-Thu-Feb-23-154814EST-2012\" name=\"note-Thu-Feb-23-154814EST-2012\">[8]</a></p>

<pre>data: Foo bar
data: baz</pre>

<p>providing each message with an identifier for synchronization purposes</p>

<pre>id: 1
data: Foo bar
data: baz</pre>

<p>letting the server specify when the next ping should happen</p>

<pre>retry: 10000
data: Stop bothering me</pre>

<p>and specifying event types</p>

<pre>event: question
data: How I parse HTML with regular expression
event: deathThreat
data: Fuck off and die</pre>

<p>Putting it all together, this communication method seems to be passable for writing turn-based web games.</p>

<pre>id: 2
event: join
data: Bazmonkey
event: shot
id: 3
data: { \"player\" : \"Bazmonkey\", \"result\": \"miss\", \"x\" : \"10\", \"y\" : \"32\" }
event: turn
id: 4
data: You
event: shot
id: 5
data: { \"player\" : \"You\", \"result\": \"hit\", \"x\" : \"23\", \"y\" : \"14\" }
event: turn
id: 6
data: Bazmonkey
</pre>

<p>The <code>id</code> message is automatically used by the client to sync messages<a href=\"#foot-Thu-Feb-23-154832EST-2012\" name=\"note-Thu-Feb-23-154832EST-2012\">[9]</a>, the <code>event</code> message can be used to set up different client behavior based on what kind of event happened on the server, and the <code>retry</code> message gives the server a way to tap out if too many users are pile-driving it at the moment. It still doesn't \"solve\" the fundamental asymmetry between client and server in HTTP, and it will never be as responsive as an actual socket connection, but it seems to be a Good Enough™ solution that address most of the issues I'd be thinking about if I tried to implement <a href=\"https://github.com/Inaimathi/strifebarge\">StrifeBarge</a> using Ajax polling.</p>

<p>In addition to working on StrifeBarge for the next little while, I'll also be poking semi-seriously at <a href=\"http://nodejs.org/\">node.js</a><a href=\"#foot-Sun-Feb-26-032221EST-2012\" name=\"note-Sun-Feb-26-032221EST-2012\">[10]</a>, so I may end up using websockets for <i>something</i>, but SSE wins it for the time being.</p>

<hr />
<h5>Footnotes</h5>
<p>1 - <a href=\"#note-Thu-Feb-23-154642EST-2012\" name=\"foot-Thu-Feb-23-154642EST-2012\">[back]</a> - As opposed to just web-programming.</p>

<p>2 - <a href=\"#note-Thu-Feb-23-154647EST-2012\" name=\"foot-Thu-Feb-23-154647EST-2012\">[back]</a> - Since thoroughly outdated.</p>

<p>3 - <a href=\"#note-Thu-Feb-23-154658EST-2012\" name=\"foot-Thu-Feb-23-154658EST-2012\">[back]</a> - Though, as usual, someone has taken it upon themselves to <a href=\"https://github.com/e-user/hunchensocket\">clone relevant bits in Common Lisp</a>, so there.</p>

<p>4 - <a href=\"#note-Thu-Feb-23-154704EST-2012\" name=\"foot-Thu-Feb-23-154704EST-2012\">[back]</a> - Hunchentoot, at the moment.</p>

<p>5 - <a href=\"#note-Thu-Feb-23-154716EST-2012\" name=\"foot-Thu-Feb-23-154716EST-2012\">[back]</a> - Typically, each thread lives just long enough to send a response, but since we're <code>sleep</code>ing on each Comet request, they pile up fast.</p>

<p>6 - <a href=\"#note-Thu-Feb-23-154755EST-2012\" name=\"foot-Thu-Feb-23-154755EST-2012\">[back]</a> - Which has largely been smoothed out by modern JS frameworks.</p>

<p>7 - <a href=\"#note-Thu-Feb-23-154808EST-2012\" name=\"foot-Thu-Feb-23-154808EST-2012\">[back]</a> - Since the raw response contains that data twice, and HTTP headers are sent each way.</p>

<p>8 - <a href=\"#note-Thu-Feb-23-154814EST-2012\" name=\"foot-Thu-Feb-23-154814EST-2012\">[back]</a> - Though I can't find a line limit anywhere in <a href=\"http://dev.w3.org/html5/eventsource/\">the spec</a>, so that seems pointless unless you plan to manually format text you're sending in this fashion.</p>

<p>9 - <a href=\"#note-Thu-Feb-23-154832EST-2012\" name=\"foot-Thu-Feb-23-154832EST-2012\">[back]</a> - So if for some reason your connection blows, you won't miss the fact that your opponent fired, <i>or</i> end up getting 27 separate notifications of the same event.</p>

<p>10 - <a href=\"#note-Sun-Feb-26-032221EST-2012\" name=\"foot-Sun-Feb-26-032221EST-2012\">[back]</a> - Thanks in part to some links from a friend from the Toronto Lisp Group, if you'll believe that.</p>
  "))
((5202 3723 569503000) :INSERT (73 :POSTED 3539221200))
((5202 3723 569508000) :INSERT (73 :TAG :CLIENT-SIDE))
((5202 3723 569512000) :INSERT (73 :TAG :COMET))
((5202 3723 569516000) :INSERT (73 :TAG :HTML5))
((5202 3723 570698000) :INSERT
 (74 :TITLE "StrifeBarge Update and My Secure Misconceptions"))
((5202 3723 570708000) :INSERT (74 :FILE "strifebarge-update.html"))
((5202 3723 570711000) :INSERT (74 :EDITED 3610301457))
((5202 3723 570713000) :INSERT
 (74 :BODY
  "<p>Before I get to the StrifeBarge update, I've been thinking about a problem. It's one I vaguely assumed had been definitively solved, but it turns out that's only a matter of perspective. Now that I really sit down to think about how I'd implement a \"solution\", it's quite obvious that there is no good way of countering a sufficiently long-running and elaborate <a href=\"http://en.wikipedia.org/wiki/Man-in-the-middle_attack\">man-in-the-middle attack</a>.</p>

<ol>
  <li>You can thwart mere eavesdroppers by using <a href=\"http://mathworld.wolfram.com/Diffie-HellmanProtocol.html\">DH</a> or similar</li>
  <li>You can counter short-term MitM attacks by relying on keys that you exchange with Alice before the attack started</li>
  <li>You can counter long-term MitM attacks by relying on some additional authentication channel like a phonecall, video conference or SMS chain</li>
  <li>You can counter elaborate, long-term MitM attacks by relying on a web of trust to confirm Alice's key</li>
  <li>You can counter elaborate, network-saturating, long-term MitM attacks by flying out and actually meeting Alice, exchanging keys in <a href=\"http://en.wikipedia.org/wiki/Public-key_cryptography\">both</a> <a href=\"http://www.tigerdirect.ca/applications/category/category_tlc.asp?CatId=379&name=USB%20Flash%20Drive\">senses</a></li>
</ol>

<p>I'm not entirely sure how you can counter supremely elaborate, long-term MitM attacks, but it probably involves several independent notaries that hate each other as well as Alice<a href=\"#foot-Sat-Mar-03-111456EST-2012\" name=\"note-Sat-Mar-03-111456EST-2012\">[1]</a>, or possibly a DNA sample in addition to the key exchange. That list was cumulative, by the way, not independent.</p>

<p>Handshakes or public-key crypto get you past regular old surveillance. Both together can get you past an active attacker on the current line, but that's basically it. After that, any technique you try only buys you a bit of extra confidence that your messages aren't being tampered with, and that confidence approaches 100% without ever getting there. Certificate authorities can be compromised, networks of trust can be saturated by an attacker's agents<a href=\"#foot-Sat-Mar-03-111752EST-2012\" name=\"note-Sat-Mar-03-111752EST-2012\">[2]</a>, and any other authentication mechanism I can think of can be faked by a sufficiently motivated attacker.</p>

<p>Now, the good news is that StrifeBarge isn't anything like a juicy enough target to tempt the Chinese government into trying something. The bad news is that it's never really possible to fully trust a given user. The best you can hope to do is maximize the chance that they're really who they say they are. From another perspective, the best you can do is make the resource expenditure required to fool your authentication greater than the potential payoff in succeeding. It's relevant, because you don't want an opponent to be able to peek over at your map during a game for some hopefully obvious reasons<a href=\"#foot-Sat-Mar-03-111908EST-2012\" name=\"note-Sat-Mar-03-111908EST-2012\">[3]</a>. This really, truly looked like it should have been solved already, until I plucked it from the periphery of my thoughts and focused on it for a couple of days. Upon closer inspection, I'm not sure why I ever thought that.</p>

<p>With that, let's move on to the highlights.</p>

<p>The big change is that I've settled on a license. The intention is that this game should be out in public for educational purposes in case anyone actually cares, so the AGPL seems most appropriate<a href=\"#foot-Sat-Mar-03-201833EST-2012\" name=\"note-Sat-Mar-03-201833EST-2012\">[4]</a>. I may also pull out the basic stuff into a separate turn-based-HTTP-game framework that I will release under MIT/BSD for people to more easily mess with. That's a long way off<a href=\"#foot-Sat-Mar-03-201845EST-2012\" name=\"note-Sat-Mar-03-201845EST-2012\">[5]</a>, but I thought I'd mention it.</p>

<p>The big, <i>noticeable</i> change is that styles, images and js have been incorporated semi-well into the program. It's gone into space rather than the traditional naval setting. Collecting the sprites was easier than it should have been, by the way, and that's entirely thanks to <a href=\"http://opengameart.org/\">OpenGameArt</a>. The star background is going to have to be replaced by something snazzier at some point, but the rest of the graphics are actually quite nice.</p>

<p>Part of integrating CSS included using <a href=\"https://github.com/Inaimathi/cl-css\"><code>cl-css</code></a>. I tried to avoid it, I really did, because I wanted you to be able to install StrifeBarge just by <code>ql:quickload</code>ing the single appropriate package name, but doing CSS3 directives manually sucks some of the biggest donkey testicles that exist on this earth. I decided that the ability to define functions like</p>

<pre><span style=\"color: #b22222;\">;;; </span><span style=\"color: #b22222;\">css.lisp
</span>
(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">css-rotate</span> (degrees)
  (<span style=\"color: #a020f0;\">let</span> ((d (format nil <span style=\"color: #8b2252;\">\"rotate(~adeg)\"</span> degrees)))
    `(<span style=\"color: #7a378b;\">:transform</span> ,d
      <span style=\"color: #7a378b;\">:-ms-transform</span> ,d
      <span style=\"color: #7a378b;\">:-webkit-transform</span> ,d
      <span style=\"color: #7a378b;\">:-o-transform</span> ,d
      <span style=\"color: #7a378b;\">:-moz-transform</span> ,d)))</pre>

<p>instead of manually writing this shit every time just about trumps ease of installation. Once the web stabilizes enough that the big browser writers don't feel the need to implement their own cutely named directives and ignore CSS3 equivalents, I'll ditch my CSS generator. Until then, I will happily debase myself for the ability to define higher level constructs which will deal with the equine testicle sucking on my behalf. I guess I could submit the library for consideration in <a href=\"http://www.quicklisp.org/\">quicklisp</a>, but I really, really don't want to until I've ironed out that case-insensitivity issue, and possibly defined CSS3-abstracting-functions as part of the default library (though I'm still pretty sure cl-css will ever attempt to validate your input).</p>

<p>Finally, the default <code>mapcan</code> bit me, so I needed a replacement.</p>

<pre><span style=\"color: #b22222;\">;;; </span><span style=\"color: #b22222;\">a/util.lisp
</span>... 

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">mapcan-f</span> (fn a-list)
  <span style=\"color: #8b2252;\">\"Functional unary mapcan\"</span>
  (<span style=\"color: #a020f0;\">loop</span> for i in a-list append (funcall fn i)))

...</pre>

<p>I estimate having spent a good twenty minutes or so puzzling over why <code>(ships a-player)</code> was suddenly returning a very odd list of elements once a game had started. The reason is that <code>mapcan</code> uses <code>nconc</code> to put its results together, which means that the arguments are going to be modified destructively. So I guess this is another place where <a href=\"/article?name=game-jam.html\">State Is Hard</a>. I ended up defining the functional, unary <code>mapcan</code> seen above, which suffices for my purposes.</p>

<p>And on we go to the <code>diff</code>s. I don't actually expect anyone to read past this, by the way, but thinking about code I wrote well enough to explain it prosaically has proven to be a very effective technique<a href=\"#foot-Sat-Mar-03-202120EST-2012\" name=\"note-Sat-Mar-03-202120EST-2012\">[6]</a>. Oh, also, before I forget, we've gone from 220 lines to about 550 (and that new count <i>doesn't</i> include the license info, generated css/js, or any of the images being tracked as binary files).</p>

<pre><span style=\"color: #7f7f7f;\">diff --git a/board.lisp b/board.lisp
index b18c662..b25c106 100644
</span><span style=\"background-color: #cccccc;\">--- </span><span style=\"background-color: #b3b3b3; font-weight: bold;\">a/board.lisp</span><span style=\"background-color: #cccccc;\">
+++ </span><span style=\"background-color: #b3b3b3; font-weight: bold;\">b/board.lisp</span><span style=\"background-color: #cccccc;\">
</span><span style=\"background-color: #cccccc;\">@@ -16,22 +16,39 @@</span>
<span style=\"color: #7f7f7f;\"> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 (defmethod space-at ((b board) x y) (nth x (nth y (spaces b))))
 
</span>+(defun create-point (direction x y i j)
+  (if (eq :vertical direction)
+      (list (+ i x) (+ j y))
+      (list (+ j x) (+ i y))))
+
<span style=\"color: #7f7f7f;\"> (defmethod assign-ship-spaces ((s ship) direction x y)
</span>-  (loop for i from 0 to (- (space-count s) 1)
-       if (eq :vertical direction)
-         collect (cons x (+ i y))
-       else
-         collect (cons (+ i x) y)))
+  \"Given a ship, a direction and an initial x/y, 
+returns a list of spaces that the ship will occupy.\"
+  (mapcan (lambda (i) 
+           (mapcar (lambda (j)
+                     (create-point direction x y i j)) 
+                   (range 0 (- (len s) 1))))
+         (range 0 (- (wid s) 1))))
<span style=\"color: #7f7f7f;\"> 
 (defmethod position-ship ((s ship) (b board))
</span>-  (let* ((x (random (- (width b) (space-count s))))
-        (y (random (- (height b) (space-count s))))
-        (direction (pick '(:vertical :horizontal)))
+  \"Given a ship and a board, positions a ship on the board,
+ensuring there are no collisions.\"
+  (let* ((direction (pick '(:vertical :horizontal)))
+        (ship-v-padding (+ 1 (if (eq :vertical direction) (len s) (wid s))))
+        (ship-h-padding (+ 1 (if (eq :vertical direction) (wid s) (len s)))) 
+        (x (random (- (width b) ship-h-padding))) 
+        (y (random (- (height b) ship-v-padding)))
<span style=\"color: #7f7f7f;\">         (ship-spaces (assign-ship-spaces s direction x y)))
</span>-    (if (every (lambda (p) (empty-space-at? b (car p) (cdr p))) ship-spaces)
-       (progn (setf (direction s) direction)
-              (loop for (space-x . space-y) in ship-spaces
-                    do (setf (contents (space-at b space-x space-y)) s)))
+    (if (every (lambda (p) (empty-space-at? b (car p) (cadr p))) ship-spaces)
+       (progn (setf (direction s) direction 
+                    (x s) x 
+                    (y s) y)
+              (loop for (space-x space-y) in ship-spaces
+                    do (let ((current-space (space-at b space-x space-y))) 
+                         (setf (contents current-space) s))))
<span style=\"color: #7f7f7f;\">        (position-ship s b))))
 
</span> (defun make-board (list-of-ships)</pre>

<p>I didn't do a <i>complete</i> overhaul of the ship placement routines, but I got pretty close. I abstracted point creation a bit and replaced <code>loop</code> with a nested <code>mapcan</code>/<code>mapcar</code> on the results of the <code>range</code> utility function I mentioned last time. That's back by the way. <code>mapcan</code> doesn't cause any trouble here because <code>range</code> creates an entirely new list, which means that there are no outside references that might get tripped up by <code>nconc</code>. Also, the reason for nesting iterations in the <code>assign-ship-spaces</code> function is that I'm now generating ships wider than one square<a href=\"#foot-Sat-Mar-03-202239EST-2012\" name=\"note-Sat-Mar-03-202239EST-2012\">[7]</a>.</p>

<pre><span style=\"background-color: #cccccc;\">@@ -44,8 +61,21 @@</span>
<span style=\"color: #7f7f7f;\"> ;;;;;;;;;;;;;;;;;;;; display
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 (defmethod echo ((b board) (p player))
</span>-  (with-html-output (*standard-output* nil :indent t)
-    (:table :id \"game-board\"
-           (mapc (lambda (row) 
-                   (htm (:tr (mapc (lambda (s) (echo s p)) row)))) 
-                 (spaces b)))))

+  (html-to-stout
+    (:div :id \"board-wrapper\"
+         (loop for s in (ships p)
+               do (str (echo s p)))
+         (:table :id \"game-board\"
+                 (mapc (lambda (row) 
+                         (htm (:tr (mapc (lambda (s) (echo s p)) row)))) 
+                       (spaces b))))))
+
+(defmethod image-file ((s ship)) (format nil \"/img/ships/~(~a~).png\" (type-of s)))
+
+(defmethod echo ((s ship) (p player))
+  (let ((direction (direction s)))
+    (html-to-str (:img :class \"ship\" 
+                      :style (inline-css `(:left ,(css-left s) :top ,(px (board-scale (y s)))
+                                           :width ,(board-scale (len s)) :height ,(board-scale (wid s))
+                                           ,@(when (eq :vertical direction) (css-rotate 90))))
+                      :src (image-file s)))))</pre>

<p>The rest of the additions here just deal with outputting the appropriate html and styles for <code>ship</code>s and <code>board</code>s; that's the price you pay for choosing a more pleasing visual representation than just ascii characters in a table. There's enough <code>ship</code>-specific code at this point for me to consider pulling it out into its own file, but not really enough to actually force me to do it yet. Also, I get the feeling I should be referring to these as \"barges\" instead. In fact, that's two mental notes for after the write-up.</p>

<pre><span style=\"color: #b22222;\">;;; </span><span style=\"color: #b22222;\">css.lisp
</span>(<span style=\"color: #a020f0;\">in-package</span> #<span style=\"color: #7a378b;\">:strifebarge</span>)

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">css-space-size</span> ()
    (<span style=\"color: #a020f0;\">let</span> ((d (format nil <span style=\"color: #8b2252;\">\"~apx\"</span> *board-square-size*)))
      `(<span style=\"color: #7a378b;\">:width</span> ,d <span style=\"color: #7a378b;\">:height</span> ,d)))

(<span style=\"color: #a020f0;\">defmacro</span> <span style=\"color: #0000ff;\">css-transform-origin</span> (x y)
  (<span style=\"color: #a020f0;\">let</span> ((d (format nil <span style=\"color: #8b2252;\">\"~a ~a\"</span> x y)))
    `'(<span style=\"color: #7a378b;\">:transform-origin</span> ,d
       <span style=\"color: #7a378b;\">:-ms-transform-origin</span> ,d
       <span style=\"color: #7a378b;\">:-webkit-transform-origin</span> ,d
       <span style=\"color: #7a378b;\">:-moz-transform-origin</span> ,d
       <span style=\"color: #7a378b;\">:-o-transform-origin</span> ,d)))

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">css-rotate</span> (degrees)
  (<span style=\"color: #a020f0;\">let</span> ((d (format nil <span style=\"color: #8b2252;\">\"rotate(~adeg)\"</span> degrees)))
    `(<span style=\"color: #7a378b;\">:transform</span> ,d
      <span style=\"color: #7a378b;\">:-ms-transform</span> ,d
      <span style=\"color: #7a378b;\">:-webkit-transform</span> ,d
      <span style=\"color: #7a378b;\">:-o-transform</span> ,d
      <span style=\"color: #7a378b;\">:-moz-transform</span> ,d)))

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">css-scale</span> (scale-factor)
  (<span style=\"color: #a020f0;\">let</span> ((d (format nil <span style=\"color: #8b2252;\">\"scale(~a,~a)\"</span> scale-factor scale-factor)))
    `(<span style=\"color: #7a378b;\">:transform</span> ,d
      <span style=\"color: #7a378b;\">:-ms-transform</span> ,d
      <span style=\"color: #7a378b;\">:-webkit-transform</span> ,d
      <span style=\"color: #7a378b;\">:-o-transform</span> ,d
      <span style=\"color: #7a378b;\">:-moz-transform</span> ,d)))

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">px</span> (num) (format nil <span style=\"color: #8b2252;\">\"~apx\"</span> num))

(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">css-left</span> ((s ship))
  (px (<span style=\"color: #a020f0;\">if</span> (eq <span style=\"color: #7a378b;\">:vertical</span> (direction s))
          (board-scale (+ (x s) (wid s)))
          (board-scale (x s)))))

(compile-css <span style=\"color: #8b2252;\">\"css/strifebarge.css\"</span>
             `((body <span style=\"color: #7a378b;\">:background-color</span> \\#000 <span style=\"color: #7a378b;\">:background-image</span> <span style=\"color: #8b2252;\">\"url(/img/galaxy.png)\"</span> <span style=\"color: #7a378b;\">:padding</span> 0px <span style=\"color: #7a378b;\">:margin</span> 0px <span style=\"color: #7a378b;\">:font-family</span> sans-serif)

               (.menu-item <span style=\"color: #7a378b;\">:padding</span> 10px <span style=\"color: #7a378b;\">:background-color</span> \\#eee <span style=\"color: #7a378b;\">:font-size</span> large <span style=\"color: #7a378b;\">:font-weight</span> bolder)
               (<span style=\"color: #8b2252;\">\"#player-console .menu-item\"</span> <span style=\"color: #7a378b;\">:background-color</span> transparent)

               (\\#board-wrapper <span style=\"color: #7a378b;\">:position</span> absolute)
               (\\#game-board <span style=\"color: #7a378b;\">:border-spacing</span> 0px <span style=\"color: #7a378b;\">:color</span> \\#fff)
               (<span style=\"color: #8b2252;\">\"#game-board .miss\"</span> <span style=\"color: #7a378b;\">:font-family</span> courier <span style=\"color: #7a378b;\">:font-size</span> x-small)
               (<span style=\"color: #8b2252;\">\"#game-board .hit\"</span> ,@(css-space-size))
               (<span style=\"color: #8b2252;\">\"#game-board td\"</span> ,@(css-space-size) <span style=\"color: #7a378b;\">:padding</span> 0px)
               (<span style=\"color: #8b2252;\">\"#game-board .shot-link\"</span> <span style=\"color: #7a378b;\">:height</span> 100% <span style=\"color: #7a378b;\">:width</span> 100% <span style=\"color: #7a378b;\">:display</span> block)
               (<span style=\"color: #8b2252;\">\"#game-board .shot-link:hover\"</span> <span style=\"color: #7a378b;\">:background-position</span> center <span style=\"color: #7a378b;\">:border</span> none <span style=\"color: #7a378b;\">:background-image</span> <span style=\"color: #8b2252;\">\"url(/img/crosshairs/crosshair9.png)\"</span>)

               (\\#player-console <span style=\"color: #7a378b;\">:float</span> right <span style=\"color: #7a378b;\">:width</span> 110px <span style=\"color: #7a378b;\">:margin</span> ,(px *board-square-size*) <span style=\"color: #7a378b;\">:padding</span> 5px <span style=\"color: #7a378b;\">:background-color</span> \\#eee)
               (.ship-stats <span style=\"color: #7a378b;\">:margin-bottom</span> 15px)
               (<span style=\"color: #8b2252;\">\".ship-stats img\"</span> <span style=\"color: #7a378b;\">:width</span> 60px <span style=\"color: #7a378b;\">:margin</span> <span style=\"color: #8b2252;\">\"5px 20px\"</span>)
               (<span style=\"color: #8b2252;\">\".ship-stats .total-hp\"</span> <span style=\"color: #7a378b;\">:height</span> 25px <span style=\"color: #7a378b;\">:background-color</span> red <span style=\"color: #7a378b;\">:width</span> 100px <span style=\"color: #7a378b;\">:border</span> <span style=\"color: #8b2252;\">\"2px solid black\"</span>)
               (<span style=\"color: #8b2252;\">\".ship-stats .hp-remaining\"</span> <span style=\"color: #7a378b;\">:height</span> 25px <span style=\"color: #7a378b;\">:background-color</span> green <span style=\"color: #7a378b;\">:font-weight</span> bold)

               (.ship ,@(css-transform-origin 0 0) <span style=\"color: #7a378b;\">:position</span> absolute <span style=\"color: #7a378b;\">:z-index</span> -10000)))</pre>

<p>We'll dispense with the <code>diff</code> here because <code>css.lisp</code> is an entirely new file. This is basically just how I like to write CSS in Lisp projects. The library I'm using is cl-css; a lightweight, non-validating CSS generator of my own devising. Use it if you like, but remember that it does downcase everything<a href=\"#foot-Sat-Mar-03-202411EST-2012\" name=\"note-Sat-Mar-03-202411EST-2012\">[8]</a> you pass it at the moment, so you may have a rough time using it with certain JS libraries that insist on using <code>CamelCase</code> or <code>snakeCase</code> rather than <code>lisp-case</code> for their DOM classes. As mentioned, the main reason I resorted to this can be seen in the <code>css-scale</code>, <code>css-rotate</code> and <code>css-transform-origin</code> macros, which just paper over the fact that browser developers don't quite seem to be cooperating yet.</p>

<pre><span style=\"color: #7f7f7f;\">diff --git a/game.lisp b/game.lisp
index 476baa5..c4c82e6 100644
</span><span style=\"background-color: #cccccc;\">--- </span><span style=\"background-color: #b3b3b3; font-weight: bold;\">a/game.lisp</span><span style=\"background-color: #cccccc;\">
+++ </span><span style=\"background-color: #b3b3b3; font-weight: bold;\">b/game.lisp</span><span style=\"background-color: #cccccc;\">
</span><span style=\"background-color: #cccccc;\">@@ -9,15 +9,48 @@</span>
<span style=\"color: #7f7f7f;\">     p))
 
 (defun make-game (&amp;rest players)
</span>-  (let ((board (make-board (mapcan #'ships players))))
+  (let ((board (make-board (mapcan-f #'ships players))))
     (make-instance 'game :board board :players players :waiting-for players :turn-stack players)))</pre>

<p>This is where that <code>mapcan</code> bug bit. As you can see, it's been replaced by <code>mapcan-f</code> which we've already gone over.</p>
 
<pre>+;;;;;;;;;;;;;;;;;;;; predicates
+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
+(defmethod turn-p ((g game) &amp;optional (player (session-value :player))) 
+  (eq (car (turn-stack g)) player))
<span style=\"color: #7f7f7f;\"> 
 ;;;;;;;;;;;;;;;;;;;; display
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
</span>-(defmethod echo ((g game) (p player))
-  (with-html-output-to-string (*standard-output* nil :prologue t :indent t)
-    (:html (:body (echo (board g) p)))))
+(defmethod echo ((g game) (p player)) (echo (board g) p))
+
+(defmethod echo-console ((g game) (p player))
+  (html-to-stout (:div :id \"player-console\" 
+                      (:div :id \"turn-marker\" (str (if (turn-p *game*) \"Your turn\" \"Their turn\")))
+                      (echo-stats p)
+                      (:a :class \"menu-item\" :href \"/quit-game\" \"Quit Game\"))))
+
+(defmethod echo-stats ((p player))
+  (html-to-stout 
+    (:div :class \"player-ships\"
+         (loop for s in (ships p)
+               do (str (echo-stats s))))))
+
+(defmethod echo-stats ((s ship))
+  (html-to-str
+    (:div :id (instance-to-id s) :class \"ship-stats\" (:img :src (image-file s))
+         (htm (:div :class \"total-hp\" 
+                    (:div :class \"hp-remaining\" 
+                          :style (inline-css `(:width ,(format nil \"~a%\" (hp-% s))))
+                          (:span :class \"num-hp\" (str (remaining-hp s))) \"/\" (:span :class \"num-total-hp\" (str (hp s)))))))))
+
+(defmethod remaining-hp ((s ship))
+  (- (space-count s) (damage s)))
+
+(defmethod hp ((s ship)) (space-count s))
+
+(defmethod hp-% ((s ship))
+  (round (* 100 (/ (remaining-hp s) (space-count s)))))
+
+(defmethod to-json ((s ship))
+  (encode-json-to-string `((ship-id . ,(instance-to-id s)) (hp . ,(remaining-hp s)) (percent . ,(hp-% s)))))
</pre> 

<p>Again, most of the additions here have to do with generating html/json representations of classes we've already gone over. The semi-interesting bits are the <code>ship</code> <code>hp</code> calculations (which would be good candidates for moving out into that <code>ship</code>-specific file I mentioned thinking about). <code>instance-to-id</code> is something we'll go over later because I'm unsure of its implementation. The point is to take an instance and return a string suitable for use as a CSS id while being ambiguous enough that a player can't get too much information from it<a href=\"#foot-Sat-Mar-03-202709EST-2012\" name=\"note-Sat-Mar-03-202709EST-2012\">[9]</a>.</p>

<pre><span style=\"background-color: #cccccc;\">@@ -27,9 +60,15 @@</span>
<span style=\"color: #7f7f7f;\">       (setf (turn-stack g) (players g))))
 
 (defmethod fire ((g game) (p player) x y)
</span>-  (let ((result (make-instance 
-                (if (empty-space-at? (board g) x y) 'miss 'hit)
-                :player p :x x :y y)))
-    (push result (history g))
-    (setf (move (space-at (board g) x y)) result)
+  (let* ((space (space-at (board g) x y))
+        (result (make-instance 
+                 (if (empty-space? space) 'miss 'hit)
+                 :player p :x x :y y)))
+    (push-record g \"shot\" (to-json result))
+    (unless (empty-space? space)
+      (let ((ship (contents space)))
+       (setf (ship result) ship)
+       (incf (damage ship))
+       (push-record g \"ship-damage\" (to-json ship))))
+    (setf (move space) result)
     result))</pre>

<p><code>fire</code> has changed pretty substantially. First off, it's now making calls to <code>push-record</code> (which we'll go over in the next file), and it's also applying damage to the stricken <code>ship</code> in addition to placing the shot marker on the <code>board</code> as before. The new stuff is all happening in that <code>unless</code> block.</p>

<pre><span style=\"color: #b22222;\">;;; </span><span style=\"color: #b22222;\">history-event.lisp
</span>(<span style=\"color: #a020f0;\">in-package</span> <span style=\"color: #7a378b;\">:strifebarge</span>)

<span style=\"color: #b22222;\">;;;;;;;;;;;;;;;;;;;; </span><span style=\"color: #b22222;\">creation
</span><span style=\"color: #b22222;\">;;;;;;;;;;;;;;;;;;;;;;;;;;;;;</span><span style=\"color: #b22222;\">
</span>(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">to-json</span> ((m move))
  (encode-json-to-string `((x . ,(x m)) (y . ,(y m)) 
                           (text . ,(echo m (session-value <span style=\"color: #7a378b;\">:player</span>))))))

(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">push-record</span> ((g game) event-type message)
  (push (make-instance 'history-event
                       <span style=\"color: #7a378b;\">:id</span> (length (history g))
                       <span style=\"color: #7a378b;\">:event-type</span> event-type
                       <span style=\"color: #7a378b;\">:message</span> message)
        (history g)))

<span style=\"color: #b22222;\">;;;;;;;;;;;;;;;;;;;; </span><span style=\"color: #b22222;\">display
</span><span style=\"color: #b22222;\">;;;;;;;;;;;;;;;;;;;;;;;;;;;;</span><span style=\"color: #b22222;\">
</span>(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">emit-record</span> ((g game) (p player))
  (apply #'concatenate 
         (cons 'string 
               (mapcar (<span style=\"color: #a020f0;\">lambda</span> (r) (emit-record r p)) 
                       (reverse (take 10 (history g)))))))

(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">emit-record</span> ((e history-event) (p player))
  (format nil <span style=\"color: #8b2252;\">\"id: ~a~%event: ~a~%data: ~a~%~%\"</span>
          (id e) (event-type e) (message e)))</pre>

<p>This is another new file. The interactions involving <code>game</code> history were getting complex enough that I wanted them on their own, but I ended up refactoring a lot of it out, leaving this rather sparse file. This stuff deals with the information we'll be passing back to the clients in-flight. To that end, I've defined <code>history-event</code> as its own class, and made sure that it handles <code>echo</code>s properly. <code>push-record</code> is also a shortcut method you've already seen used. All of this could fit comfortable in the <code>game</code> file, and it probably will be moved before the next check-in.</p>

<pre><span style=\"color: #b22222;\">;;; </span><span style=\"color: #b22222;\">js.lisp
</span>(<span style=\"color: #a020f0;\">in-package</span> <span style=\"color: #7a378b;\">:strifebarge</span>)

(compile-js <span style=\"color: #8b2252;\">\"js/strifebarge.js\"</span> <span style=\"color: #8b2252;\">\"strifebarge-js.lisp\"</span>
            (ps 
              (<span style=\"color: #a020f0;\">define-event-source</span> source <span style=\"color: #8b2252;\">\"update-map\"</span>)

              (<span style=\"color: #a020f0;\">define-event-listener</span> source <span style=\"color: #8b2252;\">\"turn\"</span>
                (<span style=\"color: #a020f0;\">lambda</span> (e) ($ <span style=\"color: #8b2252;\">\"#turn-marker\"</span> (text (chain e data)))))

              (<span style=\"color: #a020f0;\">define-event-listener</span> source <span style=\"color: #8b2252;\">\"ship-damage\"</span>
                (<span style=\"color: #a020f0;\">lambda</span> (e)
                  (<span style=\"color: #a020f0;\">let*</span> ((d (parse-json (chain e data))) 
                         (ship-id (+ <span style=\"color: #8b2252;\">\"#\"</span> (@ d <span style=\"color: #8b2252;\">\"shipId\"</span>))))
                    ($ ship-id (find <span style=\"color: #8b2252;\">\".num-hp\"</span>) (text (@ d <span style=\"color: #8b2252;\">\"hp\"</span>)))
                    ($ ship-id (find <span style=\"color: #8b2252;\">\".hp-remaining\"</span>) (width (+ (@ d <span style=\"color: #8b2252;\">\"percent\"</span>) <span style=\"color: #8b2252;\">\"%\"</span>))))))

              (<span style=\"color: #a020f0;\">define-event-listener</span> source <span style=\"color: #8b2252;\">\"shot\"</span>
                (<span style=\"color: #a020f0;\">lambda</span> (e) 
                  (<span style=\"color: #a020f0;\">let</span> ((d (parse-json (chain e data))))
                    ($-space-at ((@ d <span style=\"color: #8b2252;\">\"x\"</span>) (@ d <span style=\"color: #8b2252;\">\"y\"</span>)) (html (@ d <span style=\"color: #8b2252;\">\"text\"</span>))))))

              (<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">send-shot</span> (x y)
                (post-to <span style=\"color: #8b2252;\">\"/turn\"</span> 
                         (create <span style=\"color: #7a378b;\">:x</span> x <span style=\"color: #7a378b;\">:y</span> y) 
                         (<span style=\"color: #a020f0;\">lambda</span> (data)
                           ($-space-at (x y) (html data))
                           ($ <span style=\"color: #8b2252;\">\"#turn-marker\"</span> (text <span style=\"color: #8b2252;\">\"Their Turn\"</span>)))))))</pre>

<p>Another entirely new file. This is what <a href=\"http://common-lisp.net/project/parenscript/\"><code>parenscript</code></a> tends to look like if you use it with <a href=\"http://jquery.com/\">jQuery</a>. Most of this deals with the server-sent-event stuff we need to send incremental, on-the-fly updates to the client. Particularly note the <code>define-event-listener</code>s and <code>define-event-source</code>. Neither are primitives, and we'll discuss implications in a moment. The only other thing we've got here is <code>send-shot</code>, which is actually an ajax call to <code>/turn</code>. It doesn't bother doing anything if it's not your turn (defined implicitly by the <code>assert</code>s we saw last time), but places the shot flag and updates the turn marker when needed.</p>


<pre><span style=\"color: #b22222;\">;;; </span><span style=\"color: #b22222;\">js-macros.lisp
</span>(<span style=\"color: #a020f0;\">in-package</span> <span style=\"color: #7a378b;\">:strifebarge</span>)

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">compile-js</span> (file-name origin js)
  (<span style=\"color: #a020f0;\">with-open-file</span> (stream file-name <span style=\"color: #7a378b;\">:direction</span> <span style=\"color: #7a378b;\">:output</span> <span style=\"color: #7a378b;\">:if-exists</span> <span style=\"color: #7a378b;\">:supersede</span> <span style=\"color: #7a378b;\">:if-does-not-exist</span> <span style=\"color: #7a378b;\">:create</span>)
    (format stream <span style=\"color: #8b2252;\">\"//////////~%// This is a generated file. ~%// If you want to edit this javascript, tweak '~a' and re-evaluate it instead.~%//////////~%~%\"</span> origin)
    (format stream js)))

<span style=\"color: #b22222;\">;;;;;;;;;;;;;;; </span><span style=\"color: #b22222;\">basic shortcuts
</span>(defpsmacro $ (selector <span style=\"color: #228b22;\">&amp;body</span> chains)
  `(chain (j-query ,selector) ,@chains))

(defpsmacro fn (<span style=\"color: #228b22;\">&amp;body</span> body) `(<span style=\"color: #a020f0;\">lambda</span> () ,@body))

(defpsmacro doc-ready (<span style=\"color: #228b22;\">&amp;body</span> body) 
  `($ document (ready (fn ,@body))))

(defpsmacro parse-json (target)
  `(chain j-query (parse-j-s-o-n ,target)))

(defpsmacro post-to (target-page data-hash on-success)
  <span style=\"color: #8b2252;\">\"target-page is a page url.
data-hash is the data sent along as the post request; declared as (create :k v ...)
on-success is a function to run on a successful response; 
it should expect a single argument (the data returned by the target handler)\"</span>
  `(chain $ (post ,target-page
                  ,data-hash
                  ,on-success)))

<span style=\"color: #b22222;\">;;;;;;;;;;;;;;; </span><span style=\"color: #b22222;\">SSE specific
</span>(defpsmacro define-event-source (name source-url)
  `(<span style=\"color: #a020f0;\">defvar</span> ,name (new (-event-source ,source-url))))

(defpsmacro define-event-listener (event-source-name message-type on-receive)
  <span style=\"color: #8b2252;\">\"event-source-name must be a defined event source. 
message-type is the event label sent by the server for this action (the default label is 'message').
on-receive is a function called when a satisfying message is received. It should take one argument (the event).\"</span>
  `(chain ,event-source-name (add-event-listener ,message-type ,on-receive false)))

<span style=\"color: #b22222;\">;;;;;;;;;;;;;;; </span><span style=\"color: #b22222;\">StrifeBarge specific
</span>(defpsmacro $-space-at ((x y) <span style=\"color: #228b22;\">&amp;rest</span> chains)
  `($ <span style=\"color: #8b2252;\">\"#game-board tr\"</span> (eq ,y) (children <span style=\"color: #8b2252;\">\"td\"</span>) (eq ,x) ,@chains))</pre>

<p>This one's... a bit complicated. I went a bit heavy on the comments for exactly that reason. <code>compile-js</code> is just responsible for generating <code>js</code> files from <code>parenscript</code> code. The next few macros are jQuery-oriented shortcuts that I've <a href=\"/article?name=javascript-with-a-lisp.html\">already discussed</a> here<a href=\"#foot-Sat-Mar-03-203059EST-2012\" name=\"note-Sat-Mar-03-203059EST-2012\">[10]</a>. The <code>define</code> pair let me specify SSE feed sources and event handlers much more simply than I could in vanilla JS. <code>$-space-at</code> just lets me shortcut the selection of a map square.</p>

<pre><span style=\"color: #7f7f7f;\">diff --git a/model.lisp b/model.lisp
index 0ee1685..f6bb48c 100644
</span><span style=\"background-color: #cccccc;\">--- </span><span style=\"background-color: #b3b3b3; font-weight: bold;\">a/model.lisp</span><span style=\"background-color: #cccccc;\">
+++ </span><span style=\"background-color: #b3b3b3; font-weight: bold;\">b/model.lisp</span><span style=\"background-color: #cccccc;\">
</span><span style=\"background-color: #cccccc;\">@@ -1,23 +1,32 @@</span>
<span style=\"color: #7f7f7f;\"> (in-package :strifebarge)
 
 (defclass ship ()
</span>-  ((space-count :reader space-count :initarg :space-count)
+  ((wid :reader wid :initarg :wid :initform 1)
+   (len :reader len :initarg :len)
+   (x :accessor x :initarg :x)
+   (y :accessor y :initarg :y)
+   (space-count :accessor space-count :initarg :space-count)
<span style=\"color: #7f7f7f;\">    (player :reader player :initarg :player)
    (damage :accessor damage :initform 0)
    (direction :accessor direction :initarg :direction)))
 
</span>-(defclass carrier (ship) ((space-count :initform 5)))
-(defclass cruiser (ship) ((space-count :initform 3)))
-(defclass destroyer (ship) ((space-count :initform 2)))
+(define-ship carrier 5 2)
+(define-ship cruiser 3)
+(define-ship destroyer 2)
<span style=\"color: #7f7f7f;\"> 
 (defclass move ()
   ((player :reader player :initarg :player)
    (x :reader x :initarg :x)
    (y :reader y :initarg :y)))
 
</span>-(defclass hit (move) ())
+(defclass hit (move) ((ship :accessor ship :initarg :ship)))
<span style=\"color: #7f7f7f;\"> (defclass miss (move) ())
 
</span>+(defclass history-event ()
+  ((id :reader id :initarg :id)
+   (event-type :reader event-type :initarg :event-type)
+   (message :reader message :initarg :message)))
+
<span style=\"color: #7f7f7f;\"> (defclass player ()
   ((score :accessor score :initform 0)
</span>    (sunken :accessor sunken :initarg :sunken)</pre>

<p>Back into merely modified files. As you can see, ship definitions got shorter (we'll see the macro behind that in the <code>util</code> file), <code>history-event</code>s became their own explicitly defined objects, and <code>ship</code> got a few new slots to make wider pieces possible. Incidentally, if you look at those new <code>ship</code> slots, you'll see one of the CLOS speedbumps that <a href=\"http://steve-yegge.blogspot.com/2006/04/lisp-is-not-acceptable-lisp.html\">Yegge whinged about quite a while ago</a>. <code>length</code> is a polymorphic function and not a method. Meaning that if you have a non-sequence <code>foo</code> that would benefit from having a <code>length</code> method, you either need to name it <code>foo-length</code> or <code>len</code> or some other annoyingly minute variation of the word. I went with <code>len</code> and have no particular regrets there (other than not actually being able to <a href=\"/article?name=objective-lisp.html\">use <code>length</code> as a method</a>).</p>

<pre><span style=\"color: #7f7f7f;\">diff --git a/package.lisp b/package.lisp
index 94e808f..57ab4e9 100644
</span><span style=\"background-color: #cccccc;\">--- </span><span style=\"background-color: #b3b3b3; font-weight: bold;\">a/package.lisp</span><span style=\"background-color: #cccccc;\">
+++ </span><span style=\"background-color: #b3b3b3; font-weight: bold;\">b/package.lisp</span><span style=\"background-color: #cccccc;\">
</span><span style=\"background-color: #cccccc;\">@@ -1,8 +1,9 @@</span>
<span style=\"color: #7f7f7f;\"> ;;;; package.lisp
 
 (defpackage #:strifebarge
</span>-  (:use #:cl #:cl-who #:clsql #:hunchentoot #:parenscript)
-  (:import-from #:swank #:find-definition-for-thing)
+  (:use #:cl #:cl-who #:cl-css #:clsql #:hunchentoot #:parenscript)
+  (:import-from #:json #:encode-json-to-string #:decode-json-from-string)
+  (:import-from #:cl-ppcre #:scan-to-strings)
<span style=\"color: #7f7f7f;\">   (:import-from #:ironclad 
                #:encrypt-in-place #:decrypt-in-place #:make-cipher #:digest-sequence 
                #:octets-to-integer #:integer-to-octets
</span><span style=\"background-color: #cccccc;\">@@ -11,4 +12,8 @@</span>
<span style=\"color: #7f7f7f;\"> 
 (in-package #:strifebarge)
 
</span>-(defparameter *web-server* (start (make-instance 'hunchentoot:easy-acceptor :port 5050)))
<span style=\"color: #7f7f7f;\">\\ No newline at end of file
</span>+;;;;;;;;;;;;;;;;;;;; config variable
+
+(defparameter *server-port* 5050)
+(defparameter *board-square-size* 35)
+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;</pre>

<p>Not much new to see here. I've imported <code>cl-css</code>, as well as choice functions from <code>cl-ppcre</code> and <code>:json</code>. Still importing <code>:ironclad</code> chunklets, and still haven't put them to use. I did pull out the server port number and board square size into their own variables though. Thanks to my use of <code>:parenscript</code> and <code>:cl-css</code>, that single parameter should be all you need to change in order to mess with square size. The server startup, as well as a couple of related statements were moved out to a separate <code>start</code> file.</p>

<pre><span style=\"color: #b22222;\">;;; </span><span style=\"color: #b22222;\">start.lisp
</span>(<span style=\"color: #a020f0;\">in-package</span> <span style=\"color: #7a378b;\">:strifebarge</span>)

(<span style=\"color: #a020f0;\">defparameter</span> <span style=\"color: #a0522d;\">*web-server*</span> (start (make-instance 'hunchentoot:easy-acceptor <span style=\"color: #7a378b;\">:port</span> *server-port*)))
(web-folders <span style=\"color: #8b2252;\">\"js\"</span> <span style=\"color: #8b2252;\">\"img\"</span> <span style=\"color: #8b2252;\">\"css\"</span>)</pre>

<p>And here it is. The <code>defparameter</code> line starts a new <code>hunchentoot</code> instance listening on <code>*server-port*</code>, and <code>web-folders</code> does exactly what you'd expect (we'll discuss it in very slightly more detail in the <code>util</code> file).</p>
 
<pre><span style=\"color: #7f7f7f;\">diff --git a/strifebarge.lisp b/strifebarge.lisp
index d651ba9..2630341 100644
</span><span style=\"background-color: #cccccc;\">--- </span><span style=\"background-color: #b3b3b3; font-weight: bold;\">a/strifebarge.lisp</span><span style=\"background-color: #cccccc;\">
+++ </span><span style=\"background-color: #b3b3b3; font-weight: bold;\">b/strifebarge.lisp</span><span style=\"background-color: #cccccc;\">
</span><span style=\"background-color: #cccccc;\">@@ -4,37 +4,57 @@</span>
<span style=\"color: #7f7f7f;\"> 
 (defparameter *game* nil)
 
</span>+;;;;;;;;;;;;;;;;;;;; full handlers
+;;; (all of these either directly return, or redirect to complete pages)
+
<span style=\"color: #7f7f7f;\"> (define-easy-handler (index :uri \"/\") ()
</span>-  (let ((players (list (make-player 'carrier 'cruiser 'destroyer)
-                      (make-player 'carrier 'cruiser 'destroyer))))
-    (echo (apply #'make-game players) (car players))))
+  (html-to-str
+    (:html (:head (:title \"StrifeBarge\")
+                 (:link :rel \"stylesheet\" :type \"text/css\" :href \"/css/strifebarge.css\"))
+          (:body (:a :class \"menu-item\" :href \"/new-game\" \"New Game\")
+                 (:a :class \"menu-item\" :href \"/join-game\" \"Join Game\")))))
<span style=\"color: #7f7f7f;\"> 
 (define-easy-handler (new-game :uri \"/new-game\") (player-count)
   (let* ((p-count (if player-count (parse-integer player-count) 2)) 
</span>-        (players (loop for i from 1 to p-count
-                       collect (make-player 'carrier 'cruiser 'destroyer))))
+        (players (loop repeat p-count collect (make-player 'carrier 'cruiser 'destroyer))))
<span style=\"color: #7f7f7f;\">     (setf *game* (apply #'make-game players))
     (redirect \"/join-game\")))
 
 (define-easy-handler (join-game :uri \"/join-game\") ()
</span>-  (assert (and (not (null (waiting-for *game*)))
-              (null (session-value :player))))
+  (redirect-unless (and (not (null (waiting-for *game*)))
+                   (null (session-value :player))))
<span style=\"color: #7f7f7f;\">   (setf (session-value :player) (pop (waiting-for *game*)))
   (redirect \"/show-game\"))
 
 (define-easy-handler (show-game :uri \"/show-game\") ()
</span>-  (assert (not (null (session-value :player))))
-  (echo *game* (session-value :player)))
+  (redirect-unless (not (null (session-value :player))))
+  (html-to-str
+    (:html (:head
+           (:title \"StrifeBarge\")
+           (:script :type \"text/javascript\" :src \"/js/jquery-1.7.1.min.js\")
+           (:script :type \"text/javascript\" :src \"/js/strifebarge.js\")
+           (:link :rel \"stylesheet\" :type \"text/css\" :href \"/css/strifebarge.css\"))
+          (:body (echo-console *game* (session-value :player)) 
+                 (echo *game* (session-value :player))))))
<span style=\"color: #7f7f7f;\"> 
 (define-easy-handler (quit-game :uri \"/quit-game\") ()
</span>-  (assert (not (null (session-value :player))))
+  (redirect-unless (not (null (session-value :player))))
<span style=\"color: #7f7f7f;\">   (push (waiting-for *game*) (session-value :player))
   (setf (session-value :player) nil)
   \"You have quit the game\")
 
</span>+;;;;;;;;;;;;;;;;;;;; ajax handlers
+;;; these return either errors or partial json/html. 
+;;; The caller is expected to transform their output before final display
+
+(define-easy-handler (update-map :uri \"/update-map\") ()
+  (assert (not (null (session-value :player))))
+  (setf (header-out :cache-control) \"no-cache\"
+       (content-type*) \"text/event-stream\")
+  (emit-record *game* (session-value :player)))
+
<span style=\"color: #7f7f7f;\"> (define-easy-handler (turn :uri \"/turn\") (x y)
</span>-  (assert (and (eq (car (turn-stack *game*)) (session-value :player))
-              (stringp x) (stringp y)))
+  (assert (and (turn-p *game*) (stringp x) (stringp y)))
<span style=\"color: #7f7f7f;\">   (advance-turn *game*)
</span>-  (fire *game* (session-value :player) (parse-integer x) (parse-integer y))
-  (redirect \"/show-game\"))

+  (echo (fire *game* (session-value :player) (parse-integer x) (parse-integer y)) 
+       (session-value :player)))</pre>

<p>This is possibly the most changed file at the moment. Firstly, we've added an ajax handler for player actions. Second, <code>update-map</code> shows you exactly what you need to do on the server to set up a Server-Sent-Event source that the client will actually support. <code>emit-record</code> was shown earlier, but I didn't really explain it. It still takes a <code>player</code> as an argument, because the record digest used to be subjective<a href=\"#foot-Sat-Mar-03-203328EST-2012\" name=\"note-Sat-Mar-03-203328EST-2012\">[11]</a>. In the non-ajax handlers, note that the various <code>assert</code>s have all been replaced with equivalent <code>redirect-unless</code> calls. That's a new utility function that does exactly what you'd think. It may seem to be more complex than necessary at this point, but I will eventually shunt the player off into different pages depending on where they came from (you know, improving signage and all that).</p>

<pre><span style=\"color: #7f7f7f;\">diff --git a/util.lisp b/util.lisp
index 76f62b4..1de23d8 100644
</span><span style=\"background-color: #cccccc;\">--- </span><span style=\"background-color: #b3b3b3; font-weight: bold;\">a/util.lisp</span><span style=\"background-color: #cccccc;\">
+++ </span><span style=\"background-color: #b3b3b3; font-weight: bold;\">b/util.lisp</span><span style=\"background-color: #cccccc;\">
</span><span style=\"background-color: #cccccc;\">@@ -2,4 +2,44 @@</span>
<span style=\"color: #7f7f7f;\"> 
 (defun pick (a-list)
   \"Randomly selects an element from the given list with equal probability.\"
</span>-  (nth (random (length a-list)) a-list))
<span style=\"color: #7f7f7f;\">\\ No newline at end of file
</span>+  (nth (random (length a-list)) a-list))
+
+(defun range (a b)
+  (loop for i from a to b collect i))
+
+(defun board-scale (num) (* *board-square-size* num))
+
+(defun mapcan-f (fn a-list)
+  \"Functional implementation of unary mapcan\"
+  (loop for i in a-list append (funcall fn i)))
+
+(defmacro web-folders (&amp;body body)
+  \"Sets up folder dispatchers for the given folders\"
+  `(progn ,@(mapcar #'(lambda (f) 
+                       `(push (create-folder-dispatcher-and-handler ,(format nil \"/~a/\" f) ,(format nil \"~a/\" f)) *dispatch-table*))
+                   body)))
+
+(defmacro redirect-unless (predicate &amp;optional (target \"/\"))
+  `(unless ,predicate (redirect ,target)))
+
+(defmacro html-to-stout (&amp;body body)
+  \"Outputs HTML to standard out.\"
+  `(with-html-output (*standard-output* nil :indent t) ,@body))
+
+(defmacro html-to-str (&amp;body body)
+  \"Returns HTML as a string, as well as printing to standard-out\"
+  `(with-html-output-to-string (*standard-output*) ,@body))
+
+(defun instance-to-id (instance)
+  (aref (nth-value 1 (scan-to-strings \"{\\(.*?\\)}\" (format nil \"~a\" instance))) 0))
+
+(defun take (num a-list)
+  (if (&gt; (length a-list) num)
+      (subseq a-list 0 num)
+      a-list))
+
+(defmacro define-ship (name length &amp;optional (width 1))
+  `(defclass ,name (ship) 
+     ((len :initform ,length)
+      (wid :initform ,width)
+      (space-count :initform ,(* length width)))))
\\ No newline at end of file</pre>

<p>Finally, <code>util</code> has grown quite a bit. Range has returned after being removed temporarily. We've already gone through <code>mapcan-f</code> and <code>redirect-unless</code>. <code>take</code> is a naive definition of the <a href=\"http://docs.racket-lang.org/reference/pairs.html?q=take#(def._((lib._racket/list..rkt)._take))\">equivalent function</a> from Scheme, <code>define-ship</code> is a minimal shortcut for cutting out ship definition boilerplate now that ships are two-dimensional, and the <code>html-to-</code> twins are the thinnest possible useful wrappers around the equivalent <a href=\"http://weitz.de/cl-who/#with-html-output\"><code>with-html-output</code></a> from <code>:cl-who</code>. <code>web-folders</code> is a shortcut that makes it easier to have <code>hunchentoot</code> serve folders. Its operation should be obvious if you know how <a href=\"http://weitz.de/hunchentoot/#create-folder-dispatcher-and-handler\">this normally works</a>; the only note I'll make is that if you were to actually run StrifeBarge in production for some bizarre reason, you'd actually want to set up <code>nginx</code> or some other lightweight HTTP server out front to serve these static directories instead of having your Lisp process handle everything.</p>

<p>The only really interesting piece here is <code>instance-to-id</code>, which takes a CLOS instance and returns a sufficiently-ambiguous string mostly useful as a DOM id. I initially had this implemented as</p>

<pre>(regex-replace-all <span style=\"color: #8b2252;\">\"[#&lt;&gt;{} ]\"</span> (format nil <span style=\"color: #8b2252;\">\"~a\"</span> instance))</pre>

<p>instead, but found that a player can get too much information from that (though it did perform marginally better in profiling reports). Running it on a carrier would produce an id like <code>CARRIER100AABD943</code>, from which it's trivial to find out what kind of ship just got hit. The actual definition above instead returns <code>100AABD943</code> in the same situation. This is specific enough to unambiguously identify the DOM element for any JS function we need invoked, but it's general enough that a player probably can't get any useful, new information just by pulling down <code>update-map</code> and reading the output manually. I may change my mind on this later, by the by, since I'm already taking quite a few liberties with the rules, but it stays for now.</p>

<p>So that's <i>almost</i> that for the game itself. I still need to make <code>ship</code>s send out a \"You sunk my...\" message when they get taken down, and there's a few usability-related things I'd like to add to the client side (ok, yes, and there needs to be support for multiple games at once, as well as actually winning), but most of the remaining development actually needs to happen outside the game itself. I hinted at it earlier, but just to make it explicit, I still need to implement</p>

<ul>
  <li>A chat-room/lobby for people to start games up from (in-game chat might be nice too)</li>
  <li>A leaderboard system to show off high scores (possibly with replays too)</li>
  <li>A formalized way of automating games</li>
</ul>

<p>Sounds like this'll actually keep me busier than I expected.</p>

<hr />
<h5>Footnotes</h5>
<p>1 - <a href=\"#note-Sat-Mar-03-111456EST-2012\" name=\"foot-Sat-Mar-03-111456EST-2012\">[back]</a> - That'd be a meatspace, belligerent network of trust. The idea being that if you can get n people who certainly aren't cooperating to vouch for Alice face-to-face, your odds are better than if you merely had n of Alice's random online social contacts do the same.</p>

<p>2 - <a href=\"#note-Sat-Mar-03-111752EST-2012\" name=\"foot-Sat-Mar-03-111752EST-2012\">[back]</a> - And don't really help you much in the general case, unless you're assuming that you'll always be able to trace a line from your direct contacts to the other party, or you're assuming belligerence.</p>

<p>3 - <a href=\"#note-Sat-Mar-03-111908EST-2012\" name=\"foot-Sat-Mar-03-111908EST-2012\">[back]</a> - I have to be honest though; preventing people from cheating in a hobby-horse project of mine isn't why I was researching this. I'm doing some development at work that will need me to build at least reasonably secure components, so I'm beefing up on the basics of <a href=\"http://crypto.stackexchange.com/\">crypto</a> and computer security.</p>

<p>4 - <a href=\"#note-Sat-Mar-03-201833EST-2012\" name=\"foot-Sat-Mar-03-201833EST-2012\">[back]</a> - It also lets me use various GPL licensed sprites.</p>

<p>5 - <a href=\"#note-Sat-Mar-03-201845EST-2012\" name=\"foot-Sat-Mar-03-201845EST-2012\">[back]</a> - I still need to implement multiple <code>game</code>s per server, some sort of lobby/leaderboard system, and some way of actually winning before I think about implying that I've solved most game-related problems. Even for something as simple as this.</p>

<p>6 - <a href=\"#note-Sat-Mar-03-202120EST-2012\" name=\"foot-Sat-Mar-03-202120EST-2012\">[back]</a> - I'm actually giving more and more thought to the <a href=\"http://en.wikipedia.org/wiki/Literate_programming\">literate programming</a> idea for specifically this reason.</p>

<p>7 - <a href=\"#note-Sat-Mar-03-202239EST-2012\" name=\"foot-Sat-Mar-03-202239EST-2012\">[back]</a> - There really isn't a technical reason for that; I took a look at the <a href=\"http://opengameart.org/content/spaceships-top-down\">spaceship sprite set</a>s at OpenGameArt and thought it would be a shame not to be able to use some of the oddly-shaped ones.</p>

<p>8 - <a href=\"#note-Sat-Mar-03-202411EST-2012\" name=\"foot-Sat-Mar-03-202411EST-2012\">[back]</a> - No longer actually true; <a href=\"https://github.com/Inaimathi/cl-css\">the version up at github</a> currently lets you preserver case on selectors by passing them in as strings, and it incorporates the CSS3 transformation abstractions from this project. I'll probably be adding animation and transition to the pile shortly.</p>

<p>9 - <a href=\"#note-Sat-Mar-03-202709EST-2012\" name=\"foot-Sat-Mar-03-202709EST-2012\">[back]</a> - Specifically, to stick to the classic game as closely as possible, it shouldn't be possible for a player to identify what kind of ship they hit until they either sink it, or deduce it from the number of squares it occupies.</p>

<p>10 - <a href=\"#note-Sat-Mar-03-203059EST-2012\" name=\"foot-Sat-Mar-03-203059EST-2012\">[back]</a> - Though I did start calling the anonymous function shortcut <code>fn</code> rather than <code>\\</code> for ease of exporting.</p>

<p>11 - <a href=\"#note-Sat-Mar-03-203328EST-2012\" name=\"foot-Sat-Mar-03-203328EST-2012\">[back]</a> - It's not at the moment, but this is something I won't be changing in the short term, since it will become true again once I implement a chat client.</p>
"))
((5202 3723 571193000) :INSERT (74 :POSTED 3539739600))
((5202 3723 571196000) :INSERT (74 :TAG :ALMOST-LITERATE-PROGRAMMING))
((5202 3723 571198000) :INSERT (74 :TAG :COMMON-LISP))
((5202 3723 571200000) :INSERT (74 :TAG :HUNCHENTOOT))
((5202 3723 571203000) :INSERT (74 :TAG :SECURITY))
((5202 3723 571498000) :INSERT (75 :TITLE "Quick Coffee"))
((5202 3723 571504000) :INSERT (75 :FILE "coffee.html"))
((5202 3723 571507000) :INSERT (75 :EDITED 3610301230))
((5202 3723 571509000) :INSERT
 (75 :BODY
  "<p>A very short post today. After having discussed and thought about the state of <a href=\"/article?name=client-communication.html\">client communication</a> a little while ago, I mentioned that I'd be doing some semi-serious work in <a href=\"http://nodejs.org/\">node.js</a>. Mainly because they seem to do <a href=\"http://socket.io/\">Websockets Properly™</a>.</p>

<p>So I downloaded node, and <a href=\"http://npmjs.org/\">npm</a><a href=\"#foot-Thu-Mar-08-234036EST-2012\" name=\"note-Thu-Mar-08-234036EST-2012\">[1]</a>, and got ready to go through a tutorial or two. It was pretty fast going because I'm already fairly experienced with JS<a href=\"#foot-Thu-Mar-08-234046EST-2012\" name=\"note-Thu-Mar-08-234046EST-2012\">[2]</a>, but the reading for <a href=\"http://www.nodebeginner.org/#analyzing-our-http-server\">one in particular</a> was surreal. Half of the thing was written for an audience that's only just heard of higher order functions. It also involved a lot of server restarting, which I found annoying enough to look for <a href=\"https://github.com/DracoBlue/spludo/blob/master/build/run_dev_server.js\">relief</a>. That's a check, at least.</p>

<p>Sorry, I'm getting off track here. Anyway, once I got refreshed with the examples and moved on to trying to code up something for myself, it took all of 10 minutes and about a file and a half before I remembered exactly why I mostly use <a href=\"http://common-lisp.net/project/parenscript/\">parenscript</a> these days. Javascript is... well... it's ugly. It doesn't really seem ugly when you just look at examples, but if you try to actually use it for realzies, it'll take surprisingly little to get to an annoying obstacle. Whether you'd really like an optional/rest argument somewhere, or you'd like to have a function return implicitly, or you'd like to do some non-trivial string templating, you will either be annoyed or you'll need to find another way.</p>

<p>There's no real way to solve this from within JavaScript either, which is why I'm considering code transformers. There's the obvious, already mentioned, parenscript<a href=\"#foot-Thu-Mar-08-234215EST-2012\" name=\"note-Thu-Mar-08-234215EST-2012\">[3]</a>, and there's a surprisingly expressive alternative JS syntax called <a href=\"http://coffeescript.org/\">Coffee Script</a> which you've probably heard all about.</p>

<p>I haven't quite got Emacs highlighting it properly, but it seems to do <i>nearly</i> as well as parenscript at abstracting the annoying parts.</p>

<pre><span style=\"color: #b22222;\"># function definition</span>
square = (num) -&gt; num * num                               
<span style=\"color: #b22222;\"># optional argument and string templating</span>
greet = (subject = <span style=\"color: #8b2252;\">\"world\"</span>) -&gt; <span style=\"color: #8b2252;\">\"Hello, #{subject}!\"</span>     
<span style=\"color: #b22222;\"># rest arg and array comprehension</span>
squares = (numbers...) -&gt; square n <span style=\"color: #a020f0;\">for</span> n <span style=\"color: #a020f0;\">in</span> numbers     
<span style=\"color: #b22222;\"># multi-quote string</span>
content = <span style=\"color: #8b2252;\">\"\"\"
&lt;div id=\"</span>content<span style=\"color: #8b2252;\">\"&gt;
  &lt;span class=\"</span>quote<span style=\"color: #8b2252;\">\"&gt;Blah!&lt;/span&gt;
&lt;/div&gt;
\"\"\"</span></pre>

<span class=\"edit\">EDIT:
  <p>For comparison, here's the equivalent parenscript</p>
<pre>(ps
  <span style=\"color: #b22222;\">;;; </span><span style=\"color: #b22222;\">function definition
</span>  (<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">square</span> (num) (* num num))
  <span style=\"color: #b22222;\">;;; </span><span style=\"color: #b22222;\">optional argument and string handling
</span>  (<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">greet</span> (<span style=\"color: #228b22;\">&amp;optional</span> (subject <span style=\"color: #8b2252;\">\"world\"</span>))
    (+ <span style=\"color: #8b2252;\">\"Hello, \"</span> subject <span style=\"color: #8b2252;\">\"!\"</span>))
  <span style=\"color: #b22222;\">;;; </span><span style=\"color: #b22222;\">rest args and iteration
</span>  (<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">squares</span> (<span style=\"color: #228b22;\">&amp;rest</span> numbers)
    (<span style=\"color: #a020f0;\">loop</span> for n in numbers collect (square n)))
  <span style=\"color: #b22222;\">;;; </span><span style=\"color: #b22222;\">generating html
</span>  (<span style=\"color: #a020f0;\">defvar</span> <span style=\"color: #a0522d;\">content</span> 
    (who-ps-html (<span style=\"color: #7a378b;\">:div</span> <span style=\"color: #7a378b;\">:id</span> <span style=\"color: #8b2252;\">\"content\"</span> 
                       (<span style=\"color: #7a378b;\">:span</span> <span style=\"color: #7a378b;\">:class</span> <span style=\"color: #8b2252;\">\"quote\"</span> <span style=\"color: #8b2252;\">\"Blah!\"</span>)))))</pre>
Mon, 12 Mar, 2012</span>

<p>That surprisingly terse block of Coffee Script expands out to</p>

<pre><span style=\"color: #a020f0;\">var</span> <span style=\"color: #a0522d;\">content</span>, <span style=\"color: #228b22;\">square</span>, <span style=\"color: #a0522d;\">squares</span>, <span style=\"color: #a0522d;\">greet</span>,
  __slice = Array.<span style=\"color: #008b8b;\">prototype</span>.slice;

<span style=\"color: #228b22;\">square</span> = <span style=\"color: #a020f0;\">function</span>(<span style=\"color: #a0522d;\">num</span>) {
  <span style=\"color: #a020f0;\">return</span> num * num;
};

greet = <span style=\"color: #a020f0;\">function</span>(<span style=\"color: #a0522d;\">subject</span>) {
  <span style=\"color: #a020f0;\">if</span> (subject == <span style=\"color: #008b8b;\">null</span>) subject = <span style=\"color: #8b2252;\">\"world\"</span>;
  <span style=\"color: #a020f0;\">return</span> <span style=\"color: #8b2252;\">\"Hello, \"</span> + subject + <span style=\"color: #8b2252;\">\"!\"</span>;
};

squares = <span style=\"color: #a020f0;\">function</span>() {
  <span style=\"color: #a020f0;\">var</span> <span style=\"color: #a0522d;\">n</span>, <span style=\"color: #a0522d;\">numbers</span>, <span style=\"color: #a0522d;\">_i</span>, <span style=\"color: #a0522d;\">_len</span>, <span style=\"color: #a0522d;\">_results</span>;
  numbers = 1 &lt;= <span style=\"color: #008b8b;\">arguments</span>.length ? __slice.call(<span style=\"color: #008b8b;\">arguments</span>, 0) : [];
  _results = [];
  <span style=\"color: #a020f0;\">for</span> (_i = 0, _len = numbers.length; _i &lt; _len; _i++) {
    n = numbers[_i];
    _results.push(<span style=\"color: #228b22;\">square</span>(n));
  }
  <span style=\"color: #a020f0;\">return</span> _results;
};

content = <span style=\"color: #8b2252;\">\"&lt;div id=\\\"content\\\"&gt;\\n  &lt;span class=\\\"quote\\\"&gt;Blah!&lt;/span&gt;\\n&lt;/div&gt;\"</span>;</pre>

<p>Granted, it misses some big ones<a href=\"#foot-Thu-Mar-08-234306EST-2012\" name=\"note-Thu-Mar-08-234306EST-2012\">[4]</a>, but still.</p>

<p>I kinda like it.</p>

<hr />
<h5>Footnotes</h5>
<p>1 - <a href=\"#note-Thu-Mar-08-234036EST-2012\" name=\"foot-Thu-Mar-08-234036EST-2012\">[back]</a> - As an aside here, I have to note that I seem to have no patience left for languages without good package managers. I'm pretty sure this is a new development because I've done some work in Erlang, and there's this vague memory kicking around my head of a time before <a href=\"http://www.quicklisp.org/\">quicklisp</a>, but there you have it. Luckily, npm is pretty good and getting better fast.</p>

<p>2 - <a href=\"#note-Thu-Mar-08-234046EST-2012\" name=\"foot-Thu-Mar-08-234046EST-2012\">[back]</a> - Having done heavy development in jQuery, and some playing with <a href=\"http://www.mozilla.org/rhino/\">Rhino</a> and Jaxer back when those \"were new\" and \"existed\" respectively.</p>

<p>3 - <a href=\"#note-Thu-Mar-08-234215EST-2012\" name=\"foot-Thu-Mar-08-234215EST-2012\">[back]</a> - Which I'd prefer not to default to since the whole point of this exercise was to get away from Lisp for a little while. It may still end up winning, but I want to at least look at an alternative first. </p>

<p>4 - <a href=\"#note-Thu-Mar-08-234306EST-2012\" name=\"foot-Thu-Mar-08-234306EST-2012\">[back]</a> - Macros, obviously, but I've also got surprisingly used to prefix notation and homoiconicity. There's also the fact that Coffee Scripts' highlighter is misbehavin', and <a href=\"http://www.opinionatedprogrammer.com/2010/12/installing-coffeescript-on-debian-or-ubuntu/\"><code>coffee</code></a> has nothin' on <a href=\"http://common-lisp.net/project/slime/\"><code>slime</code></a>, <i>and</i> I'd have to give up paredit use to go back to syntactic whitespace. In fact, I'm going to stop thinking about this now because it's almost depressing how many things non-lisps are missing that you really wouldn't think are a big deal until you get the option to lose them.</p>
  "))
((5202 3723 571609000) :INSERT (75 :POSTED 3540171600))
((5202 3723 571613000) :INSERT (75 :TAG :COFFEE-SCRIPT))
((5202 3723 571615000) :INSERT (75 :TAG :JAVASCRIPT))
((5202 3723 571838000) :INSERT (76 :TITLE "cl-smtp vs Exchange server"))
((5202 3723 571843000) :INSERT (76 :FILE "cl-smtp-vs-exchange-server.html"))
((5202 3723 571846000) :INSERT (76 :EDITED 3610308304))
((5202 3723 571848000) :INSERT
 (76 :BODY
  "<p>For those of you just here for the easy, googlable answer. To send an HTML email with <code>cl-smtp</code>, do this:</p>

<pre>(cl-smtp:send-email [server] [from] [to] [subject] 
                    [plaintext message, or possibly NIL] 
                    <span style=\"color: #7a378b;\">:html-message</span> [HTML message])</pre>

<p>Making sure to replace the things with square brackets, obviously. Passing <code>nil</code> instead of the mandatory <code>message</code> parameter causes all the clients I've tested with so far to automatically display your email as a standard HTML message.</p>

<p>Now then.</p>

<p>The documentation in the <a href=\"http://common-lisp.net/project/cl-smtp/\">module itself</a> follows the usual Common Lisp standards of being <a href=\"http://common-lisp.net/viewvc/cl-smtp/cl-smtp/README?view=markup\">minimal, verging on nonexistent</a><a href=\"#foot-Tue-Apr-17-162650EDT-2012\" name=\"note-Tue-Apr-17-162650EDT-2012\">[1]</a>. The best <a href=\"http://ryepup.unwashedmeme.com/blog/2008/10/31/some-simple-cl-smtp-examples/\">example I managed to find</a> of sending an HTML-formatted email from <code>cl-smtp</code> can be seen <a href=\"http://ryepup.unwashedmeme.com/blog/2008/10/31/some-simple-cl-smtp-examples/\">here</a>. The suggestion is to do</p>

<pre>(cl-smtp:send-email
 +mail-server+ from to subject
 <span style=\"color: #8b2252;\">\"&lt;html&gt;&lt;body&gt;
    &lt;h2&gt;
      YES. THIS IS DOG.
    &lt;/h2&gt;
      &lt;img src=\\\"http://my.site.url/dog.jpg\\\" alt=\\\"A dog comically answering a phone\\\"/&gt;
  &lt;/body&gt;&lt;/html&gt;\"</span>
 <span style=\"color: #7a378b;\">:extra-headers</span> '((<span style=\"color: #8b2252;\">\"Content-type\"</span> <span style=\"color: #8b2252;\">\"text/html; charset=\\\"iso-8859-1\\\"\"</span>)))</pre>

<p>And if you do that, it will <i>seem</i> to work unless you run into someone with a particularly configured Exchange server. You might be thinking<a href=\"#foot-Tue-Apr-17-162701EDT-2012\" name=\"note-Tue-Apr-17-162701EDT-2012\">[2]</a> \"Oh, \\fantastic, MS once again cocks up what should be a simple and straightforward task\", but I'm not so sure. Lets take a look at the headers produced by using the <code><span style=\"color: #7a378b;\">:extra-headers</span></code> approach above.</p>

<pre>...
From: from@email.com
To:  someone@else.com
Subject: Serious Business
X-Mailer: cl-smtp(SBCL 1.0.54.0.debian)
Content-type: text/html; <span style=\"color: #a0522d;\">charset</span>=\"iso-8859-1\" <span style=\"color: #b22222;\">## the result of our option </span>
Mime-Version: 1.0
Content-type: text/plain; <span style=\"color: #a0522d;\">charset</span>=\"UTF-8\" <span style=\"color: #b22222;\">## the default cl-smtp header </span>
...</pre>

<p>Now like I said, this seems to get interpreted as intended in most places. Notably, gmail, hotmail, yahoo mail, my companies' exchange server, and probably <a href=\"http://mailinator.com/\">mailinator</a> as well, all output the result of this multi-<code>Content-type</code>-headered email as <code>text/html</code>. The thing is, it seems fairly reasonable to parse this strictly and accept the last <code>Content-type</code> declaration rather than the most general. So I guess another way of saying it is \"this won't work on a properly configured Exchange server\".</p>

<p>The actually working way of accomplishing this task is to use the built-in <code><span style=\"color: #7a378b;\">:html-message</span></code> parameter</p>

<pre>(cl-smtp:send-email
 +mail-server+ from to subject
 <span style=\"color: #8b2252;\">\"Ok, the HTML version of this email is totally impressive. Just trust me on this.\"</span>
 <span style=\"color: #7a378b;\">:html-message</span>
 <span style=\"color: #8b2252;\">\"&lt;html&gt;&lt;body&gt;
    &lt;h2&gt;
      YES. THIS IS DOG.
    &lt;/h2&gt;
      &lt;img src=\\\"http://my.site.url/dog.jpg\\\" alt=\\\"A dog comically answering a phone\\\"/&gt;
  &lt;/body&gt;&lt;/html&gt;\"</span>)</pre>

<p>if you don't want to send a plaintext message at all, it's possible<a href=\"#foot-Tue-Apr-17-162819EDT-2012\" name=\"note-Tue-Apr-17-162819EDT-2012\">[3]</a> to pass <code>nil</code> as the message <code>body</code></p>

<pre>(cl-smtp:send-email
 +mail-server+ from to subject nil
 <span style=\"color: #7a378b;\">:html-message</span>
 <span style=\"color: #8b2252;\">\"&lt;html&gt;&lt;body&gt;
    &lt;h2&gt;
      YES. THIS IS DOG.
    &lt;/h2&gt;
      &lt;img src=\\\"http://my.site.url/dog.jpg\\\" alt=\\\"A dog comically answering a phone\\\"/&gt;
  &lt;/body&gt;&lt;/html&gt;\"</span>)</pre>

<p>Doing it this way causes <code>cl-smtp</code> to break your message up into a plaintext and HTML version. You then rely on a client showing its user the appropriate one depending on their context<a href=\"#foot-Tue-Apr-17-163515EDT-2012\" name=\"note-Tue-Apr-17-163515EDT-2012\">[4]</a>.</p>

<pre>From: from@email.com
To:  someone@else.com
Subject: Serious Business
X-Mailer: cl-smtp(SBCL 1.0.54.0.debian)
Mime-Version: 1.0
Content-type: multipart/alternative;
 <span style=\"color: #a0522d;\">Boundary</span>=\"_---------_2IQrElfHaDK71IdkZlEq5L3C0etr5t\"
Message-Id: blahblahblah

--_---------_2IQrElfHaDK71IdkZlEq5L3C0etr5t
Content-type: text/plain; <span style=\"color: #a0522d;\">charset</span>=\"UTF-8\"
Content-Disposition: inline

Ok, the HTML version of this email is totally impressive. Just trust me on this.


--_---------_2IQrElfHaDK71IdkZlEq5L3C0etr5t
Content-type: text/html; <span style=\"color: #a0522d;\">charset</span>=\"UTF-8\"
Content-Disposition: inline

&lt;<span style=\"color: #0000ff;\">html</span>&gt;&lt;<span style=\"color: #0000ff;\">body</span>&gt;&lt;<span style=\"color: #0000ff;\">h2</span>&gt;<span style=\"font-weight: bold; font-style: italic; text-decoration: underline;\">YES. THIS IS DOG.</span>&lt;/<span style=\"color: #0000ff;\">h2</span>&gt;&lt;<span style=\"color: #0000ff;\">img</span> src=\\<span style=\"color: #8b2252;\">\"http://my.site.url/dog.jpg\\\"</span> alt=\\<span style=\"color: #8b2252;\">\"A dog comically answering a phone\\\"</span>/&gt;&lt;/<span style=\"color: #0000ff;\">body</span>&gt;&lt;/<span style=\"color: #0000ff;\">html</span>&gt;


--_---------_2IQrElfHaDK71IdkZlEq5L3C0etr5t--</pre>

<img src=\"/static/img/themoreyouknow.jpg\" class=\"middle\" alt=\"The more you know!\"/>

<hr />
<h5>Footnotes</h5>
<p>1 - <a href=\"#note-Tue-Apr-17-162650EDT-2012\" name=\"foot-Tue-Apr-17-162650EDT-2012\">[back]</a> - Though it does show you a useful example of how to put an attachment in a sent email.</p>

<p>2 - <a href=\"#note-Tue-Apr-17-162701EDT-2012\" name=\"foot-Tue-Apr-17-162701EDT-2012\">[back]</a> - As I did initially.</p>

<p>3 - <a href=\"#note-Tue-Apr-17-162819EDT-2012\" name=\"foot-Tue-Apr-17-162819EDT-2012\">[back]</a> - Though probably not advisable in all cases.</p>

<p>4 - <a href=\"#note-Tue-Apr-17-163515EDT-2012\" name=\"foot-Tue-Apr-17-163515EDT-2012\">[back]</a> - Which most seem to, but there are still <a href=\"http://www.exchange-answers.com/microsoft/Exchange-Clients/30509248/preventing-exchange-from-messing-up-multipartalternative-messages.aspx\">one</a> or <a href=\"http://social.technet.microsoft.com/Forums/en-US/exchangesvrcompliance/thread/97b5a94f-c948-4d06-ad66-8521fd49ec7e/\">two</a> Exchange-server related hiccups for some users with particular versions of the software.</p>
"))
((5202 3723 571914000) :INSERT (76 :POSTED 3543624000))
((5202 3723 571916000) :INSERT (76 :TAG :CL-SMTP))
((5202 3723 571918000) :INSERT (76 :TAG :COMMON-LISP))
((5202 3723 572609000) :INSERT (77 :TITLE "Notes From the Borders of Erlang"))
((5202 3723 572619000) :INSERT (77 :FILE "erlang-notes.html"))
((5202 3723 572628000) :INSERT (77 :EDITED 3610022331))
((5202 3723 572632000) :INSERT
 (77 :BODY
  "<p>This is going to be a pretty disjointed, Erlang-heavy article, since that's basically been the main dominating piece of programming-related thought in my brain for the past week. It actually started a while back, when I got the unofficial heads-up that we'll soon be starting a new project at work which will call for super-massive transaction counts, require high reliability/uptime and be mostly server-based. That short-list tells me that the right tool for the job is <i>probably</i> a functional language that focuses on inter-process communication, and enforced isolation between components. Also, one of the big reasons I like my current company is that if I make a decision about what technology we're using, no one gets to tell me to fuck off.</p>

<p>Thus began the research...</p>

<p>There are the usual set of resources over there in the sidebar<a href=\"#foot-Mon-Apr-30-004835EDT-2012\" name=\"note-Mon-Apr-30-004835EDT-2012\">[1]</a>, but do also take the time to check out <a href=\"http://vimeo.com/12307912\">this vimeo piece featuring Joe Armstrong</a>. It won't really give you much insight into how to use the language, but it will show you a bit of the history and intent. Like I said, entirely worth it to hear the man talk, but here are the big points, as extracted by yours truly; he highlighted three things that were missing from Erlang<a href=\"#foot-Mon-Apr-30-004855EDT-2012\" name=\"note-Mon-Apr-30-004855EDT-2012\">[2]</a>, one big mistake, two not-too-bad ideas and three fairly nice ideas that the team had when developing the language. He noted that these are controversial, but I tend to agree with a pretty large number of his assessments. Then again, I'm the crazy motherfucker who regularly blogs about his experiences with Lisp, Smalltalk, Erlang and Ruby, so maybe I'm not the best person to gauge what a mainstream opinion is supposed to look like.</p>

<h2>Three Missing Things</h2>
<p><b>Hash Maps</b> - JSON-style key/value data structures. Not just adding them to the system, but making them the fundamental data-type rather than tuples or arrays. I can see why, too; if you look at any tutorial or piece of Erlang code, you'll see things that fake key/value pairs using tuples. Things like <code>{shopping_list, [{oranges, 3}, {apples, 4}, {bread, 1}]}</code>, which would be better expressed as a JSON structure<a href=\"#foot-Mon-Apr-30-005108EDT-2012\" name=\"note-Mon-Apr-30-005108EDT-2012\">[3]</a>.</p>

<p><b>Higher Order Modules</b> - code in Erlang is organized into modules, which is par for the course these days, but you can't programmatically introspect on them at runtime. Joe mentioned the example of being able to send a particular standardized message and getting back a list of messages supported by the target. I guess this probably might get built into the existing language piecemeal by convention rather than specification. I'm imagining a situation where a given team agrees that they'll write all their modules to accept a <code>help</code> message which would return a list of the functions it provides and a specification of inputs they'd each accept. Thing is, 1. that wouldn't be a language-wide standard, and 2. it would take additional explicit work by the developers. If it was handled at the language level, everyone would have access to the same introspection facilities, and they'd be handled with no additional thought or deed on the developers' part.</p>

<p><b>The Ability to <code><span style=\"color: #a020f0;\">receive</span></code> a <code><span style=\"color: #a020f0;\">fun</span></code></b> - Erlang is a higher-order language, and you can send around function names whenever and wherever you damn well please, but apparently the built-in <code><span style=\"color: #a020f0;\">receive</span></code> directive won't let you pass it an anonymous function. Ok, this isn't one you could solve with macros, but I'm not entirely sure it would be a good idea in the first place. The thing on the other end of the line isn't necessarily code you can trust, but it would certainly add more flexibility.</p>

<h2>One Big Mistake</h2>
<p><b>Lost Too Much Prolog</b> - Joe's a big <a href=\"http://www.gprolog.org/manual/gprolog.html\">Prolog</a> fan, which should come as no surprise to anyone who's read any Erlang tutorials, watched any <a href=\"http://www.youtube.com/watch?v=9uIhawQ1G0I&feature=BFa&list=PL6810EA9B7933465F\">Erlang talks</a>, or indeed, <a href=\"http://www.tryerlang.org/\">written any Erlang code</a>. I'm not qualified to comment, never having done anything approaching serious development in Prolog<a href=\"#foot-Mon-Apr-30-005141EDT-2012\" name=\"note-Mon-Apr-30-005141EDT-2012\">[4]</a>.</p>

<h2>Two Not Too Bad Ideas</h2>
<p>He gave this talk to an American audience, so he had to have a section with Good™ and Great™ ideas, though he would have preferred to be more modest about it. In deference to his preference, I'm keeping his intended titles.</p>

<p><b>Lightweight Processes Are Ok</b> - 

  <blockquote>
    \"... we've shown that you can do processes in the language, and we've shown there's no need for threads. Threads are intrinsically evil, and [shouldn't] be used. Threads were sort of this 'Oh my goodness, processes aren't efficient enough, so lets use this abomination to...' horrible things.\"
    <span class=\"sig\">- Joe Armstrong</span>
  </blockquote>
  
For my part, I've got a half-written piece about <code><a href=\"https://github.com/naveensundarg/Common-Lisp-Actors\">cl-actors</a></code> sitting in my drafts folder. It's a pretty good, lightweight implementation of the <a href=\"http://en.wikipedia.org/wiki/Actor_model\">actor model</a> built on top of <code><a href=\"http://common-lisp.net/project/bordeaux-threads/\">bordeaux-threads</a></code>. And if you like the Erlang-style message passing, do give it a shot, but it doesn't quite do the same thing as Erlang manages. The threading model means you can't expect to reliably spawn thousands of <code>cl-actors</code> on a typical machine. For comparison, <a href=\"http://pragprog.com/book/jaerlang/programming-erlang\">the Pragmatic book</a> has an example on pg 149/150 wherein Joe removes the built-in safety limit of 32 767 processes and has Erlang spawn 200 000 without breaking a sweat<a href=\"#foot-Mon-Apr-30-005314EDT-2012\" name=\"note-Mon-Apr-30-005314EDT-2012\">[5]</a>. That seems like at least part of the story behind those <a href=\"http://www.sics.se/~joe/apachevsyaws.html\">mind-boggling benchmarks</a> that you've all probably seen by now.</p>

<p><b>OTP Behaviours</b> - The correct way to think of Behaviours, Joe says, is to consider them the process equivalent of higher-order functions. They formalize basic request patterns between processes letting individuals focus on the differences. I don't actually have enough experience with them yet, but if Joe's description is accurate, I can see them being very useful when constructing complex systems with a reliability requirement.</p>

<h2>Three Fairly Nice Ideas</h2>
<p><b>Bit Syntax</b> - Is frequently useful when setting up low-level communications with non-Erlang processes, and reading files. Joe calls this out as the first of three very useful features, and it really is elegant. If you've never seen it, I encourage you to <a href=\"http://www.erlang.org/documentation/doc-5.6/doc/programming_examples/bit_syntax.html\">take a quick look</a>. Short version: the notation they've set up gives you access to the same pattern matching facilities you can expect from the rest of the language, which in turn makes it very simple to decode and process binary data.</p>

<p><b>Formalized Inter-process Relationships</b> - This is another feature that typical \"Erlang-style\" systems miss. They're useful as fuck when you're building multi-processing systems, but it seems like you could add them on later if you picked your primary primitives properly. The idea is that you can <a href=\"http://www.erlang.org/doc/reference_manual/processes.html\">explicitly link various processes</a> in certain ways. For instance, you can tell a group of processes to all fail if one of them fails, or you can tell a specific process to monitor another, restarting it in the event of an error.</p>

<p><b>Offensive Programming</b> - He called it \"non-<a href=\"http://en.wikipedia.org/wiki/Defensive_programming\">defensive programming</a>\", but I like the negative name better. Offensive programming is the technique of programming only for the successful case, and letting any error take down the process involved (someone will be along to pick up the pieces and restart it shortly). That <i>would</i> sound crazy in your typical language, but starts looking like a good idea when your principal method of organization is a completely isolated process.</p>

<h3>The FFI</h3>

<p>Aside from historical notes and tutorials, I've been looking at how I'd go about interfacing Erlang to other languages. The standard seems to be doing it the same way you'd interface different Erlang processes. Except that where Erlang nodes already know how to talk to each other, the protocol needs to be implemented manually for other languages. It works consistently whether you're talking to <a href=\"http://erlport.org/\">Python</a>, <a href=\"https://github.com/mojombo/erlectricity\">Ruby</a>, <a href=\"http://common-lisp.net/project/cleric/\">Common Lisp</a>, <a href=\"http://www.erlang.org/documentation/doc-5.1/lib/jinterface-1.2.1/doc/html/java/index.html\">Java</a> or <a href=\"http://www.erlang.org/doc/tutorial/cnode.html\">C</a><a href=\"#foot-Mon-Apr-30-005524EDT-2012\" name=\"note-Mon-Apr-30-005524EDT-2012\">[6]</a>. All the languages I've taken a look at so far come with an established protocol to talk to Erlang in some way.</p>

<p>Here's a practical example that I'll actually end up refining for deployment later; a <a href=\"http://www.imagemagick.org/script/magick-wand.php?ImageMagick=p2vadv8o3dqp83j47nqgam0au5\">C-based interface</a> to some very specific <a href=\"http://www.imagemagick.org/script/index.php\">ImageMagick</a> routines.</p>

<p>First, the Erlang communication functions<a href=\"#foot-Mon-Apr-30-005635EDT-2012\" name=\"note-Mon-Apr-30-005635EDT-2012\">[7]</a></p>

<pre><span style=\"color: #b22222;\">/* </span><span style=\"color: #b22222;\">erl_comm.c </span><span style=\"color: #b22222;\">*/</span>

<span style=\"color: #7a378b;\">#include</span> <span style=\"color: #8b2252;\">&lt;unistd.h&gt;</span>

<span style=\"color: #a020f0;\">typedef</span> <span style=\"color: #228b22;\">unsigned</span> <span style=\"color: #228b22;\">char</span> <span style=\"color: #228b22;\">byte</span>;

<span style=\"color: #228b22;\">int</span> <span style=\"color: #0000ff;\">read_cmd</span>(<span style=\"color: #228b22;\">byte</span> *<span style=\"color: #a0522d;\">buff</span>);
<span style=\"color: #228b22;\">int</span> <span style=\"color: #0000ff;\">write_cmd</span>(<span style=\"color: #228b22;\">byte</span> *<span style=\"color: #a0522d;\">buff</span>, <span style=\"color: #228b22;\">int</span> <span style=\"color: #a0522d;\">len</span>);
<span style=\"color: #228b22;\">int</span> <span style=\"color: #0000ff;\">read_exact</span>(<span style=\"color: #228b22;\">byte</span> *<span style=\"color: #a0522d;\">buff</span>, <span style=\"color: #228b22;\">int</span> <span style=\"color: #a0522d;\">len</span>);
<span style=\"color: #228b22;\">int</span> <span style=\"color: #0000ff;\">write_exact</span>(<span style=\"color: #228b22;\">byte</span> *<span style=\"color: #a0522d;\">buff</span>, <span style=\"color: #228b22;\">int</span> <span style=\"color: #a0522d;\">len</span>);

<span style=\"color: #228b22;\">int</span> <span style=\"color: #0000ff;\">read_cmd</span>(<span style=\"color: #228b22;\">byte</span> *<span style=\"color: #a0522d;\">buff</span>) {
  <span style=\"color: #228b22;\">int</span> <span style=\"color: #a0522d;\">len</span>;
  <span style=\"color: #a020f0;\">if</span> (read_exact(buff, 2) != 2) {
    <span style=\"color: #a020f0;\">return</span>(-1);
  }
  len = (buff[0] &lt;&lt; 8) | buff[1];
  <span style=\"color: #a020f0;\">return</span> read_exact(buff, len);
}

<span style=\"color: #228b22;\">int</span> <span style=\"color: #0000ff;\">write_cmd</span>(<span style=\"color: #228b22;\">byte</span> *<span style=\"color: #a0522d;\">buff</span>, <span style=\"color: #228b22;\">int</span> <span style=\"color: #a0522d;\">len</span>) {
  <span style=\"color: #228b22;\">byte</span> <span style=\"color: #a0522d;\">li</span>;
  li = (len &gt;&gt; 8) &amp; 0xff;
  write_exact(&amp;li, 1);
  
  li = len &amp; 0xff;
  write_exact(&amp;li, 1);

  <span style=\"color: #a020f0;\">return</span> write_exact(buff, len);
}

<span style=\"color: #228b22;\">int</span> <span style=\"color: #0000ff;\">read_exact</span>(<span style=\"color: #228b22;\">byte</span> *<span style=\"color: #a0522d;\">buff</span>, <span style=\"color: #228b22;\">int</span> <span style=\"color: #a0522d;\">len</span>){
  <span style=\"color: #228b22;\">int</span> <span style=\"color: #a0522d;\">i</span>, <span style=\"color: #a0522d;\">got</span>=0;
  <span style=\"color: #a020f0;\">do</span> {
    <span style=\"color: #a020f0;\">if</span> ((i = read(0, buff+got, len-got)) &lt;= 0) {
      <span style=\"color: #a020f0;\">return</span>(i);
    }
    got +=i;
  } <span style=\"color: #a020f0;\">while</span> (got&lt;len);
  buff[len] = <span style=\"color: #8b2252;\">'\\0'</span>;
  <span style=\"color: #a020f0;\">return</span>(len);
}

<span style=\"color: #228b22;\">int</span> <span style=\"color: #0000ff;\">write_exact</span>(<span style=\"color: #228b22;\">byte</span> *<span style=\"color: #a0522d;\">buff</span>, <span style=\"color: #228b22;\">int</span> <span style=\"color: #a0522d;\">len</span>) {
  <span style=\"color: #228b22;\">int</span> <span style=\"color: #a0522d;\">i</span>, <span style=\"color: #a0522d;\">wrote</span> = 0;
  <span style=\"color: #a020f0;\">do</span> {
    <span style=\"color: #a020f0;\">if</span> ((i = write(1, buff+wrote, len-wrote)) &lt;= 0) {
      <span style=\"color: #a020f0;\">return</span>(i);
    }
    wrote += i;
  } <span style=\"color: #a020f0;\">while</span> (wrote&lt;len);
  <span style=\"color: #a020f0;\">return</span>(len);
}</pre>

<p>Next, the \"driver\". This is the bit that will actually end up being spawned and fed input by the Erlang process</p>

<pre><span style=\"color: #b22222;\">/* </span><span style=\"color: #b22222;\">driver.c </span><span style=\"color: #b22222;\">*/</span>
<span style=\"color: #7a378b;\">#include</span> <span style=\"color: #8b2252;\">&lt;limits.h&gt;</span>
<span style=\"color: #7a378b;\">#include</span> <span style=\"color: #8b2252;\">&lt;libgen.h&gt;</span>
<span style=\"color: #7a378b;\">#include</span> <span style=\"color: #8b2252;\">&lt;string.h&gt;</span>
<span style=\"color: #7a378b;\">#include</span> <span style=\"color: #8b2252;\">&lt;stdio.h&gt;</span>
<span style=\"color: #7a378b;\">#include</span> <span style=\"color: #8b2252;\">&lt;stdlib.h&gt;</span>

<span style=\"color: #a020f0;\">typedef</span> <span style=\"color: #228b22;\">unsigned</span> <span style=\"color: #228b22;\">char</span> <span style=\"color: #228b22;\">byte</span>;

<span style=\"color: #228b22;\">int</span> <span style=\"color: #0000ff;\">read_cmd</span>(<span style=\"color: #228b22;\">byte</span> *<span style=\"color: #a0522d;\">buff</span>);
<span style=\"color: #228b22;\">int</span> <span style=\"color: #0000ff;\">write_cmd</span>(<span style=\"color: #228b22;\">byte</span> *<span style=\"color: #a0522d;\">buff</span>, <span style=\"color: #228b22;\">int</span> <span style=\"color: #a0522d;\">len</span>);

<span style=\"color: #228b22;\">char</span> *<span style=\"color: #0000ff;\">chop_path</span>(<span style=\"color: #228b22;\">char</span> *<span style=\"color: #a0522d;\">orig</span>) {
  <span style=\"color: #228b22;\">char</span> <span style=\"color: #a0522d;\">buf</span>[PATH_MAX + 1];
  <span style=\"color: #228b22;\">char</span> *<span style=\"color: #a0522d;\">res</span>, *<span style=\"color: #a0522d;\">dname</span>, *<span style=\"color: #a0522d;\">thumb</span>;

  res = realpath(orig, buf);
  <span style=\"color: #a020f0;\">if</span> (res) {
    dname = dirname(res);
    thumb = strcat(dname, <span style=\"color: #8b2252;\">\"/thumbnail.png\"</span>);
    <span style=\"color: #a020f0;\">return</span> thumb;
  }
  <span style=\"color: #a020f0;\">return</span> 0;
}

<span style=\"color: #228b22;\">int</span> <span style=\"color: #0000ff;\">main</span>(){
  <span style=\"color: #228b22;\">int</span> <span style=\"color: #a0522d;\">result</span>, <span style=\"color: #a0522d;\">i</span>, <span style=\"color: #a0522d;\">len</span>;
  <span style=\"color: #228b22;\">byte</span> <span style=\"color: #a0522d;\">buff</span>[255];
  <span style=\"color: #228b22;\">char</span> *<span style=\"color: #a0522d;\">thumb</span>;

  <span style=\"color: #a020f0;\">while</span> (read_cmd(buff) &gt; 0) {
    thumb = chop_path(buff);
    result = thumbnail(buff, thumb);
    
    buff[0] = result;
    write_cmd(buff, 1);
  }
}</pre>

<p>Then the actual function I'll be wanting to call<a href=\"#foot-Mon-Apr-30-005755EDT-2012\" name=\"note-Mon-Apr-30-005755EDT-2012\">[8]</a></p>

<pre><span style=\"color: #b22222;\">/* </span><span style=\"color: #b22222;\">wand.c </span><span style=\"color: #b22222;\">*/</span>
<span style=\"color: #7a378b;\">#include</span> <span style=\"color: #8b2252;\">&lt;stdio.h&gt;</span>
<span style=\"color: #7a378b;\">#include</span> <span style=\"color: #8b2252;\">&lt;stdlib.h&gt;</span>
<span style=\"color: #7a378b;\">#include</span> <span style=\"color: #8b2252;\">&lt;wand/MagickWand.h&gt;</span>

<span style=\"color: #7a378b;\">#define</span> <span style=\"color: #0000ff;\">ThrowWandException</span>(<span style=\"color: #a0522d;\">wand</span>, <span style=\"color: #a0522d;\">ret</span>) \\
{ \\
  <span style=\"color: #228b22;\">char</span> \\
    *<span style=\"color: #a0522d;\">description</span>; \\
 \\
  <span style=\"color: #228b22;\">ExceptionType</span> \\
    <span style=\"color: #a0522d;\">severity</span>; \\
 \\
  description=MagickGetException(wand,&amp;severity); \\
  (<span style=\"color: #228b22;\">void</span>) fprintf(stderr,<span style=\"color: #8b2252;\">\"%s %s %lu %s\\n\"</span>,GetMagickModule(),description); \\
  description=(<span style=\"color: #228b22;\">char</span> *) MagickRelinquishMemory(description); \\
  wand=DestroyMagickWand(wand); \\
  MagickWandTerminus(); \\
  <span style=\"color: #a020f0;\">return</span> ret; \\
}

<span style=\"color: #228b22;\">int</span> <span style=\"color: #0000ff;\">thumbnail</span> (<span style=\"color: #228b22;\">char</span> *<span style=\"color: #a0522d;\">image_name</span>, <span style=\"color: #228b22;\">char</span> *<span style=\"color: #a0522d;\">thumbnail_name</span>){

  <span style=\"color: #228b22;\">MagickWand</span> *<span style=\"color: #a0522d;\">magick_wand</span>;
  <span style=\"color: #228b22;\">MagickBooleanType</span> <span style=\"color: #a0522d;\">status</span>;

  <span style=\"color: #b22222;\">/* </span><span style=\"color: #b22222;\">Read an image. </span><span style=\"color: #b22222;\">*/</span>
  MagickWandGenesis();
  magick_wand=NewMagickWand();
  status=MagickReadImage(magick_wand, image_name);
  <span style=\"color: #a020f0;\">if</span> (status == MagickFalse) ThrowWandException(magick_wand, 1);
  
  <span style=\"color: #b22222;\">/* </span><span style=\"color: #b22222;\">Turn the images into a thumbnail sequence. </span><span style=\"color: #b22222;\">*/</span>
  MagickResetIterator(magick_wand);
  <span style=\"color: #a020f0;\">while</span> (MagickNextImage(magick_wand) != MagickFalse)
    MagickResizeImage(magick_wand,106,80,LanczosFilter,1.0);

  <span style=\"color: #b22222;\">/* </span><span style=\"color: #b22222;\">Write the image then destroy it. </span><span style=\"color: #b22222;\">*/</span>
  status=MagickWriteImages(magick_wand, thumbnail_name, MagickTrue);
  <span style=\"color: #a020f0;\">if</span> (status == MagickFalse) ThrowWandException(magick_wand, 2);
  magick_wand=DestroyMagickWand(magick_wand);
  MagickWandTerminus();
  
  <span style=\"color: #a020f0;\">return</span> 0;
}</pre>

<p>and, finally, the actual calling Erlang module.</p>

<pre><span style=\"color: #b22222;\">%% </span><span style=\"color: #b22222;\">wand.erl
</span><span style=\"color: #7a378b;\">-module</span>(wand).
<span style=\"color: #7a378b;\">-export</span>([<span style=\"color: #228b22;\">start/0</span>, <span style=\"color: #228b22;\">stop/0</span>, <span style=\"color: #228b22;\">restart/0</span>]).
<span style=\"color: #7a378b;\">-export</span>([<span style=\"color: #228b22;\">thumbnail/1</span>]).

<span style=\"color: #0000ff;\">start</span>() -&gt;
    <span style=\"color: #7a378b;\">spawn</span>(<span style=\"color: #a020f0;\">fun</span>() -&gt;
                  <span style=\"color: #7a378b;\">register</span>(wand, <span style=\"color: #7a378b;\">self</span>()),
                  <span style=\"color: #7a378b;\">process_flag</span>(trap_exit, true),
                  <span style=\"color: #a0522d;\">Port</span> = <span style=\"color: #7a378b;\">open_port</span>({spawn, <span style=\"color: #8b2252;\">\"./wand\"</span>}, [{packet, 2}]),
                  <span style=\"color: #228b22;\">loop</span>(<span style=\"color: #a0522d;\">Port</span>)
          <span style=\"color: #a020f0;\">end</span>).

<span style=\"color: #0000ff;\">stop</span>() -&gt;<span style=\"color: #0000ff;\"> </span>wand ! stop.

<span style=\"color: #0000ff;\">restart</span>() -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #228b22;\">stop</span>(), <span style=\"color: #228b22;\">start</span>().

<span style=\"color: #0000ff;\">thumbnail</span>(<span style=\"color: #a0522d;\">Filename</span>) -&gt;
    <span style=\"color: #228b22;\">call_port</span>(<span style=\"color: #a0522d;\">Filename</span>).

<span style=\"color: #0000ff;\">call_port</span>(<span style=\"color: #a0522d;\">Msg</span>) -&gt;
    wand ! {call, <span style=\"color: #7a378b;\">self</span>(), <span style=\"color: #a0522d;\">Msg</span>},
    <span style=\"color: #a020f0;\">receive</span>
        {wand, <span style=\"color: #a0522d;\">Result</span>} -&gt;
            <span style=\"color: #a0522d;\">Result</span>
    <span style=\"color: #a020f0;\">end</span>.

<span style=\"color: #0000ff;\">loop</span>(<span style=\"color: #a0522d;\">Port</span>) -&gt;
    <span style=\"color: #a020f0;\">receive</span>
        {call, <span style=\"color: #a0522d;\">Caller</span>, <span style=\"color: #a0522d;\">Msg</span>} -&gt;
            <span style=\"color: #a0522d;\">Port</span> ! {<span style=\"color: #7a378b;\">self</span>(), {command, <span style=\"color: #a0522d;\">Msg</span>}},
            <span style=\"color: #a020f0;\">receive</span>
                {<span style=\"color: #a0522d;\">Port</span>, {data, <span style=\"color: #a0522d;\">Data</span>}} -&gt;
                    <span style=\"color: #a0522d;\">Caller</span> ! {wand, <span style=\"color: #228b22;\">decode</span>(<span style=\"color: #a0522d;\">Data</span>)}    
            <span style=\"color: #a020f0;\">end</span>,
            <span style=\"color: #228b22;\">loop</span>(<span style=\"color: #a0522d;\">Port</span>);
        stop -&gt;
            <span style=\"color: #a0522d;\">Port</span> ! {<span style=\"color: #7a378b;\">self</span>(), close},
            <span style=\"color: #a020f0;\">receive</span>
                {<span style=\"color: #a0522d;\">Port</span>, closed} -&gt;
                    <span style=\"color: #7a378b;\">exit</span>(normal)
            <span style=\"color: #a020f0;\">end</span>;
        {<span style=\"color: #8b2252;\">'EXIT'</span>, <span style=\"color: #a0522d;\">Port</span>, <span style=\"color: #a0522d;\">Reason</span>} -&gt;
            <span style=\"color: #7a378b;\">exit</span>({port_terminated, <span style=\"color: #a0522d;\">Reason</span>})
    <span style=\"color: #a020f0;\">end</span>.

<span style=\"color: #0000ff;\">decode</span>([0]) -&gt;<span style=\"color: #0000ff;\"> </span>{ok, 0};
<span style=\"color: #0000ff;\">decode</span>([1]) -&gt;<span style=\"color: #0000ff;\"> </span>{error, could_not_read};
<span style=\"color: #0000ff;\">decode</span>([2]) -&gt;<span style=\"color: #0000ff;\"> </span>{error, could_not_write}.</pre>

<p>Once all that is done, and compiled using <code>gcc -o wand `pkg-config --cflags --libs MagickWand` wand.c erl_comm.c driver.c</code>, I can call it from an Erlang process as if it were a native thumbnail generator.</p>

<pre>
Erlang R15B01 (erts-5.9.1) [source] [64-bit] [smp:4:4] [async-threads:0] [kernel-poll:false]
  Eshell <span style=\"color: #a0522d;\">V5</span>.9.1  (abort with ^<span style=\"color: #a0522d;\">G</span>)
1&gt; <span style=\"color: #228b22;\">c</span>(wand).
{ok,wand}
2&gt; <span style=\"color: #228b22;\">wand</span>:<span style=\"color: #228b22;\">start</span>().
&lt;0.39.0&gt;
3&gt; <span style=\"color: #228b22;\">wand</span>:<span style=\"color: #228b22;\">thumbnail</span>(<span style=\"color: #8b2252;\">\"original.png\"</span>).
{ok, 0}
4&gt; <span style=\"color: #228b22;\">wand</span>:<span style=\"color: #228b22;\">thumbnail</span>(<span style=\"color: #8b2252;\">\"/home/inaimathi/Pictures/and-another.png\"</span>).
{ok, 0}</pre>

<p>You'll have to take my word for it, but those both generate the appropriate <code>\"thumbnail.png\"</code> file in the same directory as the specified images.</p>

<p>All of that looks pretty complicated, but it really isn't when you sit down and read it. If I had to break it out by time involved, it would look something like</p>

<ul>
  <li>10% reading up on ImageMagick C interface</li>
  <li>5% reading up on Erlang C FFI (emphasis on the ports)</li>
  <li>5% writing  it</li>
  <li>80% trying to figure out why the C component was <a href=\"http://stackoverflow.com/questions/10378112/chopping-paths-in-c\">segfaulting when assembling a thumbnail path</a> (short answer: I didn't include everything I needed to)</li>
</ul>

<p>As a parting note, having gone through the rat's nest that is pathname manipulation in C, I hereby promise to never again bitch about Lisp's <a href=\"http://www.gigamonkeys.com/book/practical-a-portable-pathname-library.html\">pathname handling</a>. Nothing like wading waist-deep in horse shit to remind you how good you've got it merely living within earshot of the stables.</p>

<hr />
<h5>Footnotes</h5>
<p>1 - <a href=\"#note-Mon-Apr-30-004835EDT-2012\" name=\"foot-Mon-Apr-30-004835EDT-2012\">[back]</a> - Though I'll admit, the Erlang section is pretty sparse compared to the rest of them</p>

<p>2 - <a href=\"#note-Mon-Apr-30-004855EDT-2012\" name=\"foot-Mon-Apr-30-004855EDT-2012\">[back]</a> - That he'd put in if he had to do it again</p>

<p>3 - <a href=\"#note-Mon-Apr-30-005108EDT-2012\" name=\"foot-Mon-Apr-30-005108EDT-2012\">[back]</a> - For the record, I'm trying really hard not to put on my Lisp hat and say something like <i>\"Mmmm, mmmm, this syntactic abstraction is fucking <b>delicious</b>! How's it working for <b>you</b> guys? Oh, you <b>haven't</b> had any?! That's a <b>shame</b>...\"</i> in an obnoxiously smug voice. It's difficult, and this footnote may count as a failure. Sorry.</p>

<p>4 - <a href=\"#note-Mon-Apr-30-005141EDT-2012\" name=\"foot-Mon-Apr-30-005141EDT-2012\">[back]</a> - In fact the entirety of my related experience is the appropriate chapter from <a href=\"http://pragprog.com/book/btlang/seven-languages-in-seven-weeks\">7 Languages...</a>, flipping through <a href=\"http://mitpress.mit.edu/catalog/item/default.asp?ttype=2&tid=10663\">the Reasoned Schemer</a> and the <a href=\"http://www.youtube.com/watch?v=2Op3QLzMgSY&feature=BFa&list=PL8FE88AA54363BC46\">SICP lectures</a> wherein prolog is briefly implemented on top of Lisp. Thant link is to the playlist rather than the correct episode; it's been a while, and I no longer remember which it was specifically.</p>

<p>5 - <a href=\"#note-Mon-Apr-30-005314EDT-2012\" name=\"foot-Mon-Apr-30-005314EDT-2012\">[back]</a> - This was reportedly on a 2.4gHz Celeron machine with a half-gig of ram, so that was <i>not</i> a consequence of awesome hardware</p>

<p>6 - <a href=\"#note-Mon-Apr-30-005524EDT-2012\" name=\"foot-Mon-Apr-30-005524EDT-2012\">[back]</a> - Actually, that's half true. There are three different ways to interface with a C program; you can do <a href=\"http://www.erlang.org/doc/tutorial/c_portdriver.html\">port-based communication with a custom protocol</a>, you can <a href=\"http://www.erlang.org/doc/tutorial/nif.html\">call C natively</a> at the risk of system collapse with errors, or you can <a href=\"http://www.erlang.org/doc/tutorial/cnode.html\">implement the Erlang protocol</a> and pretend to be an Erlang process for the purposes of interoperability. The other languages I've taken a look at do that last one, but you've got options if you're rolling your own</p>

<p>7 - <a href=\"#note-Mon-Apr-30-005635EDT-2012\" name=\"foot-Mon-Apr-30-005635EDT-2012\">[back]</a> - Ripped bleeding from <a href=\"http://pragprog.com/book/jaerlang/programming-erlang\">Programming Erlang</a>. It which won't change at all, regardless of what specific protocol I end up picking</p>

<p>8 - <a href=\"#note-Mon-Apr-30-005755EDT-2012\" name=\"foot-Mon-Apr-30-005755EDT-2012\">[back]</a> - With thanks to the <a href=\"http://www.imagemagick.org/source/wand.c\">reference implementation</a> from the ImageMagick team</p>
    "))
((5202 3723 572929000) :INSERT (77 :POSTED 3544660800))
((5202 3723 572935000) :INSERT (77 :TAG :C))
((5202 3723 572938000) :INSERT (77 :TAG :ERLANG))
((5202 3723 572943000) :INSERT (77 :TAG :FFI))
((5202 3723 572946000) :INSERT (77 :TAG :NOTES))
((5202 3723 573196000) :INSERT (78 :TITLE "Indentation Ventilation"))
((5202 3723 573206000) :INSERT (78 :FILE "indentation-ventilation.html"))
((5202 3723 573211000) :INSERT (78 :EDITED 3610022331))
((5202 3723 573214000) :INSERT
 (78 :BODY "<p>I need to vent, so just ignore this article.</p>

<p style=\"font-family: sans-serif; font-size: x-large; font-weight: bold; text-transform: uppercase;\"><a href=\"http://stackoverflow.com/questions/10381438/lisp-removing-an-element-from-a-list-with-nested-lists\">Your</a> formatting <a href=\"http://stackoverflow.com/questions/10220939/clisp-reversing-a-simple-list\">makes</a> me <a href=\"http://stackoverflow.com/questions/10368407/emacs-syntax-highlighting-of-nested-regular-expressions\">want</a> to <a href=\"http://stackoverflow.com/questions/10304726/how-would-one-merge-two-strings-that-are-ordered-alphabetically-in-lisp-using-re\">puke</a>.</p>

<p>For fuck's sake, when I ask questions about JavaScript or C, I don't bust out</p>

<pre><span style=\"color: #228b22;\">lorem</span> <span style=\"color: #0000ff;\">ipsum</span>(dolor, sit) { 
    amet = consectetur(); 
    <span style=\"color: #a0522d;\">adipiscing</span> (elit) {
        Nulla_quis_purus = ac;
        arcu = consequat(consectetur(vitae(convallis,lacus)));}
    Aliquam { <span style=\"color: #228b22;\">erat</span> <span style=\"color: #a0522d;\">volutpat</span>;}}</pre>

<p>It's not as though it's difficult. Lisp is made of s-expressions, the only places where indentation gets ambiguous is in <a href=\"https://github.com/slyrus/cl-typesetting/blob/master/tables.lisp#L168\">extended <code>loop</code> forms</a>, and maybe one or two edge cases with <code>let</code>s. Just take the three minutes required to read the <a href=\"http://dept-info.labri.u-bordeaux.fr/~idurand/enseignement/PFS/Common/Strandh-Tutorial/indentation.html\">standard style</a>, and stop pretending that you're showing us paren-using noble savages the proper way to waste vertical space.</p>

<p><b>Fuck!</b></p>

<p>I need some sleep.</p>
"))
((5202 3723 573234000) :INSERT (78 :POSTED 3544747200))
((5202 3723 573238000) :INSERT (78 :TAG :COMMON-LISP))
((5202 3723 573241000) :INSERT (78 :TAG :INDENTATION))
((5202 3723 573245000) :INSERT (78 :TAG :LISP))
((5202 3723 575158000) :INSERT (79 :TITLE "Hot Erlang Code"))
((5202 3723 575168000) :INSERT (79 :FILE "erlang-barcode-generation.html"))
((5202 3723 575172000) :INSERT (79 :EDITED 3610300084))
((5202 3723 575174000) :INSERT
 (79 :BODY
  "<p>Ok, this isn't actually all Erlang. In fact, by line-count, it's a Postscript project, but <a href=\"https://code.google.com/p/postscriptbarcode/\">all of those lines were already written</a> by someone else. Also, I'm not sure whether I'll get the same benefit here that I got out of <a href=\"/article?name=strifebarge--turn-based-web-games-in-common-lisp.html\">my Strifebarge write-up</a>, but it's the third such piece, so I've gone back and added labels to group them.</p>

<p>\"Almost Literate Programming\".</p>

<p>What I'm doing isn't quite the <a href=\"http://www.literateprogramming.com/\">LP that Knuth advocates</a> because it doesn't self-extract, share space with the executable source, or make use of variable labels to automatically update certain portions. However, it still gains me considerable reflective clarity about what the goal of the program is, and it hopefully conveys the essence to whoever happens to be reading. With that out of the way...</p>

<h3>Generating Barcodes</h3>

<p>As you may have noticed from the above links, there already exists a <a href=\"https://code.google.com/p/postscriptbarcode/\">Postscript-based barcode generator</a> which I'm going to use pretty shamelessly in order to generate bitmap barcodes of various descriptions. Taking a look at the <a href=\"https://code.google.com/p/postscriptbarcode/downloads/detail?name=barcode-2012-04-26.ps\">actual code</a> for that generator should make it obvious that you probably <i>don't</i> want to just echo the entire system every time you need to generate something<a href=\"#foot-Tue-May-15-220424EDT-2012\" name=\"note-Tue-May-15-220424EDT-2012\">[1]</a>. We'll get to that though, lets start from the system side first. This is what a <code>.app</code> declaration looks like in Erlang</p>

<pre><span style=\"color: #b22222;\"># </span><span style=\"color: #b22222;\">Makefile
</span><span style=\"color: #0000ff;\">all</span>: *.erl *.c
        make wand
        erlc -W *erl

<span style=\"color: #0000ff;\">run</span>: 
        erl -name ps_barcode@127.0.1.1 -eval <span style=\"color: #8b2252;\">'application:load(ps_barcode).'</span> -eval <span style=\"color: #8b2252;\">'application:start(ps_barcode).'</span>

<span style=\"color: #0000ff;\">wand</span>: wand.c erl_comm.c driver.c
        gcc -o wand <span style=\"color: #8b2252;\">`pkg-config --cflags --libs MagickWand`</span> wand.c erl_comm.c driver.c

<span style=\"color: #0000ff;\">clean</span>:
        rm wand 
        rm *beam</pre>

<pre><span style=\"color: #b22222;\">%% </span><span style=\"color: #b22222;\">ps_barcode.app
</span>{application, ps_barcode,
 [{description, <span style=\"color: #8b2252;\">\"barcode image generator based on ps-barcode\"</span>},
  {vsn, <span style=\"color: #8b2252;\">\"1.0\"</span>},
  {modules, [ps_barcode_app, ps_barcode_supervisor, barcode_data, wand, ps_bc]},
  {registered, [ps_bc, wand, ps_barcode_supervisor]},
  {applications, [kernel, stdlib]},
  {mod, {ps_barcode_app, []}},
  {start_phases, []}]}.</pre>

<pre><span style=\"color: #7a378b;\">-module</span>(ps_barcode_app).
<span style=\"color: #7a378b;\">-behaviour</span>(application).
<span style=\"color: #7a378b;\">-export</span>([<span style=\"color: #228b22;\">start/2</span>, <span style=\"color: #228b22;\">stop/1</span>]).

<span style=\"color: #0000ff;\">start</span>(<span style=\"color: #a0522d;\">_Type</span>, <span style=\"color: #a0522d;\">StartArgs</span>) -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #228b22;\">ps_barcode_supervisor</span>:<span style=\"color: #228b22;\">start_link</span>(<span style=\"color: #a0522d;\">StartArgs</span>).
<span style=\"color: #0000ff;\">stop</span>(<span style=\"color: #a0522d;\">_State</span>) -&gt;<span style=\"color: #0000ff;\"> </span>ok.</pre>

<pre><span style=\"color: #7a378b;\">-module</span>(ps_barcode_supervisor).
<span style=\"color: #7a378b;\">-behavior</span>(supervisor).

<span style=\"color: #7a378b;\">-export</span>([<span style=\"color: #228b22;\">start/0</span>, <span style=\"color: #228b22;\">start_for_testing/0</span>, <span style=\"color: #228b22;\">start_link/1</span>, <span style=\"color: #228b22;\">init/1</span>]).

<span style=\"color: #0000ff;\">start</span>() -&gt;
    <span style=\"color: #7a378b;\">spawn</span>(<span style=\"color: #a020f0;\">fun</span>() -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #228b22;\">supervisor</span>:<span style=\"color: #228b22;\">start_link</span>({local, ?<span style=\"color: #008b8b;\">MODULE</span>}, ?<span style=\"color: #008b8b;\">MODULE</span>, <span style=\"color: #a0522d;\">_Arg</span> = []) <span style=\"color: #a020f0;\">end</span>).

<span style=\"color: #0000ff;\">start_for_testing</span>() -&gt;
    {ok, <span style=\"color: #a0522d;\">Pid</span>} = <span style=\"color: #228b22;\">supervisor</span>:<span style=\"color: #228b22;\">start_link</span>({local, ?<span style=\"color: #008b8b;\">MODULE</span>}, ?<span style=\"color: #008b8b;\">MODULE</span>, <span style=\"color: #a0522d;\">_Arg</span> = []),
    <span style=\"color: #7a378b;\">unlink</span>(<span style=\"color: #a0522d;\">Pid</span>).

<span style=\"color: #0000ff;\">start_link</span>(<span style=\"color: #a0522d;\">Args</span>) -&gt;
    <span style=\"color: #228b22;\">supervisor</span>:<span style=\"color: #228b22;\">start_link</span>({local, ?<span style=\"color: #008b8b;\">MODULE</span>}, ?<span style=\"color: #008b8b;\">MODULE</span>, <span style=\"color: #a0522d;\">Args</span>).

<span style=\"color: #0000ff;\">init</span>([]) -&gt;
    {ok, {{one_for_one, 3, 10},
          [{tag1, 
            {wand, start, []},
            permanent,
            brutal_kill,
            worker,
            [wand]},
           {tag2,
            {ps_bc, start, []},
            permanent,
            10000,
            worker,
            [ps_bc]}]}}.</pre>

<p>The <code>Makefile</code> is not, strictly speaking, necessary, but a bunch of stuff needs to be done manually in its absence. The above code is approximately equivalent to <a href=\"https://github.com/xach/quickproject/\">a Lisp <code>.asd</code> file</a>, in that it tells Erlang what needs to be compiled/called in order to run the system I'm about to define<a href=\"#foot-Tue-May-15-220604EDT-2012\" name=\"note-Tue-May-15-220604EDT-2012\">[2]</a>.</p>

<pre>  {modules, [ps_barcode_app, ps_barcode_supervisor, barcode_data, wand, ps_bc]},</pre>


<p>That line specifies which other modules we'll be loading as part of the application, as well as their start order (which is relevant for a certain supervision strategy).</p>

<pre>  {registered, [ps_bc, wand, ps_barcode_supervisor]},</pre>

<p>That one specifies registered processes we expect.</p>

<pre>  {mod, {ps_barcode_app, []}},</pre>

<p>That one tells Erlang which module's <code>start</code> function to call in order to start the application, and what arguments to pass it as <code>StartArgs</code>.</p>

<pre><span style=\"color: #0000ff;\">init</span>([]) -&gt;
    {ok, {{one_for_one, 3, 10},
          [{tag1, 
            {wand, start, []},
            permanent,
            brutal_kill,
            worker,
            [wand]},
           {tag2,
            {ps_bc, start, []},
            permanent,
            10000,
            worker,
            [ps_bc]}]}}.</pre>

<p><i>That</i> does something interesting; it defines how the <a href=\"http://www.erlang.org/doc/man/supervisor.html\">supervisor</a> should act, and how it should treat its child processes. <code>{one_for_one, 3, 10}</code> means that if a supervised process errors, it should be restarted on its own up to 3 times in 10 seconds<a href=\"#foot-Tue-May-15-220658EDT-2012\" name=\"note-Tue-May-15-220658EDT-2012\">[3]</a>. Both sub-processes are <code>permanent</code><a href=\"#foot-Tue-May-15-220712EDT-2012\" name=\"note-Tue-May-15-220712EDT-2012\">[4]</a> <code>worker</code>s<a href=\"#foot-Tue-May-15-220719EDT-2012\" name=\"note-Tue-May-15-220719EDT-2012\">[5]</a>. The last interesting bit is the <code>brutal_kill</code>/<code>10000</code> part; that's the <code>Shutdown</code> variable. It determines how the process should be terminated; <code>brutal_kill</code> means \"kill the process right away\", an integer means \"send the process a stop command and wait up to this many milliseconds, then kill it\".</p>

<p>Lets follow the applications' start order and move on to</p>

<pre><span style=\"color: #7a378b;\">-module</span>(barcode_data).
<span style=\"color: #7a378b;\">-export</span>([<span style=\"color: #228b22;\">read_default_file/0</span>, <span style=\"color: #228b22;\">read_file/1</span>]).
<span style=\"color: #7a378b;\">-export</span>([<span style=\"color: #228b22;\">export_ets_file/1</span>, <span style=\"color: #228b22;\">import_ets_file/0</span>]).

<span style=\"color: #0000ff;\">export_ets_file</span>(<span style=\"color: #a0522d;\">Table</span>) -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #228b22;\">ets</span>:<span style=\"color: #228b22;\">tab2file</span>(<span style=\"color: #a0522d;\">Table</span>, <span style=\"color: #8b2252;\">\"ps-barcode-blocks\"</span>).
<span style=\"color: #0000ff;\">import_ets_file</span>() -&gt;<span style=\"color: #0000ff;\"> </span>{ok, <span style=\"color: #a0522d;\">Tab</span>} = <span style=\"color: #228b22;\">ets</span>:<span style=\"color: #228b22;\">file2tab</span>(<span style=\"color: #228b22;\">filename</span>:<span style=\"color: #228b22;\">absname</span>(<span style=\"color: #8b2252;\">\"ps-barcode-blocks\"</span>)), <span style=\"color: #a0522d;\">Tab</span>.

<span style=\"color: #0000ff;\">read_default_file</span>() -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #228b22;\">read_file</span>(<span style=\"color: #8b2252;\">\"barcode.ps\"</span>).
<span style=\"color: #0000ff;\">read_file</span>(<span style=\"color: #a0522d;\">Filename</span>) -&gt;
    {ok, <span style=\"color: #a0522d;\">File</span>} = <span style=\"color: #228b22;\">file</span>:<span style=\"color: #228b22;\">open</span>(<span style=\"color: #a0522d;\">Filename</span>, [read]),
    <span style=\"color: #a0522d;\">TableId</span> = <span style=\"color: #228b22;\">ets</span>:<span style=\"color: #228b22;\">new</span>(ps_barcode_blocks, [ordered_set]),
    <span style=\"color: #228b22;\">trim_flash</span>(<span style=\"color: #a0522d;\">File</span>),
    {ok, <span style=\"color: #a0522d;\">Tab</span>} = <span style=\"color: #228b22;\">read_all_blocks</span>(<span style=\"color: #a0522d;\">File</span>, <span style=\"color: #a0522d;\">TableId</span>),
    <span style=\"color: #228b22;\">file</span>:<span style=\"color: #228b22;\">close</span>(<span style=\"color: #a0522d;\">File</span>),
    <span style=\"color: #a0522d;\">Tab</span>.

<span style=\"color: #0000ff;\">trim_flash</span>(<span style=\"color: #a0522d;\">IoDevice</span>) -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #228b22;\">read_until</span>(<span style=\"color: #a0522d;\">IoDevice</span>, <span style=\"color: #8b2252;\">\"% --BEGIN TEMPLATE\"</span>).

<span style=\"color: #0000ff;\">read_all_blocks</span>(<span style=\"color: #a0522d;\">IoDevice</span>, <span style=\"color: #a0522d;\">TableId</span>) -&gt;
    <span style=\"color: #a020f0;\">case</span> <span style=\"color: #a0522d;\">Res</span> = <span style=\"color: #228b22;\">read_block</span>(<span style=\"color: #a0522d;\">IoDevice</span>) <span style=\"color: #a020f0;\">of</span>
        [] -&gt;<span style=\"color: #0000ff;\"> </span>{ok, <span style=\"color: #a0522d;\">TableId</span>};
        <span style=\"color: #a0522d;\">_</span> -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #228b22;\">ets</span>:<span style=\"color: #228b22;\">insert</span>(<span style=\"color: #a0522d;\">TableId</span>, <span style=\"color: #228b22;\">parse_block</span>(<span style=\"color: #a0522d;\">Res</span>)),
             <span style=\"color: #228b22;\">read_all_blocks</span>(<span style=\"color: #a0522d;\">IoDevice</span>, <span style=\"color: #a0522d;\">TableId</span>)
    <span style=\"color: #a020f0;\">end</span>.

<span style=\"color: #0000ff;\">read_block</span>(<span style=\"color: #a0522d;\">IoDevice</span>) -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #228b22;\">read_until</span>(<span style=\"color: #a0522d;\">IoDevice</span>, <span style=\"color: #8b2252;\">\"% --END \"</span>).

<span style=\"color: #0000ff;\">parse_block</span>([[<span style=\"color: #8b2252;\">\"%\"</span>, <span style=\"color: #8b2252;\">\"BEGIN\"</span>, <span style=\"color: #8b2252;\">\"PREAMBLE\"</span>] | <span style=\"color: #a0522d;\">Body</span>]) -&gt;
    {preamble, <span style=\"color: #228b22;\">lists</span>:<span style=\"color: #228b22;\">append</span>(<span style=\"color: #a0522d;\">Body</span>)};
<span style=\"color: #0000ff;\">parse_block</span>([[<span style=\"color: #8b2252;\">\"%\"</span>, <span style=\"color: #8b2252;\">\"BEGIN\"</span>, <span style=\"color: #8b2252;\">\"RENDERER\"</span>, <span style=\"color: #a0522d;\">Name</span>] | <span style=\"color: #a0522d;\">Body</span>]) -&gt;
    {<span style=\"color: #7a378b;\">list_to_atom</span>(<span style=\"color: #a0522d;\">Name</span>), renderer, <span style=\"color: #228b22;\">lists</span>:<span style=\"color: #228b22;\">append</span>(<span style=\"color: #a0522d;\">Body</span>)};
<span style=\"color: #0000ff;\">parse_block</span>([[<span style=\"color: #8b2252;\">\"%\"</span>, <span style=\"color: #8b2252;\">\"BEGIN\"</span>, <span style=\"color: #8b2252;\">\"ENCODER\"</span>, <span style=\"color: #a0522d;\">Name</span>] | <span style=\"color: #a0522d;\">Body</span>]) -&gt;
    <span style=\"color: #228b22;\">parse_encoder_meta</span>(<span style=\"color: #a0522d;\">Name</span>, <span style=\"color: #a0522d;\">Body</span>);
<span style=\"color: #0000ff;\">parse_block</span>(<span style=\"color: #a0522d;\">_</span>) -&gt;<span style=\"color: #0000ff;\"> </span>{none}.

<span style=\"color: #0000ff;\">parse_encoder_meta</span> (<span style=\"color: #a0522d;\">Name</span>, <span style=\"color: #a0522d;\">Encoder</span>) -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #228b22;\">parse_encoder_meta</span>(<span style=\"color: #a0522d;\">Name</span>, <span style=\"color: #a0522d;\">Encoder</span>, [], {[], [], []}).
<span style=\"color: #0000ff;\">parse_encoder_meta</span> (<span style=\"color: #a0522d;\">Name</span>, [[<span style=\"color: #8b2252;\">\"%\"</span>, <span style=\"color: #8b2252;\">\"RNDR:\"</span> | <span style=\"color: #a0522d;\">Renderers</span>] | <span style=\"color: #a0522d;\">Rest</span>], <span style=\"color: #a0522d;\">Acc</span>, {<span style=\"color: #a0522d;\">_</span>, <span style=\"color: #a0522d;\">R</span>, <span style=\"color: #a0522d;\">S</span>}) -&gt;
    <span style=\"color: #228b22;\">parse_encoder_meta</span>(<span style=\"color: #a0522d;\">Name</span>, <span style=\"color: #a0522d;\">Rest</span>, <span style=\"color: #a0522d;\">Acc</span>, {<span style=\"color: #a0522d;\">Renderers</span>, <span style=\"color: #a0522d;\">R</span>, <span style=\"color: #a0522d;\">S</span>});
<span style=\"color: #0000ff;\">parse_encoder_meta</span> (<span style=\"color: #a0522d;\">Name</span>, [[<span style=\"color: #8b2252;\">\"%\"</span>, <span style=\"color: #8b2252;\">\"REQUIRES\"</span> | <span style=\"color: #a0522d;\">Reqs</span>] | <span style=\"color: #a0522d;\">Rest</span>], <span style=\"color: #a0522d;\">Acc</span>, {<span style=\"color: #a0522d;\">A</span>, <span style=\"color: #a0522d;\">_</span>, <span style=\"color: #a0522d;\">S</span>}) -&gt;
    <span style=\"color: #228b22;\">parse_encoder_meta</span>(<span style=\"color: #a0522d;\">Name</span>, <span style=\"color: #a0522d;\">Rest</span>, <span style=\"color: #a0522d;\">Acc</span>, {<span style=\"color: #a0522d;\">A</span>, <span style=\"color: #a0522d;\">Reqs</span>, <span style=\"color: #a0522d;\">S</span>});
<span style=\"color: #0000ff;\">parse_encoder_meta</span> (<span style=\"color: #a0522d;\">Name</span>, [[<span style=\"color: #8b2252;\">\"%\"</span>, <span style=\"color: #8b2252;\">\"SUGGESTS\"</span> | <span style=\"color: #a0522d;\">Suggs</span>] | <span style=\"color: #a0522d;\">Rest</span>], <span style=\"color: #a0522d;\">Acc</span>, {<span style=\"color: #a0522d;\">A</span>, <span style=\"color: #a0522d;\">R</span>, <span style=\"color: #a0522d;\">_</span>}) -&gt;
    <span style=\"color: #228b22;\">parse_encoder_meta</span>(<span style=\"color: #a0522d;\">Name</span>, <span style=\"color: #a0522d;\">Rest</span>, <span style=\"color: #a0522d;\">Acc</span>, {<span style=\"color: #a0522d;\">A</span>, <span style=\"color: #a0522d;\">R</span>, <span style=\"color: #a0522d;\">Suggs</span>});
<span style=\"color: #0000ff;\">parse_encoder_meta</span> (<span style=\"color: #a0522d;\">Name</span>, [[<span style=\"color: #8b2252;\">\"%\"</span>, <span style=\"color: #8b2252;\">\"EXOP:\"</span> | <span style=\"color: #a0522d;\">Exop</span>] | <span style=\"color: #a0522d;\">Rest</span>], <span style=\"color: #a0522d;\">Acc</span>, <span style=\"color: #a0522d;\">Cmp</span>) -&gt;
    <span style=\"color: #228b22;\">parse_encoder_meta</span>(<span style=\"color: #a0522d;\">Name</span>, <span style=\"color: #a0522d;\">Rest</span>, [{def_arg, <span style=\"color: #a0522d;\">Exop</span>} | <span style=\"color: #a0522d;\">Acc</span>], <span style=\"color: #a0522d;\">Cmp</span>);
<span style=\"color: #0000ff;\">parse_encoder_meta</span> (<span style=\"color: #a0522d;\">Name</span>, [[<span style=\"color: #8b2252;\">\"%\"</span>, <span style=\"color: #8b2252;\">\"EXAM:\"</span> | <span style=\"color: #a0522d;\">Exam</span>] | <span style=\"color: #a0522d;\">Rest</span>], <span style=\"color: #a0522d;\">Acc</span>, <span style=\"color: #a0522d;\">Cmp</span>) -&gt;
    <span style=\"color: #228b22;\">parse_encoder_meta</span>(<span style=\"color: #a0522d;\">Name</span>, <span style=\"color: #a0522d;\">Rest</span>, [{example, <span style=\"color: #228b22;\">string</span>:<span style=\"color: #228b22;\">join</span>(<span style=\"color: #a0522d;\">Exam</span>, <span style=\"color: #8b2252;\">\" \"</span>)} | <span style=\"color: #a0522d;\">Acc</span>], <span style=\"color: #a0522d;\">Cmp</span>);
<span style=\"color: #0000ff;\">parse_encoder_meta</span> (<span style=\"color: #a0522d;\">Name</span>, [[<span style=\"color: #8b2252;\">\"%\"</span> | <span style=\"color: #a0522d;\">_</span>] | <span style=\"color: #a0522d;\">Rest</span>], <span style=\"color: #a0522d;\">Acc</span>, <span style=\"color: #a0522d;\">Cmp</span>) -&gt;
    <span style=\"color: #228b22;\">parse_encoder_meta</span>(<span style=\"color: #a0522d;\">Name</span>, <span style=\"color: #a0522d;\">Rest</span>, <span style=\"color: #a0522d;\">Acc</span>, <span style=\"color: #a0522d;\">Cmp</span>);
<span style=\"color: #0000ff;\">parse_encoder_meta</span> (<span style=\"color: #a0522d;\">Name</span>, <span style=\"color: #a0522d;\">Body</span>, [<span style=\"color: #a0522d;\">DefArgs</span>, <span style=\"color: #a0522d;\">Example</span>], {<span style=\"color: #a0522d;\">A</span>, <span style=\"color: #a0522d;\">R</span>, <span style=\"color: #a0522d;\">S</span>}) -&gt;
    <span style=\"color: #a0522d;\">Reqs</span> = [<span style=\"color: #7a378b;\">list_to_atom</span>(<span style=\"color: #228b22;\">strip_nl</span>(<span style=\"color: #a0522d;\">X</span>)) <span style=\"color: #a020f0;\">||</span> <span style=\"color: #a0522d;\">X</span> <span style=\"color: #a020f0;\">&lt;-</span> <span style=\"color: #228b22;\">lists</span>:<span style=\"color: #228b22;\">append</span>([<span style=\"color: #a0522d;\">A</span>, <span style=\"color: #a0522d;\">R</span>, <span style=\"color: #a0522d;\">S</span>])],
    {<span style=\"color: #7a378b;\">list_to_atom</span>(<span style=\"color: #a0522d;\">Name</span>), encoder, {requires, <span style=\"color: #a0522d;\">Reqs</span>}, <span style=\"color: #a0522d;\">Example</span>, <span style=\"color: #a0522d;\">DefArgs</span>, <span style=\"color: #228b22;\">lists</span>:<span style=\"color: #228b22;\">append</span>(<span style=\"color: #a0522d;\">Body</span>)}.

<span style=\"color: #0000ff;\">strip_nl</span>(<span style=\"color: #a0522d;\">String</span>) -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #228b22;\">string</span>:<span style=\"color: #228b22;\">strip</span>(<span style=\"color: #a0522d;\">String</span>, right, <span style=\"color: #008b8b;\">$\\n</span>).

<span style=\"color: #0000ff;\">read_until</span>(<span style=\"color: #a0522d;\">IoDevice</span>, <span style=\"color: #a0522d;\">StartsWith</span>) -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #228b22;\">read_until</span>(<span style=\"color: #a0522d;\">IoDevice</span>, <span style=\"color: #a0522d;\">StartsWith</span>, []).
<span style=\"color: #0000ff;\">read_until</span>(<span style=\"color: #a0522d;\">IoDevice</span>, <span style=\"color: #a0522d;\">StartsWith</span>, <span style=\"color: #a0522d;\">Acc</span>) -&gt;
    <span style=\"color: #a020f0;\">case</span> <span style=\"color: #228b22;\">file</span>:<span style=\"color: #228b22;\">read_line</span>(<span style=\"color: #a0522d;\">IoDevice</span>) <span style=\"color: #a020f0;\">of</span>
        {ok, <span style=\"color: #8b2252;\">\"\\n\"</span>} -&gt;
            <span style=\"color: #228b22;\">read_until</span>(<span style=\"color: #a0522d;\">IoDevice</span>, <span style=\"color: #a0522d;\">StartsWith</span>, <span style=\"color: #a0522d;\">Acc</span>);
        {ok, <span style=\"color: #a0522d;\">Line</span>} -&gt;<span style=\"color: #0000ff;\"> </span>
            <span style=\"color: #a020f0;\">case</span> <span style=\"color: #228b22;\">lists</span>:<span style=\"color: #228b22;\">prefix</span>(<span style=\"color: #a0522d;\">StartsWith</span>, <span style=\"color: #a0522d;\">Line</span>) <span style=\"color: #a020f0;\">of</span>
                true -&gt;<span style=\"color: #0000ff;\"> </span>
                    <span style=\"color: #228b22;\">lists</span>:<span style=\"color: #228b22;\">reverse</span>(<span style=\"color: #a0522d;\">Acc</span>);
                false -&gt;<span style=\"color: #0000ff;\"> </span>
                    <span style=\"color: #228b22;\">read_until</span>(<span style=\"color: #a0522d;\">IoDevice</span>, <span style=\"color: #a0522d;\">StartsWith</span>, 
                               [<span style=\"color: #228b22;\">process_line</span>(<span style=\"color: #a0522d;\">Line</span>) | <span style=\"color: #a0522d;\">Acc</span>])
            <span style=\"color: #a020f0;\">end</span>;
        {error, <span style=\"color: #a0522d;\">_</span>} -&gt;<span style=\"color: #0000ff;\"> </span>error;
        eof -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #228b22;\">lists</span>:<span style=\"color: #228b22;\">reverse</span>(<span style=\"color: #a0522d;\">Acc</span>)
    <span style=\"color: #a020f0;\">end</span>.

<span style=\"color: #0000ff;\">process_line</span>(<span style=\"color: #a0522d;\">Line</span>) -&gt;
    <span style=\"color: #a020f0;\">case</span> <span style=\"color: #228b22;\">lists</span>:<span style=\"color: #228b22;\">prefix</span>(<span style=\"color: #8b2252;\">\"% --\"</span>, <span style=\"color: #a0522d;\">Line</span>) <span style=\"color: #a020f0;\">of</span>
        true -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #228b22;\">split_directive_line</span>(<span style=\"color: #a0522d;\">Line</span>);
        false -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #a0522d;\">Line</span>
    <span style=\"color: #a020f0;\">end</span>.

<span style=\"color: #0000ff;\">split_directive_line</span>(<span style=\"color: #a0522d;\">Line</span>) -&gt;
    [<span style=\"color: #a0522d;\">X</span> <span style=\"color: #a020f0;\">||</span> <span style=\"color: #a0522d;\">X</span> <span style=\"color: #a020f0;\">&lt;-</span> <span style=\"color: #228b22;\">re</span>:<span style=\"color: #228b22;\">split</span>(<span style=\"color: #228b22;\">strip_nl</span>(<span style=\"color: #a0522d;\">Line</span>), <span style=\"color: #8b2252;\">\"( |--)\"</span>, [{return, list}]),
          <span style=\"color: #a0522d;\">X</span> /= <span style=\"color: #8b2252;\">\" \"</span>, <span style=\"color: #a0522d;\">X</span> /= [], <span style=\"color: #a0522d;\">X</span> /= <span style=\"color: #8b2252;\">\"--\"</span>, <span style=\"color: #a0522d;\">X</span> /=<span style=\"color: #8b2252;\">\"\\n\"</span>].</pre>

<p>This is a reasonably simple reader program. The goal of it is to break <a href=\"https://code.google.com/p/postscriptbarcode/downloads/detail?name=barcode-2012-04-26.ps\">that 17111 line .ps file</a> into individual components. First, a <code>preamble</code> (basic definitions that need to go into each file), then a set of <code>renderer</code>s<a href=\"#foot-Tue-May-15-220847EDT-2012\" name=\"note-Tue-May-15-220847EDT-2012\">[6]</a>, and a rather large number of <code>encoder</code>s<a href=\"#foot-Tue-May-15-220854EDT-2012\" name=\"note-Tue-May-15-220854EDT-2012\">[7]</a>. These components are stored in an <a href=\"http://www.erlang.org/doc/man/ets.html\">ETS</a> table held in memory. The initial Postscript file only needs to be parsed once; the resulting ETS table is then exported to a file on disk so that it can just be loaded in the future.</p>

<p>Do note the nested <code>case</code> statements there. <a href=\"/article?name=erlang-barcode-generation.html#foot-Tue-May-08-175733EDT-2012\">Last time, I complained about the guards</a>, and this is why. Really, I should have been able to write that as</p>

<pre>        ...
        {ok, <span style=\"color: #a0522d;\">Line</span>} where <span style=\"color: #228b22;\">lists</span>:<span style=\"color: #228b22;\">prefix</span>(<span style=\"color: #a0522d;\">StartsWith</span>, <span style=\"color: #a0522d;\">Line</span>) -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #228b22;\">lists</span>:<span style=\"color: #228b22;\">reverse</span>(<span style=\"color: #a0522d;\">Acc</span>);
        {ok, <span style=\"color: #a0522d;\">Line</span>} -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #228b22;\">read_until</span>(<span style=\"color: #a0522d;\">IoDevice</span>, <span style=\"color: #a0522d;\">StartsWith</span>, [<span style=\"color: #228b22;\">process_line</span>(<span style=\"color: #a0522d;\">Line</span>) | <span style=\"color: #a0522d;\">Acc</span>]);
        ...</pre>

<p>but even though <code>lists:prefix</code> is a perfectly functional predicate, it's not in <a href=\"http://www.erlang.org/doc/reference_manual/expressions.html#id79432\">that blessed subset of Erlang</a> that can be called from within a guard sequence. The consequence, in this case, is that I have to bust out a second <code>case</code> block, and waste six lines doing it. Moving onto sorting PS blocks...</p>

<pre><span style=\"color: #0000ff;\">parse_block</span>([[<span style=\"color: #8b2252;\">\"%\"</span>, <span style=\"color: #8b2252;\">\"BEGIN\"</span>, <span style=\"color: #8b2252;\">\"PREAMBLE\"</span>] | <span style=\"color: #a0522d;\">Body</span>]) -&gt;
    {preamble, <span style=\"color: #228b22;\">lists</span>:<span style=\"color: #228b22;\">append</span>(<span style=\"color: #a0522d;\">Body</span>)};
<span style=\"color: #0000ff;\">parse_block</span>([[<span style=\"color: #8b2252;\">\"%\"</span>, <span style=\"color: #8b2252;\">\"BEGIN\"</span>, <span style=\"color: #8b2252;\">\"RENDERER\"</span>, <span style=\"color: #a0522d;\">Name</span>] | <span style=\"color: #a0522d;\">Body</span>]) -&gt;
    {<span style=\"color: #7a378b;\">list_to_atom</span>(<span style=\"color: #a0522d;\">Name</span>), renderer, <span style=\"color: #228b22;\">lists</span>:<span style=\"color: #228b22;\">append</span>(<span style=\"color: #a0522d;\">Body</span>)};
<span style=\"color: #0000ff;\">parse_block</span>([[<span style=\"color: #8b2252;\">\"%\"</span>, <span style=\"color: #8b2252;\">\"BEGIN\"</span>, <span style=\"color: #8b2252;\">\"ENCODER\"</span>, <span style=\"color: #a0522d;\">Name</span>] | <span style=\"color: #a0522d;\">Body</span>]) -&gt;
    <span style=\"color: #228b22;\">parse_encoder_meta</span>(<span style=\"color: #a0522d;\">Name</span>, <span style=\"color: #a0522d;\">Body</span>);
<span style=\"color: #0000ff;\">parse_block</span>(<span style=\"color: #a0522d;\">_</span>) -&gt;<span style=\"color: #0000ff;\"> </span>{none}.</pre>

<p>The <code>preamble</code> and <code>renderer</code>s are really just named strings, but the <code>encoder</code>s have more metadata about them.</p>

<pre><span style=\"color: #0000ff;\">parse_encoder_meta</span> (<span style=\"color: #a0522d;\">Name</span>, <span style=\"color: #a0522d;\">Encoder</span>) -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #228b22;\">parse_encoder_meta</span>(<span style=\"color: #a0522d;\">Name</span>, <span style=\"color: #a0522d;\">Encoder</span>, [], {[], [], []}).
<span style=\"color: #0000ff;\">parse_encoder_meta</span> (<span style=\"color: #a0522d;\">Name</span>, [[<span style=\"color: #8b2252;\">\"%\"</span>, <span style=\"color: #8b2252;\">\"RNDR:\"</span> | <span style=\"color: #a0522d;\">Renderers</span>] | <span style=\"color: #a0522d;\">Rest</span>], <span style=\"color: #a0522d;\">Acc</span>, {<span style=\"color: #a0522d;\">_</span>, <span style=\"color: #a0522d;\">R</span>, <span style=\"color: #a0522d;\">S</span>}) -&gt;
    <span style=\"color: #228b22;\">parse_encoder_meta</span>(<span style=\"color: #a0522d;\">Name</span>, <span style=\"color: #a0522d;\">Rest</span>, <span style=\"color: #a0522d;\">Acc</span>, {<span style=\"color: #a0522d;\">Renderers</span>, <span style=\"color: #a0522d;\">R</span>, <span style=\"color: #a0522d;\">S</span>});
<span style=\"color: #0000ff;\">parse_encoder_meta</span> (<span style=\"color: #a0522d;\">Name</span>, [[<span style=\"color: #8b2252;\">\"%\"</span>, <span style=\"color: #8b2252;\">\"REQUIRES\"</span> | <span style=\"color: #a0522d;\">Reqs</span>] | <span style=\"color: #a0522d;\">Rest</span>], <span style=\"color: #a0522d;\">Acc</span>, {<span style=\"color: #a0522d;\">A</span>, <span style=\"color: #a0522d;\">_</span>, <span style=\"color: #a0522d;\">S</span>}) -&gt;
    <span style=\"color: #228b22;\">parse_encoder_meta</span>(<span style=\"color: #a0522d;\">Name</span>, <span style=\"color: #a0522d;\">Rest</span>, <span style=\"color: #a0522d;\">Acc</span>, {<span style=\"color: #a0522d;\">A</span>, <span style=\"color: #a0522d;\">Reqs</span>, <span style=\"color: #a0522d;\">S</span>});
<span style=\"color: #0000ff;\">parse_encoder_meta</span> (<span style=\"color: #a0522d;\">Name</span>, [[<span style=\"color: #8b2252;\">\"%\"</span>, <span style=\"color: #8b2252;\">\"SUGGESTS\"</span> | <span style=\"color: #a0522d;\">Suggs</span>] | <span style=\"color: #a0522d;\">Rest</span>], <span style=\"color: #a0522d;\">Acc</span>, {<span style=\"color: #a0522d;\">A</span>, <span style=\"color: #a0522d;\">R</span>, <span style=\"color: #a0522d;\">_</span>}) -&gt;
    <span style=\"color: #228b22;\">parse_encoder_meta</span>(<span style=\"color: #a0522d;\">Name</span>, <span style=\"color: #a0522d;\">Rest</span>, <span style=\"color: #a0522d;\">Acc</span>, {<span style=\"color: #a0522d;\">A</span>, <span style=\"color: #a0522d;\">R</span>, <span style=\"color: #a0522d;\">Suggs</span>});
<span style=\"color: #0000ff;\">parse_encoder_meta</span> (<span style=\"color: #a0522d;\">Name</span>, [[<span style=\"color: #8b2252;\">\"%\"</span>, <span style=\"color: #8b2252;\">\"EXOP:\"</span> | <span style=\"color: #a0522d;\">Exop</span>] | <span style=\"color: #a0522d;\">Rest</span>], <span style=\"color: #a0522d;\">Acc</span>, <span style=\"color: #a0522d;\">Cmp</span>) -&gt;
    <span style=\"color: #228b22;\">parse_encoder_meta</span>(<span style=\"color: #a0522d;\">Name</span>, <span style=\"color: #a0522d;\">Rest</span>, [{def_arg, <span style=\"color: #a0522d;\">Exop</span>} | <span style=\"color: #a0522d;\">Acc</span>], <span style=\"color: #a0522d;\">Cmp</span>);
<span style=\"color: #0000ff;\">parse_encoder_meta</span> (<span style=\"color: #a0522d;\">Name</span>, [[<span style=\"color: #8b2252;\">\"%\"</span>, <span style=\"color: #8b2252;\">\"EXAM:\"</span> | <span style=\"color: #a0522d;\">Exam</span>] | <span style=\"color: #a0522d;\">Rest</span>], <span style=\"color: #a0522d;\">Acc</span>, <span style=\"color: #a0522d;\">Cmp</span>) -&gt;
    <span style=\"color: #228b22;\">parse_encoder_meta</span>(<span style=\"color: #a0522d;\">Name</span>, <span style=\"color: #a0522d;\">Rest</span>, [{example, <span style=\"color: #228b22;\">string</span>:<span style=\"color: #228b22;\">join</span>(<span style=\"color: #a0522d;\">Exam</span>, <span style=\"color: #8b2252;\">\" \"</span>)} | <span style=\"color: #a0522d;\">Acc</span>], <span style=\"color: #a0522d;\">Cmp</span>);
<span style=\"color: #0000ff;\">parse_encoder_meta</span> (<span style=\"color: #a0522d;\">Name</span>, [[<span style=\"color: #8b2252;\">\"%\"</span> | <span style=\"color: #a0522d;\">_</span>] | <span style=\"color: #a0522d;\">Rest</span>], <span style=\"color: #a0522d;\">Acc</span>, <span style=\"color: #a0522d;\">Cmp</span>) -&gt;
    <span style=\"color: #228b22;\">parse_encoder_meta</span>(<span style=\"color: #a0522d;\">Name</span>, <span style=\"color: #a0522d;\">Rest</span>, <span style=\"color: #a0522d;\">Acc</span>, <span style=\"color: #a0522d;\">Cmp</span>);
<span style=\"color: #0000ff;\">parse_encoder_meta</span> (<span style=\"color: #a0522d;\">Name</span>, <span style=\"color: #a0522d;\">Body</span>, [<span style=\"color: #a0522d;\">DefArgs</span>, <span style=\"color: #a0522d;\">Example</span>], {<span style=\"color: #a0522d;\">A</span>, <span style=\"color: #a0522d;\">R</span>, <span style=\"color: #a0522d;\">S</span>}) -&gt;
    <span style=\"color: #a0522d;\">Reqs</span> = [<span style=\"color: #7a378b;\">list_to_atom</span>(<span style=\"color: #228b22;\">strip_nl</span>(<span style=\"color: #a0522d;\">X</span>)) <span style=\"color: #a020f0;\">||</span> <span style=\"color: #a0522d;\">X</span> <span style=\"color: #a020f0;\">&lt;-</span> <span style=\"color: #228b22;\">lists</span>:<span style=\"color: #228b22;\">append</span>([<span style=\"color: #a0522d;\">A</span>, <span style=\"color: #a0522d;\">R</span>, <span style=\"color: #a0522d;\">S</span>])],
    {<span style=\"color: #7a378b;\">list_to_atom</span>(<span style=\"color: #a0522d;\">Name</span>), encoder, {requires, <span style=\"color: #a0522d;\">Reqs</span>}, <span style=\"color: #a0522d;\">Example</span>, <span style=\"color: #a0522d;\">DefArgs</span>, <span style=\"color: #228b22;\">lists</span>:<span style=\"color: #228b22;\">append</span>(<span style=\"color: #a0522d;\">Body</span>)}.</pre>

<p>This is not the most elegant function. In fact, now that I look at it, it seems like I could fairly easily replace that <code>{<span style=\"color: #a0522d;\">A</span>, <span style=\"color: #a0522d;\">R</span>, <span style=\"color: #a0522d;\">S</span>}</code> tuple with a list accumulator. </p>

<span class=\"edit\">EDIT:
<p>Turns out there was a reason I did it this way; we need this data to be in the order of Renderers, Required, Suggested, but the order they're parsed in is actually Required, Suggested, Renderers (also, some components have no requirements, and some have no suggestions). The ordering is confusing enough that I just decided to keep it explicit.</p>

Wed, 16 May, 2012</span>

<p>What we're doing here is breaking apart an <code>encoder</code> block, and pulling out</p>

<ul>
  <li>the list of other blocks we need to output before this one<a href=\"#foot-Tue-May-15-221005EDT-2012\" name=\"note-Tue-May-15-221005EDT-2012\">[8]</a></li>
  <li>a piece of example data that this particular encoder can handle<a href=\"#foot-Tue-May-15-221009EDT-2012\" name=\"note-Tue-May-15-221009EDT-2012\">[9]</a></li>
  <li>the default arguments to passed to this <code>encoder</code></li>
  <li>the body code of this <code>encoder</code></li>
</ul>

<p>The list of required blocks is exhaustive for each <code>encoder</code>, so we don't need to recursively check requirements later, it's enough to store and act on all requirements of a given barcode.</p>

<pre><span style=\"color: #7a378b;\">-export</span>([<span style=\"color: #228b22;\">read_default_file/0</span>, <span style=\"color: #228b22;\">read_file/1</span>]).
<span style=\"color: #7a378b;\">-export</span>([<span style=\"color: #228b22;\">export_ets_file/1</span>, <span style=\"color: #228b22;\">import_ets_file/0</span>]).</pre>

<p>Those exported functions are really all that a user of this module should ever need to call; you're either processing a new revision of the <code>ps</code> file, or you're importing the already exported ETS table derived from the <code>ps</code> file, or you're exporting a new ETS table for later loading. Now that we've seen how we store the relevant data, lets take a look at</p>

<pre><span style=\"color: #7a378b;\">-module</span>(wand).

<span style=\"color: #7a378b;\">-behaviour</span>(gen_server).

<span style=\"color: #7a378b;\">-export</span>([<span style=\"color: #228b22;\">start/0</span>, <span style=\"color: #228b22;\">stop/0</span>]).
<span style=\"color: #7a378b;\">-export</span>([<span style=\"color: #228b22;\">init/1</span>, <span style=\"color: #228b22;\">handle_call/3</span>, <span style=\"color: #228b22;\">handle_cast/2</span>, <span style=\"color: #228b22;\">handle_info/2</span>,
         <span style=\"color: #228b22;\">terminate/2</span>, <span style=\"color: #228b22;\">code_change/3</span>]).

<span style=\"color: #7a378b;\">-export</span>([<span style=\"color: #228b22;\">process/1</span>]).

<span style=\"color: #0000ff;\">process</span>(<span style=\"color: #a0522d;\">Filename</span>) -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #228b22;\">gen_server</span>:<span style=\"color: #228b22;\">call</span>(?<span style=\"color: #008b8b;\">MODULE</span>, {process_barcode, <span style=\"color: #a0522d;\">Filename</span>}).

<span style=\"color: #0000ff;\">handle_call</span>({process_barcode, <span style=\"color: #a0522d;\">Filename</span>}, <span style=\"color: #a0522d;\">_From</span>, <span style=\"color: #a0522d;\">State</span>) -&gt;
    <span style=\"color: #a0522d;\">State</span> ! {<span style=\"color: #7a378b;\">self</span>(), {command, <span style=\"color: #a0522d;\">Filename</span>}},
    <span style=\"color: #a020f0;\">receive</span>
        {<span style=\"color: #a0522d;\">State</span>, {data, <span style=\"color: #a0522d;\">Data</span>}} -&gt;
            {reply, <span style=\"color: #228b22;\">decode</span>(<span style=\"color: #a0522d;\">Data</span>), <span style=\"color: #a0522d;\">State</span>}
    <span style=\"color: #a020f0;\">end</span>;
<span style=\"color: #0000ff;\">handle_call</span>({<span style=\"color: #8b2252;\">'EXIT'</span>, <span style=\"color: #a0522d;\">_Port</span>, <span style=\"color: #a0522d;\">Reason</span>}, <span style=\"color: #a0522d;\">_From</span>, <span style=\"color: #a0522d;\">_State</span>) -&gt;
    <span style=\"color: #7a378b;\">exit</span>({port_terminated, <span style=\"color: #a0522d;\">Reason</span>}).

<span style=\"color: #0000ff;\">decode</span>([0]) -&gt;<span style=\"color: #0000ff;\"> </span>{ok, 0};
<span style=\"color: #0000ff;\">decode</span>([1]) -&gt;<span style=\"color: #0000ff;\"> </span>{error, could_not_read};
<span style=\"color: #0000ff;\">decode</span>([2]) -&gt;<span style=\"color: #0000ff;\"> </span>{error, could_not_write}.

<span style=\"color: #b22222;\">%%%%%%%%%%%%%%%%%%%% </span><span style=\"color: #b22222;\">generic actions
</span><span style=\"color: #0000ff;\">start</span>() -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #228b22;\">gen_server</span>:<span style=\"color: #228b22;\">start_link</span>({local, ?<span style=\"color: #008b8b;\">MODULE</span>}, ?<span style=\"color: #008b8b;\">MODULE</span>, [], []).
<span style=\"color: #0000ff;\">stop</span>() -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #228b22;\">gen_server</span>:<span style=\"color: #228b22;\">call</span>(?<span style=\"color: #008b8b;\">MODULE</span>, stop).

<span style=\"color: #b22222;\">%%%%%%%%%%%%%%%%%%%% </span><span style=\"color: #b22222;\">gen_server handlers
</span><span style=\"color: #0000ff;\">init</span>([]) -&gt;<span style=\"color: #0000ff;\"> </span>{ok, <span style=\"color: #7a378b;\">open_port</span>({spawn, <span style=\"color: #228b22;\">filename</span>:<span style=\"color: #228b22;\">absname</span>(<span style=\"color: #8b2252;\">\"wand\"</span>)}, [{packet, 2}])}.
<span style=\"color: #0000ff;\">handle_cast</span>(<span style=\"color: #a0522d;\">_Msg</span>, <span style=\"color: #a0522d;\">State</span>) -&gt;<span style=\"color: #0000ff;\"> </span>{noreply, <span style=\"color: #a0522d;\">State</span>}.
<span style=\"color: #0000ff;\">handle_info</span>(<span style=\"color: #a0522d;\">_Info</span>, <span style=\"color: #a0522d;\">State</span>) -&gt;<span style=\"color: #0000ff;\"> </span>{noreply, <span style=\"color: #a0522d;\">State</span>}.
<span style=\"color: #0000ff;\">terminate</span>(<span style=\"color: #a0522d;\">_Reason</span>, <span style=\"color: #a0522d;\">State</span>) -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #a0522d;\">State</span> ! {<span style=\"color: #7a378b;\">self</span>(), close}, ok.
<span style=\"color: #0000ff;\">code_change</span>(<span style=\"color: #a0522d;\">_OldVsn</span>, <span style=\"color: #a0522d;\">State</span>, <span style=\"color: #a0522d;\">_Extra</span>) -&gt;<span style=\"color: #0000ff;\"> </span>{ok, <span style=\"color: #a0522d;\">State</span>}.</pre>

<p>This is actually pretty much the same C Port file I <a href=\"/article?name=erlang-notes.html\">used last time</a>, except that this one has been re-written to use <a href=\"http://www.erlang.org/doc/man/gen_server.html\"><code>gen_server</code></a>, rather than being plain Erlang code. I still refuse to use that godawful file template they ship with their Emacs mode though<a href=\"#foot-Tue-May-15-221156EDT-2012\" name=\"note-Tue-May-15-221156EDT-2012\">[10]</a>. All it does is call out to a C program named <code>wand</code> to do the actual image processing involved in generating these barcodes. All you need to know is that we send it a barcodes' file name, and it quickly generates a high-res PNG version in the same folder.</p>

<p>Right, that's it for the periphery, lets finally dive into</p>

<pre><span style=\"color: #7a378b;\">-module</span>(ps_bc).

<span style=\"color: #7a378b;\">-behaviour</span>(gen_server).

<span style=\"color: #7a378b;\">-export</span>([<span style=\"color: #228b22;\">start/0</span>, <span style=\"color: #228b22;\">stop/0</span>]).
<span style=\"color: #7a378b;\">-export</span>([<span style=\"color: #228b22;\">init/1</span>, <span style=\"color: #228b22;\">handle_call/3</span>, <span style=\"color: #228b22;\">handle_cast/2</span>, <span style=\"color: #228b22;\">handle_info/2</span>, <span style=\"color: #228b22;\">terminate/2</span>, <span style=\"color: #228b22;\">code_change/3</span>]).

<span style=\"color: #7a378b;\">-export</span>([<span style=\"color: #228b22;\">help/0</span>, <span style=\"color: #228b22;\">help/1</span>, <span style=\"color: #228b22;\">write/3</span>, <span style=\"color: #228b22;\">write/5</span>, <span style=\"color: #228b22;\">generate/2</span>, <span style=\"color: #228b22;\">generate/3</span>, <span style=\"color: #228b22;\">change/1</span>, <span style=\"color: #228b22;\">make_tempname/0</span>]).

<span style=\"color: #0000ff;\">help</span>() -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #228b22;\">gen_server</span>:<span style=\"color: #228b22;\">call</span>(?<span style=\"color: #008b8b;\">MODULE</span>, help).
<span style=\"color: #0000ff;\">help</span>(<span style=\"color: #a0522d;\">BarcodeType</span>) -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #228b22;\">gen_server</span>:<span style=\"color: #228b22;\">call</span>(?<span style=\"color: #008b8b;\">MODULE</span>, {help, <span style=\"color: #a0522d;\">BarcodeType</span>}).
<span style=\"color: #0000ff;\">write</span>(<span style=\"color: #a0522d;\">DestFolder</span>, <span style=\"color: #a0522d;\">BarcodeType</span>, <span style=\"color: #a0522d;\">Data</span>) -&gt;<span style=\"color: #0000ff;\"> </span>
    <span style=\"color: #228b22;\">write</span>(<span style=\"color: #a0522d;\">DestFolder</span>, <span style=\"color: #a0522d;\">BarcodeType</span>, <span style=\"color: #a0522d;\">Data</span>, 200, 200).
<span style=\"color: #0000ff;\">write</span>(<span style=\"color: #a0522d;\">DestFolder</span>, <span style=\"color: #a0522d;\">BarcodeType</span>, <span style=\"color: #a0522d;\">Data</span>, <span style=\"color: #a0522d;\">Width</span>, <span style=\"color: #a0522d;\">Height</span>) -&gt;
    <span style=\"color: #228b22;\">gen_server</span>:<span style=\"color: #228b22;\">call</span>(?<span style=\"color: #008b8b;\">MODULE</span>, {write, <span style=\"color: #a0522d;\">DestFolder</span>, <span style=\"color: #a0522d;\">BarcodeType</span>, <span style=\"color: #a0522d;\">Data</span>, <span style=\"color: #a0522d;\">Width</span>, <span style=\"color: #a0522d;\">Height</span>}).
<span style=\"color: #0000ff;\">generate</span>(<span style=\"color: #a0522d;\">BarcodeType</span>, <span style=\"color: #a0522d;\">Data</span>) -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #228b22;\">generate</span>(<span style=\"color: #8b2252;\">\"/tmp/\"</span>, <span style=\"color: #a0522d;\">BarcodeType</span>, <span style=\"color: #a0522d;\">Data</span>).
<span style=\"color: #0000ff;\">generate</span>(<span style=\"color: #a0522d;\">DestFolder</span>, <span style=\"color: #a0522d;\">BarcodeType</span>, <span style=\"color: #a0522d;\">Data</span>) -&gt;<span style=\"color: #0000ff;\"> </span>
    <span style=\"color: #a0522d;\">NameOfTempFile</span> = <span style=\"color: #228b22;\">write</span>(<span style=\"color: #a0522d;\">DestFolder</span>, <span style=\"color: #a0522d;\">BarcodeType</span>, <span style=\"color: #a0522d;\">Data</span>),
    <span style=\"color: #228b22;\">wand</span>:<span style=\"color: #228b22;\">process</span>(<span style=\"color: #a0522d;\">NameOfTempFile</span>),
    <span style=\"color: #a0522d;\">NameOfTempFile</span>.
<span style=\"color: #0000ff;\">change</span>(<span style=\"color: #a0522d;\">TableId</span>) -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #228b22;\">gen_server</span>:<span style=\"color: #228b22;\">call</span>(?<span style=\"color: #008b8b;\">MODULE</span>, {change, <span style=\"color: #a0522d;\">TableId</span>}).

<span style=\"color: #0000ff;\">handle_call</span>(help, <span style=\"color: #a0522d;\">_From</span>, <span style=\"color: #a0522d;\">State</span>) -&gt;
    {reply, <span style=\"color: #228b22;\">ets</span>:<span style=\"color: #228b22;\">match</span>(<span style=\"color: #a0522d;\">State</span>, {<span style=\"color: #8b2252;\">'$1'</span>, encoder, <span style=\"color: #8b2252;\">'_'</span>, <span style=\"color: #8b2252;\">'_'</span>, <span style=\"color: #8b2252;\">'_'</span>, <span style=\"color: #8b2252;\">'_'</span>}), <span style=\"color: #a0522d;\">State</span>};
<span style=\"color: #0000ff;\">handle_call</span>({help, <span style=\"color: #a0522d;\">BarcodeType</span>}, <span style=\"color: #a0522d;\">_From</span>, <span style=\"color: #a0522d;\">State</span>) -&gt;
    {reply, <span style=\"color: #228b22;\">ets</span>:<span style=\"color: #228b22;\">match</span>(<span style=\"color: #a0522d;\">State</span>, {<span style=\"color: #a0522d;\">BarcodeType</span>, encoder, <span style=\"color: #8b2252;\">'_'</span>, <span style=\"color: #8b2252;\">'$1'</span>, <span style=\"color: #8b2252;\">'_'</span>, <span style=\"color: #8b2252;\">'_'</span>}), <span style=\"color: #a0522d;\">State</span>};
<span style=\"color: #0000ff;\">handle_call</span>({write, <span style=\"color: #a0522d;\">DestFolder</span>, <span style=\"color: #a0522d;\">BarcodeType</span>, <span style=\"color: #a0522d;\">Data</span>, <span style=\"color: #a0522d;\">Width</span>, <span style=\"color: #a0522d;\">Height</span>}, <span style=\"color: #a0522d;\">_From</span>, <span style=\"color: #a0522d;\">State</span>) -&gt;
    <span style=\"color: #a0522d;\">Fname</span> = <span style=\"color: #228b22;\">make_tempname</span>(<span style=\"color: #a0522d;\">DestFolder</span>),
    {ok, <span style=\"color: #a0522d;\">File</span>} = <span style=\"color: #228b22;\">file</span>:<span style=\"color: #228b22;\">open</span>(<span style=\"color: #a0522d;\">Fname</span>, [write, exclusive]),
    [[{requires, <span style=\"color: #a0522d;\">CompList</span>}, {def_arg, <span style=\"color: #a0522d;\">ExArgs</span>}]] = <span style=\"color: #228b22;\">ets</span>:<span style=\"color: #228b22;\">match</span>(<span style=\"color: #a0522d;\">State</span>, {<span style=\"color: #a0522d;\">BarcodeType</span>, encoder, <span style=\"color: #8b2252;\">'$1'</span>, <span style=\"color: #8b2252;\">'_'</span>, <span style=\"color: #8b2252;\">'$2'</span>, <span style=\"color: #8b2252;\">'_'</span>}),
    <span style=\"color: #228b22;\">file</span>:<span style=\"color: #228b22;\">write</span>(<span style=\"color: #a0522d;\">File</span>, <span style=\"color: #228b22;\">io_lib</span>:<span style=\"color: #228b22;\">format</span>(<span style=\"color: #8b2252;\">\"%!PS-Adobe-2.0\\n%%BoundingBox: 0 0 ~w ~w\\n%%LanguageLevel: 2\\n\"</span>, [<span style=\"color: #a0522d;\">Width</span>, <span style=\"color: #a0522d;\">Height</span>])),
    <span style=\"color: #228b22;\">write_component</span>(preamble, <span style=\"color: #a0522d;\">State</span>, <span style=\"color: #a0522d;\">File</span>),
    <span style=\"color: #228b22;\">file</span>:<span style=\"color: #228b22;\">write</span>(<span style=\"color: #a0522d;\">File</span>, <span style=\"color: #8b2252;\">\"\\n/Helvetica findfont 10 scalefont setfont\\n\"</span>),
    <span style=\"color: #228b22;\">lists</span>:<span style=\"color: #228b22;\">map</span>(<span style=\"color: #a020f0;\">fun</span> (<span style=\"color: #a0522d;\">C</span>) -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #228b22;\">write_component</span>(<span style=\"color: #a0522d;\">C</span>, <span style=\"color: #a0522d;\">State</span>, <span style=\"color: #a0522d;\">File</span>) <span style=\"color: #a020f0;\">end</span>, <span style=\"color: #a0522d;\">CompList</span>),
    <span style=\"color: #228b22;\">write_component</span>(<span style=\"color: #a0522d;\">BarcodeType</span>, <span style=\"color: #a0522d;\">State</span>, <span style=\"color: #a0522d;\">File</span>),
    <span style=\"color: #228b22;\">write_barcode</span>(<span style=\"color: #a0522d;\">File</span>, <span style=\"color: #a0522d;\">BarcodeType</span>, <span style=\"color: #a0522d;\">ExArgs</span>, <span style=\"color: #a0522d;\">Data</span>),
    <span style=\"color: #228b22;\">file</span>:<span style=\"color: #228b22;\">close</span>(<span style=\"color: #a0522d;\">File</span>),
    {reply, <span style=\"color: #a0522d;\">Fname</span>, <span style=\"color: #a0522d;\">State</span>};
<span style=\"color: #0000ff;\">handle_call</span>({change_table, <span style=\"color: #a0522d;\">Tab</span>}, <span style=\"color: #a0522d;\">_From</span>, <span style=\"color: #a0522d;\">_State</span>) -&gt;
    {reply, {watching_table, <span style=\"color: #a0522d;\">Tab</span>}, <span style=\"color: #a0522d;\">Tab</span>}.

<span style=\"color: #0000ff;\">make_tempname</span>() -&gt;
    {<span style=\"color: #a0522d;\">A</span>, <span style=\"color: #a0522d;\">B</span>, <span style=\"color: #a0522d;\">C</span>} = <span style=\"color: #7a378b;\">now</span>(),
    [<span style=\"color: #a0522d;\">D</span>, <span style=\"color: #a0522d;\">E</span>, <span style=\"color: #a0522d;\">F</span>] = <span style=\"color: #228b22;\">lists</span>:<span style=\"color: #228b22;\">map</span>(<span style=\"color: #a020f0;\">fun</span> <span style=\"color: #228b22;\">integer_to_list/1</span>, [<span style=\"color: #a0522d;\">A</span>, <span style=\"color: #a0522d;\">B</span>, <span style=\"color: #a0522d;\">C</span>]),
    <span style=\"color: #228b22;\">lists</span>:<span style=\"color: #228b22;\">append</span>([<span style=\"color: #8b2252;\">\"tmp.\"</span>, <span style=\"color: #a0522d;\">D</span>, <span style=\"color: #8b2252;\">\".\"</span>, <span style=\"color: #a0522d;\">E</span>, <span style=\"color: #8b2252;\">\".\"</span>, <span style=\"color: #a0522d;\">F</span>]).
<span style=\"color: #0000ff;\">make_tempname</span>(<span style=\"color: #a0522d;\">TargetDir</span>) -&gt;
    <span style=\"color: #228b22;\">filename</span>:<span style=\"color: #228b22;\">absname_join</span>(<span style=\"color: #a0522d;\">TargetDir</span>, <span style=\"color: #228b22;\">make_tempname</span>()).

<span style=\"color: #0000ff;\">write_component</span>(preamble, <span style=\"color: #a0522d;\">Table</span>, <span style=\"color: #a0522d;\">File</span>) -&gt;
    [[<span style=\"color: #a0522d;\">Pre</span>]] = <span style=\"color: #228b22;\">ets</span>:<span style=\"color: #228b22;\">match</span>(<span style=\"color: #a0522d;\">Table</span>, {preamble, <span style=\"color: #8b2252;\">'$1'</span>}),
    <span style=\"color: #228b22;\">file</span>:<span style=\"color: #228b22;\">write</span>(<span style=\"color: #a0522d;\">File</span>, <span style=\"color: #a0522d;\">Pre</span>);
<span style=\"color: #0000ff;\">write_component</span>(<span style=\"color: #a0522d;\">Name</span>, <span style=\"color: #a0522d;\">Table</span>, <span style=\"color: #a0522d;\">File</span>) -&gt;<span style=\"color: #0000ff;\"> </span>
    <span style=\"color: #228b22;\">file</span>:<span style=\"color: #228b22;\">write</span>(<span style=\"color: #a0522d;\">File</span>, <span style=\"color: #228b22;\">lookup_component</span>(<span style=\"color: #a0522d;\">Name</span>, <span style=\"color: #a0522d;\">Table</span>)).

<span style=\"color: #0000ff;\">write_barcode</span>(<span style=\"color: #a0522d;\">File</span>, datamatrix, <span style=\"color: #a0522d;\">_</span>, <span style=\"color: #a0522d;\">Data</span>)        -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #228b22;\">format_barcode_string</span>(<span style=\"color: #a0522d;\">File</span>, datamatrix, <span style=\"color: #8b2252;\">\"\"</span>, <span style=\"color: #a0522d;\">Data</span>);
<span style=\"color: #0000ff;\">write_barcode</span>(<span style=\"color: #a0522d;\">File</span>, <span style=\"color: #a0522d;\">BarcodeType</span>, <span style=\"color: #a0522d;\">ExArgs</span>, <span style=\"color: #a0522d;\">Data</span>)  -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #228b22;\">format_barcode_string</span>(<span style=\"color: #a0522d;\">File</span>, <span style=\"color: #a0522d;\">BarcodeType</span>, <span style=\"color: #228b22;\">string</span>:<span style=\"color: #228b22;\">join</span>(<span style=\"color: #a0522d;\">ExArgs</span>, <span style=\"color: #8b2252;\">\" \"</span>), <span style=\"color: #a0522d;\">Data</span>).

<span style=\"color: #0000ff;\">format_barcode_string</span>(<span style=\"color: #a0522d;\">File</span>, <span style=\"color: #a0522d;\">BarcodeType</span>, <span style=\"color: #a0522d;\">ExArgString</span>, <span style=\"color: #a0522d;\">DataString</span>) -&gt;
    <span style=\"color: #228b22;\">io</span>:<span style=\"color: #228b22;\">format</span>(<span style=\"color: #a0522d;\">File</span>, <span style=\"color: #8b2252;\">\"10 10 moveto (~s) (~s) /~s /uk.co.terryburton.bwipp findresource exec showpage\"</span>,
              [<span style=\"color: #a0522d;\">DataString</span>, <span style=\"color: #a0522d;\">ExArgString</span>, <span style=\"color: #a0522d;\">BarcodeType</span>]).
                     
<span style=\"color: #0000ff;\">lookup_component</span>(<span style=\"color: #a0522d;\">Name</span>, <span style=\"color: #a0522d;\">Table</span>) -&gt;<span style=\"color: #0000ff;\"> </span>
    <span style=\"color: #a0522d;\">Ren</span> = <span style=\"color: #228b22;\">ets</span>:<span style=\"color: #228b22;\">match</span>(<span style=\"color: #a0522d;\">Table</span>, {<span style=\"color: #a0522d;\">Name</span>, renderer, <span style=\"color: #8b2252;\">'$1'</span>}),
    <span style=\"color: #a0522d;\">Enc</span> = <span style=\"color: #228b22;\">ets</span>:<span style=\"color: #228b22;\">match</span>(<span style=\"color: #a0522d;\">Table</span>, {<span style=\"color: #a0522d;\">Name</span>, encoder, <span style=\"color: #8b2252;\">'_'</span>, <span style=\"color: #8b2252;\">'_'</span>, <span style=\"color: #8b2252;\">'_'</span>, <span style=\"color: #8b2252;\">'$1'</span>}),
    <span style=\"color: #a020f0;\">case</span> {<span style=\"color: #a0522d;\">Ren</span>, <span style=\"color: #a0522d;\">Enc</span>} <span style=\"color: #a020f0;\">of</span>
        {[], [[<span style=\"color: #a0522d;\">Res</span>]]} -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #a0522d;\">Res</span>;
        {[[<span style=\"color: #a0522d;\">Res</span>]], []} -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #a0522d;\">Res</span>
    <span style=\"color: #a020f0;\">end</span>.

<span style=\"color: #b22222;\">%%%%%%%%%%%%%%%%%%%% </span><span style=\"color: #b22222;\">generic actions
</span><span style=\"color: #0000ff;\">start</span>() -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #228b22;\">gen_server</span>:<span style=\"color: #228b22;\">start_link</span>({local, ?<span style=\"color: #008b8b;\">MODULE</span>}, ?<span style=\"color: #008b8b;\">MODULE</span>, [], []). <span style=\"color: #b22222;\">%% </span><span style=\"color: #b22222;\">{local/global, Name}, Mod, InitArgs, Opts
</span><span style=\"color: #0000ff;\">stop</span>() -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #228b22;\">gen_server</span>:<span style=\"color: #228b22;\">call</span>(?<span style=\"color: #008b8b;\">MODULE</span>, stop).

<span style=\"color: #b22222;\">%%%%%%%%%%%%%%%%%%%% </span><span style=\"color: #b22222;\">gen_server handlers
</span><span style=\"color: #0000ff;\">init</span>([]) -&gt;<span style=\"color: #0000ff;\"> </span>{ok, <span style=\"color: #228b22;\">barcode_data</span>:<span style=\"color: #228b22;\">import_ets_file</span>()}.
<span style=\"color: #0000ff;\">handle_cast</span>(<span style=\"color: #a0522d;\">_Msg</span>, <span style=\"color: #a0522d;\">State</span>) -&gt;<span style=\"color: #0000ff;\"> </span>{noreply, <span style=\"color: #a0522d;\">State</span>}.
<span style=\"color: #0000ff;\">handle_info</span>(<span style=\"color: #a0522d;\">_Info</span>, <span style=\"color: #a0522d;\">State</span>) -&gt;<span style=\"color: #0000ff;\"> </span>{noreply, <span style=\"color: #a0522d;\">State</span>}.
<span style=\"color: #0000ff;\">terminate</span>(<span style=\"color: #a0522d;\">_Reason</span>, <span style=\"color: #a0522d;\">_State</span>) -&gt;<span style=\"color: #0000ff;\"> </span>ok.
<span style=\"color: #0000ff;\">code_change</span>(<span style=\"color: #a0522d;\">_OldVsn</span>, <span style=\"color: #a0522d;\">State</span>, <span style=\"color: #a0522d;\">_Extra</span>) -&gt;<span style=\"color: #0000ff;\"> </span>{ok, <span style=\"color: #a0522d;\">State</span>}.</pre>

<p>This is where the meat of the application resides, so I'll take my time with it.</p>

<p>First off, note that the <code>init</code> function loads that ETS file we generated in <code>barcode_data</code>.</p>

<pre><span style=\"color: #0000ff;\">init</span>([]) -&gt;<span style=\"color: #0000ff;\"> </span>{ok, <span style=\"color: #228b22;\">barcode_data</span>:<span style=\"color: #228b22;\">import_ets_file</span>()}.</pre>

<p>That's where our data is stored, and we'll be looking up components by referring to it.</p>

<pre><span style=\"color: #0000ff;\">lookup_component</span>(<span style=\"color: #a0522d;\">Name</span>, <span style=\"color: #a0522d;\">Table</span>) -&gt;<span style=\"color: #0000ff;\"> </span>
    <span style=\"color: #a0522d;\">Ren</span> = <span style=\"color: #228b22;\">ets</span>:<span style=\"color: #228b22;\">match</span>(<span style=\"color: #a0522d;\">Table</span>, {<span style=\"color: #a0522d;\">Name</span>, renderer, <span style=\"color: #8b2252;\">'$1'</span>}),
    <span style=\"color: #a0522d;\">Enc</span> = <span style=\"color: #228b22;\">ets</span>:<span style=\"color: #228b22;\">match</span>(<span style=\"color: #a0522d;\">Table</span>, {<span style=\"color: #a0522d;\">Name</span>, encoder, <span style=\"color: #8b2252;\">'_'</span>, <span style=\"color: #8b2252;\">'_'</span>, <span style=\"color: #8b2252;\">'_'</span>, <span style=\"color: #8b2252;\">'$1'</span>}),
    <span style=\"color: #a020f0;\">case</span> {<span style=\"color: #a0522d;\">Ren</span>, <span style=\"color: #a0522d;\">Enc</span>} <span style=\"color: #a020f0;\">of</span>
        {[], [[<span style=\"color: #a0522d;\">Res</span>]]} -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #a0522d;\">Res</span>;
        {[[<span style=\"color: #a0522d;\">Res</span>]], []} -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #a0522d;\">Res</span>
    <span style=\"color: #a020f0;\">end</span>.</pre>

<p>This is (again) not the most elegant code. Really, what I'd want to do is look up <code>Ren</code> first, check if it returned something, <i>then</i> check whether an <code>Enc</code> exists. That would save me a look-up every once in a while<a href=\"#foot-Tue-May-15-221255EDT-2012\" name=\"note-Tue-May-15-221255EDT-2012\">[11]</a>. Do take note that there's no clause to handle the event that a faulty index was passed; in that case, the process will fail with an unmatched pattern and promptly be restarted. This function is in turn used by <code>write_component</code> to actually output the given block to a file</p>

<pre><span style=\"color: #0000ff;\">write_component</span>(preamble, <span style=\"color: #a0522d;\">Table</span>, <span style=\"color: #a0522d;\">File</span>) -&gt;
    [[<span style=\"color: #a0522d;\">Pre</span>]] = <span style=\"color: #228b22;\">ets</span>:<span style=\"color: #228b22;\">match</span>(<span style=\"color: #a0522d;\">Table</span>, {preamble, <span style=\"color: #8b2252;\">'$1'</span>}),
    <span style=\"color: #228b22;\">file</span>:<span style=\"color: #228b22;\">write</span>(<span style=\"color: #a0522d;\">File</span>, <span style=\"color: #a0522d;\">Pre</span>);
<span style=\"color: #0000ff;\">write_component</span>(<span style=\"color: #a0522d;\">Name</span>, <span style=\"color: #a0522d;\">Table</span>, <span style=\"color: #a0522d;\">File</span>) -&gt;<span style=\"color: #0000ff;\"> </span>
    <span style=\"color: #228b22;\">file</span>:<span style=\"color: #228b22;\">write</span>(<span style=\"color: #a0522d;\">File</span>, <span style=\"color: #228b22;\">lookup_component</span>(<span style=\"color: #a0522d;\">Name</span>, <span style=\"color: #a0522d;\">Table</span>)).</pre>

<p>Before we tear into <code>handle</code>, just one more note about the remaining interesting helper function</p>

<pre><span style=\"color: #0000ff;\">make_tempname</span>() -&gt;
    {<span style=\"color: #a0522d;\">A</span>, <span style=\"color: #a0522d;\">B</span>, <span style=\"color: #a0522d;\">C</span>} = <span style=\"color: #7a378b;\">now</span>(),
    [<span style=\"color: #a0522d;\">D</span>, <span style=\"color: #a0522d;\">E</span>, <span style=\"color: #a0522d;\">F</span>] = <span style=\"color: #228b22;\">lists</span>:<span style=\"color: #228b22;\">map</span>(<span style=\"color: #a020f0;\">fun</span> <span style=\"color: #228b22;\">integer_to_list/1</span>, [<span style=\"color: #a0522d;\">A</span>, <span style=\"color: #a0522d;\">B</span>, <span style=\"color: #a0522d;\">C</span>]),
    <span style=\"color: #228b22;\">lists</span>:<span style=\"color: #228b22;\">append</span>([<span style=\"color: #8b2252;\">\"tmp.\"</span>, <span style=\"color: #a0522d;\">D</span>, <span style=\"color: #8b2252;\">\".\"</span>, <span style=\"color: #a0522d;\">E</span>, <span style=\"color: #8b2252;\">\".\"</span>, <span style=\"color: #a0522d;\">F</span>]).
<span style=\"color: #0000ff;\">make_tempname</span>(<span style=\"color: #a0522d;\">TargetDir</span>) -&gt;
    <span style=\"color: #228b22;\">filename</span>:<span style=\"color: #228b22;\">absname_join</span>(<span style=\"color: #a0522d;\">TargetDir</span>, <span style=\"color: #228b22;\">make_tempname</span>()).</pre>

<p>Actually, two functions (<code><span style=\"color: #228b22;\">make_tempname/0</span></code> and <code><span style=\"color: #228b22;\">make_tempname/1</span></code>). I thought about just using <code><span style=\"color: #228b22;\">os</span>:<span style=\"color: #228b22;\">cmd</span>(<span style=\"color: #8b2252;\">\"mktemp\"</span>)</code> instead, but decided against it. <code>make_tempname</code> uses <code>now()</code> to generate a unique temporary filename. It optionally takes a directory specification, in which case it creates an absolute filename in that directory.</p>

<p>By the way, that's how you handle optional arguments in Erlang. You create multiple functions with the same name, but with different arity and just write the matching expression for each. It's surprisingly elegant, and the only thing differentiating these from a single function declaration is that they're separated by <code>.</code> rather than by <code>;</code>. Obviously, if you plan on extending such a function to the users of your module, you need to export all the arities you've defined. I wasn't being <i>needlessly</i> pedantic earlier, Erlang treats <code><span style=\"color: #228b22;\">make_tempname/0</span></code> and <code><span style=\"color: #228b22;\">make_tempname/1</span></code> as completely separate functions.</p>

<p>Right, now then.</p>

<pre><span style=\"color: #0000ff;\">handle_call</span>(help, <span style=\"color: #a0522d;\">_From</span>, <span style=\"color: #a0522d;\">State</span>) -&gt;
    {reply, <span style=\"color: #228b22;\">ets</span>:<span style=\"color: #228b22;\">match</span>(<span style=\"color: #a0522d;\">State</span>, {<span style=\"color: #8b2252;\">'$1'</span>, encoder, <span style=\"color: #8b2252;\">'_'</span>, <span style=\"color: #8b2252;\">'_'</span>, <span style=\"color: #8b2252;\">'_'</span>, <span style=\"color: #8b2252;\">'_'</span>}), <span style=\"color: #a0522d;\">State</span>};
<span style=\"color: #0000ff;\">handle_call</span>({help, <span style=\"color: #a0522d;\">BarcodeType</span>}, <span style=\"color: #a0522d;\">_From</span>, <span style=\"color: #a0522d;\">State</span>) -&gt;
    {reply, <span style=\"color: #228b22;\">ets</span>:<span style=\"color: #228b22;\">match</span>(<span style=\"color: #a0522d;\">State</span>, {<span style=\"color: #a0522d;\">BarcodeType</span>, encoder, <span style=\"color: #8b2252;\">'_'</span>, <span style=\"color: #8b2252;\">'$1'</span>, <span style=\"color: #8b2252;\">'_'</span>, <span style=\"color: #8b2252;\">'_'</span>}), <span style=\"color: #a0522d;\">State</span>};
<span style=\"color: #0000ff;\">handle_call</span>({write, <span style=\"color: #a0522d;\">DestFolder</span>, <span style=\"color: #a0522d;\">BarcodeType</span>, <span style=\"color: #a0522d;\">Data</span>, <span style=\"color: #a0522d;\">Width</span>, <span style=\"color: #a0522d;\">Height</span>}, <span style=\"color: #a0522d;\">_From</span>, <span style=\"color: #a0522d;\">State</span>) -&gt;
    <span style=\"color: #a0522d;\">Fname</span> = <span style=\"color: #228b22;\">make_tempname</span>(<span style=\"color: #a0522d;\">DestFolder</span>),
    {ok, <span style=\"color: #a0522d;\">File</span>} = <span style=\"color: #228b22;\">file</span>:<span style=\"color: #228b22;\">open</span>(<span style=\"color: #a0522d;\">Fname</span>, [write, exclusive]),
    [[{requires, <span style=\"color: #a0522d;\">CompList</span>}, {def_arg, <span style=\"color: #a0522d;\">ExArgs</span>}]] = <span style=\"color: #228b22;\">ets</span>:<span style=\"color: #228b22;\">match</span>(<span style=\"color: #a0522d;\">State</span>, {<span style=\"color: #a0522d;\">BarcodeType</span>, encoder, <span style=\"color: #8b2252;\">'$1'</span>, <span style=\"color: #8b2252;\">'_'</span>, <span style=\"color: #8b2252;\">'$2'</span>, <span style=\"color: #8b2252;\">'_'</span>}),
    <span style=\"color: #228b22;\">file</span>:<span style=\"color: #228b22;\">write</span>(<span style=\"color: #a0522d;\">File</span>, <span style=\"color: #228b22;\">io_lib</span>:<span style=\"color: #228b22;\">format</span>(<span style=\"color: #8b2252;\">\"%!PS-Adobe-2.0\\n%%BoundingBox: 0 0 ~w ~w\\n%%LanguageLevel: 2\\n\"</span>, [<span style=\"color: #a0522d;\">Width</span>, <span style=\"color: #a0522d;\">Height</span>])),
    <span style=\"color: #228b22;\">write_component</span>(preamble, <span style=\"color: #a0522d;\">State</span>, <span style=\"color: #a0522d;\">File</span>),
    <span style=\"color: #228b22;\">file</span>:<span style=\"color: #228b22;\">write</span>(<span style=\"color: #a0522d;\">File</span>, <span style=\"color: #8b2252;\">\"\\n/Helvetica findfont 10 scalefont setfont\\n\"</span>),
    <span style=\"color: #228b22;\">lists</span>:<span style=\"color: #228b22;\">map</span>(<span style=\"color: #a020f0;\">fun</span> (<span style=\"color: #a0522d;\">C</span>) -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #228b22;\">write_component</span>(<span style=\"color: #a0522d;\">C</span>, <span style=\"color: #a0522d;\">State</span>, <span style=\"color: #a0522d;\">File</span>) <span style=\"color: #a020f0;\">end</span>, <span style=\"color: #a0522d;\">CompList</span>),
    <span style=\"color: #228b22;\">write_component</span>(<span style=\"color: #a0522d;\">BarcodeType</span>, <span style=\"color: #a0522d;\">State</span>, <span style=\"color: #a0522d;\">File</span>),
    <span style=\"color: #228b22;\">write_barcode</span>(<span style=\"color: #a0522d;\">File</span>, <span style=\"color: #a0522d;\">BarcodeType</span>, <span style=\"color: #a0522d;\">ExArgs</span>, <span style=\"color: #a0522d;\">Data</span>),
    <span style=\"color: #228b22;\">file</span>:<span style=\"color: #228b22;\">close</span>(<span style=\"color: #a0522d;\">File</span>),
    {reply, <span style=\"color: #a0522d;\">Fname</span>, <span style=\"color: #a0522d;\">State</span>};
<span style=\"color: #0000ff;\">handle_call</span>({change_table, <span style=\"color: #a0522d;\">Tab</span>}, <span style=\"color: #a0522d;\">_From</span>, <span style=\"color: #a0522d;\">_State</span>) -&gt;
    {reply, {watching_table, <span style=\"color: #a0522d;\">Tab</span>}, <span style=\"color: #a0522d;\">Tab</span>}.</pre>

<p>The last directive there should probably be implemented as a <code>handle_cast</code> rather than <code>handle_call</code><a href=\"#foot-Tue-May-15-221415EDT-2012\" name=\"note-Tue-May-15-221415EDT-2012\">[12]</a>. The first two should probably return processed data rather than raw ETS results. Rest assured that mental notes have been made. The message <code>help</code> returns a list of available <code>encoder</code>s<a href=\"#foot-Tue-May-15-221432EDT-2012\" name=\"note-Tue-May-15-221432EDT-2012\">[13]</a>, while asking for help with a specific <code>encoder</code> will return its example data. All the meat is in that extra large message handler in the middle.</p>

<p>Deep breath.</p>

<p>A message of <code>{write, <span style=\"color: #a0522d;\">DestFolder</span>, <span style=\"color: #a0522d;\">BarcodeType</span>, <span style=\"color: #a0522d;\">Data</span>, <span style=\"color: #a0522d;\">Width</span>, <span style=\"color: #a0522d;\">Height</span>}</code> will output <code>Data</code> in a <code>BarcodeType</code> barcode in the <code>DestFolder</code> folder and format it to <code>Width</code>x<code>Height</code> dimensions. That's actually going to get trickier. Right now, the dimensions are just assumed to be 200x200 in the initial PS, and that C module is expected to output a properly formatted PS file. There are a few problems with that though<a href=\"#foot-Tue-May-15-221657EDT-2012\" name=\"note-Tue-May-15-221657EDT-2012\">[14]</a>, so what I will ultimately want to do is have the C module return the appropriate dimensions and have <code>ps_bc</code> change this initial file later. That's another TODO.</p>

<p>What the <code>write</code> message actually does, in order is</p>

<ul>
  <li>generates a tempfile name for the directory it was passed</li>
  <li>opens that <code>File</code> for output</li>
  <li>looks up the required blocks in our ETS table</li>
  <li>writes the preamble to <code>File</code></li>
  <li>writes the required blocks to <code>File</code></li>
  <li>writes the barcode component to <code>File</code></li>
  <li>writes a Postscript directive invoking that component with <code>Data</code> to <code>File</code></li>
  <li>closes <code>File</code></li>
  <li>replies with the absolute tempfile name that it generated</li>
</ul>

<p>And there you have it, we now have a barcode PS file in the specified location.</p>

<p>The rest of the functions here are either <code>gen_server</code> pieces (which I won't go into), or interface functions (which I will)</p>

<pre><span style=\"color: #0000ff;\">help</span>() -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #228b22;\">gen_server</span>:<span style=\"color: #228b22;\">call</span>(?<span style=\"color: #008b8b;\">MODULE</span>, help).
<span style=\"color: #0000ff;\">help</span>(<span style=\"color: #a0522d;\">BarcodeType</span>) -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #228b22;\">gen_server</span>:<span style=\"color: #228b22;\">call</span>(?<span style=\"color: #008b8b;\">MODULE</span>, {help, <span style=\"color: #a0522d;\">BarcodeType</span>}).
<span style=\"color: #0000ff;\">write</span>(<span style=\"color: #a0522d;\">DestFolder</span>, <span style=\"color: #a0522d;\">BarcodeType</span>, <span style=\"color: #a0522d;\">Data</span>) -&gt;<span style=\"color: #0000ff;\"> </span>
    <span style=\"color: #228b22;\">write</span>(<span style=\"color: #a0522d;\">DestFolder</span>, <span style=\"color: #a0522d;\">BarcodeType</span>, <span style=\"color: #a0522d;\">Data</span>, 200, 200).
<span style=\"color: #0000ff;\">write</span>(<span style=\"color: #a0522d;\">DestFolder</span>, <span style=\"color: #a0522d;\">BarcodeType</span>, <span style=\"color: #a0522d;\">Data</span>, <span style=\"color: #a0522d;\">Width</span>, <span style=\"color: #a0522d;\">Height</span>) -&gt;
    <span style=\"color: #228b22;\">gen_server</span>:<span style=\"color: #228b22;\">call</span>(?<span style=\"color: #008b8b;\">MODULE</span>, {write, <span style=\"color: #a0522d;\">DestFolder</span>, <span style=\"color: #a0522d;\">BarcodeType</span>, <span style=\"color: #a0522d;\">Data</span>, <span style=\"color: #a0522d;\">Width</span>, <span style=\"color: #a0522d;\">Height</span>}).
<span style=\"color: #0000ff;\">generate</span>(<span style=\"color: #a0522d;\">BarcodeType</span>, <span style=\"color: #a0522d;\">Data</span>) -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #228b22;\">generate</span>(<span style=\"color: #8b2252;\">\"/tmp/\"</span>, <span style=\"color: #a0522d;\">BarcodeType</span>, <span style=\"color: #a0522d;\">Data</span>).
<span style=\"color: #0000ff;\">generate</span>(<span style=\"color: #a0522d;\">DestFolder</span>, <span style=\"color: #a0522d;\">BarcodeType</span>, <span style=\"color: #a0522d;\">Data</span>) -&gt;<span style=\"color: #0000ff;\"> </span>
    <span style=\"color: #a0522d;\">NameOfTempFile</span> = <span style=\"color: #228b22;\">write</span>(<span style=\"color: #a0522d;\">DestFolder</span>, <span style=\"color: #a0522d;\">BarcodeType</span>, <span style=\"color: #a0522d;\">Data</span>),
    <span style=\"color: #228b22;\">wand</span>:<span style=\"color: #228b22;\">process</span>(<span style=\"color: #a0522d;\">NameOfTempFile</span>),
    <span style=\"color: #a0522d;\">NameOfTempFile</span>.
<span style=\"color: #0000ff;\">change</span>(<span style=\"color: #a0522d;\">TableId</span>) -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #228b22;\">gen_server</span>:<span style=\"color: #228b22;\">call</span>(?<span style=\"color: #008b8b;\">MODULE</span>, {change, <span style=\"color: #a0522d;\">TableId</span>}).</pre>

<p>This is a set of exported functions to let outside modules easily interact with the internal <code>ps_bc</code> process. <code>change</code>, <code>help</code> and <code>write</code> map to the corresponding <code>handle_call</code> messages we looked at earlier<a href=\"#foot-Tue-May-15-222057EDT-2012\" name=\"note-Tue-May-15-222057EDT-2012\">[15]</a>. <code>generate</code> is something else. This is the principal function I expect to be called from outside the module, though AFAIK, there's no way to highlight that from within the code. To that end, it collects everything you need to create a barcode from start to finish; it accepts a <code>BarcodeType</code> and <code>Data</code> (and optionally a <code>DestFolder</code>) and calls <code>write/3</code> to create the directory, then <code>wand:process</code> to create the corresponding PNG and rasterized PS file, and finally returns the tempfile name that it generated. That should probably actually return a list of absolute file-names it created rather than just the base name. Mental note number 6.</p>

<p>Whew! At the risk of pulling a Yegge, this piece is turning out <i>a lot</i> longer than I though it was going to be. Lets get it wrapped up quickly.</p>

<h3>Nitrogen</h3>

<p><a href=\"http://nitrogenproject.com/\">Nitrogen</a> is an Erlang web framework I've been playing with. I won't explain it in depth, just use it to show you how you'd go about invoking the above program for realsies. In fact, here's a <code>nitrogen/rel/nitrogen/site/src/index.erl</code> that will call out to <code>ps_barcode</code> to generate a barcode based on user input and let them download the bitmap and Postscript file:</p>

<pre><span style=\"color: #b22222;\">%% </span><span style=\"color: #b22222;\">-*- mode: nitrogen -*-
</span><span style=\"color: #7a378b;\">-module</span> (index).
<span style=\"color: #7a378b;\">-compile</span>(export_all).
<span style=\"color: #7a378b;\">-include_lib</span>(<span style=\"color: #8b2252;\">\"nitrogen_core/include/wf.hrl\"</span>).

<span style=\"color: #0000ff;\">main</span>() -&gt;<span style=\"color: #0000ff;\"> </span>#<span style=\"color: #228b22;\">template</span> { file=<span style=\"color: #8b2252;\">\"./site/templates/bare.html\"</span> }.

<span style=\"color: #0000ff;\">title</span>() -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #8b2252;\">\"Welcome to Nitrogen\"</span>.

<span style=\"color: #0000ff;\">body</span>() -&gt;
    #<span style=\"color: #228b22;\">container_12</span> { body=[
        #<span style=\"color: #228b22;\">grid_8</span> { alpha=true, prefix=2, suffix=2, omega=true, body=<span style=\"color: #228b22;\">inner_body</span>() }
    ]}.

<span style=\"color: #0000ff;\">inner_body</span>() -&gt;<span style=\"color: #0000ff;\"> </span>
    [
        #<span style=\"color: #228b22;\">h3</span> { text=<span style=\"color: #8b2252;\">\"PS Barcode Generator\"</span> },
        #<span style=\"color: #228b22;\">h1</span> { text=<span style=\"color: #8b2252;\">\"In MOTHERFUCKING ERLANG\"</span>},
        #<span style=\"color: #228b22;\">p</span>{},
        #<span style=\"color: #228b22;\">textbox</span> { id=barcode_data, text=<span style=\"color: #228b22;\">get_example</span>(qrcode)},
        <span style=\"color: #228b22;\">barcode_type_dropdown</span>(qrcode),
        #<span style=\"color: #228b22;\">button</span> { id=button, text=<span style=\"color: #8b2252;\">\"Generate\"</span>, postback=click },
        #<span style=\"color: #228b22;\">p</span>{ id=result, body=[
            #<span style=\"color: #228b22;\">image</span> { id=barcode_img },
            #<span style=\"color: #228b22;\">p</span> { id=barcode_link }
        ]}
    ].

<span style=\"color: #0000ff;\">barcode_type_dropdown</span>(<span style=\"color: #a0522d;\">DefaultType</span>) -&gt;
    <span style=\"color: #a0522d;\">Types</span> = <span style=\"color: #228b22;\">rpc</span>:<span style=\"color: #228b22;\">call</span>(<span style=\"color: #8b2252;\">'ps_barcode@127.0.1.1'</span>, ps_bc, help, []),
    #<span style=\"color: #228b22;\">dropdown</span> { id=barcode_type, value=<span style=\"color: #a0522d;\">DefaultType</span>, postback=select_type,
        options=<span style=\"color: #228b22;\">lists</span>:<span style=\"color: #228b22;\">map</span>(<span style=\"color: #a020f0;\">fun</span> ([<span style=\"color: #a0522d;\">T</span>]) -&gt;<span style=\"color: #0000ff;\"> </span>#<span style=\"color: #228b22;\">option</span> {text=<span style=\"color: #a0522d;\">T</span>, value=<span style=\"color: #a0522d;\">T</span>} <span style=\"color: #a020f0;\">end</span>, <span style=\"color: #a0522d;\">Types</span>)
    }.

<span style=\"color: #0000ff;\">get_example</span>(<span style=\"color: #a0522d;\">BarcodeType</span>) -&gt;
    [[{example,<span style=\"color: #a0522d;\">Example</span>}]] = <span style=\"color: #228b22;\">rpc</span>:<span style=\"color: #228b22;\">call</span>(<span style=\"color: #8b2252;\">'ps_barcode@127.0.1.1'</span>, ps_bc, help, [<span style=\"color: #a0522d;\">BarcodeType</span>]),
    <span style=\"color: #a0522d;\">Example</span>.

<span style=\"color: #0000ff;\">event</span>(click) -&gt;
    [<span style=\"color: #a0522d;\">_</span>, <span style=\"color: #a0522d;\">Fname</span>] = <span style=\"color: #228b22;\">re</span>:<span style=\"color: #228b22;\">split</span>(
        <span style=\"color: #228b22;\">rpc</span>:<span style=\"color: #228b22;\">call</span>(<span style=\"color: #8b2252;\">'ps_barcode@127.0.1.1'</span>, ps_bc, generate, 
            [<span style=\"color: #228b22;\">filename</span>:<span style=\"color: #228b22;\">absname</span>(<span style=\"color: #8b2252;\">\"site/static/images\"</span>), <span style=\"color: #7a378b;\">list_to_atom</span>(<span style=\"color: #228b22;\">wf</span>:<span style=\"color: #228b22;\">q</span>(barcode_type)), <span style=\"color: #228b22;\">wf</span>:<span style=\"color: #228b22;\">q</span>(barcode_data)]),
        <span style=\"color: #8b2252;\">\"site/static\"</span>, [{return, list}]),
    <span style=\"color: #228b22;\">wf</span>:<span style=\"color: #228b22;\">replace</span>(barcode_img, 
        #<span style=\"color: #228b22;\">image</span> { 
            id=barcode_img,
            image=<span style=\"color: #228b22;\">string</span>:<span style=\"color: #228b22;\">concat</span>(<span style=\"color: #a0522d;\">Fname</span>, <span style=\"color: #8b2252;\">\".png\"</span>),
            actions=#<span style=\"color: #228b22;\">effect</span> { effect=highlight }
    }),
    <span style=\"color: #228b22;\">wf</span>:<span style=\"color: #228b22;\">replace</span>(barcode_link,
        #<span style=\"color: #228b22;\">link</span> {
            id=barcode_link,
            text=<span style=\"color: #8b2252;\">\"Download PS file\"</span>,
            url=<span style=\"color: #228b22;\">string</span>:<span style=\"color: #228b22;\">concat</span>(<span style=\"color: #a0522d;\">Fname</span>, <span style=\"color: #8b2252;\">\".ps\"</span>)
    });
<span style=\"color: #0000ff;\">event</span>(select_type) -&gt;
    <span style=\"color: #228b22;\">wf</span>:<span style=\"color: #228b22;\">set</span>(barcode_data, <span style=\"color: #228b22;\">get_example</span>(<span style=\"color: #7a378b;\">list_to_atom</span>(<span style=\"color: #228b22;\">wf</span>:<span style=\"color: #228b22;\">q</span>(barcode_type)))).</pre>

<p>The actual calls to our application happen</p>

<pre><span style=\"color: #0000ff;\">get_example</span>(<span style=\"color: #a0522d;\">BarcodeType</span>) -&gt;
    [[{example,<span style=\"color: #a0522d;\">Example</span>}]] = <span style=\"color: #228b22;\">rpc</span>:<span style=\"color: #228b22;\">call</span>(<span style=\"color: #8b2252;\">'ps_barcode@127.0.1.1'</span>, ps_bc, help, [<span style=\"color: #a0522d;\">BarcodeType</span>]),
    <span style=\"color: #a0522d;\">Example</span>.</pre>

<p>here<a href=\"#foot-Tue-May-15-222251EDT-2012\" name=\"note-Tue-May-15-222251EDT-2012\">[16]</a> and</p>

<pre>        ...
        <span style=\"color: #228b22;\">rpc</span>:<span style=\"color: #228b22;\">call</span>(<span style=\"color: #8b2252;\">'ps_barcode@127.0.1.1'</span>, ps_bc, generate, 
            [<span style=\"color: #228b22;\">filename</span>:<span style=\"color: #228b22;\">absname</span>(<span style=\"color: #8b2252;\">\"site/static/images\"</span>), <span style=\"color: #7a378b;\">list_to_atom</span>(<span style=\"color: #228b22;\">wf</span>:<span style=\"color: #228b22;\">q</span>(barcode_type)), <span style=\"color: #228b22;\">wf</span>:<span style=\"color: #228b22;\">q</span>(barcode_data)]),
        <span style=\"color: #8b2252;\">\"site/static\"</span>, [{return, list}]),
        ...</pre>

<p>here. Recall that <code>make run</code> on the <code>Makefile</code> I defined earlier started a node named <code><span style=\"color: #8b2252;\">'ps_barcode@127.0.1.1'</span></code> and started our application in it. So, if we want to use it from another Erlang node, all we have to do is start them both up using the same <a href=\"http://erlang.org/pipermail/erlang-questions/2001-December/004153.html\"><code>cookie</code></a>, and then use the built in <code>rpc:call</code> function, specifying the appropriate node, module, function and arguments. The return message is going to be a response from our application.</p>

<p>The code shown here won't actually run on its own<a href=\"#foot-Tue-May-15-222809EDT-2012\" name=\"note-Tue-May-15-222809EDT-2012\">[17]</a>, I left out the C file<a href=\"#foot-Tue-May-15-222815EDT-2012\" name=\"note-Tue-May-15-222815EDT-2012\">[18]</a>, as well as the actual <a href=\"https://code.google.com/p/postscriptbarcode/downloads/detail?name=barcode-2012-04-26.ps\">barcode.ps</a> that the whole thing is based on. I'll act on the mental notes I've collected first, and then toss the whole thing up on <a href=\"https://github.com/Inaimathi\">my github</a> for you to play with. The nitrogen module is minimal enough that I won't feel bad for leaving it out, but the one above should work with your copy of nitrogen.</p>

<p>It's actually just a minimally modified version of the default <code>index.erl</code> file that comes with the framework, the only interesting pieces in it are the <code>rpc:call</code> lines which demonstrate the <b>hands-down most interesting thing</b> about Erlang. The thing that justifies putting up with all the warts and annoyances<a href=\"#foot-Tue-May-15-222916EDT-2012\" name=\"note-Tue-May-15-222916EDT-2012\">[19]</a>. I'll expand on that next time though, this was already more than enough stuff coming out of my mind.</p>

<hr />
<h5>Footnotes</h5>
<p>1 - <a href=\"#note-Tue-May-15-220424EDT-2012\" name=\"foot-Tue-May-15-220424EDT-2012\">[back]</a> - The complete file is 17111 lines, and we really only need about 800-1200 at the outside to generate a single specific barcode.</p>

<p>2 - <a href=\"#note-Tue-May-15-220604EDT-2012\" name=\"foot-Tue-May-15-220604EDT-2012\">[back]</a> - Incidentally, I didn't do this first. I sort of wish I had in retrospect, because it would have saved me some dicking around with <code>erl</code>, but I actually wrote the code first, then wrote the above based on it. Also incidentally, a lot of it doesn't seem like much of it will change on a project-by-project basis. That tells me that we're either working with the wrong abstractions, or there are tricky things you can do at this stage that I haven't yet grasped. It also tells me that I should probably write some generation scripts for it.</p>

<p>3 - <a href=\"#note-Tue-May-15-220658EDT-2012\" name=\"foot-Tue-May-15-220658EDT-2012\">[back]</a> - <code>one_for_all</code> and <code>rest_for_one</code> are other <a href=\"http://www.erlang.org/doc/design_principles/sup_princ.html#strategy\">possible strategies</a>, <code>_all</code> restarts all child processes rather than just the one that errored, and <code>rest_</code> just restarts processes later in the start order.</p>

<p>4 - <a href=\"#note-Tue-May-15-220712EDT-2012\" name=\"foot-Tue-May-15-220712EDT-2012\">[back]</a> - Which means they get restarted when they error, <i>and</i> hang around after they've finished their work.</p>

<p>5 - <a href=\"#note-Tue-May-15-220719EDT-2012\" name=\"foot-Tue-May-15-220719EDT-2012\">[back]</a> - Which means that we have a pretty shallow supervision tree in this case, but we really don't need more.</p>

<p>6 - <a href=\"#note-Tue-May-15-220847EDT-2012\" name=\"foot-Tue-May-15-220847EDT-2012\">[back]</a> - Routines that do general operations for a particular class of barcode, such as linear or matrix.</p>

<p>7 - <a href=\"#note-Tue-May-15-220854EDT-2012\" name=\"foot-Tue-May-15-220854EDT-2012\">[back]</a> - Routines that do the job of converting a specific piece of data into a particular type of barcode, such as qrcode, code93 or datamatrix.</p>

<p>8 - <a href=\"#note-Tue-May-15-221005EDT-2012\" name=\"foot-Tue-May-15-221005EDT-2012\">[back]</a> - <code>renderer</code>s, required <code>encoder</code>s and suggested <code>encoders</code>.</p>

<p>9 - <a href=\"#note-Tue-May-15-221009EDT-2012\" name=\"foot-Tue-May-15-221009EDT-2012\">[back]</a> - Some, like datamatrix and qrcode, can handle almost arbitrary string information, while others are restricted to a subset of ascii, and others require a specific number of numeric characters.</p>

<p>10 - <a href=\"#note-Tue-May-15-221156EDT-2012\" name=\"foot-Tue-May-15-221156EDT-2012\">[back]</a> - As an aside here, that's one of the things that really rustles my jimmies about Erlang. I've gotten extremely used to including a pretty extensive documentation string with each Common Lisp function and method, knowing that a potential user will be able to make full use of any <code>describe</code> calls they make. It's actually even better for methods, since you get the documentation for the <code>generic</code> you define, as well as a compilation of all doc-strings for the related <code>defmethod</code> calls. Erlang isn't having any of this shit. If you want to include doc-strings, you can damn well write Java-style precisely formatted comments and use a separate doc extractor to read them. I guess this is how most languages do it? It still seems stupid to have a system this dynamic that <i>doesn't</i> allow runtime documentation pokes. Sigh. Ok, let's get back to it.</p>

<p>11 - <a href=\"#note-Tue-May-15-221255EDT-2012\" name=\"foot-Tue-May-15-221255EDT-2012\">[back]</a> - Which, granted, isn't really worth saving given how blazingly fast ETS is, but still.</p>

<p>12 - <a href=\"#note-Tue-May-15-221415EDT-2012\" name=\"foot-Tue-May-15-221415EDT-2012\">[back]</a> - The only difference being that <code>handle_cast</code> doesn't send a response message to its caller.</p>

<p>13 - <a href=\"#note-Tue-May-15-221432EDT-2012\" name=\"foot-Tue-May-15-221432EDT-2012\">[back]</a> - Which we'll use later to give the user something to do about them.</p>

<p>14 - <a href=\"#note-Tue-May-15-221657EDT-2012\" name=\"foot-Tue-May-15-221657EDT-2012\">[back]</a> - Specifically, since I'm using the Imagemagick API, the PS that it outputs is actually rasterised. That means it'll be much larger than the initial file and take that much longer to output. Literally the only advantage to it is that it properly sets the width and height of the document.</p>

<p>15 - <a href=\"#note-Tue-May-15-222057EDT-2012\" name=\"foot-Tue-May-15-222057EDT-2012\">[back]</a> - Note that I do export <code><span style=\"color: #228b22;\">help/0</span></code>, <code><span style=\"color: #228b22;\">help/1</span></code>, <code><span style=\"color: #228b22;\">write/3</span></code> and <code><span style=\"color: #228b22;\">write/5</span></code> separately.</p>

<p>16 - <a href=\"#note-Tue-May-15-222251EDT-2012\" name=\"foot-Tue-May-15-222251EDT-2012\">[back]</a> - Which, again, really should be expecting a naked string response rather than a raw ETS lookup record.</p>

<p>17 - <a href=\"#note-Tue-May-15-222809EDT-2012\" name=\"foot-Tue-May-15-222809EDT-2012\">[back]</a> - The complete code doesn't quite work yet either. Most of it does what it's supposed to, but I've already found <a href=\"http://stackoverflow.com/questions/10604400/handling-timeouts-in-otp\">one odd case where things don't quite work</a> the way they're supposed to. Tips and patches welcome.</p>

<p>18 - <a href=\"#note-Tue-May-15-222815EDT-2012\" name=\"foot-Tue-May-15-222815EDT-2012\">[back]</a> - Which I was actually going to discuss, but this has gone on quite long enough already.</p>

<p>19 - <a href=\"#note-Tue-May-15-222916EDT-2012\" name=\"foot-Tue-May-15-222916EDT-2012\">[back]</a> - At least, until I learn enough about it to put together an analogous system in Common Lisp :P</p>
"))
((5202 3723 576090000) :INSERT (79 :POSTED 3545438400))
((5202 3723 576095000) :INSERT (79 :TAG :ERLANG))
((5202 3723 576097000) :INSERT (79 :TAG :ALMOST-LITERATE-PROGRAMMING))
((5202 3723 576100000) :INSERT (79 :TAG :NITROGEN))
((5202 3723 576395000) :INSERT (80 :TITLE "Please Don't Listen to Jeff Atwood"))
((5202 3723 576400000) :INSERT
 (80 :FILE "please-dont-listen-to-jeff-atwood.html"))
((5202 3723 576403000) :INSERT (80 :EDITED 3610300313))
((5202 3723 576408000) :INSERT
 (80 :BODY
  "<p>On my bus ride back from work<a href=\"#foot-Thu-May-17-200708EDT-2012\" name=\"note-Thu-May-17-200708EDT-2012\">[1]</a>, I've been thinking about how to make the response to <a href=\"http://www.codinghorror.com/blog/2012/05/please-dont-learn-to-code.html\">this</a> precise and thorough.</p>

<p>The stuff I was going to come out with included a reference to this <a href=\"http://video.google.com/videoplay?docid=-2726904509434151616\">Sussman talk</a> from <a href=\"http://www.cs.indiana.edu/dfried_celebration.html\">Danfest</a>, which concludes by highlighting the title of a Minsky paper; \"<a href=\"http://web.media.mit.edu/~minsky/papers/Why%20programming%20is--.html\">Why Programming is a Good Medium for Expressing Poorly-Understood and Sloppily-Formulated Ideas</a>\". I won't link you to the actual point in the talk wherein this happens, because it's only about thirty minutes long and well worth your time in its entirety. The gist is that by forcing yourself to describe a process or concept well enough that a very stupid machine (a computer) can understand it, you can iron out the unnoticed gaps and assumptions in your own knowledge. This is particularly relevant when dealing with <i>other humans</i>, who by and large aren't stupid, but merely missing some piece of information that you've begun to take for granted, or perhaps only ever learned by rote.</p>

<p>That would have segued naturally into the point that learning to think precisely can help humans communicate more effectively with each other, and not just with machines. The rebuttal would have continued with a short, faux-op-ed from an early scribe claiming that literacy is completely overrated and unnecessary in most peoples' every-day lives (claiming in all seriousness that all hunters really need to worry about is not breaking their spear arms, and making sure that their legs are strong to carry enough meat back, and that the farmers should just focus on their plowshares). He'd conclude by asking you to refuse to learn how to read and write, because frankly, he's sick enough of his current colleagues' grammatical errors without you adding your own cock-ups to the mix.</p>

<p><i>Then</i> I was going to point out this video from the <a href=\"http://www.youtube.com/watch?v=2Op3QLzMgSY&feature=BFa&list=PLE18841CABEA24090\">MIT 600 Computer Science course</a><a href=\"#foot-Fri-May-18-100011EDT-2012\" name=\"note-Fri-May-18-100011EDT-2012\">[2]</a>, wherein Harold Abelson explains to the fresh class that \"Computer Science\" is not about computers in the same sense that Physics is not about particle accelerators, or that Biology is not about microscopes and petri dishes. What Computer Science is about, he claims, is formalizing certain types of formerly intuitive knowledge. In this case, imperative knowledge. How to do things. For a finale, I'd point out that, while Jeff was talking about coding where I'm making an argument for something more generally useful, humans might find it easier getting to the latter after going through the former. Seibel's <a href=\"http://www.codersatwork.com/\">Coders at Work</a><a href=\"#foot-Fri-May-18-100026EDT-2012\" name=\"note-Fri-May-18-100026EDT-2012\">[3]</a> shows that one of the two<a href=\"#foot-Fri-May-18-100051EDT-2012\" name=\"note-Fri-May-18-100051EDT-2012\">[4]</a> peculiar things about people who become good programmers is that they had early exposure to computers and coding, at a time when that wasn't really the typical experience.</p>

<p>I was <i>going</i> to write that, but on second reading, <a href=\"http://www.codinghorror.com/blog/2012/05/please-dont-learn-to-code.html\">his latest piece</a> seems to have the paradoxical message of</p>

<ol>
  <li>You shouldn't bother learning things that won't directly and obviously make you better at the tasks in your description<a href=\"#foot-Thu-May-17-200845EDT-2012\" name=\"note-Thu-May-17-200845EDT-2012\">[5]</a></li>
  <li>You shouldn't learn to program just for the money<a href=\"#foot-Thu-May-17-200851EDT-2012\" name=\"note-Thu-May-17-200851EDT-2012\">[6]</a></li>
</ol>

<p>I'm not too familiar with the \"everyone should learn to code\" movement, but I doubt its core message is that everyone should become a professional programmer. Hell, I know how impossible <i>that</i> proposition is, and <a href=\"/article?name=freedom.html\">I've talked about it</a> before. The thing is, unlike plumbing<a href=\"#foot-Thu-May-17-200915EDT-2012\" name=\"note-Thu-May-17-200915EDT-2012\">[7]</a>, programming<a href=\"#foot-Thu-May-17-200920EDT-2012\" name=\"note-Thu-May-17-200920EDT-2012\">[8]</a> does teach those who study it a lot about communicating precisely, thinking clearly, and solving problems in general. So it at least seems like a believable candidate for \"the next literacy\".</p>

<p>So, yes, please, do learn to program. Don't avoid it just because you can grow turnips, or answer phones, or sit in meetings fine without it.</p>

<p>Go beyond</p>

<pre>10 PRINT \"HELLO\"
20 GOTO 10</pre>

<p>Begin to understand how to think precisely, and communicate clearly with entities who don't have a lot of knowledge in common with you. Don't worry that you'll <a href=\"http://xkcd.com/1050/\">never actually use this</a> at your day job, and certainly <a href=\"http://norvig.com/21-days.html\">don't expect to be a highly paid programmer in <i>just 7 days</i></a>. But do learn, because it will be interesting, and fun, and useful in places you might not expect.</p>

<hr />
<h5>Footnotes</h5>
<p>1 - <a href=\"#note-Thu-May-17-200708EDT-2012\" name=\"foot-Thu-May-17-200708EDT-2012\">[back]</a> - As a Lisp programmer at a small Toronto company, just in case my bias wasn't obvious enough already.</p>

<p>2 - <a href=\"#note-Fri-May-18-100011EDT-2012\" name=\"foot-Fri-May-18-100011EDT-2012\">[back]</a> -  (better known as <a href=\"http://mitpress.mit.edu/sicp/\">SICP</a>)</p>

<p>3 - <a href=\"#note-Fri-May-18-100026EDT-2012\" name=\"foot-Fri-May-18-100026EDT-2012\">[back]</a> -  (author's talk <a href=\"http://www.youtube.com/watch?v=pQy22qPH7i4\">here</a>)</p>

<p>4 - <a href=\"#note-Fri-May-18-100051EDT-2012\" name=\"foot-Fri-May-18-100051EDT-2012\">[back]</a> -  (the other is that most of them use Emacs)</p>

<p>5 - <a href=\"#note-Thu-May-17-200845EDT-2012\" name=\"foot-Thu-May-17-200845EDT-2012\">[back]</a> - <blockquote>To those who argue programming is an essential skill we should be teaching our children, right up there with reading, writing, and arithmetic: <b>can you explain to me how Michael Bloomberg would be better at his day to day job of leading the largest city in the USA if he woke up one morning as a crack Java coder?</b> It is obvious to me how being a skilled reader, a skilled writer, and at least high school level math are fundamental to performing the job of a politician. Or at any job, for that matter. But understanding variables and functions, pointers and recursion? I can't see it.<span class=\"sig\">-Jeff Atwood</span></blockquote> (emphasis his). </p>
<p>I think my response is obvious from what I've said already, but just in case. \"Programming\" is not \"variables and functions, pointers and recursion\". It is a way to describe a process or concept so well that things which don't even share your biology can understand it. This is useful when dealing with things that <i>do</i> share your biology, but not <i>quite</i> all of your knowledge, and it is useful when explaining fundamental concepts to the uninitiated.</p>

<p>6 - <a href=\"#note-Thu-May-17-200851EDT-2012\" name=\"foot-Thu-May-17-200851EDT-2012\">[back]</a> - <blockquote>Please don't advocate learning to code just for the sake of learning how to code. Or worse, because of the fat paychecks. <span class=\"sig\">-Jeff Atwood</span></blockquote></p>

<p>7 - <a href=\"#note-Thu-May-17-200915EDT-2012\" name=\"foot-Thu-May-17-200915EDT-2012\">[back]</a> - Which deals with a very specific, physical system, isn't particularly fun, isn't particularly social, and only ever needs to be practised when something goes wrong.</p>

<p>8 - <a href=\"#note-Thu-May-17-200920EDT-2012\" name=\"foot-Thu-May-17-200920EDT-2012\">[back]</a> - Which deals with a wide variety of at least partially imaginary systems, is fun, is mostly social, and can be applied in situations that don't involve water spraying out from under your sink.</p>
"))
((5202 3723 576479000) :INSERT (80 :POSTED 3546216000))
((5202 3723 576483000) :INSERT (80 :TAG :IDEA-PEELING))
((5202 3723 576486000) :INSERT (80 :TAG :RESPONSE))
((5202 3723 576788000) :INSERT (81 :TITLE "Assumptions"))
((5202 3723 576796000) :INSERT (81 :FILE "assumptions.html"))
((5202 3723 576800000) :INSERT (81 :EDITED 3610300542))
((5202 3723 576807000) :INSERT
 (81 :BODY
  "<p>Your language is making an assumption about your work<a href=\"#foot-Thu-May-24-134853EDT-2012\" name=\"note-Thu-May-24-134853EDT-2012\">[1]</a>. See if you've noticed it:</p>

<p><b>Whatever your program does, it will run in one process, on one machine, inside one network.</b></p>

<p>That's not to say that your language prevents you from violating that assumption, but if you do, you'll need to do something <a href=\"http://www.haskell.org/haskellwiki/GHC/Data_Parallel_Haskell\">odd</a>, or something <a href=\"http://en.wikibooks.org/wiki/C%2B%2B_Programming/Threading#Processes\">fraught</a>, or <a href=\"http://en.wikipedia.org/wiki/XML-RPC\">something</a> <a href=\"http://en.wikipedia.org/wiki/SOAP_(protocol)\">arcane</a>. Some languages also make a further assumption that your program will run on one <i>core</i>, which is becoming more and more ridiculous, and the result is a broken or missing threading model<a href=\"#foot-Thu-May-24-134901EDT-2012\" name=\"note-Thu-May-24-134901EDT-2012\">[2]</a>.</p>

<p>The <blockquote>\"hands-down most interesting thing about Erlang\" <span class=\"sig\">-Inaimathi</span></blockquote> is that it does not make this assumption. Each of your component pieces are meant to be created either as sets of functional definitions, or as interlocking, message-passing processes running almost completely independently from one another. If your program needs to run from multiple nodes on the same machine for whatever reason, it uses the <code>rpc:<span style=\"color: #228b22;\">call/4</span></code> I quickly demonstrated <a href=\"/article?name=erlang-barcode-generation.html\">last time</a>. Calls across machines and networks look the same, except that the target node is going to be a foreign IP rather than <code>127.0.1.1</code>.</p>

<p>Calling out is just one piece, of course, and it wouldn't work particularly well without a standard communication protocol for Erlang processes to use. XML-RPC or similar could work in other languages, I suppose, but I'd always have this sneaking suspicion that I'm paying more for the channel itself than the messages being sent through. Erlang also provides facilities for process management, the most obvious and useful being supervision trees. Those let you specify monitoring and restarting strategies for the components of your program.</p>

<p>Being a web guy, it's sort of obvious to me that this is a good system structuring strategy.</p>

<p>Normally, most of these things would be handled outside the program. In fact, for the most part, I'm <i>used</i> to having to handle them outside of the program. I set up OS-level logging and restarting mechanisms, along with some scripted instruction about what to do in the event of a node failure. You'd need to explicitly define an inter-process communication protocol or grab one of the existing ones, and use it to make sure your system had a measure of node awareness<a href=\"#foot-Thu-May-24-135243EDT-2012\" name=\"note-Thu-May-24-135243EDT-2012\">[3]</a>.</p>

<p>For what it's worth, that works. The difference is that it takes more work than specifying it in source, it looks different from the program code and increases external dependencies, and (probably the most egregious from my perspective) it's not in source control by default, and therefore probably being treated as part of the deployment steps rather than as a first class citizen of the program proper. I'm going to mangle <a href=\"http://en.wikipedia.org/wiki/Greenspun's_tenth_rule\">Greenspun's 10th</a> here for illustrative purposes</p>

<blockquote>Any sufficiently complicated, distributed system contains an ad-hoc, informally specified, bug-ridden, slow implementation of half of Erlang/OTP</blockquote>

<p>It's really all stuff you already know cold. </p>

<ul>
  <li>Inter-node communication, complete with heartbeats and the appropriate byte-protocol</li>
  <li>a specified, standard remote procedure call mechanism</li>
  <li>formalized and explicit policy settings about failures</li>
  <li>graceful distribution, logging, deployment and re-deployment (as per the <a href=\"/article?name=erlang-barcode-generation.html\">\"hot code swapping\"</a>)</li>
</ul>

<p>The difference is that you're probably used to it being specified in the surrounding infrastructure and systems rather than in the program itself.</p>

<hr />
<h5>Footnotes</h5>
<p>1 - <a href=\"#note-Thu-May-24-134853EDT-2012\" name=\"foot-Thu-May-24-134853EDT-2012\">[back]</a> - It actually doesn't matter what your language is; everything short of Erlang, and some experimental/domain-specific languages built to break this particular assumption, make it.</p>

<p>2 - <a href=\"#note-Thu-May-24-134901EDT-2012\" name=\"foot-Thu-May-24-134901EDT-2012\">[back]</a> - Which is not in and of itself bad, the bad part is that the sysadmin is meant to pick up the slack manually.</p>

<p>3 - <a href=\"#note-Thu-May-24-135243EDT-2012\" name=\"foot-Thu-May-24-135243EDT-2012\">[back]</a> - I've actually only done this once, and it ended up using HTTP for inter-process communication. It solved the specific problem, but something tells me that wouldn't be the easiest thing in the world to scale up.</p>

<p>4 - <a href=\"#note-Thu-May-24-135530EDT-2012\" name=\"foot-Thu-May-24-135530EDT-2012\">[back]</a> - Modulo the usual deployment headaches.</p>
"))
((5202 3723 576861000) :INSERT (81 :POSTED 3546820800))
((5202 3723 576865000) :INSERT (81 :TAG :ERLANG))
((5202 3723 576869000) :INSERT (81 :TAG :IDEA-PEELING))
((5202 3723 576872000) :INSERT (81 :TAG :LANGUAGES))
((5202 3723 576876000) :INSERT (81 :TAG :SPECULATION))
((5202 3723 577383000) :INSERT (82 :TITLE "Boring Update"))
((5202 3723 577391000) :INSERT (82 :FILE "another-update.html"))
((5202 3723 577397000) :INSERT (82 :EDITED 3610301188))
((5202 3723 577401000) :INSERT
 (82 :BODY
  "<p>This has been one hell of a month, mostly for non-technical reasons, but I think I need to discuss some of them regardless. The following is a journal-style entry, so skip it if you're here for any kind of language discussion.</p>

<h3>Specialization</h3>

<p>Firstly, you may have noticed that I've been hacking Erlang lately. It's verbose, it's obtuse, it works at bizarre cross-purposes with itself, but it has endeared itself to me for reasons I've <a href=\"/article?name=assumptions.html\">already discussed</a>. It's not too clear to me why I have this drive to try new languages, and it's not entirely clear whether it gives me an edge or dulls it in the end. It feels like I'm making reasonable progress and gaining perspective on the process of expressing processes precisely, and maybe that's enough. The root of the chain is this bias I have against overspecialization, which may or may not be an evolutionary vestige, but it doesn't seem to have hurt me yet. It seems intuitively obvious that I'd want to avoid the situation where I don't have the right tools for a job, and that means keeping a lot of them around. Admittedly, I haven't practised this in real life, but cognitive tools don't take up space, and are always at my call, so it's much easier to justify.</p>

<p>I've had conversations with quite a few people I respect that go the other way. That is, they seem to think that going deep is much better than going broad, but that honestly only seems to be true if your goal is to end up as a corporate developer or team lead somewhere. I've also had encounters with people almost hard-wired to a particular language. One or two Lispers I keep in touch with seem genuinely concerned that I've been off doing Erlang or Smalltalk work. Pretty much every C++/C#/Java programmer I've met so far in real life have condescendingly stated that <code>[their language]</code> is the only one you should ever consider for production work. To top it off, I've interacted with a worrying number of Haskell douches who aggressively push their preference on other functional programmers.</p>

<p>That <i>can't</i> be the correct approach, regardless of how powerful an individual language is.</p>

<h3>Make</h3>

<p>The Erlang play I've engaged in has forced me to take a serious look at <a href=\"http://www.gnu.org/software/make/manual/make.html\"><code>make</code></a>. I mentioned a while ago that I reach for <a href=\"http://www.ruby-lang.org/en/\">Ruby</a> whenever I need to do almost any small bit of scripting. Until about a week ago, this included deployment scripts. It never really occurred to me that <code>make</code> was good for something other than compiling C projects, but taking a closer look, it seems like it can do quite a bit. It has conditionals, loops and functions, and it deals with command line arguments a lot more gracefully than scripts in typical general-purpose languages.</p>

<pre><span style=\"color: #a0522d;\">exclude</span> = .git .gitignore *~ docs/* *org config.lisp log

define deploy
        git checkout $(<span style=\"color: #a0522d;\">1</span>);
        rsync -rv $(<span style=\"color: #a0522d;\">foreach</span> var, $(<span style=\"color: #a0522d;\">exclude</span>), --exclude $(<span style=\"color: #a0522d;\">var</span>)) ./ $(<span style=\"color: #a0522d;\">2</span>);
        ssh $(<span style=\"color: #a0522d;\">3</span>);
endef

<span style=\"color: #0000ff;\">deploy-public</span>:
        $(<span style=\"color: #a0522d;\">call</span> deploy, master, [user]@[server]:[project-root], [user]@[server])

<span style=\"color: #0000ff;\">deploy-client-a</span>:
        $(<span style=\"color: #a0522d;\">call</span> deploy, [client-branch], [user]@[server]:hhsc-[project-root], [user]@[server])

<span style=\"color: #0000ff;\">deploy-client-b</span>:
        $(<span style=\"color: #a0522d;\">call</span> deploy, [client-branch], [user]@[server]:hhsc-[project-root], [user]@[server])

<span style=\"color: #0000ff;\">ssh</span>:
        ssh [user]@[server]</pre>

<p>That saved me about 40 lines when compared to the Ruby script that used to do the same job<a href=\"#foot-Sat-May-26-230305EDT-2012\" name=\"note-Sat-May-26-230305EDT-2012\">[1]</a>. Granted, the <code>Makefile</code> makes me type out the <code>[user]@[server]</code> string twice, because <code>:</code> is otherwise interpreted as a control character and there's oddly no way to escape it, but that's an acceptable blemish given the overall line savings. Now that's not to say that <code>make</code> is more elegant than <code>Ruby</code>, just that it's a lot more specialized for the task. Most of the chaff from those 56 lines was doing command-line parsing and some declarations, which again hints that command line argument parsing is a hack.</p>

<p>The other advantage of the <code>Makefile</code> is that using it gives me meaningful completions at the command line. In the above, if I tabbed on <code>make</code>, it would give me the different tasks as potential entries </p>

<pre>inaimathi@hermaeus:~/project$ make 
deploy-client-a  deploy-client-b  deploy-public  Makefile       ssh
inaimathi@hermaeus:~/project$ make |</pre>

<p>That's going to get more convenient the more clients we start supporting. I'm not going to go through the full <code>make</code> syntax; it's fairly self explanatory and <a href=\"http://www.gnu.org/software/make/manual/make.html\">docs</a> exist in any case. A definition looks like that <code>define..endef</code> block, calling a function looks like <code>$(call fn, arg1, arg2, ...)</code>, the <code>exclude</code> line shows you what a variable looks like, and the bit that looks like <code>$(foreach ...)</code> is a loop. That should be enough for pretty much anything you need to do with the tool.</p>

<h3>Music</h3>

<p>I had a fit of OCD the other day, and decided to finally organize my music library to prevent my phone from reporting</p>

<pre>Unknown Artist -- 178 songs</pre>

<p>instead of correctly sorted collections. I did reach for Ruby here, and two scripts turned out to be particularly useful</p>

<pre><span style=\"color: #b22222;\">#</span><span style=\"color: #b22222;\">!/usr/bin/ruby
</span>
require <span style=\"color: #8b2252;\">'optparse'</span>
require <span style=\"color: #8b2252;\">'fileutils'</span>

<span style=\"color: #a020f0;\">class</span> <span style=\"color: #228b22;\">String</span>
  <span style=\"color: #a020f0;\">def</span> <span style=\"color: #0000ff;\">naive_title_case</span>(split_by = <span style=\"color: #8b2252;\">\"-\"</span>)
    split(split_by).map(&amp;<span style=\"color: #008b8b;\">:capitalize</span>).join <span style=\"color: #8b2252;\">\" \"</span>
  <span style=\"color: #a020f0;\">end</span>
  <span style=\"color: #a020f0;\">def</span> <span style=\"color: #0000ff;\">strip_song</span>
    s = <span style=\"color: #a0522d;\">self</span>.split(<span style=\"color: #8b2252;\">\"--\"</span>)
    (s[1] ? s[1] : <span style=\"color: #a0522d;\">self</span>).gsub(<span style=\"color: #8b2252;\">\".ogg\"</span>, <span style=\"color: #8b2252;\">\"\"</span>)
  <span style=\"color: #a020f0;\">end</span>
<span style=\"color: #a020f0;\">end</span>
  
<span style=\"color: #228b22;\">ARGV</span>.each <span style=\"color: #a020f0;\">do</span> |target|
  artist = target.gsub(<span style=\"color: #8b2252;\">\"/\"</span>, <span style=\"color: #8b2252;\">\"\"</span>).naive_title_case
  <span style=\"color: #228b22;\">FileUtils</span>.cd(target) <span style=\"color: #a020f0;\">do</span>
    <span style=\"color: #228b22;\">Dir</span>.entries(<span style=\"color: #8b2252;\">\".\"</span>).find_all{|e| e.end_with? <span style=\"color: #8b2252;\">\".ogg\"</span>}.each <span style=\"color: #a020f0;\">do</span> |file|
      <span style=\"color: #8b2252;\">`vorbiscomment -t 'ARTIST=</span><span style=\"color: #a0522d;\">#{artist}</span><span style=\"color: #8b2252;\">' -t 'TITLE=</span><span style=\"color: #a0522d;\">#{file.strip_song.naive_title_case}</span><span style=\"color: #8b2252;\">' -w </span><span style=\"color: #a0522d;\">#{file}</span><span style=\"color: #8b2252;\">`</span>
    <span style=\"color: #a020f0;\">end</span>
  <span style=\"color: #a020f0;\">end</span>
<span style=\"color: #a020f0;\">end</span></pre>

<pre><span style=\"color: #b22222;\">#</span><span style=\"color: #b22222;\">!/usr/bin/ruby
</span>
require <span style=\"color: #8b2252;\">'optparse'</span>
require <span style=\"color: #8b2252;\">'fileutils'</span>

<span style=\"color: #a0522d;\">$options</span> = {<span style=\"color: #008b8b;\">:sub</span> =&gt; <span style=\"color: #8b2252;\">\"\"</span>, <span style=\"color: #008b8b;\">:downcase</span> =&gt; <span style=\"color: #a0522d;\">nil</span>}
<span style=\"color: #228b22;\">OptionParser</span>.new <span style=\"color: #a020f0;\">do</span> |opts|
  opts.on(<span style=\"color: #8b2252;\">'-r'</span>, <span style=\"color: #8b2252;\">'--regex REGEX'</span>, <span style=\"color: #228b22;\">String</span>, 
          <span style=\"color: #8b2252;\">'Specify the regular expression to replace'</span>) {|reg| <span style=\"color: #a0522d;\">$options</span>[<span style=\"color: #008b8b;\">:regex</span>] = <span style=\"color: #228b22;\">Regexp</span>.new(reg)}
  opts.on(<span style=\"color: #8b2252;\">'-s'</span>, <span style=\"color: #8b2252;\">'--sub SUBSTITUTE'</span>, <span style=\"color: #228b22;\">String</span>, 
          <span style=\"color: #8b2252;\">'Specify what to replace the match with. By default, the empty string (so matches are stripped).'</span>) {|<span style=\"color: #a0522d;\">$options</span>[<span style=\"color: #008b8b;\">:sub</span>]|}
  opts.on(<span style=\"color: #8b2252;\">'-d'</span>, <span style=\"color: #8b2252;\">'--downcase'</span>, <span style=\"color: #8b2252;\">'If passed, all filenames will be downcased.'</span>){|<span style=\"color: #a0522d;\">$options</span>[<span style=\"color: #008b8b;\">:downcase</span>]|}
<span style=\"color: #a020f0;\">end</span>.parse!

usage <span style=\"color: #a020f0;\">unless</span> <span style=\"color: #228b22;\">ARGV</span>.length &gt; 0

<span style=\"color: #a020f0;\">def</span> <span style=\"color: #0000ff;\">rename</span>(str)
  (<span style=\"color: #a0522d;\">$options</span>[<span style=\"color: #008b8b;\">:downcase</span>] ? 
   str.downcase : str).gsub(<span style=\"color: #a0522d;\">$options</span>[<span style=\"color: #008b8b;\">:regex</span>], <span style=\"color: #a0522d;\">$options</span>[<span style=\"color: #008b8b;\">:sub</span>])
<span style=\"color: #a020f0;\">end</span>

<span style=\"color: #228b22;\">ARGV</span>.each <span style=\"color: #a020f0;\">do</span> |target|
  <span style=\"color: #228b22;\">File</span>.rename(target, rename(target))
<span style=\"color: #a020f0;\">end</span></pre>

<p>The first one is a very thin wrapper around <a href=\"http://linuxcommand.org/man_pages/vorbiscomment1.html\"><code>vorbiscomment</code></a> that lets me pass it more than one file at a time and uses my idiosyncratic file storage/naming conventions to infer the title and \"artist\"<a href=\"#foot-Sat-May-26-230331EDT-2012\" name=\"note-Sat-May-26-230331EDT-2012\">[2]</a> of the piece. The second one is just a simple regex application script which lets me format many files at once without going through the mind numbing tedium of one <code>mv</code> call per file<a href=\"#foot-Sat-May-26-230349EDT-2012\" name=\"note-Sat-May-26-230349EDT-2012\">[3]</a>.</p>

<p>What I listen to these days is actually slightly embarrassing. A little while ago, I was working with some friends, obviously enjoying <a href=\"http://www.youtube.com/watch?v=W_utdISM3uk\">some</a> <a href=\"http://www.youtube.com/watch?v=hnCw1zXtaLs\">tunes</a> on my headphones, and pretty much froze when one of them passed a speaker wire. I'm not even sure why; we've been friends for a pretty fucking long time at this point, and I knew that <i>musical preferences</i> would not be the thing to finally drive us apart, but I still hesitated at listening to <a href=\"http://www.youtube.com/watch?v=cP0f5rvVkAU\">some of this shit</a> <i>with another human being</i>.</p>

<p>Not at all sure where that comes from. I guess it's that I used to be a <a href=\"http://en.wikipedia.org/wiki/Nirvana_(band)\">rocker</a> <a href=\"http://www.pearljam.com/\">back</a> in the <a href=\"http://en.wikipedia.org/wiki/Green_Day\">day</a>. The last time I actually bought a related album was <a href=\"http://toolshed.down.net/lyrics/10kdayslyrics.php\">back in 2007</a>. Looking at my current, newly-organized library, it's split about half and half between <a href=\"http://www.youtube.com/watch?v=YsFQ5gUoS0Y\">pony</a>/<a href=\"http://www.youtube.com/watch?v=orpimUSiK8I&ob=av3e\">videogame</a> related electronica and <a href=\"http://www.amazon.com/Essential-Yo-Yo-Ma/dp/B00136Q5XQ\">classical</a> of <a href=\"http://www.youtube.com/watch?v=v7cAd9MXRMg\">some</a> sort, but I honestly didn't notice the change taking place. I'm not even sure if rock is a thing in general anymore, but it's definitely not a thing I listen to. And I guess I wasn't sure whether my friends knew that yet, since we don't tend to talk about it.</p>

<p>It's really odd how the peripheral pieces of my identity are the ones that cause me the most concern. I remember admitting to myself that I was really a programmer/illustrator and not a Graphic Designer, and that didn't have much of an impact on how I behaved. The little things<a href=\"#foot-Sat-May-26-233125EDT-2012\" name=\"note-Sat-May-26-233125EDT-2012\">[4]</a> seem to perturb me a lot more when I notice them. Maybe it has to do with the fact that they tend to change while I'm not paying attention, rather than being an effort of conscious will...</p>


<hr />
<h5>Footnotes</h5>
<p>1 - <a href=\"#note-Sat-May-26-230305EDT-2012\" name=\"foot-Sat-May-26-230305EDT-2012\">[back]</a> - <code>wc -l</code> says <code>deploy.rb</code> was 56, while the actual <code>Makefile</code> clocks in at 20.</p>

<p>2 - <a href=\"#note-Sat-May-26-230331EDT-2012\" name=\"foot-Sat-May-26-230331EDT-2012\">[back]</a> - \"Artist\" is in quotes because I actually use it to group playlists, rather than Artists in the usual sense.</p>

<p>3 - <a href=\"#note-Sat-May-26-230349EDT-2012\" name=\"foot-Sat-May-26-230349EDT-2012\">[back]</a> - Incidentally, you can see what I mean when I call script arguments a hack, right? More than half of each of those scripts is taken up by a huge, verbose, un-abstractable block whose entire reason for existence is making up for the fact that I'm writing a function that I want to be command-line accessible.</p>

<p>4 - <a href=\"#note-Sat-May-26-233125EDT-2012\" name=\"foot-Sat-May-26-233125EDT-2012\">[back]</a> - How I dress, what I listen to and watch, how I wear my hair.</p>
"))
((5202 3723 577551000) :INSERT (82 :POSTED 3546993600))
((5202 3723 577556000) :INSERT (82 :TAG :ERLANG))
((5202 3723 577559000) :INSERT (82 :TAG :IDEA-PEELING))
((5202 3723 577562000) :INSERT (82 :TAG :LANGUAGES))
((5202 3723 577565000) :INSERT (82 :TAG :MAKE))
((5202 3723 577568000) :INSERT (82 :TAG :RUBY))
((5202 3723 579012000) :INSERT (83 :TITLE "Authentication"))
((5202 3723 579023000) :INSERT (83 :FILE "authentication.html"))
((5202 3723 579026000) :INSERT (83 :EDITED 3610299934))
((5202 3723 579027000) :INSERT
 (83 :BODY
  "<p>This is something I've been thinking about a bit lately. Actually, I guess \"thinking about\" is the wrong turn of phrase, since I haven't so much been thinking about as building one. I'll be \"thinking about\" public-key auth and <a href=\"http://wiki.openid.net/w/page/12995226/Run%20your%20own%20identity%20server\">OpenId</a> <a href=\"http://en.wikipedia.org/wiki/OpenID\">next</a>, hopefully, but the first thing I want to put together is an old-style password-based authentication system.</p>

<p>Oh, yeah. And do it <i>properly</i>.</p> 

<p>Which means no Dev 101-level mistakes like storing <a href=\"http://plaintextoffenders.com/\">plaintext passwords</a>, or being subject to <a href=\"http://codereview.stackexchange.com/questions/6632/what-is-the-security-issue-in-this-code/6633#6633\">injection attacks</a>, or putting up with <a href=\"http://amix.dk/blog/post/19425\">login hammering</a>, or <a href=\"http://blogs.cio.com/security/17143/15m-eharmony-passwords-stolen-along-linkedin-data\">leaving off the salt</a>. That's a slight increase in challenge from just \"set up a user system\".</p>

<p>The trivial <code>gen_server</code>-based user system looks something like</p>

<pre><span style=\"color: #7a378b;\">-module</span>(trivial_user).
<span style=\"color: #7a378b;\">-behaviour</span>(gen_server).

<span style=\"color: #7a378b;\">-export</span>([<span style=\"color: #228b22;\">start/0</span>, <span style=\"color: #228b22;\">stop/0</span>]).
<span style=\"color: #7a378b;\">-export</span>([<span style=\"color: #228b22;\">init/1</span>, <span style=\"color: #228b22;\">handle_call/3</span>, <span style=\"color: #228b22;\">handle_cast/2</span>, <span style=\"color: #228b22;\">handle_info/2</span>,
         <span style=\"color: #228b22;\">terminate/2</span>, <span style=\"color: #228b22;\">code_change/3</span>]).

<span style=\"color: #7a378b;\">-record</span>(<span style=\"color: #228b22;\">user</span>,{timestamp, username, password}).

<span style=\"color: #0000ff;\">register</span>(<span style=\"color: #a0522d;\">Username</span>, <span style=\"color: #a0522d;\">Password</span>) -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #228b22;\">gen_server</span>:<span style=\"color: #228b22;\">call</span>(?<span style=\"color: #008b8b;\">MODULE</span>, {register, <span style=\"color: #a0522d;\">Username</span>, <span style=\"color: #a0522d;\">NewPassword</span>}).

<span style=\"color: #0000ff;\">auth</span>(<span style=\"color: #a0522d;\">Username</span>, <span style=\"color: #a0522d;\">Password</span>) -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #228b22;\">gen_server</span>:<span style=\"color: #228b22;\">call</span>(?<span style=\"color: #008b8b;\">MODULE</span>, {auth, <span style=\"color: #a0522d;\">Username</span>, <span style=\"color: #a0522d;\">Password</span>}).

<span style=\"color: #0000ff;\">change_password</span>(<span style=\"color: #a0522d;\">Username</span>, <span style=\"color: #a0522d;\">NewPassword</span>) -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #228b22;\">gen_server</span>:<span style=\"color: #228b22;\">call</span>(?<span style=\"color: #008b8b;\">MODULE</span>, {change_pass, <span style=\"color: #a0522d;\">Username</span>, <span style=\"color: #a0522d;\">NewPassword</span>}).

<span style=\"color: #0000ff;\">exists_p</span>(<span style=\"color: #a0522d;\">Username</span>) -&gt;<span style=\"color: #0000ff;\"> </span>
    <span style=\"color: #a020f0;\">try</span>
        <span style=\"color: #228b22;\">find</span>(<span style=\"color: #a0522d;\">Username</span>)
    <span style=\"color: #a020f0;\">catch</span>
        error:<span style=\"color: #a0522d;\">_</span> -&gt;<span style=\"color: #0000ff;\"> </span>false
    <span style=\"color: #a020f0;\">end</span>.

<span style=\"color: #0000ff;\">handle_call</span>({register, <span style=\"color: #a0522d;\">Username</span>, <span style=\"color: #a0522d;\">Password</span>}, <span style=\"color: #a0522d;\">_From</span>, <span style=\"color: #a0522d;\">State</span>) -&gt;<span style=\"color: #0000ff;\"> </span>
    <span style=\"color: #a0522d;\">Res</span> = <span style=\"color: #a020f0;\">case</span> <span style=\"color: #228b22;\">exists_p</span>(<span style=\"color: #a0522d;\">Username</span>) <span style=\"color: #a020f0;\">of</span>
              false -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #a0522d;\">User</span> = #<span style=\"color: #228b22;\">user</span>{username=<span style=\"color: #a0522d;\">Username</span>, password=<span style=\"color: #a0522d;\">Password</span>, timestamp=<span style=\"color: #7a378b;\">now</span>()},
                       <span style=\"color: #228b22;\">transaction</span>(<span style=\"color: #a020f0;\">fun</span>() -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #228b22;\">mnesia</span>:<span style=\"color: #228b22;\">write</span>(<span style=\"color: #a0522d;\">User</span>) <span style=\"color: #a020f0;\">end</span>);
              <span style=\"color: #a0522d;\">_</span> -&gt;<span style=\"color: #0000ff;\"> </span>already_exists
          <span style=\"color: #a020f0;\">end</span>,
    {reply, <span style=\"color: #a0522d;\">Res</span>, <span style=\"color: #a0522d;\">State</span>};
<span style=\"color: #0000ff;\">handle_call</span>({auth, <span style=\"color: #a0522d;\">Username</span>, <span style=\"color: #a0522d;\">Password</span>}, <span style=\"color: #a0522d;\">_From</span>, <span style=\"color: #a0522d;\">State</span>) -&gt;<span style=\"color: #0000ff;\"> </span>
    <span style=\"color: #a020f0;\">try</span> 
        [<span style=\"color: #a0522d;\">User</span>] = <span style=\"color: #228b22;\">do</span>(<span style=\"color: #228b22;\">qlc</span>:<span style=\"color: #228b22;\">q</span>([<span style=\"color: #a0522d;\">X</span> <span style=\"color: #a020f0;\">||</span> <span style=\"color: #a0522d;\">X</span> <span style=\"color: #a020f0;\">&lt;-</span> <span style=\"color: #228b22;\">mnesia</span>:<span style=\"color: #228b22;\">table</span>(user), 
                                <span style=\"color: #a0522d;\">X</span>#<span style=\"color: #228b22;\">user</span>.username =:= <span style=\"color: #a0522d;\">Name</span>,
                                <span style=\"color: #a0522d;\">X</span>#<span style=\"color: #228b22;\">user</span>.password =:= <span style=\"color: #a0522d;\">Password</span>])),
        {reply, <span style=\"color: #a0522d;\">User</span>, <span style=\"color: #a0522d;\">State</span>}        
    <span style=\"color: #a020f0;\">catch</span>
        error:<span style=\"color: #a0522d;\">_</span> -&gt;<span style=\"color: #0000ff;\"> </span>{reply, false, <span style=\"color: #a0522d;\">State</span>}
    <span style=\"color: #a020f0;\">end</span>;
<span style=\"color: #0000ff;\">handle_call</span>({change_pass, <span style=\"color: #a0522d;\">Username</span>, <span style=\"color: #a0522d;\">NewPassword</span>}, <span style=\"color: #a0522d;\">_From</span>, <span style=\"color: #a0522d;\">State</span>) -&gt;<span style=\"color: #0000ff;\"> </span>
    <span style=\"color: #a0522d;\">Rec</span> = <span style=\"color: #228b22;\">find</span>(<span style=\"color: #a0522d;\">Username</span>),
    {reply, <span style=\"color: #228b22;\">transaction</span>(<span style=\"color: #a020f0;\">fun</span>() -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #228b22;\">mnesia</span>:<span style=\"color: #228b22;\">write</span>(<span style=\"color: #a0522d;\">Rec</span>#<span style=\"color: #228b22;\">user</span>{password=<span style=\"color: #a0522d;\">NewPassword</span>}) <span style=\"color: #a020f0;\">end</span>), <span style=\"color: #a0522d;\">State</span>}.
                       
<span style=\"color: #b22222;\">%%%%%%%%%%%%%%%%%%%% </span><span style=\"color: #b22222;\">database utility
</span><span style=\"color: #0000ff;\">find</span>(<span style=\"color: #a0522d;\">Name</span>) -&gt;<span style=\"color: #0000ff;\"> </span>
    [<span style=\"color: #a0522d;\">Rec</span>] = <span style=\"color: #228b22;\">db</span>:<span style=\"color: #228b22;\">do</span>(<span style=\"color: #228b22;\">qlc</span>:<span style=\"color: #228b22;\">q</span>([<span style=\"color: #a0522d;\">X</span> <span style=\"color: #a020f0;\">||</span> <span style=\"color: #a0522d;\">X</span> <span style=\"color: #a020f0;\">&lt;-</span> <span style=\"color: #228b22;\">mnesia</span>:<span style=\"color: #228b22;\">table</span>(user), <span style=\"color: #a0522d;\">X</span>#<span style=\"color: #228b22;\">user</span>.username =:= <span style=\"color: #a0522d;\">Name</span>])),
    <span style=\"color: #a0522d;\">Rec</span>.
                           
<span style=\"color: #0000ff;\">do</span>(<span style=\"color: #a0522d;\">Q</span>) -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #228b22;\">transaction</span>(<span style=\"color: #a020f0;\">fun</span>() -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #228b22;\">qlc</span>:<span style=\"color: #228b22;\">e</span>(<span style=\"color: #a0522d;\">Q</span>) <span style=\"color: #a020f0;\">end</span>).

<span style=\"color: #0000ff;\">transaction</span>(<span style=\"color: #a0522d;\">F</span>) -&gt;
    {atomic, <span style=\"color: #a0522d;\">Val</span>} = <span style=\"color: #228b22;\">mnesia</span>:<span style=\"color: #228b22;\">transaction</span>(<span style=\"color: #a0522d;\">F</span>),
    <span style=\"color: #a0522d;\">Val</span>.

<span style=\"color: #b22222;\">%%%%%%%%%%%%%%%%%%%% </span><span style=\"color: #b22222;\">generic actions
</span><span style=\"color: #0000ff;\">start</span>() -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #228b22;\">gen_server</span>:<span style=\"color: #228b22;\">start_link</span>({local, ?<span style=\"color: #008b8b;\">MODULE</span>}, ?<span style=\"color: #008b8b;\">MODULE</span>, [], []).
<span style=\"color: #0000ff;\">stop</span>() -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #228b22;\">gen_server</span>:<span style=\"color: #228b22;\">call</span>(?<span style=\"color: #008b8b;\">MODULE</span>, stop).

<span style=\"color: #b22222;\">%%%%%%%%%%%%%%%%%%%% </span><span style=\"color: #b22222;\">gen_server handlers
</span><span style=\"color: #0000ff;\">init</span>([]) -&gt;<span style=\"color: #0000ff;\"> </span>{ok, []}.
<span style=\"color: #0000ff;\">handle_cast</span>(<span style=\"color: #a0522d;\">_Msg</span>, <span style=\"color: #a0522d;\">State</span>) -&gt;<span style=\"color: #0000ff;\"> </span>{noreply, <span style=\"color: #a0522d;\">State</span>}.
<span style=\"color: #0000ff;\">handle_info</span>(<span style=\"color: #a0522d;\">_Info</span>, <span style=\"color: #a0522d;\">State</span>) -&gt;<span style=\"color: #0000ff;\"> </span>{noreply, <span style=\"color: #a0522d;\">State</span>}.
<span style=\"color: #0000ff;\">terminate</span>(<span style=\"color: #a0522d;\">_Reason</span>, <span style=\"color: #a0522d;\">State</span>) -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #a0522d;\">State</span> ! {<span style=\"color: #7a378b;\">self</span>(), close}, ok.
<span style=\"color: #0000ff;\">code_change</span>(<span style=\"color: #a0522d;\">_OldVsn</span>, <span style=\"color: #a0522d;\">State</span>, <span style=\"color: #a0522d;\">_Extra</span>) -&gt;<span style=\"color: #0000ff;\"> </span>{ok, <span style=\"color: #a0522d;\">State</span>}.</pre>

<pre>1&gt; <span style=\"color: #228b22;\">mnesia</span>:<span style=\"color: #228b22;\">create_schema</span>([<span style=\"color: #7a378b;\">node</span>()]).
ok
2&gt; <span style=\"color: #228b22;\">mnesia</span>:<span style=\"color: #228b22;\">start</span>().
ok
3&gt; <span style=\"color: #228b22;\">rd</span>(user,{username, password, timestamp}).
user
4&gt; <span style=\"color: #228b22;\">mnesia</span>:<span style=\"color: #228b22;\">create_table</span>(user, [{type, ordered_set}, {disc_copies, [<span style=\"color: #7a378b;\">node</span>()]}, {attributes, <span style=\"color: #228b22;\">record_info</span>(fields, user)}]).
{atomic,ok}
5&gt; <span style=\"color: #228b22;\">trivial_user</span>:<span style=\"color: #228b22;\">start</span>().
{ok,&lt;0.90.0&gt;}
6&gt; <span style=\"color: #228b22;\">trivial_user</span>:<span style=\"color: #7a378b;\">register</span>(<span style=\"color: #8b2252;\">\"Inaimathi\"</span>, <span style=\"color: #8b2252;\">\"password\"</span>).
ok
7&gt; <span style=\"color: #228b22;\">trivial_user</span>:<span style=\"color: #228b22;\">auth</span>(<span style=\"color: #8b2252;\">\"Inaimathi\"</span>, <span style=\"color: #8b2252;\">\"password\"</span>).
#<span style=\"color: #228b22;\">user</span>{username = <span style=\"color: #8b2252;\">\"Inaimathi\"</span>,password = <span style=\"color: #8b2252;\">\"password\"</span>,
      timestamp = {1339,96410,156774}}</pre>

<p>In pseudocode it's</p>

<pre><span style=\"color: #a020f0;\">def</span> <span style=\"color: #0000ff;\">register</span>(username, password):
    store(username, password, timestamp())

<span style=\"color: #a020f0;\">def</span> <span style=\"color: #0000ff;\">auth</span>(username, entered_password):
    <span style=\"color: #a020f0;\">if</span> user = find(username) <span style=\"color: #a020f0;\">and</span> user.password == entered_password:
        user
    <span style=\"color: #a020f0;\">else</span>:
        false

<span style=\"color: #a020f0;\">def</span> <span style=\"color: #0000ff;\">change_pass</span>(username, new_password):
    store(find(username).password = new_password)</pre>

<p>But that hits most of the rookie mistakes I listed above plus a few more. Incidentally, I <i>will</i> murder you if you use this in production and I find out about it. It doesn't hash or salt passwords, it doesn't rate-limit the <code>auth</code> message, it <i>does</i> get around injection attacks purely through the virtue of being implemented in <a href=\"http://www.erlang.org/doc/man/mnesia.html\">a symbolic db system</a>, but that probably shouldn't count since it's a consequence of the tools rather than the system itself.</p>

<p>Lets work backwards through the pattern, and see how to arrive at a proper-ish user and authentication system. Firstly, it's important that a potential attacker can't just try 10000 passwords per second. Because if they can, and any of your users use common passwords, then it really doesn't matter how well you store them. You can do something naive, like introducing a return delay when an incorrect password is tried.</p>

<pre>...
<span style=\"color: #0000ff;\">handle_call</span>({auth, <span style=\"color: #a0522d;\">Username</span>, <span style=\"color: #a0522d;\">Password</span>}, <span style=\"color: #a0522d;\">_From</span>, <span style=\"color: #a0522d;\">State</span>) -&gt;<span style=\"color: #0000ff;\"> </span>
    <span style=\"color: #a020f0;\">try</span> 
        [<span style=\"color: #a0522d;\">User</span>] = <span style=\"color: #228b22;\">do</span>(<span style=\"color: #228b22;\">qlc</span>:<span style=\"color: #228b22;\">q</span>([<span style=\"color: #a0522d;\">X</span> <span style=\"color: #a020f0;\">||</span> <span style=\"color: #a0522d;\">X</span> <span style=\"color: #a020f0;\">&lt;-</span> <span style=\"color: #228b22;\">mnesia</span>:<span style=\"color: #228b22;\">table</span>(user), 
                                <span style=\"color: #a0522d;\">X</span>#<span style=\"color: #228b22;\">user</span>.username =:= <span style=\"color: #a0522d;\">Username</span>,
                                <span style=\"color: #a0522d;\">X</span>#<span style=\"color: #228b22;\">user</span>.password =:= <span style=\"color: #a0522d;\">Password</span>])),
        {reply, <span style=\"color: #a0522d;\">User</span>, <span style=\"color: #a0522d;\">State</span>}        
    <span style=\"color: #a020f0;\">catch</span>
        error:<span style=\"color: #a0522d;\">_</span> -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #228b22;\">timer</span>:<span style=\"color: #228b22;\">sleep</span>(2000),
                   {reply, false, <span style=\"color: #a0522d;\">State</span>}
    <span style=\"color: #a020f0;\">end</span>;
...</pre>

<p>But that blocks. In other words, whenever anyone enters their password incorrectly, <i>everyone</i> waits for two seconds to interact with the user process. Which, shall we say, doesn't scale. Granted, <i>not</i> doing it this way opens up the possibility that someone could just try 10000 <i>parallel</i> requests for a password, but that seems like a lesser evil than making it ridiculously easy to DOS the system.</p>

<p>There are two essential ways of \"solving\" this problem</p>

<ul>
  <li><b>The stateless</b> way would be to decouple authentication from other user actions. We wouldn't have a single authentication process, rather, when a call to <code>trivial_user:<span style=\"color: #228b22;\">auth/2</span></code> happens, it should launch a temporary process that tries to authenticate that user. If the correct answer is given, there should be no delay, but there <i>should</i> be a small, non-global delay on a wrong guess.</li>
  <li><b>The stateful</b> way would be to track how many wrong guesses have been made for a given user name/IP address. At a certain threshold (or perhaps linearly scaling with the number of wrong guesses), impose some sort of limiting factor. This can be as simple as a delay, or as complex as demanding a recaptcha on the front end.</li>
  <li><b>The ideal</b> way would be to say <a href=\"http://me.veekun.com/blog/2011/12/04/fuck-passwords/\">fuck passwords</a>, collect your users public keys instead, and authenticate them in an actually secure manner. Good luck brute-forcing a 4096 bit RSA key. Then have fun doing it again for every single user. Sadly, this doesn't count as a \"solution\" because most users are pretty sure they leave their public keys under their welcome mat each morning.</li>
</ul>

<p>Given the language I'm working with, that first one looks like it'd fit better. In other words, we remove the <code>auth</code> handler from <code>trivial_user:<span style=\"color: #228b22;\">handle_call/3</span></code></p>

<pre>...
<span style=\"color: #0000ff;\">handle_call</span>({register, <span style=\"color: #a0522d;\">Username</span>, <span style=\"color: #a0522d;\">Password</span>}, <span style=\"color: #a0522d;\">_From</span>, <span style=\"color: #a0522d;\">State</span>) -&gt;<span style=\"color: #0000ff;\"> </span>
    <span style=\"color: #a0522d;\">User</span> = #<span style=\"color: #228b22;\">user</span>{username=<span style=\"color: #a0522d;\">Username</span>, password=<span style=\"color: #a0522d;\">Password</span>, timestamp=<span style=\"color: #7a378b;\">now</span>()},
    {reply, <span style=\"color: #228b22;\">transaction</span>(<span style=\"color: #a020f0;\">fun</span>() -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #228b22;\">mnesia</span>:<span style=\"color: #228b22;\">write</span>(<span style=\"color: #a0522d;\">User</span>) <span style=\"color: #a020f0;\">end</span>), <span style=\"color: #a0522d;\">State</span>};
<span style=\"color: #0000ff;\">handle_call</span>({change_pass, <span style=\"color: #a0522d;\">Username</span>, <span style=\"color: #a0522d;\">NewPassword</span>}, <span style=\"color: #a0522d;\">_From</span>, <span style=\"color: #a0522d;\">State</span>) -&gt;<span style=\"color: #0000ff;\"> </span>
    <span style=\"color: #a0522d;\">Rec</span> = <span style=\"color: #228b22;\">find</span>(<span style=\"color: #a0522d;\">Username</span>),
    {reply, <span style=\"color: #228b22;\">transaction</span>(<span style=\"color: #a020f0;\">fun</span>() -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #228b22;\">mnesia</span>:<span style=\"color: #228b22;\">write</span>(<span style=\"color: #a0522d;\">Rec</span>#<span style=\"color: #228b22;\">user</span>{password=<span style=\"color: #a0522d;\">NewPassword</span>}) <span style=\"color: #a020f0;\">end</span>), <span style=\"color: #a0522d;\">State</span>}.
...</pre>

<p>and have <code>trivial_user:<span style=\"color: #228b22;\">auth/2</span></code> handle the password checking itself in a child process</p>

<pre><span style=\"color: #0000ff;\">auth</span>(<span style=\"color: #a0522d;\">Username</span>, <span style=\"color: #a0522d;\">Password</span>) -&gt;<span style=\"color: #0000ff;\"> </span>
    <span style=\"color: #a0522d;\">Pid</span> = <span style=\"color: #7a378b;\">self</span>(),
    <span style=\"color: #a0522d;\">Auth</span> = <span style=\"color: #a020f0;\">fun</span>() -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #a0522d;\">User</span> = <span style=\"color: #228b22;\">find</span>(<span style=\"color: #a0522d;\">UserName</span>),
                    true = <span style=\"color: #a0522d;\">Password</span> =:= <span style=\"color: #a0522d;\">User</span>#<span style=\"color: #228b22;\">user</span>.password,
                    <span style=\"color: #a0522d;\">Pid</span> ! <span style=\"color: #a0522d;\">User</span>
           <span style=\"color: #a020f0;\">end</span>,
    <span style=\"color: #a0522d;\">AuthProc</span> = <span style=\"color: #7a378b;\">spawn</span>(<span style=\"color: #a0522d;\">Auth</span>),
    <span style=\"color: #a020f0;\">receive</span>
        <span style=\"color: #a0522d;\">Res</span> -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #7a378b;\">exit</span>(<span style=\"color: #a0522d;\">AuthProc</span>, thank_you),
               <span style=\"color: #a0522d;\">Res</span>
    <span style=\"color: #a020f0;\">after</span> 2000 -&gt;
            false
    <span style=\"color: #a020f0;\">end</span>.</pre>

<p>Do note the use of offensive programming in the <code>Auth</code> function. We don't do any kind of cleanup if the password is incorrect, just let <code>AuthProc</code> die a horrible, error-induced death and move on with our lives. We do stop waiting for it after two seconds, which is incidentally the delay we wanted to introduce for a wrong entry. Instead of being able to naively try 10000 passwords per second, our theoretical attackers can now try one every ~2, which should make this auth process a slightly harder target.</p>

<span class=\"edit\">EDIT:
It's been pointed out to me that using SHA2 is a pretty bad approach here. I was initially going to tear this article apart for an edit (which is why it took so long), but ultimately decided to handle it in <a href=\"/article?name=authentication-part-5.75.html\">an addendum</a>. The below is here for historical interest only; kids, use specialized password-storing hash algorithms and stay in school.

Fri, 16 Nov, 2012</span>

<p>Next up, we're still storing user passwords as plaintext, which is less than ideal. That means that anyone who succeeds in getting at our data somehow can suddenly impersonate anyone in the system flawlessly. That's why we have to hash them. Now, there are <a href=\"http://stackoverflow.com/questions/955161/sha256-encryption-in-erlang\">hashing libraries</a> in Erlang, including the built-in <a href=\"http://www.erlang.org/doc/man/crypto.html\">crypto</a> parts of which we'll be using, but.</p>

<p>1. <a href=\"http://en.wikipedia.org/wiki/Hash_function\">Hash functions</a> are tricky to pick, even before you get into <a href=\"http://en.wikipedia.org/wiki/Cryptographic_hash_function#Cryptographic_hash_algorithms\">cryptographic hash functions</a>. In fact, there are a couple of widely-used ones<a href=\"#foot-Sat-Jun-09-121258EDT-2012\" name=\"note-Sat-Jun-09-121258EDT-2012\">[1]</a> that have been subject to successful attacks. Given that, I'm leaning towards the <a href=\"http://en.wikipedia.org/wiki/SHA-2\">SHA-2 algorithms</a> which, as of this writing, have not been successfully broken. <b>DO NOT</b> read that as \"I should use SHA256 from now on\". Read it instead as \"Before deciding on a hash function, I should check which ones are difficult to break at the time I'm making the decision\". That complicates things somewhat, because Erlang's <code>crypto</code> only supports MD5 and SHA-1<a href=\"#foot-Sat-Jun-09-121448EDT-2012\" name=\"note-Sat-Jun-09-121448EDT-2012\">[2]</a>, installing the Erlang SHA256 library seems to be more than trivially difficult, and even if it wasn't</p>

<p>2. Cryptographic functions are tricky to <a href=\"http://en.wikipedia.org/wiki/SHA-2#Examples_of_SHA-2_variants\">implement</a>. By all means, try to as a <a href=\"http://www.youtube.com/watch?v=IzVCrSrZIX8&feature=bf_prev&list=PL9385DDE1A7699AB0&index=1\">learning experience</a>, but there are <a href=\"http://en.wikipedia.org/wiki/Side_channel_attack\">non</a>-obvious <a href=\"http://en.wikipedia.org/wiki/Category:Cryptographic_attacks\">attacks</a> that you can leave your implementation open to, even if you do put everything together properly. The rule is \"<b>do NOT</b> roll your own\". By extension, \"<b>do NOT</b> use a crypto library written by someone merely <i>as</i> smart as you\", and \"<b>do NOT</b> use a crypto library that hasn't been extensively battle tested\". In fact, this is the one place where I'd say going with the herd<a href=\"#foot-Sat-Jun-09-121538EDT-2012\" name=\"note-Sat-Jun-09-121538EDT-2012\">[3]</a> is the right thing to do. <a href=\"https://github.com/vinoski/erlsha2\">68 watchers</a> (myself included) isn't quite enough to make me confident that all the bugs and attacks have been shaken out of the implementation.</p>

<p>So, for those borderline-excuse reasons (and also because I want to show how to do it), we'll be using <a href=\"http://docs.python.org/library/hashlib.html\">Python's <code>hashlib</code></a> with <a href=\"http://erlport.org/\"><code>erlport</code></a>. It sounds scary, but it <i>is</i> trivial. Once you install <code>erlport</code> (which is available through <a href=\"http://pypi.python.org/pypi/setuptools\"><code>setuptools</code></a>), you just kind of...</p>

<pre><span style=\"color: #7a378b;\">-module</span>(sha256).
<span style=\"color: #7a378b;\">-behaviour</span>(gen_server).

<span style=\"color: #7a378b;\">-export</span>([<span style=\"color: #228b22;\">start/0</span>, <span style=\"color: #228b22;\">stop/0</span>]).
<span style=\"color: #7a378b;\">-export</span>([<span style=\"color: #228b22;\">init/1</span>, <span style=\"color: #228b22;\">handle_call/3</span>, <span style=\"color: #228b22;\">handle_cast/2</span>, <span style=\"color: #228b22;\">handle_info/2</span>,
         <span style=\"color: #228b22;\">terminate/2</span>, <span style=\"color: #228b22;\">code_change/3</span>]).

<span style=\"color: #7a378b;\">-export</span>([<span style=\"color: #228b22;\">encode/1</span>]).

<span style=\"color: #0000ff;\">encode</span>(<span style=\"color: #a0522d;\">String</span>) -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #228b22;\">gen_server</span>:<span style=\"color: #228b22;\">call</span>(?<span style=\"color: #008b8b;\">MODULE</span>, {encode, <span style=\"color: #a0522d;\">String</span>}).

<span style=\"color: #0000ff;\">handle_call</span>({<span style=\"color: #8b2252;\">'EXIT'</span>, <span style=\"color: #a0522d;\">_Port</span>, <span style=\"color: #a0522d;\">Reason</span>}, <span style=\"color: #a0522d;\">_From</span>, <span style=\"color: #a0522d;\">_State</span>) -&gt;
    <span style=\"color: #7a378b;\">exit</span>({port_terminated, <span style=\"color: #a0522d;\">Reason</span>});
<span style=\"color: #0000ff;\">handle_call</span>(<span style=\"color: #a0522d;\">Message</span>, <span style=\"color: #a0522d;\">_From</span>, <span style=\"color: #a0522d;\">Port</span>) -&gt;
    <span style=\"color: #7a378b;\">port_command</span>(<span style=\"color: #a0522d;\">Port</span>, <span style=\"color: #7a378b;\">term_to_binary</span>(<span style=\"color: #a0522d;\">Message</span>)),
    <span style=\"color: #a020f0;\">receive</span>
        {<span style=\"color: #a0522d;\">State</span>, {data, <span style=\"color: #a0522d;\">Data</span>}} -&gt;<span style=\"color: #0000ff;\"> </span>
            {reply, <span style=\"color: #7a378b;\">binary_to_term</span>(<span style=\"color: #a0522d;\">Data</span>), <span style=\"color: #a0522d;\">State</span>}
    <span style=\"color: #a020f0;\">after</span> 6000 -&gt;<span style=\"color: #0000ff;\"> </span>
            <span style=\"color: #7a378b;\">exit</span>(timeout)
    <span style=\"color: #a020f0;\">end</span>.

<span style=\"color: #b22222;\">%%%%%%%%%%%%%%%%%%%% </span><span style=\"color: #b22222;\">generic actions
</span><span style=\"color: #0000ff;\">start</span>() -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #228b22;\">gen_server</span>:<span style=\"color: #228b22;\">start_link</span>({local, ?<span style=\"color: #008b8b;\">MODULE</span>}, ?<span style=\"color: #008b8b;\">MODULE</span>, [], []).
<span style=\"color: #0000ff;\">stop</span>() -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #228b22;\">gen_server</span>:<span style=\"color: #228b22;\">call</span>(?<span style=\"color: #008b8b;\">MODULE</span>, stop).

<span style=\"color: #b22222;\">%%%%%%%%%%%%%%%%%%%% </span><span style=\"color: #b22222;\">gen_server handlers
</span><span style=\"color: #0000ff;\">init</span>([]) -&gt;<span style=\"color: #0000ff;\"> </span>{ok, <span style=\"color: #7a378b;\">open_port</span>({spawn, <span style=\"color: #8b2252;\">\"python -u sha256.py\"</span>}, [{packet, 4}, binary, use_stdio])}.
<span style=\"color: #0000ff;\">handle_cast</span>(<span style=\"color: #a0522d;\">_Msg</span>, <span style=\"color: #a0522d;\">State</span>) -&gt;<span style=\"color: #0000ff;\"> </span>{noreply, <span style=\"color: #a0522d;\">State</span>}.
<span style=\"color: #0000ff;\">handle_info</span>(<span style=\"color: #a0522d;\">_Info</span>, <span style=\"color: #a0522d;\">State</span>) -&gt;<span style=\"color: #0000ff;\"> </span>{noreply, <span style=\"color: #a0522d;\">State</span>}.
<span style=\"color: #0000ff;\">terminate</span>(<span style=\"color: #a0522d;\">_Reason</span>, <span style=\"color: #a0522d;\">State</span>) -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #a0522d;\">State</span> ! {<span style=\"color: #7a378b;\">self</span>(), close}, ok.
<span style=\"color: #0000ff;\">code_change</span>(<span style=\"color: #a0522d;\">_OldVsn</span>, <span style=\"color: #a0522d;\">State</span>, <span style=\"color: #a0522d;\">_Extra</span>) -&gt;<span style=\"color: #0000ff;\"> </span>{ok, <span style=\"color: #a0522d;\">State</span>}.</pre>

<pre><span style=\"color: #b22222;\">## sha256.py
</span><span style=\"color: #a020f0;\">from</span> erlport <span style=\"color: #a020f0;\">import</span> Port, Protocol, String
<span style=\"color: #a020f0;\">import</span> hashlib

<span style=\"color: #a020f0;\">class</span> <span style=\"color: #228b22;\">Sha256Protocol</span>(Protocol):
    <span style=\"color: #a020f0;\">def</span> <span style=\"color: #0000ff;\">handle_encode</span>(<span style=\"color: #a020f0;\">self</span>, message):
        <span style=\"color: #a020f0;\">return</span> hashlib.sha256(<span style=\"color: #7a378b;\">unicode</span>(message)).hexdigest()

<span style=\"color: #a020f0;\">if</span> <span style=\"color: #7a378b;\">__name__</span> == <span style=\"color: #8b2252;\">\"__main__\"</span>:
    Sha256Protocol().run(Port(packet=4, use_stdio=<span style=\"color: #a020f0;\">True</span>))</pre>

<p>Incidentally, you probably see why I decided to write myself a <a href=\"https://github.com/Inaimathi/emacs-utils/blob/master/erl-custom.el\">quickie templating library</a> for Erlang modules. Not to bust out the <a href=\"http://c2.com/cgi/wiki?SmugLispWeenie\">SLW</a> here, but in Lisp, I would handle the same problem with one <code>defmacro</code>, and thereafter be calling the resulting <code>(<span style=\"color: #a020f0;\">define-gen-server</span> handle-call <span style=\"color: #228b22;\">&amp;key</span> (start (gen-server:start-link `(local ,*module*) *module nil nil)) (stop...) ...)</code>. But hey, relying on your editor to do shit that should be handled in the language seems to be <a href=\"http://www.tiobe.com/index.php/content/paperinfo/tpci/index.html\">serving ~67% of the programming world</a> just fine, so whatever the fuck.</p>

<p>Ahem.</p>

<p>What you see above is the trivial string hashing implementation. Writing it took me somewhat less effort than learning <a href=\"https://github.com/basho/rebar\">how to use rebar</a><a href=\"#foot-Sat-Jun-09-121653EDT-2012\" name=\"note-Sat-Jun-09-121653EDT-2012\">[4]</a>, and I now get to call <code><span style=\"color: #228b22;\">sha256</span>:<span style=\"color: #228b22;\">encode</span>(<span style=\"color: #8b2252;\">\"Something something\"</span>).</code> with reasonable confidence that a very large number of people smarter than me have failed to find errors in the code doing the work for me. Now that we've got that, we need to modify two things in the <code>trivial_user</code> module. First, we need to store the hashed password, both when registering and changing</p>

<pre>...

<span style=\"color: #0000ff;\">handle_call</span>({register, <span style=\"color: #a0522d;\">Username</span>, <span style=\"color: #a0522d;\">Password</span>}, <span style=\"color: #a0522d;\">_From</span>, <span style=\"color: #a0522d;\">State</span>) -&gt;<span style=\"color: #0000ff;\"> </span>
    false = <span style=\"color: #228b22;\">exists_p</span>(<span style=\"color: #a0522d;\">Username</span>),
    <span style=\"color: #a0522d;\">User</span> = #<span style=\"color: #228b22;\">user</span>{username=<span style=\"color: #a0522d;\">Username</span>, password=<span style=\"color: #228b22;\">sha256</span>:<span style=\"color: #228b22;\">encode</span>(<span style=\"color: #a0522d;\">Password</span>), timestamp=<span style=\"color: #7a378b;\">now</span>()},
    {reply, <span style=\"color: #228b22;\">transaction</span>(<span style=\"color: #a020f0;\">fun</span>() -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #228b22;\">mnesia</span>:<span style=\"color: #228b22;\">write</span>(<span style=\"color: #a0522d;\">User</span>) <span style=\"color: #a020f0;\">end</span>), <span style=\"color: #a0522d;\">State</span>};
<span style=\"color: #0000ff;\">handle_call</span>({change_pass, <span style=\"color: #a0522d;\">Username</span>, <span style=\"color: #a0522d;\">NewPassword</span>}, <span style=\"color: #a0522d;\">_From</span>, <span style=\"color: #a0522d;\">State</span>) -&gt;<span style=\"color: #0000ff;\"> </span>
    <span style=\"color: #a0522d;\">User</span> = <span style=\"color: #228b22;\">find</span>(<span style=\"color: #a0522d;\">Username</span>),
    {reply, <span style=\"color: #228b22;\">transaction</span>(<span style=\"color: #a020f0;\">fun</span>() -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #228b22;\">mnesia</span>:<span style=\"color: #228b22;\">write</span>(<span style=\"color: #a0522d;\">User</span>#<span style=\"color: #228b22;\">user</span>{password=<span style=\"color: #228b22;\">sha256</span>:<span style=\"color: #228b22;\">encode</span>(<span style=\"color: #a0522d;\">NewPassword</span>)}) <span style=\"color: #a020f0;\">end</span>), <span style=\"color: #a0522d;\">State</span>}.

...
</pre>

<p>And second, when authenticating, we need to hash the input before comparing a password with what we've got stored</p>

<pre>...

<span style=\"color: #0000ff;\">auth</span>(<span style=\"color: #a0522d;\">Username</span>, <span style=\"color: #a0522d;\">Password</span>) -&gt;<span style=\"color: #0000ff;\"> </span>
    <span style=\"color: #a0522d;\">Pid</span> = <span style=\"color: #7a378b;\">self</span>(),
    <span style=\"color: #a0522d;\">Auth</span> = <span style=\"color: #a020f0;\">fun</span>() -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #a0522d;\">User</span> = <span style=\"color: #228b22;\">find</span>(<span style=\"color: #a0522d;\">UserName</span>),
                    true = <span style=\"color: #228b22;\">sha256</span>(<span style=\"color: #a0522d;\">Password</span>) =:= <span style=\"color: #a0522d;\">User</span>#<span style=\"color: #228b22;\">user</span>.password,
                    <span style=\"color: #a0522d;\">Pid</span> ! <span style=\"color: #a0522d;\">User</span>
           <span style=\"color: #a020f0;\">end</span>,
    <span style=\"color: #a0522d;\">AuthProc</span> = <span style=\"color: #7a378b;\">spawn</span>(<span style=\"color: #a0522d;\">Auth</span>),
    <span style=\"color: #a020f0;\">receive</span>
        <span style=\"color: #a0522d;\">Res</span> -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #7a378b;\">exit</span>(<span style=\"color: #a0522d;\">AuthProc</span>, thank_you),
               <span style=\"color: #a0522d;\">Res</span>
    <span style=\"color: #a020f0;\">after</span> 2000 -&gt;<span style=\"color: #0000ff;\"> </span>
            false
    <span style=\"color: #a020f0;\">end</span>.

...</pre>

<p>There. Now, if some ne'er-do-well manages to get a hold of our password database somehow, he won't be looking at</p>

<pre>[{<span style=\"color: #8b2252;\">\"John Douchebag\"</span>,      <span style=\"color: #8b2252;\">\"P@ssword123\"</span>},
 {<span style=\"color: #8b2252;\">\"Jane Douchebag\"</span>,      <span style=\"color: #8b2252;\">\"P@ssword123\"</span>},
 {<span style=\"color: #8b2252;\">\"Dave Foobar\"</span>,         <span style=\"color: #8b2252;\">\"P@ssword123\"</span>},
 {<span style=\"color: #8b2252;\">\"Alex Nutsack\"</span>,        <span style=\"color: #8b2252;\">\"P@ssword231\"</span>},
 {<span style=\"color: #8b2252;\">\"Brian Skidmore\"</span>,      <span style=\"color: #8b2252;\">\"P@ssword123\"</span>},
 {<span style=\"color: #8b2252;\">\"Rose Cox\"</span>,            <span style=\"color: #8b2252;\">\"P@ssword123\"</span>},
 {<span style=\"color: #8b2252;\">\"Barbara Lastname\"</span>,    <span style=\"color: #8b2252;\">\"P@ssword123\"</span>},
 {<span style=\"color: #8b2252;\">\"Dora Smartass\"</span>,       <span style=\"color: #8b2252;\">\"correcthorsebatterystaple\"</span>} 
 ...]</pre>

<p>he'll instead be looking at</p>

<pre>[{<span style=\"color: #8b2252;\">\"John Douchebag\"</span>,      <span style=\"color: #8b2252;\">\"62a39df87b501ad40b6fc145820756ccedcab952c64626968e83ccbae5beae63\"</span>},
 {<span style=\"color: #8b2252;\">\"Jane Douchebag\"</span>,      <span style=\"color: #8b2252;\">\"62a39df87b501ad40b6fc145820756ccedcab952c64626968e83ccbae5beae63\"</span>},
 {<span style=\"color: #8b2252;\">\"Dave Foobar\"</span>,         <span style=\"color: #8b2252;\">\"62a39df87b501ad40b6fc145820756ccedcab952c64626968e83ccbae5beae63\"</span>},
 {<span style=\"color: #8b2252;\">\"Alex Nutsack\"</span>,        <span style=\"color: #8b2252;\">\"a52c4ef2c82e00025191375eadfea1e28b6389ab6091f1ab66e7549d1edef2f3\"</span>},
 {<span style=\"color: #8b2252;\">\"Brian Skidmore\"</span>,      <span style=\"color: #8b2252;\">\"62a39df87b501ad40b6fc145820756ccedcab952c64626968e83ccbae5beae63\"</span>},
 {<span style=\"color: #8b2252;\">\"Rose Cox\"</span>,            <span style=\"color: #8b2252;\">\"62a39df87b501ad40b6fc145820756ccedcab952c64626968e83ccbae5beae63\"</span>},
 {<span style=\"color: #8b2252;\">\"Barbara Lastname\"</span>,    <span style=\"color: #8b2252;\">\"62a39df87b501ad40b6fc145820756ccedcab952c64626968e83ccbae5beae63\"</span>},
 {<span style=\"color: #8b2252;\">\"Dora Smartass\"</span>,       <span style=\"color: #8b2252;\">\"cbe6beb26479b568e5f15b50217c6c83c0ee051dc4e522b9840d8e291d6aaf46\"</span>} 
 ...]</pre>

<p>And that should illustrate exactly why salt is an important thing to use. You'll notice that the same string always hashes to the same output. That's good, because that means we have a simple way to compare passwords later. But. If a lot of your users use the same password (and while this is an exaggerated example, you would be very <a href=\"http://www.tomshardware.com/news/imperva-rockyou-most-common-passwords,9486.html\">surprised at how many people pick worse</a> on a regular basis), then someone who guesses what hash algorithm you're using can easily run a <a href=\"http://en.wikipedia.org/wiki/Rainbow_table\">rainbow table</a> against the hashes they found to guess large chunks of the plaintexts.</p>

<p>That is not good. And it's precisely the problem that salt is meant to solve. The important part of a salt is that <a href=\"http://security.stackexchange.com/questions/11221/how-big-salt-should-be\">it's unique</a>. Some people like it to be cryptographically secure, but I don't think it has to be. You're trying to avoid the situation where cracking one password gets your attacker access to more than one account. Do note that \"unique\" means \"really, truly, globally unique\". As in, don't just set a padded counter starting from 1, because different instances of your system will have some identical salt values. Also, obviously, don't just use a single salt value per server because that would defeat the purpose entirely. It needs to be different per secret, which means we need to change it out when a user changes their password too<a href=\"#foot-Sat-Jun-09-122057EDT-2012\" name=\"note-Sat-Jun-09-122057EDT-2012\">[5]</a>.</p>

<p>Just to drive the point home, if you use a single salt-value per user, the hashes above will look like</p>

<pre>[{<span style=\"color: #8b2252;\">\"John Douchebag\"</span>,      <span style=\"color: #8b2252;\">\"a26d44677573d3dfdfe116dc46979ce7ff00d9877a05d59158e74d2cf955400c\"</span>},
 {<span style=\"color: #8b2252;\">\"Jane Douchebag\"</span>,      <span style=\"color: #8b2252;\">\"a26d44677573d3dfdfe116dc46979ce7ff00d9877a05d59158e74d2cf955400c\"</span>},
 {<span style=\"color: #8b2252;\">\"Dave Foobar\"</span>,         <span style=\"color: #8b2252;\">\"a26d44677573d3dfdfe116dc46979ce7ff00d9877a05d59158e74d2cf955400c\"</span>},
 {<span style=\"color: #8b2252;\">\"Alex Nutsack\"</span>,        <span style=\"color: #8b2252;\">\"0f751ddd05eb211a8300254701dce2ea045805e39113a821a10adf747243fc27\"</span>},
 {<span style=\"color: #8b2252;\">\"Brian Skidmore\"</span>,      <span style=\"color: #8b2252;\">\"a26d44677573d3dfdfe116dc46979ce7ff00d9877a05d59158e74d2cf955400c\"</span>},
 {<span style=\"color: #8b2252;\">\"Rose Cox\"</span>,            <span style=\"color: #8b2252;\">\"a26d44677573d3dfdfe116dc46979ce7ff00d9877a05d59158e74d2cf955400c\"</span>},
 {<span style=\"color: #8b2252;\">\"Barbara Lastname\"</span>,    <span style=\"color: #8b2252;\">\"a26d44677573d3dfdfe116dc46979ce7ff00d9877a05d59158e74d2cf955400c\"</span>},
 {<span style=\"color: #8b2252;\">\"Dora Smartass\"</span>,       <span style=\"color: #8b2252;\">\"fc5edff6668c8678f4c242cdea531cfd8883add17072e7ff1db76ea21952504b\"</span>} 
 ...]</pre>

<p>It means that it's slightly harder to crack one of your passwords<a href=\"#foot-Sat-Jun-09-122106EDT-2012\" name=\"note-Sat-Jun-09-122106EDT-2012\">[6]</a>, but <i>if</i> a password is cracked, your attacker still has the benefit of compromising the complete set of users that have that same password.</p>

<p>The absolute simplest, most brain-dead way to generate salt is to run an operation per password that looks something like</p>

<pre><span style=\"color: #0000ff;\">make_salt</span>() -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #7a378b;\">binary_to_list</span>(<span style=\"color: #228b22;\">crypto</span>:<span style=\"color: #228b22;\">rand_bytes</span>(32)).</pre>

<p>Tadaah.<a href=\"#foot-Sat-Jun-09-122134EDT-2012\" name=\"note-Sat-Jun-09-122134EDT-2012\">[7]</a></p>

<p>And that may actually be going overboard by about 16 bytes. Calling <code><span style=\"color: #228b22;\">make_salt/0</span></code> will return something like <code>[239,97,166,69,1,8,19,68,253,82,111,74,152,123,103,164,209,44,92,246,177,60,38,201,107,116,72,219,82,204,49]</code>, which we then concatenate with a password in order to make the world a slightly better place for people who use passwords like <code>P@ssword123</code>.</p>

<p>On reflection, this may not be a good thing, but it does make our user system one increment better. We now need to store salt for each user, and use it in our hashing step when comparing and storing passwords. So.</p>

<pre><span style=\"color: #0000ff;\">salt</span>(<span style=\"color: #a0522d;\">Salt</span>, <span style=\"color: #a0522d;\">String</span>) -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #228b22;\">sha256</span>:<span style=\"color: #228b22;\">encode</span>(<span style=\"color: #228b22;\">lists</span>:<span style=\"color: #228b22;\">append</span>(<span style=\"color: #a0522d;\">Salt</span>, <span style=\"color: #a0522d;\">String</span>)).

...
<span style=\"color: #0000ff;\">auth</span>(<span style=\"color: #a0522d;\">Username</span>, <span style=\"color: #a0522d;\">Password</span>) -&gt;<span style=\"color: #0000ff;\"> </span>
    <span style=\"color: #a0522d;\">Pid</span> = <span style=\"color: #7a378b;\">self</span>(),
    <span style=\"color: #a0522d;\">Auth</span> = <span style=\"color: #a020f0;\">fun</span>() -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #a0522d;\">User</span> = <span style=\"color: #228b22;\">find</span>(<span style=\"color: #a0522d;\">Username</span>),
                    true = <span style=\"color: #228b22;\">salt</span>(<span style=\"color: #a0522d;\">User</span>#<span style=\"color: #228b22;\">user</span>.salt, <span style=\"color: #a0522d;\">Password</span>) =:= <span style=\"color: #a0522d;\">User</span>#<span style=\"color: #228b22;\">user</span>.password,
                    <span style=\"color: #a0522d;\">Pid</span> ! <span style=\"color: #a0522d;\">User</span>
           <span style=\"color: #a020f0;\">end</span>,
    <span style=\"color: #a0522d;\">AuthProc</span> = <span style=\"color: #7a378b;\">spawn</span>(<span style=\"color: #a0522d;\">Auth</span>),
    <span style=\"color: #a020f0;\">receive</span>
        <span style=\"color: #a0522d;\">User</span> -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #7a378b;\">exit</span>(<span style=\"color: #a0522d;\">AuthProc</span>, thank_you),
                {<span style=\"color: #a0522d;\">User</span>#<span style=\"color: #228b22;\">user</span>.username, <span style=\"color: #a0522d;\">User</span>#<span style=\"color: #228b22;\">user</span>.timestamp}
    <span style=\"color: #a020f0;\">after</span> 2000 -&gt;<span style=\"color: #0000ff;\"> </span>
            false
    <span style=\"color: #a020f0;\">end</span>.
...

...
<span style=\"color: #0000ff;\">handle_call</span>({register, <span style=\"color: #a0522d;\">Username</span>, <span style=\"color: #a0522d;\">Password</span>}, <span style=\"color: #a0522d;\">_From</span>, <span style=\"color: #a0522d;\">State</span>) -&gt;<span style=\"color: #0000ff;\"> </span>
    false = <span style=\"color: #228b22;\">exists_p</span>(<span style=\"color: #a0522d;\">Username</span>),
    <span style=\"color: #a0522d;\">Salt</span> = <span style=\"color: #228b22;\">make_salt</span>(),
    <span style=\"color: #a0522d;\">User</span> = #<span style=\"color: #228b22;\">user</span>{username=<span style=\"color: #a0522d;\">Username</span>, password=<span style=\"color: #228b22;\">salt</span>(<span style=\"color: #a0522d;\">Salt</span>, <span style=\"color: #a0522d;\">Password</span>), salt=<span style=\"color: #a0522d;\">Salt</span>, timestamp=<span style=\"color: #7a378b;\">now</span>()},
    {reply, <span style=\"color: #228b22;\">transaction</span>(<span style=\"color: #a020f0;\">fun</span>() -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #228b22;\">mnesia</span>:<span style=\"color: #228b22;\">write</span>(<span style=\"color: #a0522d;\">User</span>) <span style=\"color: #a020f0;\">end</span>), <span style=\"color: #a0522d;\">State</span>};
<span style=\"color: #0000ff;\">handle_call</span>({change_pass, <span style=\"color: #a0522d;\">Username</span>, <span style=\"color: #a0522d;\">NewPassword</span>}, <span style=\"color: #a0522d;\">_From</span>, <span style=\"color: #a0522d;\">State</span>) -&gt;<span style=\"color: #0000ff;\"> </span>
    <span style=\"color: #a0522d;\">User</span> = <span style=\"color: #228b22;\">find</span>(<span style=\"color: #a0522d;\">Username</span>),
    <span style=\"color: #a0522d;\">Salt</span> = <span style=\"color: #228b22;\">make_salt</span>(),
    {reply, <span style=\"color: #228b22;\">transaction</span>(<span style=\"color: #a020f0;\">fun</span>() -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #228b22;\">mnesia</span>:<span style=\"color: #228b22;\">write</span>(<span style=\"color: #a0522d;\">User</span>#<span style=\"color: #228b22;\">user</span>{password=<span style=\"color: #228b22;\">salt</span>(<span style=\"color: #a0522d;\">Salt</span>, <span style=\"color: #a0522d;\">NewPassword</span>), salt=<span style=\"color: #a0522d;\">Salt</span>}) <span style=\"color: #a020f0;\">end</span>), <span style=\"color: #a0522d;\">State</span>}.
...</pre>

<p>Now that we have effective, per-password salt going, that potentially leaked table looks a bit different.</p>

<pre>[{<span style=\"color: #8b2252;\">\"John Douchebag\"</span>,
  [218,207,128,49,205,116,234,236,67,27,74,144,22,45,219,251,
   58,82,240,14,233,252,56,105,28,112|...],
  &lt;&lt;<span style=\"color: #8b2252;\">\"a0366db583c76fd81901e57f69b4f2f67b9ab779ae76e5ff3ce8c82fdc21b1ea\"</span>&gt;&gt;},
 {<span style=\"color: #8b2252;\">\"Jane Douchebag\"</span>,
  [141,235,133,13,140,199,19,158,169,8,188,147,25,247,31,62,
   112,41,175,243,68,139,130,236,112|...],
  &lt;&lt;<span style=\"color: #8b2252;\">\"b6dd5d87a80e166dea1b1959526f544b3d9da3818e178fe82e7571c30ea32077\"</span>&gt;&gt;},
 {<span style=\"color: #8b2252;\">\"Dave Foobar\"</span>,
  [248,80,49,63,241,204,182,120,53,181,84,5,51,142,34,240,187,
   76,115,55,29,207,149,93|...],
  &lt;&lt;<span style=\"color: #8b2252;\">\"6442397fd432fa1fa05d96e2db08c3ea4b840ecddf9b3bcf1f0904ec95a2e7cf\"</span>&gt;&gt;},
 {<span style=\"color: #8b2252;\">\"Alex Nutsack\"</span>,
  [255,116,72,208,37,69,135,169,131,253,115,135,39,54,14,118,
   216,35,92,157,183,96,87|...],
  &lt;&lt;<span style=\"color: #8b2252;\">\"6a966e1362d27851fac8e5ed44cff1eb7f3b15035d86e20438e228a2b8441a5e\"</span>&gt;&gt;},
 {<span style=\"color: #8b2252;\">\"Brian Skidmore\"</span>,
  [149,22,172,0,14,45,14,228,19,66,214,170,87,238,39,126,65,
   229,118,44,49,18|...],
  &lt;&lt;<span style=\"color: #8b2252;\">\"da65f803390a3886915c84adf444324c2d90396f6fcfc9a97900d14ed4ffc264\"</span>&gt;&gt;},
 {<span style=\"color: #8b2252;\">\"Rose Cox\"</span>,
  [67,22,142,129,118,7,112,66,187,180,201,168,244,132,118,170,
   56,250,127,132,189|...],
  &lt;&lt;<span style=\"color: #8b2252;\">\"67235dfae2f44bf68101b67773e2512193383a6d7e965cc423056ad750ab5806\"</span>&gt;&gt;},
 {<span style=\"color: #8b2252;\">\"Barbara Lastname\"</span>,
  [214,17,61,189,60,148,2,168,65,140,87,224,216,40,14,132,129,
   145,238,153|...],
  &lt;&lt;<span style=\"color: #8b2252;\">\"669b6876ad2cd40b857bd8b0ff67d49df2133498bb7b6a8fd8bbe764889f9c1b\"</span>&gt;&gt;},
 {<span style=\"color: #8b2252;\">\"Dora Smartass\"</span>,
  [191,211,52,128,89,167,168,177,221,238,21,94,121,15,20,22,
   144,11,235|...],
  &lt;&lt;<span style=\"color: #8b2252;\">\"bdec4a9e62d5f03651720903d2001d82a3167aefd43bc22741c482b98f83ad43\"</span>&gt;&gt;}
 ...]</pre>

<p>Even if the attacker gets each user's salt as in the above example, check out the password hashes.</p>

<pre><span style=\"color: #8b2252;\">\"a0366db583c76fd81901e57f69b4f2f67b9ab779ae76e5ff3ce8c82fdc21b1ea\"</span>,
<span style=\"color: #8b2252;\">\"b6dd5d87a80e166dea1b1959526f544b3d9da3818e178fe82e7571c30ea32077\"</span>,
<span style=\"color: #8b2252;\">\"6442397fd432fa1fa05d96e2db08c3ea4b840ecddf9b3bcf1f0904ec95a2e7cf\"</span>,
<span style=\"color: #8b2252;\">\"6a966e1362d27851fac8e5ed44cff1eb7f3b15035d86e20438e228a2b8441a5e\"</span>,
<span style=\"color: #8b2252;\">\"da65f803390a3886915c84adf444324c2d90396f6fcfc9a97900d14ed4ffc264\"</span>,
<span style=\"color: #8b2252;\">\"67235dfae2f44bf68101b67773e2512193383a6d7e965cc423056ad750ab5806\"</span>,
<span style=\"color: #8b2252;\">\"669b6876ad2cd40b857bd8b0ff67d49df2133498bb7b6a8fd8bbe764889f9c1b\"</span>,
<span style=\"color: #8b2252;\">\"bdec4a9e62d5f03651720903d2001d82a3167aefd43bc22741c482b98f83ad43\"</span></pre>

<p>The important part here is that even though 6 of those 8 users use the same passwords, there's no way to find that out based on just the hashes. Meaning that the theoretical attacker here would actually have to crack the password of <i>every</i> account they want access to. Granted, it's still easier to guess a password like \"P@ssword123\" than a passphrase <a href=\"http://preshing.com/20110811/xkcd-password-generator\">generated in the correct horse</a> style, but our system is still more secure for having these small steps.</p>

<p>Just to bring it all together, the final code for a proper, salted, hashing user/password system is</p>

<pre><span style=\"color: #7a378b;\">-module</span>(trivial_user).
<span style=\"color: #7a378b;\">-behaviour</span>(gen_server).
<span style=\"color: #7a378b;\">-include_lib</span>(<span style=\"color: #8b2252;\">\"stdlib/include/qlc.hrl\"</span>).

<span style=\"color: #7a378b;\">-export</span>([<span style=\"color: #228b22;\">start/0</span>, <span style=\"color: #228b22;\">stop/0</span>]).
<span style=\"color: #7a378b;\">-export</span>([<span style=\"color: #228b22;\">init/1</span>, <span style=\"color: #228b22;\">handle_call/3</span>, <span style=\"color: #228b22;\">handle_cast/2</span>, <span style=\"color: #228b22;\">handle_info/2</span>,
         <span style=\"color: #228b22;\">terminate/2</span>, <span style=\"color: #228b22;\">code_change/3</span>]).

<span style=\"color: #7a378b;\">-record</span>(<span style=\"color: #228b22;\">user</span>,{username, password, salt, timestamp}).
<span style=\"color: #7a378b;\">-export</span>([<span style=\"color: #228b22;\">register/2</span>, <span style=\"color: #228b22;\">auth/2</span>, <span style=\"color: #228b22;\">change_password/2</span>, <span style=\"color: #228b22;\">list/0</span>]).

<span style=\"color: #0000ff;\">list</span>() -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #228b22;\">gen_server</span>:<span style=\"color: #228b22;\">call</span>(?<span style=\"color: #008b8b;\">MODULE</span>, list).

<span style=\"color: #0000ff;\">register</span>(<span style=\"color: #a0522d;\">Username</span>, <span style=\"color: #a0522d;\">Password</span>) -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #228b22;\">gen_server</span>:<span style=\"color: #228b22;\">call</span>(?<span style=\"color: #008b8b;\">MODULE</span>, {register, <span style=\"color: #a0522d;\">Username</span>, <span style=\"color: #a0522d;\">Password</span>}).

<span style=\"color: #0000ff;\">auth</span>(<span style=\"color: #a0522d;\">Username</span>, <span style=\"color: #a0522d;\">Password</span>) -&gt;<span style=\"color: #0000ff;\"> </span>
    <span style=\"color: #a0522d;\">Pid</span> = <span style=\"color: #7a378b;\">self</span>(),
    <span style=\"color: #a0522d;\">Auth</span> = <span style=\"color: #a020f0;\">fun</span>() -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #a0522d;\">User</span> = <span style=\"color: #228b22;\">find</span>(<span style=\"color: #a0522d;\">Username</span>),
                    true = <span style=\"color: #228b22;\">salt</span>(<span style=\"color: #a0522d;\">User</span>#<span style=\"color: #228b22;\">user</span>.salt, <span style=\"color: #a0522d;\">Password</span>) =:= <span style=\"color: #a0522d;\">User</span>#<span style=\"color: #228b22;\">user</span>.password,
                    <span style=\"color: #a0522d;\">Pid</span> ! <span style=\"color: #a0522d;\">User</span> 
           <span style=\"color: #a020f0;\">end</span>,
    <span style=\"color: #a0522d;\">AuthProc</span> = <span style=\"color: #7a378b;\">spawn</span>(<span style=\"color: #a0522d;\">Auth</span>),
    <span style=\"color: #a020f0;\">receive</span>
        <span style=\"color: #a0522d;\">User</span> -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #7a378b;\">exit</span>(<span style=\"color: #a0522d;\">AuthProc</span>, thank_you),
                {<span style=\"color: #a0522d;\">User</span>#<span style=\"color: #228b22;\">user</span>.username, <span style=\"color: #a0522d;\">User</span>#<span style=\"color: #228b22;\">user</span>.timestamp}
    <span style=\"color: #a020f0;\">after</span> 2000 -&gt;<span style=\"color: #0000ff;\"> </span>
            false
    <span style=\"color: #a020f0;\">end</span>.

<span style=\"color: #0000ff;\">change_password</span>(<span style=\"color: #a0522d;\">Username</span>, <span style=\"color: #a0522d;\">NewPassword</span>) -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #228b22;\">gen_server</span>:<span style=\"color: #228b22;\">call</span>(?<span style=\"color: #008b8b;\">MODULE</span>, {change_pass, <span style=\"color: #a0522d;\">Username</span>, <span style=\"color: #a0522d;\">NewPassword</span>}).

<span style=\"color: #0000ff;\">handle_call</span>(list, <span style=\"color: #a0522d;\">_From</span>, <span style=\"color: #a0522d;\">State</span>) -&gt;
    {reply, <span style=\"color: #228b22;\">do</span>(<span style=\"color: #228b22;\">qlc</span>:<span style=\"color: #228b22;\">q</span>([{<span style=\"color: #a0522d;\">X</span>#<span style=\"color: #228b22;\">user</span>.username, <span style=\"color: #a0522d;\">X</span>#<span style=\"color: #228b22;\">user</span>.timestamp} <span style=\"color: #a020f0;\">||</span> <span style=\"color: #a0522d;\">X</span> <span style=\"color: #a020f0;\">&lt;-</span> <span style=\"color: #228b22;\">mnesia</span>:<span style=\"color: #228b22;\">table</span>(user)])), <span style=\"color: #a0522d;\">State</span>};
<span style=\"color: #0000ff;\">handle_call</span>({register, <span style=\"color: #a0522d;\">Username</span>, <span style=\"color: #a0522d;\">Password</span>}, <span style=\"color: #a0522d;\">_From</span>, <span style=\"color: #a0522d;\">State</span>) -&gt;<span style=\"color: #0000ff;\"> </span>
    <span style=\"color: #a0522d;\">Res</span> = <span style=\"color: #a020f0;\">case</span> <span style=\"color: #228b22;\">exists_p</span>(<span style=\"color: #a0522d;\">Username</span>) <span style=\"color: #a020f0;\">of</span>
              false -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #a0522d;\">Salt</span> = <span style=\"color: #228b22;\">make_salt</span>(),
                       <span style=\"color: #a0522d;\">User</span> = #<span style=\"color: #228b22;\">user</span>{username=<span style=\"color: #a0522d;\">Username</span>, password=<span style=\"color: #228b22;\">salt</span>(<span style=\"color: #a0522d;\">Salt</span>, <span style=\"color: #a0522d;\">Password</span>), salt=<span style=\"color: #a0522d;\">Salt</span>, timestamp=<span style=\"color: #7a378b;\">now</span>()},
                       <span style=\"color: #228b22;\">transaction</span>(<span style=\"color: #a020f0;\">fun</span>() -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #228b22;\">mnesia</span>:<span style=\"color: #228b22;\">write</span>(<span style=\"color: #a0522d;\">User</span>) <span style=\"color: #a020f0;\">end</span>);
              <span style=\"color: #a0522d;\">_</span> -&gt;<span style=\"color: #0000ff;\"> </span>already_exists
          <span style=\"color: #a020f0;\">end</span>,
    {reply, <span style=\"color: #a0522d;\">Res</span>, <span style=\"color: #a0522d;\">State</span>}
<span style=\"color: #0000ff;\">handle_call</span>({change_pass, <span style=\"color: #a0522d;\">Username</span>, <span style=\"color: #a0522d;\">NewPassword</span>}, <span style=\"color: #a0522d;\">_From</span>, <span style=\"color: #a0522d;\">State</span>) -&gt;<span style=\"color: #0000ff;\"> </span>
    <span style=\"color: #a0522d;\">User</span> = <span style=\"color: #228b22;\">find</span>(<span style=\"color: #a0522d;\">Username</span>),
    <span style=\"color: #a0522d;\">Salt</span> = <span style=\"color: #228b22;\">make_salt</span>(),
    {reply, <span style=\"color: #228b22;\">transaction</span>(<span style=\"color: #a020f0;\">fun</span>() -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #228b22;\">mnesia</span>:<span style=\"color: #228b22;\">write</span>(<span style=\"color: #a0522d;\">User</span>#<span style=\"color: #228b22;\">user</span>{password=<span style=\"color: #228b22;\">salt</span>(<span style=\"color: #a0522d;\">Salt</span>, <span style=\"color: #a0522d;\">NewPassword</span>), salt=<span style=\"color: #a0522d;\">Salt</span>}) <span style=\"color: #a020f0;\">end</span>), <span style=\"color: #a0522d;\">State</span>}.
                       
<span style=\"color: #b22222;\">%%%%%%%%%%%%%%%%%%%% </span><span style=\"color: #b22222;\">database utility
</span><span style=\"color: #0000ff;\">make_salt</span>() -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #7a378b;\">binary_to_list</span>(<span style=\"color: #228b22;\">crypto</span>:<span style=\"color: #228b22;\">rand_bytes</span>(32)).

<span style=\"color: #0000ff;\">salt</span>(<span style=\"color: #a0522d;\">Salt</span>, <span style=\"color: #a0522d;\">String</span>) -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #228b22;\">sha256</span>:<span style=\"color: #228b22;\">encode</span>(<span style=\"color: #228b22;\">lists</span>:<span style=\"color: #228b22;\">append</span>(<span style=\"color: #a0522d;\">Salt</span>, <span style=\"color: #a0522d;\">String</span>)).

<span style=\"color: #0000ff;\">exists_p</span>(<span style=\"color: #a0522d;\">Username</span>) -&gt;<span style=\"color: #0000ff;\"> </span>
    <span style=\"color: #a020f0;\">try</span>
        <span style=\"color: #228b22;\">find</span>(<span style=\"color: #a0522d;\">Username</span>)
    <span style=\"color: #a020f0;\">catch</span>
        error:<span style=\"color: #a0522d;\">_</span> -&gt;<span style=\"color: #0000ff;\"> </span>false
    <span style=\"color: #a020f0;\">end</span>.

<span style=\"color: #0000ff;\">find</span>(<span style=\"color: #a0522d;\">Name</span>) -&gt;<span style=\"color: #0000ff;\"> </span>
    [<span style=\"color: #a0522d;\">Rec</span>] = <span style=\"color: #228b22;\">do</span>(<span style=\"color: #228b22;\">qlc</span>:<span style=\"color: #228b22;\">q</span>([<span style=\"color: #a0522d;\">X</span> <span style=\"color: #a020f0;\">||</span> <span style=\"color: #a0522d;\">X</span> <span style=\"color: #a020f0;\">&lt;-</span> <span style=\"color: #228b22;\">mnesia</span>:<span style=\"color: #228b22;\">table</span>(user), <span style=\"color: #a0522d;\">X</span>#<span style=\"color: #228b22;\">user</span>.username =:= <span style=\"color: #a0522d;\">Name</span>])),
    <span style=\"color: #a0522d;\">Rec</span>.

<span style=\"color: #0000ff;\">do</span>(<span style=\"color: #a0522d;\">Q</span>) -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #228b22;\">transaction</span>(<span style=\"color: #a020f0;\">fun</span>() -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #228b22;\">qlc</span>:<span style=\"color: #228b22;\">e</span>(<span style=\"color: #a0522d;\">Q</span>) <span style=\"color: #a020f0;\">end</span>).

<span style=\"color: #0000ff;\">transaction</span>(<span style=\"color: #a0522d;\">F</span>) -&gt;
    {atomic, <span style=\"color: #a0522d;\">Val</span>} = <span style=\"color: #228b22;\">mnesia</span>:<span style=\"color: #228b22;\">transaction</span>(<span style=\"color: #a0522d;\">F</span>),
    <span style=\"color: #a0522d;\">Val</span>.

<span style=\"color: #b22222;\">%%%%%%%%%%%%%%%%%%%% </span><span style=\"color: #b22222;\">generic actions
</span><span style=\"color: #0000ff;\">start</span>() -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #228b22;\">gen_server</span>:<span style=\"color: #228b22;\">start_link</span>({local, ?<span style=\"color: #008b8b;\">MODULE</span>}, ?<span style=\"color: #008b8b;\">MODULE</span>, [], []).
<span style=\"color: #0000ff;\">stop</span>() -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #228b22;\">gen_server</span>:<span style=\"color: #228b22;\">call</span>(?<span style=\"color: #008b8b;\">MODULE</span>, stop).

<span style=\"color: #b22222;\">%%%%%%%%%%%%%%%%%%%% </span><span style=\"color: #b22222;\">gen_server handlers
</span><span style=\"color: #0000ff;\">init</span>([]) -&gt;<span style=\"color: #0000ff;\"> </span>{ok, []}.
<span style=\"color: #0000ff;\">handle_cast</span>(<span style=\"color: #a0522d;\">_Msg</span>, <span style=\"color: #a0522d;\">State</span>) -&gt;<span style=\"color: #0000ff;\"> </span>{noreply, <span style=\"color: #a0522d;\">State</span>}.
<span style=\"color: #0000ff;\">handle_info</span>(<span style=\"color: #a0522d;\">_Info</span>, <span style=\"color: #a0522d;\">State</span>) -&gt;<span style=\"color: #0000ff;\"> </span>{noreply, <span style=\"color: #a0522d;\">State</span>}.
<span style=\"color: #0000ff;\">terminate</span>(<span style=\"color: #a0522d;\">_Reason</span>, <span style=\"color: #a0522d;\">_State</span>) -&gt;<span style=\"color: #0000ff;\"> </span>ok.
<span style=\"color: #0000ff;\">code_change</span>(<span style=\"color: #a0522d;\">_OldVsn</span>, <span style=\"color: #a0522d;\">State</span>, <span style=\"color: #a0522d;\">_Extra</span>) -&gt;<span style=\"color: #0000ff;\"> </span>{ok, <span style=\"color: #a0522d;\">State</span>}.</pre>

<p>The pseudocode differences are minute, to be sure,</p>

<pre><span style=\"color: #a020f0;\">def</span> <span style=\"color: #0000ff;\">register</span>(username, password):
    store(username, salt(s, password), timestamp(), s)

<span style=\"color: #a020f0;\">def</span> <span style=\"color: #0000ff;\">auth</span>(username, entered_password):
    spawn:
        <span style=\"color: #a020f0;\">if</span> user = find(username) <span style=\"color: #a020f0;\">and</span> user.password == salt(user.s, entered_password):
            user.except(password, salt)
        <span style=\"color: #a020f0;\">else</span>:
            wait(2, :seconds)
            false

<span style=\"color: #a020f0;\">def</span> <span style=\"color: #0000ff;\">change_pass</span>(username, new_password):
    store(find(username).password = salt(s, new_password), s)

<span style=\"color: #a020f0;\">def</span> <span style=\"color: #0000ff;\">salt</span>(s, string):
    secure_hash(s + string)</pre>

<p>but they make for a more robust password-based system. Granted, that's still like being <i>really, really good</i> at <a href=\"http://www.flickr.com/photos/villagemember/987251565/\">arguing on the internet</a>, but baby steps.</p>

<p>Github <a href=\"#\">here</a>, if you want to play around with it.</p> 

<span class=\"edit\">EDIT:
<p>The link above no longer exists. All features from this library have been folded into <a href=\"https://github.com/Inaimathi/auth\">auth</a> (there have been changes since this post was written, so it's not exactly the same codebase, but the principles are the same)</p>
Thu, 30 Aug, 2012</span>

<p>For next time, I'll be putting together an extension to this that does public-key-based auth, (as well as passwords for the normies).</p>


<hr />
<h5>Footnotes</h5>
<p>1 - <a href=\"#note-Sat-Jun-09-121258EDT-2012\" name=\"foot-Sat-Jun-09-121258EDT-2012\">[back]</a> - Such as MD5 and SHA1. Note that using these, for example, in the way that <a href=\"http://git-scm.com/book/en/Git-Internals-Git-Objects\">git</a> does isn't a huge deal, since that's merely supposed to be a consistency check and not a security feature.</p>

<p>2 - <a href=\"#note-Sat-Jun-09-121448EDT-2012\" name=\"foot-Sat-Jun-09-121448EDT-2012\">[back]</a> - Surprise, surprise.</p>

<p>3 - <a href=\"#note-Sat-Jun-09-121538EDT-2012\" name=\"foot-Sat-Jun-09-121538EDT-2012\">[back]</a> - As long as the herd isn't demonstrably wrong, of course.</p>

<p>4 - <a href=\"#note-Sat-Jun-09-121653EDT-2012\" name=\"foot-Sat-Jun-09-121653EDT-2012\">[back]</a> - Which I should probably do in any case, but still.</p>

<p>5 - <a href=\"#note-Sat-Jun-09-122057EDT-2012\" name=\"foot-Sat-Jun-09-122057EDT-2012\">[back]</a> - By the way, salt does <b>not</b> have to be secret. You can keep it in the same table as your passwords, and you shouldn't be particularly worried if someone finds out which salt goes with which password. Well, no more worried than if they just got a hold of your hashed passwords.</p>

<p>6 - <a href=\"#note-Sat-Jun-09-122106EDT-2012\" name=\"foot-Sat-Jun-09-122106EDT-2012\">[back]</a> - How much harder depends on what salt you use.</p>

<p>7 - <a href=\"#note-Sat-Jun-09-122134EDT-2012\" name=\"foot-Sat-Jun-09-122134EDT-2012\">[back]</a> - If you're particularly obsessive, use <code>crypto:<span style=\"color: #228b22;\">strong_rand_bytes/1</span></code> instead. The only difference is that the <code>strong_</code> variant gets some of its randomness from OS provided entropy, but it may also periodically hand you back a <code>low_entropy</code> error instead of a random byte string.</p>
"))
((5202 3723 579606000) :INSERT (83 :POSTED 3548203200))
((5202 3723 579610000) :INSERT (83 :TAG :ALMOST-LITERATE-PROGRAMMING))
((5202 3723 579612000) :INSERT (83 :TAG :ERLANG))
((5202 3723 579614000) :INSERT (83 :TAG :FFI))
((5202 3723 579616000) :INSERT (83 :TAG :PYTHON))
((5202 3723 579854000) :INSERT (84 :TITLE "Authentication Part Two"))
((5202 3723 579861000) :INSERT (84 :FILE "authentication-song.html"))
((5202 3723 579863000) :INSERT (84 :EDITED 3610273080))
((5202 3723 579864000) :INSERT
 (84 :BODY "<pre style=\"font-family: serif;\">Type your name, click \"login\",
Now count to three

Come with me and you'll be
In a world of pure authentication
Take a look and you'll see
Into web authorization
We'll commence with a glance
at classic watchword authentication
Where we'll try for complete explanation

If you wish real security
Use RSA to guarantee it...</pre>

<img src=\"/static/img/wonka.jpg\" class=\"middle\" alt=\"Wonka looking at you.\" />

<p>Ok, that's quite enough of that. There are reasons I don't consider myself a writer, and bullshit like this is right up there.</p>

<p>I've spent the last couple of days doing some quick research on RSA-based, auth systems. This may end up being another one of those things I was severely overconfident about. Since finding out that mathematicians have formalized this thing called Public Key Encryption, I vaguely assumed that someone had put together an authentication system that uses it, and that the only reason such an easy-to-use and secure system was losing out to traditional password auth was... well, I don't know, but it had to be pretty good, right? It turns out that this is only a theoretically solved problem.</p>

<p>Reading material on the subject includes one <a href=\"http://www.phoenix-web.us/compinfo/pubkey/index.html\">pretty good statement of the problem</a>, one <a href=\"http://germany.rsa.com/node.aspx?id=3663\">Enterprise implementation of a similar system</a>, an article <a href=\"http://neverfear.org/blog/view/3/Secure_website_authentication_using_GPG_keys\">musing idly on the possibility</a>, and <a href=\"http://webmasters.stackexchange.com/questions/28691/using-public-key-authentication-for-websites\">one or two</a> people wondering the same thing as me: why aren't we already doing this?</p>

<p>At the high-level, there's two ways of doing this (which could, and probably should, be combined):</p>

<h2>Prove that you can read this</h2>

<ol>
  <li>The server sends the user a random ~64 byte code, encrypted with the users' public key</li>
  <li>The user decrypts the key and sends back the plain-text</li>
  <li>
    The server verifies that the plain-text it gets back corresponds to what it sent in step one
    <ul>
      <li>If it does, that code is revoked and the user is given access.</li>
      <li>If it doesn't, boot the fucker</li>
    </ul>
  </li>
</ol>

<h2>Prove that you can sign this</h2>

<ol>
  <li>The server sends the user a random ~64 code</li>
  <li>The user signs that plain-text and sends the result back</li>
  <li>
    The server verifies that what it got matches the plain-text from step one, and was signed by the user trying to log in
    <ul>
      <li>If it does and it was, that code is revoked and the user is given access.</li>
      <li>If it doesn't or it wasn't, boot the fucker <i>(and probably make a note of the break-in attempt)</i></li>
    </ul>
  </li>
</ol>

<p>Like I said, you could combine them at low effort, though I'm not actually sure it would add any kind of security boost over one-or-the-other. The trouble, I assume, is the UI; the simplest possible way to implement this system involves some pretty odd (odd for the average computer user on the interwebs today) steps for the user.</p>

<p>First, logging in becomes a minimum two-step process. Three, really, if you count decrypting/signing as a step. Because the server needs to know who you're trying to log in as <i>before</i> generating and sending your code, you can't identify yourself and send the answer at the same time the way you can with password systems. You need one, <i>then</i> the other. </p>

<p>Second, the user needs to decrypt/sign output from the server. This is non-trivial for most people, or at least, that's the only conclusion I can draw from the fact that most email is not encrypted. Barring trickery, this would need to be done manually; copy the message out of an HTML page, paste it into your PGP/GPG client 
and have it do its thing.</p>

<p>Third, the user is now effectively tied down to a single computer for their browsing experience, since you can't exactly carry an RSA key around as easily as a passphrase/password. At minimum, you'd need a USB key, and you'd need to trust that computers you were using it with didn't secretly keep a decrypted copy of your key around for nefarious purposes. Good luck with that, I guess.</p>

<p>The <a href=\"http://www.codinghorror.com/blog/2007/05/phishing-the-forever-hack.html\">forever hack</a> still works, and will continue doing so ... well, forever, but we do gain some real advantages by using public key auth rather than passwords.</p>

<ol>
  <li>No one can sniff your key</li>
  <li>Brute-forcing a key is much harder than brute-forcing a password</li>
  <li>You don't need to remember passwords (other than the one that encrypts your key)</li>
</ol>

<p>In other words, if we could solve that UI problem in a semi-automated way, this would be an altogether better way of doing web authentication.</p>

<h3>The Plan</h3>

<p>I actually intend to build this, because having such a system would be a good thing from my perspective personally, as well as for web security in general. If no one's done it before, I guess I may as well take a crack at it. The steps are already outlined above</p>

<ol>
  <li>[client] requests page requiring auth</li>
  <li>[server] asks for a user name/identifier</li>
  <li>[client] enters user name/identifier</li>
  <li>[server] sends encrypted string, records it, expects signed plain-text</li>
  <li>[client] decrypts, signs string, sends it back</li>
  <li>[server] compares with what was recorded in 3, authenticates or boots based on comparison</li>
</ol>

<p>Step 5 can potentially be handled by a browser plugin. Something that would look for an RSA-auth form, and do the right thing. Either by tracking your auth keys itself, or by calling out to OpenSSH or similar on the client side. The server-side actually looks pretty simple, and needs minimal changes from the auth system we put together last time. Really, we'd just need to store a users' public key instead of (or in addition to) their password, and use the Erlang <code>crypto:<span style=\"color: #228b22;\">rsa_*/\\d</span></code> functions to process the specified messages.</p>

<p>Step 5, I'm going to want to think about/research some more. I know there are <a href=\"http://www.ohdave.com/rsa/\">various</a> <a href=\"http://www-cs-students.stanford.edu/~tjw/jsbn/\">RSA</a> <a href=\"http://www.ziyan.info/2008/10/javascript-rsa.html\">implementations</a> in JS, so it's at least plausible to write a <a href=\"http://code.google.com/chrome/extensions/overview.html\">browser plugin</a> that can generate a separate key for you for the purposes of website authentication. Another option is to interface with an external program, such as <a href=\"http://www.openssh.org/\">OpenSSH</a> or <a href=\"http://www.gnupg.org/\">GnuPG</a>, but that's something with which I have limited experience.</p>

<p>I'll leave those thoughts in the air for now. Feel free to tell me how stupid all this is, and what a better solution would be. I'm off to do some research, before laying down any more words.</p>
"))
((5202 3723 579925000) :INSERT (84 :POSTED 3548376000))
((5202 3723 579938000) :INSERT (84 :TAG :IDEA-PEELING))
((5202 3723 580246000) :INSERT (85 :TITLE "Fresh Install"))
((5202 3723 580252000) :INSERT (85 :FILE "fresh-system.html"))
((5202 3723 580254000) :INSERT (85 :EDITED 3610299211))
((5202 3723 580256000) :INSERT
 (85 :BODY
  "<p>This weekend finally saw enough random free time that I manged a clean install of my laptop, and I think I've gotten it into more-or-less working order.</p>

<p>That's the <a href=\"http://shop.lenovo.com/us/laptops/thinkpad/x-series/x220\">Lenovo x220</a> I wrote about <a href=\"/article?name=x220.html\">a while ago</a>, though it has oddly gone up in price by more than an order of magnitude. I guess Core i3s are in very, very short supply?</p>

<p>Anyhow, this is the first time that I've configured my main machine without a desktop environment. I usually run either <a href=\"http://www.xfce.org/\">XFCE</a> or <a href=\"http://www.gnome.org/\">GNOME</a> under my window manager on my primary, and keep crazy things like <a href=\"/article?name=screen-for-stump-users.html\">Screen-as-WM</a>, and <a href=\"/article?name=how-close-can-you-get-to-a-lisp-machine.html\">odd <code>bash</code> replacements</a> to my play boxes. Much as I hate to admit it, <code>x-window-system</code> is still a requirement at an office where you need to co-exist with MS users. Mainly for <a href=\"http://trac.emma-soft.com/epdfview/\">PDF viewing</a> and <a href=\"http://www.libreoffice.org/download/\">documents/spreadsheets</a>, but it also helps to be able to do some <a href=\"http://inkscape.org/\">image</a> <a href=\"http://www.gimp.org/\">editing</a> if the situation calls for it.</p>

<h2>Window Manager</h2>

<p>I decided to go with <a href=\"http://stumpwm.org/\">StumpWM</a> over <a href=\"http://xmonad.org/\">XMonad</a>. The practical differences are minute. XMonad uses a workspace-based structure by default, whereas StumpWM treats windows individually<a href=\"#foot-Tue-Jun-12-210019EDT-2012\" name=\"note-Tue-Jun-12-210019EDT-2012\">[1]</a>. Stump treats all windows equally, where XMonad has the concept of a master window in a given layout. StumpWM assumes <code>C-t</code> as the <code>mod</code> key, and supports Emacs-style chords out of the box. You can use <a href=\"http://xmonad.org/xmonad-docs/xmonad-contrib/XMonad-Actions-Submap.html\">XMonad.Actions.Submap</a> to get <i>some</i> of the functionality back, but there are two places it falls short, and those have annoyed me enough to switch back over to the Lisp-based WM.</p>

<p>The first shortfall is, even though you can technically use the submap feature, there doesn't seem to be a good way of simulating the taken keystroke. That is, if you set your XMonad <code>mod</code> key to <code>C-t</code>, you now have no way of using <code>transpose-chars</code> in Emacs or <code>New Tab</code> in Chrome. StumpWM has a mechanism to let <code>C-t C-t</code> fake the usual <code>C-t</code> keystroke to the focused application, but XMonad has nothing similar that I've found.</p>

<p>The second is that certain XMonad keystrokes are designed to have you hold the <code>mod</code> key, and submap chord keys can't be held. The best example of this is resizing windows. The standard keystrokes are <code>Mod-h</code> and <code>Mod-l</code>, for growing and shrinking the master window respectively. The way these work is that each invocation grows/shrinks the master window by about 5px, so if you want to do any significant resizing, you'll need multiple calls. If you bind <code>Mod</code> to a single key, like <code>Win</code>, you can do a series easily; hold <code>Win</code> + <code>h h h h h</code>. If on the other hand you want a chorded mod, it gets more complicated; <code>C+t h C+t h C+t h C+t h C+t h</code>. That's pretty annoying. StumpWM doesn't let you hold chorded keys either, but because they're the default, Stump keys tend to be designed to account for it. For example, the resizing situation above is solved with a separate <code>interactive-resize</code> setting; you hit <code>C-R</code>, which puts you into a mode where your arrow keys scale the focused window.</p>

<p>I suppose another solution could have been \"get used to <code>Win</code> as your mod key\", but I don't wanna. I'm working on a laptop, so that key is annoyingly narrow, and hitting it properly with my pinkie requires me to scrunch my left hand up somewhat uncomfortably.</p>

<p>So that's that; keeping my hands on the home row without sacrificing functionality is enough to drive me to another window manager.</p>

<h2>Other Installables</h2>

<p>Other than the WM, I mentioned this was my first time going desktop-less. That produces one or two challenges, the big one being wireless. I'm using <a href=\"http://wicd.sourceforge.net/moinmoin/FAQ\"><code>wicd-curses</code></a> to manage my connections, but that's actually the easy part. The x220 comes with one of three built-in wireless cards, and none of them like Debian very much. What I really ought to do is go out and buy a wifi card that supports free drivers, but in the meantime, this is the one place on my system where I use Debian's <code>contrib non-free</code> repos. I temporarily added them, and dropped them as soon as I was done installing <code>firmware-iwlwifi</code>, <code>firmware-ralink</code> and <code>firmware-realtek</code>.</p>

<p>I honestly don't know which of those did it, but on the next restart, I had <code>wlan0</code> available.</p>

<p>The other challenge with using a standalone WM is mounting/unmounting USB drives. I don't actually use them very much anymore; <a href=\"http://linux.die.net/man/1/scp\"><code>scp</code></a>, <a href=\"http://git-scm.com/\"><code>git</code></a> and <a href=\"http://en.wikipedia.org/wiki/Rsync\"><code>rsync</code></a> are much more effective at moving files across machines. The only time a thumbdrive comes out is when I need to do a system install, or when I need to exchange non-emailable files with a non-linux user. For those times, <a href=\"http://pmount.alioth.debian.org/\"><code>pmount</code></a> is more than sufficient.</p>

<p>Other than that, I just need to get used to using <code>acpi</code> to check on my battery periodically, and using <code>alsamixer</code> to set up the volume the first time. It goes without saying that <code>caps-lock</code> is an additional <code>ctrl</code>.</p>

<p>The list of things installed on my system at this point is pretty short actually. Here's a script that duplicates most of the install</p>

<pre><span style=\"color: #b22222;\">### </span><span style=\"color: #b22222;\">with the contrib non-free repos enabled
</span>apt-get install firmware-iwlwifi firmware-ralink firmware-realtek
<span style=\"color: #b22222;\">### </span><span style=\"color: #b22222;\">disabled again
</span>
apt-get install wireless-tools wicd-curses
apt-get install sbcl clisp erlang erlang-doc
apt-get install make screen dmenu htop gnupg git-core gitk emacs stumpwm slime pmount
apt-get install pacpl mplayer alsa imagemagick gimp inkscape conkeror chromium-browser</pre>

<p>I haven't even bothered with databases or web servers yet, though I'm sure I'll have to eventually. I <i>did</i> grab a few applications from source just for the hell of it, and set up my usual utility scripts<a href=\"#foot-Tue-Jun-12-210928EDT-2012\" name=\"note-Tue-Jun-12-210928EDT-2012\">[2]</a>, <code>quicklisp</code>, plus 7 or so <code>.*rc</code> files.</p>

<h2>Lineup Changes</h2>

<p>There are a couple of big things I've changed, that you may have noticed, and one big thing I've changed that you definitely didn't. Most of it is pruning things that I've noticed I don't use. The languages I didn't bother installing this time include <code>haskell</code><a href=\"#foot-Tue-Jun-12-210940EDT-2012\" name=\"note-Tue-Jun-12-210940EDT-2012\">[3]</a>, <code>smalltalk</code><a href=\"#foot-Tue-Jun-12-210947EDT-2012\" name=\"note-Tue-Jun-12-210947EDT-2012\">[4]</a>, <code>node.js</code><a href=\"#foot-Tue-Jun-12-210952EDT-2012\" name=\"note-Tue-Jun-12-210952EDT-2012\">[5]</a> and <code>ruby</code><a href=\"#foot-Tue-Jun-12-210958EDT-2012\" name=\"note-Tue-Jun-12-210958EDT-2012\">[6]</a>.</p>

<p>Finally, the latest version of <code>git-core</code> no longer ships with <code>git.el</code>. That's not entirely a bad thing; I've had to hack a lot of <a href=\"https://github.com/Inaimathi/emacs-utils/blob/master/git-custom.el\">additional pieces</a> onto it for my purposes, and I always sort of wished that it just worked out of the box. It turns out I was one of the ~3 people on the planet not using <a href=\"http://philjackson.github.com/magit/\"><code>magit</code></a>. Luckily, the lack of direct <code>git-core</code> has forced me to try it out, and it seems that this mode supports everything I was adding and then some. One or two annoyances, but I haven't run into anything that takes more than a trivial change in my workflow.</p>

<p>So yeah. Net gain, all told.</p>

<hr />
<h5>Footnotes</h5>
<p>1 - <a href=\"#note-Tue-Jun-12-210019EDT-2012\" name=\"foot-Tue-Jun-12-210019EDT-2012\">[back]</a> - You can use <a href=\"http://stumpwm.org/manual/stumpwm_8.html\">groups</a> to approximate the XMonad model, but I haven't played with it much yet.</p>

<p>2 - <a href=\"#note-Tue-Jun-12-210928EDT-2012\" name=\"foot-Tue-Jun-12-210928EDT-2012\">[back]</a> - Though I will be porting the useful ones away from Ruby very shortly.</p>

<p>3 - <a href=\"#note-Tue-Jun-12-210940EDT-2012\" name=\"foot-Tue-Jun-12-210940EDT-2012\">[back]</a> - Which I've been playing around with periodically, but haven't used for anything serious.</p>

<p>4 - <a href=\"#note-Tue-Jun-12-210947EDT-2012\" name=\"foot-Tue-Jun-12-210947EDT-2012\">[back]</a> - Which I'm definitely coming back to at some point, but don't have the time for at the moment.</p>

<p>5 - <a href=\"#note-Tue-Jun-12-210952EDT-2012\" name=\"foot-Tue-Jun-12-210952EDT-2012\">[back]</a> - Which was enough of a pain in the ass to install properly that I'm avoiding it until I actually decide to use it.</p>

<p>6 - <a href=\"#note-Tue-Jun-12-210958EDT-2012\" name=\"foot-Tue-Jun-12-210958EDT-2012\">[back]</a> - Which I'm really sad about actually. However, I haven't used it for anything <i>but</i> scripts for the last little while. The number of scripts I've been writing in it has also been going downhill since I started using <code>make</code> actively.</p>
"))
((5202 3723 580348000) :INSERT (85 :POSTED 3548462400))
((5202 3723 580351000) :INSERT (85 :TAG :PROGRAMMING-ENVIRONMENT))
((5202 3723 580796000) :INSERT
 (86 :TITLE "Authentication Part Three - RSA Basics"))
((5202 3723 580804000) :INSERT (86 :FILE "rsa-crypto.html"))
((5202 3723 580808000) :INSERT (86 :EDITED 3610300781))
((5202 3723 580812000) :INSERT
 (86 :BODY
  "<p>I've been researching and prototyping for the past day or so, and all it's done is given me the desire to go out and murder some cryptographers.</p>

<p>Ok, ok, to be fair I did also get an excellent idea of why this isn't really widely used as an authentication strategy yet. The \"UI\" is ... intimidating. And that's coming from someone who isn't the least bit intimidated by learning a programming language or three in spare moments between actual programming projects. Something tells me the average user <a href=\"http://techland.time.com/2011/11/22/the-25-most-popular-and-worst-passwords-of-2011/\">doesn't care enough about security</a> to go through that kind of hoop.</p>

<p>It turns out that there are several distinct standards for public/private key storage, none of the popular Linux RSA-using applications use the same one by default, and it's possible but annoying to convert between them. Further, even though they're all <a href=\"http://en.wikipedia.org/wiki/RSA_(algorithm)\">RSA</a> keys, they don't all let you do the same thing. <a href=\"http://www.openssh.org/\">OpenSSH</a> uses <a href=\"http://ospkibook.sourceforge.net/docs/OSPKI-2.4.7/OSPKI-html/sample-priv-key.htm\">PEM</a> for private keys, a <a href=\"http://help.globalscape.com/help/eft6/Server_SSH_Key_Formats.htm\">custom format</a> for public keys, and a <a href=\"http://amath.colorado.edu/computing/unix/sshknownhosts.html\">slightly different custom format</a> for the <code>known_hosts</code> file; it doesn't provide facilities for anything other than SSH auth and key generation. <a href=\"http://www.gnupg.org/\">GnuPG</a> uses <a href=\"http://www.spywarewarrior.com/uiuc/gpg/gpg-com-4.htm#4-2b\"><code>ascii-armored</code></a> format<a href=\"#foot-Thu-Jun-14-202406EDT-2012\" name=\"note-Thu-Jun-14-202406EDT-2012\">[1]</a> for exported private and public keys, though it would really prefer never to show you your private key; it lets you sign and encrypt, but is a bit awkward to import/export in other formats. <a href=\"http://www.openssl.org/\">OpenSSL</a> technically works with PEM and several binary formats, but its default is the <a href=\"http://en.wikipedia.org/wiki/X.509#Sample_X.509_certificates\">X.509 certificate</a> standard; OpenSSL lets you verify, encrypt, decrypt and convert between key formats, but is a bit snippy about the format in which it outputs/verifies signatures.</p>

<p>The various language facilities available aren't exactly complete either. Erlang's <a href=\"http://www.erlang.org/doc/man/crypto.html\"><code>crypto</code></a> and <a href=\"http://www.erlang.org/doc/man/public_key.html\"><code>public_key</code></a> modules claim they can make and verify signatures, handle encryption/decryption with RSA, DSA and AES keys, as well as perform a number of cryptographic hashes. But they can't generate keys, and I've yet to get a working import of a 4096 bit RSA keypair, whether it's generated by GnuPG, OpenSSL or SSH. Python has <a href=\"http://stuvel.eu/rsa\">RSA</a>, native <a href=\"https://www.dlitz.net/software/pycrypto/\">crypto</a>, and <a href=\"http://chandlerproject.org/bin/view/Projects/MeTooCrypto\">OpenSSL-wrapper</a> modules available. They sort of do enough things properly, if imperatively, enough that I could see putting together a half-way sane system with them.</p>

<p>I'm not even getting into <i>signature</i> formats, which are ... interesting. In a no-fun-at-all kind of way. To the point that I couldn't reliably verify an OpenSSL signature with anything other than, ostensibly, OpenSSL<a href=\"#foot-Thu-Jun-14-202951EDT-2012\" name=\"note-Thu-Jun-14-202951EDT-2012\">[2]</a>.</p>

<p>Here's a list of things I've tried putting together that didn't work:</p>

<ul>
  <li>Using GPG to generate keys, reading them with Erlang and verifying incoming GPG signatures.</li>
  <li>Using SSH to generate keys, reading them with Erlang and verifying incoming GPG/OpenSSL-generated signatures.</li>
  <li>Using SSH to generate keys, converting them to PEM format and calling OpenSSL to sign and verify.</li>
  <li>Using OpenSSL to generate keys, then using Erlang to sign and verify<a href=\"#foot-Thu-Jun-14-205337EDT-2012\" name=\"note-Thu-Jun-14-205337EDT-2012\">[3]</a></li>
  <li>Using OpenSSL to generate keys, and calling OpenSSL to sign and verify<a href=\"#foot-Thu-Jun-14-205341EDT-2012\" name=\"note-Thu-Jun-14-205341EDT-2012\">[4]</a>.</li>
  <li>Using OpenSSL to generate keys, using OpenSSL to sign messages and <a href=\"http://chandlerproject.org/bin/view/Projects/MeTooCrypto\">M2Crypto</a> to verify<a href=\"#foot-Thu-Jun-14-205407EDT-2012\" name=\"note-Thu-Jun-14-205407EDT-2012\">[5]</a>.</li>
</ul>

<p>The options that did work:</p>

<ul>
  <li>Using OpenSSL to generate keys, then using M2Crypto to sign and verify<a href=\"#foot-Thu-Jun-14-205415EDT-2012\" name=\"note-Thu-Jun-14-205415EDT-2012\">[6]</a>.</li>
  <li>Using OpenSSH to generate keys, then using M2Crypto to sign and verify</li>
  <li>Using M2Crypto to generate keys, sign and verify messages<a href=\"#foot-Thu-Jun-14-205420EDT-2012\" name=\"note-Thu-Jun-14-205420EDT-2012\">[7]</a></li>
  <li>Using GPG to generate keys, sign and verify messages<a href=\"#foot-Thu-Jun-14-205425EDT-2012\" name=\"note-Thu-Jun-14-205425EDT-2012\">[8]</a>.</li>
</ul>

<p>Just as an example, here's how to use M2Crypto to make a round-trip with OpenSSL-generated PEM keys<a href=\"#foot-Thu-Jun-14-205517EDT-2012\" name=\"note-Thu-Jun-14-205517EDT-2012\">[9]</a>.</p>

<pre>&gt;&gt;&gt; <span style=\"color: #a020f0;\">import</span> M2Crypto
&gt;&gt;&gt; PrivKey = M2Crypto.RSA.load_key(<span style=\"color: #8b2252;\">\"rsa.pem\"</span>)
Enter passphrase:
&gt;&gt;&gt; Message = <span style=\"color: #8b2252;\">\"Daring Do and the Quest for the Sapphire Stone\"</span>
&gt;&gt;&gt; Signature = PrivKey.sign_rsassa_pss(Message)
&gt;&gt;&gt; Sent = [Message, Signature.encode(<span style=\"color: #8b2252;\">'base64'</span>)]</pre>

<p>And at the other end</p>

<pre>&gt;&gt;&gt; [Msg, Sig] = Sent
&gt;&gt;&gt; RawSig = Sig.decode(<span style=\"color: #8b2252;\">'base64'</span>)
&gt;&gt;&gt; PubKey = M2Crypto.RSA.load_pub_key(<span style=\"color: #8b2252;\">\"rsa.pub.pem\"</span>)
&gt;&gt;&gt; PubKey.verify_rsassa_pss(Msg, RawSig)
1 <span style=\"color: #b22222;\">### 0 for \"nope\", 1 for \"yup\", and it might error under certain circumstances</span></pre>

<p>In a real-world situation, we'd actually hash the message using one of the <a href=\"http://en.wikipedia.org/wiki/SHA-2\">SHA-2</a> algorithms before sending, but that's the theory in its entirety.</p>

<p>Using <code>gpg</code> is more straightforward, though it does seem to insist on handling public key storage/management for you, so I'm not entirely sure how far this scales in terms of number of users supported. I covered generating gpg keys in a <a href=\"/article?name=passing-notes.html\">previous post</a>, but here's the signing/verification round trip:</p>

<pre>$ echo <span style=\"color: #8b2252;\">\"Daring Do and the Griffon's Goblet\"</span> | gpg --output message.gpg --armor --sign
$</pre>

<p>That generates a file that looks something like</p>

<pre>-----BEGIN PGP MESSAGE-----
Version: GnuPG v1.4.12 (GNU/Linux)

owGbwMvMwMSYv4V14srcc18YT6skMfjfqtwTnJ+bWpKRmZeuUAxnpSQWZSsUZ6ak
cnUyyrAwMDIxsLEygRQzcHEKwEyY/Z/9f1FXwqMHqYdDRYxZ+NOZ3xeXhv023nYo
cH+r3SzBNL6VJy0vd3AnSJ/MvPHg6bZZH+teiOyZxynAf74qXH4a87qw86tuPpsX
WKTNordmnnSf1+XLiefz1n/a5rpui3rm0s8Sx8++aeje7jZ5tapGjkuzvee17b/c
FX9MevzHrur1zcdH9XqNeT2Slj01uFC3Kip49s4a2ctW77++aeK7dk5yW8unnemz
m+7My0ncpReYHTbvraFdy42/JjuK2Lp3ctp9NrjM7qz7lHVZ7Ie7kprlb6o3nDk4
aULn85p18Unxk2UcOn7t9Pzz01vXv3yZY+TftG9rmQPEKrcJNT5lklCt8zm9P+Ce
ezOj09dCDwA=
=6KId
-----END PGP MESSAGE-----</pre>

<p>If you want it sent to standard out for whatever reason, just omit <code>--output message.gpg</code>. Once the server receives the message, it just calls</p>

<pre>$ gpg --decrypt message.gpg
Daring Do and the Griffon's Goblet
gpg: Signature made [timestamp] using RSA key ID [GPG ID of the RSA key]
gpg: Good signature from <span style=\"color: #8b2252;\">\"inaimthi &lt;<a href=\"mailto:inaimathis.email&#64;mailinator.com\">inaimathis.email&#64;mailinator.com</a>&gt;\"</span>
$ </pre>

<p>Note that these are actually slightly different operations. <code>gpg</code> is doing a simultaneous encryption+signing, whereas the <code>M2Crypto</code> code is merely signing a plaintext message.</p>

<p>That's that. I did gloss over the part where we generate messages to send to the client, but other than that, this lays the preliminary groundwork for an RSA-based authentication system with actual web users.</p>

<hr />
<h5>Footnotes</h5>
<p>1 - <a href=\"#note-Thu-Jun-14-202406EDT-2012\" name=\"foot-Thu-Jun-14-202406EDT-2012\">[back]</a> - <code>ascii-armored</code> is distinct from, but similar to PEM, to the point where you can convert one to the other just by changing the start/end tag, and stripping the info entries, blank lines and checksum.</p>

<p>2 - <a href=\"#note-Thu-Jun-14-202951EDT-2012\" name=\"foot-Thu-Jun-14-202951EDT-2012\">[back]</a> - In practice, I couldn't verify them <a href=\"http://stackoverflow.com/questions/11036863/signing-and-verifying-with-openssl\">with OpenSSL</a> either, but that's possibly me being dense.</p>

<p>3 - <a href=\"#note-Thu-Jun-14-205337EDT-2012\" name=\"foot-Thu-Jun-14-205337EDT-2012\">[back]</a> - Which I'm kind of happy about, since this would involve getting users to install and use Erlang.</p>

<p>4 - <a href=\"#note-Thu-Jun-14-205341EDT-2012\" name=\"foot-Thu-Jun-14-205341EDT-2012\">[back]</a> - Again, that <a href=\"http://stackoverflow.com/questions/11036863/signing-and-verifying-with-openssl\">seems odd</a>, but I'm not sure why yet.</p>

<p>5 - <a href=\"#note-Thu-Jun-14-205407EDT-2012\" name=\"foot-Thu-Jun-14-205407EDT-2012\">[back]</a> - Which surprised the shit out of me, since M2Crypto is actually just a Python wrapper for OpenSSL.</p>

<p>6 - <a href=\"#note-Thu-Jun-14-205415EDT-2012\" name=\"foot-Thu-Jun-14-205415EDT-2012\">[back]</a> - Odd that this worked while the above didn't, but I'll take it.</p>

<p>7 - <a href=\"#note-Thu-Jun-14-205420EDT-2012\" name=\"foot-Thu-Jun-14-205420EDT-2012\">[back]</a> - That's probably the best case scenario anyway, since it means I can make a multi-platform client fairly easily.</p>

<p>8 - <a href=\"#note-Thu-Jun-14-205425EDT-2012\" name=\"foot-Thu-Jun-14-205425EDT-2012\">[back]</a> - I have a soft spot for GNU, so I'd like to support this if at all possible. The PGP format has pretty thorough metadata attached, so delegating to GnuPG for messages using it will be reasonably straightforward.</p>

<p>9 - <a href=\"#note-Thu-Jun-14-205517EDT-2012\" name=\"foot-Thu-Jun-14-205517EDT-2012\">[back]</a> - If you want M2Crypto to generate keys too, you'd just need to do 

<pre>&gt;&gt;&gt; Cert = M2Crypto.RSA.gen_key(4096, 65537)
&gt;&gt;&gt; Cert.save_key(<span style=\"color: #8b2252;\">\"rsa.pem\"</span>, <span style=\"color: #8b2252;\">\"passphrase goes here\"</span>)
&gt;&gt;&gt; Cert.save_pub_key(<span style=\"color: #8b2252;\">\"rsa.pub.pem\"</span>)</pre>

first.</p>
"))
((5202 3723 580925000) :INSERT (86 :POSTED 3548635200))
((5202 3723 580930000) :INSERT (86 :TAG :IDEA-PEELING))
((5202 3723 580933000) :INSERT (86 :TAG :PYTHON))
((5202 3723 580937000) :INSERT (86 :TAG :SECURITY))
((5202 3723 580940000) :INSERT (86 :TAG :SPECULATION))
((5202 3723 581318000) :INSERT (87 :TITLE "On Commanding Lines"))
((5202 3723 581325000) :INSERT (87 :FILE "command-lining.html"))
((5202 3723 581327000) :INSERT (87 :EDITED 3610299180))
((5202 3723 581329000) :INSERT
 (87 :BODY
  "<p>Still working away on the authentication system. I'm basically at the point where I can use RSA keys to sign in to my demo webapp. On one browser. As long as the keys are in PEM format. And <code>crypto:verify</code> is in a good mood.</p>

<p>This isn't about that though.</p>

<p>I've been slowly moving towards more and more command-line oriented interfaces. It's not a recent trend, in fact it started pretty much when I first discovered Emacs. Ever since doing away with my desktop environment a little while ago, it's been more of a necessity than idle speculation. The good news is that there's almost nothing I wanted to do in X windows that I can't do via command line.</p>

<h3>Command Line MVPs</h3>

<p>Let me draw your attention to some command line programs that I honestly wouldn't want to go without anymore. Not counting obvious necessities like <a href=\"http://www.openssh.com/\"><code>ssh</code></a>/<a href=\"http://ss64.com/bash/rsync.html\"><code>rsync</code></a>/<a href=\"http://en.wikipedia.org/wiki/Find\"><code>find</code></a>/<a href=\"http://tldp.org/LDP/Bash-Beginners-Guide/html/sect_04_02.html\"><code>grep</code></a>/<a href=\"http://en.wikipedia.org/wiki/Tail_(Unix)\"><code>tail</code></a>.</p>

<p>I've already written a bit about <b><a href=\"http://manpages.ubuntu.com/manpages/karmic/man8/wicd-curses.8.html\">wicd-curses</a></b>, the very good, simple command line network manager. After you set up a wireless device with <code>Shift+p</code>, and set up your connection keys, it'll make sure you're as plugged in as you can possibly be with no need for a network widget. You don't even need to run it unless you're connecting to a new network; the daemon starts up with the rest of your machine.</p>

<p><b><a href=\"http://htop.sourceforge.net/\">htop</a></b> isn't anything new, if you've been paying attention. It's an improvement over the regular <b><a href=\"http://linux.die.net/man/1/top\">top</a></b> in that it gives you more information and prettier colors. That's reason enough for me to use it.</p>

<p><b><a href=\"http://wiki.debian.org/ACPI\">acpi</a></b> does quite a few things relating to cooling, power, and battery. Really, I just use it as the replacement for the gnome/xfce battery widget.</p>

<p><b><a href=\"http://www.gnu.org/software/screen/\">screen</a></b> is something I've been using forever. My first time firing it up was to <a href=\"http://stackoverflow.com/a/514625/190887\">deploy a Hunchentoot application</a>. Since then, I've used it as a way of managing multiple terminals, and kicked its tires as a <a href=\"/article?name=screen-for-stump-users.html\">full-on window manager</a>.</p>

<p><b><a href=\"http://www.mplayerhq.hu/design7/news.html\">mplayer</a></b> is another piece that I've been using for a long time. Even while bumping around GNOME, I preferred this to <a href=\"http://www.videolan.org/vlc/index.html\">VLC</a> (YMMV). It's worth a read through the documentation if you're having a slow day; the program does various crazy things in addition to music/video playback, including bitmap frame outputs, format conversion and some timeline-based edits.</p>

<p><b><a href=\"http://pacpl.sourceforge.net/\">pacpl</a></b> is an audio chopping tool. As of the latest version in the Debian repos, it can directly extract music from videos. As you can see by the website there, it can convert to and from pretty much any audio format you care to name, though I mostly use it to convert things to <a href=\"http://en.wikipedia.org/wiki/Ogg\">ogg</a>s.</p>

<p><b><a href=\"http://www.imagemagick.org/script/index.php\">imagemagick</a></b> is a command-line image chopping program with so many options that you'd really better just read <a href=\"http://www.imagemagick.org/script/command-line-tools.php?ImageMagick=fmrn62da6hq94butv3t53diib0\">the docs</a>. It's actually composed of a bunch of different utilities, of which I mostly use <code>convert</code>, <code>mogrify</code> and <code>identify</code>.</p>

<p><b><a href=\"http://code.google.com/p/get-flash-videos/\">get_flash_videos</a></b> is about the only way I get to see most videos, given a) how crappy flash support is when you're even half-way dedicated to the idea of <a href=\"http://www.gnu.org/philosophy/free-sw.html\">Free software</a> and b) how few sites other than YouTube provide an HTML5 based video player.</p>

<p><b><a href=\"https://forum.transmissionbt.com/viewtopic.php?f=2&t=11784\">transmission-cli</a></b> is the command line interface to my favorite torrent client. Granted, I don't torrent much since I got out of the habit of downloading <a href=\"http://www.debian.org/CD/torrent-cd/\">the massive install CDs</a>, but still.</p>

<p><b><a href=\"http://www.gnu.org/software/gtypist/\">gtypist</a></b> is a curses-based typing tutor that has effectively replaced klavaro for me. It's mildly more entertaining to run typing drills on surrealist, minimal poetry than it is to type out old newspaper articles. The only thing about it that rustles my jimmies is that it enforces hitting space twice after a period. Which is a thing I guess? Honestly it sounds like an <a href=\"http://www.hanselman.com/blog/TheFloppyDiskMeansSaveAnd14OtherOldPeopleIconsThatDontMakeSenseAnymore.aspx\">anachronistic</a> behavior that used to make sense back when actual humans used <a href=\"http://crashreboot.blogspot.ca/2009/04/your-word-processor-is-no-typewriter.html\">actual typewriters</a>. Luckily, the lessons are contained in a set of conf files, so I'll be able to do something about this.</p>

<span class=\"edit\">EDIT:
Aaaaand <a href=\"https://github.com/Inaimathi/gtypist-single-space\">bam</a>. Enjoy.

Wed, 20 Jun, 2012</span>

<p><b><a href=\"http://codezen.org/canto/\">canto</a></b> is a command-line based RSS feed reader. I complained about <a href=\"http://liferea.sourceforge.net/\">liferea</a> earlier for its complexity, and having taken a look at a number of feed readers (both GUI and CLI), that doesn't seem to be an uncommon feature. <code>canto</code>, by contrast is ridiculously simple; set up your <code>conf</code> file, and it'll track those feeds, pulling when you tell it to (every 5 minutes by default). The <a href=\"http://codezen.org/canto/config/#example-config\">example config</a> up at the project site is pretty extensive, but I've gotten on fine with a much more minimal setup:</p>

<pre><span style=\"color: #a020f0;\">from</span> canto.extra <span style=\"color: #a020f0;\">import</span> *
<span style=\"color: #a020f0;\">import</span> os

link_handler(<span style=\"color: #8b2252;\">\"lynx \\\"%u\\\"\"</span>, text=<span style=\"color: #a020f0;\">True</span>)
image_handler(<span style=\"color: #8b2252;\">\"feh \\\"%u\\\"\"</span>, fetch=<span style=\"color: #a020f0;\">True</span>)

keys[<span style=\"color: #8b2252;\">'y'</span>] = yank <span style=\"color: #b22222;\">## requires xclip</span>

<span style=\"color: #a0522d;\">filters</span>=[show_unread, <span style=\"color: #008b8b;\">None</span>]

add(<span style=\"color: #8b2252;\">\"http://www.groklaw.net/backend/GrokLaw.rss\"</span>)
add(<span style=\"color: #8b2252;\">\"http://stackexchange.com/feeds/tagsets/43442/inaimathi-lang-digests?sort=active\"</span>)
add(<span style=\"color: #8b2252;\">\"http://www.antipope.org/charlie/blog-static/atom.xml\"</span>)
add(<span style=\"color: #8b2252;\">\"http://rss.slashdot.org/slashdot/Slashdot\"</span>)
add(<span style=\"color: #8b2252;\">\"http://kerneltrap.org/node/feed\"</span>)</pre>

<p>The one quirk that I have to highlight is that by default, its <code>update</code> <i>doesn't</i> fetch, it just updates from the local pool. In order to fetch, you actually need to run <code>canto-fetch</code> somehow. You can throw it in your <code>crontab</code>, but given how I use an RSS reader, it made more sense for me to just bind that to a StumpWM key.</p>

<p><b><a href=\"http://feh.finalrewind.org/\">feh</a></b> is an extremely lightweight command-line imageviewer with options to browse folders, delete files, do slideshows and other assorted goodness. I didn't find this looking for an imageviewer, I found it looking for a way to get a background picture directly in Stump. It turns out that this does it:</p>

<pre>(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">set-background</span> (bg-image)
  (run-shell-command (format nil <span style=\"color: #8b2252;\">\"feh --bg-scale ~a\"</span> bg-image)))</pre>

<p><b><a href=\"http://lynx.browser.org/\">lynx</a></b> is something I don't use on a regular basis anymore, but it is quite useful when I need to check a <a href=\"http://www.antipope.org/charlie/\">discussion</a> or <a href=\"http://www.groklaw.net/\">two</a> without booting up X. It happens every once in a while.</p>

<h3>Command Line Gaps</h3>

<p>There aren't as many as you'd think. In fact, for my purposes, there is exactly one, and it's sort of minor; the lack of good animated gif viewer. There is a <a href=\"http://www.lcdf.org/gifsicle/\">concerted effort at putting one together</a>, but it didn't exactly blow me away. <code>mplayer</code> does a half-decent job, but chops when looping and doesn't loop by default (which is sort of helpful <a href=\"http://cdn.smosh.com/sites/default/files/bloguploads/haters-gators-gate.gif\">when describing haters</a>). <code>feh</code> is awesome for stills, but doesn't display gifs in an animated fashion, and neither does Emacs. At the moment, my workaround is to just use <a href=\"http://www.chromium.org/\">chromium</a> and call it a day.</p>

<h3>Shell UI</h3>

<p>Ok, so maybe I lied a little in the previous section. The thing I really don't like about <a href=\"http://www.gnu.org/software/tar/\">some</a> command <a href=\"http://ffmpeg.org/\">line</a> programs is their sometimes inscrutable option settings and lack of sensible defaults.</p>

<p>That second one bugged me enough that I whipped up a pair of Ruby scripts to help me out with archiving a little while ago. Yesterday, I ported <a href=\"https://github.com/Inaimathi/shell-ui/blob/master/python/unpack\">them</a> to <a href=\"https://github.com/Inaimathi/shell-ui/blob/master/python/pack\">Python</a>; what they do, basically, is provide a sane set of default options for creating and decompressing various archives. Instead of <code>tar -xyzomgwtfbbq foo.tgz</code>, I can just call <code>unpack foo.tgz</code>. <code>pack -t tar.gz foo/</code> similarly replaces <code>tar -cwhyareyoueventryingtoreadthis foo.tar.gz foo/</code>. I guess I could have done what most of my friends do (memorize the one or two most common combinations and call it a day), but having the machine adapt to humanware seems like the better idea to me.</p>

<p>That's also what caused me to sit down earlier and whip up a first draft at my first <a href=\"http://en.wikipedia.org/wiki/Curses_(programming_library)\">curses</a>-based program. I was trying to pull out sections of some movies into animated gifs, and using <code>mplayer</code>/<code>feh</code>/<code>convert</code> manually proved to be laborious and repetitive. So, I did <a href=\"https://github.com/Inaimathi/shell-ui/blob/master/python/vid2gif\">this</a>.</p>

<p>I call it with a movie file, and the filename I want the result saved to. The program uses a curses interface to</p>

<ol>
  <li>lets me pick a part of the movie to pull, using <code>mplayer</code> options <code>-ss</code> and <code>-endpos</code></li>
  <li>has <code>mplayer</code> output the chosen section as a series of JPGs in a temp folder</li>
  <li>opens the folder with <code>feh</code>, giving me the opportunity to delete some frames as desired</li>
  <li>once I quit out of <code>feh</code>, stitches the remaining frames together into an animated gif</li>
</ol>

<p>Honestly, I'm not sure how often I'll want to do that again, but hey. I've got the process formalized now, so it should be Pie next time. And, now I know how to <a href=\"http://docs.python.org/library/curses.html\">curse in Python</a>.</p>
"))
((5202 3723 581430000) :INSERT (87 :POSTED 3549067200))
((5202 3723 581432000) :INSERT (87 :TAG :PROGRAMMING-ENVIRONMENT))
((5202 3723 581434000) :INSERT (87 :TAG :PYTHON))
((5202 3723 581436000) :INSERT (87 :TAG :SHELL))
((5202 3723 582354000) :INSERT
 (88 :TITLE "Authentication Part Four - Logging into Websites with RSA Keys"))
((5202 3723 582366000) :INSERT (88 :FILE "authentication-part4.html"))
((5202 3723 582370000) :INSERT (88 :EDITED 3610301243))
((5202 3723 582373000) :INSERT
 (88 :BODY "<pre style=\"font-family: serif;\">Authentication
Authentication
Authentication!

Authentication
Authentication
Authentication
Authentication

Authentication
Authentication
Authentication

Authentication
Authentication
Authentication

Authentication
Authentication
Authentication
Authenticatiooooooooooon!</pre> 

<img src=\"/static/img/imaginationland-guy.jpg\" class=\"middle\" alt=\"A character from South Park who sang this bizarre atonal song consisting only of the word 'Imagination'\" />

<p>Gentlemen...</p>

<h3>BEHOLD!</h3>

<pre><span style=\"color: #7a378b;\">-module</span>(rsa_auth).
<span style=\"color: #7a378b;\">-behaviour</span>(gen_server).
<span style=\"color: #7a378b;\">-include_lib</span>(<span style=\"color: #8b2252;\">\"stdlib/include/qlc.hrl\"</span>).

<span style=\"color: #7a378b;\">-export</span>([<span style=\"color: #228b22;\">start/0</span>, <span style=\"color: #228b22;\">stop/0</span>]).
<span style=\"color: #7a378b;\">-export</span>([<span style=\"color: #228b22;\">init/1</span>, <span style=\"color: #228b22;\">handle_call/3</span>, <span style=\"color: #228b22;\">handle_cast/2</span>, <span style=\"color: #228b22;\">handle_info/2</span>,
         <span style=\"color: #228b22;\">terminate/2</span>, <span style=\"color: #228b22;\">code_change/3</span>]).

<span style=\"color: #7a378b;\">-export</span>([<span style=\"color: #228b22;\">gen_secret/2</span>, <span style=\"color: #228b22;\">verify/3</span>, <span style=\"color: #228b22;\">new_key/2</span>]).
<span style=\"color: #7a378b;\">-export</span>([<span style=\"color: #228b22;\">create/0</span>, <span style=\"color: #228b22;\">clear/0</span>, <span style=\"color: #228b22;\">recreate/0</span>, <span style=\"color: #228b22;\">find/1</span>, <span style=\"color: #228b22;\">now_to_seconds/1</span>]).

<span style=\"color: #7a378b;\">-record</span>(<span style=\"color: #228b22;\">pubkey</span>, {user_id, pubkey}).
<span style=\"color: #7a378b;\">-record</span>(<span style=\"color: #228b22;\">secret</span>, {timestamp, user_id, ip, plaintext}).

<span style=\"color: #b22222;\">%%% </span><span style=\"color: #b22222;\">API
</span><span style=\"color: #0000ff;\">new_key</span>(<span style=\"color: #a0522d;\">UserId</span>, <span style=\"color: #a0522d;\">Pubkey</span>) -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #228b22;\">gen_server</span>:<span style=\"color: #228b22;\">call</span>(?<span style=\"color: #008b8b;\">MODULE</span>, {new_key, <span style=\"color: #a0522d;\">UserId</span>, <span style=\"color: #a0522d;\">Pubkey</span>}).
<span style=\"color: #0000ff;\">gen_secret</span>(<span style=\"color: #a0522d;\">UserId</span>, <span style=\"color: #a0522d;\">IP</span>) -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #228b22;\">gen_server</span>:<span style=\"color: #228b22;\">call</span>(?<span style=\"color: #008b8b;\">MODULE</span>, {gen_secret, <span style=\"color: #a0522d;\">UserId</span>, <span style=\"color: #a0522d;\">IP</span>}).
<span style=\"color: #0000ff;\">verify</span>(<span style=\"color: #a0522d;\">UserId</span>, <span style=\"color: #a0522d;\">IP</span>, <span style=\"color: #a0522d;\">Sig</span>) -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #228b22;\">gen_server</span>:<span style=\"color: #228b22;\">call</span>(?<span style=\"color: #008b8b;\">MODULE</span>, {verify, <span style=\"color: #a0522d;\">UserId</span>, <span style=\"color: #a0522d;\">IP</span>, <span style=\"color: #a0522d;\">Sig</span>}).

<span style=\"color: #0000ff;\">handle_call</span>({gen_secret, <span style=\"color: #a0522d;\">UserId</span>, <span style=\"color: #a0522d;\">IP</span>}, <span style=\"color: #a0522d;\">_From</span>, <span style=\"color: #a0522d;\">State</span>) -&gt;<span style=\"color: #0000ff;\"> </span>
    <span style=\"color: #a0522d;\">Pubkey</span> = <span style=\"color: #228b22;\">find</span>({key, <span style=\"color: #a0522d;\">UserId</span>}),
    <span style=\"color: #a0522d;\">P</span> = <span style=\"color: #228b22;\">binary_to_hex</span>(<span style=\"color: #228b22;\">crypto</span>:<span style=\"color: #228b22;\">sha</span>(<span style=\"color: #228b22;\">crypto</span>:<span style=\"color: #228b22;\">rand_bytes</span>(32))),
    <span style=\"color: #a0522d;\">Ciphertext</span> = <span style=\"color: #7a378b;\">binary_to_list</span>(<span style=\"color: #228b22;\">m2crypto</span>:<span style=\"color: #228b22;\">encrypt</span>(<span style=\"color: #a0522d;\">Pubkey</span>, <span style=\"color: #a0522d;\">P</span>)),
    <span style=\"color: #a0522d;\">Secret</span> = #<span style=\"color: #228b22;\">secret</span>{timestamp=<span style=\"color: #7a378b;\">now</span>(), user_id=<span style=\"color: #a0522d;\">UserId</span>, ip=<span style=\"color: #a0522d;\">IP</span>, plaintext=<span style=\"color: #a0522d;\">P</span>},
    <span style=\"color: #228b22;\">db</span>:<span style=\"color: #228b22;\">transaction</span>(<span style=\"color: #a020f0;\">fun</span>() -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #228b22;\">mnesia</span>:<span style=\"color: #228b22;\">write</span>(<span style=\"color: #a0522d;\">Secret</span>) <span style=\"color: #a020f0;\">end</span>),
    {reply, <span style=\"color: #a0522d;\">Ciphertext</span>, <span style=\"color: #a0522d;\">State</span>};
<span style=\"color: #0000ff;\">handle_call</span>({verify, <span style=\"color: #a0522d;\">UserId</span>, <span style=\"color: #a0522d;\">IP</span>, <span style=\"color: #a0522d;\">Sig</span>}, <span style=\"color: #a0522d;\">_From</span>, <span style=\"color: #a0522d;\">State</span>) -&gt;
    <span style=\"color: #a0522d;\">Pubkey</span> = <span style=\"color: #228b22;\">find</span>({key, <span style=\"color: #a0522d;\">UserId</span>}),
    <span style=\"color: #a0522d;\">Secrets</span> = <span style=\"color: #228b22;\">find</span>({secrets, <span style=\"color: #a0522d;\">UserId</span>, <span style=\"color: #a0522d;\">IP</span>}),
    <span style=\"color: #a0522d;\">Res</span> = <span style=\"color: #228b22;\">lists</span>:<span style=\"color: #228b22;\">any</span>(
            <span style=\"color: #a020f0;\">fun</span>({<span style=\"color: #a0522d;\">T</span>, <span style=\"color: #a0522d;\">S</span>}) -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #228b22;\">verify_key</span>({<span style=\"color: #a0522d;\">T</span>, <span style=\"color: #a0522d;\">S</span>}, <span style=\"color: #a0522d;\">Pubkey</span>, <span style=\"color: #a0522d;\">Sig</span>) <span style=\"color: #a020f0;\">end</span>, 
            <span style=\"color: #a0522d;\">Secrets</span>),
    {reply, <span style=\"color: #a0522d;\">Res</span>, <span style=\"color: #a0522d;\">State</span>};
<span style=\"color: #0000ff;\">handle_call</span>({new_key, <span style=\"color: #a0522d;\">UserId</span>, <span style=\"color: #a0522d;\">Pubkey</span>}, <span style=\"color: #a0522d;\">_From</span>, <span style=\"color: #a0522d;\">State</span>) -&gt;<span style=\"color: #0000ff;\"> </span>
    <span style=\"color: #a0522d;\">Res</span> = <span style=\"color: #a020f0;\">case</span> <span style=\"color: #228b22;\">exists_p</span>(<span style=\"color: #a0522d;\">UserId</span>) <span style=\"color: #a020f0;\">of</span>
              false -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #a0522d;\">Fname</span> = <span style=\"color: #228b22;\">make_tempname</span>(<span style=\"color: #8b2252;\">\"/tmp\"</span>),
                       <span style=\"color: #228b22;\">file</span>:<span style=\"color: #228b22;\">write_file</span>(<span style=\"color: #a0522d;\">Fname</span>, <span style=\"color: #a0522d;\">Pubkey</span>),
                       <span style=\"color: #a0522d;\">K</span> = <span style=\"color: #228b22;\">m2crypto</span>:<span style=\"color: #228b22;\">split_key</span>(<span style=\"color: #a0522d;\">Fname</span>),
                       <span style=\"color: #a0522d;\">Rec</span> = #<span style=\"color: #228b22;\">pubkey</span>{user_id=<span style=\"color: #a0522d;\">UserId</span>, pubkey=<span style=\"color: #a0522d;\">K</span>},
                       ok = <span style=\"color: #228b22;\">db</span>:<span style=\"color: #228b22;\">transaction</span>(<span style=\"color: #a020f0;\">fun</span>() -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #228b22;\">mnesia</span>:<span style=\"color: #228b22;\">write</span>(<span style=\"color: #a0522d;\">Rec</span>) <span style=\"color: #a020f0;\">end</span>),
                       <span style=\"color: #228b22;\">file</span>:<span style=\"color: #228b22;\">delete_file</span>(<span style=\"color: #a0522d;\">Fname</span>),
                       <span style=\"color: #a0522d;\">K</span>;
              true -&gt;<span style=\"color: #0000ff;\"> </span>already_exists
          <span style=\"color: #a020f0;\">end</span>,
    {reply, <span style=\"color: #a0522d;\">Res</span>, <span style=\"color: #a0522d;\">State</span>}.

<span style=\"color: #b22222;\">%%% </span><span style=\"color: #b22222;\">rsa_auth-specific utility
</span><span style=\"color: #0000ff;\">verify_key</span>({<span style=\"color: #a0522d;\">T</span>, <span style=\"color: #a0522d;\">S</span>}, <span style=\"color: #a0522d;\">Pubkey</span>, <span style=\"color: #a0522d;\">Sig</span>) -&gt;
    <span style=\"color: #a020f0;\">case</span> <span style=\"color: #228b22;\">old_secret_p</span>(<span style=\"color: #a0522d;\">T</span>) <span style=\"color: #a020f0;\">of</span>
        true -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #228b22;\">revoke_secret</span>(<span style=\"color: #a0522d;\">T</span>),
                false;
        <span style=\"color: #a0522d;\">_</span> -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #a020f0;\">case</span> <span style=\"color: #228b22;\">m2crypto</span>:<span style=\"color: #228b22;\">verify</span>(<span style=\"color: #a0522d;\">Pubkey</span>, <span style=\"color: #a0522d;\">S</span>, <span style=\"color: #a0522d;\">Sig</span>) <span style=\"color: #a020f0;\">of</span>
                 true -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #228b22;\">revoke_secret</span>(<span style=\"color: #a0522d;\">T</span>),
                         true;
                 <span style=\"color: #a0522d;\">_</span> -&gt;<span style=\"color: #0000ff;\"> </span>false
             <span style=\"color: #a020f0;\">end</span>
    <span style=\"color: #a020f0;\">end</span>.

<span style=\"color: #0000ff;\">revoke_secret</span>(<span style=\"color: #a0522d;\">T</span>) -&gt;
    <span style=\"color: #228b22;\">db</span>:<span style=\"color: #228b22;\">transaction</span>(<span style=\"color: #a020f0;\">fun</span>() -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #228b22;\">mnesia</span>:<span style=\"color: #228b22;\">delete</span>({secret, <span style=\"color: #a0522d;\">T</span>}) <span style=\"color: #a020f0;\">end</span>).

<span style=\"color: #0000ff;\">old_secret_p</span>(<span style=\"color: #a0522d;\">T</span>) -&gt;<span style=\"color: #0000ff;\"> </span>
    <span style=\"color: #b22222;\">%% </span><span style=\"color: #b22222;\">it's old if the timestamp is older than 5 minutes
</span>    300 &lt; (<span style=\"color: #228b22;\">now_to_seconds</span>(<span style=\"color: #7a378b;\">now</span>()) - <span style=\"color: #228b22;\">now_to_seconds</span>(<span style=\"color: #a0522d;\">T</span>)).

<span style=\"color: #0000ff;\">exists_p</span>(<span style=\"color: #a0522d;\">UserId</span>) -&gt;<span style=\"color: #0000ff;\"> </span>
    <span style=\"color: #a020f0;\">try</span>
        <span style=\"color: #228b22;\">find</span>({key, <span style=\"color: #a0522d;\">UserId</span>})
    <span style=\"color: #a020f0;\">catch</span>
        error:<span style=\"color: #a0522d;\">_</span> -&gt;<span style=\"color: #0000ff;\"> </span>false
    <span style=\"color: #a020f0;\">end</span>.

<span style=\"color: #b22222;\">%%% </span><span style=\"color: #b22222;\">DB related
</span><span style=\"color: #0000ff;\">find</span>({key, <span style=\"color: #a0522d;\">UserId</span>}) -&gt;<span style=\"color: #0000ff;\"> </span>
    [<span style=\"color: #a0522d;\">Rec</span>] = <span style=\"color: #228b22;\">db</span>:<span style=\"color: #228b22;\">do</span>(<span style=\"color: #228b22;\">qlc</span>:<span style=\"color: #228b22;\">q</span>([<span style=\"color: #a0522d;\">X</span>#<span style=\"color: #228b22;\">pubkey</span>.pubkey <span style=\"color: #a020f0;\">||</span> <span style=\"color: #a0522d;\">X</span> <span style=\"color: #a020f0;\">&lt;-</span> <span style=\"color: #228b22;\">mnesia</span>:<span style=\"color: #228b22;\">table</span>(pubkey), <span style=\"color: #a0522d;\">X</span>#<span style=\"color: #228b22;\">pubkey</span>.user_id =:= <span style=\"color: #a0522d;\">UserId</span>])),
    <span style=\"color: #a0522d;\">Rec</span>;
<span style=\"color: #0000ff;\">find</span>({secrets, <span style=\"color: #a0522d;\">UserId</span>, <span style=\"color: #a0522d;\">IP</span>}) -&gt;<span style=\"color: #0000ff;\"> </span>
    <span style=\"color: #228b22;\">db</span>:<span style=\"color: #228b22;\">do</span>(<span style=\"color: #228b22;\">qlc</span>:<span style=\"color: #228b22;\">q</span>([{<span style=\"color: #a0522d;\">X</span>#<span style=\"color: #228b22;\">secret</span>.timestamp, <span style=\"color: #a0522d;\">X</span>#<span style=\"color: #228b22;\">secret</span>.plaintext} <span style=\"color: #a020f0;\">||</span> 
                    <span style=\"color: #a0522d;\">X</span> <span style=\"color: #a020f0;\">&lt;-</span> <span style=\"color: #228b22;\">mnesia</span>:<span style=\"color: #228b22;\">table</span>(secret), 
                    <span style=\"color: #a0522d;\">X</span>#<span style=\"color: #228b22;\">secret</span>.user_id =:= <span style=\"color: #a0522d;\">UserId</span>,
                    <span style=\"color: #a0522d;\">X</span>#<span style=\"color: #228b22;\">secret</span>.ip =:= <span style=\"color: #a0522d;\">IP</span>])).

<span style=\"color: #0000ff;\">create</span>() -&gt;
    <span style=\"color: #228b22;\">mnesia</span>:<span style=\"color: #228b22;\">create_table</span>(pubkey, [{type, ordered_set}, {disc_copies, [<span style=\"color: #7a378b;\">node</span>()]}, {attributes, <span style=\"color: #228b22;\">record_info</span>(fields, pubkey)}]),
    <span style=\"color: #228b22;\">mnesia</span>:<span style=\"color: #228b22;\">create_table</span>(secret, [{type, ordered_set}, {disc_copies, [<span style=\"color: #7a378b;\">node</span>()]}, {attributes, <span style=\"color: #228b22;\">record_info</span>(fields, secret)}]).

<span style=\"color: #0000ff;\">clear</span>() -&gt;
    <span style=\"color: #228b22;\">mnesia</span>:<span style=\"color: #228b22;\">delete_table</span>(pubkey),
    <span style=\"color: #228b22;\">mnesia</span>:<span style=\"color: #228b22;\">delete_table</span>(secret).

<span style=\"color: #0000ff;\">recreate</span>() -&gt;
    <span style=\"color: #228b22;\">clear</span>(),
    <span style=\"color: #228b22;\">create</span>().

<span style=\"color: #b22222;\">%%% </span><span style=\"color: #b22222;\">general utility
</span><span style=\"color: #0000ff;\">now_to_seconds</span>(<span style=\"color: #a0522d;\">Now</span>) -&gt;
    <span style=\"color: #228b22;\">calendar</span>:<span style=\"color: #228b22;\">datetime_to_gregorian_seconds</span>(<span style=\"color: #228b22;\">calendar</span>:<span style=\"color: #228b22;\">now_to_datetime</span>(<span style=\"color: #a0522d;\">Now</span>)).

<span style=\"color: #0000ff;\">make_tempname</span>() -&gt;
    {<span style=\"color: #a0522d;\">A</span>, <span style=\"color: #a0522d;\">B</span>, <span style=\"color: #a0522d;\">C</span>} = <span style=\"color: #7a378b;\">now</span>(),
    [<span style=\"color: #a0522d;\">D</span>, <span style=\"color: #a0522d;\">E</span>, <span style=\"color: #a0522d;\">F</span>] = <span style=\"color: #228b22;\">lists</span>:<span style=\"color: #228b22;\">map</span>(<span style=\"color: #a020f0;\">fun</span> <span style=\"color: #228b22;\">integer_to_list/1</span>, [<span style=\"color: #a0522d;\">A</span>, <span style=\"color: #a0522d;\">B</span>, <span style=\"color: #a0522d;\">C</span>]),
    <span style=\"color: #228b22;\">lists</span>:<span style=\"color: #228b22;\">append</span>([<span style=\"color: #8b2252;\">\"tmp.\"</span>, <span style=\"color: #a0522d;\">D</span>, <span style=\"color: #8b2252;\">\".\"</span>, <span style=\"color: #a0522d;\">E</span>, <span style=\"color: #8b2252;\">\".\"</span>, <span style=\"color: #a0522d;\">F</span>]).
<span style=\"color: #0000ff;\">make_tempname</span>(<span style=\"color: #a0522d;\">TargetDir</span>) -&gt;
    <span style=\"color: #228b22;\">filename</span>:<span style=\"color: #228b22;\">absname_join</span>(<span style=\"color: #a0522d;\">TargetDir</span>, <span style=\"color: #228b22;\">make_tempname</span>()).

<span style=\"color: #0000ff;\">binary_to_hex</span>(<span style=\"color: #a0522d;\">Bin</span>) -&gt;
    <span style=\"color: #228b22;\">lists</span>:<span style=\"color: #228b22;\">flatten</span>([<span style=\"color: #228b22;\">io_lib</span>:<span style=\"color: #228b22;\">format</span>(<span style=\"color: #8b2252;\">\"~2.16.0B\"</span>, [<span style=\"color: #a0522d;\">X</span>]) <span style=\"color: #a020f0;\">||</span>
                      <span style=\"color: #a0522d;\">X</span> <span style=\"color: #a020f0;\">&lt;-</span> <span style=\"color: #7a378b;\">binary_to_list</span>(<span style=\"color: #a0522d;\">Bin</span>)]).

<span style=\"color: #b22222;\">%%%%%%%%%%%%%%%%%%%% </span><span style=\"color: #b22222;\">generic actions
</span><span style=\"color: #0000ff;\">start</span>() -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #228b22;\">gen_server</span>:<span style=\"color: #228b22;\">start_link</span>({local, ?<span style=\"color: #008b8b;\">MODULE</span>}, ?<span style=\"color: #008b8b;\">MODULE</span>, [], []).
<span style=\"color: #0000ff;\">stop</span>() -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #228b22;\">gen_server</span>:<span style=\"color: #228b22;\">call</span>(?<span style=\"color: #008b8b;\">MODULE</span>, stop).

<span style=\"color: #b22222;\">%%%%%%%%%%%%%%%%%%%% </span><span style=\"color: #b22222;\">gen_server handlers
</span><span style=\"color: #0000ff;\">init</span>([]) -&gt;<span style=\"color: #0000ff;\"> </span>{ok, []}.
<span style=\"color: #0000ff;\">handle_cast</span>(<span style=\"color: #a0522d;\">_Msg</span>, <span style=\"color: #a0522d;\">State</span>) -&gt;<span style=\"color: #0000ff;\"> </span>{noreply, <span style=\"color: #a0522d;\">State</span>}.
<span style=\"color: #0000ff;\">handle_info</span>(<span style=\"color: #a0522d;\">_Info</span>, <span style=\"color: #a0522d;\">State</span>) -&gt;<span style=\"color: #0000ff;\"> </span>{noreply, <span style=\"color: #a0522d;\">State</span>}.
<span style=\"color: #0000ff;\">terminate</span>(<span style=\"color: #a0522d;\">_Reason</span>, <span style=\"color: #a0522d;\">_State</span>) -&gt;<span style=\"color: #0000ff;\"> </span>ok.
<span style=\"color: #0000ff;\">code_change</span>(<span style=\"color: #a0522d;\">_OldVsn</span>, <span style=\"color: #a0522d;\">State</span>, <span style=\"color: #a0522d;\">_Extra</span>) -&gt;<span style=\"color: #0000ff;\"> </span>{ok, <span style=\"color: #a0522d;\">State</span>}.</pre>

<p>Actually, that's way too intimidating, given what this thing does. Lets break that shit down, and strip the <code>gen_server</code>/<code>mnesia</code>-related boilerplate. Chunklet the first is the meatiest:</p>

<pre><span style=\"color: #b22222;\">%%% </span><span style=\"color: #b22222;\">API
</span><span style=\"color: #0000ff;\">new_key</span>(<span style=\"color: #a0522d;\">UserId</span>, <span style=\"color: #a0522d;\">Pubkey</span>) -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #228b22;\">gen_server</span>:<span style=\"color: #228b22;\">call</span>(?<span style=\"color: #008b8b;\">MODULE</span>, {new_key, <span style=\"color: #a0522d;\">UserId</span>, <span style=\"color: #a0522d;\">Pubkey</span>}).
<span style=\"color: #0000ff;\">gen_secret</span>(<span style=\"color: #a0522d;\">UserId</span>, <span style=\"color: #a0522d;\">IP</span>) -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #228b22;\">gen_server</span>:<span style=\"color: #228b22;\">call</span>(?<span style=\"color: #008b8b;\">MODULE</span>, {gen_secret, <span style=\"color: #a0522d;\">UserId</span>, <span style=\"color: #a0522d;\">IP</span>}).
<span style=\"color: #0000ff;\">verify</span>(<span style=\"color: #a0522d;\">UserId</span>, <span style=\"color: #a0522d;\">IP</span>, <span style=\"color: #a0522d;\">Sig</span>) -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #228b22;\">gen_server</span>:<span style=\"color: #228b22;\">call</span>(?<span style=\"color: #008b8b;\">MODULE</span>, {verify, <span style=\"color: #a0522d;\">UserId</span>, <span style=\"color: #a0522d;\">IP</span>, <span style=\"color: #a0522d;\">Sig</span>}).

<span style=\"color: #0000ff;\">handle_call</span>({gen_secret, <span style=\"color: #a0522d;\">UserId</span>, <span style=\"color: #a0522d;\">IP</span>}, <span style=\"color: #a0522d;\">_From</span>, <span style=\"color: #a0522d;\">State</span>) -&gt;<span style=\"color: #0000ff;\"> </span>
    <span style=\"color: #a0522d;\">Pubkey</span> = <span style=\"color: #228b22;\">find</span>({key, <span style=\"color: #a0522d;\">UserId</span>}),
    <span style=\"color: #a0522d;\">P</span> = <span style=\"color: #228b22;\">binary_to_hex</span>(<span style=\"color: #228b22;\">crypto</span>:<span style=\"color: #228b22;\">sha</span>(<span style=\"color: #228b22;\">crypto</span>:<span style=\"color: #228b22;\">rand_bytes</span>(32))),
    <span style=\"color: #a0522d;\">Ciphertext</span> = <span style=\"color: #7a378b;\">binary_to_list</span>(<span style=\"color: #228b22;\">m2crypto</span>:<span style=\"color: #228b22;\">encrypt</span>(<span style=\"color: #a0522d;\">Pubkey</span>, <span style=\"color: #a0522d;\">P</span>)),
    <span style=\"color: #a0522d;\">Secret</span> = #<span style=\"color: #228b22;\">secret</span>{timestamp=<span style=\"color: #7a378b;\">now</span>(), user_id=<span style=\"color: #a0522d;\">UserId</span>, ip=<span style=\"color: #a0522d;\">IP</span>, plaintext=<span style=\"color: #a0522d;\">P</span>},
    <span style=\"color: #228b22;\">db</span>:<span style=\"color: #228b22;\">transaction</span>(<span style=\"color: #a020f0;\">fun</span>() -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #228b22;\">mnesia</span>:<span style=\"color: #228b22;\">write</span>(<span style=\"color: #a0522d;\">Secret</span>) <span style=\"color: #a020f0;\">end</span>),
    {reply, <span style=\"color: #a0522d;\">Ciphertext</span>, <span style=\"color: #a0522d;\">State</span>};
<span style=\"color: #0000ff;\">handle_call</span>({verify, <span style=\"color: #a0522d;\">UserId</span>, <span style=\"color: #a0522d;\">IP</span>, <span style=\"color: #a0522d;\">Sig</span>}, <span style=\"color: #a0522d;\">_From</span>, <span style=\"color: #a0522d;\">State</span>) -&gt;
    <span style=\"color: #a0522d;\">Pubkey</span> = <span style=\"color: #228b22;\">find</span>({key, <span style=\"color: #a0522d;\">UserId</span>}),
    <span style=\"color: #a0522d;\">Secrets</span> = <span style=\"color: #228b22;\">find</span>({secrets, <span style=\"color: #a0522d;\">UserId</span>, <span style=\"color: #a0522d;\">IP</span>}),
    <span style=\"color: #a0522d;\">Res</span> = <span style=\"color: #228b22;\">lists</span>:<span style=\"color: #228b22;\">any</span>(
            <span style=\"color: #a020f0;\">fun</span>({<span style=\"color: #a0522d;\">T</span>, <span style=\"color: #a0522d;\">S</span>}) -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #228b22;\">verify_key</span>({<span style=\"color: #a0522d;\">T</span>, <span style=\"color: #a0522d;\">S</span>}, <span style=\"color: #a0522d;\">Pubkey</span>, <span style=\"color: #a0522d;\">Sig</span>) <span style=\"color: #a020f0;\">end</span>, 
            <span style=\"color: #a0522d;\">Secrets</span>),
    {reply, <span style=\"color: #a0522d;\">Res</span>, <span style=\"color: #a0522d;\">State</span>};
<span style=\"color: #0000ff;\">handle_call</span>({new_key, <span style=\"color: #a0522d;\">UserId</span>, <span style=\"color: #a0522d;\">Pubkey</span>}, <span style=\"color: #a0522d;\">_From</span>, <span style=\"color: #a0522d;\">State</span>) -&gt;<span style=\"color: #0000ff;\"> </span>
    <span style=\"color: #a0522d;\">Res</span> = <span style=\"color: #a020f0;\">case</span> <span style=\"color: #228b22;\">exists_p</span>(<span style=\"color: #a0522d;\">UserId</span>) <span style=\"color: #a020f0;\">of</span>
              false -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #a0522d;\">Fname</span> = <span style=\"color: #228b22;\">make_tempname</span>(<span style=\"color: #8b2252;\">\"/tmp\"</span>),
                       <span style=\"color: #228b22;\">file</span>:<span style=\"color: #228b22;\">write_file</span>(<span style=\"color: #a0522d;\">Fname</span>, <span style=\"color: #a0522d;\">Pubkey</span>),
                       <span style=\"color: #a0522d;\">K</span> = <span style=\"color: #228b22;\">m2crypto</span>:<span style=\"color: #228b22;\">split_key</span>(<span style=\"color: #a0522d;\">Fname</span>),
                       <span style=\"color: #a0522d;\">Rec</span> = #<span style=\"color: #228b22;\">pubkey</span>{user_id=<span style=\"color: #a0522d;\">UserId</span>, pubkey=<span style=\"color: #a0522d;\">K</span>},
                       ok = <span style=\"color: #228b22;\">db</span>:<span style=\"color: #228b22;\">transaction</span>(<span style=\"color: #a020f0;\">fun</span>() -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #228b22;\">mnesia</span>:<span style=\"color: #228b22;\">write</span>(<span style=\"color: #a0522d;\">Rec</span>) <span style=\"color: #a020f0;\">end</span>),
                       <span style=\"color: #228b22;\">file</span>:<span style=\"color: #228b22;\">delete_file</span>(<span style=\"color: #a0522d;\">Fname</span>),
                       <span style=\"color: #a0522d;\">K</span>;
              true -&gt;<span style=\"color: #0000ff;\"> </span>already_exists
          <span style=\"color: #a020f0;\">end</span>,
    {reply, <span style=\"color: #a0522d;\">Res</span>, <span style=\"color: #a0522d;\">State</span>}.</pre>

<p>That's essentially the entire external API for this style of authentication<a href=\"#foot-Sat-Jun-23-012959EDT-2012\" name=\"note-Sat-Jun-23-012959EDT-2012\">[1]</a>.</p>

<p>The exported functions are self-explanatory, so lets focus in on the <code><span style=\"color: #228b22;\">handle_call/3</span></code> clauses. I mentioned <a href=\"/article?name=rsa-crypto.html\">last week</a> that Erlang's own <code>crypto</code> functions don't provide a way to generate keys, and were having trouble importing any RSA 4096 keypairs I tried to work with, pretty much regardless of source. So I decided to call out to python for the actual encryption (more on that later). <code>gen_secret</code> needs to be accompanied by a <code>UserId</code><a href=\"#foot-Sat-Jun-23-013539EDT-2012\" name=\"note-Sat-Jun-23-013539EDT-2012\">[2]</a> and an <code>IP</code><a href=\"#foot-Sat-Jun-23-013544EDT-2012\" name=\"note-Sat-Jun-23-013544EDT-2012\">[3]</a>. The output is a random string, encrypted with the key of the given user, and associated with the given IP (if we wanted bi-directional authentication, we'd also have the server sign it and send the signature along).</p>

<p><code>verify</code>ing a signature requires the same two pieces of information, as well as the <code>Sig</code>nature. We select the set of secrets on file for the given user coming from the given IP, select the appropriate key, and then try to verify against each available secret. Verification happens in python too. In fact, lets take a quick look at that Erlang-side verification steps before we move on to handling the <code>new_key</code> message.</p>

<pre><span style=\"color: #b22222;\">%%% </span><span style=\"color: #b22222;\">rsa_auth-specific utility
</span><span style=\"color: #0000ff;\">verify_key</span>({<span style=\"color: #a0522d;\">T</span>, <span style=\"color: #a0522d;\">S</span>}, <span style=\"color: #a0522d;\">Pubkey</span>, <span style=\"color: #a0522d;\">Sig</span>) -&gt;
    <span style=\"color: #a020f0;\">case</span> <span style=\"color: #228b22;\">old_secret_p</span>(<span style=\"color: #a0522d;\">T</span>) <span style=\"color: #a020f0;\">of</span>
        true -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #228b22;\">revoke_secret</span>(<span style=\"color: #a0522d;\">T</span>),
                false;
        <span style=\"color: #a0522d;\">_</span> -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #a020f0;\">case</span> <span style=\"color: #228b22;\">m2crypto</span>:<span style=\"color: #228b22;\">verify</span>(<span style=\"color: #a0522d;\">Pubkey</span>, <span style=\"color: #a0522d;\">S</span>, <span style=\"color: #a0522d;\">Sig</span>) <span style=\"color: #a020f0;\">of</span>
                 true -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #228b22;\">revoke_secret</span>(<span style=\"color: #a0522d;\">T</span>),
                         true;
                 <span style=\"color: #a0522d;\">_</span> -&gt;<span style=\"color: #0000ff;\"> </span>false
             <span style=\"color: #a020f0;\">end</span>
    <span style=\"color: #a020f0;\">end</span>.

<span style=\"color: #0000ff;\">revoke_secret</span>(<span style=\"color: #a0522d;\">T</span>) -&gt;
    <span style=\"color: #228b22;\">db</span>:<span style=\"color: #228b22;\">transaction</span>(<span style=\"color: #a020f0;\">fun</span>() -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #228b22;\">mnesia</span>:<span style=\"color: #228b22;\">delete</span>({secret, <span style=\"color: #a0522d;\">T</span>}) <span style=\"color: #a020f0;\">end</span>).

<span style=\"color: #0000ff;\">old_secret_p</span>(<span style=\"color: #a0522d;\">T</span>) -&gt;<span style=\"color: #0000ff;\"> </span>
    <span style=\"color: #b22222;\">%% </span><span style=\"color: #b22222;\">it's old if the timestamp is older than 5 minutes
</span>    300 &lt; (<span style=\"color: #228b22;\">now_to_seconds</span>(<span style=\"color: #7a378b;\">now</span>()) - <span style=\"color: #228b22;\">now_to_seconds</span>(<span style=\"color: #a0522d;\">T</span>)).</pre>

<p>That seems reasonably self-explanatory too<a href=\"#foot-Sat-Jun-23-013559EDT-2012\" name=\"note-Sat-Jun-23-013559EDT-2012\">[4]</a>. We check whether a given secret is too old, revoking it without granting access if it is, then calling out to python for the actual verification step (coming soon, I promise). If it succeeds, we revoke it and grant access. Note that by the time we've gotten to this point, the keys have already been verified for a matching IP. Right, back to the last clause in <code><span style=\"color: #228b22;\">handle_call/3</span></code></p>

<pre><span style=\"color: #0000ff;\">handle_call</span>({new_key, <span style=\"color: #a0522d;\">UserId</span>, <span style=\"color: #a0522d;\">Pubkey</span>}, <span style=\"color: #a0522d;\">_From</span>, <span style=\"color: #a0522d;\">State</span>) -&gt;<span style=\"color: #0000ff;\"> </span>
    <span style=\"color: #a0522d;\">Res</span> = <span style=\"color: #a020f0;\">case</span> <span style=\"color: #228b22;\">exists_p</span>(<span style=\"color: #a0522d;\">UserId</span>) <span style=\"color: #a020f0;\">of</span>
              false -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #a0522d;\">Fname</span> = <span style=\"color: #228b22;\">make_tempname</span>(<span style=\"color: #8b2252;\">\"/tmp\"</span>),
                       <span style=\"color: #228b22;\">file</span>:<span style=\"color: #228b22;\">write_file</span>(<span style=\"color: #a0522d;\">Fname</span>, <span style=\"color: #a0522d;\">Pubkey</span>),
                       <span style=\"color: #a0522d;\">K</span> = <span style=\"color: #228b22;\">m2crypto</span>:<span style=\"color: #228b22;\">split_key</span>(<span style=\"color: #a0522d;\">Fname</span>),
                       <span style=\"color: #a0522d;\">Rec</span> = #<span style=\"color: #228b22;\">pubkey</span>{user_id=<span style=\"color: #a0522d;\">UserId</span>, pubkey=<span style=\"color: #a0522d;\">K</span>},
                       ok = <span style=\"color: #228b22;\">db</span>:<span style=\"color: #228b22;\">transaction</span>(<span style=\"color: #a020f0;\">fun</span>() -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #228b22;\">mnesia</span>:<span style=\"color: #228b22;\">write</span>(<span style=\"color: #a0522d;\">Rec</span>) <span style=\"color: #a020f0;\">end</span>),
                       <span style=\"color: #228b22;\">file</span>:<span style=\"color: #228b22;\">delete_file</span>(<span style=\"color: #a0522d;\">Fname</span>),
                       <span style=\"color: #a0522d;\">K</span>;
              true -&gt;<span style=\"color: #0000ff;\"> </span>already_exists
          <span style=\"color: #a020f0;\">end</span>,
    {reply, <span style=\"color: #a0522d;\">Res</span>, <span style=\"color: #a0522d;\">State</span>}.</pre>

<p>The process for storing a new key might take some explaining. We're expecting the <i>contents</i> of a PEM key file, rather than a file name because doing otherwise would force us to put this module on the same machine as the caller<a href=\"#foot-Sat-Jun-23-013621EDT-2012\" name=\"note-Sat-Jun-23-013621EDT-2012\">[5]</a>. However, that raises a bit of a problem; M2Crypto can't import a pubkey from a string. It <i>can</i> do so for a keypair, but not if you don't have the private key on hand, which we won't. Ever. So what we need to do is create a temporary file somewhere, write the key out to it, then point M2Crypto at that to get the components back in a more digestible format. After that, it's just a matter of storing the key and cleaning up.</p>

<p>Ok, it's Python time</p>

<pre><span style=\"color: #7a378b;\">-module</span>(m2crypto).
<span style=\"color: #7a378b;\">-behaviour</span>(gen_server).

<span style=\"color: #7a378b;\">-export</span>([<span style=\"color: #228b22;\">start/0</span>, <span style=\"color: #228b22;\">stop/0</span>]).
<span style=\"color: #7a378b;\">-export</span>([<span style=\"color: #228b22;\">init/1</span>, <span style=\"color: #228b22;\">handle_call/3</span>, <span style=\"color: #228b22;\">handle_cast/2</span>, <span style=\"color: #228b22;\">handle_info/2</span>,
         <span style=\"color: #228b22;\">terminate/2</span>, <span style=\"color: #228b22;\">code_change/3</span>]).

<span style=\"color: #7a378b;\">-export</span>([<span style=\"color: #228b22;\">encrypt/2</span>, <span style=\"color: #228b22;\">verify/3</span>, <span style=\"color: #228b22;\">split_key/1</span>]).

<span style=\"color: #0000ff;\">encrypt</span>({<span style=\"color: #a0522d;\">E</span>, <span style=\"color: #a0522d;\">N</span>}, <span style=\"color: #a0522d;\">Message</span>) -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #228b22;\">gen_server</span>:<span style=\"color: #228b22;\">call</span>(?<span style=\"color: #008b8b;\">MODULE</span>, {encrypt, <span style=\"color: #a0522d;\">E</span>, <span style=\"color: #a0522d;\">N</span>, <span style=\"color: #a0522d;\">Message</span>}).
<span style=\"color: #0000ff;\">verify</span>({<span style=\"color: #a0522d;\">E</span>, <span style=\"color: #a0522d;\">N</span>}, <span style=\"color: #a0522d;\">Message</span>, <span style=\"color: #a0522d;\">Signature</span>) -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #228b22;\">gen_server</span>:<span style=\"color: #228b22;\">call</span>(?<span style=\"color: #008b8b;\">MODULE</span>, {verify, <span style=\"color: #a0522d;\">E</span>, <span style=\"color: #a0522d;\">N</span>, <span style=\"color: #a0522d;\">Message</span>, <span style=\"color: #a0522d;\">Signature</span>}).
<span style=\"color: #0000ff;\">split_key</span>(<span style=\"color: #a0522d;\">Filename</span>) -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #228b22;\">gen_server</span>:<span style=\"color: #228b22;\">call</span>(?<span style=\"color: #008b8b;\">MODULE</span>, {split_key, <span style=\"color: #a0522d;\">Filename</span>}).

<span style=\"color: #0000ff;\">handle_call</span>({<span style=\"color: #8b2252;\">'EXIT'</span>, <span style=\"color: #a0522d;\">_Port</span>, <span style=\"color: #a0522d;\">Reason</span>}, <span style=\"color: #a0522d;\">_From</span>, <span style=\"color: #a0522d;\">_State</span>) -&gt;
    <span style=\"color: #7a378b;\">exit</span>({port_terminated, <span style=\"color: #a0522d;\">Reason</span>});
<span style=\"color: #0000ff;\">handle_call</span>(<span style=\"color: #a0522d;\">Message</span>, <span style=\"color: #a0522d;\">_From</span>, <span style=\"color: #a0522d;\">Port</span>) -&gt;
    <span style=\"color: #7a378b;\">port_command</span>(<span style=\"color: #a0522d;\">Port</span>, <span style=\"color: #7a378b;\">term_to_binary</span>(<span style=\"color: #a0522d;\">Message</span>)),
    <span style=\"color: #a020f0;\">receive</span>
        {<span style=\"color: #a0522d;\">State</span>, {data, <span style=\"color: #a0522d;\">Data</span>}} -&gt;<span style=\"color: #0000ff;\"> </span>
            {reply, <span style=\"color: #7a378b;\">binary_to_term</span>(<span style=\"color: #a0522d;\">Data</span>), <span style=\"color: #a0522d;\">State</span>}
    <span style=\"color: #a020f0;\">after</span> 3000 -&gt;<span style=\"color: #0000ff;\"> </span>
            <span style=\"color: #7a378b;\">exit</span>(timeout)
    <span style=\"color: #a020f0;\">end</span>.

<span style=\"color: #b22222;\">%%%%%%%%%%%%%%%%%%%% </span><span style=\"color: #b22222;\">generic actions
</span><span style=\"color: #0000ff;\">start</span>() -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #228b22;\">gen_server</span>:<span style=\"color: #228b22;\">start_link</span>({local, ?<span style=\"color: #008b8b;\">MODULE</span>}, ?<span style=\"color: #008b8b;\">MODULE</span>, [], []).
<span style=\"color: #0000ff;\">stop</span>() -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #228b22;\">gen_server</span>:<span style=\"color: #228b22;\">call</span>(?<span style=\"color: #008b8b;\">MODULE</span>, stop).

<span style=\"color: #b22222;\">%%%%%%%%%%%%%%%%%%%% </span><span style=\"color: #b22222;\">gen_server handlers
</span><span style=\"color: #0000ff;\">init</span>([]) -&gt;<span style=\"color: #0000ff;\"> </span>{ok, <span style=\"color: #7a378b;\">open_port</span>({spawn, <span style=\"color: #8b2252;\">\"python -u m2crypto.py\"</span>}, [{packet, 4}, binary, use_stdio])}.
<span style=\"color: #0000ff;\">handle_cast</span>(<span style=\"color: #a0522d;\">_Msg</span>, <span style=\"color: #a0522d;\">State</span>) -&gt;<span style=\"color: #0000ff;\"> </span>{noreply, <span style=\"color: #a0522d;\">State</span>}.
<span style=\"color: #0000ff;\">handle_info</span>(<span style=\"color: #a0522d;\">_Info</span>, <span style=\"color: #a0522d;\">State</span>) -&gt;<span style=\"color: #0000ff;\"> </span>{noreply, <span style=\"color: #a0522d;\">State</span>}.
<span style=\"color: #0000ff;\">terminate</span>(<span style=\"color: #a0522d;\">_Reason</span>, <span style=\"color: #a0522d;\">State</span>) -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #a0522d;\">State</span> ! {<span style=\"color: #7a378b;\">self</span>(), close}, ok.
<span style=\"color: #0000ff;\">code_change</span>(<span style=\"color: #a0522d;\">_OldVsn</span>, <span style=\"color: #a0522d;\">State</span>, <span style=\"color: #a0522d;\">_Extra</span>) -&gt;<span style=\"color: #0000ff;\"> </span>{ok, <span style=\"color: #a0522d;\">State</span>}.</pre>

<pre><span style=\"color: #a020f0;\">from</span> erlport <span style=\"color: #a020f0;\">import</span> Port, Protocol, String
<span style=\"color: #a020f0;\">import</span> M2Crypto
        
<span style=\"color: #a020f0;\">class</span> <span style=\"color: #228b22;\">M2cryptoProtocol</span>(Protocol):
    <span style=\"color: #a020f0;\">def</span> <span style=\"color: #0000ff;\">handle_split_key</span>(<span style=\"color: #a020f0;\">self</span>, filename):
        pubkey = M2Crypto.RSA.load_pub_key(String(filename))
        <span style=\"color: #a020f0;\">return</span> (pubkey.e, pubkey.n)
    <span style=\"color: #a020f0;\">def</span> <span style=\"color: #0000ff;\">handle_encrypt</span>(<span style=\"color: #a020f0;\">self</span>, e, n, message):
        pubkey = M2Crypto.RSA.new_pub_key((<span style=\"color: #7a378b;\">str</span>(e), <span style=\"color: #7a378b;\">str</span>(n)))
        ciphertext = pubkey.public_encrypt(String(message), M2Crypto.RSA.pkcs1_oaep_padding)
        <span style=\"color: #a020f0;\">return</span> ciphertext.encode(<span style=\"color: #8b2252;\">'base64'</span>)
    <span style=\"color: #a020f0;\">def</span> <span style=\"color: #0000ff;\">handle_verify</span>(<span style=\"color: #a020f0;\">self</span>, e, n, message, sig):
        pubkey = M2Crypto.RSA.new_pub_key((<span style=\"color: #7a378b;\">str</span>(e), <span style=\"color: #7a378b;\">str</span>(n)))
        <span style=\"color: #a020f0;\">if</span> pubkey.verify_rsassa_pss(String(message), String(sig).decode(<span style=\"color: #8b2252;\">'base64'</span>)):
            <span style=\"color: #a020f0;\">return</span> <span style=\"color: #a020f0;\">True</span>
        <span style=\"color: #a020f0;\">else</span>:
            <span style=\"color: #a020f0;\">return</span> <span style=\"color: #a020f0;\">False</span>

<span style=\"color: #a020f0;\">if</span> <span style=\"color: #7a378b;\">__name__</span> == <span style=\"color: #8b2252;\">\"__main__\"</span>:
    M2cryptoProtocol().run(Port(packet=4, use_stdio=<span style=\"color: #a020f0;\">True</span>))</pre>

<p>Wordy crap on the Erlang side aside, this is <i>reasonably</i> simple. <code>split_key</code> breaks a Public Key PEM into its <code>N</code> and <code>exponent</code>. The reason I bother doing that is that, as I mentioned, while M2Crypto <i>can't</i> import a pubkey from a PEM, it <i>can</i> stitch one back together from its components. In other words, we're only storing keys as <code>{E, N}</code> tuples for the sake of letting M2Crypto do the work without intermediate files. <code>encrypt</code> and <code>verify</code> should be entirely self-explanatory.</p>

<p>And, that's that. Well, ok, on the backend anyway. Which means we've got two more pieces to go through. Here's what the user-facing <a href=\"http://nitrogenproject.com/\">Nitrogen</a> module looks like</p>

<pre><span style=\"color: #7a378b;\">-module</span> (rsa_auth).
<span style=\"color: #7a378b;\">-compile</span>(export_all).
<span style=\"color: #7a378b;\">-include_lib</span>(<span style=\"color: #8b2252;\">\"nitrogen_core/include/wf.hrl\"</span>).

<span style=\"color: #0000ff;\">main</span>() -&gt;<span style=\"color: #0000ff;\"> </span>#<span style=\"color: #228b22;\">template</span> { file=<span style=\"color: #8b2252;\">\"./site/templates/bare.html\"</span> }.

<span style=\"color: #0000ff;\">title</span>() -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #8b2252;\">\"Manual RSA Auth\"</span>.

<span style=\"color: #0000ff;\">body</span>() -&gt;<span style=\"color: #0000ff;\"> </span>
    [
     #<span style=\"color: #228b22;\">label</span> {text=<span style=\"color: #8b2252;\">\"Username: \"</span>},
     #<span style=\"color: #228b22;\">textbox</span> { id=username, next=sendButton },
     #<span style=\"color: #228b22;\">button</span> { id=sendButton, text=<span style=\"color: #8b2252;\">\"Request Secret\"</span>, postback=send_user },

     #<span style=\"color: #228b22;\">panel</span> { id=auth_token }
    ].

<span style=\"color: #0000ff;\">event</span>(send_user) -&gt;
    <span style=\"color: #a0522d;\">Token</span> = <span style=\"color: #228b22;\">rpc</span>:<span style=\"color: #228b22;\">call</span>(<span style=\"color: #8b2252;\">'trivial_user@127.0.1.1'</span>, rsa_auth, gen_secret, [<span style=\"color: #228b22;\">wf</span>:<span style=\"color: #228b22;\">q</span>(username), <span style=\"color: #228b22;\">wf</span>:<span style=\"color: #228b22;\">peer_ip</span>()]),
    <span style=\"color: #228b22;\">wf</span>:<span style=\"color: #228b22;\">update</span>(auth_token,
             [
              #<span style=\"color: #228b22;\">panel</span> { body=[ #<span style=\"color: #228b22;\">span</span>{text=<span style=\"color: #a0522d;\">Token</span>} ]},
              #<span style=\"color: #228b22;\">textarea</span> { id=auth_response },
              #<span style=\"color: #228b22;\">button</span> { id=send_signed, text=<span style=\"color: #8b2252;\">\"Send Signed\"</span>, postback=send_signed }
             ]);
<span style=\"color: #0000ff;\">event</span>(send_signed) -&gt;
    <span style=\"color: #a0522d;\">Args</span> = [<span style=\"color: #228b22;\">wf</span>:<span style=\"color: #228b22;\">q</span>(username), <span style=\"color: #228b22;\">wf</span>:<span style=\"color: #228b22;\">peer_ip</span>(), 
            <span style=\"color: #228b22;\">re</span>:<span style=\"color: #228b22;\">replace</span>(<span style=\"color: #228b22;\">wf</span>:<span style=\"color: #228b22;\">q</span>(auth_response), <span style=\"color: #8b2252;\">\"\\\\\\\\n\"</span>, <span style=\"color: #8b2252;\">\"\\n\"</span>, [global, {return, list}])],
    <span style=\"color: #a0522d;\">Res</span> = <span style=\"color: #228b22;\">rpc</span>:<span style=\"color: #228b22;\">call</span>(<span style=\"color: #8b2252;\">'trivial_user@127.0.1.1'</span>, rsa_auth, verify, <span style=\"color: #a0522d;\">Args</span>),
    <span style=\"color: #7a378b;\">erlang</span>:<span style=\"color: #7a378b;\">display</span>(<span style=\"color: #a0522d;\">Res</span>),
    <span style=\"color: #7a378b;\">erlang</span>:<span style=\"color: #7a378b;\">display</span>(<span style=\"color: #a0522d;\">Args</span>),
    <span style=\"color: #a020f0;\">case</span> <span style=\"color: #a0522d;\">Res</span> <span style=\"color: #a020f0;\">of</span>
        true -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #228b22;\">wf</span>:<span style=\"color: #228b22;\">update</span>(auth_token, [ #<span style=\"color: #228b22;\">span</span> { text=<span style=\"color: #8b2252;\">\"Yay! You're in!\"</span>} ]);
        <span style=\"color: #a0522d;\">_</span> -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #228b22;\">wf</span>:<span style=\"color: #228b22;\">update</span>(auth_token, [ #<span style=\"color: #228b22;\">span</span> {text=<span style=\"color: #8b2252;\">\"Halt, criminal scum!\"</span> } ])
    <span style=\"color: #a020f0;\">end</span>;
<span style=\"color: #0000ff;\">event</span>(<span style=\"color: #a0522d;\">_</span>) -&gt;<span style=\"color: #0000ff;\"> </span>ok.</pre>

<p>That should be puzzle-out-able based on what we've been talking about too. Note that this expects to find a running instance of <code>trivial_user</code> at <code><span style=\"color: #8b2252;\">'trivial_user@127.0.1.1'</span></code>. The only other thing I'll note is the bit that goes</p>

<pre><span style=\"color: #228b22;\">re</span>:<span style=\"color: #228b22;\">replace</span>(<span style=\"color: #228b22;\">wf</span>:<span style=\"color: #228b22;\">q</span>(auth_response), <span style=\"color: #8b2252;\">\"\\\\\\\\n\"</span>, <span style=\"color: #8b2252;\">\"\\n\"</span>, [global, {return, list}])</pre>

<p>That's necessary because of the way the string \"\\n\" reacts to being dumped into a textarea. if you don't do that, shit will go oddly wrong and you won't be able to figure it out until it's late enough that I'm literally being kept awake by caffeine and <a href=\"http://www.youtube.com/watch?v=2R677MV--WI\">strangely hypnotic music</a>.</p>

<p>And that's bad.</p>

<p>The last remaining piece of this little system is the signing component, and here it is.</p>

<pre><span style=\"color: #b22222;\">#!/usr/bin/python
</span>
<span style=\"color: #a020f0;\">import</span> M2Crypto, hashlib

<span style=\"color: #a020f0;\">def</span> <span style=\"color: #0000ff;\">gimme_pw</span>(*args):
    <span style=\"color: #a020f0;\">return</span> <span style=\"color: #8b2252;\">\"your passphrase goes here if you trust your computer\"</span>
    <span style=\"color: #b22222;\">### Ideally, you'd <a href=\"http://code.activestate.com/recipes/278731-creating-a-daemon-the-python-way/\">daemonize</a> (not as scary as it looks) this script, have it prompt for a password and cache it</span>

<span style=\"color: #a020f0;\">def</span> <span style=\"color: #0000ff;\">sign</span>(message, Privkey=M2Crypto.RSA.load_key(<span style=\"color: #8b2252;\">\"/path/to/your/rsa.pem\"</span>, gimme_pw)):
    plaintext = Privkey.private_decrypt(message.decode(<span style=\"color: #8b2252;\">'base64'</span>), M2Crypto.RSA.pkcs1_oaep_padding)
    sig = Privkey.sign_rsassa_pss(plaintext)
    <span style=\"color: #a020f0;\">return</span> sig.encode(<span style=\"color: #8b2252;\">'base64'</span>)</pre>

<p>Whew!</p>

<p>That's the code down. The interaction, once you've registered and if you're going to be doing this manually, is</p>

<ol>
  <li>Input your name and request a secret</li>
  <li>Copy the block of text the server sends you, and run the above signing script on it</li>
  <li>Copy the result into the newly formed <code>textarea</code> and click <code><span style=\"color: #8b2252;\">\"Send Signed\"</span></code></li>
</ol>

<p>Assuming it was done correctly, you should then be logged in. The automatic version is going to have to wait for some sleep.</p>

<h3>How Is This Better Than Passwords?</h3>

<p>I don't fucking know, something. Oh, wait, yeah it is. In three specific ways.</p>

<ul>
  <li><b>Bi directional authentication</b>; If we implement that note I mentioned earlier, it lets you authenticate to your server and authenticate the server to you, without an intermediary<a href=\"#foot-Sat-Jun-23-013835EDT-2012\" name=\"note-Sat-Jun-23-013835EDT-2012\">[6]</a></li>
  <li><b>No critical information is exchanged</b>; even if someone is watching your entire transaction, they never get enough information to impersonate you, whether you're dealing with SSL or not.</li>
  <li><b>No critical information is present on the server</b>; even if your service provider is an utter dumbass that keeps their user database in plaintext with a little note taped to it reading \"Plz dont steals\", you don't care. Unlike a password system, where your password is effectively as secure as the weakest service you use it on, your RSA key is as secure as your personal machine. Granted, that may still not be <i>very</i> secure, but it's a step up.</li>
</ul>

<p>I'm also convinced that once this is properly automated, it will be <i>easier</i> to deal with than password authentication from the user perspective, but I haven't built it yet, so I won't count that. I'm basing this conviction on the fact that I've stopped <a href=\"http://paulkeck.com/ssh/\">using SSH with</a>out <a href=\"http://lani78.wordpress.com/2008/08/08/generate-a-ssh-key-and-disable-password-authentication-on-ubuntu-server/\">RSA keys</a>. I encourage you to try it if you haven't already.</p>

<p>Ok, that's it. Automated version coming soon, and good night.</p>

<hr />
<h5>Footnotes</h5>
<p>1 - <a href=\"#note-Sat-Jun-23-012959EDT-2012\" name=\"foot-Sat-Jun-23-012959EDT-2012\">[back]</a> -  Ok, that's not true; we're missing two pieces, both critical in practice but borderline irrelevant for the theory.</p>
<p>The first one is <b>bi-directional authentication</b>. That would be pretty simple to implement from our perspective; all we'd need to do is sign the secret as it's being sent out. Doing so would let our user verify that they're talking to the server they expect rather than an eavesdropper or phisher. This overlaps slightly with SSL, but doesn't prevent a site from using both, and is so straightforward if you're already using this model that you may as well.</p>
<p>The second one is a way to <b>revoke keys</b>. That's more or less an open problem. For the purposes of this project, anyway. We could do something like hand our users a revocation phrase, or we could ask them to generate a second keypair which would be used to send a revocation message, or we could handle this through a second channel (which we should probably implement in any case, if we're serious about security). That second method sounds more secure, but really just recurses on the problem; what happens if your revocation key gets compromised? And how do you expect a user to store them? </p>
<p>Assigning a pass-phrase might seem like it's defeating the purpose, but remember that this one only comes out when you need to change keys (rather than at every login), and that lets us get a bit fancier with the sort of infrastructure we want to provide for it. For instance, I could imagine a provider mailing out actual plastic cards that people could stash in their wallets. </p>
<p>The third option is a lot more interesting, but I intend to write a piece on that by itself, so I won't much more time on it today. Sufficed to say that redundancy and isolation are key to build reliable systems, as Erlang has clearly demonstrated. And if you want a reliable channel for authentication, you really need to make it multiple independent channels. Slightly more annoying for your users, but exponentially more annoying for anyone trying to impersonate them.</p>
<p>Anyway, that's all beyond the scope of this piece, so I'm going to tactfully ignore it for the rest of the night.</p>

<p>2 - <a href=\"#note-Sat-Jun-23-013539EDT-2012\" name=\"foot-Sat-Jun-23-013539EDT-2012\">[back]</a> - So that we know whose key to encrypt the secret with.</p>
<p>3 - <a href=\"#note-Sat-Jun-23-013544EDT-2012\" name=\"foot-Sat-Jun-23-013544EDT-2012\">[back]</a> - Just as a security precaution against some types of sneakiness.</p>

<p>4 - <a href=\"#note-Sat-Jun-23-013559EDT-2012\" name=\"foot-Sat-Jun-23-013559EDT-2012\">[back]</a> - Except that Erlang doesn't like the idea of durations for some reason, so I had to bring myself to write a comment.</p>

<p>5 - <a href=\"#note-Sat-Jun-23-013621EDT-2012\" name=\"foot-Sat-Jun-23-013621EDT-2012\">[back]</a> - Which we wouldn't <i>necessarily</i> want to do, even if it didn't go against Erlang's grain.</p>

<p>6 - <a href=\"#note-Sat-Jun-23-013835EDT-2012\" name=\"foot-Sat-Jun-23-013835EDT-2012\">[back]</a> - I'll save the rant about why having centralized signing authorities is stupid for when my eyelids aren't trying to sabotage me.</p>
"))
((5202 3723 582855000) :INSERT (88 :POSTED 3549326400))
((5202 3723 582860000) :INSERT (88 :TAG :ALMOST-LITERATE-PROGRAMMING))
((5202 3723 582863000) :INSERT (88 :TAG :ERLANG))
((5202 3723 582866000) :INSERT (88 :TAG :IDEA-PEELING))
((5202 3723 582868000) :INSERT (88 :TAG :PYTHON))
((5202 3723 583138000) :INSERT (89 :TITLE "Rebar Frustrations and LFE"))
((5202 3723 583145000) :INSERT (89 :FILE "rebar.html"))
((5202 3723 583147000) :INSERT (89 :EDITED 3610022331))
((5202 3723 583150000) :INSERT
 (89 :BODY
  "<p>I'm trying to get my head around <a href=\"https://github.com/basho/rebar\">Rebar</a> at the moment, and am failing pretty badly. It's honestly unclear whether I'm being an idiot here, but I've gone through all of four different <a href=\"http://www.metabrew.com/article/erlang-rebar-tutorial-generating-releases-upgrades\">tutorials</a> on the <a href=\"http://alancastro.org/2010/05/01/erlang-application-management-with-rebar.html\">subject</a>, each <a href=\"http://carbonshaft.blogspot.ca/2011/11/tutorial-getting-started-with-erlang.html\">purports</a> to be a <a href=\"http://damntechnology.blogspot.ca/2011/08/starting-with-rebar.html\">simple step-by step</a> guide that'll get you up and running quickly, and each one hands you an error at around step four if you follow it as written.</p>

<p>The only piece of documentation I've been able to follow in its entirety without a crash dump is the <a href=\"https://github.com/basho/rebar/wiki/Getting-started\">basho Getting Started page</a>. Except that it only gets me as far as starting and compiling a project, showcasing none of Rebar's dependency building, distribution creation or release handling. Which makes it marginally <i>less</i> useful than Make.</p>

<p>Following the <a href=\"https://github.com/basho/rebar/tree/master/test/upgrade_project\">upgrade_project</a> option works fine on the test project provided as part of the rebar repo, but that project is shaped differently, and uses different config options than the ones rebar generates for a new project. Naturally, there is no documentation on what steps I have to take to get from what's generated to what works.</p>

<p>Ugh. Sorry, I had to vent for a bit there. Fuck this, I'm going back to Makefiles for the time being. I'll try rebar out again when my blood pressure lowers a bit.</p>

<h2>Was that all?</h2>

<p>Huh? Oh. No, I guess. I did also find <a href=\"https://github.com/rvirding/lfe/blob/master/doc/user_guide.txt\">this</a>, which looks pretty badass. It's not exactly a Common Lisp or a Scheme. It's a purely functional, Lisp-2 with unhygenic macros that runs on top of the Erlang VM. It's about as officially supported as you can get, being made by <a href=\"http://rvirding.blogspot.ca/\">Robert Virding</a>, and it gets rid of quite a few things I don't like about Erlang.</p>

<p>Now, it's not a full Common Lisp, so don't expect <a href=\"http://www.quicklisp.org/beta/\">quicklisp</a> (sigh) or <a href=\"http://www.lispworks.com/documentation/HyperSpec/Body/m_loop.htm#loop\">loop</a> (though in theory, there doesn't seem to be a reason that you couldn't implement that one, if you wanted it badly enough), or mutable state, but it does hit the big ones. Namely full prefix notation, homoiconicity, and macros. And it retains the things about Erlang that I do find interesting, namely massive concurrency, the pure-functional approach, and cross-process/cross-machine distribution.</p>
"))
((5202 3723 583176000) :INSERT (89 :POSTED 3549499200))
((5202 3723 583178000) :INSERT (89 :TAG :BITCHING))
((5202 3723 583180000) :INSERT (89 :TAG :ERLANG))
((5202 3723 583182000) :INSERT (89 :TAG :LISP))
((5202 3723 583567000) :INSERT (90 :TITLE "Not Building Erlang Apps"))
((5202 3723 583576000) :INSERT (90 :FILE "not-building-erlang.html"))
((5202 3723 583580000) :INSERT (90 :EDITED 3610022331))
((5202 3723 583582000) :INSERT
 (90 :BODY
  "<p>So I've spent the past few days playing around with various ways of building Erlang projects, and it's taken me from mild frustration to fuck-everything-about-this mode. Here is the synopsis of ways that you should not build an app, despite what you may have heard to the contrary.</p>

<h2>rebar</h2>

<p>Like I said last time, every single tutorial that I've found so far has run me up against an error when the time comes to <i>actually generate a working system</i>. I've had <a href=\"http://stackoverflow.com/questions/11192466/rebar-generate-error\">no help</a> so far, and without that generation step, <code>rebar</code> is essentially a poor-man's <code>make</code> script fused with a poor-man's <code><a href=\"https://github.com/xach/quickproject/\">quickproject</a></code>-for-Erlang. This is true both of the build in <a href=\"https://github.com/basho/rebar/\">their repos</a>, and of the one in <a href=\"https://github.com/basho/rebar/downloads\">their downloads</a>.</p>

<p>I'm not saying \"it doesn't work\", because I've successfully used the <code>rebar</code> application called <a href=\"http://nitrogenproject.com/\">nitrogen</a>, I'm saying it has yet to work for me, despite the fact that I've tried following five separate pieces of allegedly correct documentation for it. It may work for you, but I'm not inclined to bet on it.</p>

<h2>release_handler</h2>

<p>If you take a look at what <code>rebar</code> is actually supposed to do, you'll find that a lot of it can be done from within a running Erlang process. <a href=\"http://www.erlang.org/doc/man/systools.html\">systools</a> and <a href=\"http://www.erlang.org/doc/man/release_handler.html\">release_handler</a> ostensibly help you put together a production build of your environment and deploy it. And the word \"ostensibly\" in that sentence should tell you how that went.</p>

<p>Here's the process you're supposed to follow:</p>

<ol>
  <li>arrange your project in the OTP style (with <code>src</code>, <code>ebin</code>, <code>priv</code> and <code>rel</code> directories at minimum, an <code>app</code> file in <code>src</code> to describe your application, and your compiled <code>beam</code>s all going into <code>ebin</code>)</li>
  <li>compile your project</li>
  <li>create a <code>rel</code> file</li>
  <li>use <code>systools:make_script/2</code> to generate the <code>script</code> and <code>boot</code> files for local running (test <th></th>ose, if you like)</li>
  <li>create an <code>appup</code> file to tell Erlang what needs to change between some previous and this one</li>
  <li>use <code>systools:make_relup/3</code> to generate a <code>relup</code> file (this oddly requires an unpacked copy of both your previous version and this version; they both need to be named <code>&lt;<span style=\"color: #0000ff;\">yourproject</span>&gt;.app</code>, so be prepared to do some directory trickery)</li>
  <li>use <code>systools:make_tar/1</code> to generate a <code>tar.gz</code> file of your entire project</li>
  <li>copy that tar file up to your server</li>
  <li>if this is your first release, just untar it and run <code>erl -boot releases/&lt;<span style=\"color: #0000ff;\">release-name</span>&gt;/start</code>, otherwise use <code>release_handler:unpack_release/1</code>, <code>release_handler:install_release/1</code> and <code>release_handler:make_permanent/1</code> to perform a running upgrade</li>
</ol>

<p>This process gave me some trouble around steps 3, 5 and 6, and finally errored outright at step 9. The problem I was having with the earlier pieces all involved what I've come to think of as <b>The Erlang Bureaucracy</b>. That's when a piece of the process requires you, the human, to formally, manually and accurately type out a whole bunch of list-based information that the machine has access to. The <code>rel</code> file was a particularly annoying example. Here's what one looks like</p>

<pre>{release,{<span style=\"color: #8b2252;\">\"example_rel\"</span>,<span style=\"color: #8b2252;\">\"1.1\"</span>},
         {erts,<span style=\"color: #8b2252;\">\"5.9.1\"</span>},
         [{kernel,<span style=\"color: #8b2252;\">\"2.15.1\"</span>},
          {sasl,<span style=\"color: #8b2252;\">\"2.2.1\"</span>},
          {example,<span style=\"color: #8b2252;\">\"1.1\"</span>},
          {stdlib,<span style=\"color: #8b2252;\">\"1.18.1\"</span>}]}.</pre>

<p>It should also be named <code>example-1.1.rel</code>, in case you thought you had any choice on that front. Like I said, it's implied in the <a href=\"http://www.erlang.org/doc/design_principles/release_structure.html#id75416\">documentation</a> that <i>you</i> ought to be writing this down, but in fact, the template is very straightforward</p>

<pre>{release, 
   {<span style=\"color: #8b2252;\">\"&lt;application name&gt;_rel\"</span>, <span style=\"color: #8b2252;\">\"&lt;application version&gt;\"</span>},
   {erts, <span style=\"color: #8b2252;\">\"&lt;erts version&gt;\"</span>},
   [&lt;list <span style=\"color: #a020f0;\">of</span> {appname, <span style=\"color: #8b2252;\">\"version\"</span>} for each required application&gt;]}</pre>

<p>and <i>every single</i> piece of information there can be automatically generated by an Erlang node that's already running your system. If you wanted to define a shortcut for yourself, you'd do it like so:</p>

<pre><span style=\"color: #0000ff;\">make_rel_file</span>(<span style=\"color: #a0522d;\">AppnameAtom</span>) -&gt;
    <span style=\"color: #a0522d;\">AppnameStr</span> = <span style=\"color: #7a378b;\">atom_to_list</span>(<span style=\"color: #a0522d;\">AppnameAtom</span>),
    {<span style=\"color: #a0522d;\">_</span>, <span style=\"color: #a0522d;\">_</span>, <span style=\"color: #a0522d;\">V</span>} = <span style=\"color: #228b22;\">lists</span>:<span style=\"color: #228b22;\">keyfind</span>(<span style=\"color: #a0522d;\">AppnameAtom</span>, 1, 
                              <span style=\"color: #228b22;\">application</span>:<span style=\"color: #228b22;\">loaded_applications</span>()),
    <span style=\"color: #a0522d;\">ActiveApps</span> = <span style=\"color: #228b22;\">lists</span>:<span style=\"color: #228b22;\">map</span>(<span style=\"color: #a020f0;\">fun</span> ({<span style=\"color: #a0522d;\">App</span>, <span style=\"color: #a0522d;\">_Description</span>, <span style=\"color: #a0522d;\">Ver</span>}) -&gt;<span style=\"color: #0000ff;\"> </span>{<span style=\"color: #a0522d;\">App</span>, <span style=\"color: #a0522d;\">Ver</span>} <span style=\"color: #a020f0;\">end</span>, 
                           <span style=\"color: #228b22;\">application</span>:<span style=\"color: #228b22;\">loaded_applications</span>()),
    <span style=\"color: #a0522d;\">Rel</span> = {release, {<span style=\"color: #a0522d;\">AppnameStr</span> ++ <span style=\"color: #8b2252;\">\"_rel\"</span>, <span style=\"color: #a0522d;\">V</span>}, 
           {erts, <span style=\"color: #7a378b;\">erlang</span>:<span style=\"color: #7a378b;\">system_info</span>(version)}, 
           <span style=\"color: #a0522d;\">ActiveApps</span>}, 
    <span style=\"color: #a0522d;\">RelFilename</span> = <span style=\"color: #228b22;\">lists</span>:<span style=\"color: #228b22;\">append</span>([<span style=\"color: #8b2252;\">\"rel/\"</span>, <span style=\"color: #a0522d;\">AppnameStr</span>, <span style=\"color: #8b2252;\">\"-\"</span>, <span style=\"color: #a0522d;\">V</span>, <span style=\"color: #8b2252;\">\".rel\"</span>])
    <span style=\"color: #228b22;\">file</span>:<span style=\"color: #228b22;\">write_file</span>(<span style=\"color: #a0522d;\">RelFilename</span>, <span style=\"color: #228b22;\">io_lib</span>:<span style=\"color: #228b22;\">format</span>(<span style=\"color: #8b2252;\">\"~p.\"</span>, [<span style=\"color: #a0522d;\">Rel</span>])).</pre>

<p>Granted, this means you need to settle for version names like \"1.1\" rather than \"Porkchop Sandwiches\", but that's still a damn sight easier than typing it out yourself every time.</p>

<p><code>appup</code>s are sort of understandable, until you realize that if the system had access to your git repository, it could easily tell what had changed since last time, leaving you to merely specify the tricky manual parts. If you follow, you may also be beginning to suspect that the Smalltalk guys <a href=\"http://en.wikipedia.org/wiki/System_image\">had the right of it.</a>, but I digress.</p>

<p>After getting past the bureaucratic rings Erlang sets up, I generated a system using <code>systools:make_tar/1</code>, unpacked it and tested the fucker out. And it worked! It started up my application along with <code>sasl</code> just by doing <code>erl -boot rel/example-1.1/releases/1.1/start</code>! And I could upgrade it on the fly, and it was fucking wonderful with fucking <i>rainbows <b>everywhere</b></i>!!</p>

<p>And then I copied the tar file up to my remote server, took the same steps on the same release of Erlang/OTP+erts, and got a stack dump. Ho hum. Well, at least it <a href=\"http://www.nappyhead.co.uk/info_1077.html\">worked on my machine</a>, amirite?</p>

<h2>What worked</h2>

<p>What ended up working was just copying my application folder up (minus the <code>src</code> and <code>rel</code> folders, just to save space), and then running</p>

<code>erl -pa ebin -pa include -eval 'lists:map(fun (App) -&gt; application:load(App), application:start(App) end, [required_app1, required_app2, example]).'</code>

<p>It's simple, it's stupid, and it won't make it easy for me to upgrade later, but it worked, and that's more than I could say for the documented approaches. So that's that. I fucking give up. I'm sure someone out there would be shaking their head if they saw this, but \"automatic\" release management is not worth the kinds of headaches that this has been causing me. It seems like doing anything other than the simplest possible thing with the Erlang system forces you to keep track of all kind of semi-transparent, undocumented internal state which is improperly set by default. State Is Hard, at the best of times, so I'm going to go ahead and avoid it until I another masochistic urge to lose another six hours or so.</p>
"))
((5202 3723 583679000) :INSERT (90 :POSTED 3549844800))
((5202 3723 583683000) :INSERT (90 :TAG :BITCHING))
((5202 3723 583687000) :INSERT (90 :TAG :ERLANG))
((5202 3723 584349000) :INSERT (91 :TITLE "Erlang From Scratch"))
((5202 3723 584357000) :INSERT (91 :FILE "erlang-from-scratch.html"))
((5202 3723 584361000) :INSERT (91 :EDITED 3610022331))
((5202 3723 584365000) :INSERT
 (91 :BODY
  "<p>I mentioned earlier that I gave up on <a href=\"https://github.com/basho/rebar/\">rebar</a><a href=\"#foot-Thu-Jul-05-231940EDT-2012\" name=\"note-Thu-Jul-05-231940EDT-2012\">[1]</a>, but I never actually wrote up the process I do use. So, here's a quick example in the form of an OTP-compliant echo server tutorial.</p>

<p>The first thing you need to do is create a directory for your project, and give it a certain internal structure.</p>

<pre>$: mkdir example
$: cd example
$: mkdir ebin src deps priv
$: cd ..
$: tree example
example
&#9500;&#9472;&#9472; deps
&#9500;&#9472;&#9472; ebin
&#9500;&#9472;&#9472; priv
&#9492;&#9472;&#9472; src</pre>

<p>These all have specific purposes.</p>

<ul>
  <li><b>src</b> is where you'll keep all your <code>.erl</code> files. Really, you're supposed to keep other language sources in separate <code>[lang]_src</code> folders, but I put it all in here. I don't know if that'll come back to bite me in the ass. I'll report on it either way.</li>
  <li><b>ebin</b> is where you put the results of compiling your <code>.erl</code>s. Only your <code>.erl</code>s, not your <code>.c</code>s, <code>.py</code>s, <code>.java</code>s or <code>.lisp</code>s, please. I actually follow this one since everyone else seems to and it might actually matter for the purposes of someone else making use of my libraries. So interop. Fun.</li>
  <li><b>priv</b> is where you put the results of compiling all your non-Erlang code. Note that since we'll be running the system from <code>exapmle/</code>, you should invoke any non-Erlang components with (for example) <code>python -u priv/foo</code></li>
  <li><b>deps</b> is where you put any code not part of your project, but that you depend on. I'm actually not too clear on whether you're supposed to copy all required files into <code>deps</code> directly, or whether you're supposed to arrange a tree of <code>deps/(.*?)/(ebin|priv)/</code>. Both approaches work, and there doesn't seem to be any big technical difference between them. I use the former for preference.</li>
</ul>

<p>That's the folder structure, now lets organize our <code>src</code> folder. To set up an OTP project, you'll need at minimum 4 files.</p>

<pre>$: cd example/src
$: touch example.app example_app.erl example_sup.erl echo.erl
$: tree ../
../
&#9500;&#9472;&#9472; deps
&#9500;&#9472;&#9472; ebin
&#9500;&#9472;&#9472; priv
&#9492;&#9472;&#9472; src
    &#9500;&#9472;&#9472; echo.erl
    &#9500;&#9472;&#9472; example.app
    &#9500;&#9472;&#9472; example_app.erl
    &#9492;&#9472;&#9472; example_sup.erl</pre>

<p><b>example.app</b> is your application definition. It gives Erlang an idea of how to deal with the rest of your files, and what kind of setup do expect. It seems that it doesn't <i>have</i> to reflect reality<a href=\"#foot-Thu-Jul-05-232400EDT-2012\" name=\"note-Thu-Jul-05-232400EDT-2012\">[2]</a>, but it's probably a good idea to get it as close as possible.</p>

<pre>{application, example,
 [{description, <span style=\"color: #8b2252;\">\"Something something dark side\"</span>},
  {vsn, <span style=\"color: #8b2252;\">\"1.0\"</span>},
  {modules, [example_app, example_sup, echo]},
  {registered, [echo]},
  {applications, [kernel, stdlib, sasl]},
  {mod, {example_app, []}},
  {start_phases, []}]}.</pre>

<p>The description and version are entirely flexible, and entirely up to you. <code>modules</code> specifies what modules this project will load, <code>registered</code> is a list of registered OTP processes we'll be running (just our echo server in this case), <code>applications</code> is a list of other Erlang systems we'll be including (you don't really need <code>sasl</code>, but I prefer the more detailed error reporting it gives you). The other two specify advanced startup behavior that I've yet to actually mess with myself. <code>{mod, {<span style=\"color: #a0522d;\">Mod</span>, <span style=\"color: #a0522d;\">Argument</span>}}</code> passes <code>Argument</code> to the function <code>start</code> in the module <code>Mod</code>. I can't remember what <code>start_phases</code> does, so it's either well beyond me or not particularly important.</p>

<p>Near as I can tell, <b>example_app.erl</b> just provides an interface to <code>example.app</code> for Erlang's standard <code>application</code> module.</p>

<pre><span style=\"color: #7a378b;\">-module</span>(example_app).
<span style=\"color: #7a378b;\">-behaviour</span>(application).
<span style=\"color: #7a378b;\">-export</span>([<span style=\"color: #228b22;\">start/2</span>, <span style=\"color: #228b22;\">stop/1</span>]).

<span style=\"color: #0000ff;\">start</span>(<span style=\"color: #a0522d;\">_Type</span>, <span style=\"color: #a0522d;\">StartArgs</span>) -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #228b22;\">example_sup</span>:<span style=\"color: #228b22;\">start_link</span>(<span style=\"color: #a0522d;\">StartArgs</span>).
<span style=\"color: #0000ff;\">stop</span>(<span style=\"color: #a0522d;\">_State</span>) -&gt;<span style=\"color: #0000ff;\"> </span>ok.</pre>

<p>That's the function I mentioned earlier. We're passing it <code>[]</code> in this case, because it doesn't need any particular initializing information. Nothing much else to see here.</p>

<p><b>example_sup.erl</b> is the supervisor process for our system. Its responsibility will be to monitor and restart the <code>echo</code> process in case of errors. OTP convention seems to be to name them with a <code>_sup</code> suffix.</p>

<pre><span style=\"color: #7a378b;\">-module</span>(example_sup).
<span style=\"color: #7a378b;\">-behavior</span>(supervisor).

<span style=\"color: #7a378b;\">-export</span>([<span style=\"color: #228b22;\">start/0</span>, <span style=\"color: #228b22;\">start_link/1</span>, <span style=\"color: #228b22;\">init/1</span>]).

<span style=\"color: #0000ff;\">start</span>() -&gt;
    <span style=\"color: #7a378b;\">spawn</span>(<span style=\"color: #a020f0;\">fun</span>() -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #228b22;\">supervisor</span>:<span style=\"color: #228b22;\">start_link</span>({local, ?<span style=\"color: #008b8b;\">MODULE</span>}, ?<span style=\"color: #008b8b;\">MODULE</span>, <span style=\"color: #a0522d;\">_Arg</span> = []) <span style=\"color: #a020f0;\">end</span>).

<span style=\"color: #0000ff;\">start_link</span>(<span style=\"color: #a0522d;\">Args</span>) -&gt;
    <span style=\"color: #228b22;\">supervisor</span>:<span style=\"color: #228b22;\">start_link</span>({local, ?<span style=\"color: #008b8b;\">MODULE</span>}, ?<span style=\"color: #008b8b;\">MODULE</span>, <span style=\"color: #a0522d;\">Args</span>).

<span style=\"color: #0000ff;\">init</span>([]) -&gt;
    {ok, {{one_for_one, 3, 10},
          [{echo, {echo, start, []}, permanent, 5000, worker, [echo]}]}}.</pre>

<p><code>start/0</code> and <code>start_link/1</code> are the obvious hooks to start up the supervisor. The interesting part here is actually the contents of <code>init/1</code>. The first tuple is <code>{SupervisionStrategy, Restarts, Time}</code>. <b>SupervisionStrategy</b> tells the supervisor how to deal with an errored child; <code>one_for_one</code> means that it should merely restart the crashed process. There are a couple of other options that let you kill all other children, or just all children after the initial errorer in the starting sequence. That's... kind of creepy out of context.</p>

<p>If it catches more than <code>Restarts</code> errors in under <code>Time</code> seconds, it kills all, um, children. Then itself<a href=\"#foot-Thu-Jul-05-232850EDT-2012\" name=\"note-Thu-Jul-05-232850EDT-2012\">[3]</a>. The list, of one in this case, modules after that specify various properties of the processes. The tuple specifies <code>{Module, StartFn, StartArgs}</code>, the list at the end is just the name of the module again because someone at Ericsson evidently thought that \"repetition\" is the same as \"reliability\", but the tuple at the front is actually something different. It's the module tag, which will be used to register this process. By convention, it's typically the same as the module name, but there's one situation I'll cover later where it's useful to do otherwise.</p>

<p>Moving right along to the actual <b>echo.erl</b>.</p>

<pre><span style=\"color: #7a378b;\">-module</span>(echo).
<span style=\"color: #7a378b;\">-behaviour</span>(gen_server).

<span style=\"color: #7a378b;\">-export</span>([<span style=\"color: #228b22;\">start/0</span>, <span style=\"color: #228b22;\">stop/0</span>]).
<span style=\"color: #7a378b;\">-export</span>([<span style=\"color: #228b22;\">init/1</span>, <span style=\"color: #228b22;\">handle_call/3</span>, <span style=\"color: #228b22;\">handle_cast/2</span>, <span style=\"color: #228b22;\">handle_info/2</span>,
         <span style=\"color: #228b22;\">terminate/2</span>, <span style=\"color: #228b22;\">code_change/3</span>]).

<span style=\"color: #7a378b;\">-export</span>([<span style=\"color: #228b22;\">echo/1</span>]).

<span style=\"color: #0000ff;\">echo</span>(<span style=\"color: #a0522d;\">Message</span>) -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #228b22;\">gen_server</span>:<span style=\"color: #228b22;\">call</span>(?<span style=\"color: #008b8b;\">MODULE</span>, <span style=\"color: #a0522d;\">Message</span>).

<span style=\"color: #0000ff;\">handle_call</span>(<span style=\"color: #a0522d;\">Message</span>, <span style=\"color: #a0522d;\">_From</span>, <span style=\"color: #a0522d;\">State</span>) -&gt;<span style=\"color: #0000ff;\"> </span>
    {reply, {you_just_sent, <span style=\"color: #a0522d;\">Message</span>}, <span style=\"color: #a0522d;\">State</span>}.

<span style=\"color: #b22222;\">%%%%%%%%%%%%%%%%%%%% </span><span style=\"color: #b22222;\">generic actions
</span><span style=\"color: #0000ff;\">start</span>() -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #228b22;\">gen_server</span>:<span style=\"color: #228b22;\">start_link</span>({local, ?<span style=\"color: #008b8b;\">MODULE</span>}, ?<span style=\"color: #008b8b;\">MODULE</span>, [], []).
<span style=\"color: #0000ff;\">stop</span>() -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #228b22;\">gen_server</span>:<span style=\"color: #228b22;\">call</span>(?<span style=\"color: #008b8b;\">MODULE</span>, stop).

<span style=\"color: #b22222;\">%%%%%%%%%%%%%%%%%%%% </span><span style=\"color: #b22222;\">gen_server handlers
</span><span style=\"color: #0000ff;\">init</span>([]) -&gt;<span style=\"color: #0000ff;\"> </span>{ok, []}.
<span style=\"color: #0000ff;\">handle_cast</span>(<span style=\"color: #a0522d;\">_Msg</span>, <span style=\"color: #a0522d;\">State</span>) -&gt;<span style=\"color: #0000ff;\"> </span>{noreply, <span style=\"color: #a0522d;\">State</span>}.
<span style=\"color: #0000ff;\">handle_info</span>(<span style=\"color: #a0522d;\">_Info</span>, <span style=\"color: #a0522d;\">State</span>) -&gt;<span style=\"color: #0000ff;\"> </span>{noreply, <span style=\"color: #a0522d;\">State</span>}.
<span style=\"color: #0000ff;\">terminate</span>(<span style=\"color: #a0522d;\">_Reason</span>, <span style=\"color: #a0522d;\">_State</span>) -&gt;<span style=\"color: #0000ff;\"> </span>ok.
<span style=\"color: #0000ff;\">code_change</span>(<span style=\"color: #a0522d;\">_OldVsn</span>, <span style=\"color: #a0522d;\">State</span>, <span style=\"color: #a0522d;\">_Extra</span>) -&gt;<span style=\"color: #0000ff;\"> </span>{ok, <span style=\"color: #a0522d;\">State</span>}.</pre>

<p>Most of that is boilerplate. The only interesting parts are the <code>export</code> directive that specifies <code>echo/1</code>, the <code>echo/1</code> function itself, and the lone <code>handle_call/3</code> clause. All of which are entirely self explanatory for a basic <code>echo</code> server.</p>

<p>Now, lets start this fucker up!</p>

<pre>$: cd ..
$: make
make: *** No targets specified and no makefile found.  Stop.</pre>

<p>Dammit. That's right, we've got one more stop. Here's a basic, OTP-compatible <b>Makefile</b>. Trust me, you need this. It's slightly different than the one I'm using, mostly in the interests of clarity<a href=\"#foot-Thu-Jul-05-233119EDT-2012\" name=\"note-Thu-Jul-05-233119EDT-2012\">[4]</a>.</p>

<pre><span style=\"color: #a0522d;\">ERL</span> = erl -pa ebin -pa priv

<span style=\"color: #a0522d;\">erl_start</span> = -eval <span style=\"color: #8b2252;\">'lists:map(fun (App) -&gt; application:load(App), application:start(App) end, [sasl, example]).'</span>

<span style=\"color: #a0522d;\">erl_stop</span> = -s init stop

<span style=\"color: #b22222;\">### </span><span style=\"color: #b22222;\">Rules
</span><span style=\"color: #0000ff;\">all</span>: 
        erlc -Wf -o ebin/ src/*erl
        cp src/*app ebin/

<span style=\"color: #0000ff;\">start</span>: 
        $(<span style=\"color: #a0522d;\">ERL</span>) -name example@127.0.1.1 $(<span style=\"color: #a0522d;\">erl_start</span>)

<span style=\"color: #0000ff;\">clean</span>:
        rm ebin/* deps/* priv/* </pre>

<p>This does a couple of things. First, <code>make</code> compiles all the <code>*erl</code> files in <code>src</code> into <code>ebin</code>, second it copies over the <code>.app</code> file, and finally, <code>make start</code>it gives you an easier way of starting <code>erl</code> with all the relevant includes/startups than typing it all up each time. Now then.</p>

<pre>$: make
erlc -Wf -o ebin/ src/*erl
cp src/*app ebin/
$: tree
<span style=\"color: #7a378b;\">.</span>
&#9500;&#9472;&#9472; deps
&#9500;&#9472;&#9472; ebin
&#9474;   &#9500;&#9472;&#9472; echo.beam
&#9474;   &#9500;&#9472;&#9472; example.app
&#9474;   &#9500;&#9472;&#9472; example_app.beam
&#9474;   &#9492;&#9472;&#9472; example_sup.beam
&#9500;&#9472;&#9472; Makefile
&#9500;&#9472;&#9472; priv
&#9492;&#9472;&#9472; src
    &#9500;&#9472;&#9472; echo.erl
    &#9500;&#9472;&#9472; example.app
    &#9500;&#9472;&#9472; example_app.erl
    &#9492;&#9472;&#9472; example_sup.erl
$: make start
[snip a whole bunch of startup notifications thanks to sasl]
(example@127.0.1.1)1&gt; echo:echo(hello)<span style=\"color: #7a378b;\">.</span>
{you_just_sent,hello}
(example@127.0.1.1)2&gt;</pre>

<p>Tadaaah! You've just made a full OTP application from scratch, with no automated tools of any kind. Now that you know how fuckmotheringly tedious it is, I hope you'll come to the same conclusion I arrived at and write yourself something like <a href=\"https://github.com/Inaimathi/emacs-utils/blob/master/erl-custom.el\">this</a> to automate the process<a href=\"#foot-Thu-Jul-05-233443EDT-2012\" name=\"note-Thu-Jul-05-233443EDT-2012\">[5]</a>. Point of fact, I slowed my process waaaaay down for this piece. In reality, I got to the end in about 20 seconds with one invocation of <code>erl-custom-template-project</code><a href=\"#foot-Thu-Jul-05-233452EDT-2012\" name=\"note-Thu-Jul-05-233452EDT-2012\">[6]</a>.</p>

<p>Ok, quit out of that with a <code>C-c C-c</code>. We've got the basics down. Time for a</p>

<h3>Bonus Stage</h3>

<p>We've got a single echo server running, but what if we wanted a few that all have mildly different behaviors? I've seen some beginners who think the solution is copy/pasting the existing <code>echo.erl</code> and chopping it up. In reality, Erlang is a little more object-oriented than <a href=\"http://armstrongonsoftware.blogspot.ca/\">Joe</a> would have you believe. There is a bit of chopping involved, but only because we wrote the initial <code>echo</code> module without thinking about this situation. First off, its API needs to change to accept a process, rather than assuming one named the same as the <code>?MODULE</code>.</p>

<pre>...

<span style=\"color: #7a378b;\">-export</span>([<span style=\"color: #228b22;\">echo/2</span>]).

<span style=\"color: #0000ff;\">echo</span>(<span style=\"color: #a0522d;\">Proc</span>, <span style=\"color: #a0522d;\">Message</span>) -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #228b22;\">gen_server</span>:<span style=\"color: #228b22;\">call</span>(<span style=\"color: #a0522d;\">Proc</span>, <span style=\"color: #a0522d;\">Message</span>).

...</pre>

<p>Second, we can't hard-code components that we'll want to change across processes.</p>

<pre>...

<span style=\"color: #0000ff;\">handle_call</span>(<span style=\"color: #a0522d;\">Message</span>, <span style=\"color: #a0522d;\">_From</span>, <span style=\"color: #a0522d;\">Reply</span>) -&gt;<span style=\"color: #0000ff;\"> </span>
    {reply, {<span style=\"color: #a0522d;\">Reply</span>, <span style=\"color: #a0522d;\">Message</span>}, <span style=\"color: #a0522d;\">Reply</span>}.

...</pre>

<p>And we need a way of changing those components from the specification in the spawning supervisor.</p>

<pre>...
<span style=\"color: #7a378b;\">-export</span>([<span style=\"color: #228b22;\">start/1</span>, <span style=\"color: #228b22;\">stop/1</span>]).
...
<span style=\"color: #b22222;\">%%%%%%%%%%%%%%%%%%%% </span><span style=\"color: #b22222;\">generic actions
</span><span style=\"color: #0000ff;\">start</span>(<span style=\"color: #a0522d;\">ProcName</span>, <span style=\"color: #a0522d;\">Response</span>) -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #228b22;\">gen_server</span>:<span style=\"color: #228b22;\">start_link</span>({local, <span style=\"color: #a0522d;\">ProcName</span>}, ?<span style=\"color: #008b8b;\">MODULE</span>, <span style=\"color: #a0522d;\">Response</span>, []).
<span style=\"color: #0000ff;\">stop</span>(<span style=\"color: #a0522d;\">ProcName</span>) -&gt;<span style=\"color: #0000ff;\"> </span><span style=\"color: #228b22;\">gen_server</span>:<span style=\"color: #228b22;\">call</span>(<span style=\"color: #a0522d;\">ProcName</span>, stop).

<span style=\"color: #b22222;\">%%%%%%%%%%%%%%%%%%%% </span><span style=\"color: #b22222;\">gen_server handlers
</span><span style=\"color: #0000ff;\">init</span>(<span style=\"color: #a0522d;\">Response</span>) -&gt;<span style=\"color: #0000ff;\"> </span>{ok, <span style=\"color: #a0522d;\">Response</span>}.
...</pre>

<p>Finally, we need to modify our supervisor to take advantage of all this new modularity.</p>

<pre><span style=\"color: #b22222;\">%% </span><span style=\"color: #b22222;\">example_sup.erl
</span>...

<span style=\"color: #0000ff;\">init</span>([]) -&gt;
    {ok, {{one_for_one, 3, 10},
          [{nice, {echo, start, [nice, thanks_for_sending]}, permanent, 5000, worker, [echo]},
           {mean, {echo, start, [nice, keep_your_fucking]}, permanent, 5000, worker, [echo]}]}}.

...</pre>

<p>And you should then be able to do</p>

<pre>$: make
erlc -Wf -o ebin/ src/*erl
cp src/*app ebin/
$: make start
[snip a whole bunch of startup notifications thanks to sasl]
(example@127.0.1.1)1&gt; echo:echo(nice, candy)<span style=\"color: #7a378b;\">.</span>
{thanks_for_sending,candy}
(example@127.0.1.1)2&gt; echo:echo(mean, garbage)<span style=\"color: #7a378b;\">.</span>
{keep_your_fucking,garbage}
(example@127.0.1.1)3&gt;</pre>

<p>Hacking a target process into your APIs isn't always necessary, but doing it lets you treat your API functions as faux-methods and Erlang processes as faux-objects<a href=\"#foot-Thu-Jul-05-233832EDT-2012\" name=\"note-Thu-Jul-05-233832EDT-2012\">[7]</a>.</p>

<p>Thus endeth the lesson. Next time, I'll put together some more authentication thoughts, and maybe build on this mini-tutorial to something actually useful.</p>


<hr />
<h5>Footnotes</h5>
<p>1 - <a href=\"#note-Thu-Jul-05-231940EDT-2012\" name=\"foot-Thu-Jul-05-231940EDT-2012\">[back]</a> - Which I just linked to despite the fact, because you should definitely use it if it works for you.</p>

<p>2 - <a href=\"#note-Thu-Jul-05-232400EDT-2012\" name=\"foot-Thu-Jul-05-232400EDT-2012\">[back]</a> - If you specify processes and modules in your <code>.app</code> that don't actually get loaded by the supervisors, for example, it doesn't complain.</p>

<p>3 - <a href=\"#note-Thu-Jul-05-232850EDT-2012\" name=\"foot-Thu-Jul-05-232850EDT-2012\">[back]</a> - Typically, this murder-suicide pact only happens when there's a serious, frequently triggered error in the code. In that situation, it's pointless to try to run the full program in any case.</p>

<p>4 - <a href=\"#note-Thu-Jul-05-233119EDT-2012\" name=\"foot-Thu-Jul-05-233119EDT-2012\">[back]</a> - I do some decidedly non-standard things with dependencies and launching, which I can't honestly recommend except to the extent that they seem easiest from my perspective so far. You can take a look <a href=\"https://github.com/Inaimathi/emacs-utils/blob/master/erl-custom.el#L61-104\">here</a>, if you're curious.</p>

<p>5 - <a href=\"#note-Thu-Jul-05-233443EDT-2012\" name=\"foot-Thu-Jul-05-233443EDT-2012\">[back]</a> - Don't use mine; believe it or not, it actually helps to build your own lightsaber. It may be a bit creaky, but at least you'll know how to fix it.</p>

<p>6 - <a href=\"#note-Thu-Jul-05-233452EDT-2012\" name=\"foot-Thu-Jul-05-233452EDT-2012\">[back]</a> - The script I linked to automatically does other things too, like add readme files filled with minimal skeletons, generate a <code>.gitignore</code> file and start a <code>git</code> repository. All things I always do anyway, and would really prefer the computer to handle for me.</p>

<p>7 - <a href=\"#note-Thu-Jul-05-233832EDT-2012\" name=\"foot-Thu-Jul-05-233832EDT-2012\">[back]</a> - That just happen to be backed by a truly fantastic concurrency model, and encouraged to act functionally.</p>
"))
((5202 3723 584612000) :INSERT (91 :POSTED 3550449600))
((5202 3723 584619000) :INSERT (91 :TAG :ERLANG))
((5202 3723 585167000) :INSERT (92 :TITLE "Authentication Part 4.5 - Not"))
((5202 3723 585177000) :INSERT
 (92 :FILE "authentication-part4.5-authentication-not.html"))
((5202 3723 585180000) :INSERT (92 :EDITED 3610301201))
((5202 3723 585182000) :INSERT
 (92 :BODY "<pre style=\"font-family: serif;\">We don't need authentication
We don't need access control
No dark sarcasm in the network
Servers leave them kids alone</pre>

<img src=\"/static/img/the-wall.jpg\" class=\"middle\" alt=\"The wall\" />

<h2>Housekeeping</h2>

<p>Despite the authentication theme, this update is probably going to be a mishmash of content, giving how fast my head is spinning at the moment. First, I want to <a href=\"http://www.groklaw.net/article.php?story=20120712151437524\">bring</a> a couple <a href=\"http://www.theatlantic.com/business/archive/2012/07/why-there-are-too-many-patents-in-america/259725/\">things</a> to your attention. Not quite enough to earn this post the \"Intellectual Property Bullshit\" tag, but interesting nonetheless.</p>

<p>Also, before I move on, I polished up what I went over <a href=\"/article?name=authentication-part4.html\">last time</a>, and put it <a href=\"https://github.com/Inaimathi/auth\">up on github</a>. The differences between what went up and what was discussed are minimal, though I did add some automated testing and polished off one or two odd corners that I glossed over in the writeup. I didn't commit a front-end at all, so you'll need to hook that up yourself if you plan to use it, but what's up there should give you all the plumbing you need. Let me know if that was a false statement.</p>

<p>It's not done yet, two-factor auth coming rather soon, but the existing API isn't going to change at this point. I may put another layer on top just to simplify the external interface, and maybe make it easier to expose this system as a web-service, but that's about it.</p>

<h2>Not Authenticating</h2>

<p>Before we go any further, lets take a look at some real-life systems to see how they handle the Authentication Problem. I doubt you'll be surprised.</p>

<h4>IRC</h4>

<p>This is the classic online communication protocol. In fact, if you like, we can go further.</p>

<h4>Mail</h4>

<p>Not Email. Old mail. The original dead-tree protocol, just in case IRC wasn't quite classic enough for you. They have one very important thing in common; neither does any kind of authentication. A user in IRC chooses a username each time they log in to a session. They may choose a different name each time, and another user may choose a name that belonged to someone else last time. Likewise, mail doesn't authenticate. There are optional, unvalidated fields on every envelope where someone can put a not-necessarily-correct return address, but that's it. Bottom line, you really don't know who you're talking to. If you want to, you need to authenticate them some other way. Either you know their handwriting, or you're familiar with their word frequency, or maybe you've exchanged keys in the past so that you can now verify who they are, but the channel itself provides you with none of this information. Further, you have no real guarantee that a message you send makes it to your intended target, or that you're getting all messages addressed to you, or that they aren't being observed/tampered with even if they do eventually get where they're going.</p>

<p>These are the prototypical unsecured channels, and they still<a href=\"#foot-Sun-Jul-15-004825EDT-2012\" name=\"note-Sun-Jul-15-004825EDT-2012\">[1]</a> do a pretty decent job of putting humans in touch with one another in indirect ways. Mail used to be a fairly reliable line of communication, but I'm honestly having a hard time remembering the last time I got something other than spam or bills in the mail. I'm not entirely sure why, so I won't theorize. The key with IRC seems to be community size. It's a good bet that you can get some profitable conversation happening on smaller channels, but larger ones seem to exponentially attract various spammers.</p>

<p>The authentication system<a href=\"#foot-Sun-Jul-15-004834EDT-2012\" name=\"note-Sun-Jul-15-004834EDT-2012\">[2]</a> is nonexistent. Moving on.</p>

<h4>Message Boards</h4>

<p>I'm not discussing forums yet. I'm instead referring to the <a href=\"http://kusabax.cultnet.net/\">various</a> <a href=\"http://www.2chan.net/script/\">*aba</a>/<a href=\"http://danbooru.donmai.us/help/source_code\">*booru</a>-descended boards. These typically don't use authentication either, except for the moderators. They do tend to have the common feature of \"tripcodes\". Basically, hashes with varying levels of security depending on implementation. They don't let you know who you're talking to either, but it's at least semi-possible to verify that a given series of tripped messages come from the same source.</p>

<p>Moderation mostly seems to take the form of deletion passwords. That is, there doesn't seem to be a separate interface for mods, they just have the ability to remove content and hand out bans using an authentication they're given<a href=\"#foot-Sun-Jul-15-004841EDT-2012\" name=\"note-Sun-Jul-15-004841EDT-2012\">[3]</a>.</p>

<p>The key takeaways here are twofold. First, non-authentication is the norm. It's not only conceivable but usual to have authentication between endpoints handled entirely separately from the intended communication channel. Second, it's unnecessary to enforce authentication for the purposes of communication or publishing. When you're posting content or sending messages back and forth, it's typically enough to verify that a given set of messages/articles all have the same source without necessarily verifying what that source is. Moving on. Again.</p>

<h4>Wikis</h4>

<p>These sit between IRC and Forums in terms of authentication strength. Here, I'm talking about both actual <a href=\"http://en.wikipedia.org/wiki/Wiki\">wikis</a>, and systems like <a href=\"http://stackoverflow.com/\">Stackoverflow</a>. The key is that there is a user account system<a href=\"#foot-Sun-Jul-15-004908EDT-2012\" name=\"note-Sun-Jul-15-004908EDT-2012\">[4]</a>, and it's not just for moderators, but it <i>is</i> optional. Anyone can view and contribute some sort of information, but there is an inner circle of trusted users that makes up a wiki's core community, and that core wields the really powerful brushes.</p>

<p>The authentication that does exist is, by and large, the same password based stuff that gets used everywhere regardless of security. Some of them use <a href=\"http://en.wikipedia.org/wiki/OpenID\">OpenID</a>, which is a fantastic system in theory, but in practice seems to come down to a password system where four or five giant companies control the user databases for everyone<a href=\"#foot-Sun-Jul-15-004915EDT-2012\" name=\"note-Sun-Jul-15-004915EDT-2012\">[5]</a>. I think we can do better.</p>

<h4>Forums</h4>

<p>We're talking about the standard <a href=\"http://www.phpbb.com/\">phpBB-style</a> forums, as well as stuff a-la <a href=\"http://www.reddit.com/\">Reddit</a> and various social/news sites. By and large, these maintain their own user systems. I'm not going to make a blanket statement like <b>none of them actually need your information to do the job they propose to</b>, but it's at least partially true. This is the next level of authentication above wikis; you can view information without an account, but contributing any effort at all to the target community requires a registration. An effort is made to have people associate their identity with one account by tracking post numbers, karma, badges, or some combination of the above. That doesn't mean it happens, and in practice, spammers tend to commonly have vast networks of identities at their disposal if the potential audience is big enough. Really, these systems don't require the level of authentication they tend to have. I'm inclined to be cynical about it and say that they only want to have some sort of user estimate in hand, but that may not be the case.</p>

<h4>Transaction Authorities</h4>

<p>These are things like, oh, for example <i>your bank</i>. This isn't a publication system, there's a communication channel in place specifically to let you issue orders about resources that are ostensibly under your control. They tend not to use OpenID<a href=\"#foot-Sun-Jul-15-004937EDT-2012\" name=\"note-Sun-Jul-15-004937EDT-2012\">[6]</a>, and they tend to <a href=\"http://me.veekun.com/blog/2011/12/04/fuck-passwords/\">restrict passwords</a> more than other organizations. These places have a vested, legitimate interest in knowing precisely who you are, keeping fake accounts as close to non-existent as possible, and having a traceable, consistent way of verifying where each command they're acting on came from.</p>

<p>The kicker here, the reason I get the feeling that these institutions are fine with enforcing crappy password and security practices for their users is that they don't really trust this whole internet thing. Here, let me regale you with a snippet from <a href=\"https://online.pcmastercard.ca/PCB_Consumer/AcctTermsOutside.do\">the TOU agreement my former bank puts forth</a></p>

<blockquote><b>2.1 Security and privacy.</b> You acknowledge that the Internet is not a secure medium and privacy cannot be guaranteed or ensured.
<span class=\"sig\">-PC Mastercard Terms of Use</span></blockquote>

<p>In other words, \"sure have your account, we're still calling you, or expecting you to come into a branch physically for the big stuff\". I'm not entirely convinced this is a bad idea.</p>

<h2>Spectrum Summary</h2>

<p>There's a huge number of different authentication strategies in use on the internet already. You can do most of what you need to without ever signing in to anything. There are a few things that require really strong, working security to do online. There are three potential reactions to this state of affairs.</p>

<ol>
  <li><b>Fuck It</b>. We don't need authentication on the internet. Lets make more anonymous services, and allow communication to happen in a freehand, fully private way. We don't need strong security, and it shouldn't be assumed in public networks; if there's something you need good security for, do it in meatspace.</li>
  <li><b>We're Good Enough</b>. Half-assed authentication is good enough if no one looks too closely. It's there to keep honest people honest in any case, so improving it substantially isn't a big win, and exploiting it in a brute-force manner won't happen in ways we don't anticipate.</li>
  <li><b>We Need Good Auth</b>. There are at least some situations that <i>require</i> intelligent, secure, verifiable identification systems, so we may as well put one together. If for no other reason than to use it where it's absolutely necessary.</li>
</ol>

<p>As evidenced by my 4-part (and sure to grow) series on authentication, I fall somewhere between groups 2 and 3. Mostly in 3, really, except that I agree that perfect security is probably more trouble than it's worth; I may talk about why I think that in the future, but you can probably work it out yourself. That said, the difference between digital crypto-systems and <a href=\"http://en.wikipedia.org/wiki/Locksmithing\">the traditional ones</a> is that with the tools we've got, we can do a damn sight better than \"keeping honest people honest\". That's something to aspire to, and I aim to make a dent in the problem, at least.</p>


<hr />
<h5>Footnotes</h5>
<p>1 - <a href=\"#note-Sun-Jul-15-004825EDT-2012\" name=\"foot-Sun-Jul-15-004825EDT-2012\">[back]</a> - For a little while at least, in the case of mail.</p>

<p>2 - <a href=\"#note-Sun-Jul-15-004834EDT-2012\" name=\"foot-Sun-Jul-15-004834EDT-2012\">[back]</a> - Which is what we're interested in here.</p>

<p>3 - <a href=\"#note-Sun-Jul-15-004841EDT-2012\" name=\"foot-Sun-Jul-15-004841EDT-2012\">[back]</a> - Presumably one per user, though I guess I could imagine there being only one moderation password for a given board.</p>

<p>4 - <a href=\"#note-Sun-Jul-15-004908EDT-2012\" name=\"foot-Sun-Jul-15-004908EDT-2012\">[back]</a> - Unlike the various message boards, which provide some trace of authentication capability without user accounts.</p>

<p>5 - <a href=\"#note-Sun-Jul-15-004915EDT-2012\" name=\"foot-Sun-Jul-15-004915EDT-2012\">[back]</a> - Yes, everyone can technically host their own identity, I get the feeling that a vast majority of OpenID users just let Facebook handle it. I reserve judgment on whether that's a good thing.</p>

<p>6 - <a href=\"#note-Sun-Jul-15-004937EDT-2012\" name=\"foot-Sun-Jul-15-004937EDT-2012\">[back]</a> - To put it mildly.</p>
"))
((5202 3723 585291000) :INSERT (92 :POSTED 3551227200))
((5202 3723 585293000) :INSERT (92 :TAG :IDEA-PEELING))
((5202 3723 585296000) :INSERT (92 :TAG :SECURITY))
((5202 3723 585298000) :INSERT (92 :TAG :SPECULATION))
((5202 3723 586980000) :INSERT
 (93 :TITLE "CL-Chan (a CLSQL and Hunchentoot crash course) - Part 2"))
((5202 3723 587001000) :INSERT (93 :FILE "using-clsql-part2.html"))
((5202 3723 587006000) :INSERT (93 :EDITED 3610311020))
((5202 3723 587010000) :INSERT
 (93 :BODY
  "<p>I've fallen to a fit of OCD in the past few days, which has compelled me to clean out my langnostic drafts folder. Yes, I have a drafts folder. It turns out that it contained something on the order of 12 almost finished articles that I just never got around to polishing. I'm still working on the authentication system, and poking around at the prospect of a real-time message board, but I'll <i>also</i> be either scrapping or refining+posting those forgotten drafts for the next few weeks. Starting with one about a year and a half in the making.</p>

<p>Start with <a href=\"/article?name=using-clsql.html\">Part 1</a> if you like.</p>

<hr />

<p>Aaaand we're finally back.</p>

<p>This time we'll be looking at extending the board features and dealing with images, but first, I'm sure I'm not the only one tired of having to type out</p>

<pre>(ql:quickload (list <span style=\"color: #7a378b;\">:hunchentoot</span> <span style=\"color: #7a378b;\">:cl-who</span> <span style=\"color: #7a378b;\">:clsql</span> <span style=\"color: #7a378b;\">:formlets</span>))
(load <span style=\"color: #8b2252;\">\"cl-chan.lisp\"</span>)</pre>

<p>every time I want to load the package. Ideally, I'd like that to be a single statement (\"Load all cl-chan files in the correct order, and do the same for each dependency\"). That's one of the things an <code>asdf-system</code> definition lets you do<a href=\"#foot-Mon-Jul-16-233541EDT-2012\" name=\"note-Mon-Jul-16-233541EDT-2012\">[1]</a>. First up, we've been keeping everything in one file, and we really shouldn't. At the very least, the model should be isolated since it's going to grow shortly. It's also typical for CL projects to have a separate <code>package.lisp</code> file<a href=\"#foot-Mon-Jul-16-233557EDT-2012\" name=\"note-Mon-Jul-16-233557EDT-2012\">[2]</a>. Our package file is going to be very simple, since we don't export anything yet.</p>

<pre>(<span style=\"color: #a020f0;\">defpackage</span> <span style=\"color: #228b22;\">:cl-chan</span> (<span style=\"color: #7a378b;\">:use</span> <span style=\"color: #7a378b;\">:cl</span> <span style=\"color: #7a378b;\">:cl-who</span> <span style=\"color: #7a378b;\">:hunchentoot</span> <span style=\"color: #7a378b;\">:formlets</span> <span style=\"color: #7a378b;\">:clsql</span>)
  (<span style=\"color: #7a378b;\">:shadowing-import-from</span> <span style=\"color: #7a378b;\">:clsql</span> <span style=\"color: #7a378b;\">:select</span>))
(<span style=\"color: #a020f0;\">in-package</span> <span style=\"color: #7a378b;\">:cl-chan</span>)

(connect '(<span style=\"color: #8b2252;\">\"localhost\"</span> <span style=\"color: #8b2252;\">\"cl_chan\"</span> <span style=\"color: #8b2252;\">\"me\"</span> <span style=\"color: #8b2252;\">\"my password\"</span>) <span style=\"color: #7a378b;\">:database-type</span> <span style=\"color: #7a378b;\">:mysql</span>)

(setf *default-caching* nil)

(setf formlets:*public-key* <span style=\"color: #8b2252;\">\"my-public-key\"</span> 
      formlets:*private-key* <span style=\"color: #8b2252;\">\"my-private-key\"</span>)

(<span style=\"color: #a020f0;\">defvar</span> <span style=\"color: #a0522d;\">*web-server*</span> (start (make-instance 'hunchentoot:easy-acceptor <span style=\"color: #7a378b;\">:port</span> 4242)))
(push (create-static-file-dispatcher-and-handler <span style=\"color: #8b2252;\">\"/cl-chan.css\"</span> (merge-pathnames <span style=\"color: #8b2252;\">\"cl-chan.css\"</span>)) *dispatch-table*)</pre>

<p>That should do it.</p>

<p>Next, lets pull out our testing data into a file named \"testing-data.lisp\" (we'll remove this later, but it will let you re-create your database fairly easily if you need to while we're still playing around)</p>

<pre>(<span style=\"color: #a020f0;\">in-package</span> <span style=\"color: #7a378b;\">:cl-chan</span>)

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">create-test-database</span> ()
  (create-tables)
  (insert-test-data))

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">drop-tables</span> ()
  (<span style=\"color: #a020f0;\">dolist</span> (i '(board thread comment))
    (drop-view-from-class i)))

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">create-tables</span> ()
  (<span style=\"color: #a020f0;\">dolist</span> (i '(board thread comment))
    (create-view-from-class i)))

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">insert-test-data</span> ()
  (<span style=\"color: #a020f0;\">loop</span> for i in (list (make-instance 'board <span style=\"color: #7a378b;\">:name</span> <span style=\"color: #8b2252;\">\"a\"</span>)
                       (make-instance 'thread <span style=\"color: #7a378b;\">:board-id</span> 1)
                       (make-instance 'thread <span style=\"color: #7a378b;\">:board-id</span> 1)

                       (make-instance 'comment 
                            <span style=\"color: #7a378b;\">:thread-id</span> 1
                            <span style=\"color: #7a378b;\">:author</span> <span style=\"color: #8b2252;\">\"me\"</span> <span style=\"color: #7a378b;\">:email</span> <span style=\"color: #8b2252;\">\"my@email.com\"</span> <span style=\"color: #7a378b;\">:subject</span> <span style=\"color: #8b2252;\">\"FRIST\"</span>
                            <span style=\"color: #7a378b;\">:body</span> <span style=\"color: #8b2252;\">\"I am most certainly the first poster in this fine establishment\"</span>
                            <span style=\"color: #7a378b;\">:date-time</span> (now))
                       (make-instance 'comment 
                            <span style=\"color: #7a378b;\">:thread-id</span> 1
                            <span style=\"color: #7a378b;\">:author</span> <span style=\"color: #8b2252;\">\"someone else\"</span> <span style=\"color: #7a378b;\">:email</span> <span style=\"color: #8b2252;\">\"you@fmail.com\"</span> <span style=\"color: #7a378b;\">:subject</span> <span style=\"color: #8b2252;\">\"Stop being a douchebag\"</span>
                            <span style=\"color: #7a378b;\">:date-time</span> (now))
                       (make-instance 'comment 
                            <span style=\"color: #7a378b;\">:thread-id</span> 1
                            <span style=\"color: #7a378b;\">:subject</span> <span style=\"color: #8b2252;\">\"You must be new here\"</span>
                            <span style=\"color: #7a378b;\">:body</span> <span style=\"color: #8b2252;\">\"trolled-softly.jpg\"</span>
                            <span style=\"color: #7a378b;\">:date-time</span> (now))
                       (make-instance 'comment 
                            <span style=\"color: #7a378b;\">:thread-id</span> 2
                            <span style=\"color: #7a378b;\">:body</span> <span style=\"color: #8b2252;\">\"[Something vaguely anti-semetic.]\"</span>
                            <span style=\"color: #7a378b;\">:date-time</span> (now)))
        do (update-records-from-instance i)))</pre>

<p>Next, pull out the model (the classes and related methods) into <code>model.lisp</code>. This'll actually be the most complicated individual file in the project.</p>

<pre>(<span style=\"color: #a020f0;\">in-package</span> <span style=\"color: #7a378b;\">:cl-chan</span>)
(file-enable-sql-reader-syntax)

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">now</span> () (clsql-sys:utime-&gt;time (get-universal-time)))

<span style=\"color: #b22222;\">;;;;;;;;;; </span><span style=\"color: #b22222;\">board
</span>(def-view-class board ()
  ((id <span style=\"color: #7a378b;\">:accessor</span> id <span style=\"color: #7a378b;\">:initarg</span> <span style=\"color: #7a378b;\">:id</span> <span style=\"color: #7a378b;\">:type</span> integer <span style=\"color: #7a378b;\">:db-constraints</span> (<span style=\"color: #7a378b;\">:not-null</span> <span style=\"color: #7a378b;\">:auto-increment</span>) <span style=\"color: #7a378b;\">:db-kind</span> <span style=\"color: #7a378b;\">:key</span>)
   (name <span style=\"color: #7a378b;\">:reader</span> name <span style=\"color: #7a378b;\">:initarg</span> <span style=\"color: #7a378b;\">:name</span> <span style=\"color: #7a378b;\">:type</span> (string 5))
   (threads <span style=\"color: #7a378b;\">:accessor</span> threads <span style=\"color: #7a378b;\">:db-kind</span> <span style=\"color: #7a378b;\">:join</span>
            <span style=\"color: #7a378b;\">:db-info</span> (<span style=\"color: #7a378b;\">:join-class</span> thread <span style=\"color: #7a378b;\">:home-key</span> id <span style=\"color: #7a378b;\">:foreign-key</span> board-id <span style=\"color: #7a378b;\">:set</span> t))))

(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">echo</span> ((board board))
  (<span style=\"color: #a020f0;\">with-html-output</span> (*standard-output* nil <span style=\"color: #7a378b;\">:indent</span> t)
    (<span style=\"color: #7a378b;\">:h1</span> (str (name board))) (<span style=\"color: #7a378b;\">:hr</span>)
    (show-formlet post-thread-form) (<span style=\"color: #7a378b;\">:hr</span>)
    (<span style=\"color: #a020f0;\">dolist</span> (thread (threads board))
      (summarize thread))))

<span style=\"color: #b22222;\">;;;;;;;;;; </span><span style=\"color: #b22222;\">thread
</span>(def-view-class thread ()
  ((id <span style=\"color: #7a378b;\">:accessor</span> id <span style=\"color: #7a378b;\">:initarg</span> <span style=\"color: #7a378b;\">:id</span> <span style=\"color: #7a378b;\">:type</span> integer <span style=\"color: #7a378b;\">:db-constraints</span> (<span style=\"color: #7a378b;\">:not-null</span> <span style=\"color: #7a378b;\">:auto-increment</span>) <span style=\"color: #7a378b;\">:db-kind</span> <span style=\"color: #7a378b;\">:key</span>)
   (board-id <span style=\"color: #7a378b;\">:reader</span> board-id <span style=\"color: #7a378b;\">:initarg</span> <span style=\"color: #7a378b;\">:board-id</span> <span style=\"color: #7a378b;\">:type</span> integer)
   (comments <span style=\"color: #7a378b;\">:accessor</span> comments <span style=\"color: #7a378b;\">:db-kind</span> <span style=\"color: #7a378b;\">:join</span>
             <span style=\"color: #7a378b;\">:db-info</span> (<span style=\"color: #7a378b;\">:join-class</span> comment <span style=\"color: #7a378b;\">:home-key</span> id <span style=\"color: #7a378b;\">:foreign-key</span> thread-id <span style=\"color: #7a378b;\">:set</span> t))))

(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">summarize</span> ((thread thread) <span style=\"color: #228b22;\">&amp;optional</span> (preview-comment-count 5))
  (<span style=\"color: #a020f0;\">let*</span> ((preview-comments (last (cdr (comments thread)) preview-comment-count))
         (omitted-count (- (length (cdr (comments thread))) (length preview-comments)))
         (first-comment (car (comments thread))))
    (<span style=\"color: #a020f0;\">with-html-output</span> (*standard-output* nil <span style=\"color: #7a378b;\">:indent</span> t)
      (<span style=\"color: #7a378b;\">:div</span> <span style=\"color: #7a378b;\">:class</span> <span style=\"color: #8b2252;\">\"thread\"</span>
            (echo-header first-comment)
            (<span style=\"color: #7a378b;\">:a</span> <span style=\"color: #7a378b;\">:href</span> (format nil <span style=\"color: #8b2252;\">\"/thread?thread-id=~a\"</span> (id thread)) <span style=\"color: #8b2252;\">\"Reply\"</span>)
            (<span style=\"color: #7a378b;\">:span</span> <span style=\"color: #7a378b;\">:class</span> <span style=\"color: #8b2252;\">\"body\"</span> (<span style=\"color: #7a378b;\">:p</span> (str (body first-comment))))
            (<span style=\"color: #a020f0;\">when</span> (&gt; omitted-count 0)
              (htm (<span style=\"color: #7a378b;\">:p</span> <span style=\"color: #7a378b;\">:class</span> <span style=\"color: #8b2252;\">\"omitted\"</span> 
                       (str (format nil <span style=\"color: #8b2252;\">\"~a comments omitted (and we don't do pictures yet)\"</span> 
                                    omitted-count)))))
            (<span style=\"color: #a020f0;\">dolist</span> (r preview-comments) (str (echo r)))))))

(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">echo</span> ((thread thread))
  (<span style=\"color: #a020f0;\">let</span> ((first-comment (car (comments thread))))
    (<span style=\"color: #a020f0;\">with-html-output</span> (*standard-output* nil <span style=\"color: #7a378b;\">:indent</span> t)
      (<span style=\"color: #7a378b;\">:a</span> <span style=\"color: #7a378b;\">:href</span> <span style=\"color: #8b2252;\">\"/board\"</span> <span style=\"color: #8b2252;\">\"[Back]\"</span>) (<span style=\"color: #7a378b;\">:hr</span>)
      (show-formlet post-comment-form <span style=\"color: #7a378b;\">:default-values</span> (list (id thread))) (<span style=\"color: #7a378b;\">:hr</span>)
      (<span style=\"color: #7a378b;\">:div</span> <span style=\"color: #7a378b;\">:class</span> <span style=\"color: #8b2252;\">\"thread\"</span>
            (echo-header first-comment)
            (<span style=\"color: #7a378b;\">:span</span> <span style=\"color: #7a378b;\">:class</span> <span style=\"color: #8b2252;\">\"body\"</span> 
                   (<span style=\"color: #7a378b;\">:p</span> (str (body first-comment))))
            (<span style=\"color: #a020f0;\">dolist</span> (r (cdr (comments thread))) (str (echo r)))))))

<span style=\"color: #b22222;\">;;;;;;;;;; </span><span style=\"color: #b22222;\">comment
</span>(def-view-class comment ()
  ((id <span style=\"color: #7a378b;\">:accessor</span> id <span style=\"color: #7a378b;\">:initarg</span> <span style=\"color: #7a378b;\">:id</span> <span style=\"color: #7a378b;\">:type</span> integer <span style=\"color: #7a378b;\">:db-constraints</span> (<span style=\"color: #7a378b;\">:not-null</span> <span style=\"color: #7a378b;\">:auto-increment</span>) <span style=\"color: #7a378b;\">:db-kind</span> <span style=\"color: #7a378b;\">:key</span>)
   (thread-id <span style=\"color: #7a378b;\">:reader</span> thread-id <span style=\"color: #7a378b;\">:initarg</span> <span style=\"color: #7a378b;\">:thread-id</span> <span style=\"color: #7a378b;\">:type</span> integer)
   (author <span style=\"color: #7a378b;\">:reader</span> author <span style=\"color: #7a378b;\">:initarg</span> <span style=\"color: #7a378b;\">:author</span> <span style=\"color: #7a378b;\">:initform</span> nil <span style=\"color: #7a378b;\">:type</span> string)
   (email <span style=\"color: #7a378b;\">:reader</span> email <span style=\"color: #7a378b;\">:initarg</span> <span style=\"color: #7a378b;\">:email</span> <span style=\"color: #7a378b;\">:initform</span> nil <span style=\"color: #7a378b;\">:type</span> string)
   (subject <span style=\"color: #7a378b;\">:reader</span> subject <span style=\"color: #7a378b;\">:initarg</span> <span style=\"color: #7a378b;\">:subject</span> <span style=\"color: #7a378b;\">:initform</span> nil <span style=\"color: #7a378b;\">:type</span> string)
   (body <span style=\"color: #7a378b;\">:reader</span> body <span style=\"color: #7a378b;\">:initarg</span> <span style=\"color: #7a378b;\">:body</span> <span style=\"color: #7a378b;\">:initform</span> nil <span style=\"color: #7a378b;\">:type</span> string)
   (date-time <span style=\"color: #7a378b;\">:reader</span> date-time <span style=\"color: #7a378b;\">:initarg</span> <span style=\"color: #7a378b;\">:date-time</span> <span style=\"color: #7a378b;\">:type</span> wall-time)))

(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">echo</span> ((comment comment))
  (<span style=\"color: #a020f0;\">with-html-output-to-string</span> (*standard-output* nil <span style=\"color: #7a378b;\">:indent</span> t)
    (<span style=\"color: #7a378b;\">:div</span> <span style=\"color: #7a378b;\">:class</span> <span style=\"color: #8b2252;\">\"comment\"</span>
          (echo-header comment)
          (<span style=\"color: #7a378b;\">:span</span> <span style=\"color: #7a378b;\">:class</span> <span style=\"color: #8b2252;\">\"body\"</span> 
                 (<span style=\"color: #7a378b;\">:p</span> (str (body comment)))))))

(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">echo-header</span> ((comment comment))
  (<span style=\"color: #a020f0;\">with-html-output</span> (*standard-output*)
    (<span style=\"color: #7a378b;\">:span</span> <span style=\"color: #7a378b;\">:class</span> <span style=\"color: #8b2252;\">\"header\"</span> 
           (<span style=\"color: #a020f0;\">dolist</span> (elem '(author email date-time subject))
             (htm (<span style=\"color: #7a378b;\">:span</span> <span style=\"color: #7a378b;\">:class</span> (format nil <span style=\"color: #8b2252;\">\"~(~a~)\"</span> elem) (str (slot-value comment elem))))))))</pre>

<p>Having chopped all that off, your <code>cl-chan.lisp</code> file should be left at</p>

<pre>(<span style=\"color: #a020f0;\">in-package</span> <span style=\"color: #7a378b;\">:cl-chan</span>)
(file-enable-sql-reader-syntax)

(<span style=\"color: #a020f0;\">defmacro</span> <span style=\"color: #0000ff;\">page-template</span> ((<span style=\"color: #228b22;\">&amp;key</span> title) <span style=\"color: #228b22;\">&amp;body</span> body)
  `(<span style=\"color: #a020f0;\">with-html-output-to-string</span> (*standard-output* nil <span style=\"color: #7a378b;\">:prologue</span> t <span style=\"color: #7a378b;\">:indent</span> t)
     (<span style=\"color: #7a378b;\">:html</span> <span style=\"color: #7a378b;\">:xmlns</span> <span style=\"color: #8b2252;\">\"http://www.w3.org/1999/xhtml\"</span> <span style=\"color: #7a378b;\">:xml</span>\\<span style=\"color: #7a378b;\">:lang</span> <span style=\"color: #8b2252;\">\"en\"</span> <span style=\"color: #7a378b;\">:lang</span> <span style=\"color: #8b2252;\">\"en\"</span>
            (<span style=\"color: #7a378b;\">:head</span> (<span style=\"color: #7a378b;\">:meta</span> <span style=\"color: #7a378b;\">:http-equiv</span> <span style=\"color: #8b2252;\">\"Content-Type\"</span> <span style=\"color: #7a378b;\">:content</span> <span style=\"color: #8b2252;\">\"text/html;charset=utf-8\"</span>)
                   (<span style=\"color: #7a378b;\">:title</span> (str ,title))
                   (<span style=\"color: #7a378b;\">:link</span> <span style=\"color: #7a378b;\">:rel</span> <span style=\"color: #8b2252;\">\"stylesheet\"</span> <span style=\"color: #7a378b;\">:type</span> <span style=\"color: #8b2252;\">\"text/css\"</span> <span style=\"color: #7a378b;\">:href</span> <span style=\"color: #8b2252;\">\"/cl-chan.css\"</span>))
            (<span style=\"color: #7a378b;\">:body</span> ,@body))))

(<span style=\"color: #a020f0;\">define-formlet</span> (post-comment-form)
    ((thread-id hidden) 
     (author text) (email text) (subject text) (body textarea)
     (captcha recaptcha))
  (<span style=\"color: #a020f0;\">let</span> ((new-comment (make-instance 'comment
                                    <span style=\"color: #7a378b;\">:thread-id</span> (parse-integer thread-id)
                                    <span style=\"color: #7a378b;\">:author</span> author <span style=\"color: #7a378b;\">:email</span> email 
                                    <span style=\"color: #7a378b;\">:subject</span> subject <span style=\"color: #7a378b;\">:body</span> body
                                    <span style=\"color: #7a378b;\">:date-time</span> (now))))
    (update-records-from-instance new-comment)
    (redirect (format nil <span style=\"color: #8b2252;\">\"/thread?thread-id=~a\"</span> thread-id))))

(<span style=\"color: #a020f0;\">define-formlet</span> (post-thread-form)
    ((author text) (email text) (subject text)
     (body textarea <span style=\"color: #7a378b;\">:validation</span> ((longer-than? 5) <span style=\"color: #8b2252;\">\"You need to type at least six characters here.\"</span>))
     (captcha recaptcha))
  (<span style=\"color: #a020f0;\">let*</span> ((thread-id (update-records-from-instance
                     (make-instance 'thread <span style=\"color: #7a378b;\">:board-id</span> 1)))
         (new-comment (make-instance 'comment 
                                     <span style=\"color: #7a378b;\">:thread-id</span> thread-id
                                     <span style=\"color: #7a378b;\">:author</span> author <span style=\"color: #7a378b;\">:email</span> email 
                                     <span style=\"color: #7a378b;\">:subject</span> subject <span style=\"color: #7a378b;\">:body</span> body
                                     <span style=\"color: #7a378b;\">:date-time</span> (now))))
    (update-records-from-instance new-comment)
    (redirect<span style=\"color: #8b2252;\">\"/board\"</span>)))

(<span style=\"color: #a020f0;\">define-easy-handler</span> (board-page <span style=\"color: #7a378b;\">:uri</span> <span style=\"color: #8b2252;\">\"/board\"</span>) ()
  (page-template (<span style=\"color: #7a378b;\">:title</span> <span style=\"color: #8b2252;\">\"cl-chan\"</span>)
    (<span style=\"color: #a020f0;\">let</span> ((board (caar (select 'board <span style=\"color: #7a378b;\">:where</span> [= [slot-value 'board 'id] 1]))))
      (echo board))))

(<span style=\"color: #a020f0;\">define-easy-handler</span> (thread-page <span style=\"color: #7a378b;\">:uri</span> <span style=\"color: #8b2252;\">\"/thread\"</span>) (thread-id)
  (<span style=\"color: #a020f0;\">let</span> ((thread (caar (select 'thread <span style=\"color: #7a378b;\">:where</span> [= [slot-value 'thread 'id] thread-id]))))
    (page-template (<span style=\"color: #7a378b;\">:title</span> (or (subject (car (comments thread))) (id thread)))
      (echo thread))))</pre>

<p>Now that we've broken everything up, start up a new file called <code>cl-chan.asd</code> and put this in it</p>

<pre><span style=\"color: #b22222;\">;;; </span><span style=\"color: #b22222;\">-*- Mode: Lisp -*-
</span>(<span style=\"color: #a020f0;\">defpackage</span> <span style=\"color: #228b22;\">:cl-chan-system</span> (<span style=\"color: #7a378b;\">:use</span> <span style=\"color: #7a378b;\">:cl</span> <span style=\"color: #7a378b;\">:asdf</span>))
(<span style=\"color: #a020f0;\">in-package</span> <span style=\"color: #7a378b;\">:cl-chan-system</span>)

(asdf:defsystem cl-chan
  <span style=\"color: #7a378b;\">:version</span> <span style=\"color: #8b2252;\">\"0.001\"</span>
  <span style=\"color: #7a378b;\">:author</span> <span style=\"color: #8b2252;\">\"Inaimathi\"</span>
  <span style=\"color: #7a378b;\">:maintainer</span> <span style=\"color: #8b2252;\">\"you\"</span>
  <span style=\"color: #7a378b;\">:licence</span> <span style=\"color: #8b2252;\">\"AGPL\"</span>
  <span style=\"color: #7a378b;\">:description</span> <span style=\"color: #8b2252;\">\"A simple message board server\"</span>
  <span style=\"color: #7a378b;\">:depends-on</span> (<span style=\"color: #7a378b;\">:hunchentoot</span> <span style=\"color: #7a378b;\">:cl-who</span> <span style=\"color: #7a378b;\">:clsql</span> <span style=\"color: #7a378b;\">:formlets</span>)
  <span style=\"color: #7a378b;\">:serial</span> t  
  <span style=\"color: #7a378b;\">:components</span> ((<span style=\"color: #7a378b;\">:file</span> <span style=\"color: #8b2252;\">\"package\"</span>) (<span style=\"color: #7a378b;\">:file</span> <span style=\"color: #8b2252;\">\"model\"</span>) (<span style=\"color: #7a378b;\">:file</span> <span style=\"color: #8b2252;\">\"cl-chan\"</span>) (<span style=\"color: #7a378b;\">:file</span> <span style=\"color: #8b2252;\">\"testing-data\"</span>)))</pre>

<p>You should now be able to load up your lisp (with cl-chan/ as your working directory) and</p>

<pre>&gt; (ql:quickload <span style=\"color: #7a378b;\">:cl-chan</span>)
To load <span style=\"color: #8b2252;\">\"cl-chan\"</span>:
  Load 1 ASDF system:
    cl-chan
<span style=\"color: #b22222;\">; </span><span style=\"color: #b22222;\">Loading \"cl-chan\"
</span>..................................................
[package cl-chan]...
(<span style=\"color: #7a378b;\">:CL-CHAN</span>)</pre>

<p>Much better than doing it manually, and if you're showing off your app, you get to pretend you know <a href=\"http://www.xach.com/\">Zach Beane</a> for about two seconds until people realize what's going on :p. Now keep in mind that in this particular project, it hasn't saved us all that much. Even with our better organized code, we'd only really need to evaluate</p>

<pre>(ql:quickload (list <span style=\"color: #7a378b;\">:hunchentoot</span> <span style=\"color: #7a378b;\">:cl-who</span> <span style=\"color: #7a378b;\">:clsql</span> <span style=\"color: #7a378b;\">:formlets</span>))
(load <span style=\"color: #8b2252;\">\"package.lisp\"</span>)
(load <span style=\"color: #8b2252;\">\"model.lisp\"</span>)
(load <span style=\"color: #8b2252;\">\"cl-chan.lisp\"</span>)
(load <span style=\"color: #8b2252;\">\"testing-data.lisp\"</span>)</pre>

<p>in order to launch our little message board. Once you start adding files, you rapidly see the value of being able to use a single load statement instead, since a properly written <code>.asd</code> automatically loads them all in the correct order, as well as loading any noted dependencies. Note that once you understand what <code>asd</code>/<code>package.lisp</code> files are supposed to look like, you can auto-generate them with <a href=\"https://github.com/xach/quickproject/\">quickproject</a> (thanks again, Zach).</p>

<p>Ok, it's about damn time we figured out what to do about these images we want, otherwise it's not much of an <b>image</b>board.</p>

<div class=\"note alternatives\">
  <h3>Alternatives Note</h3>
  <span class=\"note-body\">
    <p>I'm going to continue the rest of the tutorial assuming we're taking a slightly reduced functionality, Lisp-only approach. It'll make the system really easy to set up, and increase its portability across various platforms (since everything we'll be using is a lisp library, it'll run anywhere you can load a thread-capable Common Lisp implementation). However, that's far from the only option.</p>

    <h4>The FFI Route</h4>
    <p>First, if you don't mind some installation headaches, you can use the faster-at-run-time <code><span style=\"color: #7a378b;\">:cl-gd</span></code> (which is a set of UFFI bindings to the <a href=\"http://www.boutell.com/gd/\">C-based GD graphics library</a>).</p>

    <p>Ostensibly, you can install libgd2-xpm or libgd2-noxpm (if you don't know the difference, just use the first one) and then <code>(ql:quickload :cl-gd)</code>. And if that works for you, fantastic, you lucky fucker. Before you celebrate though, make sure to try out <a href=\"http://weitz.de/cl-gd/\">an example or two</a>, because I thought it really <i>was</i> this easy to begin with.</p>
    
    <p>If you're getting <code>undefined alien function</code> errors, as I did, you'll actually need to install the debian package from the <code>lenny</code> repos. If you're already running <code>lenny</code>, just do <code>apt-get install cl-gd</code>, otherwise you'll need to add</p>
    <pre>deb http://ftp.us.debian.org/debian/ lenny main contrib</pre>
    
    <p>to your <code>/etc/apt/sources.list</code> file, <i>then</i> run <code>apt-get install cl-gd</code>. I have no idea what issues you'll run into with lisps other than SBCL on systems other than Debian linux. Which is why I'm doing the portable thing in the actual tutorial.</p>

    <h4>The Lazy Bastard Route</h4>

    <p>Don't let the name throw you, it may be a legitimate option, depending on the circumstances. Basically, instead of dicking around with native libraries, or FFI calls, you just load up <code><span style=\"color: #7a378b;\">:trivial-shell</span></code> and do something like</p>

    <pre>(shell-command (format nil <span style=\"color: #8b2252;\">\"convert ~a -resize 300\\\\&gt; ~a-preview.jpg\"</span> image-file image-name))</pre>

    <p>The performance on it sucks donkey dong, and it's not portable to non-posix-compliant platforms, and it requires you to have ImageMagick installed on the deployment environment, <i>and</i> it means you need to handle server-side image naming yourself (which we were going to do anyway) to avoid shell injection attacks. However, it's one line of code and it covers conversion for pretty much every graphical format under the sun (the main tutorial will be doing things the hard way, so you'll fully appreciate the simplicity of <code>shell</code>ing out). If you can afford those hits, it's not a bad option.</p>
  </span>
</div>

<p>I'll be continuing with the pure-Lisp version for portability purposes, and that gives us a bit of a problem. Unlike the \"FFI\" and \"Lazy Bastard\" options outlined above, Common Lisp doesn't have a general image-formatting library. We'll need to use separate libraries (and slightly different processes) for different image formats. Three in all, since we want to fully implement the 4chan formats; <code><a href=\"http://cyrusharmon.org/static/projects/ch-image/doc/ch-image.xhtml\">ch-image</a></code> for JPEGs, <code><a href=\"http://common-lisp.net/project/imago/\">imago</a></code> for PNGs and <code><a href=\"http://www.xach.com/lisp/skippy/\">skippy</a></code> for GIFs. That's a pretty obvious place to apply method calls, actually, so lets start by formalizing the process for a single image type, then extending it to the others.</p>

<p>There are exactly two things we'll want to do to an incoming image: store the original, and store a 250x250 pixel proportional preview image. Before we get to that, we'll need to include a new library. <code><span style=\"color: #7a378b;\">:cl-fad</span></code> will give us some easy ways of dealing with files on disk, so add it to your <code>asd</code> file <code>package.lisp</code> and load it into your <code>REPL</code> too. While we're at it, lets add the image manipulating libraries and the new file \"images.lisp\" into the mix.</p>

<pre><span style=\"color: #b22222;\">;;; </span><span style=\"color: #b22222;\">cl-chan.asd
</span>
...
<span style=\"color: #7a378b;\">:depends-on</span> (<span style=\"color: #7a378b;\">:hunchentoot</span> <span style=\"color: #7a378b;\">:cl-who</span> <span style=\"color: #7a378b;\">:clsql</span> <span style=\"color: #7a378b;\">:formlets</span> <span style=\"color: #7a378b;\">:cl-fad</span> 
                            <span style=\"color: #b22222;\">;; </span><span style=\"color: #b22222;\">image related
</span>                            <span style=\"color: #7a378b;\">:imago</span> <span style=\"color: #7a378b;\">:skippy</span> <span style=\"color: #7a378b;\">:ch-image</span>)
...
<span style=\"color: #7a378b;\">:components</span> ((<span style=\"color: #7a378b;\">:file</span> <span style=\"color: #8b2252;\">\"package\"</span>) (<span style=\"color: #7a378b;\">:file</span> <span style=\"color: #8b2252;\">\"model\"</span>) (<span style=\"color: #7a378b;\">:file</span> <span style=\"color: #8b2252;\">\"cl-chan\"</span>) (<span style=\"color: #7a378b;\">:file</span> <span style=\"color: #8b2252;\">\"testing-data\"</span>) (<span style=\"color: #7a378b;\">:file</span> <span style=\"color: #8b2252;\">\"images\"</span>)))

<span style=\"color: #b22222;\">;;; </span><span style=\"color: #b22222;\">package.lisp
</span>
(<span style=\"color: #a020f0;\">defpackage</span> 
    <span style=\"color: #7a378b;\">:cl-chan</span> (<span style=\"color: #7a378b;\">:use</span> <span style=\"color: #7a378b;\">:cl</span> <span style=\"color: #7a378b;\">:cl-who</span> <span style=\"color: #7a378b;\">:hunchentoot</span> <span style=\"color: #7a378b;\">:formlets</span> <span style=\"color: #7a378b;\">:clsql</span> <span style=\"color: #7a378b;\">:cl-fad</span>)
    (<span style=\"color: #7a378b;\">:import-from</span> <span style=\"color: #7a378b;\">:imago</span> <span style=\"color: #7a378b;\">:read-png</span> <span style=\"color: #7a378b;\">:write-png</span>) <span style=\"color: #b22222;\">;; </span><span style=\"color: #b22222;\">resize
</span>    (<span style=\"color: #7a378b;\">:import-from</span> <span style=\"color: #7a378b;\">:ch-image</span> <span style=\"color: #7a378b;\">:read-image-file</span> <span style=\"color: #7a378b;\">:write-image-file</span>) <span style=\"color: #b22222;\">;; </span><span style=\"color: #b22222;\">resize-image
</span>    (<span style=\"color: #7a378b;\">:import-from</span> <span style=\"color: #7a378b;\">:skippy</span> <span style=\"color: #7a378b;\">:load-data-stream</span> <span style=\"color: #7a378b;\">:output-data-stream</span>) <span style=\"color: #b22222;\">;; </span><span style=\"color: #b22222;\">scale
</span>    (<span style=\"color: #7a378b;\">:shadowing-import-from</span> <span style=\"color: #7a378b;\">:clsql</span> <span style=\"color: #7a378b;\">:select</span>))
...
</pre>
<p>Note that we're importing the entirety of <code><span style=\"color: #7a378b;\">:cl-fad</span></code>, but just select symbols from the image libraries. This isn't strictly necessary, but since we're going to be including three different utilities that do similar things, I get the sneaking suspicion that we'd get symbol collisions otherwise. I've imported relevant operations from all three libraries, even though we're starting out with JPGs only. Now then, start a new file called <code>images.lisp</code>, and add the following to it</p>

<pre>(<span style=\"color: #a020f0;\">in-package</span> <span style=\"color: #7a378b;\">:cl-chan</span>)

(<span style=\"color: #a020f0;\">defclass</span> <span style=\"color: #228b22;\">image-upload</span> ()
  ((name <span style=\"color: #7a378b;\">:reader</span> name <span style=\"color: #7a378b;\">:initarg</span> <span style=\"color: #7a378b;\">:name</span>)
   (file-path <span style=\"color: #7a378b;\">:reader</span> file-path <span style=\"color: #7a378b;\">:initarg</span> <span style=\"color: #7a378b;\">:file-path</span>)))

<span style=\"color: #b22222;\">;;;;;;;;;; </span><span style=\"color: #b22222;\">utility
</span>(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">file-tuple-&gt;image-upload</span> (hunchentoot-file-tuple)
  (<span style=\"color: #a020f0;\">destructuring-bind</span> (file-path original-file-name mimetype) hunchentoot-file-tuple
    (make-instance (intern (string-upcase mimetype) <span style=\"color: #7a378b;\">:cl-chan</span>)
                   <span style=\"color: #7a378b;\">:name</span> (file-namestring file-path)
                   <span style=\"color: #7a378b;\">:file-path</span> file-path)))

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">store!</span> (hunchentoot-file-tuple)
  (<span style=\"color: #a020f0;\">when</span> hunchentoot-file-tuple
    (<span style=\"color: #a020f0;\">let</span> ((img (file-tuple-&gt;image-upload hunchentoot-file-tuple)))
      (store-images! img))))

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">new-dimensions</span> (size width height)
  <span style=\"color: #8b2252;\">\"Given a target size and width/height, returns a new width/height preserving aspect ratio. 
Does not scale images smaller than 250x250.\"</span>
  (<span style=\"color: #a020f0;\">let</span> ((ratio (max 1 (float (/ (max width height) size)))))
    (values (round (/ width ratio)) (round (/ height ratio)) ratio)))

<span style=\"color: #b22222;\">;;;;;;;;;; </span><span style=\"color: #b22222;\">PNGs
</span>(<span style=\"color: #a020f0;\">defclass</span> <span style=\"color: #228b22;\">png</span> (image-upload) ())
(<span style=\"color: #a020f0;\">defclass</span> <span style=\"color: #228b22;\">image/x-png</span> (png) ())
(<span style=\"color: #a020f0;\">defclass</span> <span style=\"color: #228b22;\">image/png</span> (png) ())

(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">store-images!</span> ((img png))
  <span style=\"color: #8b2252;\">\"Saves a large version, and creates a preview of the given image in directories specified by the *big-dir* and *preview-dir* config variables\"</span>
  (<span style=\"color: #a020f0;\">let*</span> ((pic (read-png (file-path img)))
         (w (imago:image-width pic))
         (h (imago:image-height pic))
         (pic-name (make-pathname <span style=\"color: #7a378b;\">:name</span> (name img) <span style=\"color: #7a378b;\">:type</span> <span style=\"color: #8b2252;\">\"png\"</span>)))
    (copy-file (file-path img) (merge-pathnames pic-name *big-dir*))
    (<span style=\"color: #a020f0;\">multiple-value-bind</span> (new-width new-height) (new-dimensions 250 w h)
      (write-png (imago:resize pic new-width new-height) 
                 (merge-pathnames pic-name *preview-dir*)))
    (namestring pic-name)))</pre>

<p>So. What we just did was create a new class called <code>image-upload</code>, subclass it specifically for <code>png</code>, and write the <code>store-images!</code>  method. <code><span style=\"color: #7a378b;\">:imago</span></code> doesn't seem to provide a way to preserve aspect ratio for an image as you resize it, so we have to do that manually. I resisted the temptation to make it png-specific, because it's entirely possible that we'll need to call the same code as part of generating previews for the other formats.</p>

<p>Take a closer look at the <code>file-tuple-&gt;image-upload</code>. We're using the incoming file <code>mimetype</code> as a class name. That may sound like a bad idea, but as you'll see in a few minutes, we're going to be restrictive about what input we accept. It's just that in order to build a system we can extend later, we can't really be restrictive <i>here</i>.</p>

<div class=\"note extensibility\">
  <h3>Extensibility Note</h3>
  <span class=\"note-body\">
    <p>The way we're going to restrict input is by doing server-side validation on the files our users will upload. That's a good idea, but doing <i>just</i> that will leave validation for this function elsewhere in the codebase. Without seeing that validation, the definition for <code>file-tuple-&gt;image-upload</code> can easily be mistaken for an injection attack vector (if we didn't validate, a user could send a bogus mimetype and cause us to spawn, for example, a <code>pathname</code> instead of an image. I can't think of an obvious attack that would be enabled by that, but it's still best to minimize vectors). Lets think through the alternatives here</p>

    <h4>Validate in <code>file-tuple-&gt;image-upload</code></h4>
    
    <p>Whether we do it by writing an assertion to make sure that the incoming mimetype meets some criteria, or by creating a specific class using a <code>cond</code> statement, we run into the same problem: in order to add a new supported image type, it won't be enough to just evaluate a new <code>store-images!</code> method and new classes. We'll actually have to slightly re-write <code>file-tuple-&gt;image-upload</code>. That's bad; we'd like extensibility to be possible without involving edits to an existing <code>cond</code> in our package.</p>

    <p>If you really, really feel nervous about leaving a naked class declaration like we did, you can add something along the lines of <code>(<span style=\"color: #ff0000; font-weight: bold;\">assert</span> (string= <span style=\"color: #8b2252;\">\"image/\"</span> (subseq mimetype 0 6)))</code> to the function, just to ensure the incoming is an image. Even doing that is going to come back for a bite of your ass if you decide to allow PostScript/PDF uploads in your forum (since both of those have the \"application/something\" mimetype).</p>

    <h4>Break <code>file-tuple-&gt;image-upload</code> up into methods</h4>

    <p>Instead of doing validation in-function, it's also possible to break the image-upload-creating function up into different methods. This is a viable, and technically more object-oriented, approach to the problem. I'm choosing not to go that way because it would mean defining something like </p>

<pre>(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">make-image-upload</span> ((mime (eql 'image/png)) hunchentoot-file-tuple)  
  <span style=\"color: #8b2252;\">\"Handles PNG image-upload creation with the image/png mimetype\"</span>
  (<span style=\"color: #a020f0;\">destructuring-bind</span> (file-path original-filename mime-string) hunchentoot-file-tuple
    (<span style=\"color: #a020f0;\">declare</span> (ignore original-filename mime-string))
    (make-instance 'png <span style=\"color: #7a378b;\">:name</span> (file-namestring file-path) <span style=\"color: #7a378b;\">:file-path</span> file-path)))

(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">make-image-upload</span> ((mime (eql 'image/x-png)) hunchentoot-file-tuple)
  <span style=\"color: #8b2252;\">\"Handles PNG image-upload creation with the image/x-png mimetype\"</span>
  (make-image-upload 'image/png hunchentoot-file-tuple))

[repeat for every image type]</pre>

<p>rather than merely something like</p>

<pre>(<span style=\"color: #a020f0;\">defclass</span> <span style=\"color: #228b22;\">image/x-png</span> (png) ())
(<span style=\"color: #a020f0;\">defclass</span> <span style=\"color: #228b22;\">image/png</span> (png) ())

[repeat for every image type]</pre>

<p>Yes, it's more object-oriented, but it's a <i>lot</i> more verbose, and it'll get even worse if you want to support an image type that has more than two common mimetypes. Keeping the amount of code you type to a minimum is very good practice for all the reasons you've probably already heard.</p>
  </span>
</div>

<p>Note that we've actually got three subclasses for <code>png</code>. There's two reasons for that. I go over one in the Extensibility Note above. The other is that, while PNGs are technically supposed to be of mimetype <code>image/png</code>, I've seen several in the wild with <code>image/x-png</code> instead. Now, even though there are multiple mimetypes a PNG could have, we won't be dealing differently with each of them, so it's enough to create a <code>png</code> class with the appropriate methods, and then subclass that for individual mimetypes we plan to encounter. If you've seen others, feel free to add them.</p>

<p>Now that we have a way of dealing with images, lets set up the rest of our system to deal with them. First off, add the following lines to your <code>package.lisp</code></p>

<pre>(<span style=\"color: #a020f0;\">defparameter</span> <span style=\"color: #a0522d;\">*image-storage-directory*</span> <span style=\"color: #8b2252;\">\"img\"</span>)
(<span style=\"color: #a020f0;\">defparameter</span> <span style=\"color: #a0522d;\">*big-dir*</span> (merge-pathnames (make-pathname <span style=\"color: #7a378b;\">:directory</span> `(<span style=\"color: #7a378b;\">:relative</span> ,*image-storage-directory* <span style=\"color: #8b2252;\">\"big\"</span>))))
(<span style=\"color: #a020f0;\">defparameter</span> <span style=\"color: #a0522d;\">*preview-dir*</span> (merge-pathnames (make-pathname <span style=\"color: #7a378b;\">:directory</span> `(<span style=\"color: #7a378b;\">:relative</span> ,*image-storage-directory* <span style=\"color: #8b2252;\">\"preview\"</span>))))
(ensure-directories-exist *big-dir*)
(ensure-directories-exist *preview-dir*)
(push (create-folder-dispatcher-and-handler 
       <span style=\"color: #8b2252;\">\"/img/\"</span> 
       (merge-pathnames (make-pathname <span style=\"color: #7a378b;\">:directory</span> `(<span style=\"color: #7a378b;\">:relative</span> ,*image-storage-directory*)))) 
      *dispatch-table*)</pre>

<p>I'll format it a bit better in the code I check in, but it'll basically do the same thing. That's a specifier for a local image storage directory, and two specific subdirectories (which we <code>ensure-exist</code> just in case) where we'll be keeping the images that get uploaded to our board. The last few lines push our new storage folder onto the dispatch table so that Hunchentoot can serve the contained files. Now that we've got that, we'll need to change our formlets to accept an image file, and tell them what to do with it. We'll also need to add an image field to our comment class,</p>

<pre><span style=\"color: #b22222;\">;;; </span><span style=\"color: #b22222;\">model.lisp
</span>...
(def-view-class comment ()
  ((id <span style=\"color: #7a378b;\">:accessor</span> id <span style=\"color: #7a378b;\">:initarg</span> <span style=\"color: #7a378b;\">:id</span> <span style=\"color: #7a378b;\">:type</span> integer <span style=\"color: #7a378b;\">:db-constraints</span> (<span style=\"color: #7a378b;\">:not-null</span> <span style=\"color: #7a378b;\">:auto-increment</span>) <span style=\"color: #7a378b;\">:db-kind</span> <span style=\"color: #7a378b;\">:key</span>)
   (thread-id <span style=\"color: #7a378b;\">:reader</span> thread-id <span style=\"color: #7a378b;\">:initarg</span> <span style=\"color: #7a378b;\">:thread-id</span> <span style=\"color: #7a378b;\">:type</span> integer)
   (author <span style=\"color: #7a378b;\">:reader</span> author <span style=\"color: #7a378b;\">:initarg</span> <span style=\"color: #7a378b;\">:author</span> <span style=\"color: #7a378b;\">:initform</span> nil <span style=\"color: #7a378b;\">:type</span> string)
   (email <span style=\"color: #7a378b;\">:reader</span> email <span style=\"color: #7a378b;\">:initarg</span> <span style=\"color: #7a378b;\">:email</span> <span style=\"color: #7a378b;\">:initform</span> nil <span style=\"color: #7a378b;\">:type</span> string)
   (subject <span style=\"color: #7a378b;\">:reader</span> subject <span style=\"color: #7a378b;\">:initarg</span> <span style=\"color: #7a378b;\">:subject</span> <span style=\"color: #7a378b;\">:initform</span> nil <span style=\"color: #7a378b;\">:type</span> string)
   (body <span style=\"color: #7a378b;\">:reader</span> body <span style=\"color: #7a378b;\">:initarg</span> <span style=\"color: #7a378b;\">:body</span> <span style=\"color: #7a378b;\">:initform</span> nil <span style=\"color: #7a378b;\">:type</span> string)
   (date-time <span style=\"color: #7a378b;\">:reader</span> date-time <span style=\"color: #7a378b;\">:initarg</span> <span style=\"color: #7a378b;\">:date-time</span> <span style=\"color: #7a378b;\">:type</span> wall-time)
   (image <span style=\"color: #7a378b;\">:reader</span> image <span style=\"color: #7a378b;\">:initarg</span> <span style=\"color: #7a378b;\">:image</span> <span style=\"color: #7a378b;\">:type</span> string)))

...</pre>

<div class=\"note state\">
  <h3>State Note</h3>
  <span class=\"note-body\">
    <p>You'll also need to re-create your database tables (or evaluate <code><span style=\"color: #a020f0;\">alter</span> <span style=\"color: #a020f0;\">table</span> <span style=\"color: #0000ff;\">COMMENT</span> <span style=\"color: #a020f0;\">add</span> <span style=\"color: #a020f0;\">column</span> IMAGE <span style=\"color: #228b22;\">varchar</span>(255);</code> against your database. </p>
    <p>The actual SQL you need to run will vary slightly based on what database you're using. The above works with MySQL.</p>
  </span>
</div>

<p>and change its <code>echo</code> method to output the image preview along with the comment. You'll also want to add the image echoing code to the thread <code>echo</code> method, since that does its own thing. In fact, it'd probably be a better idea to define a new echo-image method and call it in those three places.</p>

<pre><span style=\"color: #b22222;\">;;; </span><span style=\"color: #b22222;\">model.lisp
</span>
(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">summarize</span> ((thread thread) <span style=\"color: #228b22;\">&amp;optional</span> (preview-comment-count 5))
...
            (<span style=\"color: #7a378b;\">:a</span> <span style=\"color: #7a378b;\">:href</span> (format nil <span style=\"color: #8b2252;\">\"/thread?thread-id=~a\"</span> (id thread)) <span style=\"color: #8b2252;\">\"Reply\"</span>)
            (echo-image first-comment)
            (<span style=\"color: #7a378b;\">:span</span> <span style=\"color: #7a378b;\">:class</span> <span style=\"color: #8b2252;\">\"body\"</span> (<span style=\"color: #7a378b;\">:p</span> (str (body first-comment))))
            (<span style=\"color: #7a378b;\">:br</span> <span style=\"color: #7a378b;\">:class</span> <span style=\"color: #8b2252;\">\"clear\"</span>)
...

(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">echo</span> ((thread thread))
...
            (echo-header first-comment)
            (<span style=\"color: #7a378b;\">:span</span> <span style=\"color: #7a378b;\">:class</span> <span style=\"color: #8b2252;\">\"body\"</span> 
                   (echo-image first-comment)
                   (<span style=\"color: #7a378b;\">:p</span> (str (body first-comment))))
            (<span style=\"color: #a020f0;\">dolist</span> (r (cdr (comments thread))) (str (echo r)))))))
...

(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">echo</span> ((comment comment))
  (<span style=\"color: #a020f0;\">with-html-output-to-string</span> (*standard-output* nil <span style=\"color: #7a378b;\">:indent</span> t)
    (<span style=\"color: #7a378b;\">:div</span> <span style=\"color: #7a378b;\">:class</span> <span style=\"color: #8b2252;\">\"comment\"</span>
          (echo-header comment)
          (<span style=\"color: #7a378b;\">:span</span> <span style=\"color: #7a378b;\">:class</span> <span style=\"color: #8b2252;\">\"body\"</span> 
                 (echo-image comment)
                 (<span style=\"color: #7a378b;\">:p</span> (str (body comment)))
                 (<span style=\"color: #7a378b;\">:br</span> <span style=\"color: #7a378b;\">:class</span> <span style=\"color: #8b2252;\">\"clear\"</span>)))))

...

(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">echo-image</span> ((comment comment))
  (<span style=\"color: #a020f0;\">when</span> (image comment) 
    (<span style=\"color: #a020f0;\">with-html-output</span> (*standard-output* nil <span style=\"color: #7a378b;\">:indent</span> t)
      (<span style=\"color: #7a378b;\">:a</span> <span style=\"color: #7a378b;\">:href</span> (merge-pathnames (image comment) <span style=\"color: #8b2252;\">\"/img/big/\"</span>) 
          (<span style=\"color: #7a378b;\">:img</span> <span style=\"color: #7a378b;\">:class</span> <span style=\"color: #8b2252;\">\"pic\"</span> <span style=\"color: #7a378b;\">:src</span> (merge-pathnames (image comment) <span style=\"color: #8b2252;\">\"/img/preview/\"</span>))))))</pre>

<p>The last thing we need to do is change up the comment formlets so that they accept images (with validation) and add the appropriate image URI to the comments they produce.</p>

<pre><span style=\"color: #b22222;\">;;; </span><span style=\"color: #b22222;\">cl-chan.lisp
</span>
...
(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">validate-image</span> (hunchentoot-file-tuple)
  (or (null hunchentoot-file-tuple)
      (and (funcall (file-type? <span style=\"color: #8b2252;\">\"image/x-png\"</span> <span style=\"color: #8b2252;\">\"image/png\"</span>) hunchentoot-file-tuple)
           (funcall (file-smaller-than? 3000000) hunchentoot-file-tuple))))

...
     (author text) (email text) (subject text) (body textarea) 
     (image file <span style=\"color: #7a378b;\">:validation</span> (#'validate-image <span style=\"color: #8b2252;\">\"We accept PNGs smaller than 3MB\"</span>))
     (captcha recaptcha))
    (<span style=\"color: #a020f0;\">let*</span> ((pic (store! image))
           (new-comment (make-instance 'comment
                                       <span style=\"color: #7a378b;\">:thread-id</span> (parse-integer thread-id)
                                       <span style=\"color: #7a378b;\">:author</span> author <span style=\"color: #7a378b;\">:email</span> email 
                                       <span style=\"color: #7a378b;\">:subject</span> subject <span style=\"color: #7a378b;\">:body</span> body
                                       <span style=\"color: #7a378b;\">:date-time</span> (now)
                                       <span style=\"color: #7a378b;\">:image</span> pic)))
      (update-records-from-instance new-comment)
...

     (image file <span style=\"color: #7a378b;\">:validation</span> (#'validate-image <span style=\"color: #8b2252;\">\"We accept PNGs smaller than 3MB\"</span>))
     (captcha recaptcha))
  (<span style=\"color: #a020f0;\">let*</span> ((thread-id (update-records-from-instance
                     (make-instance 'thread <span style=\"color: #7a378b;\">:board-id</span> 1)))
         (pic (store! image))
         (new-comment (make-instance 'comment 
                                     <span style=\"color: #7a378b;\">:thread-id</span> thread-id
                                     <span style=\"color: #7a378b;\">:author</span> author <span style=\"color: #7a378b;\">:email</span> email 
                                     <span style=\"color: #7a378b;\">:subject</span> subject <span style=\"color: #7a378b;\">:body</span> body
                                     <span style=\"color: #7a378b;\">:date-time</span> (now)
                                     <span style=\"color: #7a378b;\">:image</span> pic)))
...</pre>

<p>Note the image validation function I was talking about. That makes sure that the file coming at <code>file-tuple-&gt;image-upload</code> is only going to be one of the options it can handle.</p>

<p>That should be that. If you head over to your browser now, you should be able to upload a PNG and see it kind of shittily rendered in the middle of your comment. If you'd rather do without the \"shittily\", add these two lines to your cl-chan.css</p>

<pre><span style=\"color: #0000ff;\">.pic </span>{ <span style=\"color: #a0522d;\">float</span>: left; }
<span style=\"color: #0000ff;\">.clear </span>{ <span style=\"color: #a0522d;\">clear</span>: both; }</pre>

<img src=\"/static/img/clsql--forum-1.png\" class=\"middle\" alt=\"Hit it...\" />

<p>Whew!</p>

<p>Ok, before you relax, remember, we've still got two more image types to handle, and one subtle bug to fix. Lets add those image types first.</p>

<pre><span style=\"color: #b22222;\">;;; </span><span style=\"color: #b22222;\">image.lisp
</span>
...

<span style=\"color: #b22222;\">;;;;;;;;;; </span><span style=\"color: #b22222;\">JPGs
</span>(<span style=\"color: #a020f0;\">defclass</span> <span style=\"color: #228b22;\">jpg</span> (image-upload) ())
(<span style=\"color: #a020f0;\">defclass</span> <span style=\"color: #228b22;\">image/jpeg</span> (jpg) ())
(<span style=\"color: #a020f0;\">defclass</span> <span style=\"color: #228b22;\">image/pjpeg</span> (jpg) ())

(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">store-images!</span> ((img jpg))
  <span style=\"color: #8b2252;\">\"Saves a large version, and creates a preview of the given image in directories specified by the *big-dir* and *preview-dir* config variables\"</span>
  (<span style=\"color: #a020f0;\">let</span> ((pic-name (make-pathname <span style=\"color: #7a378b;\">:name</span> (name img) <span style=\"color: #7a378b;\">:type</span> <span style=\"color: #8b2252;\">\"jpg\"</span>)))
    (copy-file (file-path img) (merge-pathnames pic-name *big-dir*))
    (<span style=\"color: #a020f0;\">let*</span> ((pic (read-image-file (merge-pathnames pic-name *big-dir*)))
           (w (ch-image:image-width pic))
           (h (ch-image:image-height pic)))
      (<span style=\"color: #a020f0;\">multiple-value-bind</span> (new-width new-height) (new-dimensions 250 w h)
        (write-image-file (merge-pathnames pic-name *preview-dir*)
                          (ch-image:resize-image pic new-height new-width))))
    (namestring pic-name)))</pre>

<p>also, we need to modify the validation functions on our formlets.</p>

<pre><span style=\"color: #b22222;\">;;; </span><span style=\"color: #b22222;\">cl-chan.lisp
</span>
(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">validate-image</span> (hunchentoot-file-tuple)
  (or (null hunchentoot-file-tuple)
      (and (funcall (file-type? <span style=\"color: #8b2252;\">\"image/x-png\"</span> <span style=\"color: #8b2252;\">\"image/png\"</span> <span style=\"color: #8b2252;\">\"image/jpeg\"</span> <span style=\"color: #8b2252;\">\"image/pjpeg\"</span>) hunchentoot-file-tuple)
           (funcall (file-smaller-than? 3000000) hunchentoot-file-tuple))))

...
     (image file <span style=\"color: #7a378b;\">:validation</span> (#'validate-image <span style=\"color: #8b2252;\">\"We accept PNGs or JPGs smaller than 3MB\"</span>))
...
     (image file <span style=\"color: #7a378b;\">:validation</span> ((file-type? <span style=\"color: #8b2252;\">\"image/x-png\"</span> <span style=\"color: #8b2252;\">\"image/png\"</span> <span style=\"color: #8b2252;\">\"image/jpeg\"</span> <span style=\"color: #8b2252;\">\"image/pjpeg\"</span>) 
                              <span style=\"color: #8b2252;\">\"You need to upload an image of type PNG or JPG\"</span>
                              (file-smaller-than? 3000000) <span style=\"color: #8b2252;\">\"Your file needs to be smaller than 3MB\"</span>))
...</pre>

<p>That should do it.</p>


<img src=\"/static/img/clsql--forum-2.png\" class=\"middle\" alt=\"Hmmm.\" />

<p>We implemented JPGs ahead of GIFs because it's much closer to the PNG scaling we already did, but note the number of differences there.</p>

<ol>
  <li>the <code>width</code> and <code>height</code> arguments are ordered <code>y x</code> rather than <code>x y</code></li>
  <li>the <code>pathname</code> and <code>image</code> parameters to the write function are in a different order</li>
  <li>the functions involved in reading/writing/resizing are named differently</li>
  <li>the steps we need to take are in a different order because ch-image can't seem to read image files with no file extension. That means we copy the big one first, rename it, then read that instead of the original temp file</li>
</ol>

<p>Those are all small differences that you nevertheless need to get right if you don't want a face full of errors or odd results (like that screenshot above) when you start your board up. Before we tackle GIFs and that subtle bug, let me just point out that someone who picked our \"Lazy Bastard\" route earlier has saved themselves all of this trouble, and probably has higher quality previews to boot. But we're here to learn things, so we're going the hard way. Now then.</p>

<pre><span style=\"color: #b22222;\">;;; </span><span style=\"color: #b22222;\">images.lisp
</span>...
<span style=\"color: #b22222;\">;;;;;;;;;; </span><span style=\"color: #b22222;\">GIFs
</span>(<span style=\"color: #a020f0;\">defclass</span> <span style=\"color: #228b22;\">image/gif</span> (image-upload) ())

(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">store-images!</span> ((img image/gif))
  <span style=\"color: #8b2252;\">\"Saves a large version, and creates a preview of the given image in directories specified by the *big-dir* and *preview-dir* config variables\"</span>
  (<span style=\"color: #a020f0;\">let*</span> ((pic (load-data-stream (file-path img)))
         (first-frame (aref (skippy:images pic) 0))
         (width (skippy:width pic))
         (height (skippy:height pic))
         (pic-name (make-pathname <span style=\"color: #7a378b;\">:name</span> (name img) <span style=\"color: #7a378b;\">:type</span> <span style=\"color: #8b2252;\">\"gif\"</span>)))
    (copy-file (file-path img) (merge-pathnames pic-name *big-dir*))
    (<span style=\"color: #a020f0;\">multiple-value-bind</span> (new-w new-h) (new-dimensions 250 width height)
      (<span style=\"color: #a020f0;\">let</span> ((new-pic (skippy:make-data-stream 
                      <span style=\"color: #7a378b;\">:width</span> new-w <span style=\"color: #7a378b;\">:height</span> new-h
                      <span style=\"color: #7a378b;\">:color-table</span> (skippy:color-table pic))))
        (skippy:add-image 
         (skippy:composite first-frame
                           (skippy:make-image <span style=\"color: #7a378b;\">:width</span> new-w <span style=\"color: #7a378b;\">:height</span> new-h) 
                           <span style=\"color: #7a378b;\">:width</span> new-w <span style=\"color: #7a378b;\">:height</span> new-h)
         new-pic)
        (output-data-stream new-pic (merge-pathnames pic-name *preview-dir*))))
    (namestring pic-name)))</pre>

<p>and the appropriate formlet changes. In fact, we'd really better pull out the image types into a separate variable so that we only need to change them in one place.</p>

<pre><span style=\"color: #b22222;\">;;; </span><span style=\"color: #b22222;\">package.lisp
</span>
...
(<span style=\"color: #a020f0;\">defparameter</span> <span style=\"color: #a0522d;\">*allowed-image-fn*</span>
  (file-type? <span style=\"color: #8b2252;\">\"image/x-png\"</span> <span style=\"color: #8b2252;\">\"image/png\"</span> <span style=\"color: #8b2252;\">\"image/jpeg\"</span> <span style=\"color: #8b2252;\">\"image/pjpeg\"</span> <span style=\"color: #8b2252;\">\"image/gif\"</span>))

(<span style=\"color: #a020f0;\">defparameter</span> <span style=\"color: #a0522d;\">*image-message*</span>
  <span style=\"color: #8b2252;\">\"You need a PNG, JPG or GIF smaller than 3MB\"</span>)
...

<span style=\"color: #b22222;\">;;; </span><span style=\"color: #b22222;\">cl-chan.lisp
</span>
(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">validate-image</span> (hunchentoot-file-tuple)
  (or (null hunchentoot-file-tuple)
      (and (funcall *allowed-image-fn* hunchentoot-file-tuple)
           (funcall (file-smaller-than? 3000000) hunchentoot-file-tuple))))

(<span style=\"color: #a020f0;\">define-formlet</span> (post-comment-form)
...
     (image file <span style=\"color: #7a378b;\">:validation</span> (#'validate-image *image-message*))
...

(<span style=\"color: #a020f0;\">define-formlet</span> (post-thread-form)
      (image file <span style=\"color: #7a378b;\">:validation</span> (*allowed-image-fn* *image-message*
                              (file-smaller-than? 3000000) 
                              <span style=\"color: #8b2252;\">\"Your file needs to be smaller than 3MB\"</span>))
...</pre>

<p>And that's that.</p>

<img src=\"/static/img/clsql--forum-2.png\" class=\"middle\" alt=\"Dance party!\" />

<p>You'll notice that the GIF resizing process is a lot more complicated than what we had to do for PNGs or JPGs. That's because GIFs are potentially animated, so the Lisp library that handles them treats them as streams of images. That allows for better frame control, but it does mean that we need to</p>

<ol>
  <li>load the stream</li>
  <li>pull out the first frame</li>
  <li>resize that frame<a href=\"#foot-Tue-Jul-17-011751EDT-2012\" name=\"note-Tue-Jul-17-011751EDT-2012\">[3]</a></li>
  <li>shove it into a fresh stream</li>
  <li>write that new stream of one image</li>
</ol>

<p>Once again, notice how much work the Lazy Bastards have saved themselves with that one line of code. Incidentally, had I known about Skippy's lack of ability to scale an image down, I probably would have gone with the lazy option myself and chucked portability in a fucking bin.</p>

<p>It's already done, so no sense in tearing out half of this column now. Especially since its been a good what... year and a half since I started it? Yeah, sounds like it's about time to <a href=\"http://www.youtube.com/watch?v=RYlCVwxoL_g\">get the FILDI out</a>.</p>

<p>Really quickly before we go, I mentioned a subtle bug. We're letting Hunchentoot generate tempnames for our files. That's very simple, since we do <i>nothing</i>, but its internal name counter gets reset every time it shuts down. Which means that if you shut it down in production, new images are going to start clobbering your old ones. The easiest way to solve this is appending a <code>timestamp</code> to them. Between that and Hunchentoots' internal temporary file counter, we should be set in terms of unique names. Given how we use the <code>name</code> field of the <code>image-upload</code> class, the simplest way to do this is actually in <code>file-tuple-&gt;image-upload</code>.</p>

<pre>(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">file-tuple-&gt;image-upload</span> (hunchentoot-file-tuple)
  (<span style=\"color: #a020f0;\">destructuring-bind</span> (file-path original-file-name mimetype) hunchentoot-file-tuple
    (make-instance (intern (string-upcase mimetype) <span style=\"color: #7a378b;\">:cl-chan</span>)
                   <span style=\"color: #7a378b;\">:name</span> (format nil <span style=\"color: #8b2252;\">\"~a-~a\"</span> (file-namestring file-path) (get-universal-time)) 
                   <span style=\"color: #7a378b;\">:file-path</span> file-path)))</pre>

<p>Note the change in the line starting with <code><span style=\"color: #7a378b;\">:name</span></code>. Ok, I've had enough of this bullshit. New codebase <a href=\"https://github.com/Inaimathi/cl-chan\">up at github</a>, now get out.</p>

<p>Tune In Next Time (heh heh) For: </p>

<ul>
  <li>finally getting to multiple boards!</li>
  <li>walking through the lazy option in its entirety!</li>
  <li>some better usability and UI, maybe!</li>
</ul>


<hr />
<h5>Footnotes</h5>
<p>1 - <a href=\"#note-Mon-Jul-16-233541EDT-2012\" name=\"foot-Mon-Jul-16-233541EDT-2012\">[back]</a> - The other is put together a downloadable archive so that other Lispers can install your package through <code>asdf-install</code>, but we'll discuss that later.</p>

<p>2 - <a href=\"#note-Mon-Jul-16-233557EDT-2012\" name=\"foot-Mon-Jul-16-233557EDT-2012\">[back]</a> - So that when someone else is using your package, they can go to one consistent place to see all the symbols you're exporting and including. I tend to put conf variables there too if there aren't very many of them, but they should probably be in their own <code>conf.lisp</code> file.</p>

<p>3 - <a href=\"#note-Tue-Jul-17-011751EDT-2012\" name=\"foot-Tue-Jul-17-011751EDT-2012\">[back]</a> - Actually, there's no usable resize or scale option, so we just crop it to the top left.</p>
"))
((5202 3723 587704000) :INSERT (93 :POSTED 3551400000))
((5202 3723 587710000) :INSERT (93 :TAG :COMMON-LISP))
((5202 3723 588194000) :INSERT (94 :TITLE "Indirect Reflections"))
((5202 3723 588200000) :INSERT (94 :FILE "indirect-reflections.html"))
((5202 3723 588203000) :INSERT (94 :EDITED 3610022331))
((5202 3723 588205000) :INSERT
 (94 :BODY
  "<p>I've got some thinking to do, and given how long the alternative was taking, it's obvious that it can't happen effectively in my head. I don't want to tell you exactly what I'm working on yet, because revealing my projects before I'm done with them results in them never getting done. Witness the detritus that already litters this blog</p>

<ul>
  <li><code><a href=\"https://github.com/Inaimathi/cl-chan\">cl-chan</a></code> took about a year and a half to get a quarter of the way I was going, whereupon I was distracted by shinies</li>
  <li><code><a href=\"https://github.com/Inaimathi/strifebarge\">Strifebarge</a></code> was supposed to be a quick weekend project to get me back into the groove of programming after a bit of a vacation, but it's taking months and counting</li>
  <li><code><a href=\"https://github.com/Inaimathi/auth\">auth</a></code> was meant to have a working external API layer by now, as well as two-factor-authentication capability<a href=\"#foot-Fri-Aug-03-163551EDT-2012\" name=\"note-Fri-Aug-03-163551EDT-2012\">[1]</a></li>
  <li><code><a href=\"https://github.com/Inaimathi/clomments\">clomments</a></code> was a piece that I literally planned out in its entirety and proceeded to <code>0.1</code> in about four hours, then got bored and started poking at Arduinos</li>
  <li><code><a href=\"https://github.com/Inaimathi/cl-leet\">cl-leet</a></code> took months of planning and a week of the CL Games Competition to get to a hemi-semi-playable state<a href=\"#foot-Fri-Aug-03-163909EDT-2012\" name=\"note-Fri-Aug-03-163909EDT-2012\">[3]</a></li>
</ul>

<p>Hell, the only projects I've gotten to <code>done</code>, for some value of \"done\", are the ones I never really think about as projects.</p>

<ul>
  <li><code><a href=\"https://github.com/Inaimathi/emacs-utils\">emacs-utils</a></code> is sitting quietly up on github, saving me a few hours per day on various tasks.</li>
  <li><code><a href=\"https://github.com/Inaimathi/formlets\">formlets</a></code> is doing likewise, though not on a daily basis. </li>
  <li><code><a href=\"https://github.com/Inaimathi/cl-css\">cl-css</a></code> should probably be replaced by something closer to <code>cl-who</code>, and stop using so many <code>`',@</code>s, but it gets the job done in the meanwhile.</li>
  <li>finally, <a href=\"https://github.com/Inaimathi/web-mote\">my mplayer web-frontend</a> is still as awful as the day I threw it together, but it actually functions and lets me \"control\"<a href=\"#foot-Fri-Aug-03-164109EDT-2012\" name=\"note-Fri-Aug-03-164109EDT-2012\">[4]</a> my media center from any wifi-capable device in the house.</li>
</ul>

<p>So, given the track record of \"things I talk about first\" vs \"things I put together first\", you'll pardon me for keeping my latest exploits under my hat until I'm ready to pull the big red lever. Thing is, there's a component that I'm trying to assemble that has me unsure about direction, so sitting down and throwing those thoughts through the loopback interface seems like a good idea.</p>

<h3>Moderation</h3>

<p>I've talked about this before, but not exactly in the same context. How do you moderate a system? Scratch that, how do you moderate a decentralized, public system with an eye for data transmission and potentially divisive discussions, in the light of recent-era copyright rules.</p>

<p>In totality, that offers some interesting challenges, even if no individual component is an unsolved problem. DMCA et al basically necessitate that there be a way to permanently and completely remove a piece of information from a given server, because legal battles may result otherwise. Maybe they don't happen often in practice, but that's still not the sort of risk I'd be willing to take. Trouble is, permanent and complete deletion of information gives some odd incentives to the moderators.</p>

<p>Ok, actually, lets step back a bit further, I've noticed another assumption that should probably be explained.</p>

<h3>Moderators</h3>

<p>And that's probably not far enough.</p>

<h3>Authority Figures</h3>

<p>Hmm. No, it's bigger than that too.</p>

<h3>Market-Capable  Primates</h3>

<p>Right, that's far enough back. I'll try to zoom back in as quickly as I can while at least giving some clues as to my thought process.</p>

<p>The interactions of <b>MCP</b>s is predictable in a couple of ways<a href=\"#foot-Fri-Aug-03-164400EDT-2012\" name=\"note-Fri-Aug-03-164400EDT-2012\">[5]</a>. When you get a bunch of them talking to each other, over whatever hardware and protocol they actually decide to use, you're going to get three basic types of messages going back and forth.</p>

<ol>
  <li>messages genuinely generated by some internal state (regular discussion, <code>*signal*</code>)</li>
  <li>messages generated by external forces rather than intrinsic interest (\"buy these dick pills!\" or \"one weird old tip to whiten your small intestine!\", <code>*noise*</code>)</li>
  <li>messages generated by environmental factors, causing intrinsic interest (<a href=\"http://pbfcomics.com/20/\">religious discussions</a>, <code>*echo*</code>)</li>
</ol>

<p>You can subtype each of those almost arbitrarily, but it's possible to classify any message you come across into one of the three.</p>

<p>The perfect communication <i>forum</i><a href=\"#foot-Fri-Aug-03-164459EDT-2012\" name=\"note-Fri-Aug-03-164459EDT-2012\">[6]</a> would consist of a single instance of each <code>*echo*</code> conversation<a href=\"#foot-Fri-Aug-03-164515EDT-2012\" name=\"note-Fri-Aug-03-164515EDT-2012\">[7]</a>, and be completely free of <code>*noise*</code>.</p>

<p>The ideal message profile is <code>(setf *noise* 0 *echo* #'unique-p *signal* #'not-echo-p)</code></p>

<h3>Authority Figures</h3>

<p>In order to ensure that a given <i>forum</i> approaches the ideal message profile, most of them vest power in authority figures. These figures tend to be present whether the <i>forum</i> has other ways of telling <code>*signal*</code> from <code>*noise*</code>, and I'll argue that the reason is largely because of that third category of message we've identified as being somewhat useful to <b>MCP</b>s. The power vested in these authority figures is largely censorship; they kill the <code>*noise*</code> that slips through whatever automated/cloud-based/crowd-sourced/buzzword-compliant system is in place to catch the bulk of it, and are expected to make judgment calls bout <code>*echo*</code>s. If a given topic is judged as being <code>*noise*</code>y, it's deleted, or its visibility is artificially reduced in some way.</p>

<p>Authority Figures in this context do a lot of their work behind closed doors, and each of them is only human. The vague hope is that either they'll be kept in check by the community that develops around them, or by other Authority Figures. In meatspace, that's not a less-than-catastrophic assumption to make, but web forums tend to be viewed as less important (or perhaps better monitored), so something different seems to be happening.</p>

<p>Hmm. We'll actually need a detour on our way back.</p>

<h3>Echoes and <a href=\"http://en.wikipedia.org/wiki/Allegory_of_the_Cave\">Shadows</a></h3>

<p>The problem with <code>*echo*</code>s is precisely that they demand a judgment call. One human will take a look at the weekly <a href=\"http://www.reddit.com/r/lisp\">/r/lisp</a> argument about newLisp/Clojure/whatever-the-new-lisp-dialect-is and hit the spam button before she gets past the first sentence. Another will take a look at the exact same conversation, wonder why they've never heard about it before, and grumble quite loudly when <a href=\"http://meta.stackoverflow.com/questions/61221/deleted-questions-archive\">someone closes it</a>. That grumble incurs a cost on the system, measured in citizen good-will; someone who had no idea about a particular discussion is effectively prevented from having it, or forced to have it somewhere else.</p>

<p>This is the best-case situation, mind you; Authority Figures that are doing their very best to provide a balanced community free from inbuilt bias will still occasionally trip over an <code>*echo*</code> and shitcan it, or accidentally mistake a <code>*signal*</code> for <code>*noise*</code>. The typical case is probably going to be worse; AFs deleting <code>*signal*</code> they don't agree with, or aggressively permitting <code>*noise*</code> they enjoy on some level.</p>

<p>That's the trouble with Authority Figure-based <code>*noise*</code> reducing systems; false positives and negatives in situations where you'd rather not have them if you can avoid it. The naive response is fine-graining that Authority.</p>

<h3>Moderators</h3>

<p>Instead of having a set of Authority Figures for the whole community, <a href=\"http://www.reddit.com/\">shard</a> the <a href=\"http://stackexchange.com/\">community</a> and set up Moderators for each shard. That should reduce pressure on each Moderator, as well as allow them to work to their strengths by moderating communities centered around things they're more than baseline passionate about. The thing is, the output of this process is still <i>not</i> accurate sorting of message types. Moderators still commonly delete things for reasons other than objective merit. If you disagree, spend a few hours <a href=\"http://www.reddit.com/r/SubredditDrama/\">here</a><a href=\"#foot-Fri-Aug-03-165449EDT-2012\" name=\"note-Fri-Aug-03-165449EDT-2012\">[8]</a>.</p>

<h3>Moderation</h3>

<p>And we're back. Based on the principles outlined above, it seems like the best way to avoid over-moderation-related costs on a community is to make sure that any actions moderators take are</p>

<ul>
  <li>publicly viewable in context</li>
  <li>fully reversible</li>
</ul>

<p>As mentioned earlier though, there needs to be a way to actually, factually delete threads posts and images for legal purposes. If you get hit upside the head with a DMCA or similar, you can't really say \"Yup, we've deleted it, only our moderator community can see it now\", that shit needs to be <i>gone</i>. Which means I'm stuck implementing both, and worrying (perhaps excessively) about the effects of the nuclear option. In other words, I want</p>

<ol>
  <li><code>delete</code>; meaning, \"make sure no one but mods can see this, show everyone else a deleted tag\"</li>
  <li><code>undelete</code>; meaning, \"oops, that wasn't supposed to happen, release that one back to the public\"</li>
  <li><code>purge</code>; meaning, \"nuclear option, this is either unauthorized or illegal media and it needs to go. Log who hit the kill switch, and ask them for a reason (which should ideally be a copy of the C&amp;D that came in requesting the deletion)\"</li>
</ol>

<p>That third one implies the presence of an outside deletions system that keeps track of information <i>about</i> vaporized stuff <i>without keeping it</i> for archival and post-mortem purposes later.</p>

<p>Perfect! That cleared my mind a bit. I think I can see the way through now. Hopefully, this doesn't prevent me from reaching it.</p>

<hr />
<h5>Footnotes</h5>
<p>1 - <a href=\"#note-Fri-Aug-03-163551EDT-2012\" name=\"foot-Fri-Aug-03-163551EDT-2012\">[back]</a> - That's still coming<a href=\"#foot-Fri-Aug-03-163556EDT-2012\" name=\"note-Fri-Aug-03-163556EDT-2012\">[2]</a>, the project I'm pointedly not mentioning uses auth for the user system, and actually started as a demo project for how you'd go about hooking that up to a larger system.</p>
<p>2 - <a href=\"#note-Fri-Aug-03-163556EDT-2012\" name=\"foot-Fri-Aug-03-163556EDT-2012\">[back]</a> - Though, to be perfectly fair, I've been saying that about a lot of things.</p>

<p>3 - <a href=\"#note-Fri-Aug-03-163909EDT-2012\" name=\"foot-Fri-Aug-03-163909EDT-2012\">[back]</a> - Though it did result in two articles that were reasonably interesting to write.</p>

<p>4 - <a href=\"#note-Fri-Aug-03-164109EDT-2012\" name=\"foot-Fri-Aug-03-164109EDT-2012\">[back]</a> - It can browse one specified directory and play one video at a time. I don't a random wifi user to be able to do anything more than that.</p>

<p>5 - <a href=\"#note-Fri-Aug-03-164400EDT-2012\" name=\"foot-Fri-Aug-03-164400EDT-2012\">[back]</a> - And a few of them might extend past <b>MC</b>, right into Social Primates in general, but I'm thinking of a particular primate species which disproportionately tends to internet use so we don't have to cast a net quite that wide.</p>

<p>6 - <a href=\"#note-Fri-Aug-03-164459EDT-2012\" name=\"foot-Fri-Aug-03-164459EDT-2012\">[back]</a> - \"Forum\" in the general sense, not just the kind you find on the internet.</p>

<p>7 - <a href=\"#note-Fri-Aug-03-164515EDT-2012\" name=\"foot-Fri-Aug-03-164515EDT-2012\">[back]</a> - You need to talk about these things, but given how often <b>MCP</b>s circle back to them, it's very unlikely you have a new idea, and we definitely don't need to keep hearing about it every week.</p>

<p>8 - <a href=\"#note-Fri-Aug-03-165449EDT-2012\" name=\"foot-Fri-Aug-03-165449EDT-2012\">[back]</a> - If you were there at the early days of <a href=\"http://programmers.stackexchange.com/\">programmers.SE</a>, you don't disagree.</p>
"))
((5202 3723 588316000) :INSERT (94 :POSTED 3552955200))
((5202 3723 588319000) :INSERT (94 :TAG :IDEA-PEELING))
((5202 3723 588321000) :INSERT (94 :TAG :SPECULATION))
((5202 3723 588583000) :INSERT (95 :TITLE "Irritation"))
((5202 3723 588590000) :INSERT (95 :FILE "irritations.html"))
((5202 3723 588594000) :INSERT (95 :EDITED 3610300375))
((5202 3723 588597000) :INSERT
 (95 :BODY
  "<p>Just a short update this time, involving things I keep stubbing my toe on in Lisp and Erlang.</p>

<h3>Common Lisp is not Object Oriented</h3>

<p>The object orientation support is bugging me again. Not just me, either<a href=\"#foot-Mon-Aug-06-013854EDT-2012\" name=\"note-Mon-Aug-06-013854EDT-2012\">[1]</a>, because a bunch of modules I've been making use of lately have functions with names like <code>time-difference</code> or <code>queue-push</code>, which is precisely what the generic functions are supposed to save you from doing. It recently annoyed the fuck out of me while putting together a simple, caching <a href=\"https://github.com/Inaimathi/Common-Lisp-Actors/blob/master/queue.lisp\">implementation of a thread-safe queue</a>. I wanted that construct to have <code>push</code>, <code>pop</code> and <code>length</code>, but because those names already designate top-level <b>functions</b>, it's not quite as simple as declaring them.</p>

<p>I'm not about to be dumb enough to propose that this makes Common Lisp an <a href=\"http://steve-yegge.blogspot.ca/2006/04/lisp-is-not-acceptable-lisp.html\">unacceptable language</a>, especially since it looks like this could easily be fixed within the spec as it exists today, and I already <a href=\"/article?name=objective-lisp.html\">quasi-proposed a semi-solution</a>. I just have to give voice to that minor frustration, and point out that what you'd really want in this situation is access to a lot of the basic <a href=\"http://www.lispworks.com/documentation/HyperSpec/Front/X_AllSym.htm\">CLHS symbols</a> <b>as methods</b> rather than functions. Not having this has now bitten me directly in the ass no less than twice<a href=\"#foot-Mon-Aug-06-014123EDT-2012\" name=\"note-Mon-Aug-06-014123EDT-2012\">[2]</a>, and signs that it might be worth fixing are showing in various CL libraries.</p>

<h3>Erlang Should Be More Like JavaScript</h3>

<p>Wow, do <a href=\"http://www.erlang.org/doc/reference_manual/records.html\">records</a> suck donkey dong!</p>

<p>Ok, to be fair, they're better than having to deal with plain <a href=\"http://www.erlang.org/doc/reference_manual/data_types.html#id64180\">tuples</a> when you're working with large constructs, and they're arguably The Right Way to deal with database storage, but they're a fundamentally annoying and hacky way of implementing key/value pairs.</p>

<p>The problem is record sharing. Here's a thought exercise: what happens when you have a system that deals with the storage and manipulation of sets of comments<a href=\"#foot-Mon-Aug-06-014948EDT-2012\" name=\"note-Mon-Aug-06-014948EDT-2012\">[3]</a>, and a second, completely separate system which would like to consume the output of that first one in order to display these sets in interesting ways for human consumption?</p>

<p>If you had a <b>real</b> k/v construct built in, like what <a href=\"http://docs.python.org/tutorial/datastructures.html#dictionaries\">every</a> <a href=\"http://www.cs.cmu.edu/Groups/AI/html/cltl/clm/node108.html\">other</a> <a href=\"http://hackage.haskell.org/packages/archive/base/4.5.1.0/doc/html/Data-HashTable.html\">goddamn</a> <a href=\"http://www.json.org/js.html\">language</a> on this earth seems to have, what you would do is pass an instance of that construct across.</p>

<p>If the hash map was a fundamental data type in Erlang, you would have no problem in this situation.</p>

<p>But.</p>

<p>Records are basically tuples, wearing a bunch of reader macros and syntactic sugar. That means they're potentially faster than using a dynamic data structure for the same purpose, but it means that you can't just <i>pass a record</i> between two otherwise decoupled systems. If you want the same sort of behavior that you'd get out of native k/v support, you have three options I can see, and they all make me want to glare menacingly at Joe Armstrong, or at least whoever decided that records were a satisfactory solution.</p>

<h2>Option 1: Duplicate Records</h2>

<p>You declare the same record in both systems, then send records across.</p>

<p>This sucks balls because changing the record suddenly requires you to change and recompile both projects. They are not really decoupled anymore. In our theoretical example above, say we've decided that we'd really like to start tracking <code>comment</code>s hierarchically. We need to add a pair of new fields, <code>root</code> and <code>parent</code> so that each comment can tell you which tree its part of and where in that tree it is.</p>

<pre><span style=\"color: #7a378b;\">-record</span>(<span style=\"color: #228b22;\">comment</span>, {id, user, thread, root, parent, timestamp, title, body, status}).</pre>

<p>Now, we can't just make this change in the model component, because if you had different record declarations in the model than the view, you'd get compiler errors. If you have multiple views trying to make use of the same model, and not all of them need the new data<a href=\"#foot-Mon-Aug-06-015214EDT-2012\" name=\"note-Mon-Aug-06-015214EDT-2012\">[4]</a>, <i>too fucking bad</i>, you're changing them all over anyway. This isn't even the worst case scenario, by the way. If you decide that the record shouldn't change fundamentally, but that you merely need to <i>reorder</i> fields, you won't even get a compiler error if you forget to change records in both places.</p>

<p>This is not the sort of brittleness that I expect from a key/value construct.</p>

<h2>Option 2: Shared Records</h2>

<p>You can write one file, lets say <code>records.hrl</code>, put all your record declarations in there and then include that file in both projects.</p>

<p><i>This</i> sucks balls because now you don't actually have two decoupled projects at all. You've got one giant, mostly disjoint project with shared data declarations. It's not <i>horrible</i>, to be fair, but remember that having a run-time construct rather than a compile-time record system wouldn't even require this much additional planning.</p>

<h2>Option 3: Sending Tuples or Proplists</h2>

<p>This is the option I went with for a recent project, and I'm honestly not sure it was the right approach, but there would have been record name collisions otherwise, so whatever, I guess.</p>

<p>Instead of sending records between components directly, you emit a tuple from the model and consume it in the view, potentially creating an intermediate record if you need to. This has pretty much all the downsides of Option 1, except that you don't have a single <code>record</code> name-space to deal with. If you take the <a href=\"http://www.erlang.org/doc/man/proplists.html\">Proplist approach</a>, it gets very slightly better because you only need to put together the one abstraction layer to do look-ups, and if you make it complete enough, you don't need to change it whenever you change the record definitions. That's still a <i>lot</i> more annoying than just having this force pre-resolved.</p>

<p>I remember writing up <a href=\"/article?name=erlang-notes.html\">notes from a talk Joe gave about Erlang</a>. One of the points he covers under the \"Missing Things\" heading was <b>Hash Maps</b>, wherein he pointed out this specific issue with the fundamental architecture of the language. In the notes, I sort of acknowledge that he has a point, but don't linger on it too long. Honestly, I was thinking that it wouldn't bite at all, let alone as hard as it actually has. Joe, if you're reading this, you were right. And for the love of god, if you've got a solution in mind, <b>DO IT</b>.</p>

<p><code>lists:keyfind/3</code> and workarounds like <a href=\"http://stackoverflow.com/a/10833019/190887\">this</a> aren't nearly as satisfying as just having an actual, dynamic key/value construct built into the language from the ground up.</p>

<hr />
<h5>Footnotes</h5>
<p>1 - <a href=\"#note-Mon-Aug-06-013854EDT-2012\" name=\"foot-Mon-Aug-06-013854EDT-2012\">[back]</a> - Though I may be the only one who's noticing enough to bitch about it.</p>

<p>2 - <a href=\"#note-Mon-Aug-06-014123EDT-2012\" name=\"foot-Mon-Aug-06-014123EDT-2012\">[back]</a> - That I've noticed.</p>

<p>3 - <a href=\"#note-Mon-Aug-06-014948EDT-2012\" name=\"foot-Mon-Aug-06-014948EDT-2012\">[back]</a> - <code><span style=\"color: #7a378b;\">-record</span>(<span style=\"color: #228b22;\">comment</span>, {id, user, thread, timestamp, title, body, status}).</code></p>

<p>4 - <a href=\"#note-Mon-Aug-06-015214EDT-2012\" name=\"foot-Mon-Aug-06-015214EDT-2012\">[back]</a> - For instance, if there are places that you're displaying the same set of comments, but don't really care about their hierarchy.</p>
"))
((5202 3723 588669000) :INSERT (95 :POSTED 3553128000))
((5202 3723 588671000) :INSERT (95 :TAG :BITCHING))
((5202 3723 588674000) :INSERT (95 :TAG :CLOS))
((5202 3723 588676000) :INSERT (95 :TAG :COMMON-LISP))
((5202 3723 588678000) :INSERT (95 :TAG :ERLANG))
((5202 3723 588680000) :INSERT (95 :TAG :LANGUAGES))
((5202 3723 588682000) :INSERT (95 :TAG :SYNTAX))
((5202 3723 588929000) :INSERT (96 :TITLE "Steven? I Disagree."))
((5202 3723 588934000) :INSERT (96 :FILE "i-disagree.html"))
((5202 3723 588936000) :INSERT (96 :EDITED 3610301396))
((5202 3723 588937000) :INSERT
 (96 :BODY
  "<p>Ok, yes, I know the last time I disagreed with Yegge, I wound up <a href=\"/article?name=yegge-strikes-back.html\">eating my own hat</a>, but I hereby suggest that <a href=\"https://plus.google.com/110981030061712822816/posts/KaSKeg4vQtz\">partitioning the software industry into Libs vs. Cons</a> is a stupid idea, and gains us nothing.</p>

<p>Firstly, because those terms are already loaded with enough political emotional baggage that people are going to have a hard time letting go<a href=\"#foot-Sat-Aug-11-153625EDT-2012\" name=\"note-Sat-Aug-11-153625EDT-2012\">[1]</a>, and that's going to lead to<a href=\"#foot-Sat-Aug-11-153633EDT-2012\" name=\"note-Sat-Aug-11-153633EDT-2012\">[2]</a> the same kind of partisan garbage that US politics is well known for.</p>

<p>Secondly, because partitioning any group of people into two explicit, conflicting sides is hands down <b>the worst</b> way of easing/preventing/reducing conflict within that group. Ostensibly, that's what he's trying to do with the thought framework; point out that certain things are a matter of preference rather than points of debate, and that we should therefore stop arguing about them. Something tells me the actual effect of this conceptual framework will lead to a <a href=\"http://pbfcomics.com/20/\">different outcome</a><a href=\"#foot-Sat-Aug-11-153728EDT-2012\" name=\"note-Sat-Aug-11-153728EDT-2012\">[3]</a>. I've read comments calling the opposition to this classification scheme \"weird\", and I have to wonder why. It's divisive, pretty much by definition. The fact that certain pieces of it are correct doesn't make it worth keeping in its entirety, and in any case...</p>

<p>Thirdly, the underlying properties he presents are, for the most part, not a matter of preference. He sort of presents them that way, but I disagree at that level. Hell, lets do a blow by blow. here are the points he defines as principles of software conservatives.</p>

<ol>
  <li>Software should aim to be bug free before it launches...</li>
  <li>Programmers should be protected from errors...</li>
  <li>Programmers have difficulty learning new syntax...</li>
  <li>Production code must be safety-checked by a compiler...</li>
  <li>Data stores must adhere to a well-defined, published schema...</li>
  <li>Public interfaces should be rigorously modeled...</li>
  <li>Production systems should never have dangerous or risky back-doors...</li>
  <li>If there is ANY doubt as to the safety of a component, it cannot be allowed in production ...</li>
  <li>Fast is better than slow. Everyone hates slow code. Code should perform well. You should engineer all your code for optimum speed up front, right out of the box...</li>
</ol>

<p>The software liberals supposedly have the inverse principles. He makes them explicit in <a href=\"https://plus.google.com/110981030061712822816/posts/KaSKeg4vQtz\">his entry</a>, but I won't bother to quote them here. Note that points 1, 4, 5, 6, 7, 8 and 9 have not a fucking thing to do with personal preference. They're things that make sense in some contexts, and not in others. Some programmers really, really like having error prevention in the form of a restricted language (#2), and some really hate learning new syntax (#3), but the rest of these \"principles\" involve trade-offs that sometimes make sense and are sometimes retarded. Should <b>All</b> software aim to be bug free? Should production code <b>All</b> be checked by a compiler? Should production systems <b>Never</b> have back-doors? We actually can't know the right answer in general, from a static analysis at least. At the risk of being painted as a godless, sissy liberal in the wake of Yegge's proposal, we need to take a look at the run-time environment.</p>

<p>Buggy software sounds shitty, except that when we're dealing with a situation where the software is replacing an already buggy manual process, no one is going to care. Likewise, there isn't a benefit to taking weeks to prevent a bug that you can fix in days or hours. Finally, if the cost of a rollback or upgrade is close enough to trivial, you can be forgiven for taking more risks than you otherwise would. On the flip-side, yes, your <a href=\"http://business.time.com/2012/08/08/high-frequency-trading-wall-streets-doomsday-machine/\">high-frequency trading software</a> or your <a href=\"http://safecodellc.net/component/content/article/1-latest-news/112-qf-72-software-bug\">Air-Data/Inertial Reference Unit</a>, or your <a href=\"http://www.youtube.com/watch?v=nFZGpES-St8\">cardiac implant firmware</a> had damn well better be bug free, and rigorously modeled AND compiler checked <i>AND</i> free of back-doors <b>AND</b> not allowed anywhere near production if they're even suspected of incorrectness. When the stakes are billions, or lives, eating the cost of a more extensive and rigorous development process makes sense<a href=\"#foot-Sat-Aug-11-154847EDT-2012\" name=\"note-Sat-Aug-11-154847EDT-2012\">[4]</a>.</p>

<p>This is not what a preference looks like; it makes sense sometimes and not others, and a correct one can be chosen based on context. A preference is something that there really isn't a \"correct\" way of thinking about. Something that we have to accept because it's atomic. So even if globally bifurcating the industry would lead to some new insight<a href=\"#foot-Sat-Aug-11-153735EDT-2012\" name=\"note-Sat-Aug-11-153735EDT-2012\">[5]</a>, and even if that insight would improve inter-programmer relations<a href=\"#foot-Sat-Aug-11-153741EDT-2012\" name=\"note-Sat-Aug-11-153741EDT-2012\">[6]</a>, these aren't the axes to do it on.</p>

<p>So there.</p>

<p>Steven... I disagree. And I won't be adopting your thought framework until you consider filtering out your projections.</p>

<hr />
<h5>Footnotes</h5>
<p>1 - <a href=\"#note-Sat-Aug-11-153625EDT-2012\" name=\"foot-Sat-Aug-11-153625EDT-2012\">[back]</a> - If you take a look at the <a href=\"http://news.ycombinator.com/item?id=4365255\">HN</a>, <a href=\"http://developers.slashdot.org/story/12/08/10/1250231/software-engineering-has-its-own-political-axis-from-conservative-to-liberal\">/.</a> and <a href=\"https://plus.google.com/110981030061712822816/posts/KaSKeg4vQtz\">G+</a> discussions, you'll already see people conflating the political meanings with the proposed software-oriented labels. Less so on slashdot, where most seem to simply dismiss the point of view, but there's a comment on the Google Plus page that reads 

  <blockquote>Dynamic typing has been shown through research to reduce maintainability compared to static typing. <span class=\"sig\">Lars Ivar Igesund</span></blockquote>

<p>Which is, near as I can tell, Utter Horseshit™©. If you bother reading on, when someone asks for a citation, the response is</p>

<blockquote>The research was done by a friend of mine while working at one of those famous, private research centers (yes, one you've heard of), but to my knowledge it has not been released. I don't remember the statically typed language used in the study, but I Imagine it was Java. The dynamically typed language was Ruby. This I can't point you to it, I just hope that you believe me when I tell you the conclusion of it. It certainly jives with mine experiences.<span class=\"sig\">Lars Ivar Igesund</span></blockquote>

<p>That's about what I was expecting; \"This guy I hang out with told me my opinion was totally right\". Oh, by the way, 16 upvotes, or plusses, or whatever the fuck. Never-mind the fact that a methodology isn't outlined, or that the definition of \"maintainability\" isn't mentioned, or that the languages involved are \"I Imagine ...  Java\" and Ruby, or that we don't know if/how the researcher controlled for differences among teams/programmers/projects or (in case this was a single team doing to separate projects) the teams' innate preferences/learning over the course of the experiment.</p>
</p>

<p>2 - <a href=\"#note-Sat-Aug-11-153633EDT-2012\" name=\"foot-Sat-Aug-11-153633EDT-2012\">[back]</a> - Actually, as you can see by the previous note, \"is already leading to\" would be more accurate. Hell, there's already a guy out there <a href=\"http://news.ycombinator.com/item?id=4365606\">calling himself a \"Software Libertarian\"</a>, and we haven't even gotten through Software Ayn Rand yet. That's some leapfrogging right there.</p>

<p>3 - <a href=\"#note-Sat-Aug-11-153728EDT-2012\" name=\"foot-Sat-Aug-11-153728EDT-2012\">[back]</a> - I believe that may be the second time I've linked that comic this month.</p>

<p>4 - <a href=\"#note-Sat-Aug-11-154847EDT-2012\" name=\"foot-Sat-Aug-11-154847EDT-2012\">[back]</a> - In a similar vein, it's interesting to note that NASA's <a href=\"http://www.macworld.com.au/news/fri-10-aug-2012-nasa-upgrades-mars-curiosity-software-from-350m-miles-away-67827/\">Mars rovers have \"dangerous or risky back-doors\"</a> capable of modifying the systems' programming and data. Presumably it was too risky to send them out without the possibility of an in-flight bugfix?</p>

<p>5 - <a href=\"#note-Sat-Aug-11-153735EDT-2012\" name=\"foot-Sat-Aug-11-153735EDT-2012\">[back]</a> - I doubt it will.</p>

<p>6 - <a href=\"#note-Sat-Aug-11-153741EDT-2012\" name=\"foot-Sat-Aug-11-153741EDT-2012\">[back]</a> - Again, severely doubt it.</p>
   "))
((5202 3723 589011000) :INSERT (96 :POSTED 3553646400))
((5202 3723 589013000) :INSERT (96 :TAG :GENERAL-PROGRAMMING-THOUGHTS))
((5202 3723 589018000) :INSERT (96 :TAG :IDEA-PEELING))
((5202 3723 589020000) :INSERT (96 :TAG :RESPONSE))
((5202 3723 589167000) :INSERT
 (97 :TITLE "cl-mop, or \"Yak Shaving for Fun and Marginal Profit\""))
((5202 3723 589172000) :INSERT (97 :FILE "cl-mop.html"))
((5202 3723 589174000) :INSERT (97 :EDITED 3610300865))
((5202 3723 589175000) :INSERT
 (97 :BODY
  "<p>\"mop\" stands for \"<a href=\"http://en.wikipedia.org/wiki/Metaobject\">Meta-Object</a> Protocol\", and it's a term closely related to <a href=\"http://en.wikipedia.org/wiki/Common_Lisp_Object_System\">CLOS</a>. I've mentioned getting annoyed at a certain piece of it <a href=\"/article?name=yak-shaving-for-fun-and-no-profit.html\">last time</a>, when I needed to iterate over CLOS instance slots for some weird reason. It turns out that due to the way MOP support is implemented, this is a non-trivial thing to do portably.</p>

<p>Last week, I got into a situation where I needed a temporary copy of an object. What I really wanted was an object with most slots mirroring an existing instance, but with changed values in two slots. For reasons related to the layout of the surrounding code, I did <i>not</i> want to destructively modify the object itself because it was unclear whether the old values would be expected on a subsequent call. So I googled around a bit, and found that the situation for copying is pretty much the same as it is for iterating. <a href=\"http://stackoverflow.com/questions/11067899/is-there-a-generic-method-for-cloning-clos-objects/11068536#comment15858244_11068536\">There isn't a built-in, general way of making a copy of a CLOS instance</a>, shallow or otherwise, and implementing it myself in a semi-portable way would require doing all the annoying things that I had to pull with slot iteration earlier.</p>

<p>So, being that I occasionally profess to be a non-idiot programmer, I figured I'd take a stab at solving the problem in a semi-satisfactory way.</p>

<p>And <a href=\"https://github.com/Inaimathi/cl-mop\">here we are</a>.</p>

<p>That implements <code>slot-names</code> (which takes a CLOS instance or class and returns a list of its slot names), <code>map-slots</code> (which takes a <code>(lambda (slot-name slot-value) ...)</code> and an instance, and maps over the bound slots of that instance), <code>shallow-copy</code> (which does exactly what it sounds like it would do) and <code>deep-copy</code> (which is tricky enough that I hereby direct you to the <a href=\"https://github.com/Inaimathi/cl-mop/blob/master/README.md\">documentation</a> and/or <a href=\"https://github.com/Inaimathi/cl-mop/blob/master/cl-mop.lisp\">code</a> if you're sufficiently curious about it).</p>

<p>I did cursory testing in <a href=\"http://www.clisp.org/\">GNU Clisp</a>, and fairly extensive testing (followed by some production use) in <a href=\"http://www.sbcl.org/\">SBCL</a>, though the <code><span style=\"color: #7a378b;\">:shadowing-import</span></code> directive should work properly in a number of others as well.</p>

<p>Now, I realize that due to the kind of crap you can pull using CLOS by design, this isn't a complete solution. That said, it did solve the problems I was staring down, and I think I've made it portable/extensible enough that you'll be able to do more or less what you want in a straight-forward way. For basic use cases, it solves the problem outright, which should save me a bit of time in the coming weeks. For more complex cases, each of the exported symbols is a <code>method</code>, which means you can easily <code>def</code> your own if you need to treat a certain class differently from others.</p>
"))
((5202 3723 589209000) :INSERT (97 :POSTED 3553732800))
((5202 3723 589211000) :INSERT (97 :TAG :CLOS))
((5202 3723 589213000) :INSERT (97 :TAG :COMMON-LISP))
((5202 3723 589400000) :INSERT (98 :TITLE "Not Having Any Fun"))
((5202 3723 589405000) :INSERT (98 :FILE "not-having-any-fun.html"))
((5202 3723 589407000) :INSERT (98 :EDITED 3610299562))
((5202 3723 589409000) :INSERT
 (98 :BODY
  "<p>Ok, so I mentioned I was working on a new thing that involved moderation, administration and the <code>auth</code> system I put together as part of the <a href=\"/article?name=authentication.html\">Four</a>-<a href=\"/article?name=authentication-song.html\">and</a>-a-<a href=\"/article?name=rsa-crypto.html\">half</a>-<a href=\"/article?name=authentication-part4.html\">and</a>-<a href=\"/article?name=authentication-part5.5-authentication-not.html\">counting</a> part series on Authentication. I've still got one or two left to write there, but since this \"don't talk about it 'till it's done\" thing worked out so well, I'm going to keep you in suspense.</p>

<p>The result of my toil is Nitrochan a massively-ish scalable, real-time message board system inspired by the *abas that the internet is so full of. My problem with 4chan and similar boards is that they are sort of like going to a restaurant and having a guy come by to shit on your plate every few minutes. It seems that what you'd really want<a href=\"#foot-Mon-Aug-20-123316EDT-2012\" name=\"note-Mon-Aug-20-123316EDT-2012\">[1]</a> is a constant, flowing stream of shit that you can pan for nuggets at your leisure. And this is an attempt at that. When a new thread is started, the boards are all updated with new data. When a new message is posted, the appropriate threads move up the sort order, and people already on the thread get the new message via Comet rather than having to F5. Threads can be moderated and moved between boards through similarly soft-real-time mechanisms.</p>

<p>The <a href=\"https://github.com/Inaimathi/nitrochan\">github is there</a>, released under the terms of the <a href=\"https://github.com/Inaimathi/nitrochan/blob/master/LICENSE.txt\">AGPL</a><a href=\"#foot-Mon-Aug-20-123321EDT-2012\" name=\"note-Mon-Aug-20-123321EDT-2012\">[2]</a>. I'll have another go at setting up an instance here for my own nefarious purposes<a href=\"#foot-Mon-Aug-20-123328EDT-2012\" name=\"note-Mon-Aug-20-123328EDT-2012\">[3]</a> later this week.</p>

<p>The UI layer is still somewhat incomplete for a message board; we can't designate images as spoilers/nsfw, there aren't any comment markup options yet, there's no way to proactively protect a board or thread from spam, and the RSA login process is just as manual and painful as it was the last time I discussed it.</p>

<p>Still, we've got a good starting point to look at in terms of putting a running system together<a href=\"#foot-Mon-Aug-20-123341EDT-2012\" name=\"note-Mon-Aug-20-123341EDT-2012\">[4]</a>.</p>

<p>Now then, the bad stuff.</p>

<h3>Bad Stuff</h3>

<p>The Erlang deployment process is really beginning to annoy the fuck out of me.</p>

<p>I mean, it kind of did <a href=\"/article?name=not-building-erlang.html\">last time</a> too, but I figured that it would get simpler as I went on and automated pieces. That... didn't really happen. You'll note that I mentioned I'll be trying <i>again</i> to set up an instance of Nitrochan.</p>

<p>The attempt proved to be futile, even without having to wrestle with <code>rebar</code> again. I'm really beginning to grudge that the language designers seemed to have considered actual deployment of an app to be outside of their scope. That's a shame, because every useful application is going to need to be deployed somewhere, and doing this stuff manually gets really tedious if you rely on even two or three libraries not found in the core Erlang image. <code>rebar</code> <i>would</i> be a good solution, from what I understand about it, assuming it did what it says on the tin. It has yet to for me.</p>

<p>That's saying nothing of the massive headaches I've gone through as a result of platform incompatibilities. Basically, I spent about an hour trying to figure out why it only works on my machine, only to remember that my deployment environment is a 32-bit Debian machine while my development environment is a 64-bit build of the same. That's really the only thing that could possibly make a difference, because I've painstakingly reproduced my local directory structure, installed programs and downloaded libraries, but running the same <code>make</code> tasks on the same code seems to crash on the server even while working perfectly well on my local. This is Not Inspiring Confidence©™ in Erlangs' touted cross-platform abilities. Because if I can't depend on my program running the same way on two builds of the <i>same</i> OS on different architectures, how am I supposed to believe that it'll do anything but explode when I try to deploy on another OS?</p>

<p>Bottom line, I'm not having any fun.</p>

<p>I did learn a lot about concurrency outside of the lock/mutex world, and I appreciated the opportunity to mess around with actors on a grander scale than I would usually be permitted, but the continuing headaches aren't worth it for me so far. I may come back to it once I've recharged my mental batteries. For the next week or so, I'll be playing around with Clojure<a href=\"#foot-Mon-Aug-20-123616EDT-2012\" name=\"note-Mon-Aug-20-123616EDT-2012\">[5]</a>.</p>

<hr />
<h5>Footnotes</h5>
<p>1 - <a href=\"#note-Mon-Aug-20-123316EDT-2012\" name=\"foot-Mon-Aug-20-123316EDT-2012\">[back]</a> - If that was your thing.</p>

<p>2 - <a href=\"#note-Mon-Aug-20-123321EDT-2012\" name=\"foot-Mon-Aug-20-123321EDT-2012\">[back]</a> - Read it before hacking on it, and get my permission if you want to use the system under another license.</p>

<p>3 - <a href=\"#note-Mon-Aug-20-123328EDT-2012\" name=\"foot-Mon-Aug-20-123328EDT-2012\">[back]</a> - Really, it's just so that the Toronto Lisp User Group can have something better than mailing list with which to communicate between meetings.</p>

<p>4 - <a href=\"#note-Mon-Aug-20-123341EDT-2012\" name=\"foot-Mon-Aug-20-123341EDT-2012\">[back]</a> - And one of the items on that roadmap is automating the RSA login process.</p>

<p>5 - <a href=\"#note-Mon-Aug-20-123616EDT-2012\" name=\"foot-Mon-Aug-20-123616EDT-2012\">[back]</a> - Links added to the sidebar, and shiny new logo in the bar up top.</p>
   "))
((5202 3723 589458000) :INSERT (98 :POSTED 3554424000))
((5202 3723 589460000) :INSERT (98 :TAG :BITCHING))
((5202 3723 589462000) :INSERT (98 :TAG :ERLANG))
((5202 3723 589777000) :INSERT (99 :TITLE "Starting Clojure"))
((5202 3723 589782000) :INSERT (99 :FILE "starting-clojure.html"))
((5202 3723 589784000) :INSERT (99 :EDITED 3610022331))
((5202 3723 589786000) :INSERT
 (99 :BODY
  "<p>So I've been going to this <a href=\"http://www.meetup.com/Toronto-Coding-Dojo/\">Coding Dojo</a> thing, I guess. In an attempt to finally get off my ass and into Clojure, but also into </p>

<ul>
  <li>socializing with functional programmers outside of the Lisp group<a href=\"#foot-Thu-Aug-23-161334EDT-2012\" name=\"note-Thu-Aug-23-161334EDT-2012\">[1]</a></li>
  <li>getting a bit more of a handle on test driven development<a href=\"#foot-Thu-Aug-23-161338EDT-2012\" name=\"note-Thu-Aug-23-161338EDT-2012\">[2]</a>.</li>
</ul>

<p>For the past two weeks, we've been (unsuccessfully so far, but no one is about to give up yet) trying to run through the poker hand kata in Clojure. Half the point here is trying out the language, and I've successfully procrastinated until they got a fantastic, standardized build system going so that I don't have to fuck around installing libraries by hand, which seems like it'll be very gratifying after the bunch of time spent in the Erlang world lately.</p>

<h3>Installing Clojure</h3>

<p><a href=\"http://packages.debian.org/sid/devel/clojure\">Clojure the debian package</a> is actually not in the free repos. You <i>can</i> <code>apt-get install clojure</code>, but only after <a href=\"http://wiki.debian.org/Clojure\">adding <code>contrib</code> <i>and</i> <code>non-free</code></a> to your <code>sources.list</code>, which I don't particularly want to do. In case you haven't noticed yet, I'm the sort of person who occasionally runs <code>vrms</code>, just to make sure. It turns out though, that the <a href=\"http://packages.debian.org/unstable/java/leiningen\">Clojure build tool</a> can handle the task of installing the language for you, and provide faux-quicklisp/quickproject functionality <i>and</i> <b>is</b> in the free repos as of <a href=\"http://www.debian.org/releases/wheezy/\"><code>wheezy</code></a>. So, one</p>

<pre>apt-get install leiningen</pre>

<p>later had me on my feet. Or part of the way, at least. That install gives you <code>lein new</code> and <code>lein repl</code>, but doesn't by itself set up a development environment. In order to do <i>that</i>, I also had to <code>lein plugin install swank-clojure</code>, and shove <a href=\"https://github.com/technomancy/clojure-mode/\"><code>clojure-mode</code></a> into my <code>.emacs</code>. At that point, I was ostensibly ready to start on a project, but <code>SLIME</code> and <code>swank-clojure</code> weren't playing nice for whatever reason. I still haven't puzzled it out, but the best idea any docs gave me was that Clojure really doesn't want you to have your own swank installed, thank you very much.</p>

<p>Given that I'm a professional Common Lisper these days, I had exactly zero chance of following that instruction. Instead, I wired up <code>clojure-mode</code> to <a href=\"http://nakkaya.com/2009/12/01/adding-inferior-lisp-support-for-clojure-mode/\">use the <code>inferior-lisp</code></a> option by adding the following additional code to my <code>.emacs</code></p>

<pre>(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">na-load-buffer</span> ()
  (interactive)
  (point-to-register 5)
  (mark-whole-buffer)
  (lisp-eval-region (point) (mark) nil)
  (jump-to-register 5))


(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">clojure-run-test</span> ()
  (interactive)
  (<span style=\"color: #a020f0;\">let</span> ((b (get-buffer-create <span style=\"color: #8b2252;\">\"*clojure-test*\"</span>)))
    (<span style=\"color: #a020f0;\">with-current-buffer</span> b
      (erase-buffer)
      (insert (shell-command-to-string <span style=\"color: #8b2252;\">\"lein test\"</span>)))
    (display-buffer b)))

<span style=\"color: #b22222;\">;; </span><span style=\"color: #b22222;\">inferior-lisp support.
</span><span style=\"color: #b22222;\">;; </span><span style=\"color: #b22222;\">Because fuck you, that's why.
</span>(add-hook 'clojure-mode-hook
          '(<span style=\"color: #a020f0;\">lambda</span> () 
             (define-key clojure-mode-map (kbd <span style=\"color: #8b2252;\">\"C-c C-c\"</span>) 'lisp-eval-defun)
             (define-key clojure-mode-map (kbd <span style=\"color: #8b2252;\">\"C-x C-e\"</span>) 'lisp-eval-last-sexp)
             (define-key clojure-mode-map (kbd <span style=\"color: #8b2252;\">\"C-c C-e\"</span>) 'lisp-eval-last-sexp)
             (define-key clojure-mode-map (kbd <span style=\"color: #8b2252;\">\"C-c C-l\"</span>) 'na-load-buffer)
             (define-key clojure-mode-map (kbd <span style=\"color: #8b2252;\">\"C-c C-z\"</span>) 'run-lisp)
             (define-key clojure-mode-map (kbd <span style=\"color: #8b2252;\">\"C-c C-b\"</span>) 'clojure-run-test)))</pre>

<p>After all that, <code>run-lisp</code> in a Clojure buffer will start up a Clojure REPL, and the keyboard shortcuts I'm used to from <code>common-lisp-mode</code> will more or less work as before. <code>clojure-run-test</code> is mind-numbingly slow, and I don't get completions or arglist hints, but it's good enough for a start.</p>

<h3>Trying Clojure</h3>

<p>The first thought that struck me was \"Wait a minute, this looks a hell of a lot like Scheme\". And really, that turns out to be pretty on the money, from what I can see so far at least. <b>Clojure is a JVM Scheme with curlies, brackets, an Arc-esque obsession with counting characters needed in the source code, and heavy emphasis on immutability.</b> That was bolded because, if you're in a hurry, you can basically stop reading now. If I were to offer advice about whether to learn it or not, I'd say</p>

<ol>
  <li>if you need to do any extensive work on the JVM, use Clojure, it beats the alternatives</li>
  <li>if you don't know a Lisp yet, Clojure is a reasonable choice for your first<a href=\"#foot-Thu-Aug-23-161738EDT-2012\" name=\"note-Thu-Aug-23-161738EDT-2012\">[3]</a></li>
  <li>if you already know Scheme or Common Lisp, and are comfortable with it, and don't go in for this JVM nonsense, don't bother learning Clojure because it'll teach you nothing new in the <a href=\"http://www.cs.yale.edu/quotes.html\">Perlis</a> sense</li>
</ol>

<p>The differences are mostly in minutia, rather than the general principles of the language. I'll go through the few that are obvious from cursory poking, but if you're interested at all, you should take in <a href=\"http://blip.tv/clojure/clojure-for-lisp-programmers-part-1-1319721\">Clojure for Lisp Programmers Part 1</a> and <a href=\"http://blip.tv/clojure/clojure-for-lisp-programmers-part-2-1319826\">Part 2</a>, in which Rich Hickey tells you basically everything I'm about to and a few more things besides. </p>

<p>There are probably bigger differences than the ones I'll point out, consider this a \"preliminary impressions\" note, because I've yet to do anything more serious than an attempt at that poker hand kata.</p>

<ul>
  <li><b>Different Truth/Falsity Values</b> Clojure has an explicit <code>true</code> and <code>false</code>. <code>nil</code> and the empty list are  <b>not</b> equivalent<a href=\"#foot-Thu-Aug-23-162302EDT-2012\" name=\"note-Thu-Aug-23-162302EDT-2012\">[4]</a>, and you're free to define one-letter local variables that designate <code>t</code>ime, <code>t</code>raffic or <code>t</code>otals. That's different from both CL and Scheme, and I'm sort of leaning towards calling it frivolous, but I'll see how it works out in practice<a href=\"#foot-Thu-Aug-23-162306EDT-2012\" name=\"note-Thu-Aug-23-162306EDT-2012\">[5]</a>.</li>
  <li><b>No Separate Function Namespace</b> Clojure cribs from Scheme here. A single function/variable namespace means you don't need to use <code>#'</code>, and it means you don't need separate <code>let</code>/<code>flet</code>. Oddly, there are two define forms<a href=\"#foot-Thu-Aug-23-162310EDT-2012\" name=\"note-Thu-Aug-23-162310EDT-2012\">[6]</a>, but it's otherwise closer to the Scheme way of doing things.</li>
  <li><b>Fewer Parentheses</b> I'm talking about <code>let</code> and <code>cond</code> bodies here. CL and Scheme both have you delimit each pair in an additional set of parens, while Clojure doesn't. This might make <code>transpose-sexps</code> a bit weirder on their clauses, but reduces the amount of typing you need to do by a tiny amount in the general case.</li>
  <li><b>Polymorphic Built-Ins</b> The general equality test in Clojure is <code>=</code>, unlike CL or Scheme where you need to pick between <code>=</code>, <code>eq</code>, <code>eql</code>, etc. <code>first</code>, <code>last</code>, <code>map</code> and many others also work generically on sequences rather than just on lists.</li>
  <li><b>Vectors Everywhere</b> <code>[1 2 3]</code> is \"the vector of 1, 2, 3\" rather than a list. Because of the polymorphic thing above, this doesn't introduce as much syntactic complexity as you'd think, and it means you don't need to worry about which end of a list you're taking from. Argument lists are all vectors rather than lists.</li>
  <li><b>Destructuring By Default</b> I'm pretty used to whipping out  <code>destructuring-bind</code> in Common Lisp because it's sometimes the most straightforward way of expressing something. I don't use it nearly as often as often in CL as I do in Python or Erlang just because it doesn't save typing in nearly as many situations given what the construct looks like<a href=\"#foot-Thu-Aug-23-162317EDT-2012\" name=\"note-Thu-Aug-23-162317EDT-2012\">[7]</a>. In Clojure, you can do something like

    <pre>user=>(def foo [1 2 3 4])
      #'user/foo
      user=> (let [[a b c d] foo] (list a b c d))
      (1 2 3 4)</pre>

    which means that I could start doing this much more frivolously.</li>
  <li><b>Curlies and Brackets</b> Obviously. It's not as though CL <i>doesn't</i> have them, but they tend to get used very sparingly as part of reader macros. Clojure uses curlies to designate hash-maps/sets and <code>[]</code> to designate (among other things) vectors. Personally, I don't miss the JavaScript/jQuery matching hell that comes with nesting all three of them, but they don't seem to be mutually nesting in a lot of places, and <a href=\"http://emacswiki.org/emacs/ParEdit\"><code>paredit</code></a> helps a lot anyway.</li>
  <li><b>Whitespace Commas</b> The quote and backquote still work as expected, but the \"unquote\" modifier is <code>~</code> rather than <code>,</code>. This is another one that I see as frivolous, though I guess it could reduce cognitive friction for people who are used to delimiting lists with things other than spaces.</li>
</ul>


<p>Two bigger ones that I feel the need to call out more prominently because I like them are <a href=\"http://clojure.org/multimethods\"><b>multimethods</b></a> and <b><a href=\"http://clojure.org/special_forms\">doc</a> <a href=\"http://blog.fogus.me/2009/12/21/clojures-pre-and-post/\">hashes</a></b>.</p>

<p>If you're a Common Lisper, you're already used to multimethods. What's different about them in Clojure is that the generic function declaration takes a dispatch function. Which means that you can specialize methods on arbitrary properties, rather than just types. In Common Lisp, I occasionally have to declare a class for something just so that I can define methods for it, even if the thing I'm dispatching on really makes more sense as a slot than a class. The Clojure approach would save me code in these places.</p>

<p>Doc hashes are severely beefed up docstrings. Or, you could think of them as programming-by-contract-lite, I guess.  You still have the option of doing the usual docstring thing</p>

<pre>(<span style=\"color: #a020f0;\">defn</span> <span style=\"color: #0000ff;\">read-card</span> [card-string]
  <span style=\"color: #8b2252;\">\"Takes a card string and returns a card hash with a :rank, :suit and :name\"</span>
  (<span style=\"color: #7a378b;\">let</span> [rank (<span style=\"color: #7a378b;\">or</span> (<span style=\"color: #a0522d;\">get</span> rank-map (<span style=\"color: #a0522d;\">first</span> card-string)) (<span style=\"color: #a0522d;\">read-string</span> (<span style=\"color: #a0522d;\">str</span> (<span style=\"color: #a0522d;\">first</span> card-string))))
        suit (<span style=\"color: #a0522d;\">get</span> suit-map (<span style=\"color: #a0522d;\">second</span> card-string))
        name (<span style=\"color: #a0522d;\">get</span> name-map rank)]
    {<span style=\"color: #008b8b;\">:rank</span> rank <span style=\"color: #008b8b;\">:suit</span> suit <span style=\"color: #008b8b;\">:name</span> name}))</pre>

<p>but if you want to get detailed, explicit, and compiler-checked, you have the option of doing something like</p>

<pre>(<span style=\"color: #a020f0;\">defn</span> <span style=\"color: #0000ff;\">read-card</span> [card-string]
  {<span style=\"color: #008b8b;\">:doc</span> <span style=\"color: #8b2252;\">\"Takes a card string and returns a card hash with a :rank, :suit and :name\"</span>
   <span style=\"color: #008b8b;\">:pre</span> [(<span style=\"color: #a0522d;\">string?</span> card-string) (<span style=\"color: #a0522d;\">=</span> 2 (<span style=\"color: #a0522d;\">count</span> card-string))]
   <span style=\"color: #008b8b;\">:post</span> [(<span style=\"color: #a0522d;\">=</span> <span style=\"color: #7a378b;\">clojure.lang.PersistentArrayMap</span> (<span style=\"color: #a0522d;\">class</span> %))]}  
  (<span style=\"color: #7a378b;\">let</span> [rank (<span style=\"color: #7a378b;\">or</span> (<span style=\"color: #a0522d;\">get</span> rank-map (<span style=\"color: #a0522d;\">first</span> card-string)) (<span style=\"color: #a0522d;\">read-string</span> (<span style=\"color: #a0522d;\">str</span> (<span style=\"color: #a0522d;\">first</span> card-string))))
        suit (<span style=\"color: #a0522d;\">get</span> suit-map (<span style=\"color: #a0522d;\">second</span> card-string))
        name (<span style=\"color: #a0522d;\">get</span> name-map rank)]
    {<span style=\"color: #008b8b;\">:rank</span> rank <span style=\"color: #008b8b;\">:suit</span> suit <span style=\"color: #008b8b;\">:name</span> name}))</pre>

<p>You can define inline tests too, if you want, but it's probably better to keep those in a separate test file. The static typists among you are probably snickering at this, but I like it better because these are <i>optional</i>. You don't <i>want</i> them on every function ever, you just want them on the potentially confusing functions, whose existence you should be trying to minimize. This is one step closer to getting code and documentation to coexist peacefully.</p>

<hr />
<h5>Footnotes</h5>
<p>1 - <a href=\"#note-Thu-Aug-23-161334EDT-2012\" name=\"foot-Thu-Aug-23-161334EDT-2012\">[back]</a> - Though there is some overlap.</p>
<p>2 - <a href=\"#note-Thu-Aug-23-161338EDT-2012\" name=\"foot-Thu-Aug-23-161338EDT-2012\">[back]</a> - Which is actually a lot less painful with functional programming in general than it seemed to be for the various Java/PHP teams I've had the pleasure of UI-ing for.</p>

<p>3 - <a href=\"#note-Thu-Aug-23-161738EDT-2012\" name=\"foot-Thu-Aug-23-161738EDT-2012\">[back]</a> - Because it has the elegance of Scheme, combined with the production presence of Java meaning it'll be easier to convince your boss to let you use this than it will to let you use an actual Scheme, not that there's a lack of JVM options there.</p>

<p>4 - <a href=\"#note-Thu-Aug-23-162302EDT-2012\" name=\"foot-Thu-Aug-23-162302EDT-2012\">[back]</a> - Though <code>nil</code> does equate to <code>false</code> for boolean purposes.</p>
<p>5 - <a href=\"#note-Thu-Aug-23-162306EDT-2012\" name=\"foot-Thu-Aug-23-162306EDT-2012\">[back]</a> - As a note, having thought about it a little more, there are a couple of places where this is the unambiguously right thing to do, and I've yet to think up a situation where it'll trip me up.</p>
<p>6 - <a href=\"#note-Thu-Aug-23-162310EDT-2012\" name=\"foot-Thu-Aug-23-162310EDT-2012\">[back]</a> - <code>def</code> for variables and <code>defn</code> for functions.</p>
<p>7 - <a href=\"#note-Thu-Aug-23-162317EDT-2012\" name=\"foot-Thu-Aug-23-162317EDT-2012\">[back]</a> -  <code>(destructuring-bind (a b c) some-form-here &body)</code></p>
"))
((5202 3723 589913000) :INSERT (99 :POSTED 3554683200))
((5202 3723 589915000) :INSERT (99 :TAG :CLOJURE))
((5202 3723 590491000) :INSERT
 (100 :TITLE "Partial Poker Hand Kata in Common Lisp, Clojure and Haskell"))
((5202 3723 590497000) :INSERT (100 :FILE "poker-hands.html"))
((5202 3723 590499000) :INSERT (100 :EDITED 3610022331))
((5202 3723 590501000) :INSERT
 (100 :BODY
  "<p>I mentioned the <a href=\"http://www.meetup.com/Toronto-Coding-Dojo/#calendar\">Toronto Coding Dojo</a> last week<a href=\"#foot-Tue-Aug-28-182259EDT-2012\" name=\"note-Tue-Aug-28-182259EDT-2012\">[1]</a>. Specifically, I mentioned trying to go over <a href=\"http://codingdojo.org/cgi-bin/wiki.pl?KataPokerHands\">the Poker Hand Kata</a> from scratch each week in Clojure.</p>

<p>We haven't solved it yet, but we're getting there. Half the point is getting to know the language, and the TDD technique, so it's not as though failing to get to the end is the worst possible thing, really. I'm warming to the language, but not the technique (more on that next time).</p>

<p>We <i>were</i> supposed to have a dojo github page, but there doesn't seem to be a link going out from the meetup, and I can't find it after ten minutes of determined googling, so I can't point you to it. I have, however taken first stabs at the problem in three languages and want to go over the problem a bit.</p>

<span class=\"edit\">EDIT:
<p>Turns out the organizer is keeping the progress repos in <a href=\"https://github.com/tlalexan\">his GitHub profile</a>.</p>
Fri, 31 Aug, 2012</span>

<p>Fundamentally, it's a sorting problem. We have cards, whose relevant properties are a <code>rank</code> and a <code>suit</code>. We have an ordered set of hand types, each of which have their own tie-braking method with other hands of the same type. The task, near as I can tell, is taking a pair of hands, figuring out their types, then sorting them to find out the winner<a href=\"#foot-Tue-Aug-28-182537EDT-2012\" name=\"note-Tue-Aug-28-182537EDT-2012\">[2]</a>.</p>

<p>The constructs we need to represent here are ranks, suits, cards (which is just a <code>(rank suit)</code> combo) and hands (which are just lists of cards). Here's my first first stab in Common Lisp<a href=\"#foot-Tue-Aug-28-182701EDT-2012\" name=\"note-Tue-Aug-28-182701EDT-2012\">[3]</a>.</p>

<pre><span style=\"color: #b22222;\">;; </span><span style=\"color: #b22222;\">poker-hands.lisp
</span>
(<span style=\"color: #a020f0;\">defpackage</span> <span style=\"color: #228b22;\">:poker</span> (<span style=\"color: #7a378b;\">:use</span> <span style=\"color: #7a378b;\">:cl</span> <span style=\"color: #7a378b;\">:split-sequence</span>))
(<span style=\"color: #a020f0;\">in-package</span> <span style=\"color: #7a378b;\">:poker</span>)

(<span style=\"color: #a020f0;\">defparameter</span> <span style=\"color: #a0522d;\">*letter-&gt;val*</span> '(#\\T 10 #\\J 11 #\\Q 12 #\\K 13 #\\A 14))
(<span style=\"color: #a020f0;\">defparameter</span> <span style=\"color: #a0522d;\">*hand-type-&gt;val*</span> '(<span style=\"color: #7a378b;\">:high-card</span> 1 <span style=\"color: #7a378b;\">:pair</span> 2 <span style=\"color: #7a378b;\">:two-pairs</span> 3 <span style=\"color: #7a378b;\">:three-of-a-kind</span> 4 
                                 <span style=\"color: #7a378b;\">:straight</span> 5 <span style=\"color: #7a378b;\">:flush</span> 6 <span style=\"color: #7a378b;\">:full-house</span> 7 
                                 <span style=\"color: #7a378b;\">:four-of-a-kind</span> 8 <span style=\"color: #7a378b;\">:straight-flush</span> 9))

(<span style=\"color: #a020f0;\">defclass</span> <span style=\"color: #228b22;\">card</span> ()
  ((rank <span style=\"color: #7a378b;\">:reader</span> rank <span style=\"color: #7a378b;\">:initarg</span> <span style=\"color: #7a378b;\">:rank</span>)
   (suit <span style=\"color: #7a378b;\">:reader</span> suit <span style=\"color: #7a378b;\">:initarg</span> <span style=\"color: #7a378b;\">:suit</span>)))

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">read-card</span> (card-string)
  (make-instance 'card
                 <span style=\"color: #7a378b;\">:rank</span> (or (getf *letter-&gt;val* (aref card-string 0))
                           (parse-integer card-string <span style=\"color: #7a378b;\">:junk-allowed</span> t))
                 <span style=\"color: #7a378b;\">:suit</span> (aref card-string 1)))

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">read-hand</span> (hand-string)
  (sort (mapcar #'read-card (split-sequence #\\space hand-string))
        #'&gt; <span style=\"color: #7a378b;\">:key</span> #'rank))

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">flush-p</span> (cards) 
  (<span style=\"color: #a020f0;\">let</span> ((suits (mapcar #'suit cards)))
    (every (<span style=\"color: #a020f0;\">lambda</span> (s) (eq s (car suits))) (cdr suits))))

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">range</span> (start end)
  (<span style=\"color: #a020f0;\">loop</span> for i from start to end collect i))

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">straight-p</span> (cards)
  (equal (mapcar #'rank cards)
         (<span style=\"color: #a020f0;\">loop</span> repeat (length cards) 
            for i from (rank (car cards)) downto 0
            collect i)))

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">find-sets</span> (cards)
  (<span style=\"color: #a020f0;\">let</span> ((copy (copy-list cards)))
    (<span style=\"color: #a020f0;\">loop</span> for c in copy
       when (remove (rank c) cards <span style=\"color: #7a378b;\">:key</span> #'rank <span style=\"color: #7a378b;\">:test-not</span> #'=) collect it
       do (setf cards (delete (rank c) cards <span style=\"color: #7a378b;\">:key</span> #'rank)))))

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">set-of-p</span> (n sets)
  (some (<span style=\"color: #a020f0;\">lambda</span> (s) (= (length s) n)) sets))

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">count-sets-of</span> (n sets)
  (count-if (<span style=\"color: #a020f0;\">lambda</span> (s) (= (length s) n)) sets))

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">hand-type</span> (hand)
  (<span style=\"color: #a020f0;\">let</span> ((sets (find-sets hand)))
    (<span style=\"color: #a020f0;\">cond</span> ((and (flush-p hand) (straight-p hand)) <span style=\"color: #7a378b;\">:straight-flush</span>)
          ((set-of-p 4 sets) <span style=\"color: #7a378b;\">:four-of-a-kind</span>)
          ((and (set-of-p 3 sets) (set-of-p 2 sets)) <span style=\"color: #7a378b;\">:full-house</span>)
          ((flush-p hand) <span style=\"color: #7a378b;\">:flush</span>)
          ((straight-p hand) <span style=\"color: #7a378b;\">:straight</span>)
          ((set-of-p 3 sets) <span style=\"color: #7a378b;\">:three-of-a-kind</span>)
          ((= 2 (count-sets-of 2 sets)) <span style=\"color: #7a378b;\">:two-pairs</span>)
          ((set-of-p 2 sets) <span style=\"color: #7a378b;\">:pair</span>)
          (t <span style=\"color: #7a378b;\">:high-card</span>)))) 

(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">break-tie</span> (hand-type (hand-a list) (hand-b list))
  (<span style=\"color: #a020f0;\">loop</span> for a in hand-a
        for b in hand-b
        unless (= (rank a) (rank b))
          do (<span style=\"color: #a020f0;\">return</span> (&gt; a b))))

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">hand-type-&gt;</span> (hand-type-a hand-type-b)
  (&gt; (getf *hand-type-&gt;val* hand-type-a)
     (getf *hand-type-&gt;val* hand-type-b)))

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">hand-&gt;</span> (hand-a hand-b)
  (<span style=\"color: #a020f0;\">let</span> ((type-a (hand-type hand-a))
        (type-b (hand-type hand-b)))
    (or (hand-type-&gt; type-a type-b)
        (<span style=\"color: #a020f0;\">when</span> (eq type-a type-b)
          (break-tie type-a hand-a hand-b)))))</pre>

<p>Not bad for about 20 minutes of work. I punt on the <code>break-tie</code> method at the bottom there, opting to just compare high cards until someone wins. Like I said, that really should be doing something else; for instance, if we have two three-of-a-kind hands, we'd want to compare the set of three as opposed to the high cards. Once we've got the hands read into an easier format, we can test <code>flush-p</code>, which takes a list of cards and checks if they've all got the same suit, and <code>straight-p</code>, which takes a list of cards and checks if they constitute a run.</p>

<p><code>read-card</code> takes a two-character string and returns a new <code>card</code> based on it. A <code>card</code> is just a rank attached to a suit. <code>read-hand</code> takes the specified hand string format, and returns a list of cards from it. Finally, we've got <code>hand-type-></code> and <code>hand-></code>, which compare hand types and hands respectively<a href=\"#foot-Tue-Aug-28-182849EDT-2012\" name=\"note-Tue-Aug-28-182849EDT-2012\">[4]</a>.</p>

<p>It's minimal, and it doesn't <i>really</i> solve the problem, but I'm already familiar with the CL way of doing things, so I didn't want to spend any more time on this one than I really had to.</p>

<p>On we go to</p>

<pre><span style=\"color: #b22222;\">;; </span><span style=\"color: #b22222;\">poker-hands.clj
</span>
(<span style=\"color: #7a378b;\">ns</span> poker-hands.core
  (<span style=\"color: #008b8b;\">:use</span> [clojure.string <span style=\"color: #008b8b;\">:only</span> [split]]))

(<span style=\"color: #a020f0;\">def</span> <span style=\"color: #0000ff;\">rank-map</span> {\\T 10 \\J 11 \\Q 12 \\K 13 \\A 14})
(<span style=\"color: #a020f0;\">def</span> <span style=\"color: #0000ff;\">name-map</span> [<span style=\"color: #8b2252;\">\"Rules for Draw and Stud Poker\"</span> <span style=\"color: #8b2252;\">\"Ace\"</span> <span style=\"color: #8b2252;\">\"Two\"</span> <span style=\"color: #8b2252;\">\"Three\"</span> <span style=\"color: #8b2252;\">\"Four\"</span> <span style=\"color: #8b2252;\">\"Five\"</span> <span style=\"color: #8b2252;\">\"Six\"</span> <span style=\"color: #8b2252;\">\"Seven\"</span> <span style=\"color: #8b2252;\">\"Eight\"</span> <span style=\"color: #8b2252;\">\"Nine\"</span> <span style=\"color: #8b2252;\">\"Ten\"</span> <span style=\"color: #8b2252;\">\"Jack\"</span> <span style=\"color: #8b2252;\">\"Queen\"</span> <span style=\"color: #8b2252;\">\"King\"</span> <span style=\"color: #8b2252;\">\"Ace\"</span>])
(<span style=\"color: #a020f0;\">def</span> <span style=\"color: #0000ff;\">suit-map</span> {\\H <span style=\"color: #008b8b;\">:hearts</span> \\C <span style=\"color: #008b8b;\">:clubs</span> \\S <span style=\"color: #008b8b;\">:spades</span> \\D <span style=\"color: #008b8b;\">:diamonds</span>})
(<span style=\"color: #a020f0;\">def</span> <span style=\"color: #0000ff;\">hand-map</span> {<span style=\"color: #008b8b;\">:straight-flush</span> 8 <span style=\"color: #008b8b;\">:four-of-a-kind</span> 7 <span style=\"color: #008b8b;\">:full-house</span> 6 <span style=\"color: #008b8b;\">:flush</span> 5 <span style=\"color: #008b8b;\">:straight</span> 4 <span style=\"color: #008b8b;\">:three-of-a-kind</span> 3 <span style=\"color: #008b8b;\">:two-pairs</span> 2 <span style=\"color: #008b8b;\">:pair</span> 1 <span style=\"color: #008b8b;\">:high-card</span> 0})

(<span style=\"color: #a020f0;\">defn</span> <span style=\"color: #0000ff;\">read-card</span> [card-string]
  (<span style=\"color: #7a378b;\">let</span> [rank (<span style=\"color: #7a378b;\">or</span> (<span style=\"color: #a0522d;\">get</span> rank-map (<span style=\"color: #a0522d;\">first</span> card-string)) (<span style=\"color: #a0522d;\">read-string</span> (<span style=\"color: #a0522d;\">subs</span> card-string 0 1)))
        suit (<span style=\"color: #a0522d;\">get</span> suit-map (<span style=\"color: #a0522d;\">second</span> card-string))
        name (<span style=\"color: #a0522d;\">get</span> name-map rank)]
    {<span style=\"color: #008b8b;\">:rank</span> rank <span style=\"color: #008b8b;\">:suit</span> suit <span style=\"color: #008b8b;\">:name</span> name}))

(<span style=\"color: #a020f0;\">defn</span> <span style=\"color: #0000ff;\">read-hand</span> [hand-string]
  (<span style=\"color: #a0522d;\">sort-by</span> <span style=\"color: #008b8b;\">:rank</span> (<span style=\"color: #a0522d;\">map</span> read-card (split hand-string #<span style=\"color: #8b2252;\">\" \"</span>))))

(<span style=\"color: #a020f0;\">defn</span> <span style=\"color: #0000ff;\">flush?</span> [cards]
  (<span style=\"color: #a0522d;\">=</span> 1 (<span style=\"color: #a0522d;\">count</span> (<span style=\"color: #a0522d;\">group-by</span> <span style=\"color: #008b8b;\">:suit</span> cards))))

(<span style=\"color: #a020f0;\">defn</span> <span style=\"color: #0000ff;\">straight?</span> [cards]
  (<span style=\"color: #7a378b;\">let</span> [ranks (<span style=\"color: #a0522d;\">map</span> <span style=\"color: #008b8b;\">:rank</span> cards)]
    (<span style=\"color: #a0522d;\">=</span> ranks (<span style=\"color: #a0522d;\">range</span> (<span style=\"color: #a0522d;\">first</span> ranks) (<span style=\"color: #a0522d;\">+</span> 1 (<span style=\"color: #a0522d;\">last</span> ranks))))))

(<span style=\"color: #a020f0;\">defn</span> <span style=\"color: #0000ff;\">group-of?</span> [n sets]
  (<span style=\"color: #a0522d;\">some</span> #(<span style=\"color: #a0522d;\">=</span> (<span style=\"color: #a0522d;\">count</span> (<span style=\"color: #a0522d;\">second</span> %1)) n) sets))

(<span style=\"color: #a020f0;\">def</span> <span style=\"color: #0000ff;\">four-of-a-kind?</span> (<span style=\"color: #a0522d;\">partial</span> group-of? 4))
(<span style=\"color: #a020f0;\">def</span> <span style=\"color: #0000ff;\">three-of-a-kind?</span> (<span style=\"color: #a0522d;\">partial</span> group-of? 3))
(<span style=\"color: #a020f0;\">def</span> <span style=\"color: #0000ff;\">pair?</span> (<span style=\"color: #a0522d;\">partial</span> group-of? 2))

(<span style=\"color: #a020f0;\">defn</span> <span style=\"color: #0000ff;\">count-sets-of</span> [n sets]
  (<span style=\"color: #a0522d;\">count</span> (<span style=\"color: #a0522d;\">filter</span> #(<span style=\"color: #a0522d;\">=</span> (<span style=\"color: #a0522d;\">count</span> (<span style=\"color: #a0522d;\">second</span> %1)) n) sets)))

(<span style=\"color: #a020f0;\">defn</span> <span style=\"color: #0000ff;\">hand-type</span> [hand]
  (<span style=\"color: #7a378b;\">let</span> [sets (<span style=\"color: #a0522d;\">group-by</span> <span style=\"color: #008b8b;\">:rank</span> hand)]
    (<span style=\"color: #7a378b;\">cond</span> (<span style=\"color: #7a378b;\">and</span> (straight? hand) (flush? hand)) <span style=\"color: #008b8b;\">:straight-flush</span>
          (four-of-a-kind? sets) <span style=\"color: #008b8b;\">:four-of-a-kind</span>
          (<span style=\"color: #7a378b;\">and</span> (three-of-a-kind? sets) (pair? 2 sets)) <span style=\"color: #008b8b;\">:full-house</span>
          (flush? hand) <span style=\"color: #008b8b;\">:flush</span>
          (straight? hand) <span style=\"color: #008b8b;\">:straight</span>
          (three-of-a-kind? sets) <span style=\"color: #008b8b;\">:three-of-a-kind</span>
          (<span style=\"color: #a0522d;\">=</span> 2 (count-sets-of 2 sets)) <span style=\"color: #008b8b;\">:two-pairs</span>
          (pair? sets) <span style=\"color: #008b8b;\">:pair</span>
          <span style=\"color: #008b8b;\">:else</span> <span style=\"color: #008b8b;\">:high-card</span>)))

(<span style=\"color: #a020f0;\">defn</span> <span style=\"color: #0000ff;\">break-tie</span> [hand-a hand-b] true)

(<span style=\"color: #a020f0;\">defn</span> <span style=\"color: #0000ff;\">hand-&gt;</span> [hand-a hand-b]
  (<span style=\"color: #7a378b;\">let</span> [type-a (hand-type hand-a)
        type-b (hand-type hand-b)]
    (<span style=\"color: #7a378b;\">or</span> (<span style=\"color: #a0522d;\">apply</span> &gt; (<span style=\"color: #a0522d;\">map</span> #(<span style=\"color: #a0522d;\">get</span> hand-map %) [type-a type-b]))
        (<span style=\"color: #7a378b;\">when</span> (<span style=\"color: #a0522d;\">=</span> type-a type-b)
          (break-tie hand-a hand-b)))))</pre>

<p>The Clojure version took me a bit longer since I'm still at the stage of having to code with a reference open, and I don't even have <code>clojure-slime</code> set up to give me argument hints. As I assumed though; there aren't really big conceptual differences between this one and the CL version. It's more compact by about 20 lines, but that's almost entirely due to the fact that Clojure has built-in <code>range</code> and <code>group-by</code> functions, which I had to define myself in the previous take.</p>

<p>The only other real difference is that there aren't any classes here, since Clojure encourages <code>map</code> and <code>vector</code> use instead. That's helped a bit by implicit indexing<a href=\"#foot-Tue-Aug-28-183106EDT-2012\" name=\"note-Tue-Aug-28-183106EDT-2012\">[5]</a> and <code>lambda</code> shorthand<a href=\"#foot-Tue-Aug-28-183114EDT-2012\" name=\"note-Tue-Aug-28-183114EDT-2012\">[6]</a>. Note that this already handles card names, rather than just ranks.</p>

<p><code>partial</code> is what Clojure calls <a href=\"https://en.wikipedia.org/wiki/Currying\">currying</a>, and those three functions are there for readability in the <code>hand-type</code> body.</p>

<p>The part that I'm pointedly <i>not</i> showing here because it would be really boring, is the ~60 line set of test cases the group wrote up for this little program, as part of the construction process. Mostly, they were things like making sure that the <code>read</code> functions returned appropriate values from appropriate-looking strings, and specifying the basic functionality of how different hand types are coordinated and ranked.</p>

<p>On that note, here's the third (and final) stab I'm posting today</p>

<pre><span style=\"color: #b22222;\">-- </span><span style=\"color: #b22222;\">poker-hands.hs
</span>
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Data.String</span>
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Data.List</span>
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Data.Ord</span>

<span style=\"color: #a020f0;\">data</span> <span style=\"color: #228b22;\">Rank</span> <span style=\"color: #a0522d;\">=</span> <span style=\"color: #228b22;\">Two</span> <span style=\"color: #a0522d;\">|</span> <span style=\"color: #228b22;\">Three</span> <span style=\"color: #a0522d;\">|</span> <span style=\"color: #228b22;\">Four</span> <span style=\"color: #a0522d;\">|</span> <span style=\"color: #228b22;\">Five</span> <span style=\"color: #a0522d;\">|</span> <span style=\"color: #228b22;\">Six</span> <span style=\"color: #a0522d;\">|</span> <span style=\"color: #228b22;\">Seven</span> <span style=\"color: #a0522d;\">|</span> <span style=\"color: #228b22;\">Eight</span> <span style=\"color: #a0522d;\">|</span> <span style=\"color: #228b22;\">Nine</span> 
          <span style=\"color: #a0522d;\">|</span> <span style=\"color: #228b22;\">Ten</span> <span style=\"color: #a0522d;\">|</span> <span style=\"color: #228b22;\">Jack</span> <span style=\"color: #a0522d;\">|</span> <span style=\"color: #228b22;\">Queen</span> <span style=\"color: #a0522d;\">|</span> <span style=\"color: #228b22;\">King</span> <span style=\"color: #a0522d;\">|</span> <span style=\"color: #228b22;\">Ace</span> 
          <span style=\"color: #a020f0;\">deriving</span> (<span style=\"color: #228b22;\">Eq</span>, <span style=\"color: #228b22;\">Ord</span>, <span style=\"color: #228b22;\">Show</span>, <span style=\"color: #228b22;\">Bounded</span>, <span style=\"color: #228b22;\">Enum</span>)
                   
<span style=\"color: #a020f0;\">instance</span> <span style=\"color: #228b22;\">Read</span> <span style=\"color: #228b22;\">Rank</span> <span style=\"color: #a020f0;\">where</span>
  readsPrec <span style=\"color: #a020f0;\">_</span> value <span style=\"color: #a0522d;\">=</span>
    <span style=\"color: #a020f0;\">let</span> tbl <span style=\"color: #a0522d;\">=</span> zip <span style=\"color: #8b2252;\">\"23456789TJQKA\"</span> [<span style=\"color: #228b22;\">Two</span> <span style=\"color: #a0522d;\">..</span> <span style=\"color: #228b22;\">Ace</span>]
    <span style=\"color: #a020f0;\">in</span> <span style=\"color: #a020f0;\">case</span> lookup (head value) tbl <span style=\"color: #a020f0;\">of</span>
      <span style=\"color: #228b22;\">Just</span> val <span style=\"color: #a0522d;\">-&gt;</span> [(val, tail value)]
      <span style=\"color: #228b22;\">Nothing</span> <span style=\"color: #a0522d;\">-&gt;</span> error <span style=\"color: #a0522d;\">$</span> <span style=\"color: #8b2252;\">\"\\nInvalid rank: \"</span> <span style=\"color: #a0522d;\">++</span> value

<span style=\"color: #a020f0;\">data</span> <span style=\"color: #228b22;\">Suit</span> <span style=\"color: #a0522d;\">=</span> <span style=\"color: #228b22;\">H</span> <span style=\"color: #a0522d;\">|</span> <span style=\"color: #228b22;\">C</span> <span style=\"color: #a0522d;\">|</span> <span style=\"color: #228b22;\">D</span> <span style=\"color: #a0522d;\">|</span> <span style=\"color: #228b22;\">S</span> <span style=\"color: #a020f0;\">deriving</span> (<span style=\"color: #228b22;\">Eq</span>, <span style=\"color: #228b22;\">Ord</span>, <span style=\"color: #228b22;\">Show</span>, <span style=\"color: #228b22;\">Read</span>)

<span style=\"color: #a020f0;\">data</span> <span style=\"color: #228b22;\">Card</span> <span style=\"color: #a0522d;\">=</span> <span style=\"color: #228b22;\">Card</span> { rank <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">Rank</span>, suit <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">Suit</span> } <span style=\"color: #a020f0;\">deriving</span> (<span style=\"color: #228b22;\">Eq</span>, <span style=\"color: #228b22;\">Ord</span>, <span style=\"color: #228b22;\">Show</span>)

<span style=\"color: #a020f0;\">instance</span> <span style=\"color: #228b22;\">Read</span> <span style=\"color: #228b22;\">Card</span> <span style=\"color: #a020f0;\">where</span>
  readsPrec <span style=\"color: #a020f0;\">_</span> value <span style=\"color: #a0522d;\">=</span>    
    [(<span style=\"color: #228b22;\">Card</span> (read r <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">Rank</span>) (read s <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">Suit</span>), drop 2 value)]
    <span style=\"color: #a020f0;\">where</span> r <span style=\"color: #a0522d;\">=</span> init value
          s <span style=\"color: #a0522d;\">=</span> snd <span style=\"color: #a0522d;\">$</span> splitAt (length r) value
          
<span style=\"color: #a020f0;\">data</span> <span style=\"color: #228b22;\">Hand</span> <span style=\"color: #a0522d;\">=</span> <span style=\"color: #228b22;\">Hand</span> { handRank <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">HandRank</span>, cards <span style=\"color: #a0522d;\">::</span> [<span style=\"color: #228b22;\">Card</span>] } 
          <span style=\"color: #a020f0;\">deriving</span> (<span style=\"color: #228b22;\">Eq</span>, <span style=\"color: #228b22;\">Show</span>, <span style=\"color: #228b22;\">Ord</span>)

<span style=\"color: #a020f0;\">instance</span> <span style=\"color: #228b22;\">Read</span> <span style=\"color: #228b22;\">Hand</span> <span style=\"color: #a020f0;\">where</span>
  readsPrec <span style=\"color: #a020f0;\">_</span> value <span style=\"color: #a0522d;\">=</span>
    [(<span style=\"color: #228b22;\">Hand</span> (getHandRank res) res, <span style=\"color: #8b2252;\">\"\"</span>)]
    <span style=\"color: #a020f0;\">where</span> res <span style=\"color: #a0522d;\">=</span> reverse <span style=\"color: #a0522d;\">.</span> sort <span style=\"color: #a0522d;\">.</span> map read <span style=\"color: #a0522d;\">$</span> words value <span style=\"color: #a0522d;\">::</span> [<span style=\"color: #228b22;\">Card</span>]

<span style=\"color: #a020f0;\">data</span> <span style=\"color: #228b22;\">HandRank</span> <span style=\"color: #a0522d;\">=</span> <span style=\"color: #228b22;\">HighCard</span> [<span style=\"color: #228b22;\">Rank</span>] 
              <span style=\"color: #a0522d;\">|</span> <span style=\"color: #228b22;\">Pair</span> [<span style=\"color: #228b22;\">Rank</span>]
              <span style=\"color: #a0522d;\">|</span> <span style=\"color: #228b22;\">TwoPair</span> [<span style=\"color: #228b22;\">Rank</span>]
              <span style=\"color: #a0522d;\">|</span> <span style=\"color: #228b22;\">ThreeOfAKind</span> [<span style=\"color: #228b22;\">Rank</span>]
              <span style=\"color: #a0522d;\">|</span> <span style=\"color: #228b22;\">Straight</span> [<span style=\"color: #228b22;\">Rank</span>]
              <span style=\"color: #a0522d;\">|</span> <span style=\"color: #228b22;\">Flush</span> [<span style=\"color: #228b22;\">Rank</span>]
              <span style=\"color: #a0522d;\">|</span> <span style=\"color: #228b22;\">FullHouse</span> [<span style=\"color: #228b22;\">Rank</span>] 
              <span style=\"color: #a0522d;\">|</span> <span style=\"color: #228b22;\">FourOfAKind</span> [<span style=\"color: #228b22;\">Rank</span>] 
              <span style=\"color: #a0522d;\">|</span> <span style=\"color: #228b22;\">StraightFlush</span> [<span style=\"color: #228b22;\">Rank</span>]
              <span style=\"color: #a020f0;\">deriving</span> (<span style=\"color: #228b22;\">Eq</span>, <span style=\"color: #228b22;\">Ord</span>, <span style=\"color: #228b22;\">Show</span>)

<span style=\"color: #0000ff;\">isFlush</span> <span style=\"color: #a0522d;\">::</span> [<span style=\"color: #228b22;\">Card</span>] <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Bool</span>
<span style=\"color: #0000ff;\">isFlush</span> cards <span style=\"color: #a0522d;\">=</span> (1<span style=\"color: #a0522d;\">==</span>) <span style=\"color: #a0522d;\">.</span> length <span style=\"color: #a0522d;\">.</span> group <span style=\"color: #a0522d;\">$</span> map suit cards

<span style=\"color: #0000ff;\">isStraight</span> <span style=\"color: #a0522d;\">::</span> [<span style=\"color: #228b22;\">Card</span>] <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Bool</span>
<span style=\"color: #0000ff;\">isStraight</span> cards <span style=\"color: #a0522d;\">=</span> 
  <span style=\"color: #a020f0;\">let</span> rs <span style=\"color: #a0522d;\">=</span> sort <span style=\"color: #a0522d;\">$</span> map rank cards
      run <span style=\"color: #a0522d;\">=</span> [(head rs) <span style=\"color: #a0522d;\">..</span> (last rs)]
  <span style=\"color: #a020f0;\">in</span> rs <span style=\"color: #a0522d;\">==</span> run

<span style=\"color: #0000ff;\">getHandRank</span> cards <span style=\"color: #a0522d;\">=</span>
  <span style=\"color: #a020f0;\">let</span> ranks <span style=\"color: #a0522d;\">=</span> reverse <span style=\"color: #a0522d;\">.</span> sort <span style=\"color: #a0522d;\">$</span> map rank cards
      uniqueRanks <span style=\"color: #a0522d;\">=</span> nub ranks
      rankGroups <span style=\"color: #a0522d;\">=</span> sortByLen <span style=\"color: #a0522d;\">$</span> group ranks
      handRank <span style=\"color: #a0522d;\">=</span> <span style=\"color: #a020f0;\">case</span> cards <span style=\"color: #a020f0;\">of</span>
        <span style=\"color: #a020f0;\">_</span> <span style=\"color: #a0522d;\">|</span> (isFlush cards) <span style=\"color: #a0522d;\">&amp;&amp;</span> (isStraight cards)  <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">StraightFlush</span>
          <span style=\"color: #a0522d;\">|</span> has4 rankGroups                        <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">FourOfAKind</span>
          <span style=\"color: #a0522d;\">|</span> (has3 rankGroups) <span style=\"color: #a0522d;\">&amp;&amp;</span> (has2 rankGroups) <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">FullHouse</span>
          <span style=\"color: #a0522d;\">|</span> isFlush cards                          <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Flush</span>
          <span style=\"color: #a0522d;\">|</span> isStraight cards                       <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Straight</span>
          <span style=\"color: #a0522d;\">|</span> has3 rankGroups                        <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">ThreeOfAKind</span> 
          <span style=\"color: #a0522d;\">|</span> (countGroupsOf 2 rankGroups) <span style=\"color: #a0522d;\">==</span> 2      <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">TwoPair</span>
          <span style=\"color: #a0522d;\">|</span> has2 rankGroups                        <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Pair</span>
          <span style=\"color: #a0522d;\">|</span> otherwise                              <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">HighCard</span>
  <span style=\"color: #a020f0;\">in</span> handRank uniqueRanks

<span style=\"color: #b22222;\">--</span><span style=\"color: #b22222;\">-----------------------------
</span><span style=\"color: #b22222;\">-- </span><span style=\"color: #b22222;\">General Utility Functions --
</span><span style=\"color: #b22222;\">--</span><span style=\"color: #b22222;\">-----------------------------
</span><span style=\"color: #0000ff;\">hasGroupOf</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">Int</span> <span style=\"color: #a0522d;\">-&gt;</span> [[a]] <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Bool</span>
<span style=\"color: #0000ff;\">hasGroupOf</span> n groups <span style=\"color: #a0522d;\">=</span> n <span style=\"color: #a0522d;\">`elem`</span> (map length groups)
<span style=\"color: #0000ff;\">has4</span> <span style=\"color: #a0522d;\">=</span> hasGroupOf 4
<span style=\"color: #0000ff;\">has3</span> <span style=\"color: #a0522d;\">=</span> hasGroupOf 3
<span style=\"color: #0000ff;\">has2</span> <span style=\"color: #a0522d;\">=</span> hasGroupOf 2

<span style=\"color: #0000ff;\">countGroupsOf</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">Int</span> <span style=\"color: #a0522d;\">-&gt;</span> [[a]] <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Int</span>
<span style=\"color: #0000ff;\">countGroupsOf</span> n groups <span style=\"color: #a0522d;\">=</span> length <span style=\"color: #a0522d;\">$</span> filter (<span style=\"color: #a0522d;\">\\</span>g <span style=\"color: #a0522d;\">-&gt;</span> length g <span style=\"color: #a0522d;\">==</span> n) groups

<span style=\"color: #0000ff;\">sortByLen</span> <span style=\"color: #a0522d;\">::</span> [[a]] <span style=\"color: #a0522d;\">-&gt;</span> [[a]]
<span style=\"color: #0000ff;\">sortByLen</span> <span style=\"color: #a0522d;\">=</span> sortBy (flip <span style=\"color: #a0522d;\">$</span> comparing length)</pre>

<p>Haskell is... odd. It's up there in the language bar because I poke at it rather vigorously with some frequency, but I've yet to do anything serious with it. I like it, but I always get the feeling that it doesn't like me very much.</p>

<p>This one took me a while. I'd bet it was between three and four hours. First, re-reading some of the documentation I'd already gone through as a refresher, then going through a bunch of reference docs to find particular function names<a href=\"#foot-Tue-Aug-28-183200EDT-2012\" name=\"note-Tue-Aug-28-183200EDT-2012\">[7]</a>, and finally writing the actual program.</p>

<p>It contains a few lines more than the Common Lisp solution, and about 20 more than the Clojure piece, but I'll cut it some slack for two reasons in this case. First, because those type signatures and declarations effectively replace between 90% and 95% of those boring test cases I mentioned. And second, because unlike the Lisp approaches, this one is complete apart from printing the output and one piece of input procedure.</p>

<p>That is, if you hand it a pair of hand strings and run <code>compare</code>, you'll get back the correct answer, down to the last tie breaker<a href=\"#foot-Tue-Aug-28-183206EDT-2012\" name=\"note-Tue-Aug-28-183206EDT-2012\">[8]</a>.</p>

<p>I use <code>instance Read</code> to declare readers for <code>Rank</code>, just but derive <code>Read</code> on <code>Suit</code> outright. Those two compose to let us read <code>Card</code>s and <code>Hand</code>s as well. All of these types derive <code>Ord</code>, because the whole point is sorting them, and rank also derives <code>Bounded</code> and <code>Enum</code> so that I have an easier time of expressing a range of cards.</p>

<p>Once all the types are declared, the rest of the program just kind of falls out. You can see more or less the same <code>flush</code> and <code>straight</code> detectors, and even the same structure in <code>getHandRank</code> (except that it's named differently).</p>

<p>What you don't see is any boilerplate surrounding hand comparisons. Or, in fact, any comparison functions at all. We <i>sort</i> cards twice<a href=\"#foot-Tue-Aug-28-183224EDT-2012\" name=\"note-Tue-Aug-28-183224EDT-2012\">[9]</a>, but that's it. Because those types are defined deriving among other things <code>Ord</code>, you can use all the standard comparison operators to do the rest.</p>

<p>I was going to say a few proper words comparing the approaches and languages here, but this piece is already quite a bit longer than I'd like it to be. It'll have to wait for next time<a href=\"#foot-Tue-Aug-28-183322EDT-2012\" name=\"note-Tue-Aug-28-183322EDT-2012\">[10]</a>.</p>

<hr />
<h5>Footnotes</h5>
<p>1 - <a href=\"#note-Tue-Aug-28-182259EDT-2012\" name=\"foot-Tue-Aug-28-182259EDT-2012\">[back]</a> - Heads up if you were planning on joining us, by the way, they're holding <a href=\"http://www.meetup.com/Toronto-Coding-Dojo/polls/620482/\">a poll</a> on what day next weeks' meeting should be held. If you weren't there yet, and your reason was \"I'm not free that day\", you may want to give your opinion a voice.</p>

<p>2 - <a href=\"#note-Tue-Aug-28-182537EDT-2012\" name=\"foot-Tue-Aug-28-182537EDT-2012\">[back]</a> - There's also a bit of incidental complexity around displaying the winners after that, that I'll ignore for now.</p>

<p>3 - <a href=\"#note-Tue-Aug-28-182701EDT-2012\" name=\"foot-Tue-Aug-28-182701EDT-2012\">[back]</a> - It's what I'm comfortable with. Also, note that all these tries were written before I started writing this post, so they have less thought in them than they otherwise might.</p>

<p>4 - <a href=\"#note-Tue-Aug-28-182849EDT-2012\" name=\"foot-Tue-Aug-28-182849EDT-2012\">[back]</a> - I only implemented one direction, since the problem at hand doesn't call for more.</p>

<p>5 - <a href=\"#note-Tue-Aug-28-183106EDT-2012\" name=\"foot-Tue-Aug-28-183106EDT-2012\">[back]</a> - As seen in that <code>group-by</code> call in <code>hand-type</code>.</p>

<p>6 - <a href=\"#note-Tue-Aug-28-183114EDT-2012\" name=\"foot-Tue-Aug-28-183114EDT-2012\">[back]</a> - As seen in <code>group-of?</code>, <code>count-sets-of</code> and probably a couple of other places.</p>

<p>7 - <a href=\"#note-Tue-Aug-28-183200EDT-2012\" name=\"foot-Tue-Aug-28-183200EDT-2012\">[back]</a> - Hoogle helps immensely once you get your head around the type system, but I'd really like to have access to it on my local machine, along with proper auto-completion and type signature hinting.</p>

<p>8 - <a href=\"#note-Tue-Aug-28-183206EDT-2012\" name=\"foot-Tue-Aug-28-183206EDT-2012\">[back]</a> - Just as an aside though, I have no idea what order suits are actually supposed to go in, so I arbitrarily picked <code>H | C | D | S</code>, even though that's almost certainly wrong. Don't hold that against the program, or the tools, that's just me being a not poker player.</p>

<p>9 - <a href=\"#note-Tue-Aug-28-183224EDT-2012\" name=\"foot-Tue-Aug-28-183224EDT-2012\">[back]</a> - And sort groups of cards once.</p>

<p>10 - <a href=\"#note-Tue-Aug-28-183322EDT-2012\" name=\"foot-Tue-Aug-28-183322EDT-2012\">[back]</a> - Probably <i>after</i> I finish up my thoughts about authentication.</p>
"))
((5202 3723 590782000) :INSERT (100 :POSTED 3555115200))
((5202 3723 590784000) :INSERT (100 :TAG :CLOJURE))
((5202 3723 590785000) :INSERT (100 :TAG :COMMON-LISP))
((5202 3723 590787000) :INSERT (100 :TAG :HASKELL))
((5202 3723 590988000) :INSERT (101 :TITLE "Environments and Tradeoffs"))
((5202 3723 590993000) :INSERT (101 :FILE "environments-and-tradeoffs.html"))
((5202 3723 590995000) :INSERT (101 :EDITED 3610022331))
((5202 3723 590997000) :INSERT
 (101 :BODY
  "<p>I hit up <a href=\"http://www.meetup.com/Toronto-Coding-Dojo/events/calendar/\">the Coding Dojo</a> again this week, and we switched it up a little bit.</p>

<p>This time, we decided to split into two groups; one using Emacs<a href=\"#foot-Fri-Aug-31-105639EDT-2012\" name=\"note-Fri-Aug-31-105639EDT-2012\">[1]</a> and one using a simple, OS X editor.</p>

<p>Yes, I already pointed out what a bad idea this was, but to no avail. We have at least one person there who really <i>really</i> wants to use Emacs, so that's that I guess. Anyway, given that the group has its share of <code>vim</code> users, and its share of various IDE users, we were bound to get into a ribbing match by the end.</p>

<p>I may or may not have referred to the OS X setup as \"Lowest Common Denominator\", and then had to explain that I didn't mean it in a bad way. That told me that there's another part of my internal state that I assume is common knowledge, but may not be. If this <i>is</i> already part of your experience, you'll know within the next two sentences or so, and at that point you can skip the rest of the article knowing you're not missing much.</p>

<p>Here's the trade-off you make when you choose your environment, or customize it, or (if you're really hardcore) build your own: <b>ease-of-use</b> vs. <b>worth-learning</b>. That's <b><i>NOT</i></b> a fancy way of saying <code><span style=\"color: #8b2252;\">\"you fuckers are lazy for not learning </span><span style=\"color: #a0522d;\">#{my_editor}</span><span style=\"color: #8b2252;\">\"</span></code>. There's an actual trade there.</p>

<h3>Ease of Use</h3>

<p>When you sit down at this environment, it will be easy to pick up. You may need to learn one or two new keystrokes, and you may need to toggle one or two options to make it a bit comfortable. You will never have it explode on you. You'll never have to make use of its built-in auto-debugger, which it probably doesn't have, because it doesn't ship with the source code.</p>

<p>You'll also never really bend it to your will, which means that you won't be coding as fast as you can possibly be coding. You'll need to make peace with the fact that it just plain won't let you do certain things, or force you to do certain repetitive things manually, and that you'll need to use external tools for certain pieces of your workflow. Assuming you choose to live with it.</p>

<h3>Worth Learning</h3>

<p>You can not pick up this environment in a day or two. It will take you weeks or months. It has substantially different keybindings than general-purpose editors because it is or includes a <i>special</i>-purpose editor. You need to go through a lot of configuration before you get it feeling just right. You may need to change your keyboard layout slightly, and/or write up a few custom modules. You <i>will</i> see the debugger, and you will say \"Thank fucking god that I have access to this\", because you will <i>need</i> it.</p>

<p>You will likely be able to pull source code for it, and it will likely have its own modification language/framework<a href=\"#foot-Fri-Aug-31-110008EDT-2012\" name=\"note-Fri-Aug-31-110008EDT-2012\">[2]</a></p>

<p>In the long run, it will make you much more productive. <i>Noticeably</i> more productive. You will show someone how you work, and their reaction will be \"How the hell did you do that?\".</p>

<h3>Where It Matters</h3>

<p>If you're a professional programmer, and actually want to be effective at it, I'd argue that it's a mistake not to pick the second option for your solo programming time. Note that this <i>doesn't</i> mean \"pick Emacs\". I did, but that's mainly because of the languages I use. <a href=\"https://en.wikipedia.org/wiki/Vi\">vi</a>/<a href=\"http://www.vim.org/\">vim</a>, <a href=\"http://eclipse.org/\">Eclipse</a>, <a href=\"http://leksah.org/\">leksah</a>, <a href=\"http://www.jedit.org/\">jEdit</a>, or whatever might make as much sense for you. <a href=\"http://projects.gnome.org/gedit/\">Gedit</a>, or <a href=\"http://www.notepad-plus-plus.org/\">Notepad++</a> or similar doesn't cut it here. And if there are any mutants out there coding in Word or something, just stay away from me, because I will not be able to veil my contempt.</p>

<p>The reason it makes sense there is that you're the only one whose effectiveness you need to worry about maximizing. That means that you can optimize the hell out of it without regard for the learning curve, or the portability<a href=\"#foot-Fri-Aug-31-111326EDT-2012\" name=\"note-Fri-Aug-31-111326EDT-2012\">[3]</a>.</p>

<p>Now, on the flipside to the standard solo coding activity where your Worth Learning©™ environment should dominate, are use cases like pair programming. Or, oh, I dunno, Coding Dojos.</p>

<p>You do not want the same things in that situation.</p>

<p>First, you're not trying to maximize your own throughput, but the throughput of the group. It is a sub-optimal outcome if one of you can hit 10 lines per minute, and the rest can't even get to one. That means you have two options</p>

<ul>
  <li>Set up a standardized environment that everyone in the group agrees to, send out a setup script for whatever platform, and have everyone practice outside of the event</li>
  <li>Set up a minimal environment with a very short learning curve so that everyone can pick it up without practice, and go back to their own customized environments otherwise</li>
</ul>

<p>This is why I'm against using Emacs for physical, social coding unless it's with a complete group of Emacs users. You'll be handicapping some people pretty severely for no relevant benefit. In fact, unless you set up the vanilla Emacs distro, you'll be handicapping <b>everyone</b> for no relevant benefit, because every Emacs setup tends to be set up in its own way.</p>

<p>So yeah. \"Lowest Common Denominator\" is what you want here.</p>

<hr />
<h5>Footnotes</h5>
<p>1 - <a href=\"#note-Fri-Aug-31-105639EDT-2012\" name=\"foot-Fri-Aug-31-105639EDT-2012\">[back]</a> - On GNU/Linux, but this is incidental; I put together the Emacs environment on my machine, and I happen to be a Debian user. We never used anything <i>other</i> than Emacs, so the fact that I use a Tiling WM never really came up.</p>

<p>2 - <a href=\"#note-Fri-Aug-31-110008EDT-2012\" name=\"foot-Fri-Aug-31-110008EDT-2012\">[back]</a> - <i>Good</i> language and framework optional; Elisp seems to be at the upper end of the curve these days, and it's not a particularly stellar language. Lack of namespace management gets pretty annoying after a while.</p>

<p>3 - <a href=\"#note-Fri-Aug-31-111326EDT-2012\" name=\"foot-Fri-Aug-31-111326EDT-2012\">[back]</a> - Though you probably should keep a setup script somewhere to make it easier for yourself to re-install if necessary.</p>
   "))
((5202 3723 591052000) :INSERT (101 :POSTED 3555374400))
((5202 3723 591054000) :INSERT (101 :TAG :GENERAL-PROGRAMMING-THOUGHTS))
((5202 3723 591055000) :INSERT (101 :TAG :PROGRAMMING-ENVIRONMENT))
((5202 3723 591253000) :INSERT (102 :TITLE "Setting Up Haskell"))
((5202 3723 591258000) :INSERT (102 :FILE "setting-up-haskell.html"))
((5202 3723 591260000) :INSERT (102 :EDITED 3610022331))
((5202 3723 591262000) :INSERT
 (102 :BODY "<p><b>TL;DR</b></p>

<pre>su -c apt-get install haskell-platform haskell-mode hlint

emacs -nw ~/.cabal/config
### make sure that `-- documentation: True` and `-- library-profiling: True`

cabal install hoogle
~/.cabal/bin/hoogle data
cabal install hasktags
git clone git://github.com/nominolo/scion.git
cd scion
cabal install</pre>

<p>Then go configure your <code>.emacs</code> properly. There; I just saved you some long, tedious, boobless hours.</p>

<h3>The Basics</h3>

<p>Installing Haskell itself is extremely easy, assuming you're on a relatively recent version of Debian.</p>

<pre>apt-get install haskell-platform</pre>

<p>should handle that nicely. That will install <code>ghc</code> (the Haskell compiler), <code>ghci</code> (the Haskell interpreter) and <code>cabal</code> (the Haskell package manager). Ok, now before you install <i>anything</i> else, hop into your favorite editor, open up <code>~/.cabal/config</code> and change the options <code>-- library-profiling:</code> and <code>-- documentation:</code> to <code>True</code>. These both default to false, but having them on is preferable for the development process.</p>

<p>The <code>documentation</code> flag isn't critical, just nice. It gives you some extra local docs with the libraries it downloads. I'm honestly surprised that <code>profiling</code> isn't on by default though. You just plain <i>can't</i> profile without it. If you try, you get an error telling you to install the <code>profiling</code> versions of all relevant libraries. Here's the kicker though; if you try to install profiling libraries yourself from <code>cabal</code> by using the <code>-p</code> flag, <b>it <a href=\"http://stackoverflow.com/questions/1704421/cabal-not-installing-dependencies-when-needing-profiling-libraries\">does not resolve dependencies</a></b>. That means you get to go back through all the libraries you installed, and re-install them recursively by hand. If you do it through the <code>config</code> option I mention above, it's automatically done for you whenever you install a new library. Which seems, I dunno, a <i>bit</i> better<a href=\"#foot-Mon-Sep-17-225932EDT-2012\" name=\"note-Mon-Sep-17-225932EDT-2012\">[1]</a>.</p>

<h3>The Docs</h3>

<p>I previously mentioned that <a href=\"http://www.haskell.org/hoogle/\">hoogle</a> is really useful, but that what you'd really want is a local copy you could search without hitting a server. Well, there is. It's a cabal package you can install with</p>

<pre>cabal install hoogle
hoogle data ## you may need to run the hoogle binary directly with \"~/.cabal/bin/hoogle\" instead of \"hoogle\"</pre>

<p>That second command will make a local copy of the hoogle database for you. You can then use it to do a text search, like <code>hoogle map</code>, or a type signature search like <code>hoogle \"(Ord a) =&gt; [a] -&gt; [a]<span style=\"color: #8b2252;\">\"</span></code>. That will give you a long list of results matching your query. You can also use <code>hoogle --info [search term]</code> to display the documentation of the first result, rather than a list of results.</p>

<p>Boy, it sure would be nice to have that available from your editor, huh?</p>

<h3>The Editor</h3>

<p>If you're not an Emacs user, and are used to indenting things by hand (shudder), pick up <a href=\"http://leksah.org/\">leksah</a> and be done with it. It's pretty cool, supports incremental compilation out of the box, has some small measure of project management, and performs pretty well. If you're like me, and have gotten used to Emacs handling the tedium of indentation<a href=\"#foot-Mon-Sep-17-230239EDT-2012\" name=\"note-Mon-Sep-17-230239EDT-2012\">[2]</a>, you'll want a better solution.</p>

<p>The <a href=\"http://projects.haskell.org/haskellmode-emacs/\">default Haskell mode</a> is available <a href=\"http://projects.haskell.org/haskellmode-emacs/\">standalone</a> or from <a href=\"http://packages.debian.org/squeeze/haskell-mode\">the Debian repos</a>. There are apparently some non-obvious config tweaks to make with the standalone version which were done for you in the Debian package, so use the <code>apt-get</code> option if you can.</p>

<p>You'll also want to install <a href=\"https://github.com/nominolo/scion\">Scion</a>, which will give you type hints in the minibuffer. Ostensibly, it also gives you goto-definition, and a couple of other small convenience facilities, but I've yet to get that working properly<a href=\"#foot-Mon-Sep-17-230827EDT-2012\" name=\"note-Mon-Sep-17-230827EDT-2012\">[3]</a>. Actually do a <code>git clone</code> of that github and install it manually, by the way. The version in <code>cabal</code> has some dependency oddities that kept it from installing properly on my machine. YMMV, as always.</p>

<p>The last thing I ended up doing, though you may want to stick with the defaults, is <a href=\"https://github.com/Inaimathi/emacs-utils/blob/master/ha-custom.el\">wire up some extra keybindings</a> for <code>hlint</code><a href=\"#foot-Mon-Sep-17-231408EDT-2012\" name=\"note-Mon-Sep-17-231408EDT-2012\">[4]</a> and hoogle<a href=\"#foot-Mon-Sep-17-231413EDT-2012\" name=\"note-Mon-Sep-17-231413EDT-2012\">[5]</a>.</p>

<p>And that's how you set up a Haskell environment. Or, at least, that's how I did. Hopefully, I can now start building some cool things with it.</p>

<hr />
<h5>Footnotes</h5>
<p>1 - <a href=\"#note-Mon-Sep-17-225932EDT-2012\" name=\"foot-Mon-Sep-17-225932EDT-2012\">[back]</a> - It's particularly odd when dealing with a fully lazy language, because it seems like that property would make it very difficult to reason about performance a priori. I may talk about that at some point in the future, but you're probably better off reading <a href=\"https://existentialtype.wordpress.com/2012/08/26/yet-another-reason-not-to-be-lazy-or-imperative/\">what Robert Harper says about it</a>.</p>

<p>2 - <a href=\"#note-Mon-Sep-17-230239EDT-2012\" name=\"foot-Mon-Sep-17-230239EDT-2012\">[back]</a> - Especially in languages with significant whitespace like Haskell.</p>

<p>3 - <a href=\"#note-Mon-Sep-17-230827EDT-2012\" name=\"foot-Mon-Sep-17-230827EDT-2012\">[back]</a> - I use <a href=\"https://github.com/Inaimathi/emacs-utils/blob/master/tagariffic.el\">my own</a> anyway.</p>

<p>4 - <a href=\"#note-Mon-Sep-17-231408EDT-2012\" name=\"foot-Mon-Sep-17-231408EDT-2012\">[back]</a> - Inspired by <a href=\"https://gist.github.com/1241059\">this gist by Sam Ritchie</a>.</p>
<p>5 - <a href=\"#note-Mon-Sep-17-231413EDT-2012\" name=\"foot-Mon-Sep-17-231413EDT-2012\">[back]</a> - Not really inspired by anything, but extending the default <code>haskell-mode</code> functionality which only lets you do the initial documentation search, rather than viewing.</p>
"))
((5202 3723 591316000) :INSERT (102 :POSTED 3556843200))
((5202 3723 591317000) :INSERT (102 :TAG :EMACS))
((5202 3723 591319000) :INSERT (102 :TAG :HASKELL))
((5202 3723 591321000) :INSERT (102 :TAG :PROGRAMMING-ENVIRONMENT))
((5202 3723 591798000) :INSERT (103 :TITLE "JS Frameworks"))
((5202 3723 591803000) :INSERT (103 :FILE "js-frameworks.html"))
((5202 3723 591805000) :INSERT (103 :EDITED 3610299388))
((5202 3723 591807000) :INSERT
 (103 :BODY
  "<p>So I've spent the past week or so working through some examples with the various <a href=\"http://codebrief.com/2012/01/the-top-10-javascript-mvc-frameworks-reviewed/\">JavaScript MVC front-end frameworks</a>. Let me save you the trouble: they're all shit. If you absolutely, positively can not live without a framework of some sort, use <a href=\"http://backbonejs.org/\">Backbone</a> or <a href=\"http://spinejs.com/\">Spine</a><a href=\"#foot-Sun-Sep-23-214748EDT-2012\" name=\"note-Sun-Sep-23-214748EDT-2012\">[1]</a>, because they seem to be as close to \"minimal\" as you can get, they won't get in your way too much, they help a little, and it's perfectly possible to run them alongside <a href=\"http://jquery.com/\">jQuery</a> or similar if you feel like rolling certain pieces on your own.</p>

<p>While they do <i>get</i> in your way, the Javascript MVC movement is getting a couple of things profoundly right. Things I didn't really notice, or didn't think through all the way in the past, so I'm kind of shamefaced about having missed them, but they definitely seem like the <i>right</i> approach<a href=\"#foot-Sun-Sep-23-214859EDT-2012\" name=\"note-Sun-Sep-23-214859EDT-2012\">[2]</a>. The reason I say</p>

<blockquote>[The frameworks are] all shit <span class=\"sig\">-me</span></blockquote>

<p>above is that none of them seem to be necessary to do the Right Thing©™<a href=\"#foot-Sun-Sep-23-214921EDT-2012\" name=\"note-Sun-Sep-23-214921EDT-2012\">[3]</a>, and none of them seem to help much with the big detriments of the approach.</p>

<h3>Anecdote Time</h3>

<p>Being that I haven't put a large project together with any of these techniques yet, this is the only example I'm willing to show, but it is illustrative. So I had a particular place where I needed to reorder pieces of information on the client side, then send them out to the server for persistence. Luckily, I was <a href=\"http://stackoverflow.com/questions/10147969/saving-jquery-ui-sortables-order-to-backbone-js-collection\">not the only one</a> who had this problem and thought of using backbone to do it. Here's <a href=\"http://jsfiddle.net/7X4PX/4/\">the solution recommended in that question</a>:</p>

<pre>Application = {};
Application.Collection = {};
Application.Model = {};
Application.View = {};

Application.Model.Item = Backbone.Model.extend();
Application.View.Item = Backbone.View.extend({
    tagName: <span style=\"color: #8b2252;\">'li'</span>,
    className: <span style=\"color: #8b2252;\">'item-view'</span>,
    events: {
        <span style=\"color: #8b2252;\">'drop'</span> : <span style=\"color: #8b2252;\">'drop'</span>
    },
    <span style=\"color: #0000ff;\">drop</span>: <span style=\"color: #a020f0;\">function</span>(<span style=\"color: #a0522d;\">event</span>, <span style=\"color: #a0522d;\">index</span>) {
        <span style=\"color: #008b8b;\">this</span>.$el.trigger(<span style=\"color: #8b2252;\">'update-sort'</span>, [<span style=\"color: #008b8b;\">this</span>.model, index]);
    },
    <span style=\"color: #0000ff;\">render</span>: <span style=\"color: #a020f0;\">function</span>() {
        $(<span style=\"color: #008b8b;\">this</span>.el).html(<span style=\"color: #008b8b;\">this</span>.model.get(<span style=\"color: #8b2252;\">'name'</span>) + <span style=\"color: #8b2252;\">' ('</span> + <span style=\"color: #008b8b;\">this</span>.model.get(<span style=\"color: #8b2252;\">'id'</span>) + <span style=\"color: #8b2252;\">')'</span>);
        <span style=\"color: #a020f0;\">return</span> <span style=\"color: #008b8b;\">this</span>;
    }
});
Application.Collection.Items = Backbone.Collection.extend({
    model: Application.Model.Item,
    <span style=\"color: #0000ff;\">comparator</span>: <span style=\"color: #a020f0;\">function</span>(<span style=\"color: #a0522d;\">model</span>) {
        <span style=\"color: #a020f0;\">return</span> model.get(<span style=\"color: #8b2252;\">'ordinal'</span>);
    },
});
Application.View.Items = Backbone.View.extend({
    events: {
        <span style=\"color: #8b2252;\">'update-sort'</span>: <span style=\"color: #8b2252;\">'updateSort'</span>
    },
    <span style=\"color: #0000ff;\">render</span>: <span style=\"color: #a020f0;\">function</span>() {
        <span style=\"color: #008b8b;\">this</span>.$el.children().remove();
        <span style=\"color: #008b8b;\">this</span>.collection.each(<span style=\"color: #008b8b;\">this</span>.appendModelView, <span style=\"color: #008b8b;\">this</span>);
        <span style=\"color: #a020f0;\">return</span> <span style=\"color: #008b8b;\">this</span>;
    },
    <span style=\"color: #0000ff;\">appendModelView</span>: <span style=\"color: #a020f0;\">function</span>(<span style=\"color: #a0522d;\">model</span>) {
        <span style=\"color: #a020f0;\">var</span> <span style=\"color: #a0522d;\">el</span> = <span style=\"color: #a020f0;\">new</span> <span style=\"color: #228b22;\">Application.View.Item</span>({model: model}).render().el;
        <span style=\"color: #008b8b;\">this</span>.$el.append(el);
    },
    <span style=\"color: #0000ff;\">updateSort</span>: <span style=\"color: #a020f0;\">function</span>(<span style=\"color: #a0522d;\">event</span>, <span style=\"color: #a0522d;\">model</span>, <span style=\"color: #a0522d;\">position</span>) {
        <span style=\"color: #008b8b;\">this</span>.collection.remove(model);
        
        <span style=\"color: #008b8b;\">this</span>.collection.each(<span style=\"color: #a020f0;\">function</span> (<span style=\"color: #a0522d;\">model</span>, <span style=\"color: #a0522d;\">index</span>) {
            <span style=\"color: #a020f0;\">var</span> <span style=\"color: #a0522d;\">ordinal</span> = index;
            <span style=\"color: #a020f0;\">if</span> (index &gt;= position)
                ordinal += 1;
            model.set(<span style=\"color: #8b2252;\">'ordinal'</span>, ordinal);
        });

        model.set(<span style=\"color: #8b2252;\">'ordinal'</span>, position);
        <span style=\"color: #008b8b;\">this</span>.collection.add(model, {at: position});

        <span style=\"color: #b22222;\">// </span><span style=\"color: #b22222;\">to update ordinals on server:
</span>        <span style=\"color: #a020f0;\">var</span> <span style=\"color: #a0522d;\">ids</span> = <span style=\"color: #008b8b;\">this</span>.collection.pluck(<span style=\"color: #8b2252;\">'id'</span>);
        $(<span style=\"color: #8b2252;\">'#post-data'</span>).html(<span style=\"color: #8b2252;\">'post ids to server: '</span> + ids.join(<span style=\"color: #8b2252;\">', '</span>));

        <span style=\"color: #008b8b;\">this</span>.render();
    }
});

<span style=\"color: #a020f0;\">var</span> <span style=\"color: #a0522d;\">Instance</span> = {};
Instance.collection = <span style=\"color: #a020f0;\">new</span> <span style=\"color: #228b22;\">Application.Collection.Items</span>();
Instance.collection.add(<span style=\"color: #a020f0;\">new</span> <span style=\"color: #228b22;\">Application.Model.Item</span>({id: 1, name: <span style=\"color: #8b2252;\">'a'</span>, ordinal: 0}));
Instance.collection.add(<span style=\"color: #a020f0;\">new</span> <span style=\"color: #228b22;\">Application.Model.Item</span>({id: 2, name: <span style=\"color: #8b2252;\">'b'</span>, ordinal: 1}));
Instance.collection.add(<span style=\"color: #a020f0;\">new</span> <span style=\"color: #228b22;\">Application.Model.Item</span>({id: 3, name: <span style=\"color: #8b2252;\">'c'</span>, ordinal: 2}));

Instance.collectionView = <span style=\"color: #a020f0;\">new</span> <span style=\"color: #228b22;\">Application.View.Items</span>({
    el: <span style=\"color: #8b2252;\">'#collection-view'</span>,
    collection: Instance.collection
});

Instance.collectionView.render();

$(document).ready(<span style=\"color: #a020f0;\">function</span>() {
    $(<span style=\"color: #8b2252;\">'#collection-view'</span>).sortable({
        <span style=\"color: #0000ff;\">stop</span>: <span style=\"color: #a020f0;\">function</span>(<span style=\"color: #a0522d;\">event</span>, <span style=\"color: #a0522d;\">ui</span>) {
            ui.item.trigger(<span style=\"color: #8b2252;\">'drop'</span>, ui.item.index());
        }
    });
});</pre>
​
<pre><span style=\"color: #0000ff;\">#collection-view </span>{
   <span style=\"color: #a0522d;\">margin-bottom</span>: 30px;
}

<span style=\"color: #0000ff;\">.item-view </span>{
   <span style=\"color: #a0522d;\">border</span>: 1px solid black;
   <span style=\"color: #a0522d;\">margin</span>: 2px;
   <span style=\"color: #a0522d;\">padding</span>: 10px;
   <span style=\"color: #a0522d;\">width</span>: 30px;
}&#8203;</pre>

<pre>&lt;<span style=\"color: #0000ff;\">ul</span> <span style=\"color: #a0522d;\">id</span>='collection-view'&gt;&lt;/<span style=\"color: #0000ff;\">ul</span>&gt;
&lt;<span style=\"color: #0000ff;\">div</span> <span style=\"color: #a0522d;\">id</span>='post-data'&gt;&lt;/<span style=\"color: #0000ff;\">div</span>&gt;</pre>

<p>And once you have all that in place, what you can do is drag the given elements around, and have returned a set of IDs in the order that they appear on the users screen! <a href=\"https://en.wikipedia.org/wiki/Sarcasm\">Isn't that amazing!?</a> I gave it the benefit of the doubt, and tried to fit the code into my head for about half an hour before <a href=\"http://jsfiddle.net/RK2GV/2/\">I realized something</a>.</p>

<pre><span style=\"color: #a020f0;\">var</span> <span style=\"color: #a0522d;\">util</span> = {
    <span style=\"color: #0000ff;\">log</span> : <span style=\"color: #a020f0;\">function</span> (<span style=\"color: #a0522d;\">message</span>) {
 $(<span style=\"color: #8b2252;\">\"#console\"</span>).append(JSON.stringify(message)).append(<span style=\"color: #8b2252;\">\"&lt;br /&gt;\"</span>);    
    }
};

<span style=\"color: #a020f0;\">var</span> <span style=\"color: #a0522d;\">templates</span> = {
    rule : Handlebars.compile($(<span style=\"color: #8b2252;\">\"#tmp-list\"</span>).html())
}

<span style=\"color: #a020f0;\">var</span> <span style=\"color: #a0522d;\">rules</span> = {
    <span style=\"color: #0000ff;\">render</span>: <span style=\"color: #a020f0;\">function</span> (<span style=\"color: #a0522d;\">rules</span>) {
    $.each(rules, <span style=\"color: #a020f0;\">function</span> (<span style=\"color: #a0522d;\">i</span>, <span style=\"color: #a0522d;\">aRule</span>) {
        $(<span style=\"color: #8b2252;\">\"#rules-list\"</span>).append(templates.rule(aRule));
    })
    }
}

$(document).ready(<span style=\"color: #a020f0;\">function</span>() {
    rules.render([{<span style=\"color: #8b2252;\">\"id\"</span>: 1, <span style=\"color: #8b2252;\">\"name\"</span>: <span style=\"color: #8b2252;\">\"a\"</span>},
                  {<span style=\"color: #8b2252;\">\"id\"</span>: 2, <span style=\"color: #8b2252;\">\"name\"</span>: <span style=\"color: #8b2252;\">\"b\"</span>},
                  {<span style=\"color: #8b2252;\">\"id\"</span>: 3, <span style=\"color: #8b2252;\">\"name\"</span>: <span style=\"color: #8b2252;\">\"c\"</span>}]);
    $(<span style=\"color: #8b2252;\">'#rules-list'</span>).sortable({
        <span style=\"color: #0000ff;\">stop</span>: <span style=\"color: #a020f0;\">function</span>(<span style=\"color: #a0522d;\">event</span>, <span style=\"color: #a0522d;\">ui</span>) {
        <span style=\"color: #a020f0;\">var</span> <span style=\"color: #a0522d;\">ids</span> = $(<span style=\"color: #8b2252;\">\"#rules-list li\"</span>).map(<span style=\"color: #a020f0;\">function</span> (<span style=\"color: #a0522d;\">i</span>, <span style=\"color: #a0522d;\">elem</span>) {
            <span style=\"color: #a020f0;\">return</span> $(elem).find(<span style=\"color: #8b2252;\">\".id\"</span>).attr(<span style=\"color: #8b2252;\">\"title\"</span>);
        }).get();
        util.log(ids);
        }
    });
});</pre>

<pre><span style=\"color: #0000ff;\">#rules-list </span>{
    <span style=\"color: #a0522d;\">margin-bottom</span>: 30px;
}

<span style=\"color: #0000ff;\">#rules-list li</span>{    
    <span style=\"color: #a0522d;\">border</span>: 1px solid black;
    <span style=\"color: #a0522d;\">margin</span>: 5px;
    <span style=\"color: #a0522d;\">padding</span>: 7px;
    <span style=\"color: #a0522d;\">width</span>: 50px;
}</pre>

<pre>&lt;<span style=\"color: #0000ff;\">ul</span> <span style=\"color: #a0522d;\">id</span>=<span style=\"color: #8b2252;\">\"rules-list\"</span>&gt;&lt;/<span style=\"color: #0000ff;\">ul</span>&gt;
&lt;<span style=\"color: #0000ff;\">script</span> <span style=\"color: #a0522d;\">id</span>=<span style=\"color: #8b2252;\">\"tmp-list\"</span> <span style=\"color: #a0522d;\">type</span>=<span style=\"color: #8b2252;\">\"text/x-handlebars-template\"</span>&gt;
   &lt;<span style=\"color: #0000ff;\">li</span>&gt;&lt;<span style=\"color: #0000ff;\">span</span> <span style=\"color: #a0522d;\">class</span>=<span style=\"color: #8b2252;\">\"id\"</span> <span style=\"color: #a0522d;\">title</span>=<span style=\"color: #8b2252;\">\"{{id}}\"</span>&gt;&lt;/<span style=\"color: #0000ff;\">span</span>&gt;{{name}} -- {{id}}&lt;/<span style=\"color: #0000ff;\">li</span>&gt;
&lt;/<span style=\"color: #0000ff;\">script</span>&gt;
&lt;<span style=\"color: #0000ff;\">div</span> <span style=\"color: #a0522d;\">id</span>=<span style=\"color: #8b2252;\">\"console\"</span>&gt;&lt;/<span style=\"color: #0000ff;\">div</span>&gt;</pre>

<p>There. That's a solution weighing in at under half the SLOC, which gives precisely zero fucks about MVC frameworks and accomplishes the same task. Incidentally, I include <code>underscore-min.js</code> and <code>backbone-min.js</code> in that fiddle link because this was refactored from the above <a href=\"http://jsfiddle.net/7X4PX/4/\">Java-style OOP soup</a>, but I'm fairly certain that they're both unnecessary for this approach.</p>

<p>Note that I use, and wholly endorse <a href=\"http://handlebarsjs.com/\">Handlebars.js</a>, or any of the <a href=\"http://beebole.com/pure/\">similar</a> standalone <a href=\"http://ejohn.org/blog/javascript-micro-templating/\">JS templating</a> engines. I'll discuss why this is a good idea in a bit, when I clearly define the Right Thing©™, and what it implies.</p>

<h3>The Right Thing...</h3>

<p>...is separating out your front end into an entirely different application from your backend. Set them apart entirely, and have them communicate through JSON feeds and AJAX requests. It seems like an awkward thing to do principally because of how much harder it is to generate/template HTML inside of Javascript than it is <a href=\"http://weitz.de/cl-who/\">outside</a>, in <a href=\"https://github.com/weavejester/hiccup\">server-side</a> <a href=\"http://hackage.haskell.org/package/heist\">languages</a>. <code>Handlebars</code> and similar libraries provide enough of a stopgap that the separation starts looking worth while.</p>

<p>Those of you who are already network programmers, or have dabbled with <a href=\"https://en.wikipedia.org/wiki/Actor_model\">actors</a> will intuitively understand why this is good. For the rest, let me try to explain what you gain and what you lose.</p>

<h2>Bi-Directionally Agnostic Components</h2>

<p>That's just a fancy way of saying that neither the front-end nor the back end really care what's on the other side of the channel, as long as it responds to the appropriate requests with well-formatted JSON<a href=\"#foot-Sun-Sep-23-215309EDT-2012\" name=\"note-Sun-Sep-23-215309EDT-2012\">[4]</a>. That means that you could conceivably port your entire back-end without changing any client-side code if you really wanted to, or have certain requests get handled by specialized servers<a href=\"#foot-Sun-Sep-23-215334EDT-2012\" name=\"note-Sun-Sep-23-215334EDT-2012\">[5]</a>, or write multiple front-ends, or document your interfaces and let others write additional front-ends.</p>

<p>Hell, as long as it sent the right requests, and interpreted them correctly, there's no particular reason you couldn't ship a native desktop or native mobile front end that connected out to a production server this way. Decoupling project components to this extent also makes it much easier to make less radical and more controlled changes than the ones proposed above.</p>

<h2>Simpler Components</h2>

<p>Because each component can be made responsible for a particular concern, you get less code overlap. In retrospect, this has been a problem with most projects I've been on; if your server-side needs to be involved in templating, it's very tempting to \"optimize\" by having it emit ready-to-<code>$.append()</code> pieces. The problem is that these optimized pieces are harder to change later, and they sometimes require changes even when no other piece of server-side alters.</p>

<p>Doing the JSON communication thing completely tears this problem down. One end emits a series of expressions, the other consumes it. That means that your server has no involvement whatsoever in how the data is displayed to the user, and the client doesn't give a flying fuck about how it's stored on the back-end.</p>

<h2>Security Concerns</h2>

<p>One not-entirely-good part of the situation is that as soon as you decide to architect your application as a discrete set of network-communicating components, you have to solve one or two big problems that you could otherwise avoid. Specifically, you need to start dealing with throttling, <a href=\"/article?name=authentication-part4.html\">authentication</a> and network security right away, rather than leaving them for the point when you start scaling up. \"Dealing with\" doesn't necessarily mean \"building\", by the way, a legitimate choice is to make all of your handlers publicly accessible, but in that case you still need to make sure that no private information leaks out.</p>

<p>You also need to invest some thought into storage layout, since you won't necessarily be able to assume that the entire application is on the same machine.</p>

<h2>Rich Client Side</h2>

<p>This isn't necessarily a good thing. Yes there's a somewhat better interactive experience for the user, but they absolutely <i>have</i> to have JS enabled if they're frequenting your site. You can still bolt together a much simpler, pure HTML interface, but that will likely have to be an entirely separate piece if you want to keep any of the benefits of the decoupled approach. You still <i>should</i> take the approach, I think, but I wanted to note that there's a little bit more involved with supporting security-conscious users and older browsers.</p>

<h2>HTML and Javascript</h2>

<p>Barring a native front-end, you're stuck developing your client side in Javascript. The bad news is that it's Javascript. The good news is that a lot of people out there know it, and it means that your UI guys don't necessarily need to be up on their type theory or compiler concepts in order to be productive. <i>And</i> there's no reason for the back-end programmers not to use whatever language they find most productive<a href=\"#foot-Sun-Sep-23-215659EDT-2012\" name=\"note-Sun-Sep-23-215659EDT-2012\">[6]</a>.</p>

<p>You could <a href=\"http://coffeescript.org/\">Coffee Script</a> or <a href=\"http://common-lisp.net/project/parenscript/\">Parenscript</a> or <a href=\"http://clojurescriptone.com/\">Clojurescript</a> your way out of the worst of it, but any of those approaches necessarily couples you to some language or technology less common and less commonly known than Javascript. That particular tradeoff<a href=\"#foot-Sun-Sep-23-215748EDT-2012\" name=\"note-Sun-Sep-23-215748EDT-2012\">[7]</a> is a conversation I plan to have with myself another day though, lets get back on topic.</p>

<h3>What The Frameworks Do<code>(n't)?</code></h3>

<p>So back to <b>They're All Shit</b>. You'll notice that of the implications above, a framework can<a href=\"#foot-Sun-Sep-23-215819EDT-2012\" name=\"note-Sun-Sep-23-215819EDT-2012\">[8]</a> conceivably mitigate one; the security concerns. The rest of them are either inherent advantages, or inherent disadvantages so fundamentally baked into the approach that no amount of JS-based syntactic sugar <i>could</i> make a difference.</p>

<p>The one extremely annoying thing each framework seems to do is try to layer additional object hierarchies on top of the DOM; an already existing object hierarchy that perfectly expresses the <code>view</code> end of an application. You're expected to maintain a view and a model tree in addition to that. I guess some people are already used to typing reams upon reams of code to perform basic tasks? And most of them <a href=\"http://angularjs.org/\">work at Google</a>? Ok, ok, maybe that's not entirely fair. It's certainly possible that the approach allows larger applications to be put together more easily, but I'm honestly not seeing it. Having taken in tutorials for <a href=\"http://www.andymatthews.net/read/2012/03/07/Getting-Started-With-EmberJS\">Ember</a>, <a href=\"https://github.com/maccman/spine.todos\">Spine</a>, <a href=\"http://coenraets.org/blog/2011/12/backbone-js-wine-cellar-tutorial-part-1-getting-started/\">Backbone</a>, <a href=\"http://docs.angularjs.org/tutorial/\">Angular</a>, and <a href=\"http://batmanjs.org/alfred.html\">Batman</a>, the things they all have in common are:</p>

<ul>
  <li>getting a simple task done is a lot more complicated with framework code than without it</li>
  <li>components built with frameworks are <i>less composeable</i> than components built without them</li>
  <li>everyone really, <i>really</i>, <i><b>really</b></i> wants you to declare a tree of classes before you do anything</li>
</ul>

<p>It seems like all of those would add up to significantly increase complexity in a larger project, and I sort of had this goofy idea that complexity is a thing we're trying to <i>reduce</i> when we reach for library code.</p>

<p>In any case, I'm going to keep pushing straight up jQuery with Handlebars for the time being. With small, deliberate pinches of <a href=\"http://underscorejs.org/\">Underscore</a> here and there. And I'll keep an eye out for pitfalls that might be pre-resolvable using some of the approaches I've seen this week. If something pops up and kicks my ass hard enough to change my mind, I'll write a follow-up, but until then I can't honestly recommend that you go with what seems to be the flow of web development on this one.</p>


<hr />
<h5>Footnotes</h5>
<p>1 - <a href=\"#note-Sun-Sep-23-214748EDT-2012\" name=\"foot-Sun-Sep-23-214748EDT-2012\">[back]</a> - Depending on how comfortable you are with Coffee Script, and how much you hate JS. Links to both in the sidebar.</p>

<p>2 - <a href=\"#note-Sun-Sep-23-214859EDT-2012\" name=\"foot-Sun-Sep-23-214859EDT-2012\">[back]</a> - Again, I've only thrown the past week or so at this, so take that with a grain of salt.</p>

<p>3 - <a href=\"#note-Sun-Sep-23-214921EDT-2012\" name=\"foot-Sun-Sep-23-214921EDT-2012\">[back]</a> - And, in fact, seem to make it much harder, more ponderous and more complicated to do the Right Thing©™.</p>

<p>4 - <a href=\"#note-Sun-Sep-23-215309EDT-2012\" name=\"foot-Sun-Sep-23-215309EDT-2012\">[back]</a> - Or XML, or YAML, or whatever markup you end up actually using for communication. JSON seems like the right approach since it's extremely simple, and extremely easy to work with from within Javascript.</p>

<p>5 - <a href=\"#note-Sun-Sep-23-215334EDT-2012\" name=\"foot-Sun-Sep-23-215334EDT-2012\">[back]</a> - For instance, you could have most of your app written in a <a href=\"http://www.webnoir.org/\">powerful, expressive language</a> without regard for performance, but have any real-time pieces handled by <a href=\"http://yaws.hyber.org/\">a server optimized for high concurrent throughput</a>.</p>

<p>6 - <a href=\"#note-Sun-Sep-23-215659EDT-2012\" name=\"foot-Sun-Sep-23-215659EDT-2012\">[back]</a> - As long as it supports easy serialization to and from whatever data format you guys have settled on.</p>

<p>7 - <a href=\"#note-Sun-Sep-23-215748EDT-2012\" name=\"foot-Sun-Sep-23-215748EDT-2012\">[back]</a> -Number of practitioners vs. Quality of hiring pool.</p>

<p>8 - <a href=\"#note-Sun-Sep-23-215819EDT-2012\" name=\"foot-Sun-Sep-23-215819EDT-2012\">[back]</a> - This doesn't mean they <i>do</i>, incidentally; from what I've seen, none of the current JS MVCs bother making it easier to do authentication, or secure requests.</p>
           "))
((5202 3723 591996000) :INSERT (103 :POSTED 3557361600))
((5202 3723 591998000) :INSERT (103 :TAG :GENERAL-PROGRAMMING-THOUGHTS))
((5202 3723 592000000) :INSERT (103 :TAG :JAVASCRIPT))
((5202 3723 592002000) :INSERT (103 :TAG :JQUERY))
((5202 3723 592004000) :INSERT (103 :TAG :PROGRAMMING-INTERFACES))
((5202 3723 592006000) :INSERT (103 :TAG :SPECULATION))
((5202 3723 592213000) :INSERT (104 :TITLE "Pi"))
((5202 3723 592218000) :INSERT (104 :FILE "raspberry-pi.html"))
((5202 3723 592220000) :INSERT (104 :EDITED 3610312628))
((5202 3723 592267000) :INSERT
 (104 :BODY
  "<p>I haven't actually had very much time to explore it yet, but the <a href=\"http://www.raspberrypi.org/\">Raspberry Pi</a> is officially out.</p>

<img src=\"/static/img/pi-1.jpg\" class=\"middle\" alt=\"A hooked up Raspberry Pi\" />

<p>\"Officially\", because it's been sort of a running joke with my friends that it hasn't been for the past while. The <a href=\"http://www.alliedelec.com/lp/120626raso/?cm_mmc=Offline-Referral-_-Electronics-_-RaspberryPi-201203-_-World-Selector-Page\">two</a> sites <a href=\"http://downloads.element14.com/raspberryPi1.html?isRedirect=true\">that</a> sold them had \"Register your Interest\" buttons, rather than the expected \"Add To Cart\" or \"Buy Now\"<a href=\"#foot-Sun-Sep-30-225547EDT-2012\" name=\"note-Sun-Sep-30-225547EDT-2012\">[1]</a>, and while many told tales of the legendary owners of these boards, I had failed to meet one for quite a while.</p>

<p>The Pi sitting on my left knee at the moment was picked up at <a href=\"http://www.creatroninc.com/\">Creatron Inc</a> on College. It cost about $50<a href=\"#foot-Sun-Sep-30-225551EDT-2012\" name=\"note-Sun-Sep-30-225551EDT-2012\">[2]</a>, and came with nothing but the board, but I still see myself picking up a few more down the line. This first one is going to get get plugged into some of the mobile computing experiments I plan to do shortly. The next one will either replace the media center PC or my backup server, since it's lower power than either.</p>

<p>At first glance, it seems like I'm a bit late to the party, since the installation went perfectly. Got my Pi, got an SD card<a href=\"#foot-Sun-Sep-30-225556EDT-2012\" name=\"note-Sun-Sep-30-225556EDT-2012\">[3]</a>, <a href=\"http://www.raspberrypi.org/downloads\">downloaded the installation images</a><a href=\"#foot-Sun-Sep-30-225604EDT-2012\" name=\"note-Sun-Sep-30-225604EDT-2012\">[4]</a>, unzipped them, then ran</p>

<pre>dcfldd bs=4M if=2012-09-18-wheezy-raspbian.img of=/dev/mmcblk0</pre>

<p><code>/dev/mcblk0</code> is the name of my SD card drive. Also, you'll probably need to install <code>dcfldd</code> before running that; if you're ok with not having any kind of progress feedback, just run the same command with <code>dd</code> instead.</p>

<p>And that was that. After getting the resulting cards into dat Pi, it booted flawlessly.</p>

<img src=\"/static/img/pi-2.jpg\" class=\"middle\" alt=\"Pi running its boot sequence\" />

<img src=\"/static/img/pi-3.jpg\" class=\"middle\" alt=\"Pi desktop\" />

<p>Like I said, haven't had much time to explore, but what I can tell you is that the Debian version</p>

<ul>
  <li>uses <a href=\"http://lxde.org/\">the LXDE desktop</a><a href=\"#foot-Sun-Sep-30-225608EDT-2012\" name=\"note-Sun-Sep-30-225608EDT-2012\">[5]</a></li>
  <li>comes with Python 2.7, Python 3.2, and a bunch of python-based games</li>
  <li>takes about three seconds to start up a Python 3.2 shell in X, and seems to be able to run at most one</li>
  <li>comes with Scratch and Squeak<a href=\"#foot-Sun-Sep-30-225613EDT-2012\" name=\"note-Sun-Sep-30-225613EDT-2012\">[6]</a></li>
</ul>

<p>By contrast, the Arch distribution they ship is very minimal. Which I guess makes sense, all things considered. As a note here, the <a href=\"http://www.raspberrypi.org/downloads\">Downloads page</a> mentions that Arch boots to a useable prompt in about 10 seconds. Firstly, that doesn't sound very impressive, given that the Debian version does exactly the same thing if you tell it to run from command line. Secondly, in practice it seems to be closer to 5 hippopotami, which actually <i>is</i> impressive out of a general purpose computer the size of my business card.</p>

<p>The Arch Pi doesn't come with anything other than <code>bash</code>, <code>perl</code> and a <code>root</code> account<a href=\"#foot-Sun-Sep-30-225618EDT-2012\" name=\"note-Sun-Sep-30-225618EDT-2012\">[7]</a>, and that includes the standard <code>raspi-config</code> script that lets you resize your initial SD card partition. Ah well, I suppose there are worse things than having to <a href=\"http://elinux.org/RPi_Resize_Flash_Partitions#Manually_resizing_the_SD_card_on_Raspberry_Pi\">play around with <code>parted</code> and friends</a>.</p>

<p>Anyway, like I said, not much time this weekend, between the various work work and play work I've been up to around here. I've literally managed to install the OS, <code>apt-get</code> a copy of <code>mplayer</code> and get the thing onto my network.</p>

<p>In case you were wondering, I consider that a success</p>

<img src=\"/static/img/pi-4.jpg\" class=\"middle\" alt=\"HD video coming out of the Pi\" />

<p>Next order of business, getting a Haskell and a Common Lisp running on it, getting a <a href=\"http://www.raspberrypi.org/archives/1310\">\"case\"</a><a href=\"#foot-Sun-Sep-30-225623EDT-2012\" name=\"note-Sun-Sep-30-225623EDT-2012\">[8]</a>, and figuring out some sort of <a href=\"/article?name=x220.html\">portable input/output strategy</a>.</p>


<hr />
<h5>Footnotes</h5>
<p>1 - <a href=\"#note-Sun-Sep-30-225547EDT-2012\" name=\"foot-Sun-Sep-30-225547EDT-2012\">[back]</a> - That's changed by now, obviously, and it's theoretically possible to buy n of them rather than just one per customer, though I've yet to test this theory.</p>

<p>2 - <a href=\"#note-Sun-Sep-30-225551EDT-2012\" name=\"foot-Sun-Sep-30-225551EDT-2012\">[back]</a> - Canadian dollars.</p>

<p>3 - <a href=\"#note-Sun-Sep-30-225556EDT-2012\" name=\"foot-Sun-Sep-30-225556EDT-2012\">[back]</a> - A 16 GB class 10. Class 10 is the important part since that indicates read/write speed. I could have gotten away with as little as 2 GB in terms of size, but the store I walked into happened to have a special on the 16 GBs, so a pair of those ended up costing me about $10 <i>less</i> than a pair of two gig class 10s would have. No, I have no idea how this made sense from their perspective. It's not as though flash memory goes stale in blister packs.</p>

<p>4 - <a href=\"#note-Sun-Sep-30-225604EDT-2012\" name=\"foot-Sun-Sep-30-225604EDT-2012\">[back]</a> - One copy each of <a href=\"http://downloads.raspberrypi.org/download.php?file=/images/raspbian/2012-09-18-wheezy-raspbian/2012-09-18-wheezy-raspbian.zip\">Raspbian</a> and <a href=\"http://downloads.raspberrypi.org/download.php?file=/images/archlinuxarm/archlinux-hf-2012-09-18/archlinux-hf-2012-09-18.zip\">Arch ARM</a>.</p>

<p>5 - <a href=\"#note-Sun-Sep-30-225608EDT-2012\" name=\"foot-Sun-Sep-30-225608EDT-2012\">[back]</a> - Look-and-feel-wise, it's a slightly shinier <a href=\"http://www.xfce.org/\">XFCE</a>.</p>

<p>6 - <a href=\"#note-Sun-Sep-30-225613EDT-2012\" name=\"foot-Sun-Sep-30-225613EDT-2012\">[back]</a> - Though to be fair, I've yet to get Squeak running successfully. Scratch looks like a very interesting teaching tool. The sort of thing you could give a curious six-year-old if you wanted them to learn about programming.</p>

<p>7 - <a href=\"#note-Sun-Sep-30-225618EDT-2012\" name=\"foot-Sun-Sep-30-225618EDT-2012\">[back]</a> - Ok, ok, that's a half-lie. It also comes with the usual *nix suspects, but you know what I mean dammit. It's been a <i>long</i> while since I've actually had to install Python anywhere.</p>

<p>8 - <a href=\"#note-Sun-Sep-30-225623EDT-2012\" name=\"foot-Sun-Sep-30-225623EDT-2012\">[back]</a> - Or possibly a <a href=\"http://www.geek.com/articles/chips/raspberry-pi-gets-a-case-you-can-download-and-3d-print-2012035/\">case</a>, depending on how adventurous I feel.</p>
"))
((5202 3723 592327000) :INSERT (104 :POSTED 3557966400))
((5202 3723 592329000) :INSERT (104 :TAG :HARDWARE))
((5202 3723 592473000) :INSERT (105 :TITLE "Pi - Addendum"))
((5202 3723 592478000) :INSERT (105 :FILE "raspberry-pi-addendum.html"))
((5202 3723 592480000) :INSERT (105 :EDITED 3610022331))
((5202 3723 592482000) :INSERT
 (105 :BODY "<p>Just a quick update today.</p>

<p>We're working on Yet Another Ridiculously Boring RFP at the office, so I had enough time to dick around with some background tasks for the RasPi. Here are some tidbits that I didn't know off-hand, but do now:</p>

<h3>SD Class Not a Big Deal</h3>

<p>I thought I was being badass getting the Class 10s, but it turns out not to matter very much. Raspbian will boot to prompt in ~20 seconds from a Class 10 card, and ~24 from a Class 4. There <i>is</i> a difference, and some things might be a bit snappier from the Class 10, but overall I probably would have opted to save my money had I known how big the actual difference is.</p>

<h3>HD Video Out-of-the-box</h3>

<p>Yup. I spent a bit of time dicking around with <code>mplayer</code> settings before I realized that you can actually play your awesome videos directly from the Raspbian image. You need to set your memory split to either of the two highest options by running <code>raspi-config</code>, selecting the setting, then restarting. Then, just <code>oxmplayer /path/to/your/file/here.mp4</code>. And there; glorious, full playback rate HD is yours. The only problem this raises for me is re-writing my media center webapp, since I'll need to control something other than <code>mplayer</code>.</p>

<h3>No GHCi For You!</h3>

<p>You can still install <a href=\"http://www.haskell.org/hugs/\">Hugs</a> and play around that way, but <code>GHCi</code> categorically does <i>not</i> work on ARM yet. Which is kind of sad, because I was looking forward to busting it out. I'm not entirely sure how compatible Hugs and <a href=\"https://en.wikipedia.org/wiki/Glasgow_Haskell_Compiler\">GHCi</a> are, but I'm betting the answer is \"Not 100% compatible\". I may or may not be appraising you of the <code>diff</code>s shortly.</p>

<h3>Yes Clojure For You!</h3>

<p>This one sort of boggles my mind. Yes, you can <code>apt-get install leiningen</code> on a Raspberry Pi, and yes this lets you then <code>lein repl</code>. No, it's not very fast, it takes longer for the JVM to start up than it does for the RasPi to boot, and there's a visible delay when evaluating anything more complex than basic arithmetic, but goddamit it's <i>there</i>.</p>

<p>Really, anything I've wanted to do so far was fully available to me. I spent lunch today installing Emacs, then running <code>SLIME</code> with <code>clisp</code> and poking around. What I <i>haven't</i> done is customize my environment yet, just installed the components that would allow me to do so. Next order of business is getting all my various <code>.emacs</code>/<code>.emacs.d</code> settings imported, and making sure everything plays nicely.</p>

<p>With any luck, my next blog post will be coming from a computer smaller than my phone.</p>
"))
((5202 3723 592506000) :INSERT (105 :POSTED 3558052800))
((5202 3723 592510000) :INSERT (105 :TAG :HARDWARE))
((5202 3723 593549000) :INSERT (106 :TITLE "WebMote the Right Way™©"))
((5202 3723 593554000) :INSERT (106 :FILE "webmote-the-right-way.html"))
((5202 3723 593556000) :INSERT (106 :EDITED 3610298958))
((5202 3723 593557000) :INSERT
 (106 :BODY "<h1>WebMote the Right Way™©</h1>

<p>A <a href=\"/article?name=js-frameworks.html\">little while ago, I mentioned</a> that while the new wave of JS frameworks I observed were shit overall, they encouraged the correct approach to web UI building. Well, since I'll have to do a pretty serious re-write of <a href=\"https://github.com/Inaimathi/web-mote\">WebMote</a> for use with the RasPi, I figured it would be a good time to apply the principle. This is going to be a two-parter; firstly because I really want to focus on the front-end today, secondly because I don't have the back-end done yet, thirdly because I'm planning to some pretty odd things or the server-side of this project, and fourthly because I'm trying not to bore the ever-loving fuck out of everyone reading this.</p>

<p>So.</p>

<p>First off, have a <code>tree</code></p>

<pre>web-mote
&#9500;&#9472;&#9472; css
&#9474;   &#9500;&#9472;&#9472; custom-theme <span style=\"color: #b22222;\">## </span><span style=\"color: #b22222;\"><a href=\"http://jqueryui.com/\">jQueryUI</a> CSS and images
</span>&#9474;   &#9500;&#9472;&#9472; icons <span style=\"color: #b22222;\">## </span><span style=\"color: #b22222;\">the <a href=\"http://www.famfamfam.com/lab/icons/silk/\">SILK icon set</a>
</span>&#9474;   &#9500;&#9472;&#9472; style.css
&#9474;   &#9492;&#9472;&#9472; watermark
&#9474;       &#9500;&#9472;&#9472; audio.png
&#9474;       &#9500;&#9472;&#9472; folder.png
&#9474;       &#9500;&#9472;&#9472; image.png
&#9474;       &#9492;&#9472;&#9472; video.png
&#9500;&#9472;&#9472; js
&#9474;   &#9500;&#9472;&#9472; <a href=\"http://backbonejs.org/\">backbone-min.js</a>
&#9474;   &#9500;&#9472;&#9472; <a href=\"http://handlebarsjs.com/\">handlebars-1.0.rc.1.js</a>
&#9474;   &#9500;&#9472;&#9472; <a href=\"http://jquery.com/\">jquery.min.js</a>
&#9474;   &#9500;&#9472;&#9472; <a href=\"http://jqueryui.com/download\">jquery-ui-1.8.13.custom.min.js</a>
&#9474;   &#9500;&#9472;&#9472; <a href=\"http://underscorejs.org/\">underscore-min.js</a>
&#9474;   &#9492;&#9472;&#9472; webmote.js
&#9500;&#9472;&#9472; root-directory
&#9492;&#9472;&#9472; webmote.html</pre>

<p>Most of that is framework code, of course. The only files I'll be going through today are <code>webmote.html</code>, <code>webmote.css</code> and <code>webmote.js</code>. You'll note the presence of <code>backbone</code> and <code>underscore</code>; I use their <code><a href=\"http://backbonejs.org/#Router\">Router</a></code> class, but don't otherwise touch them for reasons.</p>

<pre>&lt;<span style=\"color: #a020f0;\">!DOCTYPE</span> HTML&gt;
&lt;<span style=\"color: #0000ff;\">html</span> <span style=\"color: #a0522d;\">lang</span>=<span style=\"color: #8b2252;\">\"en-US\"</span>&gt;
  &lt;<span style=\"color: #0000ff;\">head</span>&gt;
    &lt;<span style=\"color: #0000ff;\">meta</span> <span style=\"color: #a0522d;\">charset</span>=<span style=\"color: #8b2252;\">\"UTF-8\"</span>&gt;
    &lt;<span style=\"color: #0000ff;\">title</span>&gt;<span style=\"font-weight: bold; text-decoration: underline;\">WebMote</span>&lt;/<span style=\"color: #0000ff;\">title</span>&gt;
  &lt;/<span style=\"color: #0000ff;\">head</span>&gt;
  &lt;<span style=\"color: #0000ff;\">body</span>&gt;

    <span style=\"color: #b22222;\">&lt;!-- </span><span style=\"color: #b22222;\">--------- </span><span style=\"color: #b22222;\">--&gt;</span>
    <span style=\"color: #b22222;\">&lt;!-- </span><span style=\"color: #b22222;\">Templates </span><span style=\"color: #b22222;\">--&gt;</span>
    <span style=\"color: #b22222;\">&lt;!-- </span><span style=\"color: #b22222;\">--------- </span><span style=\"color: #b22222;\">--&gt;</span>
    &lt;<span style=\"color: #0000ff;\">script</span> <span style=\"color: #a0522d;\">id</span>=<span style=\"color: #8b2252;\">\"tmp-folder\"</span> <span style=\"color: #a0522d;\">type</span>=<span style=\"color: #8b2252;\">\"text/x-handlebars-template\"</span>&gt;
      &lt;<span style=\"color: #0000ff;\">li</span> <span style=\"color: #a0522d;\">class</span>=<span style=\"color: #8b2252;\">\"{{type}}\"</span>&gt;
        &lt;<span style=\"color: #0000ff;\">button</span> <span style=\"color: #a0522d;\">class</span>=<span style=\"color: #8b2252;\">\"play icon play\"</span> <span style=\"color: #a0522d;\">onclick</span>=<span style=\"color: #8b2252;\">\"mote.playDir('{{path}}')\"</span>&gt;&lt;/<span style=\"color: #0000ff;\">button</span>&gt;
        &lt;<span style=\"color: #0000ff;\">button</span> <span style=\"color: #a0522d;\">class</span>=<span style=\"color: #8b2252;\">\"shuffle icon shuffle\"</span> <span style=\"color: #a0522d;\">onclick</span>=<span style=\"color: #8b2252;\">\"mote.shuffleDir('{{path}}')\"</span>&gt;&lt;/<span style=\"color: #0000ff;\">button</span>&gt;
        &lt;<span style=\"color: #0000ff;\">a</span> <span style=\"color: #a0522d;\">class</span>=<span style=\"color: #8b2252;\">\"dir-link\"</span> <span style=\"color: #a0522d;\">href</span>=<span style=\"color: #8b2252;\">\"#navigate{{path}}\"</span>&gt;{{name}}&lt;/<span style=\"color: #0000ff;\">a</span>&gt;
      &lt;/<span style=\"color: #0000ff;\">li</span>&gt;
    &lt;/<span style=\"color: #0000ff;\">script</span>&gt;

    &lt;<span style=\"color: #0000ff;\">script</span> <span style=\"color: #a0522d;\">id</span>=<span style=\"color: #8b2252;\">\"tmp-file\"</span> <span style=\"color: #a0522d;\">type</span>=<span style=\"color: #8b2252;\">\"text/x-handlebars-template\"</span>&gt;
      &lt;<span style=\"color: #0000ff;\">li</span> <span style=\"color: #a0522d;\">class</span>=<span style=\"color: #8b2252;\">\"{{type}}\"</span>&gt;
        &lt;<span style=\"color: #0000ff;\">a</span> <span style=\"color: #a0522d;\">class</span>=<span style=\"color: #8b2252;\">\"file-link\"</span> <span style=\"color: #a0522d;\">href</span>=<span style=\"color: #8b2252;\">\"javascript:void(0);\"</span> <span style=\"color: #a0522d;\">onclick</span>=<span style=\"color: #8b2252;\">\"mote.play('{{path}}')\"</span>&gt;{{name}}&lt;/<span style=\"color: #0000ff;\">a</span>&gt;
      &lt;/<span style=\"color: #0000ff;\">li</span>&gt;
    &lt;/<span style=\"color: #0000ff;\">script</span>&gt;

    &lt;<span style=\"color: #0000ff;\">script</span> <span style=\"color: #a0522d;\">id</span>=<span style=\"color: #8b2252;\">\"tmp-control\"</span> <span style=\"color: #a0522d;\">type</span>=<span style=\"color: #8b2252;\">\"text/x-handlebars-template\"</span>&gt;
      &lt;<span style=\"color: #0000ff;\">li</span>&gt;
        &lt;<span style=\"color: #0000ff;\">button</span> <span style=\"color: #a0522d;\">class</span>=<span style=\"color: #8b2252;\">\"icon {{cmd}}{{#if css-class}} {{css-class}}{{/if}}\"</span> <span style=\"color: #a0522d;\">onclick</span>=<span style=\"color: #8b2252;\">\"mote.command('{{cmd}}');\"</span>&gt;
        &lt;/<span style=\"color: #0000ff;\">button</span>&gt;
      &lt;/<span style=\"color: #0000ff;\">li</span>&gt;
    &lt;/<span style=\"color: #0000ff;\">script</span>&gt;

    &lt;<span style=\"color: #0000ff;\">script</span> <span style=\"color: #a0522d;\">id</span>=<span style=\"color: #8b2252;\">\"tmp-control-block\"</span> <span style=\"color: #a0522d;\">type</span>=<span style=\"color: #8b2252;\">\"text/x-handlebars-template\"</span>&gt;
      &lt;<span style=\"color: #0000ff;\">ul</span>&gt;
        {{#each this}}
        {{#control-button this}}{{/control-button}}
        {{/each}}
      &lt;/<span style=\"color: #0000ff;\">ul</span>&gt;
    &lt;/<span style=\"color: #0000ff;\">script</span>&gt;
    
    <span style=\"color: #b22222;\">&lt;!-- </span><span style=\"color: #b22222;\">---- </span><span style=\"color: #b22222;\">--&gt;</span>
    <span style=\"color: #b22222;\">&lt;!-- </span><span style=\"color: #b22222;\">Body </span><span style=\"color: #b22222;\">--&gt;</span>
    <span style=\"color: #b22222;\">&lt;!-- </span><span style=\"color: #b22222;\">---- </span><span style=\"color: #b22222;\">--&gt;</span>
    &lt;<span style=\"color: #0000ff;\">ul</span> <span style=\"color: #a0522d;\">id</span>=<span style=\"color: #8b2252;\">\"file-list\"</span>&gt;&lt;/<span style=\"color: #0000ff;\">ul</span>&gt;
    &lt;<span style=\"color: #0000ff;\">div</span> <span style=\"color: #a0522d;\">id</span>=<span style=\"color: #8b2252;\">\"controls\"</span>&gt;&lt;/<span style=\"color: #0000ff;\">div</span>&gt;
    
    <span style=\"color: #b22222;\">&lt;!-- </span><span style=\"color: #b22222;\">------ </span><span style=\"color: #b22222;\">--&gt;</span>
    <span style=\"color: #b22222;\">&lt;!-- </span><span style=\"color: #b22222;\">Styles </span><span style=\"color: #b22222;\">--&gt;</span>
    <span style=\"color: #b22222;\">&lt;!-- </span><span style=\"color: #b22222;\">------ </span><span style=\"color: #b22222;\">--&gt;</span>
    &lt;<span style=\"color: #0000ff;\">link</span> <span style=\"color: #a0522d;\">rel</span>=<span style=\"color: #8b2252;\">\"stylesheet\"</span> <span style=\"color: #a0522d;\">href</span>=<span style=\"color: #8b2252;\">\"css/style.css\"</span> <span style=\"color: #a0522d;\">type</span>=<span style=\"color: #8b2252;\">\"text/css\"</span> <span style=\"color: #a0522d;\">media</span>=<span style=\"color: #8b2252;\">\"screen\"</span> /&gt;
    &lt;<span style=\"color: #0000ff;\">link</span> <span style=\"color: #a0522d;\">rel</span>=<span style=\"color: #8b2252;\">\"stylesheet\"</span> <span style=\"color: #a0522d;\">href</span>=<span style=\"color: #8b2252;\">\"css/custom-theme/jquery-ui-1.8.13.custom.css\"</span> <span style=\"color: #a0522d;\">type</span>=<span style=\"color: #8b2252;\">\"text/css\"</span> <span style=\"color: #a0522d;\">media</span>=<span style=\"color: #8b2252;\">\"screen\"</span> /&gt;
    
    <span style=\"color: #b22222;\">&lt;!-- </span><span style=\"color: #b22222;\">------- </span><span style=\"color: #b22222;\">--&gt;</span>
    <span style=\"color: #b22222;\">&lt;!-- </span><span style=\"color: #b22222;\">Scripts </span><span style=\"color: #b22222;\">--&gt;</span>
    <span style=\"color: #b22222;\">&lt;!-- </span><span style=\"color: #b22222;\">------- </span><span style=\"color: #b22222;\">--&gt;</span>
    &lt;<span style=\"color: #0000ff;\">script</span> <span style=\"color: #a0522d;\">type</span>=<span style=\"color: #8b2252;\">\"text/javascript\"</span> <span style=\"color: #a0522d;\">src</span>=<span style=\"color: #8b2252;\">\"js/jquery.min.js\"</span>&gt;&lt;/<span style=\"color: #0000ff;\">script</span>&gt;
    &lt;<span style=\"color: #0000ff;\">script</span> <span style=\"color: #a0522d;\">type</span>=<span style=\"color: #8b2252;\">\"text/javascript\"</span> <span style=\"color: #a0522d;\">src</span>=<span style=\"color: #8b2252;\">\"js/jquery-ui-1.8.13.custom.min.js\"</span>&gt;&lt;/<span style=\"color: #0000ff;\">script</span>&gt;
    &lt;<span style=\"color: #0000ff;\">script</span> <span style=\"color: #a0522d;\">type</span>=<span style=\"color: #8b2252;\">\"text/javascript\"</span> <span style=\"color: #a0522d;\">src</span>=<span style=\"color: #8b2252;\">\"js/handlebars-1.0.rc.1.js\"</span>&gt;&lt;/<span style=\"color: #0000ff;\">script</span>&gt;
    &lt;<span style=\"color: #0000ff;\">script</span> <span style=\"color: #a0522d;\">type</span>=<span style=\"color: #8b2252;\">\"text/javascript\"</span> <span style=\"color: #a0522d;\">src</span>=<span style=\"color: #8b2252;\">\"js/underscore-min.js\"</span>&gt;&lt;/<span style=\"color: #0000ff;\">script</span>&gt;
    &lt;<span style=\"color: #0000ff;\">script</span> <span style=\"color: #a0522d;\">type</span>=<span style=\"color: #8b2252;\">\"text/javascript\"</span> <span style=\"color: #a0522d;\">src</span>=<span style=\"color: #8b2252;\">\"js/backbone-min.js\"</span>&gt;&lt;/<span style=\"color: #0000ff;\">script</span>&gt;

    &lt;<span style=\"color: #0000ff;\">script</span> <span style=\"color: #a0522d;\">type</span>=<span style=\"color: #8b2252;\">\"text/javascript\"</span> <span style=\"color: #a0522d;\">src</span>=<span style=\"color: #8b2252;\">\"js/webmote.js\"</span>&gt;&lt;/<span style=\"color: #0000ff;\">script</span>&gt;

  &lt;/<span style=\"color: #0000ff;\">body</span>&gt;
&lt;/<span style=\"color: #0000ff;\">html</span>&gt;</pre>

<p>That's actually the entire front-end markup. If you haven't seen HTML before, it might look daunting but it's extremely simple. You've got the <code>head</code> up top adding a little bit of metadata, all the <code>text/javascript</code> and <code>text/css</code> includes at the bottom, and only two actual elements in the <code>body</code> of the page: placeholders to pump a file list and control buttons into later. The interesting part is those four <code>handlebars</code> templates.</p>

<pre>    <span style=\"color: #b22222;\">&lt;!-- </span><span style=\"color: #b22222;\">--------- </span><span style=\"color: #b22222;\">--&gt;</span>
    <span style=\"color: #b22222;\">&lt;!-- </span><span style=\"color: #b22222;\">Templates </span><span style=\"color: #b22222;\">--&gt;</span>
    <span style=\"color: #b22222;\">&lt;!-- </span><span style=\"color: #b22222;\">--------- </span><span style=\"color: #b22222;\">--&gt;</span>
    &lt;<span style=\"color: #0000ff;\">script</span> <span style=\"color: #a0522d;\">id</span>=<span style=\"color: #8b2252;\">\"tmp-folder\"</span> <span style=\"color: #a0522d;\">type</span>=<span style=\"color: #8b2252;\">\"text/x-handlebars-template\"</span>&gt;
      &lt;<span style=\"color: #0000ff;\">li</span> <span style=\"color: #a0522d;\">class</span>=<span style=\"color: #8b2252;\">\"{{type}}\"</span>&gt;
        &lt;<span style=\"color: #0000ff;\">button</span> <span style=\"color: #a0522d;\">class</span>=<span style=\"color: #8b2252;\">\"play icon play\"</span> <span style=\"color: #a0522d;\">onclick</span>=<span style=\"color: #8b2252;\">\"mote.playDir('{{path}}')\"</span>&gt;&lt;/<span style=\"color: #0000ff;\">button</span>&gt;
        &lt;<span style=\"color: #0000ff;\">button</span> <span style=\"color: #a0522d;\">class</span>=<span style=\"color: #8b2252;\">\"shuffle icon shuffle\"</span> <span style=\"color: #a0522d;\">onclick</span>=<span style=\"color: #8b2252;\">\"mote.shuffleDir('{{path}}')\"</span>&gt;&lt;/<span style=\"color: #0000ff;\">button</span>&gt;
        &lt;<span style=\"color: #0000ff;\">a</span> <span style=\"color: #a0522d;\">class</span>=<span style=\"color: #8b2252;\">\"dir-link\"</span> <span style=\"color: #a0522d;\">href</span>=<span style=\"color: #8b2252;\">\"#navigate{{path}}\"</span>&gt;{{name}}&lt;/<span style=\"color: #0000ff;\">a</span>&gt;
      &lt;/<span style=\"color: #0000ff;\">li</span>&gt;
    &lt;/<span style=\"color: #0000ff;\">script</span>&gt;

    &lt;<span style=\"color: #0000ff;\">script</span> <span style=\"color: #a0522d;\">id</span>=<span style=\"color: #8b2252;\">\"tmp-file\"</span> <span style=\"color: #a0522d;\">type</span>=<span style=\"color: #8b2252;\">\"text/x-handlebars-template\"</span>&gt;
      &lt;<span style=\"color: #0000ff;\">li</span> <span style=\"color: #a0522d;\">class</span>=<span style=\"color: #8b2252;\">\"{{type}}\"</span>&gt;
        &lt;<span style=\"color: #0000ff;\">a</span> <span style=\"color: #a0522d;\">class</span>=<span style=\"color: #8b2252;\">\"file-link\"</span> <span style=\"color: #a0522d;\">href</span>=<span style=\"color: #8b2252;\">\"javascript:void(0);\"</span> <span style=\"color: #a0522d;\">onclick</span>=<span style=\"color: #8b2252;\">\"mote.play('{{path}}')\"</span>&gt;{{name}}&lt;/<span style=\"color: #0000ff;\">a</span>&gt;
      &lt;/<span style=\"color: #0000ff;\">li</span>&gt;
    &lt;/<span style=\"color: #0000ff;\">script</span>&gt;

    &lt;<span style=\"color: #0000ff;\">script</span> <span style=\"color: #a0522d;\">id</span>=<span style=\"color: #8b2252;\">\"tmp-control\"</span> <span style=\"color: #a0522d;\">type</span>=<span style=\"color: #8b2252;\">\"text/x-handlebars-template\"</span>&gt;
      &lt;<span style=\"color: #0000ff;\">li</span>&gt;
        &lt;<span style=\"color: #0000ff;\">button</span> <span style=\"color: #a0522d;\">class</span>=<span style=\"color: #8b2252;\">\"icon {{cmd}}{{#if css-class}} {{css-class}}{{/if}}\"</span> <span style=\"color: #a0522d;\">onclick</span>=<span style=\"color: #8b2252;\">\"mote.command('{{cmd}}');\"</span>&gt;
        &lt;/<span style=\"color: #0000ff;\">button</span>&gt;
      &lt;/<span style=\"color: #0000ff;\">li</span>&gt;
    &lt;/<span style=\"color: #0000ff;\">script</span>&gt;

    &lt;<span style=\"color: #0000ff;\">script</span> <span style=\"color: #a0522d;\">id</span>=<span style=\"color: #8b2252;\">\"tmp-control-block\"</span> <span style=\"color: #a0522d;\">type</span>=<span style=\"color: #8b2252;\">\"text/x-handlebars-template\"</span>&gt;
      &lt;<span style=\"color: #0000ff;\">ul</span>&gt;
        {{#each this}}
        {{#control-button this}}{{/control-button}}
        {{/each}}
      &lt;/<span style=\"color: #0000ff;\">ul</span>&gt;
    &lt;/<span style=\"color: #0000ff;\">script</span>&gt;</pre>

<p>Firstly, notice that they're all in <code>script <span style=\"color: #a0522d;\">type</span>=\"text/x-handlebars-template\"</code> tags. I think this technically goes against some markup standard, so it may get screamed at by an XHTML validator somewhere, but it's not a huge deal. If you really feel that's something you want to fix, you can also put these templates in hidden <code>div</code>s instead of <code>script</code> tags; as you'll see later, it wouldn't make a difference in how we use them.</p>

<p>Also, note that I'm inlining the <code>onclick</code> events rather than dealing with them later. A while ago, I sort of got used to the idea of just putting <code>id</code>s and <code>class</code>es on pieces of the DOM tree, then using jQuery to apply events later with <code>$(<span style=\"color: #8b2252;\">\"#foo\"</span>).click(<span style=\"color: #a020f0;\">function</span> () { thingsThatShouldHappen(); });</code>. It looks cleaner at first glance because it separates the presentation and behavior of your controls, but there are two pretty big problems with the approach. First, it requires additional DOM traversals. Those may or may not get optimized away in modern JS engines, but I'm not entirely sure. Second, and more importantly, it makes it harder to change the layout at runtime later, and that's something you'll want to do fairly frequently if you're looking to make a responsive application.</p>

<p>That's actually why I ended up separating <code>tmp-control</code> out of <code>tmp-control-block</code>. I honestly wasn't even going to generate those programatically, but I ran into a situation where I wanted to replace one button with another under certain conditions. I'll point it out when I get to it; the short version is, had I stuck to <code>$</code>ing <code>click</code> events, I would have had to run that setup function each time the change happened<a href=\"#foot-Sat-Oct-06-194031EDT-2012\" name=\"note-Sat-Oct-06-194031EDT-2012\">[1]</a>. Having those events inlined lets me do the simple thing of just re-rendering a template at the appointed place.</p>

<p>Back to the code at hand.</p>

<pre>    &lt;<span style=\"color: #0000ff;\">script</span> <span style=\"color: #a0522d;\">id</span>=<span style=\"color: #8b2252;\">\"tmp-folder\"</span> <span style=\"color: #a0522d;\">type</span>=<span style=\"color: #8b2252;\">\"text/x-handlebars-template\"</span>&gt;
      &lt;<span style=\"color: #0000ff;\">li</span> <span style=\"color: #a0522d;\">class</span>=<span style=\"color: #8b2252;\">\"{{type}}\"</span>&gt;
        &lt;<span style=\"color: #0000ff;\">button</span> <span style=\"color: #a0522d;\">class</span>=<span style=\"color: #8b2252;\">\"play icon play\"</span> <span style=\"color: #a0522d;\">onclick</span>=<span style=\"color: #8b2252;\">\"mote.playDir('{{path}}')\"</span>&gt;&lt;/<span style=\"color: #0000ff;\">button</span>&gt;
        &lt;<span style=\"color: #0000ff;\">button</span> <span style=\"color: #a0522d;\">class</span>=<span style=\"color: #8b2252;\">\"shuffle icon shuffle\"</span> <span style=\"color: #a0522d;\">onclick</span>=<span style=\"color: #8b2252;\">\"mote.shuffleDir('{{path}}')\"</span>&gt;&lt;/<span style=\"color: #0000ff;\">button</span>&gt;
        &lt;<span style=\"color: #0000ff;\">a</span> <span style=\"color: #a0522d;\">class</span>=<span style=\"color: #8b2252;\">\"dir-link\"</span> <span style=\"color: #a0522d;\">href</span>=<span style=\"color: #8b2252;\">\"#navigate{{path}}\"</span>&gt;{{name}}&lt;/<span style=\"color: #0000ff;\">a</span>&gt;
      &lt;/<span style=\"color: #0000ff;\">li</span>&gt;
    &lt;/<span style=\"color: #0000ff;\">script</span>&gt;</pre>

<p>The interesting part <i>of the templates</i> are those snippets of code in the titular <code>handlebars</code> that look something like <code>{{foo}}</code> or <code>{{#foo}}{{/foo}}</code>. A template expects an object, or possibly a list as its input later, and these snippets act as lookups. So, for example, where it says <code>{{path}}</code>, that particular template will look up the value <code>\"path\"</code> in its argument and echo the result. Now that you know that, the first two templates are fairly self-explanatory.</p>

<p>The last two could use some close-up time though.</p>

<pre>    &lt;<span style=\"color: #0000ff;\">script</span> <span style=\"color: #a0522d;\">id</span>=<span style=\"color: #8b2252;\">\"tmp-control\"</span> <span style=\"color: #a0522d;\">type</span>=<span style=\"color: #8b2252;\">\"text/x-handlebars-template\"</span>&gt;
      &lt;<span style=\"color: #0000ff;\">li</span>&gt;
        &lt;<span style=\"color: #0000ff;\">button</span> <span style=\"color: #a0522d;\">class</span>=<span style=\"color: #8b2252;\">\"icon {{cmd}}{{#if css-class}} {{css-class}}{{/if}}\"</span> <span style=\"color: #a0522d;\">onclick</span>=<span style=\"color: #8b2252;\">\"mote.command('{{cmd}}');\"</span>&gt;
        &lt;/<span style=\"color: #0000ff;\">button</span>&gt;
      &lt;/<span style=\"color: #0000ff;\">li</span>&gt;
    &lt;/<span style=\"color: #0000ff;\">script</span>&gt;</pre>

<p>The single <code>control</code> template demonstrates an <code>#if</code> block. When you see the construct <code>{{#if foo}}{{bar}}{{/if}}</code> in a template, what happening is <code>argument.bar</code> is echoed if <code>argument.foo</code> is not one of <code>\"\"</code>, <code>false</code>, <code>null</code>, <code>[]</code> or <code>undefined</code>.</p>

<pre>    &lt;<span style=\"color: #0000ff;\">script</span> <span style=\"color: #a0522d;\">id</span>=<span style=\"color: #8b2252;\">\"tmp-control-block\"</span> <span style=\"color: #a0522d;\">type</span>=<span style=\"color: #8b2252;\">\"text/x-handlebars-template\"</span>&gt;
      &lt;<span style=\"color: #0000ff;\">ul</span>&gt;
        {{#each this}}
        {{#control-button this}}{{/control-button}}
        {{/each}}
      &lt;/<span style=\"color: #0000ff;\">ul</span>&gt;
    &lt;/<span style=\"color: #0000ff;\">script</span>&gt;</pre>

<p>The <code>control-block</code> is responsible for outputting a group of <code>control</code>s. <code>this</code> in a <code>handlebars</code> block refers to the current argument, and the <code>{{#each foo}}...{{/each}}</code> construct iterates through a list. It doesn't seem like there's a good way of iterating over k/v pairs built in, but as that <code>#control-button</code> block demonstrates, it's possible to define your own helpers (spoiler, the <code>control-button</code> helper just renders an individual <code>control</code>).</p>

<p>More on that later though, let me take a very quick look at the CSS before we move on to the JS.</p>

<pre><span style=\"color: #b22222;\">/** </span><span style=\"color: #b22222;\">The Control Panel ******************************************</span><span style=\"color: #b22222;\">*/</span>
<span style=\"color: #0000ff;\">#controls </span>{ <span style=\"color: #a0522d;\">text-align</span>: center; <span style=\"color: #a0522d;\">width</span>: 100%; <span style=\"color: #a0522d;\">position</span>: fixed; <span style=\"color: #a0522d;\">bottom</span>: 0px; <span style=\"color: #a0522d;\">padding</span>: 5px 0px; <span style=\"color: #a0522d;\">background-color</span>: rgba(255, 255, 255, 0.8); }
<span style=\"color: #0000ff;\">#controls ul </span>{ <span style=\"color: #a0522d;\">list-style-type</span>: none; <span style=\"color: #a0522d;\">margin</span>: 0px; <span style=\"color: #a0522d;\">margin-bottom</span>: 3px; }
<span style=\"color: #0000ff;\">#controls li </span>{ <span style=\"color: #a0522d;\">display</span>: inline; }

<span style=\"color: #b22222;\">/** </span><span style=\"color: #b22222;\">The Main File List *****************************************</span><span style=\"color: #b22222;\">*/</span>
<span style=\"color: #0000ff;\">#file-list </span>{ <span style=\"color: #a0522d;\">list-style-type</span>: none; <span style=\"color: #a0522d;\">width</span>: 350px; <span style=\"color: #a0522d;\">margin</span>: auto; }
<span style=\"color: #0000ff;\">#file-list li </span>{ <span style=\"color: #a0522d;\">margin-bottom</span>: 10px; <span style=\"color: #a0522d;\">padding</span>: 3px; <span style=\"color: #a0522d;\">clear</span>: both; }
<span style=\"color: #0000ff;\">#file-list li button </span>{ <span style=\"color: #a0522d;\">margin-top</span>: 0px; <span style=\"color: #a0522d;\">float</span>: left; }
<span style=\"color: #0000ff;\">#file-list li a </span>{ <span style=\"color: #a0522d;\">min-height</span>: 20px; <span style=\"color: #a0522d;\">padding</span>: 4px; <span style=\"color: #a0522d;\">float</span>: left; <span style=\"color: #a0522d;\">border</span>: 1px solid #ddd; <span style=\"color: #a0522d;\">border-radius</span>: 5px; <span style=\"color: #a0522d;\">background</span>: right no-repeat; <span style=\"color: #a0522d;\">background-size</span>: 50px; }
<span style=\"color: #0000ff;\">#file-list li a.dir-link </span>{ <span style=\"color: #a0522d;\">white-space</span>: nowrap; <span style=\"color: #a0522d;\">width</span>: 228px; }
<span style=\"color: #0000ff;\">#file-list li a.file-link </span>{ <span style=\"color: #a0522d;\">word-break</span>: break-all; <span style=\"color: #a0522d;\">width</span>: 320px; }

<span style=\"color: #0000ff;\">#file-list li.directory a </span>{ <span style=\"color: #a0522d;\">background-image</span>: url(watermark/folder.png); }
<span style=\"color: #0000ff;\">#file-list li.mp4 a, #file-list li.mov a, #file-list li.ogv a </span>{ <span style=\"color: #a0522d;\">background-image</span>: url(watermark/video.png); }
<span style=\"color: #0000ff;\">#file-list li.mp3 a, #file-list li.ogg a </span>{ <span style=\"color: #a0522d;\">background-image</span>: url(watermark/audio.png); }

<span style=\"color: #b22222;\">/** </span><span style=\"color: #b22222;\">BASICS *****************************************************</span><span style=\"color: #b22222;\">*/</span>
<span style=\"color: #0000ff;\">h1, h2, h3, h4, h5, h6 </span>{ <span style=\"color: #a0522d;\">margin</span>: 0px; <span style=\"color: #a0522d;\">padding</span>: 0px; }

<span style=\"color: #0000ff;\">body </span>{ <span style=\"color: #a0522d;\">margin-bottom</span>: 130px; }

<span style=\"color: #0000ff;\">.pointer </span>{ <span style=\"color: #a0522d;\">cursor</span>: pointer; }
<span style=\"color: #0000ff;\">.hidden </span>{ <span style=\"color: #a0522d;\">display</span>: none; }
<span style=\"color: #0000ff;\">.clear </span>{ <span style=\"color: #a0522d;\">clear</span>: both; }

<span style=\"color: #b22222;\">/** </span><span style=\"color: #b22222;\">BUTTONS, MOTHERFUCKER, DO YOU USE THEM?! *******************</span><span style=\"color: #b22222;\">*/</span>
<span style=\"color: #0000ff;\">button </span>{ <span style=\"color: #a0522d;\">background</span>: no-repeat 3px 3px; <span style=\"color: #a0522d;\">margin</span>: 3px;  <span style=\"color: #a0522d;\">height</span>: 28px; <span style=\"color: #a0522d;\">width</span>: 40px; <span style=\"color: #a0522d;\">background-color</span>: #ddd; <span style=\"color: #a0522d;\">border-radius</span>: 8px; <span style=\"color: #a0522d;\">cursor</span>: pointer; <span style=\"color: #a0522d;\">text-align</span>: left; }
<span style=\"color: #0000ff;\">button.icon </span>{ <span style=\"color: #a0522d;\">text-indent</span>: 15px; }
<span style=\"color: #0000ff;\">button.big </span>{ <span style=\"color: #a0522d;\">width</span>: 90px; }

<span style=\"color: #b22222;\">/***** </span><span style=\"color: #b22222;\">specific button types ***********************************</span><span style=\"color: #b22222;\">*/</span>
<span style=\"color: #0000ff;\">button.volume-up </span>{ <span style=\"color: #a0522d;\">background-image</span>: url(icons/sound.png); }
<span style=\"color: #0000ff;\">button.volume-down </span>{ <span style=\"color: #a0522d;\">background-image</span>: url(icons/sound_low.png); }
<span style=\"color: #0000ff;\">button.mute </span>{ <span style=\"color: #a0522d;\">background-image</span>: url(icons/sound_mute.png); }

<span style=\"color: #0000ff;\">button.rewind-big </span>{ <span style=\"color: #a0522d;\">background-image</span>: url(icons/resultset_previous.png); }
<span style=\"color: #0000ff;\">button.rewind </span>{ <span style=\"color: #a0522d;\">background-image</span>: url(icons/control_rewind_blue.png); }
<span style=\"color: #0000ff;\">button.stop </span>{ <span style=\"color: #a0522d;\">background-image</span>: url(icons/control_stop_blue.png); }
<span style=\"color: #0000ff;\">button.pause </span>{ <span style=\"color: #a0522d;\">background-image</span>: url(icons/control_pause_blue.png); }
<span style=\"color: #0000ff;\">button.play </span>{ <span style=\"color: #a0522d;\">background-image</span>: url(icons/control_play_blue.png); }
<span style=\"color: #0000ff;\">button.ff </span>{ <span style=\"color: #a0522d;\">background-image</span>: url(icons/control_fastforward_blue.png); }
<span style=\"color: #0000ff;\">button.ff-big </span>{ <span style=\"color: #a0522d;\">background-image</span>: url(icons/resultset_next.png); }
<span style=\"color: #0000ff;\">button.shuffle </span>{ <span style=\"color: #a0522d;\">background-image</span>: url(icons/arrow_switch.png); }</pre>

<p>There isn't a lot to explain here. The button section sets up nice, clickable buttons with those icons I mentioned earlier, the basics provide some utility classes. The <code>Control Panel</code> and <code>Main File List</code> sections should give you a pretty good idea of what the final UI is going to look like, and what those <code>watermark</code> images are for.</p>

<p>Ok, now that we've taken that short, stylish break, onto the meat.</p>

<pre><span style=\"color: #a020f0;\">var</span> <span style=\"color: #a0522d;\">util</span> = {
    <span style=\"color: #0000ff;\">requestJSON</span> : <span style=\"color: #a020f0;\">function</span> (<span style=\"color: #a0522d;\">url</span>, <span style=\"color: #a0522d;\">dat</span>, <span style=\"color: #a0522d;\">type</span>) {
        <span style=\"color: #a020f0;\">var</span> <span style=\"color: #a0522d;\">res</span> = <span style=\"color: #008b8b;\">null</span>;
        $.ajax({
            url: url,
            data: dat,
            type: type,
            <span style=\"color: #0000ff;\">success</span>: <span style=\"color: #a020f0;\">function</span> (<span style=\"color: #a0522d;\">data</span>) { res = $.parseJSON(data); },
            async: <span style=\"color: #008b8b;\">false</span>
        });
        <span style=\"color: #a020f0;\">return</span> res;
    },
    <span style=\"color: #0000ff;\">getJSON</span> : <span style=\"color: #a020f0;\">function</span> (<span style=\"color: #a0522d;\">url</span>, <span style=\"color: #a0522d;\">dat</span>) { <span style=\"color: #a020f0;\">return</span> util.requestJSON(url, dat, <span style=\"color: #8b2252;\">\"GET\"</span>); },
    <span style=\"color: #0000ff;\">postJSON</span> : <span style=\"color: #a020f0;\">function</span> (<span style=\"color: #a0522d;\">url</span>, <span style=\"color: #a0522d;\">dat</span>) { <span style=\"color: #a020f0;\">return</span> util.requestJSON(url, dat, <span style=\"color: #8b2252;\">\"POST\"</span>); }
};

<span style=\"color: #a020f0;\">var</span> <span style=\"color: #a0522d;\">mote</span> = {
    targetId: <span style=\"color: #8b2252;\">\"#file-list\"</span>,
    <span style=\"color: #0000ff;\">render</span>: <span style=\"color: #a020f0;\">function</span> (<span style=\"color: #a0522d;\">fileList</span>) {
        <span style=\"color: #a020f0;\">if</span> (fileList) {
            $(mote.targetId).empty();
            $.each(fileList,
                   <span style=\"color: #a020f0;\">function</span> (<span style=\"color: #a0522d;\">index</span>, <span style=\"color: #a0522d;\">e</span>){
                       <span style=\"color: #a020f0;\">if</span> (e.type == <span style=\"color: #8b2252;\">\"directory\"</span>) 
                           $(mote.targetId).append(templates.folder(e))
                       <span style=\"color: #a020f0;\">else</span> 
                           $(mote.targetId).append(templates.file(e))
                   })
                }
    },
    <span style=\"color: #0000ff;\">renderButton</span>: <span style=\"color: #a020f0;\">function</span> (<span style=\"color: #a0522d;\">control</span>) {
        
    },
    <span style=\"color: #0000ff;\">renderControls</span>: <span style=\"color: #a020f0;\">function</span> (<span style=\"color: #a0522d;\">controlLists</span>) {
        $.each(controlLists,
               <span style=\"color: #a020f0;\">function</span> (<span style=\"color: #a0522d;\">index</span>, <span style=\"color: #a0522d;\">e</span>) {
                   $(<span style=\"color: #8b2252;\">\"#controls\"</span>).append(templates.controlBlock(e));
               })
            },
    <span style=\"color: #0000ff;\">play</span>: <span style=\"color: #a020f0;\">function</span> (<span style=\"color: #a0522d;\">file</span>) {
        console.log([<span style=\"color: #8b2252;\">\"cmd\"</span>, <span style=\"color: #8b2252;\">\"play\"</span>, file]);
        $.post(<span style=\"color: #8b2252;\">\"/play\"</span>,
               {<span style=\"color: #8b2252;\">\"file\"</span> : file},
               <span style=\"color: #a020f0;\">function</span> (<span style=\"color: #a0522d;\">data</span>, <span style=\"color: #a0522d;\">textStatus</span>) { 
                   console.log([<span style=\"color: #8b2252;\">\"now playing\"</span>, file, textStatus]);
               });
    },
    <span style=\"color: #0000ff;\">playDir</span>: <span style=\"color: #a020f0;\">function</span> (<span style=\"color: #a0522d;\">dir</span>) {
        console.log([<span style=\"color: #8b2252;\">\"cmd\"</span>, <span style=\"color: #8b2252;\">\"play\"</span>, <span style=\"color: #8b2252;\">\"directory\"</span>, dir]);
        $.post(<span style=\"color: #8b2252;\">\"/play-directory\"</span>, {<span style=\"color: #8b2252;\">\"dir\"</span>: dir});
    },
    <span style=\"color: #0000ff;\">shuffleDir</span>: <span style=\"color: #a020f0;\">function</span> (<span style=\"color: #a0522d;\">dir</span>) {
        console.log([<span style=\"color: #8b2252;\">\"SHUFFLE\"</span>, dir]);
        $.post(<span style=\"color: #8b2252;\">\"/shuffle-directory\"</span>, {<span style=\"color: #8b2252;\">\"dir\"</span>: dir});
    },
    <span style=\"color: #0000ff;\">command</span>: <span style=\"color: #a020f0;\">function</span> (<span style=\"color: #a0522d;\">cmd</span>) {
        console.log(cmd);
        $.post(<span style=\"color: #8b2252;\">\"/command\"</span>, {<span style=\"color: #8b2252;\">\"command\"</span>: cmd},
               <span style=\"color: #a020f0;\">function</span> () {
                   <span style=\"color: #a020f0;\">if</span> (cmd == <span style=\"color: #8b2252;\">\"pause\"</span>) {
                       <span style=\"color: #a020f0;\">var</span> <span style=\"color: #a0522d;\">btn</span> = templates.control({cmd: <span style=\"color: #8b2252;\">\"play\"</span>, <span style=\"color: #8b2252;\">\"css-class\"</span>: <span style=\"color: #8b2252;\">\"big\"</span>});
                       $(<span style=\"color: #8b2252;\">\"#controls button.pause\"</span>).replaceWith(btn);
                   } <span style=\"color: #a020f0;\">else</span> <span style=\"color: #a020f0;\">if</span> (cmd == <span style=\"color: #8b2252;\">\"play\"</span>) {
                       <span style=\"color: #a020f0;\">var</span> <span style=\"color: #a0522d;\">btn</span> = templates.control({cmd: <span style=\"color: #8b2252;\">\"pause\"</span>, <span style=\"color: #8b2252;\">\"css-class\"</span>: <span style=\"color: #8b2252;\">\"big\"</span>});
                       $(<span style=\"color: #8b2252;\">\"#controls button.play\"</span>).replaceWith(btn);
                   }
               })
    },
    <span style=\"color: #0000ff;\">navigate</span>: <span style=\"color: #a020f0;\">function</span> (<span style=\"color: #a0522d;\">dir</span>) {
        console.log([<span style=\"color: #8b2252;\">\"cmd\"</span>, <span style=\"color: #8b2252;\">\"display\"</span>, dir]);
        mote.render(util.getJSON(<span style=\"color: #8b2252;\">\"/show-directory\"</span>, {<span style=\"color: #8b2252;\">\"dir\"</span>: dir}));
    }
}

Handlebars.registerHelper(<span style=\"color: #8b2252;\">\"control-button\"</span>, <span style=\"color: #a020f0;\">function</span> (<span style=\"color: #a0522d;\">ctrl</span>) {
    <span style=\"color: #a020f0;\">return</span> <span style=\"color: #a020f0;\">new</span> <span style=\"color: #228b22;\">Handlebars.SafeString</span>(templates.control(ctrl));
});

<span style=\"color: #a020f0;\">var</span> <span style=\"color: #a0522d;\">templates</span> = {
    folder : Handlebars.compile($(<span style=\"color: #8b2252;\">\"#tmp-folder\"</span>).html()),
    file : Handlebars.compile($(<span style=\"color: #8b2252;\">\"#tmp-file\"</span>).html()),
    control: Handlebars.compile($(<span style=\"color: #8b2252;\">\"#tmp-control\"</span>).html()),
    controlBlock : Handlebars.compile($(<span style=\"color: #8b2252;\">\"#tmp-control-block\"</span>).html())
}

<span style=\"color: #a020f0;\">var</span> <span style=\"color: #a0522d;\">Routes</span> = Backbone.Router.extend({ 
    routes: {
        <span style=\"color: #8b2252;\">\"navigate*path\"</span>: <span style=\"color: #8b2252;\">\"nav\"</span>
    },
    nav: mote.navigate
});


$(document).ready(<span style=\"color: #a020f0;\">function</span>() {
    mote.renderControls([[{cmd: <span style=\"color: #8b2252;\">\"rewind-big\"</span>}, {cmd: <span style=\"color: #8b2252;\">\"rewind\"</span>}, {cmd: <span style=\"color: #8b2252;\">\"ff\"</span>}, {cmd: <span style=\"color: #8b2252;\">\"ff-big\"</span>}],
                         [{cmd: <span style=\"color: #8b2252;\">\"volume-down\"</span>}, {cmd: <span style=\"color: #8b2252;\">\"mute\"</span>}, {cmd: <span style=\"color: #8b2252;\">\"volume-up\"</span>}],
                         [{cmd: <span style=\"color: #8b2252;\">\"stop\"</span>, <span style=\"color: #8b2252;\">\"css-class\"</span>: <span style=\"color: #8b2252;\">\"big\"</span>}, {cmd: <span style=\"color: #8b2252;\">\"pause\"</span>, <span style=\"color: #8b2252;\">\"css-class\"</span>: <span style=\"color: #8b2252;\">\"big\"</span>}]]);
    mote.render(util.getJSON(<span style=\"color: #8b2252;\">\"/root-directory\"</span>));

    <span style=\"color: #a020f0;\">new</span> <span style=\"color: #228b22;\">Routes</span>();
    Backbone.history.start();
});</pre>

<p>I'm mostly using <code>object</code>s as namespaces here, and find myself wishing<a href=\"#foot-Sat-Oct-06-194416EDT-2012\" name=\"note-Sat-Oct-06-194416EDT-2012\">[2]</a> that JavaScript let me express that more clearly. Ahem. Lets get the quick stuff out of the way first. <code>util</code> is the utility namespace, and contains three helper functions to let me pull JSON data from the server more easily than I could by default. I'm following the functional paradigm and having them <code><span style=\"color: #a020f0;\">return</span></code> their results rather than depend on a callback to do work.</p>

<p>A bit further down,</p>

<pre>Handlebars.registerHelper(<span style=\"color: #8b2252;\">\"control-button\"</span>, <span style=\"color: #a020f0;\">function</span> (<span style=\"color: #a0522d;\">ctrl</span>) {
    <span style=\"color: #a020f0;\">return</span> <span style=\"color: #a020f0;\">new</span> <span style=\"color: #228b22;\">Handlebars.SafeString</span>(templates.control(ctrl));
});

<span style=\"color: #a020f0;\">var</span> <span style=\"color: #a0522d;\">templates</span> = {
    folder : Handlebars.compile($(<span style=\"color: #8b2252;\">\"#tmp-folder\"</span>).html()),
    file : Handlebars.compile($(<span style=\"color: #8b2252;\">\"#tmp-file\"</span>).html()),
    control: Handlebars.compile($(<span style=\"color: #8b2252;\">\"#tmp-control\"</span>).html()),
    controlBlock : Handlebars.compile($(<span style=\"color: #8b2252;\">\"#tmp-control-block\"</span>).html())
}</pre>

<p>is the <code>handlebars</code>-related code. <code>Handlebars.registerHelper</code> is what makes the template helper function from earlier work properly. Note the <code>new Handlebars.SafeString</code> in that <code><span style=\"color: #a020f0;\">return</span></code> line, by the way; <code>handlebars</code> templates escape their inputs by default, so passing a plain <code>string</code> won't quite do what you'd want it to in this situation. <code>templates</code> is the namespace in which we keep individual compiled <code>templates</code>. I mean ... templates. Notice that we're just identifying a DOM element by id, and running a dump of its <code>.html()</code> through the compiler. This is what I meant when I said that hidden <code>div</code>s would work just as well as <code>script</code>s. Your templates can be stored in any DOM element<a href=\"#foot-Sat-Oct-06-194657EDT-2012\" name=\"note-Sat-Oct-06-194657EDT-2012\">[3]</a>, as long as you can reference it when your JS files load. Incidentally, that's why all the <code>script</code> includes in our HTML are at near the bottom of the structure, conveniently after our templates are defined.</p>

<p>Below that, and intruding slightly into the <code>.ready()</code> method is our in-page <code>Router</code>.</p>

<pre><span style=\"color: #a020f0;\">var</span> <span style=\"color: #a0522d;\">Routes</span> = Backbone.Router.extend({ 
    routes: {
        <span style=\"color: #8b2252;\">\"navigate*path\"</span>: <span style=\"color: #8b2252;\">\"nav\"</span>
    },
    nav: mote.navigate
});


$(document).ready(<span style=\"color: #a020f0;\">function</span>() {
    mote.renderControls([[{cmd: <span style=\"color: #8b2252;\">\"rewind-big\"</span>}, {cmd: <span style=\"color: #8b2252;\">\"rewind\"</span>}, {cmd: <span style=\"color: #8b2252;\">\"ff\"</span>}, {cmd: <span style=\"color: #8b2252;\">\"ff-big\"</span>}],
                         [{cmd: <span style=\"color: #8b2252;\">\"volume-down\"</span>}, {cmd: <span style=\"color: #8b2252;\">\"mute\"</span>}, {cmd: <span style=\"color: #8b2252;\">\"volume-up\"</span>}],
                         [{cmd: <span style=\"color: #8b2252;\">\"stop\"</span>, <span style=\"color: #8b2252;\">\"css-class\"</span>: <span style=\"color: #8b2252;\">\"big\"</span>}, {cmd: <span style=\"color: #8b2252;\">\"pause\"</span>, <span style=\"color: #8b2252;\">\"css-class\"</span>: <span style=\"color: #8b2252;\">\"big\"</span>}]]);
    mote.render(util.getJSON(<span style=\"color: #8b2252;\">\"/root-directory\"</span>));

    <span style=\"color: #a020f0;\">new</span> <span style=\"color: #228b22;\">Routes</span>();
    Backbone.history.start();
});</pre>

<p>This is the entire reason I use <code>backbone</code> and its requirement <code>underscore</code><a href=\"#foot-Sat-Oct-06-194746EDT-2012\" name=\"note-Sat-Oct-06-194746EDT-2012\">[4]</a> in this file. The <code>Routes</code> object sets up <code>routes</code> to capture paths starting with <code>#navigate</code>, and calls <code>mote.navigate</code> if it finds one. We do this so that a user of this system will be able to save a link to a particular starting directory. That's also the reason we start the <code>Router</code> up <i>after</i> calling <code>mote.render</code> on the data coming out of <code>/root-directory</code>; that initial rendering would otherwise clobber the result our <code>navigate</code> call. The <code>renderControls</code> call displays all the assorted media buttons we'll need to acceptably control playback.</p>

<p>Lets take a detour before finishing up though; <code>root-directory</code> is for the moment just a text file with some test JSON data in it.</p>

<pre>[{<span style=\"color: #8b2252;\">\"path\"</span>: <span style=\"color: #8b2252;\">\"/home/inaimathi/videos/a-show\"</span>, 
  <span style=\"color: #8b2252;\">\"type\"</span>: <span style=\"color: #8b2252;\">\"directory\"</span>, <span style=\"color: #8b2252;\">\"name\"</span>: <span style=\"color: #8b2252;\">\"a-show\"</span>}, 
 {<span style=\"color: #8b2252;\">\"path\"</span>: <span style=\"color: #8b2252;\">\"/home/inaimathi/videos/friendship-is-magic\"</span>, 
  <span style=\"color: #8b2252;\">\"type\"</span>: <span style=\"color: #8b2252;\">\"directory\"</span>, <span style=\"color: #8b2252;\">\"name\"</span>: <span style=\"color: #8b2252;\">\"friendship-is-magic\"</span>}, 
 {<span style=\"color: #8b2252;\">\"path\"</span>: <span style=\"color: #8b2252;\">\"/home/inaimathi/videos/khan-academy\"</span>, 
  <span style=\"color: #8b2252;\">\"type\"</span>: <span style=\"color: #8b2252;\">\"directory\"</span>, <span style=\"color: #8b2252;\">\"name\"</span>: <span style=\"color: #8b2252;\">\"khan-academy\"</span>}, 
 {<span style=\"color: #8b2252;\">\"path\"</span>: <span style=\"color: #8b2252;\">\"/home/inaimathi/videos/porn\"</span>, 
  <span style=\"color: #8b2252;\">\"type\"</span>: <span style=\"color: #8b2252;\">\"directory\"</span>, <span style=\"color: #8b2252;\">\"name\"</span>: <span style=\"color: #8b2252;\">\"porn\"</span>}, 
 {<span style=\"color: #8b2252;\">\"path\"</span>: <span style=\"color: #8b2252;\">\"/home/inaimathi/videos/bizarre-porn\"</span>, 
  <span style=\"color: #8b2252;\">\"type\"</span>: <span style=\"color: #8b2252;\">\"directory\"</span>, <span style=\"color: #8b2252;\">\"name\"</span>: <span style=\"color: #8b2252;\">\"bizarre porn\"</span>}, 
 {<span style=\"color: #8b2252;\">\"path\"</span>: <span style=\"color: #8b2252;\">\"/home/inaimathi/videos/horrible-porn\"</span>, 
  <span style=\"color: #8b2252;\">\"type\"</span>: <span style=\"color: #8b2252;\">\"directory\"</span>, <span style=\"color: #8b2252;\">\"name\"</span>: <span style=\"color: #8b2252;\">\"horrible porn\"</span>}, 
 {<span style=\"color: #8b2252;\">\"path\"</span>: <span style=\"color: #8b2252;\">\"/home/inaimathi/videos/unforgivable-porn\"</span>, 
  <span style=\"color: #8b2252;\">\"type\"</span>: <span style=\"color: #8b2252;\">\"directory\"</span>, <span style=\"color: #8b2252;\">\"name\"</span>: <span style=\"color: #8b2252;\">\"unforgivable porn\"</span>}, 
 {<span style=\"color: #8b2252;\">\"path\"</span>: <span style=\"color: #8b2252;\">\"/home/inaimathi/videos/Clojure-for-Lisp-Programmers-Part-1.mov\"</span>, 
  <span style=\"color: #8b2252;\">\"type\"</span>: <span style=\"color: #8b2252;\">\"mov\"</span>, <span style=\"color: #8b2252;\">\"name\"</span>: <span style=\"color: #8b2252;\">\"Clojure-for-Lisp-Programmers-Part-1.mov\"</span>}, 
 {<span style=\"color: #8b2252;\">\"path\"</span>: <span style=\"color: #8b2252;\">\"/home/inaimathi/videos/Clojure-for-Lisp-Programmers-Part-2.mov\"</span>, 
  <span style=\"color: #8b2252;\">\"type\"</span>: <span style=\"color: #8b2252;\">\"mov\"</span>, <span style=\"color: #8b2252;\">\"name\"</span>: <span style=\"color: #8b2252;\">\"Clojure-for-Lisp-Programmers-Part-2.mov\"</span>}, 
 {<span style=\"color: #8b2252;\">\"path\"</span>: <span style=\"color: #8b2252;\">\"/home/inaimathi/videos/Eben-Moglen--Why-Freedom-of-Thought-Requires-Free-Media-and-Why-Free-Media-Require-Free-Technology.mp4\"</span>, 
  <span style=\"color: #8b2252;\">\"type\"</span>: <span style=\"color: #8b2252;\">\"mp4\"</span>, <span style=\"color: #8b2252;\">\"name\"</span>: <span style=\"color: #8b2252;\">\"Eben-Moglen--Why-Freedom-of-Thought-Requires-Free-Media-and-Why-Free-Media-Require-Free-Technology.mp4\"</span>}, 
 {<span style=\"color: #8b2252;\">\"path\"</span>: <span style=\"color: #8b2252;\">\"/home/inaimathi/videos/Epic-Wub-Time--Musicians-of-Ponyville.mp4\"</span>, 
  <span style=\"color: #8b2252;\">\"type\"</span>: <span style=\"color: #8b2252;\">\"mp4\"</span>, <span style=\"color: #8b2252;\">\"name\"</span>: <span style=\"color: #8b2252;\">\"Epic-Wub-Time--Musicians-of-Ponyville.mp4\"</span>}, 
 {<span style=\"color: #8b2252;\">\"path\"</span>: <span style=\"color: #8b2252;\">\"/home/inaimathi/videos/Project-Glass--Live-Demo-At-Google-I-O.mp4\"</span>, 
  <span style=\"color: #8b2252;\">\"type\"</span>: <span style=\"color: #8b2252;\">\"mp4\"</span>, <span style=\"color: #8b2252;\">\"name\"</span>: <span style=\"color: #8b2252;\">\"Project-Glass--Live-Demo-At-Google-I-O.mp4\"</span>}, 
 {<span style=\"color: #8b2252;\">\"path\"</span>: <span style=\"color: #8b2252;\">\"/home/inaimathi/videos/in-the-fall-of-gravity.mp4\"</span>, 
  <span style=\"color: #8b2252;\">\"type\"</span>: <span style=\"color: #8b2252;\">\"mp4\"</span>, <span style=\"color: #8b2252;\">\"name\"</span>: <span style=\"color: #8b2252;\">\"in-the-fall-of-gravity.mp4\"</span>}, 
 {<span style=\"color: #8b2252;\">\"path\"</span>: <span style=\"color: #8b2252;\">\"/home/inaimathi/videos/beethoven-symphony-no-9.mp3\"</span>, 
  <span style=\"color: #8b2252;\">\"type\"</span>: <span style=\"color: #8b2252;\">\"mp3\"</span>, <span style=\"color: #8b2252;\">\"name\"</span>: <span style=\"color: #8b2252;\">\"beethoven-symphony-no-9.mp3\"</span>},
 {<span style=\"color: #8b2252;\">\"path\"</span>: <span style=\"color: #8b2252;\">\"/home/inaimathi/videos/first-lsdj.ogg\"</span>, 
  <span style=\"color: #8b2252;\">\"type\"</span>: <span style=\"color: #8b2252;\">\"ogg\"</span>, <span style=\"color: #8b2252;\">\"name\"</span>: <span style=\"color: #8b2252;\">\"first-lsdj.ogg\"</span>}]</pre>

<p>It's a list of files and directories that a server could reasonably put together and transmit out to the front end just by <code>map</code>ping over the output of <code>listdir</code> or similar. The front-end will expect data represented in roughly this format in order to display a list of files.</p>

<p>Now that we've got an idea of what the data looks like, the last piece of this system can fall into place.</p>

<pre><span style=\"color: #a020f0;\">var</span> <span style=\"color: #a0522d;\">mote</span> = {
    targetId: <span style=\"color: #8b2252;\">\"#file-list\"</span>,
    <span style=\"color: #0000ff;\">render</span>: <span style=\"color: #a020f0;\">function</span> (<span style=\"color: #a0522d;\">fileList</span>) {
        <span style=\"color: #a020f0;\">if</span> (fileList) {
            $(mote.targetId).empty();
            $.each(fileList,
                   <span style=\"color: #a020f0;\">function</span> (<span style=\"color: #a0522d;\">index</span>, <span style=\"color: #a0522d;\">e</span>){
                       <span style=\"color: #a020f0;\">if</span> (e.type == <span style=\"color: #8b2252;\">\"directory\"</span>) 
                           $(mote.targetId).append(templates.folder(e))
                       <span style=\"color: #a020f0;\">else</span> 
                           $(mote.targetId).append(templates.file(e))
                   })
                }
    },
    <span style=\"color: #0000ff;\">renderControls</span>: <span style=\"color: #a020f0;\">function</span> (<span style=\"color: #a0522d;\">controlLists</span>) {
        $.each(controlLists,
               <span style=\"color: #a020f0;\">function</span> (<span style=\"color: #a0522d;\">index</span>, <span style=\"color: #a0522d;\">e</span>) {
                   $(<span style=\"color: #8b2252;\">\"#controls\"</span>).append(templates.controlBlock(e));
               })
            },
    <span style=\"color: #0000ff;\">play</span>: <span style=\"color: #a020f0;\">function</span> (<span style=\"color: #a0522d;\">file</span>) {
        console.log([<span style=\"color: #8b2252;\">\"cmd\"</span>, <span style=\"color: #8b2252;\">\"play\"</span>, file]);
        $.post(<span style=\"color: #8b2252;\">\"/play\"</span>,
               {<span style=\"color: #8b2252;\">\"file\"</span> : file},
               <span style=\"color: #a020f0;\">function</span> (<span style=\"color: #a0522d;\">data</span>, <span style=\"color: #a0522d;\">textStatus</span>) { 
                   console.log([<span style=\"color: #8b2252;\">\"now playing\"</span>, file, textStatus]);
               });
    },
    <span style=\"color: #0000ff;\">playDir</span>: <span style=\"color: #a020f0;\">function</span> (<span style=\"color: #a0522d;\">dir</span>) {
        console.log([<span style=\"color: #8b2252;\">\"cmd\"</span>, <span style=\"color: #8b2252;\">\"play\"</span>, <span style=\"color: #8b2252;\">\"directory\"</span>, dir]);
        $.post(<span style=\"color: #8b2252;\">\"/play-directory\"</span>, {<span style=\"color: #8b2252;\">\"dir\"</span>: dir});
    },
    <span style=\"color: #0000ff;\">shuffleDir</span>: <span style=\"color: #a020f0;\">function</span> (<span style=\"color: #a0522d;\">dir</span>) {
        console.log([<span style=\"color: #8b2252;\">\"SHUFFLE\"</span>, dir]);
        $.post(<span style=\"color: #8b2252;\">\"/shuffle-directory\"</span>, {<span style=\"color: #8b2252;\">\"dir\"</span>: dir});
    },
    <span style=\"color: #0000ff;\">command</span>: <span style=\"color: #a020f0;\">function</span> (<span style=\"color: #a0522d;\">cmd</span>) {
        console.log(cmd);
        $.post(<span style=\"color: #8b2252;\">\"/command\"</span>, {<span style=\"color: #8b2252;\">\"command\"</span>: cmd},
               <span style=\"color: #a020f0;\">function</span> () {
                   <span style=\"color: #a020f0;\">if</span> (cmd == <span style=\"color: #8b2252;\">\"pause\"</span>) {
                       <span style=\"color: #a020f0;\">var</span> <span style=\"color: #a0522d;\">btn</span> = templates.control({cmd: <span style=\"color: #8b2252;\">\"play\"</span>, <span style=\"color: #8b2252;\">\"css-class\"</span>: <span style=\"color: #8b2252;\">\"big\"</span>});
                       $(<span style=\"color: #8b2252;\">\"#controls button.pause\"</span>).replaceWith(btn);
                   } <span style=\"color: #a020f0;\">else</span> <span style=\"color: #a020f0;\">if</span> (cmd == <span style=\"color: #8b2252;\">\"play\"</span>) {
                       <span style=\"color: #a020f0;\">var</span> <span style=\"color: #a0522d;\">btn</span> = templates.control({cmd: <span style=\"color: #8b2252;\">\"pause\"</span>, <span style=\"color: #8b2252;\">\"css-class\"</span>: <span style=\"color: #8b2252;\">\"big\"</span>});
                       $(<span style=\"color: #8b2252;\">\"#controls button.play\"</span>).replaceWith(btn);
                   }
               })
    },
    <span style=\"color: #0000ff;\">navigate</span>: <span style=\"color: #a020f0;\">function</span> (<span style=\"color: #a0522d;\">dir</span>) {
        console.log([<span style=\"color: #8b2252;\">\"cmd\"</span>, <span style=\"color: #8b2252;\">\"display\"</span>, dir]);
        mote.render(util.getJSON(<span style=\"color: #8b2252;\">\"/show-directory\"</span>, {<span style=\"color: #8b2252;\">\"dir\"</span>: dir}));
    }
}</pre>

<p>The <code>mote</code> namespace contains all the relevant navigation commands that we'll need<a href=\"#foot-Sat-Oct-06-195028EDT-2012\" name=\"note-Sat-Oct-06-195028EDT-2012\">[5]</a>. The <code>render</code> functions do exactly what you'd think. <code>render</code> clears the current file list, takes a list of file and directory objects, and runs them through the <code>file</code> or <code>folder</code> template as appropriate, appending the result to the file list. <code>renderControls</code> takes a tree of <code>control</code> objects and runs them through the <code>controlBlock</code> template, which in turn runs each through the <code>control</code> template and wraps the results in a <code>ul</code>.</p>

<p>The various <code>play</code>/<code>shuffle</code> functions pass file or directory names to whatever back-end process we'll be running this on top of. The <code>command</code> function is the thing that gets called by each control button. For the most part, it just passes that fact along to the back-end system and calls it a day, but there's additional logic for of <code>pause</code> and <code>play</code> signals. In that case, it also switches out the <code>oause</code> button for the <code>play</code> button, cycling between the two on every successful invocation. This is the difficulty I mentioned earlier, and it could still use a helper function or two<a href=\"#foot-Sat-Oct-06-195220EDT-2012\" name=\"note-Sat-Oct-06-195220EDT-2012\">[6]</a>. Consider how you would write that code</p>

<ul>
  <li>using <code>$(\"#controls button\").click()</code> instead of inlined <code>onclick</code> events.</li>
  <li>without a separate <code>control</code> template.</li>
  <li>without using templates at all (<code>handlebars</code> or otherwise).</li>
</ul>

<p>The last part is the <code>navigate</code> function. It uses <code>util.getJSON</code> to request a new set of folders/files and <code>render</code>s them.</p>

<p>And that's it.</p>

<p>This complete front-end, including the CSS weighs in at just over 200 lines of code. It doesn't do anything yet, but that's just because we haven't slapped it in front of an application server. Note that it will be <i>completely</i>, <i>entirely</i> separate from whatever back-end we end up using. It'll work as long as said back-end supports the appropriate requests, and returns the correct data from <code>/show-directory</code> and <code>/root-directory</code>. In fact, if you'd like to make a compatible back-end, all you need to do is provide the following:</p>

<ul>
  <li><code>/root-directory</code></li>
  <li><code>/show-directory</code> <i>(we could probably get rid of the previous handler by letting this one take a zero-parameter request)</i></li>
  <li><code>/play</code></li>
  <li><code>/play-directory</code> <i>(if you wanted to provide a polymorphic <code>play</code> handler, you could do without this one)</i></li>
  <li><code>/shuffle-directory</code></li>
  <li><code>/command</code></li>
</ul>

<p>That's slightly misleading because the <code>command</code> handler needs to respond to 10 different parameters, depending on what button the user presses, but it's still much simpler than re-writing the front end for each new back-end. This cuts both ways too; someone wanting to implement their own front-end to the corresponding server needs to implement as many of those handlers as they'll need, and they're good to go.</p>

<p>Keep in mind that this is half the total goal. Next time, we'll see exactly how simple the server-side can get when we completely remove user interface concerns from it. Anyway, thus endeth the lesson. I'm not updating the github repo until I get around to a complete RasPi-compatible media server, but the above code should be easy enough to play with.</p>

<hr />
<h5>Footnotes</h5>
<p>1 - <a href=\"#note-Sat-Oct-06-194031EDT-2012\" name=\"foot-Sat-Oct-06-194031EDT-2012\">[back]</a> - It would actually have been even more complicated than that, because it wouldn't have been enough to naively run <code>$(<span style=\"color: #8b2252;\">\"button\"</span>).click(...)</code> again. That would put duplicate events on every button that wasn't replaced. I'd have gotten into the situation of either targeting just the new button separately, incurring code duplication, or writing the setup function in such a way that it unbound the click event for all buttons first, then re-bound them. That's ... inelegant.</p>

<p>2 - <a href=\"#note-Sat-Oct-06-194416EDT-2012\" name=\"foot-Sat-Oct-06-194416EDT-2012\">[back]</a> - Not for the first time.</p>

<p>3 - <a href=\"#note-Sat-Oct-06-194657EDT-2012\" name=\"foot-Sat-Oct-06-194657EDT-2012\">[back]</a> - Or even <a href=\"http://handlebarsjs.com/precompilation.html\">pre-compiled</a>, if you feel like mucking about with <a href=\"http://nodejs.org/\">node.js</a> for a bit.</p>

<p>4 - <a href=\"#note-Sat-Oct-06-194746EDT-2012\" name=\"foot-Sat-Oct-06-194746EDT-2012\">[back]</a> - To be fair, I guess, <code>underscore.js</code> also has a half-way decent looking <a href=\"http://underscorejs.org/#template\">templating system</a> itself. It looks minimal, but flexible, and I'll be playing around with it a bit after this write up in an effort to potentially boot <code>handlebars</code> out of the include tree.</p>

<p>5 - <a href=\"#note-Sat-Oct-06-195028EDT-2012\" name=\"foot-Sat-Oct-06-195028EDT-2012\">[back]</a> - <code>console.log</code> calls have been left in for testing purposes, in case you want to take this pure front-end for a spin, by the way. It actually works if you have a reasonably recent browser.</p>

<p>6 - <a href=\"#note-Sat-Oct-06-195220EDT-2012\" name=\"foot-Sat-Oct-06-195220EDT-2012\">[back]</a> - Which I'll put in if it turns out that more than one button needs this kind of behavior.</p>
   "))
((5202 3723 594024000) :INSERT (106 :POSTED 3558484800))
((5202 3723 594027000) :INSERT (106 :TAG :ALMOST-LITERATE-PROGRAMMING))
((5202 3723 594029000) :INSERT (106 :TAG :CLIENT-SIDE))
((5202 3723 594031000) :INSERT (106 :TAG :CSS))
((5202 3723 594033000) :INSERT (106 :TAG :HTML))
((5202 3723 594039000) :INSERT (106 :TAG :HTML5))
((5202 3723 594041000) :INSERT (106 :TAG :JAVASCRIPT))
((5202 3723 594043000) :INSERT (106 :TAG :JQUERY))
((5202 3723 594705000) :INSERT
 (107 :TITLE
  "WebMote the Right Way™© Part 2, or \"Controlling my Media via WiFi and RasPi\""))
((5202 3723 594710000) :INSERT (107 :FILE "webmote-the-right-way--part2.html"))
((5202 3723 594715000) :INSERT (107 :EDITED 3610301411))
((5202 3723 594717000) :INSERT
 (107 :BODY
  "<p>And we're back. Part one was the previous article, so I'm not going to bother linking you to it. This time around we're taking a look at one possible back-end to the web-based media interface we cooked up last time. <a href=\"https://github.com/Inaimathi/web-mote\">The github has been updated</a>, by the by. First off, there ended up being some change required to the front-end, mostly for browser compatibility purposes.</p>

<p>First, some browsers apparently don't pick up content from a jQuery ajax request. I ran into this with an older version of <a href=\"http://www.apple.com/safari/\">Safari</a>, and comparably recent versions of <a href=\"http://conkeror.org/\">Conkeror</a>. If you try to do </p>

<pre>$.ajax({url: <span style=\"color: #8b2252;\">\"foo\"</span>, 
        data: {...}, 
        <span style=\"color: #0000ff;\">success</span>: <span style=\"color: #a020f0;\">function</span> (<span style=\"color: #a0522d;\">data</span>) { 
           alert(JSON.stringify(data)); 
        }});</pre>

<p>what you'll get is not <code>\"Stuff the page sent you\"</code>, but rather <code>\"\"</code>. I have no idea why this is; checking the return value from the server confirmed that it was sending the correct stuff, but it wasn't making it to client side for some reason. I know it's a <i>browser</i> issue because Iceweasel and Chromium both did what I was expecting them to and returned the request contents. I solved <i>that</i> by using the jQuery <code>jqXHR</code> object return value available in reasonably recent versions of the framework. In other words</p>

<pre>$.ajax({url: <span style=\"color: #8b2252;\">\"foo\"</span>, 
        data: {...}, 
        <span style=\"color: #0000ff;\">success</span>: <span style=\"color: #a020f0;\">function</span> (<span style=\"color: #a0522d;\">data</span>, <span style=\"color: #a0522d;\">status</span>, <span style=\"color: #a0522d;\">jq</span>) { 
           alert(JSON.stringify(jq.responseText)); 
        }});</pre>

<p>No idea why this works while the earlier doesn't, but there you have it. The other problem I ran into was that <a href=\"http://stackoverflow.com/questions/743123/fixed-positioning-in-mobile-safari\">older versions of mobile Safari don't respect <code>position: fixed;</code></a>. That doesn't sound like it'll be a big deal to most people, but I <i>specifically</i> wrote <a href=\"https://github.com/Inaimathi/web-mote\">Web-Mote</a> so that I could use my first-gen iPod Touch as a remote.</p>

<p>Styling the control panel at runtime solves that problem, assuming the stylesheet doesn't have any <code>position</code> settings.</p>

<pre><span style=\"color: #b22222;\">// </span><span style=\"color: #b22222;\">older versions of safari don't like `position: fixed`.
</span><span style=\"color: #b22222;\">// </span><span style=\"color: #b22222;\">they also don't like when you set `position: fixed` in a stylesheet,
</span><span style=\"color: #b22222;\">//   </span><span style=\"color: #b22222;\">then override that with inline styles.
</span><span style=\"color: #b22222;\">// </span><span style=\"color: #b22222;\">what I'm saying is that older versions of safari are assholes
</span><span style=\"color: #a020f0;\">if</span> ($.browser.safari) {
    $(<span style=\"color: #8b2252;\">\"#controls\"</span>).css({ <span style=\"color: #8b2252;\">\"position\"</span>: <span style=\"color: #8b2252;\">'absolute'</span> });
    window.onscroll = <span style=\"color: #a020f0;\">function</span>() {
        $(<span style=\"color: #8b2252;\">\"#controls\"</span>).css({ 
            <span style=\"color: #8b2252;\">\"top\"</span> : window.pageYOffset + <span style=\"color: #8b2252;\">'px'</span>
        });
    };
} <span style=\"color: #a020f0;\">else</span> {
    $(<span style=\"color: #8b2252;\">\"#controls\"</span>).css({ <span style=\"color: #8b2252;\">\"position\"</span>: <span style=\"color: #8b2252;\">'fixed'</span> });    
}</pre>

<p>Finally, it turns out that there's at least one case where we'll be rendering a directory, but not want the play/shuffle buttons. To that end, the protocol needs to change very slightly to accommodate a field specifying whether to render a button. The template needs to change too.</p>

<pre>    &lt;<span style=\"color: #0000ff;\">script</span> <span style=\"color: #a0522d;\">id</span>=<span style=\"color: #8b2252;\">\"tmp-folder\"</span> <span style=\"color: #a0522d;\">type</span>=<span style=\"color: #8b2252;\">\"text/x-handlebars-template\"</span>&gt;
      &lt;<span style=\"color: #0000ff;\">li</span> <span style=\"color: #a0522d;\">class</span>=<span style=\"color: #8b2252;\">\"{{type}}\"</span>&gt;
        {{#if buttons}}
        &lt;<span style=\"color: #0000ff;\">button</span> <span style=\"color: #a0522d;\">class</span>=<span style=\"color: #8b2252;\">\"play icon play\"</span> <span style=\"color: #a0522d;\">onclick</span>=<span style=\"color: #8b2252;\">\"mote.play('{{path}}')\"</span>&gt;&lt;/<span style=\"color: #0000ff;\">button</span>&gt;
        &lt;<span style=\"color: #0000ff;\">button</span> <span style=\"color: #a0522d;\">class</span>=<span style=\"color: #8b2252;\">\"shuffle icon shuffle\"</span> <span style=\"color: #a0522d;\">onclick</span>=<span style=\"color: #8b2252;\">\"mote.shuffleDir('{{path}}')\"</span>&gt;&lt;/<span style=\"color: #0000ff;\">button</span>&gt;
        {{/if}}
        &lt;<span style=\"color: #0000ff;\">a</span> <span style=\"color: #a0522d;\">class</span>=<span style=\"color: #8b2252;\">\"dir-link\"</span> <span style=\"color: #a0522d;\">href</span>=<span style=\"color: #8b2252;\">\"#navigate{{path}}\"</span>&gt;{{name}}&lt;/<span style=\"color: #0000ff;\">a</span>&gt;
      &lt;/<span style=\"color: #0000ff;\">li</span>&gt;
    &lt;/<span style=\"color: #0000ff;\">script</span>&gt;</pre>

<p>Oh, actually, I also ended up making those handler changes mentioned last time. WebMote now has exactly four required handlers<a href=\"#foot-Mon-Oct-08-140346EDT-2012\" name=\"note-Mon-Oct-08-140346EDT-2012\">[1]</a>:</p>

<ul>
  <li><code>/show-directory</code> <i>(a zero-parameter request gets the root directory)</i></li>
  <li><code>/play</code></li>
  <li><code>/shuffle-directory</code></li>
  <li><code>/command</code></li>
</ul> 

<p>That's it for changes to the front-end since last time, but let me share some random thoughts before going on to the server-side.</p>

<h3>Interlude - The State of Lisp Web Development on ARM</h3>

<p>My usual web development stack is <a href=\"http://weitz.de/hunchentoot/\">Hunchentoot</a> on top of <a href=\"http://www.sbcl.org/platform-table.html\">SBCL</a>, which turns out to be a problem. You may have noticed that there's no ARM port in that SBCL link. Not \"no Debian package\", no port period. I guess I could technically grab the source, and laboriously <code>gcc</code> up my own, but I'm honestly neither patient nor smart enough to. <a href=\"http://savannah.gnu.org/support/?107611#discussion\">GCL doesn't play nice with quicklisp</a> which kind of makes that a non-starter for me regardless of how mind-bogglingly fast it claims to be, <a href=\"http://packages.debian.org/sid/cmucl-source\">CMUCL</a> requires <a href=\"http://xkcd.com/754/\">a working CMUCL system</a> to be built from source and isn't in the Wheezy repos, which leaves <a href=\"http://www.clisp.org/\">CLISP</a><a href=\"#foot-Mon-Oct-08-140353EDT-2012\" name=\"note-Mon-Oct-08-140353EDT-2012\">[2]</a>.</p>

<p>Which I <i>would</i> use if it played nicely with <a href=\"https://github.com/sellout/external-program/wiki/API\">external-program</a>. Sadly, </p>

<pre>*** - CLISP does not support supplying streams for input or output.
The following restarts are available:
ABORT          :R1      Abort main loop</pre>

<p>Meaning that I could spawn an instance of <code>mplayer</code> or <code>omxplayer</code>, but I wouldn't be able to communicate with it after the fact.</p>

<p>Woo.</p>

<p>Anyway, the long and the short of it is that putting together a Common Lisp solution to this problem on an ARM machine is pretty far from trivial, involving one of</p>

<ul>
  <li>manual installation of Hunchentoot<a href=\"#foot-Mon-Oct-08-140419EDT-2012\" name=\"note-Mon-Oct-08-140419EDT-2012\">[3]</a></li>
  <li>resolving the CMUCL cyclical requirements graph</li>
  <li>compiling your own SBCL</li>
</ul>

<p>Which is why this first stab is written in Python, and a follow-up is probably going to be using Haskell rather than CL.</p>

<h3>WebMote the Right Way™© -- Server Side</h3>

<p>First off, have an updated tree</p>

<pre>web-mote
&#9500;&#9472;&#9472; conf.py
&#9500;&#9472;&#9472; LICENSE
&#9500;&#9472;&#9472; README.md
&#9500;&#9472;&#9472; static
&#9474;   &#9500;&#9472;&#9472; css
&#9474;   &#9474;   &#9500;&#9472;&#9472; custom-theme <span style=\"color: #b22222;\">## </span><span style=\"color: #b22222;\">same as last time
</span>&#9474;   &#9474;   &#9500;&#9472;&#9472; icons <span style=\"color: #b22222;\">## </span><span style=\"color: #b22222;\">this too
</span>&#9474;   &#9474;   &#9500;&#9472;&#9472; style.css
&#9474;   &#9474;   &#9492;&#9472;&#9472; watermark <span style=\"color: #b22222;\">## </span><span style=\"color: #b22222;\">and this
</span>&#9474;   &#9500;&#9472;&#9472; js
&#9474;   &#9474;   &#9500;&#9472;&#9472; backbone-min.js
&#9474;   &#9474;   &#9500;&#9472;&#9472; handlebars-1.0.rc.1.js
&#9474;   &#9474;   &#9500;&#9472;&#9472; jquery.min.js
&#9474;   &#9474;   &#9500;&#9472;&#9472; jquery-ui-1.8.13.custom.min.js
&#9474;   &#9474;   &#9500;&#9472;&#9472; underscore-min.js
&#9474;   &#9474;   &#9492;&#9472;&#9472; web-mote.js
&#9474;   &#9500;&#9472;&#9472; show-directory
&#9474;   &#9492;&#9472;&#9472; web-mote.html
&#9500;&#9472;&#9472; util.py
&#9492;&#9472;&#9472; web-mote.py</pre>

<p>You can easily find this over at <a href=\"https://github.com/Inaimathi/web-mote\">the github repo</a>, of course, but I wanted to let you know what you were in for. There's only three files to go through, and we'll tackle the meat first this time around.</p>

<pre><span style=\"color: #b22222;\">## web-mote.py
</span><span style=\"color: #a020f0;\">from</span> subprocess <span style=\"color: #a020f0;\">import</span> Popen, PIPE
<span style=\"color: #a020f0;\">import</span> web, os, json
<span style=\"color: #a020f0;\">import</span> util, conf

<span style=\"color: #a0522d;\">urls</span> = (
    <span style=\"color: #8b2252;\">'/show-directory'</span>, <span style=\"color: #8b2252;\">'showDirectory'</span>,
    <span style=\"color: #8b2252;\">'/shuffle-directory'</span>, <span style=\"color: #8b2252;\">'shuffleDirectory'</span>,
    <span style=\"color: #8b2252;\">'/play'</span>, <span style=\"color: #8b2252;\">'play'</span>,
    <span style=\"color: #8b2252;\">'/command'</span>, <span style=\"color: #8b2252;\">'command'</span>,
    <span style=\"color: #8b2252;\">'.*'</span>, <span style=\"color: #8b2252;\">'index'</span>
)
<span style=\"color: #a0522d;\">app</span> = web.application(urls, <span style=\"color: #7a378b;\">globals</span>())

<span style=\"color: #a020f0;\">class</span> <span style=\"color: #228b22;\">showDirectory</span>:
    <span style=\"color: #a020f0;\">def</span> <span style=\"color: #0000ff;\">POST</span>(<span style=\"color: #a020f0;\">self</span>):
        <span style=\"color: #a020f0;\">if</span> web.input() == {}:
            res = util.entriesToJSON(conf.root)
        <span style=\"color: #a020f0;\">elif</span> web.input()[<span style=\"color: #8b2252;\">'dir'</span>] == <span style=\"color: #8b2252;\">\"root\"</span>:
            res = util.entriesToJSON(conf.root)
        <span style=\"color: #a020f0;\">else</span>:
            res = util.dirToJSON(web.input()[<span style=\"color: #8b2252;\">'dir'</span>])
        <span style=\"color: #a020f0;\">return</span> res

<span style=\"color: #a020f0;\">class</span> <span style=\"color: #228b22;\">shuffleDirectory</span>:
    <span style=\"color: #a020f0;\">def</span> <span style=\"color: #0000ff;\">POST</span>(<span style=\"color: #a020f0;\">self</span>):
        web.debug([<span style=\"color: #8b2252;\">\"SHUFFLING\"</span>, web.input()])

<span style=\"color: #a020f0;\">class</span> <span style=\"color: #228b22;\">play</span>:
    <span style=\"color: #a020f0;\">def</span> <span style=\"color: #0000ff;\">POST</span>(<span style=\"color: #a020f0;\">self</span>):
        <span style=\"color: #a020f0;\">try</span>:
            playFile(web.input()[<span style=\"color: #8b2252;\">'file'</span>])
        <span style=\"color: #a020f0;\">except</span>:
            web.debug(web.input())

<span style=\"color: #a020f0;\">def</span> <span style=\"color: #0000ff;\">playFile</span>(aFile):
    <span style=\"color: #a020f0;\">if</span> os.path.exists(aFile):
        <span style=\"color: #a020f0;\">if</span> conf.currentPlayer:
            conf.currentPlayer[1].terminate()
        t = util.typeOfFile(aFile)
    <span style=\"color: #b22222;\">## mplayer suicides if its stdout and stderr are ignored for a while,
</span>    <span style=\"color: #b22222;\">## so we're only grabbing stdin here
</span>        conf.currentPlayer = (conf.player[t][0], Popen(conf.player[t] + [aFile], stdin=PIPE))

<span style=\"color: #a020f0;\">class</span> <span style=\"color: #228b22;\">command</span>:
    <span style=\"color: #a020f0;\">def</span> <span style=\"color: #0000ff;\">POST</span>(<span style=\"color: #a020f0;\">self</span>):
        cmd = web.input()[<span style=\"color: #8b2252;\">'command'</span>]
        <span style=\"color: #a020f0;\">if</span> conf.currentPlayer:
            (playerName, proc) = conf.currentPlayer
            proc.stdin.write(conf.commands[playerName][cmd])
            <span style=\"color: #a020f0;\">if</span> cmd == <span style=\"color: #8b2252;\">'stop'</span>:
                conf.currentPlayer = <span style=\"color: #a020f0;\">False</span>

<span style=\"color: #a020f0;\">class</span> <span style=\"color: #228b22;\">index</span>:
    <span style=\"color: #a020f0;\">def</span> <span style=\"color: #0000ff;\">GET</span>(<span style=\"color: #a020f0;\">self</span>):
        <span style=\"color: #a020f0;\">raise</span> web.seeother(<span style=\"color: #8b2252;\">\"/static/web-mote.html\"</span>)

<span style=\"color: #a020f0;\">if</span> <span style=\"color: #7a378b;\">__name__</span> == <span style=\"color: #8b2252;\">\"__main__\"</span>:
    app.run()</pre>

<p>It's a very simple <a href=\"http://webpy.org/\">web.py</a> application that does the job of spawning external OS processes, then feeding them <code>input</code> based on user clicks on the front-end. I'll assume the routing table, <code>app.run()</code> call and <code><span style=\"color: #a020f0;\">import</span></code> statements are self-explanatory. <code>web.py</code> routes requests to various named classes which are expected to have <code>POST</code> and/or <code>GET</code> methods attached. If you know the basics of how HTTP works, it should be obvious why.</p>

<p>The <code>index</code> handler at the bottom there just routes a request to our \"static\" front-end. <code>showDirectory</code> expects a pathname and returns a list of contents of the target<a href=\"#foot-Mon-Oct-08-140558EDT-2012\" name=\"note-Mon-Oct-08-140558EDT-2012\">[4]</a> using a bunch of <code>toJSON</code> utility functions from <code>util</code>. <code>shuffleDirectory</code> is currently a no-op that echoes something to the debug stream. <code>play</code> attempts to <code>playFile</code> its argument, and prints a debug statement if that fails. The only two interesting constructs here are <code>playFile</code> itself and <code>command</code>.</p>

<pre><span style=\"color: #a020f0;\">def</span> <span style=\"color: #0000ff;\">playFile</span>(aFile):
    <span style=\"color: #a020f0;\">if</span> os.path.exists(aFile):
        <span style=\"color: #a020f0;\">if</span> conf.currentPlayer:
            conf.currentPlayer[1].terminate()
        t = util.typeOfFile(aFile)
        conf.currentPlayer = (conf.player[t][0], Popen(conf.player[t] + [aFile], stdin=PIPE))</pre>

<p><code>playFile</code> first checks whether the file its being asked to play exists<a href=\"#foot-Mon-Oct-08-140607EDT-2012\" name=\"note-Mon-Oct-08-140607EDT-2012\">[5]</a>. If it does, then we check whether a <code>player</code> is already active, and kill it if it is<a href=\"#foot-Mon-Oct-08-140613EDT-2012\" name=\"note-Mon-Oct-08-140613EDT-2012\">[6]</a>. At that point, we check the type of file we've been passed and start a player based on that. This'll be explained once we go over <code>conf.py</code>, but just to save you the suspense, it's because we want videos running in <code>omxplayer</code> while audio files play in <code>mplayer</code>.</p>

<pre><span style=\"color: #a020f0;\">class</span> <span style=\"color: #228b22;\">command</span>:
    <span style=\"color: #a020f0;\">def</span> <span style=\"color: #0000ff;\">POST</span>(<span style=\"color: #a020f0;\">self</span>):
        cmd = web.input()[<span style=\"color: #8b2252;\">'command'</span>]
        <span style=\"color: #a020f0;\">if</span> conf.currentPlayer:
            (playerName, proc) = conf.currentPlayer
            proc.stdin.write(conf.commands[playerName][cmd])
            <span style=\"color: #a020f0;\">if</span> cmd == <span style=\"color: #8b2252;\">'stop'</span>:
                conf.currentPlayer = <span style=\"color: #a020f0;\">False</span></pre>

<p><code>command</code> expects a <code>POST</code> argument called <code>command</code>, uses it to look up a value in <code>conf.commands</code> according to which player is currently active, then writes the result to the active players' <code>input</code> stream<a href=\"#foot-Mon-Oct-08-140627EDT-2012\" name=\"note-Mon-Oct-08-140627EDT-2012\">[7]</a>. You'll note that I'm representing a player as a <code>(name, process)</code> tuple; I could have made a singleton object, or a dictionary, but this is the simplest representation that works at the moment. Now that you understand the logic, we won't learn anything without taking a look at that configuration state.</p>

<pre><span style=\"color: #b22222;\">## conf.py
</span><span style=\"color: #a020f0;\">from</span> subprocess <span style=\"color: #a020f0;\">import</span> call

<span style=\"color: #a0522d;\">ext</span> = {
    <span style=\"color: #8b2252;\">'audio'</span>: [<span style=\"color: #8b2252;\">'mp3'</span>, <span style=\"color: #8b2252;\">'ogg'</span>, <span style=\"color: #8b2252;\">'wav'</span>],
    <span style=\"color: #8b2252;\">'video'</span>: [<span style=\"color: #8b2252;\">'mp4'</span>, <span style=\"color: #8b2252;\">'ogv'</span>, <span style=\"color: #8b2252;\">'mov'</span>, <span style=\"color: #8b2252;\">'wmf'</span>]
    }

<span style=\"color: #a0522d;\">root</span> = [<span style=\"color: #8b2252;\">\"/home/inaimathi/videos\"</span>,
        <span style=\"color: #8b2252;\">\"/home/inaimathi/music\"</span>]

<span style=\"color: #a0522d;\">commands</span> = {
    <span style=\"color: #8b2252;\">'mplayer'</span>:
        {<span style=\"color: #8b2252;\">'rewind-big'</span>: <span style=\"color: #8b2252;\">\"\\x1B[B\"</span>, <span style=\"color: #8b2252;\">'rewind'</span>: <span style=\"color: #8b2252;\">\"\\x1B[D\"</span>, <span style=\"color: #8b2252;\">'ff'</span>: <span style=\"color: #8b2252;\">\"\\x1B[C\"</span>, <span style=\"color: #8b2252;\">'ff-big'</span>: <span style=\"color: #8b2252;\">\"\\x1B[A\"</span>,
         <span style=\"color: #b22222;\">## down | left | right | up
</span>         <span style=\"color: #8b2252;\">'volume-down'</span>: <span style=\"color: #8b2252;\">\"9\"</span>, <span style=\"color: #8b2252;\">'mute'</span>: <span style=\"color: #8b2252;\">\"m\"</span>, <span style=\"color: #8b2252;\">'volume-up'</span>: <span style=\"color: #8b2252;\">\"0\"</span>,
         <span style=\"color: #8b2252;\">'stop'</span>: <span style=\"color: #8b2252;\">\"q\"</span>, <span style=\"color: #8b2252;\">'pause'</span>: <span style=\"color: #8b2252;\">\" \"</span>, <span style=\"color: #8b2252;\">'play'</span>: <span style=\"color: #8b2252;\">\" \"</span>},
    <span style=\"color: #8b2252;\">'omxplayer'</span>:
        {<span style=\"color: #8b2252;\">'rewind-big'</span>: <span style=\"color: #8b2252;\">\"\\x1B[B\"</span>, <span style=\"color: #8b2252;\">'rewind'</span>: <span style=\"color: #8b2252;\">\"\\x1B[D\"</span>, <span style=\"color: #8b2252;\">'ff'</span>: <span style=\"color: #8b2252;\">\"\\x1B[C\"</span>, <span style=\"color: #8b2252;\">'ff-big'</span>: <span style=\"color: #8b2252;\">\"\\x1B[A\"</span>,
         <span style=\"color: #8b2252;\">'volume-down'</span>: <span style=\"color: #8b2252;\">\"+\"</span>, <span style=\"color: #8b2252;\">'mute'</span>: <span style=\"color: #8b2252;\">\" \"</span>, <span style=\"color: #b22222;\">#omxplayer doesn't have a mute, so we pause instead
</span>         <span style=\"color: #8b2252;\">'volume-up'</span>: <span style=\"color: #8b2252;\">\"-\"</span>, 
         <span style=\"color: #8b2252;\">'stop'</span>: <span style=\"color: #8b2252;\">\"q\"</span>, <span style=\"color: #8b2252;\">'pause'</span>: <span style=\"color: #8b2252;\">\" \"</span>, <span style=\"color: #8b2252;\">'play'</span>: <span style=\"color: #8b2252;\">\" \"</span>}
    }


<span style=\"color: #a0522d;\">player</span> = {
    <span style=\"color: #8b2252;\">'audio'</span>: [<span style=\"color: #8b2252;\">\"mplayer\"</span>],
    <span style=\"color: #8b2252;\">'video'</span>: []
    }

<span style=\"color: #a020f0;\">try</span>:
    call([<span style=\"color: #8b2252;\">\"omxplayer\"</span>])
    player[<span style=\"color: #8b2252;\">'video'</span>] = [<span style=\"color: #8b2252;\">\"omxplayer\"</span>]
<span style=\"color: #a020f0;\">except</span>:
    player[<span style=\"color: #8b2252;\">'video'</span>] = [<span style=\"color: #8b2252;\">\"mplayer\"</span>, <span style=\"color: #8b2252;\">\"-fs\"</span>]

<span style=\"color: #a0522d;\">currentPlayer</span> = <span style=\"color: #a020f0;\">False</span></pre>

<p>This is a bunch of starting state. <code>ext</code> maps various extensions to either <code>audio</code> or <code>video</code> files, which is relevant both for the presentation layer<a href=\"#foot-Mon-Oct-08-140634EDT-2012\" name=\"note-Mon-Oct-08-140634EDT-2012\">[8]</a> and the back-end<a href=\"#foot-Mon-Oct-08-140638EDT-2012\" name=\"note-Mon-Oct-08-140638EDT-2012\">[9]</a>. <code>root</code> is a list of directories to start in, and ideally, there should be security checks that any file we play/directory we show is contained in one of these. I have made a second note of it.</p>

<p><code>commands</code> is the table that our <code>command</code> handler looks values up in. They're mappings between expected commands from the front-end to values that our player programs will understand. They're similar for the most part, but <code>omx</code> doesn't have mute and uses <code>+</code>/<code>-</code> to manipulate volume, where <code>mplayer</code> uses <code>9</code>/<code>0</code>. The idea is that if you look up a command in these tables, the result you'll get is a string you can write to the player stream in order to get it to respond to that command.</p>

<p><code>player</code> is a mapping of file-type to player command. It always uses <code>mplayer</code> for audio<a href=\"#foot-Mon-Oct-08-140642EDT-2012\" name=\"note-Mon-Oct-08-140642EDT-2012\">[10]</a>, but checks for the presence of <code>omxplayer</code> with that <code><span style=\"color: #a020f0;\">try</span></code>/<code><span style=\"color: #a020f0;\">except</span></code> block before deciding to use it for videos. If it doesn't find <code>omxplayer</code><a href=\"#foot-Mon-Oct-08-140646EDT-2012\" name=\"note-Mon-Oct-08-140646EDT-2012\">[11]</a>, it uses <code>mplayer</code> in full-screen mode instead.</p>

<p><code>currentPlayer</code> is a hook to the current player process. It's <code>False</code> if there isn't a player running, and a <code>(name, process)</code> tuple if there is one<a href=\"#foot-Mon-Oct-08-140704EDT-2012\" name=\"note-Mon-Oct-08-140704EDT-2012\">[12]</a>.</p>

<p>Moving on to the last piece:</p>

<pre><span style=\"color: #a020f0;\">import</span> os, json
<span style=\"color: #a020f0;\">import</span> conf

<span style=\"color: #a020f0;\">def</span> <span style=\"color: #0000ff;\">isExt</span>(filename, extList):
    name, ext = os.path.splitext(filename)
    <span style=\"color: #a020f0;\">if</span> ext[1:] <span style=\"color: #a020f0;\">in</span> extList:
        <span style=\"color: #a020f0;\">return</span> <span style=\"color: #a020f0;\">True</span>
    <span style=\"color: #a020f0;\">return</span> <span style=\"color: #a020f0;\">False</span>

<span style=\"color: #a020f0;\">def</span> <span style=\"color: #0000ff;\">isAudio</span>(filename):
    <span style=\"color: #a020f0;\">return</span> isExt(filename, conf.ext[<span style=\"color: #8b2252;\">'audio'</span>])

<span style=\"color: #a020f0;\">def</span> <span style=\"color: #0000ff;\">isVideo</span>(filename):
    <span style=\"color: #a020f0;\">return</span> isExt(filename, conf.ext[<span style=\"color: #8b2252;\">'video'</span>])

<span style=\"color: #a020f0;\">def</span> <span style=\"color: #0000ff;\">typeOfFile</span>(path):
    <span style=\"color: #a020f0;\">if</span> isAudio(path):
        <span style=\"color: #a020f0;\">return</span> <span style=\"color: #8b2252;\">'audio'</span>
    <span style=\"color: #a020f0;\">elif</span> isVideo(path):
        <span style=\"color: #a020f0;\">return</span> <span style=\"color: #8b2252;\">'video'</span>
    <span style=\"color: #a020f0;\">else</span>:
        <span style=\"color: #a020f0;\">raise</span> <span style=\"color: #228b22;\">LookupError</span>(<span style=\"color: #8b2252;\">\"can't decide filetype of '%s'\"</span> % [path])

<span style=\"color: #a020f0;\">def</span> <span style=\"color: #0000ff;\">nameToTitle</span>(filename):
    <span style=\"color: #a020f0;\">return</span> re.sub(<span style=\"color: #8b2252;\">\" [ ]+\"</span>, <span style=\"color: #8b2252;\">\" - \"</span>, re.sub(<span style=\"color: #8b2252;\">\"-\"</span>, <span style=\"color: #8b2252;\">\" \"</span>, os.path.basename(filename).title()))

<span style=\"color: #a020f0;\">def</span> <span style=\"color: #0000ff;\">entryToJSON</span>(entry):
    name, ext = os.path.splitext(entry)
    <span style=\"color: #a020f0;\">if</span> ext == <span style=\"color: #8b2252;\">''</span>:
        ext = <span style=\"color: #8b2252;\">\"directory\"</span>
    <span style=\"color: #a020f0;\">else</span>:
        ext = ext[1:]
    <span style=\"color: #a020f0;\">return</span> {<span style=\"color: #8b2252;\">'path'</span>: entry, <span style=\"color: #8b2252;\">'type'</span>: ext, <span style=\"color: #8b2252;\">'name'</span>: nameToTitle(name), <span style=\"color: #8b2252;\">'buttons'</span>: <span style=\"color: #a020f0;\">True</span>}

<span style=\"color: #a020f0;\">def</span> <span style=\"color: #0000ff;\">entriesToDicts</span>(entries):
    dirs, videos, music = [[],[],[]]
    <span style=\"color: #a020f0;\">for</span> f <span style=\"color: #a020f0;\">in</span> entries:
        res = entryToJSON(f)
        <span style=\"color: #a020f0;\">if</span> os.path.isdir(res[<span style=\"color: #8b2252;\">'path'</span>]):
            dirs.append(res)
        <span style=\"color: #a020f0;\">elif</span> res[<span style=\"color: #8b2252;\">'type'</span>] <span style=\"color: #a020f0;\">in</span> conf.ext[<span style=\"color: #8b2252;\">'video'</span>]:
            videos.append(res)
        <span style=\"color: #a020f0;\">elif</span> res[<span style=\"color: #8b2252;\">'type'</span>] <span style=\"color: #a020f0;\">in</span> conf.ext[<span style=\"color: #8b2252;\">'audio'</span>]:
            music.append(res)
    <span style=\"color: #a020f0;\">return</span> dirs + videos + music

<span style=\"color: #a020f0;\">def</span> <span style=\"color: #0000ff;\">entriesToJSON</span>(entries):
    <span style=\"color: #a020f0;\">return</span> json.dumps(entriesToDicts(entries))

<span style=\"color: #a020f0;\">def</span> <span style=\"color: #0000ff;\">dirToJSON</span>(directory):
    entries = entriesToDicts(
        <span style=\"color: #7a378b;\">map</span>(<span style=\"color: #a020f0;\">lambda</span> p: os.path.join(directory, p), 
            <span style=\"color: #7a378b;\">sorted</span>(os.listdir(directory))))
    <span style=\"color: #a020f0;\">if</span> directory <span style=\"color: #a020f0;\">in</span> conf.root:
        entries.insert(0, {<span style=\"color: #8b2252;\">'path'</span>: <span style=\"color: #8b2252;\">\"root\"</span>, <span style=\"color: #8b2252;\">'name'</span>: <span style=\"color: #8b2252;\">\"..\"</span>, <span style=\"color: #8b2252;\">'type'</span>: <span style=\"color: #8b2252;\">\"directory\"</span>})
    <span style=\"color: #a020f0;\">else</span>:
        entries.insert(0, {<span style=\"color: #8b2252;\">'path'</span>: os.path.dirname(directory), <span style=\"color: #8b2252;\">'name'</span>: <span style=\"color: #8b2252;\">\"..\"</span>, <span style=\"color: #8b2252;\">'type'</span>: <span style=\"color: #8b2252;\">\"directory\"</span>})
    <span style=\"color: #a020f0;\">return</span> json.dumps(entries)</pre>

<p>That ... seems pretty self-explanatory, actually. The file predicates at the top figure out what's what based on <code>conf.py</code> data. The last few functions there handle the conversion of directories and directory entries to JSON objects that can easily be fed to the front-end. This is where you'll see why I wanted a <code>buttons</code> option in the data itself by the way; some JSON dumps include an entry that lets the user navigate to the previous directory, and we don't really want a play or shuffle option on those. <code>nameToTitle</code> takes a filename and returns the corresponding display title based on my own idiosyncratic naming convention<a href=\"#foot-Mon-Oct-08-140718EDT-2012\" name=\"note-Mon-Oct-08-140718EDT-2012\">[13]</a>.</p>

<p>There's a few things that this player obviously still needs. I <i>have</i> to put together some functions that let me check whether input to the <code>/list-directory</code> and <code>/play</code> handlers represents allowed files and not, say, <code>/dev/secret-files/</code>. That's a security concern, and I mentioned it as a downside to the approach when I <a href=\"/article?name=js-frameworks.html\">first wrote about the JS MVC frameworks</a>. Basically, if your front-end is entirely separate from your back-end, you can't treat it as trusted code<a href=\"#foot-Mon-Oct-08-140815EDT-2012\" name=\"note-Mon-Oct-08-140815EDT-2012\">[16]</a>. You need to assume that malicious packets are going to come in through your external handlers, and you need to deal with them appropriately.</p>

<p>Other than that, features I'll be building over the next little while include</p>

<ul>
  <li>playing directories and lists of files<a href=\"#foot-Mon-Oct-08-140821EDT-2012\" name=\"note-Mon-Oct-08-140821EDT-2012\">[17]</a></li>
  <li>playlist management<a href=\"#foot-Mon-Oct-08-140826EDT-2012\" name=\"note-Mon-Oct-08-140826EDT-2012\">[18]</a></li>
  <li>better volume and seek control<a href=\"#foot-Mon-Oct-08-140829EDT-2012\" name=\"note-Mon-Oct-08-140829EDT-2012\">[19]</a></li>
  <li>ability to send HDMI events to the output<a href=\"#foot-Mon-Oct-08-140833EDT-2012\" name=\"note-Mon-Oct-08-140833EDT-2012\">[20]</a></li>
</ul>

<p>but they're all icing, as far as I'm concerned. This is now a pretty decent, working web-interface for a media server on the RasPi written in 389 lines of Python/JS/HTML/CSS. Once again, <a href=\"https://github.com/Inaimathi/web-mote\">the github</a> has been updated<a href=\"#foot-Mon-Oct-08-140839EDT-2012\" name=\"note-Mon-Oct-08-140839EDT-2012\">[21]</a> if you want to poke around with it.</p>

<p>Now if you'll excuse me, I'm going to spend a couple of hours putting it to good use.</p>


<hr />
<h5>Footnotes</h5>
<p>1 - <a href=\"#note-Mon-Oct-08-140346EDT-2012\" name=\"foot-Mon-Oct-08-140346EDT-2012\">[back]</a> - And, as you'll see, one is still a no-op.</p>

<p>2 - <a href=\"#note-Mon-Oct-08-140353EDT-2012\" name=\"foot-Mon-Oct-08-140353EDT-2012\">[back]</a> - Where Hunchentoot runs in single-threaded mode, but that's not a big deal for an application like this.</p>

<p>3 - <a href=\"#note-Mon-Oct-08-140419EDT-2012\" name=\"foot-Mon-Oct-08-140419EDT-2012\">[back]</a> - You could be forgiven for thinking this is trivial if you haven't done it before.</p>

<p>4 - <a href=\"#note-Mon-Oct-08-140558EDT-2012\" name=\"foot-Mon-Oct-08-140558EDT-2012\">[back]</a> - Defaulting to something called <code>conf.root</code>.</p>

<p>5 - <a href=\"#note-Mon-Oct-08-140607EDT-2012\" name=\"foot-Mon-Oct-08-140607EDT-2012\">[back]</a> - No location checking yet, I'm making a note to add that later.</p>

<p>6 - <a href=\"#note-Mon-Oct-08-140613EDT-2012\" name=\"foot-Mon-Oct-08-140613EDT-2012\">[back]</a> - There should only ever one player active, since the point of this server is to control one display.</p>

<p>7 - <a href=\"#note-Mon-Oct-08-140627EDT-2012\" name=\"foot-Mon-Oct-08-140627EDT-2012\">[back]</a> - We're not using the <code>communicate</code> method since that closes the target stream and we want it to stay open.</p>

<p>8 - <a href=\"#note-Mon-Oct-08-140634EDT-2012\" name=\"foot-Mon-Oct-08-140634EDT-2012\">[back]</a> - Because we display different icons for videos than for music files.</p>
<p>9 - <a href=\"#note-Mon-Oct-08-140638EDT-2012\" name=\"foot-Mon-Oct-08-140638EDT-2012\">[back]</a> - Because we potentially use a different player for audio and video files.</p>

<p>10 - <a href=\"#note-Mon-Oct-08-140642EDT-2012\" name=\"foot-Mon-Oct-08-140642EDT-2012\">[back]</a> - Though I guess I could figure out what the default RasPi audio player is and use that instead.</p>

<p>11 - <a href=\"#note-Mon-Oct-08-140646EDT-2012\" name=\"foot-Mon-Oct-08-140646EDT-2012\">[back]</a> - Which means it's not running on a RasPi.</p>

<p>12 - <a href=\"#note-Mon-Oct-08-140704EDT-2012\" name=\"foot-Mon-Oct-08-140704EDT-2012\">[back]</a> - As an aside, this is the source of a pretty horrible heisenbug I ran into. You see, <code>web.py</code> isn't fully interpreted; when you run it, it starts a process that watches relevant files and re-compiles them if they change. Sounds ok, but because of that global hook assigning <code>currentPlayer</code> to <code>False</code>, whenever I made a change to the containing file, it would reset <i>without terminating the current player</i>. I spent a fun half hour or so trying to figure out what the hell was going on when it occurred to me that my development environment was leaving floating processes lying around. I'm not entirely sure <code>conf.py</code> is the best place to keep that start-up variable, since it's the one most likely to change at runtime, but I honestly don't know how to solve the higher problem in a general way</p>

<p>13 - <a href=\"#note-Mon-Oct-08-140718EDT-2012\" name=\"foot-Mon-Oct-08-140718EDT-2012\">[back]</a> - Bonus Points <a href=\"#foot-Mon-Oct-08-140743EDT-2012\" name=\"note-Mon-Oct-08-140743EDT-2012\">[14]</a> if you can figure it out based on that pair of regex substitutions.</p>

<p>14 - <a href=\"#note-Mon-Oct-08-140743EDT-2012\" name=\"foot-Mon-Oct-08-140743EDT-2012\">[back]</a> - Bonus Points can be redeemed for Regular Points <a href=\"#foot-Mon-Oct-08-140751EDT-2012\" name=\"note-Mon-Oct-08-140751EDT-2012\">[15]</a>.</p>

<p>15 - <a href=\"#note-Mon-Oct-08-140751EDT-2012\" name=\"foot-Mon-Oct-08-140751EDT-2012\">[back]</a> - Regular Points can be redeemed for nothing.</p>

<p>16 - <a href=\"#note-Mon-Oct-08-140815EDT-2012\" name=\"foot-Mon-Oct-08-140815EDT-2012\">[back]</a> - Which is one reason that I'm glad Python's <code>subprocess.Popen</code> takes a list and appropriately escapes the contents rather than taking a string and leaving shell-injection vectors as so many other languages opt to.</p>

<p>17 - <a href=\"#note-Mon-Oct-08-140821EDT-2012\" name=\"foot-Mon-Oct-08-140821EDT-2012\">[back]</a> - Rather than just single files.</p>
<p>18 - <a href=\"#note-Mon-Oct-08-140826EDT-2012\" name=\"foot-Mon-Oct-08-140826EDT-2012\">[back]</a> - Probably as an entirely front-end construct, but we'll see.</p>

<p>19 - <a href=\"#note-Mon-Oct-08-140829EDT-2012\" name=\"foot-Mon-Oct-08-140829EDT-2012\">[back]</a> - Ideally, both would be sliders, but I went with buttons for the first pass because synchronizing state to the extent proper sliders would require seems rickety and error-prone.</p>

<p>20 - <a href=\"#note-Mon-Oct-08-140833EDT-2012\" name=\"foot-Mon-Oct-08-140833EDT-2012\">[back]</a> - This is for TV control; ideally, I'd be able to turn it on, change channels and control actual output volume from the same web interface that tells <code>mplayer</code> and <code>omxplayer</code> what to do.</p>

<p>21 - <a href=\"#note-Mon-Oct-08-140839EDT-2012\" name=\"foot-Mon-Oct-08-140839EDT-2012\">[back]</a> - Oddly, it lists this as a JavaScript project with code contents <code>Common Lisp: 100%</code>, rather than the mixture of Python, JS and HTML/CSS that it currently is.</p>
   "))
((5202 3723 595003000) :INSERT (107 :POSTED 3558657600))
((5202 3723 595005000) :INSERT (107 :TAG :ALMOST-LITERATE-PROGRAMMING))
((5202 3723 595007000) :INSERT (107 :TAG :JAVASCRIPT))
((5202 3723 595008000) :INSERT (107 :TAG :JQUERY))
((5202 3723 595010000) :INSERT (107 :TAG :PROGRAMMING-ENVIRONMENT))
((5202 3723 595012000) :INSERT (107 :TAG :PYTHON))
((5202 3723 595293000) :INSERT (108 :TITLE "Pythonisms and WebMote - Part 3"))
((5202 3723 595298000) :INSERT (108 :FILE "webmote-the-right-way--part3.html"))
((5202 3723 595300000) :INSERT (108 :EDITED 3610300947))
((5202 3723 595302000) :INSERT
 (108 :BODY
  "<p>I've had a, shall we say, <i>pretty busy</i> two weeks, but I still managed to do some half-way decent work on <a href=\"https://github.com/Inaimathi/web-mote\">Web Mote</a>. The process is teaching me small things as I go, both about the language I'm currently using<a href=\"#foot-Thu-Oct-18-200653EDT-2012\" name=\"note-Thu-Oct-18-200653EDT-2012\">[1]</a>, and about the architectural approach, so I wanted to organize them in my own mind.</p>

<h3>Pythonisms</h3>

<p>First off, just to make sure I'm clear, Python is definitely in the \"Popular\" side of the <a href=\"/article?name=self-titled.html\">Powerful/Popular continuum I described a while ago</a>. If you're dealing with something that isn't a fundamentally unsolved problem, chances are there's a library that resolves it fairly well. Because the church of OO still seems to be going strong, you'll probably wind up needing to subclass one or two somethings to get the behavior you want, but there's still a lot to be said for just having Good Enough™© solutions lying around at your disposal.</p>

<p>A couple more odd syntactic corners are showing up as I do more involved Python code. Nothing huge, but I've had to look them each up at least once, so lets get this over with</p>

<h2>Nested Loops</h2>

<p>Are broken out of with <code>return</code>. This shouldn't really come up very often<a href=\"#foot-Thu-Oct-18-200828EDT-2012\" name=\"note-Thu-Oct-18-200828EDT-2012\">[2]</a>, but in case you ever need to, this is how you do it.</p>

<pre><span style=\"color: #a020f0;\">def</span> <span style=\"color: #0000ff;\">pollingLoop</span>(foo):
    <span style=\"color: #a020f0;\">for</span> a <span style=\"color: #a020f0;\">in</span> foo:
        <span style=\"color: #a020f0;\">while</span> <span style=\"color: #a020f0;\">True</span>:
            <span style=\"color: #a020f0;\">if</span> bar():
                baz()
            <span style=\"color: #a020f0;\">else</span>:
                <span style=\"color: #a020f0;\">return</span> <span style=\"color: #8b2252;\">\"Done\"</span></pre>

<p>That <code><span style=\"color: #a020f0;\">return</span></code> will return from <code><span style=\"color: #0000ff;\">pollingLoop</span></code>, incidentally terminating both the <code><span style=\"color: #a020f0;\">for</span></code> and the <code><span style=\"color: #a020f0;\">while</span></code>. Again, it seems rare enough that I'm not about to complain for lack of more fine-grained flow control. The only place I could think of using this idiom off-hand is in a polling situation, which is <a href=\"https://github.com/Inaimathi/web-mote/blob/master/player.py#L42\">how I was originally using it</a>.</p>

<h2>Functional Shuffling</h2>

<p>The standard <code>random.shuffle</code> function is destructive, which typically isn't what you want when you're trying to be functional. Luckily, you can use <code><a href=\"http://docs.python.org/library/functions.html#sorted\">sorted</a></code> to fake a Good Enough™© functional shuffle by passing it a random <code>key</code>.</p>

<pre><span style=\"color: #a020f0;\">import</span> random

<span style=\"color: #a020f0;\">def</span> <span style=\"color: #0000ff;\">shuffled</span>(aList):
    <span style=\"color: #a020f0;\">return</span> <span style=\"color: #7a378b;\">sorted</span>(aList, key=<span style=\"color: #a020f0;\">lambda</span> e: random.random())</pre>

<h2>Checking Membership</h2>

<p>The idea of <code>member?</code> is a primitive to me, but there's no such function in Python. You instead need to use the standalone <code>in</code> syntax.</p>

<pre>&gt;&gt;&gt; 1 <span style=\"color: #a020f0;\">in</span> [1, 2, 3, 4, 5]
<span style=\"color: #a020f0;\">True</span>
&gt;&gt;&gt; <span style=\"color: #8b2252;\">\"Bob\"</span> <span style=\"color: #a020f0;\">in</span> [<span style=\"color: #8b2252;\">\"Alice\"</span>, <span style=\"color: #8b2252;\">\"Bradley\"</span>, <span style=\"color: #8b2252;\">\"Charles\"</span>]
<span style=\"color: #a020f0;\">False</span>
&gt;&gt;&gt; </pre>

<p>It's an infix boolean for some inscrutable reason, but it does the job, and is presumably <i>really fast</i> since it's a keyword rather than a function.</p>

<h3>Separating Client and Server</h3>

<p>About half the point<a href=\"#foot-Thu-Oct-18-201323EDT-2012\" name=\"note-Thu-Oct-18-201323EDT-2012\">[3]</a> of Web Mote is doing some light experimentation on a particular architectural approach. I've made changes to the front-end which lets me play an entire directory<a href=\"#foot-Thu-Oct-18-201410EDT-2012\" name=\"note-Thu-Oct-18-201410EDT-2012\">[4]</a>, and I'm beginning to ask myself what the correct way of separating that behavior is. There are options, and I'll start by outlining the way it's currently implemented<a href=\"#foot-Thu-Oct-18-201434EDT-2012\" name=\"note-Thu-Oct-18-201434EDT-2012\">[5]</a></p>

<h2>Semi-Client</h2>

<p>Client-side sends a target, which can be either a file or a folder, and the server handles playing it. A file is merely passed to the player, a folder gets searched recursively for all files it contains, and those files are then sent in sorted order to the player to be played one at a time, but note that this decision is made by the <i>server</i>.</p>

<p>It's semi-client because the client doesn't particularly care what message it's sending or what responding to it entails. For instance, if we're shuffling, it would be convenient to display the current file, and a list of previous/next files. In the Semi-Client architecture, the server would start up a player, then report this play queue order back to the client for display. This keeps clients somewhat interchangeable, since the current play queue can be fetched by anyone connecting in.</p>

<p>A problem this might raise later is that if we decide to change the behavior of the shuffle function, or add a playlist, we'll need to make extensive changes on both the server and client sides<a href=\"#foot-Thu-Oct-18-201648EDT-2012\" name=\"note-Thu-Oct-18-201648EDT-2012\">[6]</a>. Further, the server and client need to synchronize in various non-trivial ways which complicates their communication even if we change nothing else.</p>

<h2>Client-Oriented</h2>

<p>This solution would involve doing all relevant work on the client. We wouldn't send a target to the server, we'd send a filename. The way we'd handle playing or shuffling a directory would be by asking the server for its <i>deep</i> file list, potentially shuffling it on the client side, then sending the list off to the server for playing one file at a time.</p>

<p>Going down this path radically simplifies the server. It has to expect exactly three kinds of requests:</p>

<ol>
  <li>Gimme the file list of <code>directory</code> (optionally, make it a deep list)</li>
  <li>Play <code>file</code> right now</li>
  <li>Send <code>command</code> to the running player</li>
</ol>

<p>Ok, we do also need to be able to ping the client in some way to notify them that file is done playing, but that seems like it could be trivially done by long-polling the <code>play</code> request. If you want to get slightly fancier, for instance in the case where you want to be able to deal with multiple simultaneous clients, you can use SSEs or Ajax polling to send out a <code>done</code> signal when you need to. You may also need to support session/option-caching, but if you want to do it right, you'll probably be using cookies rather than any server-side storage options. Ideally, the server doesn't have to care about <i>anything</i> the client does or keeps track of.</p>

<p>The downside is that the client is suddenly expected to be very smart. If doing Ajax-based JSON communication didn't <i>already</i> commit you to mandatory JavaScript<a href=\"#foot-Thu-Oct-18-201802EDT-2012\" name=\"note-Thu-Oct-18-201802EDT-2012\">[7]</a>, this technique would be the point of no return. Because if your client needs to be the smart component, it needs to be somewhat stateful, and it needs to manipulate its DOM in various ways. You still <i>could</i> write a minimal client that attaches to a server like this, but emphasis would be heavily on \"minimal\", both in terms of interactivity and in terms of available control options. The only other concern with this approach is that clients are suddenly not interchangeable; if I use my phone to queue up a playlist, then sit down at my laptop, I either need to keep my phone on, or I need to duplicate that playlist on my laptop in order to keep the media going.</p>

<h2>Server-Oriented</h2>

<p>This solution involves a disproportionate amount of server-based work, and it's about as close as you can get to a traditional web site while still using the separated architecture. Your client can suddenly be almost as dumb as a post, only needing to be able to accept UI changes through JSON feeds. You store any kind of stateful information on the server, which means that you've got a central place to save playlists and such. A shuffle would be implemented more or less as in the Semi-Client solution, but it wouldn't bother streaming back state updates. Rather, the client would make periodic requests of the style \"What are you doing now?\" and display the results. The same thing would be true for playlists and similar behavior; we would store them in a server-side database somewhere and send status updates out to clients as requested.</p>

<p>It maintains a higher level of decoupling than the Semi-Client solution, and simplifies the client enough that a slightly clunkier, pure-HTML version starts looking feasible.</p>

<p>The main downside is that the server needs to send much more exhaustive readouts of its state. Which means more, and potentially more complex, handlers.</p>

<h3>Decision Time</h3>

<p>I can't take the Server-oriented option seriously, because it would nudge the shape of the application much closer to a traditional web app. It might also introduce one or two dependencies across client and server as well as greatly complicating the server, and almost-significantly simplifying the client. This does not sound like a good trade.</p>

<p>The current codebase takes the Semi-Client approach, but I'm not too keen on keeping it because of the extra coupling it demands between client and server operations. Playing a list of files properly also needed a surprisingly large amount of work<a href=\"#foot-Thu-Oct-18-203423EDT-2012\" name=\"note-Thu-Oct-18-203423EDT-2012\">[8]</a>.</p>

<p>The second option, the Client-oriented one seems like the correct approach. It complicates the client, but not excessively. It greatly simplifies the server, saving me from needing to deal with even basic multiprocessing concerns for the purposes of actually playing media. Finally, it keeps the client and server completely decoupled, making it even simpler to release new clients and keeping client data entirely out of the servers' reach.</p>

<p>Ok.</p>

<p>I'd better get on that.</p>

<hr />
<h5>Footnotes</h5>
<p>1 - <a href=\"#note-Thu-Oct-18-200653EDT-2012\" name=\"foot-Thu-Oct-18-200653EDT-2012\">[back]</a> - That'd be Python at the moment. And some people at the <a href=\"http://hacklab.to/\">Hacklab</a> open houses asked, so I guess I'd better clarify again, I don't have any particular affection for Python. It's just everywhere and not horrible, so I figured I may as well. I'm still honestly attempting to line up a Haskell and CL port as soon as I can possibly manage it.</p>

<p>2 - <a href=\"#note-Thu-Oct-18-200828EDT-2012\" name=\"foot-Thu-Oct-18-200828EDT-2012\">[back]</a> - And in fact, the place where I used the idiom has been re-written such that the inner loop is in a secondary function.</p>

<p>3 - <a href=\"#note-Thu-Oct-18-201323EDT-2012\" name=\"foot-Thu-Oct-18-201323EDT-2012\">[back]</a> - The other half is split between making use of old, closed hardware I have lying around and fulfilling the next part of my personal crusade aimed at putting a web server in everything within my reach.</p>

<p>4 - <a href=\"#note-Thu-Oct-18-201410EDT-2012\" name=\"foot-Thu-Oct-18-201410EDT-2012\">[back]</a> - And at least theoretically shuffle it, but there isn't a front-end for that yet.</p>

<p>5 - <a href=\"#note-Thu-Oct-18-201434EDT-2012\" name=\"foot-Thu-Oct-18-201434EDT-2012\">[back]</a> - It's not necessarily <i>staying</i> this way, but if you do a checkout from <a href=\"https://github.com/Inaimathi/web-mote\">that github</a> as of this writing, this is what you're getting.</p>

<p>6 - <a href=\"#note-Thu-Oct-18-201648EDT-2012\" name=\"foot-Thu-Oct-18-201648EDT-2012\">[back]</a> - Which is precisely what we wanted to avoid.</p>

<p>7 - <a href=\"#note-Thu-Oct-18-201802EDT-2012\" name=\"foot-Thu-Oct-18-201802EDT-2012\">[back]</a> - Or a desktop/mobile binary client, to be fair, we did briefly mention that option in part one.</p>

<p>8 - <a href=\"#note-Thu-Oct-18-203423EDT-2012\" name=\"foot-Thu-Oct-18-203423EDT-2012\">[back]</a> - Granted, a lot of this complexity was a result of needing to use different players in different situations, but still.</p>
      "))
((5202 3723 595405000) :INSERT (108 :POSTED 3559608000))
((5202 3723 595406000) :INSERT (108 :TAG :IDEA-PEELING))
((5202 3723 595408000) :INSERT (108 :TAG :PYTHON))
((5202 3723 595410000) :INSERT (108 :TAG :SPECULATION))
((5202 3723 595930000) :INSERT
 (109 :TITLE "Fresher Install and Preliminary Brain Dump"))
((5202 3723 595936000) :INSERT (109 :FILE "fresher-install.html"))
((5202 3723 595938000) :INSERT (109 :EDITED 3610300221))
((5202 3723 595939000) :INSERT
 (109 :BODY
  "<p>Just a heads up, this is probably going to be a fairly lame stream-of-consciousness piece. It's been a busy week or two, and I have to get some things out of my head <i>now</i>, or I may just explode.</p>

<p>You Have Been Warned©™</p>

<h3>Firstly</h3>

<p>I swore not to make a multiprocessing joke about this, so I won't.</p>

<p>As of about a week ago, I am one of two custodians to a freshly-hatched human being. He's apparently a bit big, which will come as absolutely no surprise to anyone that's met me in meatspace. It's pretty taxing in the sleep department, but I'm told that's temporary, and that the experience is worth it in the long term. Granted, I am told this by people who have gone through the process, so it may just be them rationalizing a fundamentally damaging experience, but lets give them the benefit of the doubt for now. I'll keep you posted, I guess. My wife is still in the recovery stages and has become, shall we say, slightly less certain that she wants to repeat the process. Otherwise, it's going ok. We've got the pretty good Ontario Health system at our backs, and various online/literary resources all of which has helped prepare us. There's also the entirely unexpected benefit of having a sufficiently well-behaved infant, to the point that we've managed to sleep semi-properly and actually <i>go out</i> in the week since.</p>

<p>Raising him is going to be another can of worms altogether, especially if <a href=\"http://www.antipope.org/charlie/blog-static/2007/05/shaping_the_future.html\">Stross is anywhere near the mark</a>. I'm about to raise a child to whom I will have to explain that we used to have this thing called \"being lost\", and that it used to be impossible to keep in touch with your friends every hour of every day, even if you wanted to. I don't even want to begin thinking about that right now though, it'll just get me riled up.</p>

<p>I've got a son, my wife lived, and they both seem happy and healthy. So... that went well.</p>

<h3>Secondly</h3>

<p>Earlier this week, I bit the bullet and upgraded my laptop to the latest wheezy release. That's actually something I've been meaning to do for a while for various reasons, and my pack-rat data storage habits finally got me to the point where most of my admittedly meager 64GB hard drive was full. The installation routine is down pat by this point</p>

<pre>apt-get install screen make emacs git-core gitk wicd-curses pmount htop gnupg unetbootin
apt-get install mplayer alsa feh pacpl canto imagemagick
apt-get install x-window-system dmenu xmonad gimp inkscape conkeror chromium-browser tor rdesktop virtualbox-ose
apt-get install mongodb python-setuptools sbcl haskell-platform haskell-mode hlint leiningen

wget http://beta.quicklisp.org/quicklisp.lisp
sbcl --eval <span style=\"color: #8b2252;\">'(load \"quicklisp.lisp\")'</span>
cabal install hoogle hasktags
~/.cabal/bin/hoogle data</pre>

<p>I'm not <i>quite</i> finished yet. a couple other small items still need to be put together<a href=\"#foot-Sun-Nov-11-002932EST-2012\" name=\"note-Sun-Nov-11-002932EST-2012\">[1]</a>, but that's a comfortably functioning if minimal development machine. There are a few changes from last time, but before we get to those,</p>

<h2>I need To Brag for a Moment</h2>

[vrms screenshot]

<p>I <i>thought</i> that would end up being true for the very short term, seeing as the wireless drivers this machine uses are all blobs. Turns out that <i>not</i> installing those has done nothing but kept me from trawling Reddit for porn. My 3G kindle performs admirably when I need to take a look at some new piece of documentation, or just pull up a previously downloaded reference manual, my desk at work has three CAT5 jacks so I'm always on the wired network anyway, and Toronto libraries have wifi hot-spots <i>consistently</i> shitty enough that I've yet to <code>ping www.google.ca</code> successfully through one<a href=\"#foot-Sun-Nov-11-002942EST-2012\" name=\"note-Sun-Nov-11-002942EST-2012\">[2]</a>. I'll stay disconnected for the short term, though I have no idea how long that'll remain the case. In the meanwhile, <code>rms would be proud</code>.</p>

<h2>Different Languages</h2>

<p><b>Ruby</b> and <b>Smalltalk</b> got left out again. I'm not particularly happy about either of those. I definitely wish that <a href=\"http://en.wikipedia.org/wiki/Yukihiro_Matsumoto\">Matz</a> had become more popular than <a href=\"http://en.wikipedia.org/wiki/Guido_van_Rossum\">van Rossum</a>, but it seems that he hasn't. A little while ago I realized that I was reaching for Ruby and Python in roughly the same situations and, despite the fact that I like Ruby better, Python was coming out more often. That's because everyone in IT at the office has at least a cursory knowledge of Python<a href=\"#foot-Sun-Nov-11-002953EST-2012\" name=\"note-Sun-Nov-11-002953EST-2012\">[3]</a> and because Python comes with Debian. It would be nice if <code>python-setuptools</code> was also included by default, and if the language/community didn't have this anti-functional-programming stick up its' ass, but whatever I guess. I've got nothing against Smalltalk either, but of the languages I don't currently have installed, both <code>forth</code> and <code>prolog</code> are ahead on the \"things to learn\" list. On the other hand, I have been fooling around with RasPi recently, and that comes with a Squeak image, so I dunno. Maybe it jumps the queue at some point. It just probably won't be on my main machine.</p>

<p><b>Erlang</b> and <b>Node.js</b> are both absent, but I'm not complaining. I haven't gone back to kick at Erlang since my last <code>rebar</code> failure. Honestly, I haven't been missing it. It has some excellent ideas, but the language itself is fairly ugly, and a few strokes of bad luck on deployment have soured me on it. Maybe that'll change in the future, but it's out for the moment. Node, is a bit odd. On the one hand, there's nothing overtly offensive about JavaScript from my perspective<a href=\"#foot-Sun-Nov-11-003002EST-2012\" name=\"note-Sun-Nov-11-003002EST-2012\">[4]</a>. On the other, it just isn't interesting enough that I want to use it anywhere I don't have to. That wouldn't usually prevent me from at least installing the runtime, but</p>

<ol>
  <li>It still isn't in the <code>testing</code> repos, and I'll be damned if I start <a href=\"http://jaqque.sbih.org/kplug/apt-pinning.html\"><code>apt-pin</code>ning</a> from <a href=\"http://packages.debian.org/sid/nodejs\"><code>sid</code></a> for a language that I have an at best passing interest in</li>
  <li><code><a href=\"https://npmjs.org/\">npm</a></code>, the Node.js library package manager, is a separate installation. And the serious recommendation seems to be <a href=\"http://handlebarsjs.com/precompilation.html\">\"Please <code>curl</code> this url, and run the result as <code>root</code>. Yes, seriously. Stop laughing.\"</a></li>
  <li>Once you've taken the leap of faith and installed <code>npm</code> itself that way, you apparently need to run <code>npm install</code> <i>as <code>root</code> too</i>. Which sounds like the sort of bullshit that made windows the marvelously insecure block of Swiss cheese it's been for the last couple decades. It's <a href=\"http://packages.python.org/distribute/easy_install.html\">not</a> the <a href=\"http://www.cpan.org/\">only</a> one, so I guess I can't kick its ass too hard over this, but I long for the day when the wisdom of <a href=\"http://www.quicklisp.org/beta/\">quicklisp</a>/<a href=\"https://github.com/technomancy/leiningen\">lein install</a>/<a href=\"http://www.haskell.org/cabal/\">cabal</a> is picked up by all language designers.</li>
</ol>

<p>I can see myself installing it somewhere other than my main machine, just to give me <a href=\"http://handlebarsjs.com/precompilation.html\">handlebars.js pre-compilation</a> as a service, if no one's done that yet, but that's about it. In fact, <a href=\"http://barbershop.inaimathi.ca/\">here</a>. Now you don't need to install it either.</p>

<p><b>Clojure</b> and <b>Haskell</b> are now part of the standard lineup, neither of which should surprise you if you've been following the blog at all. Both place emphasis on functional programming, laziness and composeability, but that's about where the similarities end. Clojure is one of Lisp's bastards; a dynamic, fully parenthesized, prefix-notated language running on a virtual machine with a heavy focus on Java interoperability. Haskell is a member of the ML family, which means a fanatic devotion to strong, static typing, a heavy emphasis on compile-time rather than run-time optimization, a complete lack of VM, plus a strong aversion to parenthesizing anything and the ability to vary fixedness based on context. I'm making an attempt to learn both over the next few months, and that will hopefully convince you that I take cognitive diversity seriously.</p>

<h2>Switching WMs. Again.</h2>

<p><a href=\"/article?name=fresh-system.html\">Last time</a> I hopped back into StumpWM from XMonad. This time, I'm hopping back. It turns out that, just like there are a couple of small annoyances in XMonad that make Stump preferable, there are a couple of small annoyances in StumpWM that do the same for XMonad.</p>

<ul>
  <li>StumpWM really <i>really</i> doesn't like floating windows. Far as I know, there isn't a way to detach one randomly, or do anything with one once its detached. The WM also occasionally throws errors when a program tries to put up an alert, like a file-save notification or print dialog. XMonad has yet to yell at me about that, and it elegantly deals with floating windows using the mouse<a href=\"#foot-Sun-Nov-11-003224EST-2012\" name=\"note-Sun-Nov-11-003224EST-2012\">[5]</a>. </li>
  <li>Stump <i>still</i> crashes with GIMP. I vaguely hoped that the single-window mode would outright resolve that issue, but it hasn't. Sure you can now <i>run</i> the program, but attempting to open a file with it results in the WM becoming unresponsive to keyboard input<a href=\"#foot-Sun-Nov-11-003257EST-2012\" name=\"note-Sun-Nov-11-003257EST-2012\">[6]</a>. XMonad has no such problems, and being that I occasionally like to draw things, I'd prefer my window manager to not explode while loading drawing tools. Even apart from the specific GIMP problem, I've found StumpWM to crash more in general than XMonad does<a href=\"#foot-Sun-Nov-11-003302EST-2012\" name=\"note-Sun-Nov-11-003302EST-2012\">[7]</a>.</li>
  <li>Taking screenshots using <code>import</code> caused some odd errors. It would very occasionally crash the WM, and very frequently create a black rectangle rather than a screenshot of the appropriate screen area. I normally <i>wouldn't</i> put this down to the window manager, except that I haven't observed the effect in XMonad, XFCE or Gnome.</li>
</ul>

<p>I'm prepared to make peace with the fact that <code>C-t</code> has to be an exclusively window-manager keystroke, and I've changed my keymap a bit to mitigate the second-class status of chorded mod keys. Specifically, I've bound any repetitive keystrokes to <code>C-t C-[key]</code> rather than <code>C-t [key]</code>. It doesn't <i>entirely</i> solve the problem, but using <code>hold C + t h t h t h t h t h</code> to resize windows is still preferable to <code>C+t h C+t h C+t h C+t h C+t h</code>. Speaking of configs</p>

<pre><span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">System.Directory</span>
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">XMonad</span>
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">XMonad.Actions.CycleWS</span>
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">XMonad.Actions.CycleWindows</span>
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">XMonad.Actions.WindowGo</span>
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">XMonad.Actions.GridSelect</span>
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">XMonad.Prompt</span>
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">XMonad.Prompt.Input</span>
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">XMonad.Util.EZConfig</span>
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">XMonad.Util.CustomKeys</span>

<span style=\"color: #a020f0;\">import</span> <span style=\"color: #a020f0;\">qualified</span> <span style=\"color: #228b22;\">XMonad.StackSet</span> <span style=\"color: #a020f0;\">as</span> <span style=\"color: #228b22;\">S</span>

<span style=\"color: #0000ff;\">main</span> <span style=\"color: #a0522d;\">=</span> xmonad <span style=\"color: #a0522d;\">$</span> conf { modMask <span style=\"color: #a0522d;\">=</span> mod4Mask }
       <span style=\"color: #a0522d;\">`additionalKeysP`</span>
       [ (<span style=\"color: #8b2252;\">\"C-t C-d C-b\"</span>, withFilePrompt <span style=\"color: #8b2252;\">\"Pic: \"</span> bgFolder setDesktopBackground)
       , (<span style=\"color: #8b2252;\">\"&lt;Print&gt;\"</span>, withFilePrompt <span style=\"color: #8b2252;\">\"Name: \"</span> screenshotFolder capToFile)
         
       , (<span style=\"color: #8b2252;\">\"C-t p\"</span>, spawn <span style=\"color: #8b2252;\">\"dmenu_run\"</span>)
       , (<span style=\"color: #8b2252;\">\"C-t C-p\"</span>, spawn <span style=\"color: #8b2252;\">\"dmenu_run\"</span>)
       , (<span style=\"color: #8b2252;\">\"C-t &lt;Return&gt;\"</span>, spawn <span style=\"color: #8b2252;\">\"xterm\"</span>)
       , (<span style=\"color: #8b2252;\">\"C-t e\"</span>, runOrRaise <span style=\"color: #8b2252;\">\"emacs\"</span> (className <span style=\"color: #a0522d;\">=?</span> <span style=\"color: #8b2252;\">\"Emacs\"</span>))
       , (<span style=\"color: #8b2252;\">\"C-t b\"</span>, spawn <span style=\"color: #8b2252;\">\"chromium --proxy-server=\\\"socks://localhost:9050\\\"\"</span>)
         
       , (<span style=\"color: #8b2252;\">\"C-t C-s\"</span>, nextScreen)
       , (<span style=\"color: #8b2252;\">\"C-t C-t\"</span>, windowSwap)
       , (<span style=\"color: #8b2252;\">\"C-t t\"</span>, windows <span style=\"color: #228b22;\">S</span><span style=\"color: #a0522d;\">.</span>swapDown)
       , (<span style=\"color: #8b2252;\">\"C-t C-j\"</span>, windows <span style=\"color: #228b22;\">S</span><span style=\"color: #a0522d;\">.</span>swapDown)
       , (<span style=\"color: #8b2252;\">\"C-t j\"</span>, windows <span style=\"color: #228b22;\">S</span><span style=\"color: #a0522d;\">.</span>focusDown)
       , (<span style=\"color: #8b2252;\">\"C-t k\"</span>, windows <span style=\"color: #228b22;\">S</span><span style=\"color: #a0522d;\">.</span>focusUp)
       , (<span style=\"color: #8b2252;\">\"C-t C-k\"</span>, windows <span style=\"color: #228b22;\">S</span><span style=\"color: #a0522d;\">.</span>swapUp)
       , (<span style=\"color: #8b2252;\">\"C-t g\"</span>, goToSelected defaultGSConfig)
         
       , (<span style=\"color: #8b2252;\">\"C-t C-&lt;Space&gt;\"</span>, sendMessage <span style=\"color: #228b22;\">NextLayout</span>)
       , (<span style=\"color: #8b2252;\">\"C-t C-h\"</span>, sendMessage <span style=\"color: #228b22;\">Shrink</span>)
       , (<span style=\"color: #8b2252;\">\"C-t C-l\"</span>, sendMessage <span style=\"color: #228b22;\">Expand</span>)
       
       , (<span style=\"color: #8b2252;\">\"C-t s\"</span>, withFocused <span style=\"color: #a0522d;\">$</span> windows <span style=\"color: #a0522d;\">.</span> <span style=\"color: #228b22;\">S</span><span style=\"color: #a0522d;\">.</span>sink)
       ]
  <span style=\"color: #a020f0;\">where</span> conf <span style=\"color: #a0522d;\">=</span> defaultConfig { <span style=\"color: #228b22;\">XMonad</span><span style=\"color: #a0522d;\">.</span>startupHook <span style=\"color: #a0522d;\">=</span> onStartup }

<span style=\"color: #b22222;\">--</span><span style=\"color: #b22222;\">-------- Config Options
</span><span style=\"color: #0000ff;\">bgFolder</span> <span style=\"color: #a0522d;\">=</span> <span style=\"color: #8b2252;\">\"/home/inaimathi/pictures/backgrounds/\"</span>
<span style=\"color: #0000ff;\">screenshotFolder</span> <span style=\"color: #a0522d;\">=</span> <span style=\"color: #8b2252;\">\"/home/inaimathi/pictures/screenshots/\"</span>

<span style=\"color: #0000ff;\">onStartup</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">X</span> <span style=\"color: #228b22;\">()</span>
<span style=\"color: #0000ff;\">onStartup</span> <span style=\"color: #a0522d;\">=</span> <span style=\"color: #a020f0;\">do</span> 
  setDesktopBackground <span style=\"color: #8b2252;\">\"dash.png\"</span>

<span style=\"color: #b22222;\">--</span><span style=\"color: #b22222;\">-------- Helper Functions
</span><span style=\"color: #0000ff;\">setDesktopBackground</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">MonadIO</span> m <span style=\"color: #a0522d;\">=&gt;</span> <span style=\"color: #228b22;\">String</span> <span style=\"color: #a0522d;\">-&gt;</span> m <span style=\"color: #228b22;\">()</span>
<span style=\"color: #0000ff;\">setDesktopBackground</span> pic <span style=\"color: #a0522d;\">=</span> spawn <span style=\"color: #a0522d;\">$</span> concat [<span style=\"color: #8b2252;\">\"feh --bg-scale \"</span>, bgFolder, pic]
        
<span style=\"color: #0000ff;\">capToFile</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">MonadIO</span> m <span style=\"color: #a0522d;\">=&gt;</span> <span style=\"color: #228b22;\">String</span> <span style=\"color: #a0522d;\">-&gt;</span> m <span style=\"color: #228b22;\">()</span>
<span style=\"color: #0000ff;\">capToFile</span> picName <span style=\"color: #a0522d;\">=</span> spawn <span style=\"color: #a0522d;\">$</span> concat [<span style=\"color: #8b2252;\">\"import \"</span>, screenshotFolder, picName]

<span style=\"color: #0000ff;\">rdesktop</span> domain username password server <span style=\"color: #a0522d;\">=</span> spawn <span style=\"color: #a0522d;\">$</span> concat [<span style=\"color: #8b2252;\">\"rdesktop -g 1280x1024 -d \"</span>, domain, <span style=\"color: #8b2252;\">\" -u \"</span>, username, <span style=\"color: #8b2252;\">\" -p \"</span>, password, <span style=\"color: #8b2252;\">\" \"</span>, server]
<span style=\"color: #0000ff;\">myRdesktop</span> server <span style=\"color: #a0522d;\">=</span> rdesktop <span style=\"color: #8b2252;\">\"MEDIREXSYS\"</span> <span style=\"color: #8b2252;\">\"leoz\"</span> <span style=\"color: #8b2252;\">\"my-password-goes-here-and-you-aint-gettin-it\"</span> server

<span style=\"color: #b22222;\">--</span><span style=\"color: #b22222;\">-------- Utility
</span><span style=\"color: #0000ff;\">windowSwap</span> <span style=\"color: #a0522d;\">=</span> <span style=\"color: #a020f0;\">do</span>
  windows <span style=\"color: #228b22;\">S</span><span style=\"color: #a0522d;\">.</span>focusDown
  windows <span style=\"color: #228b22;\">S</span><span style=\"color: #a0522d;\">.</span>swapUp

<span style=\"color: #0000ff;\">xpConf</span> <span style=\"color: #a0522d;\">=</span> defaultXPConfig { position <span style=\"color: #a0522d;\">=</span> <span style=\"color: #228b22;\">Top</span> }

<span style=\"color: #0000ff;\">withPrompt</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">String</span> <span style=\"color: #a0522d;\">-&gt;</span> (<span style=\"color: #228b22;\">String</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">X</span> <span style=\"color: #228b22;\">()</span>) <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">X</span> <span style=\"color: #228b22;\">()</span>
<span style=\"color: #0000ff;\">withPrompt</span> prompt fn <span style=\"color: #a0522d;\">=</span> inputPrompt xpConf prompt <span style=\"color: #a0522d;\">?+</span> fn
<span style=\"color: #0000ff;\">withCompletingPrompt</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">String</span> <span style=\"color: #a0522d;\">-&gt;</span> [<span style=\"color: #228b22;\">String</span>] <span style=\"color: #a0522d;\">-&gt;</span> (<span style=\"color: #228b22;\">String</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">X</span> <span style=\"color: #228b22;\">()</span>) <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">X</span> <span style=\"color: #228b22;\">()</span>
<span style=\"color: #0000ff;\">withCompletingPrompt</span> prompt completions fn <span style=\"color: #a0522d;\">=</span> 
  inputPromptWithCompl xpConf prompt comp <span style=\"color: #a0522d;\">?+</span> fn
  <span style=\"color: #a020f0;\">where</span> comp <span style=\"color: #a0522d;\">=</span> mkComplFunFromList completions
        
<span style=\"color: #0000ff;\">withFilePrompt</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">String</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">String</span> <span style=\"color: #a0522d;\">-&gt;</span> (<span style=\"color: #228b22;\">String</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">X</span> <span style=\"color: #228b22;\">()</span>) <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">X</span> <span style=\"color: #228b22;\">()</span>
<span style=\"color: #0000ff;\">withFilePrompt</span> prompt directory fn <span style=\"color: #a0522d;\">=</span> <span style=\"color: #a020f0;\">do</span>
  files <span style=\"color: #a0522d;\">&lt;-</span> liftIO <span style=\"color: #a0522d;\">$</span> getDirectoryContents directory
  <span style=\"color: #a020f0;\">let</span> fs <span style=\"color: #a0522d;\">=</span> filter relevant files
      relevant f <span style=\"color: #a0522d;\">=</span> <span style=\"color: #8b2252;\">'.'</span> <span style=\"color: #a0522d;\">/=</span> head f
  withCompletingPrompt prompt fs fn</pre>

<h3>Finally</h3>

<p>The main thing I've been kicking around is actually Haskell. I finally buckled down and went through most of the <a href=\"http://www.happstack.com/docs/crashcourse/index.html\">Happstack Crash Course</a><a href=\"#foot-Sun-Nov-11-003620EST-2012\" name=\"note-Sun-Nov-11-003620EST-2012\">[8]</a>, and it just about feels like I have a less tenuous grip on the language than I used to. After reading through the references available, hitting my head rather hard against the concept of monads, going through several tutorials, and attempting a few small programs of my own, it is possible for me to write a medium sized program in Haskell without pulling a reference text out every two minutes. That only took about three years. I'm not entirely sure whether the effort has been worth it in the direct sense, but I still stand by my prior assessment of the situation. Understanding a new mode of thinking about a problem <i>can not</i> be a waste of time. Even if it turns out to be less effective than another mode, or even outright incorrect, understanding the process will give you some insight. Either about the problem or about the current practitioners of its solutions or about your own cognitive assumptions.</p>

<p>All of those are powerful things, and you get very surprisingly few of them if you only know one language.</p>

<!--  LocalWords:  StumpWM XMonad Happstack
 -->


<hr />
<h5>Footnotes</h5>
<p>1 - <a href=\"#note-Sun-Nov-11-002932EST-2012\" name=\"foot-Sun-Nov-11-002932EST-2012\">[back]</a> - Mainly various Emacs language modes and networking tools.</p>

<p>2 - <a href=\"#note-Sun-Nov-11-002942EST-2012\" name=\"foot-Sun-Nov-11-002942EST-2012\">[back]</a> - And, as mentioned, my home activities tend to the unproductive, so ... yeah.</p>

<p>3 - <a href=\"#note-Sun-Nov-11-002953EST-2012\" name=\"foot-Sun-Nov-11-002953EST-2012\">[back]</a> - While I'm the only one who pokes at Ruby.</p>

<p>4 - <a href=\"#note-Sun-Nov-11-003002EST-2012\" name=\"foot-Sun-Nov-11-003002EST-2012\">[back]</a> - No more than is offensive about Python or Elisp, leastwise.</p>

<p>5 - <a href=\"#note-Sun-Nov-11-003224EST-2012\" name=\"foot-Sun-Nov-11-003224EST-2012\">[back]</a> - <code>Mod+Click+Drag</code> moves a floating window, detaching it if it isn't already, while <code>Mod+Right-click+Drag</code> resizes a floating window.</p>

<p>6 - <a href=\"#note-Sun-Nov-11-003257EST-2012\" name=\"foot-Sun-Nov-11-003257EST-2012\">[back]</a> - Which is catastrophic for a tiling WM.</p>

<p>7 - <a href=\"#note-Sun-Nov-11-003302EST-2012\" name=\"foot-Sun-Nov-11-003302EST-2012\">[back]</a> - Mostly when starting up <code>mplayer</code>, <code>feh</code> or <code>rdesktop</code> with some of the more arcane options, though I've had a couple of completely unexplained crashes too.</p>

<p>8 - <a href=\"#note-Sun-Nov-11-003620EST-2012\" name=\"foot-Sun-Nov-11-003620EST-2012\">[back]</a> - Still need to run entirely through the <code>acid-state</code> and <code>IxSet</code> sections.</p>
   "))
((5202 3723 596136000) :INSERT (109 :POSTED 3561598800))
((5202 3723 596138000) :INSERT (109 :TAG :GENERAL-PROGRAMMING-THOUGHTS))
((5202 3723 596140000) :INSERT (109 :TAG :IDEA-PEELING))
((5202 3723 596142000) :INSERT (109 :TAG :PROGRAMMING-ENVIRONMENT))
((5202 3723 596315000) :INSERT (110 :TITLE "Authentication - Part 4.75"))
((5202 3723 596321000) :INSERT (110 :FILE "authentication-part-4.75.html"))
((5202 3723 596323000) :INSERT (110 :EDITED 3610299121))
((5202 3723 596325000) :INSERT
 (110 :BODY
  "<p>Man, I'd better wrap this shit up before my Authentication series becomes Zeno's Article. This particular column won't be contributing to the cause, unfortunately; this is more errata than another installment.</p>

<p>Its been pointed out to me that SHA-2<a href=\"#foot-Fri-Nov-16-162606EST-2012\" name=\"note-Fri-Nov-16-162606EST-2012\">[1]</a> is actually a pretty poor choice of hash function for password storage. The why of it is explained over in <a href=\"http://codahale.com/how-to-safely-store-a-password/\">this article</a>, which conveniently starts off by recommending <a href=\"http://en.wikipedia.org/wiki/Bcrypt\"><code>bcrypt</code></a> and linking you to implementations for a variety of popular languages. <code>bcrypt</code> looks good for password storage for a number of reasons, including pre-resolved salt, slow hashing speed and an adjustable work factor. Still, read through the entire article, and then look through <a href=\"http://www.unlimitednovelty.com/2012/03/dont-use-bcrypt.html\">this one</a>, aggressively titled <a href=\"http://www.unlimitednovelty.com/2012/03/dont-use-bcrypt.html\">\"Don't Use Bcrypt\"</a>, which introduces another couple of algorithms which you might want to pick over it for various reasons. As it turns out, <a href=\"http://en.wikipedia.org/wiki/Scrypt\"><code>scrypt</code></a> is also implemented for a variety of languages and provides much poorer performance<a href=\"#foot-Fri-Nov-16-162610EST-2012\" name=\"note-Fri-Nov-16-162610EST-2012\">[2]</a>, while <a href=\"http://en.wikipedia.org/wiki/PBKDF2\">PBKDF2</a> has been around longer and has therefore seen more battlefield sorties.</p>

<p>I'm not going to recommend one.</p>

<p>They're all better than the <code>SHA</code> family for this particular purpose, and they all implement salting for you, so any of them will be an improvement if you ended up blindly copying out the <a href=\"/article?name=authentication.html\">code I had previously posted</a>. Thing is, like I mentioned last time, you really should understand the possible attacks in a given situation, and pick a hash that counters them appropriately. I kind of agree with the second guy; yes, <code>bcrypt</code> is much better than some options, but don't take that to mean \"Just use <code>bcrypt</code> from now on\". You need to evaluate your situation and pick a hash function that fits it.</p>

<p>All that having been said, <code>bcrypt</code> is going to be beat out a <code>SHA-2</code> in a known-cyphertext attack. That is, in the situation where your attacker has a copy of your user database, including all the salt and password hashes. In this situation, they can probably brute-force passwords hashed with <code>SHA-2</code>. The problem is that <code>SHA-2</code> is fast, so it's possible to try several hundred thousand per second even with a relatively modest machine, whereas hashing a string with <code>bcrypt</code> or similar <i>actually takes a second or so</i>. You can't brute force faster than the algorithm produces output, so the slower ones are going have a security advantage there.</p>

<p>All <b>that</b> having been said. You know what would completely sidestep the entire fucking question? <a href=\"/article?name=authentication-part4.html\">Using RSA keys</a> to identify and authenticate your users. You wouldn't need to hash dick because all you'd store is their <i>public</i> key. Because you wouldn't need to hash anything, you wouldn't need to salt anything. Because you wouldn't be using a password, your users wouldn't have to remember any additional information.</p>

<p>Yes, it's <a href=\"/article?name=rsa-crypto.html\">currently more work</a> to put together a working RSA-based authentication system, and yes you have to offer it as an option because the general public hasn't caught on to it yet, but it's the Right Way to do auth<a href=\"#foot-Fri-Nov-16-163036EST-2012\" name=\"note-Fri-Nov-16-163036EST-2012\">[3]</a>. Just putting it out there.</p>

<hr />
<h5>Footnotes</h5>
<p>1 - <a href=\"#note-Fri-Nov-16-162606EST-2012\" name=\"foot-Fri-Nov-16-162606EST-2012\">[back]</a> - Whichever <code>SHA-2</code> you like, it doesn't matter for the purposes of this exercise.</p>

<p>2 - <a href=\"#note-Fri-Nov-16-162610EST-2012\" name=\"foot-Fri-Nov-16-162610EST-2012\">[back]</a> - Slow, as both of those articles note, is actually what we want in a password hashing function. So while that may sound like a dig, it's not.</p>

<p>3 - <a href=\"#note-Fri-Nov-16-163036EST-2012\" name=\"foot-Fri-Nov-16-163036EST-2012\">[back]</a> - At least until cheap-ish quantum computers become available. Hopefully someone works up a better trap-door function before then. Anyway, I get the feeling that it's far enough off that RSA auth would still be worth implementing in the interim.</p>
"))
((5202 3723 596364000) :INSERT (110 :POSTED 3562030800))
((5202 3723 596619000) :INSERT
 (111 :TITLE "Various Thoughts and WebMote, the Next Part"))
((5202 3723 596624000) :INSERT
 (111 :FILE "various-thoughts-and-web-mote-update.html"))
((5202 3723 596626000) :INSERT (111 :EDITED 3610300628))
((5202 3723 596628000) :INSERT
 (111 :BODY "<p>It has become obvious to me that I'm getting old.</p>

<p>My wife and mother-in-law went out for lunch while I was at work. They dined<a href=\"#foot-Sun-Nov-25-195637EST-2012\" name=\"note-Sun-Nov-25-195637EST-2012\">[1]</a> at KFC, and brought the leftovers of their feast home, ostensibly to serve as dinner for me. Three pieces later, my body is loudly and clearly telling me to fuck off. So having torn myself away from the porcelain god, I'm going to write something in an effort to expunge the taste of grease and fail.</p>

<h2>Fatherhood</h2>

<p>Children are a lot of effort. I'm still constantly being told that it gets easier, and that the second and third ones are cakewalks, but I'm not seeing it yet. All I can definitively say so far is that if you're planning on generating larva with your significant other, expect to sleep significantly less than you're used to.</p>

<p>Two more things actually. First, if at all possible, have a female of your family unit breast-feed. Milk-fed babies' initial output doesn't smell like, well, shit, for about a month. Second, babies have a ridiculously poor API. They just open a stream and send \"Waaaaah\" at various volumes and modulations. That might mean \"feed me\", \"change me\", \"burp me\", \"pay attention to me\" or \"fuck off\"; and they don't close the stream until you do the right one<code>s?</code> and/or get very lucky. So ... be prepared to iterate through that pattern.</p>

<p>A lot.</p>

<p>Finally, a word advice for the programmer daddies specifically, hands down the best investment you can make is a <a href=\"http://www.amazon.ca/b?ie=UTF8&node=4624444011\">sling carrier of some kind</a>. It'll let you cradle your baby while keeping both hands free. I'd have basically no hope of finishing this article without <a href=\"http://www.amazon.ca/Moby-Wrap-MW-Slate-Seasonal-Slate/dp/B002PIZV36/ref=sr_1_10?s=baby&ie=UTF8&qid=1353895785&sr=1-10\">one</a>.</p>

<h2>Haskell</h2>

<p>I've finally gotten past Absolute N00b stage with Haskell. Like I said last time, it only took three years. There's a few patterns I'm detecting in the libraries and community that I thought I'd point out.</p>

<p>The strong typing stereotype turns out to be right on the money. There are precious few libraries on <a href=\"http://hackage.haskell.org/packages/archive/pkg-list.html\">hackage</a> that have any kind of usage example in addition to type signatures, and fewer still that have <a href=\"http://www.happstack.com/docs/crashcourse/index.html\">actual documentation</a>. I guess I'll have to get good at reading type signatures, but guys, these are for the fucking <i>compiler</i>. Some human readable media beyond basic explanations would be nice. The upshot is that, if you're hopping around <code>ghci</code>, you can use <code>:browse Library.Name.Here</code>, and the <code>hoogle</code> docs are <a href=\"/article?name=setting-up-haskell.html\">available for local use</a>, so I guess it might kind-of-almost-sort-of even out once you get to the point where you're comfortable with language basics. The other upshot is that the community is <i>very</i> responsive. I wasn't expecting to have as easy a time getting stupid questions answered as I've actually had, whether that's been in-person, via <a href=\"http://www.haskell.org/haskellwiki/IRC_channel\">IRC</a> or on the appropriate <a href=\"http://stackoverflow.com/questions/tagged/haskell\">SO tag</a>.</p>

<h2>Clojure</h2>

<p><a href=\"https://github.com/technomancy/swank-clojure/blob/master/README.md\"><code>swank-clojure</code></a> seems to have been deprecated! I went to install my usual Clojure environment to do a bit of hacking for this article, and noticed <a href=\"https://github.com/technomancy/swank-clojure/blob/master/README.md#deprecated\">that giant note</a> in its <code>git</code> repo. The good news is that there's apparently a thing called <code><a href=\"https://github.com/kingtim/nrepl.el\">nrepl</a></code> that provides more or less the same functionality, except through the Clojure <a href=\"https://github.com/clojure/tools.nrepl\">Networked REPL</a> rather than through <a href=\"http://www.cliki.net/SLIME-HOWTO\">SWANK</a>. <code>nrepl.el</code> is available <a href=\"https://raw.github.com/kingtim/nrepl.el/master/nrepl.el\">here</a>, for those of us who still install Emacs packages manually. The model is a bit different; where <code>SWANK</code> is a thing that gets started as part of <code>SLIME</code>, and then loads projects, <code>nREPL</code> is theoretically a thing that your project needs as a dependency, then gets started once you start editing that project.</p>

<p>I say \"theoretically\" because, just like <code>swank-clojure</code>, <code>nrepl</code> fails pretty spectacularly on my machine. I guess I'm sticking to <code>inferior-lisp</code> for Clojure code.</p>

<p>On the language in general by the way, it feels surprisingly comfortable after a couple months playing around in Haskell-land. To a first approximation, it's Common Lisp with more emphasis on the stuff I like and less emphasis on the stuff I don't. Because of the ecosystem its embedded in, you frequently find yourself having to call Java code for one task or another, but doing so is <a href=\"http://clojure.org/java_interop\">easier than you'd think</a>. The only part I really <i>don't</i> like about it is its weight. Every time I <code>lein run</code> a project, or start up the <code>repl</code>/<code>run-lisp</code>, there's a visible few-second delay during which all my cores start spinning into the 98% range. That doesn't happen with any other language I use regularly, even while running what seem to be more compute-intensive operations.</p>

<h2>Web Mote</h2>

<p>On that note, a very small chunklet of my time has been going towards the tweaking of a Python project I started for my RasPi a little while ago.</p>

<p><a href=\"https://github.com/Inaimathi/web-mote\">Web-Mote</a> is in a usable state at the moment<a href=\"#foot-Sun-Nov-25-200355EST-2012\" name=\"note-Sun-Nov-25-200355EST-2012\">[2]</a>; I've got the Pi hooked up to a separate wireless router and running a subset<a href=\"#foot-Sun-Nov-25-200358EST-2012\" name=\"note-Sun-Nov-25-200358EST-2012\">[3]</a> of my media library through the livingroom TV's HDMI port. I still <i>haven't</i> figured out how to control the TV itself from the device. Hopefully, I'll fix that soon soon<a href=\"#foot-Sun-Nov-25-200403EST-2012\" name=\"note-Sun-Nov-25-200403EST-2012\">[4]</a>.</p>

<p>I ended up not following <a href=\"/article?name=webmote-the-right-way--part3.html\">my thought</a> process out to its ultimate conclusion. Ok, I did experiment a bit with a completely client-centric approach, but the downsides I mentioned turned out to be more severe than anticipated. Specifically, it ended up causing all sorts of headaches relating to what to do when my remote lost the signal, or when it ran out of battery power. Those kinds of problems seem to be inherent to keeping most program state on the client rather than the server, and being that they directly got in the way of my enjoying the use of the system, I will not be going down that path.</p>

<p>What I <i>do</i> have to do is put together a handler that deals with sending out a log in the form of an SSE response. That'll be critical for the future when I actually want clients to start interacting with one another<a href=\"#foot-Sun-Nov-25-205346EST-2012\" name=\"note-Sun-Nov-25-205346EST-2012\">[5]</a>; they'll each need to know what the state of play is on the server, so a coordination handler is in order. A <a href=\"https://groups.google.com/forum/?fromgroups=#!topic/webpy/AIKk7l2vpb4\">cursory googling</a> tells me that <code>web.py</code> is built more or less like <code>hunchentoot</code> in terms of the threading model, so I may actually need to move to a different server if I intend to make this puppy support more than a handful of clients at a time. Which I may as well, just for the fun of it. The Python situation is a bit better than the CL one here, since there's actually a <a href=\"http://www.tornadoweb.org/\">production-ready non-blocking web-server</a> waiting to be used, where Lispers warned me away from the comparable CL application for fear of its prime-time readiness. The good news is that, thanks to this front-end separation experiment I'm running, porting the backend away from <code>web.py</code> will involve changing exactly one file in a not-very-extensive way.</p>

<hr />
<h5>Footnotes</h5>
<p>1 - <a href=\"#note-Sun-Nov-25-195637EST-2012\" name=\"foot-Sun-Nov-25-195637EST-2012\">[back]</a> - Typically for my mother-in-law but atypically for my wife,</p>

<p>2 - <a href=\"#note-Sun-Nov-25-200355EST-2012\" name=\"foot-Sun-Nov-25-200355EST-2012\">[back]</a> - Though oddly listed as 21.2% Perl, even though the only non-JS/HTML/CSS code I've got in there is Python.</p>

<p>3 - <a href=\"#note-Sun-Nov-25-200358EST-2012\" name=\"foot-Sun-Nov-25-200358EST-2012\">[back]</a> - It would be the complete set, but I'm still waiting on a drive enclosure that will finally let me store more than 32GB of data there without using up a second wall outlet.</p>

<p>4 - <a href=\"#note-Sun-Nov-25-200403EST-2012\" name=\"foot-Sun-Nov-25-200403EST-2012\">[back]</a> - Realistically, I don't need anything like complete control. I need to be able to tell it <code>power on</code>/<code>power off</code>, <code>go to the channel [this] is connected through</code> and <code>volume up</code>/<code>volume down</code>.</p>

<p>5 - <a href=\"#note-Sun-Nov-25-205346EST-2012\" name=\"foot-Sun-Nov-25-205346EST-2012\">[back]</a> - For instance, one use I've already dreamed up but haven't come close to implementing yet, is something I'm calling democracy mode. The idea is that the server tallies votes for the next thing to play, and plays the highest voted rather than next-in-queue when a media change occurs. When I think about how to implement something like that... Well, it seems like it would be both simple and in keeping with the general design principles of the semi-client approach. You keep a running total and a list of IPs that have already voted, and you give each client a handler by which to register a vote. Done. Now, thinking about how I would do it without central state being kept on the server. It seems like the best I could do is let the user register their current vote. Keep the <a href=\"/article?name=client-communication.html\">clients synchronized with the server somehow</a>, and send a message every once in a while that says <code>VOTE NOW, BITCHES</code>, at which point each client would report its current vote and clear it. There'd need to be a momentary stateful operation, but it would literally be getting the <code>len</code> of the collected <code>[vote-ip]</code>. That seems like it would be a bit more complicated, if theoretically elegant, to actually implement.</p>
"))
((5202 3723 596715000) :INSERT (111 :POSTED 3562808400))
((5202 3723 596717000) :INSERT (111 :TAG :BITCHING))
((5202 3723 596719000) :INSERT (111 :TAG :GENERAL-PROGRAMMING-THOUGHTS))
((5202 3723 596720000) :INSERT (111 :TAG :IDEA-PEELING))
((5202 3723 596722000) :INSERT (111 :TAG :SPECULATION))
((5202 3723 597117000) :INSERT (112 :TITLE "WebMote part Tornado"))
((5202 3723 597125000) :INSERT (112 :FILE "web-mote-part-tornado.html"))
((5202 3723 597127000) :INSERT (112 :EDITED 3610022331))
((5202 3723 597129000) :INSERT
 (112 :BODY
  "<p>So <a href=\"https://github.com/Inaimathi/web-mote\">that</a> went pretty well.</p>

<p>Except that <code>github</code> still thinks this project is 20% Perl. If I were mean, I'd make a joke about binary files being improperly recognized.</p>

<p>Granted, the re-write encompassed <code>player.py</code> and not just <code>main.py</code>, but that's because I never stopped to sit down and think through the threading model. Because <code>web.py</code> does a thread-per-request, it <i>technically</i> worked anyway, but that module was due for a proper tear-down and re-build whether I moved servers or not.</p>

<pre><span style=\"color: #b22222;\">## player.py
</span>
<span style=\"color: #a020f0;\">from</span> subprocess <span style=\"color: #a020f0;\">import</span> Popen, PIPE, call
<span style=\"color: #a020f0;\">from</span> threading <span style=\"color: #a020f0;\">import</span> Thread
<span style=\"color: #a020f0;\">from</span> Queue <span style=\"color: #a020f0;\">import</span> Queue
<span style=\"color: #a020f0;\">import</span> os
<span style=\"color: #a020f0;\">import</span> util, conf
<span style=\"color: #a020f0;\">from</span> main <span style=\"color: #a020f0;\">import</span> ServerStatus

<span style=\"color: #b22222;\">############################################################
### MASSIVE AMOUNTS OF CONFIG (this should probably be in a DB somewhere)
############################################################
</span><span style=\"color: #a0522d;\">defaultPlayer</span> = [<span style=\"color: #8b2252;\">\"mplayer\"</span>]

<span style=\"color: #b22222;\">### If `omxplayer` is available, use it for `mp4`s and `ogv`s (with audio output to the HDMI port)
### If not, use the default player for everything
</span><span style=\"color: #a020f0;\">try</span>:
    call([<span style=\"color: #8b2252;\">\"omxplayer\"</span>])
    playerTable = { 
        <span style=\"color: #8b2252;\">'mp4'</span>: [<span style=\"color: #8b2252;\">\"omxplayer\"</span>, <span style=\"color: #8b2252;\">\"-o\"</span>, <span style=\"color: #8b2252;\">\"hdmi\"</span>], 
        <span style=\"color: #8b2252;\">'ogv'</span>: [<span style=\"color: #8b2252;\">\"omxplayer\"</span>, <span style=\"color: #8b2252;\">\"-o\"</span>, <span style=\"color: #8b2252;\">\"hdmi\"</span>] }
<span style=\"color: #a020f0;\">except</span>:
    playerTable = {}

<span style=\"color: #a0522d;\">commandTable</span> = {
    <span style=\"color: #8b2252;\">'mplayer'</span>:
        {<span style=\"color: #8b2252;\">'step-backward'</span>: <span style=\"color: #8b2252;\">\"\\x1B[B\"</span>, <span style=\"color: #8b2252;\">'backward'</span>: <span style=\"color: #8b2252;\">\"\\x1B[D\"</span>, <span style=\"color: #8b2252;\">'forward'</span>: <span style=\"color: #8b2252;\">\"\\x1B[C\"</span>, <span style=\"color: #8b2252;\">'step-forward'</span>: <span style=\"color: #8b2252;\">\"\\x1B[A\"</span>,
         <span style=\"color: #b22222;\">## down | left | right | up
</span>         <span style=\"color: #8b2252;\">'volume-down'</span>: <span style=\"color: #8b2252;\">\"9\"</span>, <span style=\"color: #8b2252;\">'volume-off'</span>: <span style=\"color: #8b2252;\">\"m\"</span>, <span style=\"color: #8b2252;\">'volume-up'</span>: <span style=\"color: #8b2252;\">\"0\"</span>,
         <span style=\"color: #8b2252;\">'stop'</span>: <span style=\"color: #8b2252;\">\"q\"</span>, <span style=\"color: #8b2252;\">'pause'</span>: <span style=\"color: #8b2252;\">\" \"</span>, <span style=\"color: #8b2252;\">'play'</span>: <span style=\"color: #8b2252;\">\" \"</span>},
    <span style=\"color: #8b2252;\">'omxplayer'</span>:
        {<span style=\"color: #8b2252;\">'step-backward'</span>: <span style=\"color: #8b2252;\">\"\\x1B[B\"</span>, <span style=\"color: #8b2252;\">'backward'</span>: <span style=\"color: #8b2252;\">\"\\x1B[D\"</span>, <span style=\"color: #8b2252;\">'forward'</span>: <span style=\"color: #8b2252;\">\"\\x1B[C\"</span>, <span style=\"color: #8b2252;\">'step-forward'</span>: <span style=\"color: #8b2252;\">\"\\x1B[A\"</span>,
         <span style=\"color: #8b2252;\">'volume-off'</span>: <span style=\"color: #8b2252;\">\" \"</span>, <span style=\"color: #b22222;\">#oxmplayer doesn't have a mute, so we pause instead
</span>         <span style=\"color: #8b2252;\">'volume-down'</span>: <span style=\"color: #8b2252;\">\"+\"</span>, <span style=\"color: #8b2252;\">'volume-up'</span>: <span style=\"color: #8b2252;\">\"-\"</span>, 
         <span style=\"color: #8b2252;\">'stop'</span>: <span style=\"color: #8b2252;\">\"q\"</span>, <span style=\"color: #8b2252;\">'pause'</span>: <span style=\"color: #8b2252;\">\" \"</span>, <span style=\"color: #8b2252;\">'play'</span>: <span style=\"color: #8b2252;\">\" \"</span>}
    }
<span style=\"color: #b22222;\">### END THE MASSIVE CONFIG
############################################################
</span><span style=\"color: #a020f0;\">try</span>:
    commandQueue <span style=\"color: #b22222;\">## Global multi-process queue to accept player commands
</span>    playQ        <span style=\"color: #b22222;\">## Global multi-process queue to accept files to play
</span><span style=\"color: #a020f0;\">except</span>:
    commandQueue = Queue()
    playQ = Queue()

<span style=\"color: #a020f0;\">def</span> <span style=\"color: #0000ff;\">listen</span>():
    <span style=\"color: #a020f0;\">while</span> <span style=\"color: #a020f0;\">True</span>:
        aFile = playQ.get()
        <span style=\"color: #a020f0;\">if</span> util.isInRoot(aFile):
            ServerStatus.write_message_to_all(aFile, event=<span style=\"color: #8b2252;\">'playing'</span>)
            playerCmd = __getPlayerCommand(aFile)
            cmdTable = commandTable[playerCmd[0]]
            playFile(playerCmd, aFile, cmdTable)

<span style=\"color: #a020f0;\">def</span> <span style=\"color: #0000ff;\">playFile</span>(playerCmd, fileName, cmdTable):
    __clearQueue(commandQueue)
    activePlayer = Popen(playerCmd + [fileName], stdin=PIPE)
    <span style=\"color: #a020f0;\">while</span> activePlayer.poll() == <span style=\"color: #008b8b;\">None</span>:
        <span style=\"color: #a020f0;\">try</span>:
            res = commandQueue.get(timeout=1)
            activePlayer.stdin.write(cmdTable[res])
            ServerStatus.write_message_to_all(res, event=<span style=\"color: #8b2252;\">\"command\"</span>)
            <span style=\"color: #a020f0;\">if</span> <span style=\"color: #7a378b;\">unicode</span>(res) == <span style=\"color: #7a378b;\">unicode</span>(<span style=\"color: #8b2252;\">\"stop\"</span>):
                __clearQueue(playQ)
                activePlayer.terminate()
                <span style=\"color: #a020f0;\">return</span> <span style=\"color: #a020f0;\">False</span>
        <span style=\"color: #a020f0;\">except</span>:
            <span style=\"color: #008b8b;\">None</span>
    ServerStatus.write_message_to_all(fileName, event=<span style=\"color: #8b2252;\">\"finished\"</span>)
    activePlayer = <span style=\"color: #a020f0;\">False</span>
    <span style=\"color: #a020f0;\">return</span> <span style=\"color: #a020f0;\">True</span>

<span style=\"color: #b22222;\">### Local Utility
</span><span style=\"color: #a020f0;\">def</span> <span style=\"color: #0000ff;\">__getPlayerCommand</span>(filename):
    <span style=\"color: #a020f0;\">global</span> playerTable, defaultPlayer
    name, ext = os.path.splitext(filename)
    <span style=\"color: #a020f0;\">return</span> playerTable.get(ext[1:], defaultPlayer)

<span style=\"color: #a020f0;\">def</span> <span style=\"color: #0000ff;\">__clearQueue</span>(q):
    <span style=\"color: #a020f0;\">while</span> <span style=\"color: #a020f0;\">not</span> q.empty():
        q.get()
    <span style=\"color: #a020f0;\">return</span> <span style=\"color: #a020f0;\">True</span>

<span style=\"color: #b22222;\">### Start the player process
</span><span style=\"color: #a0522d;\">playerThread</span> = Thread(target=listen, args=())
playerThread.start()</pre>

<p>The relevant parts are actually just those two functions in the center. I'll assume you know what all the <code>import</code>s mean, and that we can just gloss over the <code>MASSIVE CONFIG</code>. The utility functions are self-explanatory-ish. <code>__getPlayerCommand</code> takes a file name, and figures out which player that file is going to be using by looking its extension up in the command table. By default, that's <code>mplayer</code>, but as you can see by that <code>try</code> block in the config section, if <code>omxplayer</code> is available, we use it for <code>mp4</code>s and <code>ogv</code>s<a href=\"#foot-Thu-Nov-29-163338EST-2012\" name=\"note-Thu-Nov-29-163338EST-2012\">[1]</a>. <code>__clearQueue</code> takes a <code>Queue</code> and pulls from it while it's not empty, resulting in an empty queue.</p>

<p>Like I said, the real meat here is</p>

<pre><span style=\"color: #a020f0;\">def</span> <span style=\"color: #0000ff;\">listen</span>():
    <span style=\"color: #a020f0;\">while</span> <span style=\"color: #a020f0;\">True</span>:
        aFile = playQ.get()
        <span style=\"color: #a020f0;\">if</span> util.isInRoot(aFile):
            ServerStatus.write_message_to_all(aFile, event=<span style=\"color: #8b2252;\">'playing'</span>)
            playerCmd = __getPlayerCommand(aFile)
            cmdTable = commandTable[playerCmd[0]]
            playFile(playerCmd, aFile, cmdTable)

<span style=\"color: #a020f0;\">def</span> <span style=\"color: #0000ff;\">playFile</span>(playerCmd, fileName, cmdTable):
    __clearQueue(commandQueue)
    activePlayer = Popen(playerCmd + [fileName], stdin=PIPE)
    <span style=\"color: #a020f0;\">while</span> activePlayer.poll() == <span style=\"color: #008b8b;\">None</span>:
        <span style=\"color: #a020f0;\">try</span>:
            res = commandQueue.get(timeout=1)
            activePlayer.stdin.write(cmdTable[res])
            ServerStatus.write_message_to_all(res, event=<span style=\"color: #8b2252;\">\"command\"</span>)
            <span style=\"color: #a020f0;\">if</span> <span style=\"color: #7a378b;\">unicode</span>(res) == <span style=\"color: #7a378b;\">unicode</span>(<span style=\"color: #8b2252;\">\"stop\"</span>):
                __clearQueue(playQ)
                activePlayer.terminate()
                <span style=\"color: #a020f0;\">return</span> <span style=\"color: #a020f0;\">False</span>
        <span style=\"color: #a020f0;\">except</span>:
            <span style=\"color: #008b8b;\">None</span>
    ServerStatus.write_message_to_all(fileName, event=<span style=\"color: #8b2252;\">\"finished\"</span>)
    activePlayer = <span style=\"color: #a020f0;\">False</span>
    <span style=\"color: #a020f0;\">return</span> <span style=\"color: #a020f0;\">True</span></pre>

<p><code>listen</code> pulls stuff out of the <code>playQ</code><a href=\"#foot-Thu-Nov-29-163503EST-2012\" name=\"note-Thu-Nov-29-163503EST-2012\">[2]</a>, checks that the thing it got is a file it should be able to play and if so, pulls the relevant metadata and passes it on to <code>playFile</code>.</p>

<p><code>playFile</code> is probably the oddest function I've ever had to write. It has to be blocking, because we don't want its caller to think it can play another file before the last one is done<a href=\"#foot-Thu-Nov-29-163509EST-2012\" name=\"note-Thu-Nov-29-163509EST-2012\">[3]</a>, but it also has to launch its player in an asynchronous <code>subprocess</code>, because it needs to be able to receive input from the user, <b>but</b> it can't <i>wait</i> for input because that means that it would <i>have</i> to receive some before it returned<a href=\"#foot-Thu-Nov-29-163517EST-2012\" name=\"note-Thu-Nov-29-163517EST-2012\">[4]</a>. The result is what you see there. The first thing we do is clear the <code>commandQueue</code><a href=\"#foot-Thu-Nov-29-163521EST-2012\" name=\"note-Thu-Nov-29-163521EST-2012\">[5]</a> and launch the player and retain a handle to it. Then, until playback finishes, we poll <code>commandQueue</code> for user input. We have to leave a timeout for that input check, because we'd otherwise wait here even after the file finished playing, and that's not fun. <code>ServerStatus.write_message_to_all</code> write out an SSE notifying the front-end of</p>

<ul>
  <li>playing a file</li>
  <li>receiving a user command</li>
  <li>finishing the file</li>
</ul>

<p>respectively. Hmm. I should probably notify the front end that I've finished playback even when a <code>stop</code> command is received. Just for completeness. I'll make a note of it.</p>

<p>Those changes essentially make the <code>player</code> into an actor, except that it reaches into surrounding state in order to send notifications. If I really felt strongly about it, I could instead give it an output queue that other processes could pull from in order to communicate, rather than have it send messages into <code>ServerStatus</code> directly. I don't today, but you knever no.</p>

<p>Now that we've got that out of the way, here's what the new <code>main.py</code> looks like using <code>tornado</code></p>

<pre><span style=\"color: #a020f0;\">import</span> tornado.ioloop, tornado.web, os, json, random, time
<span style=\"color: #a020f0;\">import</span> util, conf, sse, player

<span style=\"color: #a020f0;\">class</span> <span style=\"color: #228b22;\">ShowDirectory</span>(tornado.web.RequestHandler):
    <span style=\"color: #a020f0;\">def</span> <span style=\"color: #0000ff;\">post</span>(<span style=\"color: #a020f0;\">self</span>):
        <span style=\"color: #a020f0;\">try</span>:
            <span style=\"color: #7a378b;\">dir</span> = <span style=\"color: #a020f0;\">self</span>.get_argument(<span style=\"color: #8b2252;\">\"dir\"</span>)
            <span style=\"color: #a020f0;\">assert</span> util.isInRoot(<span style=\"color: #7a378b;\">dir</span>)
            <span style=\"color: #a020f0;\">self</span>.write(util.dirToJSON(<span style=\"color: #7a378b;\">dir</span>))
        <span style=\"color: #a020f0;\">except</span>:
            <span style=\"color: #a020f0;\">self</span>.write(util.entriesToJSON(conf.root))

<span style=\"color: #a020f0;\">class</span> <span style=\"color: #228b22;\">Play</span>(tornado.web.RequestHandler):
    <span style=\"color: #a020f0;\">def</span> <span style=\"color: #0000ff;\">post</span>(<span style=\"color: #a020f0;\">self</span>):
        t = <span style=\"color: #a020f0;\">self</span>.get_argument(<span style=\"color: #8b2252;\">'target'</span>)
        player.commandQueue.put(<span style=\"color: #8b2252;\">'stop'</span>)
        <span style=\"color: #a020f0;\">if</span> os.path.isfile(t):
            fileList = [t]
        <span style=\"color: #a020f0;\">elif</span> os.path.isdir(t):
            fileList = util.deepListDir(t)
        <span style=\"color: #a020f0;\">else</span>:
            fileList = json.loads(t)
        <span style=\"color: #a020f0;\">if</span> <span style=\"color: #a020f0;\">self</span>.get_argument(<span style=\"color: #8b2252;\">'shuffle'</span>, <span style=\"color: #a020f0;\">False</span>):
            random.shuffle(fileList)
        <span style=\"color: #a020f0;\">self</span>.write(json.dumps(fileList))
        time.sleep(1)
        [player.playQ.put(f) <span style=\"color: #a020f0;\">for</span> f <span style=\"color: #a020f0;\">in</span> fileList]

<span style=\"color: #a020f0;\">class</span> <span style=\"color: #228b22;\">ServerStatus</span>(sse.SSEHandler): 
    <span style=\"color: #a020f0;\">def</span> <span style=\"color: #0000ff;\">on_open</span>(<span style=\"color: #a020f0;\">self</span>):
        <span style=\"color: #a020f0;\">self</span>.write_message(<span style=\"color: #a020f0;\">self</span>.connection_id, event=<span style=\"color: #8b2252;\">'connection_id'</span>)
    <span style=\"color: #a020f0;\">def</span> <span style=\"color: #0000ff;\">on_close</span>(<span style=\"color: #a020f0;\">self</span>):
        <span style=\"color: #a020f0;\">self</span>.write_message_to_all(<span style=\"color: #a020f0;\">self</span>.connection_id, event=<span style=\"color: #8b2252;\">'left'</span>)

<span style=\"color: #a020f0;\">class</span> <span style=\"color: #228b22;\">Command</span>(tornado.web.RequestHandler):
    <span style=\"color: #a020f0;\">def</span> <span style=\"color: #0000ff;\">post</span>(<span style=\"color: #a020f0;\">self</span>):
        cmd = <span style=\"color: #a020f0;\">self</span>.get_argument(<span style=\"color: #8b2252;\">'command'</span>)
        player.commandQueue.put(cmd)

<span style=\"color: #a020f0;\">class</span> <span style=\"color: #228b22;\">Index</span>(tornado.web.RequestHandler):
    <span style=\"color: #a020f0;\">def</span> <span style=\"color: #0000ff;\">get</span>(<span style=\"color: #a020f0;\">self</span>):
        <span style=\"color: #a020f0;\">self</span>.redirect(<span style=\"color: #8b2252;\">\"/static/web-mote.html\"</span>, permanent=<span style=\"color: #a020f0;\">True</span>)

<span style=\"color: #a0522d;\">urls</span> = [(r<span style=\"color: #8b2252;\">\"/\"</span>, Index),
        (r<span style=\"color: #8b2252;\">\"/show-directory\"</span>, ShowDirectory),
        (r<span style=\"color: #8b2252;\">\"/play\"</span>, Play),
        (r<span style=\"color: #8b2252;\">\"/command\"</span>, Command),
        (r<span style=\"color: #8b2252;\">\"/status\"</span>, ServerStatus),
        (r<span style=\"color: #8b2252;\">\".*\"</span>, Index)]

<span style=\"color: #a0522d;\">settings</span> = {
    <span style=\"color: #8b2252;\">\"static_path\"</span>: os.path.join(os.path.dirname(__file__), <span style=\"color: #8b2252;\">\"static\"</span>)
    }

<span style=\"color: #a0522d;\">app</span> = tornado.web.Application(urls, **settings)

<span style=\"color: #a020f0;\">if</span> <span style=\"color: #7a378b;\">__name__</span> == <span style=\"color: #8b2252;\">\"__main__\"</span>:
    app.listen(8080)
    tornado.ioloop.IOLoop.instance().start()</pre>

<p>As you can tell, it's not significantly different. The handler classes now need lowercase <code>POST</code>/<code>GET</code> methods, we use <code><span style=\"color: #a020f0;\">self</span>.write</code> and <code><span style=\"color: #a020f0;\">self</span>.redirect</code> instead of <code><span style=\"color: #a020f0;\">return</span></code> and <code><span style=\"color: #a020f0;\">raise</span></code>, we use <code><span style=\"color: #a020f0;\">self</span>.get_argument</code> instead of indexing into <code>web.input</code> to get request parameters, handlers now subclass <code>tornado.web.RequestHandler</code>, the routing table has slightly different syntax, and that's basically it. We also communicate with the player slightly differently, but that's due to the rewrite in the player. The only really significant difference (which I actually prefer the <code>tornado</code> approach for) is</p>

<p><b>You can specify your own static directory.</b></p>

<p>This bugged the ever-loving crap out of me in <code>web.py</code>, where doing the same required <a href=\"http://stackoverflow.com/questions/6960295/changing-the-static-directory-path-in-webpy\">non-trivially subclassing <code><span style=\"color: #228b22;\">StaticMiddleware</span></code></a>. It's also not obvious based on the documentation, but the default was a <code>static</code> folder relative to <code>cwd</code>, rather than relative to <code>__file__</code>, which meant that running <code>python a/long/path/to/my-app.py 4141</code> was needlessly tricky. <code>tornado</code> just takes a path, and you get to decide how complete/relative it is.</p>

<p>Oh, I should mention, <code><span style=\"color: #228b22;\">ServerStatus</span></code> is not actually a default <code>tornado</code> class. I didn't have to write it myself, but the <code>sse.py</code> file is derived from <a href=\"https://github.com/marinho/tornado/blob/master/tornado/server_sent_events.py\">this</a>. The <code>diff</code> is minimal; I added the capability to specify <code>event</code> fields, and made the <code>id</code> auto-increment by default. The class itself implements Server Sent Events; an asynchronous handler which assumes it isn't getting closed by the other end; a message written to it is going to be sent over to the client without a new request coming your way.</p>

<p>That's an essentially working, non-blocking media server.</p>

<p>Now, it's not done yet. I still have to re-write the <code><span style=\"color: #228b22;\">Play</span></code> handler, because I'm currently doing something fishy with <code>time.sleep</code> and the <code>stop</code> command instead of formalizing <code>new-queue</code> as a separate directive, and I still have to make mild edits to the front-end to actually <i>use</i> all this data that's being <code>SSE</code>d over, <i>and</i> setting up a play queue makes it almost trivial to implement skip forward/backward functionality so you bet I'll fucking do it, <i><b>and</b></i> it would be really nice to be able to make config changes through the front-end somehow.</p>

<p>But you should be able to use <a href=\"https://github.com/Inaimathi/web-mote\">it in its current state</a>.</p>

<hr />
<h5>Footnotes</h5>
<p>1 - <a href=\"#note-Thu-Nov-29-163338EST-2012\" name=\"foot-Thu-Nov-29-163338EST-2012\">[back]</a> - That's the RasPi video player; it's more primitive than <code>mplayer</code>, works specifically on the RasPi hardware, and can only really play a few different kinds of video, but the upside is that it can do surprisingly smooth HD output. So we really <i>want</i> to use it if at all possible.</p>

<p>2 - <a href=\"#note-Thu-Nov-29-163503EST-2012\" name=\"foot-Thu-Nov-29-163503EST-2012\">[back]</a> - Which is where we keep the files we still need to play.</p>

<p>3 - <a href=\"#note-Thu-Nov-29-163509EST-2012\" name=\"foot-Thu-Nov-29-163509EST-2012\">[back]</a> - There's only one TV.</p>

<p>4 - <a href=\"#note-Thu-Nov-29-163517EST-2012\" name=\"foot-Thu-Nov-29-163517EST-2012\">[back]</a> - And it won't necessarily; a file might get played with no further intervention from me at all. I don't want to put my music on shuffle and still <i>have</i> to press a button after each song.</p>

<p>5 - <a href=\"#note-Thu-Nov-29-163521EST-2012\" name=\"foot-Thu-Nov-29-163521EST-2012\">[back]</a> - Any commands still there were meant for the previous file, not this one.</p>
"))
((5202 3723 597301000) :INSERT (112 :POSTED 3563154000))
((5202 3723 597303000) :INSERT (112 :TAG :ALMOST-LITERATE-PROGRAMMING))
((5202 3723 597305000) :INSERT (112 :TAG :PYTHON))
((5202 3723 597885000) :INSERT
 (113 :TITLE "Life, Common Lisp, Haskell, Clojure and Sparse Arrays"))
((5202 3723 597891000) :INSERT
 (113 :FILE "life-common-lisp-haskell-and-clojure.html"))
((5202 3723 597893000) :INSERT (113 :EDITED 3610022331))
((5202 3723 597895000) :INSERT
 (113 :BODY
  "<p>I should be working now, but fuck it, someone put an idea in my head about the <a href=\"https://guestlistapp.com/events/130467\">Global Day of Coderetreat: Toronto</a><a href=\"#foot-Thu-Dec-06-114334EST-2012\" name=\"note-Thu-Dec-06-114334EST-2012\">[1]</a>, so I've been thinking, coding and doing some light research. Dann, if you're reading, this article is about 80% your fault.</p>

<p>The standard game of Life is played on a grid of squares. Each square may be alive or dead, and the rules of the game go like this<a href=\"#foot-Thu-Dec-06-114414EST-2012\" name=\"note-Thu-Dec-06-114414EST-2012\">[2]</a>:</p>

<ol>
  <li>Any live cell with fewer than two live neighbours dies, as if caused by under-population.</li>
  <li>Any live cell with two or three live neighbours lives on to the next generation.</li>
  <li>Any live cell with more than three live neighbours dies, as if by overcrowding.</li>
  <li>Any dead cell with exactly three live neighbours becomes a live cell, as if by reproduction.</li>
</ol>

<p>When I initially talked at my wife<a href=\"#foot-Thu-Dec-06-114438EST-2012\" name=\"note-Thu-Dec-06-114438EST-2012\">[3]</a> about this, I made the assumption that the way to model the problem is the obvious one. That is, define a grid, or an array of arrays, make some of them living, and then compute the next step according to the above rules. Because I had never actually written this program before, I reached for Common Lisp. I was going to try to be functional about it, and the first thing you need to do <i>that</i> is a function that takes a cell and finds its neighbors.</p>

<pre>(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">neighbors</span> (cell)
  (<span style=\"color: #a020f0;\">let</span> ((l '(-1 0 1)))
    (<span style=\"color: #a020f0;\">destructuring-bind</span> (x . y) cell
      (mapcan (<span style=\"color: #a020f0;\">lambda</span> (dx) 
                (<span style=\"color: #a020f0;\">loop</span> 
                   for dy in l
                   unless (and (zerop dx) (zerop dy))
                   collect (cons (+ x dx) (+ y dy)))) 
              l))))</pre>

<p>At this point I was still assuming that I'd be representing the board as a 2-dimensional array, so the output of this function was going to be used down the line to index into said array, returning a list of found live <code>cell</code>s. Except that as I was thinking about how best to do that<a href=\"#foot-Thu-Dec-06-114752EST-2012\" name=\"note-Thu-Dec-06-114752EST-2012\">[4]</a> it occurred to me that it might be better to model the problem as a <a href=\"http://en.wikipedia.org/wiki/Sparse_array\">sparse array</a> of living cells. If I were going for that approach, the output of <code>neighbors</code> wouldn't be used for indexing at all; instead, using I could use it to get a count of how many neighbors each referred square has. That is,</p>

<pre>CL-USER&gt; (<span style=\"color: #a020f0;\">defparameter</span> <span style=\"color: #a0522d;\">*blinker*</span> '((1 . 0) (1 . 1) (1 . 2)))
*BLINKER*
CL-USER&gt; (mapcan #'neighbors *blinker*)
<span style=\"color: #ff0000;\">((0 . -1) (0 . 0) (0 . 1) (1 . -1) (1 . 1) (2 . -1) (2 . 0) (2 . 1) (0 . 0)
 (0 . 1) (0 . 2) (1 . 0) (1 . 2) (2 . 0) (2 . 1) (2 . 2) (0 . 1) (0 . 2)
 (0 . 3) (1 . 1) (1 . 3) (2 . 1) (2 . 2) (2 . 3))</span>
CL-USER&gt; </pre>

<p>That output tells me that, for example, the <code>cell</code> <code>(2 . 2)</code> currently has two living neighbors since it's mentioned twice in that list. Common Lisp doesn't have a built-in <code>group</code> or similar, so I'm stuck <code>hash</code>ing things myself to collect those frequencies.</p>

<span class=\"edit\">EDIT:
The original way of doing this (still shown below this edit) is inelegant. <code>gethash</code> takes an optional third argument, which it returns as a default value. Meaning that if you're looking to use a <code>hash-table</code> to keep count of stuff you can express that as

<pre>(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">cells-&gt;cell-count-hash</span> (cells)
  (<span style=\"color: #a020f0;\">let</span> ((h (make-hash-table <span style=\"color: #7a378b;\">:test</span> 'equal)))
    (<span style=\"color: #a020f0;\">loop</span> 
       for c in cells
       do (incf (gethash c h 0)))
    h))</pre>
Sat, 22 Dec, 2012</span>

<pre>(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">cells-&gt;cell-count-hash</span> (cells)
  (<span style=\"color: #a020f0;\">let</span> ((h (make-hash-table <span style=\"color: #7a378b;\">:test</span> 'equal)))
    (<span style=\"color: #a020f0;\">loop</span> 
       for c in cells
       if (gethash c h)
         do (incf (gethash c h))
       else
         do (setf (gethash c h) 1))
    h))</pre>

<p>You might think that you can bind a temporary variable to <code>(gethash c h)</code> to get rid of that duplication. It won't do what you think it should. Feel free to try it and develop a theory of why. Anyhow, over to the REPL</p>

<pre>CL-USER&gt; (<span style=\"color: #a020f0;\">let</span> ((h (cells-&gt;cell-count-hash (mapcan #'neighbors *blinker*))))
           (<span style=\"color: #a020f0;\">loop</span> for k being the hash-keys of h 
              using (hash-value count)
              do (format t <span style=\"color: #8b2252;\">\"~a : ~a~%\"</span> k count)))
(0 . -1) : 1
(0 . 0) : 2
(0 . 1) : 3
(1 . -1) : 1
(1 . 1) : 2
(2 . -1) : 1
(2 . 0) : 2
(2 . 1) : 3
(0 . 2) : 2
(1 . 0) : 1
(1 . 2) : 1
(2 . 2) : 2
(0 . 3) : 1
(1 . 3) : 1
(2 . 3) : 1
<span style=\"color: #ff0000;\">NIL</span>
CL-USER&gt; </pre>

<p>That should illustrate it sufficiently for you. As an aside here, note that <code>hash-keys</code> is not a function. It's actually a <code>loop</code> keyword. And so is <code>hash-value</code>. If you try to use either in plain ol' Common Lisp code, you'll get a plain ol' <code>unbound symbol</code> error. This is the main reason I don't like to grub around hashes in CL; it's not very pleasant and involves a lot of plumbing built <i>specifically</i> for it. <code><a href=\"http://www.lispworks.com/documentation/HyperSpec/Body/f_maphas.htm\">maphash</a></code> also exists<a href=\"#foot-Thu-Dec-06-114846EST-2012\" name=\"note-Thu-Dec-06-114846EST-2012\">[5]</a>, but counter-intuitively<a href=\"#foot-Thu-Dec-06-114856EST-2012\" name=\"note-Thu-Dec-06-114856EST-2012\">[6]</a> always returns <code>NIL</code> rather than a sequence, relying on side-effect to actually do things. That's ... less than satisfying.</p>

<p>Anyhow, moving on. We've got a pretty simplistic model of the world here, but it's enough to let me step through <code>life</code>.</p>

<pre>(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">life-step</span> (cells)
  (<span style=\"color: #a020f0;\">let</span> ((freqs (cells-&gt;cell-count-hash (mapcan #'neighbors cells))))
    (<span style=\"color: #a020f0;\">loop</span> for k being the hash-keys of freqs
       using (hash-value count)
       when (or (= 3 count) (and (= 2 count) (member k cells <span style=\"color: #7a378b;\">:test</span> #'cell=)))
         collect k)))</pre>

<p>I also defined <code>cell=</code> just to help that <code>member</code> call along<a href=\"#foot-Thu-Dec-06-115423EST-2012\" name=\"note-Thu-Dec-06-115423EST-2012\">[7]</a>.</p>

<pre>(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">cell=</span> (a b)
  (and (= (car a) (car b)) (= (cdr a) (cdr b))))</pre>

<p>That conditional after the <code>when</code> clause is a contraction of the Life rules, but the effect is the same. The single rule is, effectively</p>

<ol>
  <li>If a cell has three neighbors, or has two neighbors and is alive, it's alive in the next step.</li>
</ol>

<p>Because of the way we're representing the \"board\", that suffices. So this produced the expected output for the given <code>blinker</code> input, and I didn't particularly feel the need to write a fancy grid-display for it, so I moved on to Haskell.</p>

<p>Same theory; simplified rules and represent the world as a sparse array of living cells; how would it look?</p>

<pre><span style=\"color: #0000ff;\">neighbors</span> <span style=\"color: #a0522d;\">::</span> (<span style=\"color: #228b22;\">Int</span>, <span style=\"color: #228b22;\">Int</span>) <span style=\"color: #a0522d;\">-&gt;</span> [(<span style=\"color: #228b22;\">Int</span>, <span style=\"color: #228b22;\">Int</span>)]
<span style=\"color: #0000ff;\">neighbors</span> (x, y) <span style=\"color: #a0522d;\">=</span> filter (<span style=\"color: #a0522d;\">/=</span>(x,y)) <span style=\"color: #a0522d;\">.</span> concat <span style=\"color: #a0522d;\">$</span> map xs l
  <span style=\"color: #a020f0;\">where</span> l <span style=\"color: #a0522d;\">=</span> [<span style=\"color: #a0522d;\">-</span>1<span style=\"color: #a0522d;\">..</span>1]
        xs dy <span style=\"color: #a0522d;\">=</span> map (<span style=\"color: #a0522d;\">\\</span>dx <span style=\"color: #a0522d;\">-&gt;</span> (x <span style=\"color: #a0522d;\">+</span> dx, y <span style=\"color: #a0522d;\">+</span> dy)) l</pre>

<span class=\"edit\">EDIT:

<p>And <b>then</b>, I remembered list comprehensions, which turn <code>neighbors</code> into a one-liner.</p>

<pre><span style=\"color: #0000ff;\">neighbors</span> (x, y) <span style=\"color: #a0522d;\">=</span> [(x<span style=\"color: #a0522d;\">+</span>dx, y<span style=\"color: #a0522d;\">+</span>dy) <span style=\"color: #a0522d;\">|</span> dx <span style=\"color: #a0522d;\">&lt;-</span> [<span style=\"color: #a0522d;\">-</span>1<span style=\"color: #a0522d;\">..</span>1], dy <span style=\"color: #a0522d;\">&lt;-</span> [<span style=\"color: #a0522d;\">-</span>1<span style=\"color: #a0522d;\">..</span>1], (dx,dy) <span style=\"color: #a0522d;\">/=</span> (0,0)]</pre>

Thu, 06 Dec, 2012</span>

<p>Neighbors looks a bit different. As far as I know, there isn't a <code>loop</code> analogue available in Haskell, so I'm \"stuck\" composing the functional primitives. It ends up saving me about four lines of code, and that's typically the case when I transform a destructive function into a functional one, so I want to make it clear that that wasn't a complaint. Before we move on, let me just spotlight something</p>

<pre>(<span style=\"color: #a0522d;\">/=</span>(x,y))</pre>

<p>I pointed out a similar construct at a <a href=\"http://www.lisptoronto.org/\">Toronto Lisp Group</a> meeting a little while ago and didn't emphasize this enough. That bracketed expression is <i>\"the function of one argument that compares its argument to the tuple of <code>x</code> and <code>y</code>\"</i>. Please note that this <i>isn't</i> a compiler macro, or similar trickery. Haskell curries<a href=\"#foot-Thu-Dec-06-115647EST-2012\" name=\"note-Thu-Dec-06-115647EST-2012\">[8]</a> by default, and <code>/=</code> is the inequality operator. So that tiny parenthesized expression is literally currying the tuple <code>(x, y)</code> onto the right argument of the infix function <code>/=</code>. You can generalize this to any other function.</p>

<p>Moving on.</p>

<pre><span style=\"color: #0000ff;\">lifeStep</span> <span style=\"color: #a0522d;\">::</span> [(<span style=\"color: #228b22;\">Int</span>, <span style=\"color: #228b22;\">Int</span>)] <span style=\"color: #a0522d;\">-&gt;</span> [(<span style=\"color: #228b22;\">Int</span>, <span style=\"color: #228b22;\">Int</span>)]
<span style=\"color: #0000ff;\">lifeStep</span> cells <span style=\"color: #a0522d;\">=</span> step cells
  <span style=\"color: #a020f0;\">where</span> step <span style=\"color: #a0522d;\">=</span> map head <span style=\"color: #a0522d;\">.</span> filter viable <span style=\"color: #a0522d;\">.</span> group <span style=\"color: #a0522d;\">.</span> sort <span style=\"color: #a0522d;\">.</span> concat <span style=\"color: #a0522d;\">.</span> map neighbors
        viable [<span style=\"color: #a020f0;\">_</span>,<span style=\"color: #a020f0;\">_</span>,<span style=\"color: #a020f0;\">_</span>] <span style=\"color: #a0522d;\">=</span> <span style=\"color: #228b22;\">True</span>
        viable [c,<span style=\"color: #a020f0;\">_</span>] <span style=\"color: #a0522d;\">=</span> c <span style=\"color: #a0522d;\">`elem`</span> cells
        viable <span style=\"color: #a020f0;\">_</span> <span style=\"color: #a0522d;\">=</span> <span style=\"color: #228b22;\">False</span></pre>

<span class=\"edit\">EDIT:

<p>List comprehensions strike again, but don't buy quite as much clarity this time.</p>

<pre><span style=\"color: #0000ff;\">lifeStep</span> <span style=\"color: #a0522d;\">::</span> [(<span style=\"color: #228b22;\">Int</span>, <span style=\"color: #228b22;\">Int</span>)] <span style=\"color: #a0522d;\">-&gt;</span> [(<span style=\"color: #228b22;\">Int</span>, <span style=\"color: #228b22;\">Int</span>)]
<span style=\"color: #0000ff;\">lifeStep</span> cells <span style=\"color: #a0522d;\">=</span> [head g <span style=\"color: #a0522d;\">|</span> g <span style=\"color: #a0522d;\">&lt;-</span> grouped cells, viable g]
  <span style=\"color: #a020f0;\">where</span> grouped <span style=\"color: #a0522d;\">=</span> group <span style=\"color: #a0522d;\">.</span> sort <span style=\"color: #a0522d;\">.</span> concat <span style=\"color: #a0522d;\">.</span> map neighbors
        viable [<span style=\"color: #a020f0;\">_</span>,<span style=\"color: #a020f0;\">_</span>,<span style=\"color: #a020f0;\">_</span>] <span style=\"color: #a0522d;\">=</span> <span style=\"color: #228b22;\">True</span>
        viable [c,<span style=\"color: #a020f0;\">_</span>] <span style=\"color: #a0522d;\">=</span> c <span style=\"color: #a0522d;\">`elem`</span> cells
        viable <span style=\"color: #a020f0;\">_</span> <span style=\"color: #a0522d;\">=</span> <span style=\"color: #228b22;\">False</span></pre>

Thu, 06 Dec, 2012</span>

<p>You can see the simplified life rules again in the <code>viable</code> local function. If there are 3 neighbors a cell is viable, if there are 2 neighbors and the cell is already a member of the living then it's viable, otherwise it's not.</p>

<pre><span style=\"color: #a020f0;\">where</span> step <span style=\"color: #a0522d;\">=</span> map head <span style=\"color: #a0522d;\">.</span> filter viable <span style=\"color: #a0522d;\">.</span> group <span style=\"color: #a0522d;\">.</span> sort <span style=\"color: #a0522d;\">.</span> concat <span style=\"color: #a0522d;\">.</span> map neighbors</pre>

<p><code>step</code> is written entirely in <a href=\"http://en.wikipedia.org/wiki/Tacit_programming\">point-free style</a>, which might look odd to people coming from a background of purely mainstream languages. This might just be why newbs have a harder time with Haskell than we strictly seem we should. Once you understand it, it's obviously the most elegant and appropriate way of expressing a series of computations. Until you understand it, you can be forgiven for thinking that I'm just making shit up. Lets go through it step by <code>step</code>. I mean, step.</p>

<p>First, we <code>map neighbors</code> over the input, giving us a list of lists of cells. Then we <code>concat</code>enate that, giving us a list of cells, then we <code>group . sort</code> that, giving us a list of lists of cells again<a href=\"#foot-Thu-Dec-06-115853EST-2012\" name=\"note-Thu-Dec-06-115853EST-2012\">[9]</a>. Finally, we <code>filter</code> those lists for <code>viable</code> cells and pull a single cell out of each list using <code>map head</code>.</p>

<p>Note that, because Haskell is a <a href=\"http://en.wikipedia.org/wiki/Evaluation_strategy#Call_by_need\">lazy</a> language, the actual program probably won't run in that sequence. Which is a good thing, because we'd otherwise be looking at 6 traversals of our input per <code>lifeStep</code>, which is pretty <code>On^scary</code>.</p>

<p>Oh, that was it, by the way.</p>

<pre><span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Data.List</span>

<span style=\"color: #0000ff;\">neighbors</span> <span style=\"color: #a0522d;\">::</span> (<span style=\"color: #228b22;\">Int</span>, <span style=\"color: #228b22;\">Int</span>) <span style=\"color: #a0522d;\">-&gt;</span> [(<span style=\"color: #228b22;\">Int</span>, <span style=\"color: #228b22;\">Int</span>)]
<span style=\"color: #0000ff;\">neighbors</span> (x, y) <span style=\"color: #a0522d;\">=</span> [(x<span style=\"color: #a0522d;\">+</span>dx, y<span style=\"color: #a0522d;\">+</span>dy) <span style=\"color: #a0522d;\">|</span> dx <span style=\"color: #a0522d;\">&lt;-</span> [<span style=\"color: #a0522d;\">-</span>1<span style=\"color: #a0522d;\">..</span>1], dy <span style=\"color: #a0522d;\">&lt;-</span> [<span style=\"color: #a0522d;\">-</span>1<span style=\"color: #a0522d;\">..</span>1], (dx,dy) <span style=\"color: #a0522d;\">/=</span> (0,0)]

<span style=\"color: #0000ff;\">lifeStep</span> <span style=\"color: #a0522d;\">::</span> [(<span style=\"color: #228b22;\">Int</span>, <span style=\"color: #228b22;\">Int</span>)] <span style=\"color: #a0522d;\">-&gt;</span> [(<span style=\"color: #228b22;\">Int</span>, <span style=\"color: #228b22;\">Int</span>)]
<span style=\"color: #0000ff;\">lifeStep</span> cells <span style=\"color: #a0522d;\">=</span> [head g <span style=\"color: #a0522d;\">|</span> g <span style=\"color: #a0522d;\">&lt;-</span> grouped cells, viable g]
  <span style=\"color: #a020f0;\">where</span> grouped <span style=\"color: #a0522d;\">=</span> group <span style=\"color: #a0522d;\">.</span> sort <span style=\"color: #a0522d;\">.</span> concat <span style=\"color: #a0522d;\">.</span> map neighbors
        viable [<span style=\"color: #a020f0;\">_</span>,<span style=\"color: #a020f0;\">_</span>,<span style=\"color: #a020f0;\">_</span>] <span style=\"color: #a0522d;\">=</span> <span style=\"color: #228b22;\">True</span>
        viable [c,<span style=\"color: #a020f0;\">_</span>] <span style=\"color: #a0522d;\">=</span> c <span style=\"color: #a0522d;\">`elem`</span> cells
        viable <span style=\"color: #a020f0;\">_</span> <span style=\"color: #a0522d;\">=</span> <span style=\"color: #228b22;\">False</span></pre>

<p>I was amazed the first time I wrote it too; those 6-lines-plus-type-signatures-and-import of Haskell do exactly the same thing as my Common Lisp program from earlier. The term is elegance, I think, since I can still understand it, but it's possible to disagree on these points. The next step obvious step was writing the display functions and test output. Which promptly more than doubled the line-count.</p>

<span class=\"edit\">EDIT:

<p>I could probably use list comprehensions here too, but I don't care enough about the display code to optimize it.</p>
Thu, 06 Dec, 2012</span>

<span class=\"edit\">EDIT:

<p>Ok, dammit, <i>here</i></p>

<pre><span style=\"color: #0000ff;\">showWorld</span> <span style=\"color: #a0522d;\">::</span> [(<span style=\"color: #228b22;\">Int</span>, <span style=\"color: #228b22;\">Int</span>)] <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">IO</span> <span style=\"color: #228b22;\">()</span>
<span style=\"color: #0000ff;\">showWorld</span> cells <span style=\"color: #a0522d;\">=</span> mapM_ putStrLn <span style=\"color: #a0522d;\">$</span> map cellStr groupedByY
  <span style=\"color: #a020f0;\">where</span> groupedByY <span style=\"color: #a0522d;\">=</span> [[fst c <span style=\"color: #a0522d;\">|</span> c <span style=\"color: #a0522d;\">&lt;-</span> cells, snd c <span style=\"color: #a0522d;\">==</span> y] <span style=\"color: #a0522d;\">|</span> y <span style=\"color: #a0522d;\">&lt;-</span> range]
        cellStr xs <span style=\"color: #a0522d;\">=</span> [<span style=\"color: #a020f0;\">if</span> c <span style=\"color: #a0522d;\">`elem`</span> xs <span style=\"color: #a020f0;\">then</span> <span style=\"color: #8b2252;\">'#'</span> <span style=\"color: #a020f0;\">else</span> <span style=\"color: #8b2252;\">' '</span> <span style=\"color: #a0522d;\">|</span> c <span style=\"color: #a0522d;\">&lt;-</span> range]
        range <span style=\"color: #a0522d;\">=</span> worldRange cells

<span style=\"color: #0000ff;\">worldRange</span> cells <span style=\"color: #a0522d;\">=</span> [least<span style=\"color: #a0522d;\">..</span>greatest]
  <span style=\"color: #a020f0;\">where</span> least <span style=\"color: #a0522d;\">=</span> min x y
        greatest <span style=\"color: #a0522d;\">=</span> max x' y'
        (x, y) <span style=\"color: #a0522d;\">=</span> head cells
        (x', y') <span style=\"color: #a0522d;\">=</span> last cells</pre>

Thu, 06 Dec, 2012</span>

<pre><span style=\"color: #0000ff;\">showWorld</span> <span style=\"color: #a0522d;\">::</span> [(<span style=\"color: #228b22;\">Int</span>, <span style=\"color: #228b22;\">Int</span>)] <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">IO</span> <span style=\"color: #228b22;\">()</span>
<span style=\"color: #0000ff;\">showWorld</span> cells <span style=\"color: #a0522d;\">=</span> mapM_ putStrLn <span style=\"color: #a0522d;\">$</span> map cellStr <span style=\"color: #a0522d;\">$</span> map byY range
  <span style=\"color: #a020f0;\">where</span> byY y <span style=\"color: #a0522d;\">=</span> map fst <span style=\"color: #a0522d;\">$</span> filter (<span style=\"color: #a0522d;\">\\</span>c <span style=\"color: #a0522d;\">-&gt;</span> snd c <span style=\"color: #a0522d;\">==</span> y) cells
        (x1, y1) <span style=\"color: #a0522d;\">=</span> head cells
        (x1', y1') <span style=\"color: #a0522d;\">=</span> last cells
        least <span style=\"color: #a0522d;\">=</span> min x1 y1
        greatest <span style=\"color: #a0522d;\">=</span> max x1' y1'
        range <span style=\"color: #a0522d;\">=</span> [least<span style=\"color: #a0522d;\">..</span>greatest]
        cellStr xs <span style=\"color: #a0522d;\">=</span> map (<span style=\"color: #a0522d;\">\\</span>c <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #a020f0;\">if</span> c <span style=\"color: #a0522d;\">`elem`</span> xs <span style=\"color: #a020f0;\">then</span> <span style=\"color: #8b2252;\">'#'</span> <span style=\"color: #a020f0;\">else</span> <span style=\"color: #8b2252;\">' '</span>) range

<span style=\"color: #0000ff;\">runLife</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">Int</span> <span style=\"color: #a0522d;\">-&gt;</span> [(<span style=\"color: #228b22;\">Int</span>, <span style=\"color: #228b22;\">Int</span>)] <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">IO</span> <span style=\"color: #228b22;\">()</span>
<span style=\"color: #0000ff;\">runLife</span> steps cells <span style=\"color: #a0522d;\">=</span> rec (steps <span style=\"color: #a0522d;\">-</span> 1) cells
  <span style=\"color: #a020f0;\">where</span> rec 0 cells <span style=\"color: #a0522d;\">=</span> showWorld cells
        rec s cells <span style=\"color: #a0522d;\">=</span> <span style=\"color: #a020f0;\">do</span> showWorld cells
                         rec (s <span style=\"color: #a0522d;\">-</span> 1) <span style=\"color: #a0522d;\">$</span> lifeStep cells


<span style=\"color: #0000ff;\">main</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">IO</span> <span style=\"color: #228b22;\">()</span>
<span style=\"color: #0000ff;\">main</span> <span style=\"color: #a0522d;\">=</span> <span style=\"color: #a020f0;\">do</span>
  putStrLn <span style=\"color: #8b2252;\">\"Glider &gt;&gt; 10\"</span>
  putStrLn <span style=\"color: #8b2252;\">\"------------\"</span>
  runLife 10 [(1, 0), (2, 1), (0, 2), (1, 2), (2, 2)]
  putStrLn <span style=\"color: #8b2252;\">\"\"</span>
  putStrLn <span style=\"color: #8b2252;\">\"Blinker &gt;&gt; 3\"</span>
  putStrLn <span style=\"color: #8b2252;\">\"------------\"</span>
  runLife 3 [(1, 0), (1, 1), (1, 2)]</pre>

<p>I'm not going to go through this step-by-step; it does the not-very-interesting job of taking a sparse living cell array and outputting the minimum required grid to display it using sharps (for living cells) and spaces (for dead ones). It could probably be made more efficient, or it could be made more scalable by introducing grid limits rather than computing a needed grid size, but it's enough to show the principle.</p>

<pre>inaimathi@lambda:~/langnostic/play/haskell$ ghc life.hs
[1 of 1] Compiling Main             ( life.hs, life.o )
Linking life ...
inaimathi@lambda:~/langnostic/play/haskell$ ./life
Glider &gt;&gt; 10
------------
 # 
  #
###
   
# #
 ##
    
  # 
# # 
 ## 
#  
 ##
## 
 # 
  #
###
   
# #
 ##
    
  # 
# # 
 ## 
#  
 ##
## 
 # 
  #
###
   
# #
 ##

Blinker &gt;&gt; 3
------------
 # 
 # 
 # 
   
###
   
 # 
 # 
 # 
inaimathi@lambda:~/langnostic/play/haskell$ </pre>

<p>At that point, I went on to write the Clojure version, but I won't be showing that. After a good three hours total, I had three programs written up in three languages, all using the same less-than-perfectly-obvious model of the world, and I kind of wanted to figure out whether I was barking up the right tree.</p>

<p><a href=\"http://rosettacode.org/wiki/Conway%27s_Game_of_Life\">Life</a> is on the <a href=\"http://rosettacode.org/wiki/Category:Programming_Tasks\">Rosetta Code</a> task list, so I took a look at the languages I'd covered. The <a href=\"http://rosettacode.org/wiki/Conway%27s_Game_of_Life#Haskell\">Haskell version</a> uses the grid approach with a multi-indexed <code>Array</code>. I sort of understand what it's doing, even if the <code>life</code> function has very obviously been written by a mathematician rather than a programmer, and it's not at all the same as what I'm doing.</p>

<p>The <a href=\"http://rosettacode.org/wiki/Conway%27s_Game_of_Life#Common_Lisp\">Common Lisp version</a> does more or less the same thing, except without the emphasis on one-character variable/function names, so that it's pretty understandable if you're comfortable with Common Lisp. He's doing something similar to the Haskell mathematician though; defining a 2-dimensional array to hold the game board, then manipulating it<a href=\"#foot-Thu-Dec-06-122553EST-2012\" name=\"note-Thu-Dec-06-122553EST-2012\">[10]</a> to produce the next generation of the world.</p>

<p><code>Page Down</code> starts getting some mileage as I look through <a href=\"http://rosettacode.org/wiki/Conway%27s_Game_of_Life\">implementations in other languages</a>, pointedly avoiding Prolog and Forth so that I'll have something interesting to explore with my pairing partner on Saturday. I'm beginning to get more and more worried as I read on; everything from D to TCL is using the grid representation, so I'm beginning to think that there's some obvious shortcoming to the sparse-array approach that I must have missed.</p>

<p>Before I go read up on what that is and how royally it bones performance or whatever, I turn to the <a href=\"http://rosettacode.org/wiki/Conway%27s_Game_of_Life#Clojure\">Clojure implementation</a>, reproduced here in full:</p>

<pre>(<span style=\"color: #a020f0;\">defn</span> <span style=\"color: #0000ff;\">neighbours</span> [[x y]]
  (<span style=\"color: #7a378b;\">for</span> [dx [-1 0 1] dy [-1 0 1]
        <span style=\"color: #008b8b;\">:when</span> (<span style=\"color: #a0522d;\">not</span> (<span style=\"color: #7a378b;\">and</span> (zero? dx) (zero? dy)))]
    [(<span style=\"color: #a0522d;\">+</span> x dx) (<span style=\"color: #a0522d;\">+</span> y dy)]))
 
(<span style=\"color: #a020f0;\">defn</span> <span style=\"color: #0000ff;\">next-step</span> [cells]
  (<span style=\"color: #a0522d;\">set</span> (<span style=\"color: #7a378b;\">for</span> [[cell n] (frequencies (<span style=\"color: #a0522d;\">mapcat</span> neighbours cells))
             <span style=\"color: #008b8b;\">:when</span> (<span style=\"color: #7a378b;\">or</span> (<span style=\"color: #a0522d;\">=</span> n 3) (<span style=\"color: #7a378b;\">and</span> (<span style=\"color: #a0522d;\">=</span> n 2) (cells cell)))]
         cell)))</pre>

<p>That's why I'm not showing the solution I worked up, by the way. I didn't even bother saving it after I read that. It was doing exactly the same thing, in algorithmic terms, but I'm a Clojure n00b. So I didn't know about <code>for</code><a href=\"#foot-Thu-Dec-06-122654EST-2012\" name=\"note-Thu-Dec-06-122654EST-2012\">[11]</a>, or <code>frequencies</code><a href=\"#foot-Thu-Dec-06-122659EST-2012\" name=\"note-Thu-Dec-06-122659EST-2012\">[12]</a>, and that made it quite a bit longer and thornier. This version <i>doesn't</i> pretty-print its grid, but shows the essence of the approach beautifully<a href=\"#foot-Thu-Dec-06-122714EST-2012\" name=\"note-Thu-Dec-06-122714EST-2012\">[13]</a>.</p>

<p>Looking through the rest of the languages<a href=\"#foot-Thu-Dec-06-122721EST-2012\" name=\"note-Thu-Dec-06-122721EST-2012\">[14]</a>, they all use the obvious grid model too. I actually haven't gone out to read up on the comparison of these two approaches<a href=\"#foot-Thu-Dec-06-122733EST-2012\" name=\"note-Thu-Dec-06-122733EST-2012\">[15]</a> but having at least one crazy bastard other than me on the same train of thought at least tells me there might be something here. Or, this might be one of those places where the traditional representation has just become so well-known and obvious that everyone reaches for it outright even though it might not be the most elegant thing available.</p>

<p>Ok, that's my lunch hour up, I'm heading back to work. Hopefully I get some <i>actual</i> hacking done for the next installment and finally wrap up the authentication series. Though, to be fair, I guess it's more likely to be a write-up of my experience on <a href=\"https://guestlistapp.com/events/130467\">Saturday</a>.</p>

<span class=\"edit\">EDIT:

<p><b>Addendum</b>, because I hate myself. The Python version (minus display code). Woo.</p>

<pre><span style=\"color: #a020f0;\">from</span> collections <span style=\"color: #a020f0;\">import</span> defaultdict

<span style=\"color: #a0522d;\">glider</span> = [(1, 0), (2, 1), (0, 2), (1, 2), (2, 2)]
<span style=\"color: #a0522d;\">blinker</span> = [(1, 0), (1, 1), (1, 2)]

<span style=\"color: #a020f0;\">def</span> <span style=\"color: #0000ff;\">neighbors</span>(cell):
    x,y = cell
    r = <span style=\"color: #7a378b;\">range</span>(-1,2)
    <span style=\"color: #a020f0;\">return</span> [(x+dx, y+dy) <span style=\"color: #a020f0;\">for</span> dx <span style=\"color: #a020f0;\">in</span> r <span style=\"color: #a020f0;\">for</span> dy <span style=\"color: #a020f0;\">in</span> r <span style=\"color: #a020f0;\">if</span> <span style=\"color: #a020f0;\">not</span> (dx, dy) == (0, 0)]

<span style=\"color: #a020f0;\">def</span> <span style=\"color: #0000ff;\">frequencies</span>(cells):
    res = defaultdict(<span style=\"color: #7a378b;\">int</span>)
    <span style=\"color: #a020f0;\">for</span> cell <span style=\"color: #a020f0;\">in</span> cells:
        res[cell] += 1
    <span style=\"color: #a020f0;\">return</span> res
        
<span style=\"color: #a020f0;\">def</span> <span style=\"color: #0000ff;\">lifeStep</span>(cells):
    freqs = frequencies([n <span style=\"color: #a020f0;\">for</span> c <span style=\"color: #a020f0;\">in</span> cells <span style=\"color: #a020f0;\">for</span> n <span style=\"color: #a020f0;\">in</span> neighbors(c)])
    <span style=\"color: #a020f0;\">return</span> [k <span style=\"color: #a020f0;\">for</span> k <span style=\"color: #a020f0;\">in</span> freqs <span style=\"color: #a020f0;\">if</span> freqs[k]==3 <span style=\"color: #a020f0;\">or</span> (freqs[k]==2 <span style=\"color: #a020f0;\">and</span> k <span style=\"color: #a020f0;\">in</span> cells)]</pre>

Thu, 06 Dec, 2012</span>

<span class=\"edit\">EDIT:

<p><b>Addendum the Second:</b> All code from this article (plus printing code for each language) now available <a href=\"https://github.com/Inaimathi/life\">here</a>.</p>
Sun, 09 Dec, 2012</span>

<hr />
<h5>Footnotes</h5>
<p>1 - <a href=\"#note-Thu-Dec-06-114334EST-2012\" name=\"foot-Thu-Dec-06-114334EST-2012\">[back]</a> - Registration is closed, but it's apparently fine to just show up if you're <a href=\"https://guestlistapp.com/events/130467\">in the area</a>.</p>

<p>2 - <a href=\"#note-Thu-Dec-06-114414EST-2012\" name=\"foot-Thu-Dec-06-114414EST-2012\">[back]</a> - They actually reduce to between one and three simpler rules, depending on how you look at it, but we'll talk about that later.</p>

<p>3 - <a href=\"#note-Thu-Dec-06-114438EST-2012\" name=\"foot-Thu-Dec-06-114438EST-2012\">[back]</a> - She always indulges me in these things, even though her own interest in the problem is minimal at best. I'm thankful for her patience on the multitude of days she's watched me talk to myself.</p>

<p>4 - <a href=\"#note-Thu-Dec-06-114752EST-2012\" name=\"foot-Thu-Dec-06-114752EST-2012\">[back]</a> - I'll admit that I was, perhaps prematurely, also thinking about how I'd do it in Haskell, where indexing into a nonexistent cell is non-trivial and not very idiomatic in any case.</p>

<p>5 - <a href=\"#note-Thu-Dec-06-114846EST-2012\" name=\"foot-Thu-Dec-06-114846EST-2012\">[back]</a> - And to be fair, the situation above could have been written more succinctly as 

<pre>(maphash 
  (<span style=\"color: #a020f0;\">lambda</span> (k v) (format t <span style=\"color: #8b2252;\">\"~a : ~a~%\"</span> k v))
  (cells-&gt;cell-count-hash (mapcan #'neighbors *blinker*)))</pre>
</p>

<p>6 - <a href=\"#note-Thu-Dec-06-114856EST-2012\" name=\"foot-Thu-Dec-06-114856EST-2012\">[back]</a> - For a function with <code>map</code> in its name.</p>

<p>7 - <a href=\"#note-Thu-Dec-06-115423EST-2012\" name=\"foot-Thu-Dec-06-115423EST-2012\">[back]</a> - This is one of those places where better <code>destructuring-bind</code> syntax would help to no end, by the way. If Clojure didn't have a polymorphic <code>=</code>, neatly sidestepping the need for a <code>cell=</code> at all, I could do

<pre>(<span style=\"color: #a020f0;\">defn</span> <span style=\"color: #0000ff;\">cell=</span> [a b]
  (<span style=\"color: #7a378b;\">let</span> [[ax ay] a
        [bx by] b]
    (<span style=\"color: #7a378b;\">and</span> (<span style=\"color: #a0522d;\">=</span> ax bx) (<span style=\"color: #a0522d;\">=</span> ay by))))</pre>

<p>or just</p>

<pre>(<span style=\"color: #a020f0;\">defn</span> <span style=\"color: #0000ff;\">cell=</span> [[ax ay] [bx by]]
  (<span style=\"color: #7a378b;\">and</span> (<span style=\"color: #a0522d;\">=</span> ax bx) (<span style=\"color: #a0522d;\">=</span> ay by)))</pre>

<p>In Common Lisp, using the destructuring version would actually take more code than just looking up <code>car</code>s and <code>cdr</code>s</p>
</p>

<p>8 - <a href=\"#note-Thu-Dec-06-115647EST-2012\" name=\"foot-Thu-Dec-06-115647EST-2012\">[back]</a> - Har har, <a href=\"http://en.wikipedia.org/wiki/Simon_Peyton_Jones\">Simon</a>. That's <a href=\"http://en.wikipedia.org/wiki/Haskell_Curry\">Hilarious</a>.</p>

<p>9 - <a href=\"#note-Thu-Dec-06-115853EST-2012\" name=\"foot-Thu-Dec-06-115853EST-2012\">[back]</a> - But organized by identity rather than by <a href=\"http://en.wikipedia.org/wiki/Moore_neighborhood\">moore neighborhood</a> center.</p>

<p>10 - <a href=\"#note-Thu-Dec-06-122553EST-2012\" name=\"foot-Thu-Dec-06-122553EST-2012\">[back]</a> - Destructively, unlike in the Haskell version.</p>

<p>11 - <a href=\"#note-Thu-Dec-06-122654EST-2012\" name=\"foot-Thu-Dec-06-122654EST-2012\">[back]</a> - Instead using <code>map</code>/<code>reduce</code>.</p>

<p>12 - <a href=\"#note-Thu-Dec-06-122659EST-2012\" name=\"foot-Thu-Dec-06-122659EST-2012\">[back]</a> - Instead using the same tactic I used in Haskell, which is a pretty shitty thing to do in a language that <i>isn't</i> lazy by default.</p>

<p>13 - <a href=\"#note-Thu-Dec-06-122714EST-2012\" name=\"foot-Thu-Dec-06-122714EST-2012\">[back]</a> - The earlier Haskell display code should be pretty easy to port anyhow, in case you really, <i>really</i> must see a grid of life squares <i>printed</i> as part of the solution.</p>

<p>14 - <a href=\"#note-Thu-Dec-06-122721EST-2012\" name=\"foot-Thu-Dec-06-122721EST-2012\">[back]</a> - The ones <i>before</i> Clojure on <a href=\"http://rosettacode.org/wiki/Conway%27s_Game_of_Life\">that page</a>.</p>

<p>15 - <a href=\"#note-Thu-Dec-06-122733EST-2012\" name=\"foot-Thu-Dec-06-122733EST-2012\">[back]</a> - The <a href=\"http://rosettacode.org/wiki/Conway%27s_Game_of_Life#Clojure\">article linked to from Rosetta Code</a> isn't very informative.</p>
"))
((5202 3723 598177000) :INSERT (113 :POSTED 3563758800))
((5202 3723 598179000) :INSERT (113 :TAG :ALMOST-LITERATE-PROGRAMMING))
((5202 3723 598181000) :INSERT (113 :TAG :CLOJURE))
((5202 3723 598183000) :INSERT (113 :TAG :COMMON-LISP))
((5202 3723 598185000) :INSERT (113 :TAG :HASKELL))
((5202 3723 598187000) :INSERT (113 :TAG :PYTHON))
((5202 3723 598191000) :INSERT (113 :TAG :SPECULATION))
((5202 3723 598680000) :INSERT (114 :TITLE "Code Retreat and Angular"))
((5202 3723 598685000) :INSERT (114 :FILE "angularjs.html"))
((5202 3723 598687000) :INSERT (114 :EDITED 3610301163))
((5202 3723 598689000) :INSERT
 (114 :BODY
  "<p>Before I get to the actual article, there was enough interest in the sparse-array solution to <a href=\"http://en.wikipedia.org/wiki/Conway%27s_Game_of_Life\">Life</a> this past <a href=\"https://guestlistapp.com/events/130467\">Saturday</a> that I've added them to the <a href=\"http://rosettacode.org/wiki/Conway%27s_Game_of_Life\">appropriate Rosetta Code page</a> and my <a href=\"https://github.com/Inaimathi/life\">GitHub</a>. Sadly, the only solutions up are <a href=\"https://github.com/Inaimathi/life/blob/master/life.py\">python</a>, <a href=\"https://github.com/Inaimathi/life/blob/master/life.lisp\">common lisp</a>, <a href=\"https://github.com/Inaimathi/life/blob/master/life.hs\">haskell</a> and <a href=\"https://github.com/Inaimathi/life/blob/master/life.clj\">clojure</a>. The <a href=\"http://www.swi-prolog.org/\">Prolog</a> attempt my partner and I made during the event wasn't completed, and I never actually got to try <a href=\"http://www.gnu.org/software/gforth/\">Forth</a>. I might get around to doing some thinking with those; I'll keep you posted.</p>

<h3>Global Day of Code Retreat</h3>

<p>Was pretty goddamn awesome. For some reason, I became known as \"the Haskell guy\", despite the fact that I am nowhere even approaching mastery<a href=\"#foot-Mon-Dec-10-161221EST-2012\" name=\"note-Mon-Dec-10-161221EST-2012\">[1]</a>. The attempts I made were</p>

<ol>
  <li><b>Prolog</b> - With someone who is older than me and hadn't done any Prolog since graduating. This wasn't helped by the fact that the entirety of my Prolog experience was two read-throughs of the appropriate chapter in <a href=\"http://pragprog.com/book/btlang/seven-languages-in-seven-weeks\">Seven Languages</a>. We got as far as figuring out how to compute a <a href=\"http://en.wikipedia.org/wiki/Moore_neighborhood\">Moore neighborhood</a> before time was called.</li>
  <li><b>Common Lisp</b> - With a young man looking to learn the language. Hopefully, I wasn't too enthusiastic in recommending that he drop by the <a href=\"http://www.lisptoronto.org/\">Toronto Common Lisp User Group</a><a href=\"#foot-Mon-Dec-10-161300EST-2012\" name=\"note-Mon-Dec-10-161300EST-2012\">[2]</a>, and gave him enough of a taste for Lisp that it won't look alien next time. Unfortunately, the problem we were solving ran smack into Common Lisps' poor support for <a href=\"http://cl-cookbook.sourceforge.net/hashes.html\">hash tables</a>, so the impression wasn't as positive as it otherwise might have been.</li>
  <li><b>Haskell</b> - With a friend I know through the Common Lisp User group who's looking to get into functional programming in general. We implemented the same gridless solution, except in five lines rather than ~20. Most of the time was actually spent showcasing the functional way of thinking, and the utility of a REPL in problem solving. After this session, a crowd gathered around my laptop and demanded that I incrementally take them through those five lines and prove they actually produced valid output. I did so successfully, which is probably where my reputation started.</li>
  <li><b>Smalltalk</b> - Where I and the same fellow TLUG attendee watched an old Smalltalk hand finally explain how <a href=\"http://en.wikipedia.org/wiki/Test-driven_development\">TDD</a> makes sense if you've got the proper tools built into the language to support it. It turns out that no language other than Smalltalk does. If you disagree, learn enough Smalltalk to do some TDD in it, then try to do it again in Java/Ruby/what-have-you without throwing up. If you can prove you've done so, I will concede the point. We didn't actually get an implementation going this time because our host was explaining the basics of the environment and the class hierarchy to us, but this was the first grid-based approach I tried the entire day.</li>
  <li><b>Clojure</b> - With a young woman looking to try Clojure, and coming from a Scheme/Java background. We finished the gridless solution, with a printed board this time, just before time was called. Interestingly, this is the first partner I had all day that was used to thinking functionally before we sat down, so it was light work pointing out the differences between Clojure and Scheme to her.</li>
</ol>

<p>As I said, I was <i>going</i> to try Forth, but Dann, the only one willing to partner on that language, had to leave before the last session.</p>

<p>My general impression of the event was extremely positive, and I'll certainly be attending the <a href=\"http://www.meetup.com/Toronto-Code-Retreat/#calendar\">monthly-ish</a>, smaller version if I can. The only big surprise I got was how few people actually use functional programming in the course of their work. I sort of assumed that the thought process wouldn't be outright alien, but I seemed to be one of a very small group that did it with any regularity. Oh well I guess; if you want light to be seen, take it into dark places. For my partners' part, they were either eager to learn, or to refresh their memory.</p>

<h3>Web Mote and Angular.js</h3>

<p>You haven't heard much about <a href=\"https://github.com/Inaimathi/web-mote\">Web-Mote</a> lately, and that's mainly because I've been porting it to <a href=\"http://angularjs.org/\">Angular.js</a>, saving myself <i>quite</i> a few lines of code in the process. You may remember that <a href=\"/article?name=js-frameworks.html\">I called all the JS-MVC frameworks shit</a> a little while ago. While my distaste for the needless OO-modeling that permeates most of them remains intact, a fellow Lisping web-developer told me to give <a href=\"http://angularjs.org/\">Angular</a> another try without reading their <a href=\"http://docs.angularjs.org/tutorial/\">godawful, over-engineered tutorial</a>.</p>

<p>I've almost finished porting, and I must admit that I've become a believer. If you're already using</p>

<ul>
  <li>an HTML <a href=\"http://handlebarsjs.com/\">templating library</a></li>
  <li>a JS <a href=\"http://backbonejs.org/#Router\">routing system</a></li>
  <li>and <a href=\"http://jquery.com/\">jQuery</a></li>
</ul>

<p>you probably could have saved yourself a lot of code and headache by just picking up Angular, which elegantly solves most problems you'd be using the above for. It also turns out that <a href=\"http://docs.angularjs.org/api/angular.Module\">Angular modules</a> are extremely composeable, <i>and</i> fail to get in the way of other frameworks<a href=\"#foot-Mon-Dec-10-161810EST-2012\" name=\"note-Mon-Dec-10-161810EST-2012\">[3]</a>.</p>

<p>The \"templating\" in particular deserves special mention, though that's probably the wrong thought model to apply here. As the fellow Lisper explained, Angular gives you a <a href=\"http://en.wikipedia.org/wiki/Domain-specific_language\">DSL</a> for writing HTML front-ends. To illustrate, here's what the HTML component of the Handlebars/Backbone/jQuery version looked like</p>

<pre>&lt;<span style=\"color: #a020f0;\">!DOCTYPE</span> HTML&gt;
&lt;<span style=\"color: #0000ff;\">html</span> <span style=\"color: #a0522d;\">lang</span>=<span style=\"color: #8b2252;\">\"en-US\"</span>&gt;
  &lt;<span style=\"color: #0000ff;\">head</span>&gt;
    &lt;<span style=\"color: #0000ff;\">meta</span> <span style=\"color: #a0522d;\">charset</span>=<span style=\"color: #8b2252;\">\"UTF-8\"</span>&gt;
    &lt;<span style=\"color: #0000ff;\">meta</span> <span style=\"color: #a0522d;\">name</span>=<span style=\"color: #8b2252;\">\"viewport\"</span> <span style=\"color: #a0522d;\">content</span>=<span style=\"color: #8b2252;\">\"width=device-width\"</span> /&gt;
    &lt;<span style=\"color: #0000ff;\">title</span>&gt;<span style=\"font-weight: bold; text-decoration: underline;\">WebMote</span>&lt;/<span style=\"color: #0000ff;\">title</span>&gt;
  &lt;/<span style=\"color: #0000ff;\">head</span>&gt;
  &lt;<span style=\"color: #0000ff;\">body</span>&gt;

    <span style=\"color: #b22222;\">&lt;!-- </span><span style=\"color: #b22222;\">--------- </span><span style=\"color: #b22222;\">--&gt;</span>
    <span style=\"color: #b22222;\">&lt;!-- </span><span style=\"color: #b22222;\">Templates </span><span style=\"color: #b22222;\">--&gt;</span>
    <span style=\"color: #b22222;\">&lt;!-- </span><span style=\"color: #b22222;\">--------- </span><span style=\"color: #b22222;\">--&gt;</span>
    &lt;<span style=\"color: #0000ff;\">script</span> <span style=\"color: #a0522d;\">id</span>=<span style=\"color: #8b2252;\">\"tmp-folder\"</span> <span style=\"color: #a0522d;\">type</span>=<span style=\"color: #8b2252;\">\"text/x-handlebars-template\"</span>&gt;
      &lt;<span style=\"color: #0000ff;\">li</span> <span style=\"color: #a0522d;\">class</span>=<span style=\"color: #8b2252;\">\"{{type}}\"</span>&gt;
        {{#if buttons}}
        &lt;<span style=\"color: #0000ff;\">button</span> <span style=\"color: #a0522d;\">class</span>=<span style=\"color: #8b2252;\">\"play btn\"</span> <span style=\"color: #a0522d;\">onclick</span>=<span style=\"color: #8b2252;\">\"mote.play('{{path}}')\"</span>&gt;&lt;<span style=\"color: #0000ff;\">i</span> <span style=\"color: #a0522d;\">class</span>=<span style=\"color: #8b2252;\">\"icon-play\"</span>&gt;&lt;/<span style=\"color: #0000ff;\">i</span>&gt;&lt;/<span style=\"color: #0000ff;\">button</span>&gt;
        &lt;<span style=\"color: #0000ff;\">button</span> <span style=\"color: #a0522d;\">class</span>=<span style=\"color: #8b2252;\">\"shuffle btn\"</span> <span style=\"color: #a0522d;\">onclick</span>=<span style=\"color: #8b2252;\">\"mote.shuffle('{{path}}')\"</span>&gt;&lt;<span style=\"color: #0000ff;\">i</span> <span style=\"color: #a0522d;\">class</span>=<span style=\"color: #8b2252;\">\"icon-random\"</span>&gt;&lt;/<span style=\"color: #0000ff;\">i</span>&gt;&lt;/<span style=\"color: #0000ff;\">button</span>&gt;
        {{/if}}
        &lt;<span style=\"color: #0000ff;\">a</span> <span style=\"color: #a0522d;\">class</span>=<span style=\"color: #8b2252;\">\"dir-link{{#unless buttons}} buttonless{{/unless}}\"</span> <span style=\"color: #a0522d;\">href</span>=<span style=\"color: #8b2252;\">\"#navigate{{path}}\"</span>&gt;{{name}}&lt;/<span style=\"color: #0000ff;\">a</span>&gt;
      &lt;/<span style=\"color: #0000ff;\">li</span>&gt;
    &lt;/<span style=\"color: #0000ff;\">script</span>&gt;

    &lt;<span style=\"color: #0000ff;\">script</span> <span style=\"color: #a0522d;\">id</span>=<span style=\"color: #8b2252;\">\"tmp-file\"</span> <span style=\"color: #a0522d;\">type</span>=<span style=\"color: #8b2252;\">\"text/x-handlebars-template\"</span>&gt;
      &lt;<span style=\"color: #0000ff;\">li</span> <span style=\"color: #a0522d;\">class</span>=<span style=\"color: #8b2252;\">\"{{type}}\"</span>&gt;
        &lt;<span style=\"color: #0000ff;\">a</span> <span style=\"color: #a0522d;\">class</span>=<span style=\"color: #8b2252;\">\"file-link\"</span> <span style=\"color: #a0522d;\">href</span>=<span style=\"color: #8b2252;\">\"javascript:void(0);\"</span> <span style=\"color: #a0522d;\">onclick</span>=<span style=\"color: #8b2252;\">\"mote.play('{{path}}')\"</span>&gt;{{name}}&lt;/<span style=\"color: #0000ff;\">a</span>&gt;
      &lt;/<span style=\"color: #0000ff;\">li</span>&gt;
    &lt;/<span style=\"color: #0000ff;\">script</span>&gt;

    &lt;<span style=\"color: #0000ff;\">script</span> <span style=\"color: #a0522d;\">id</span>=<span style=\"color: #8b2252;\">\"tmp-control\"</span> <span style=\"color: #a0522d;\">type</span>=<span style=\"color: #8b2252;\">\"text/x-handlebars-template\"</span>&gt;
      &lt;<span style=\"color: #0000ff;\">li</span> <span style=\"color: #a0522d;\">class</span>=<span style=\"color: #8b2252;\">\"{{cmd}}\"</span>&gt;
        &lt;<span style=\"color: #0000ff;\">button</span> <span style=\"color: #a0522d;\">class</span>=<span style=\"color: #8b2252;\">\"btn\"</span> <span style=\"color: #a0522d;\">onclick</span>=<span style=\"color: #8b2252;\">\"mote.command('{{cmd}}');\"</span>
                {{#if held}}
                <span style=\"color: #a0522d;\">onmousedown</span>=<span style=\"color: #8b2252;\">\"mote.hold('{{cmd}}');\"</span> <span style=\"color: #a0522d;\">onmouseup</span>=<span style=\"color: #8b2252;\">\"mote.release();\"</span> <span style=\"color: #a0522d;\">onmouseout</span>=<span style=\"color: #8b2252;\">\"mote.release();\"</span>
                {{/if}}&gt;
          &lt;<span style=\"color: #0000ff;\">i</span> <span style=\"color: #a0522d;\">class</span>=<span style=\"color: #8b2252;\">\"icon-{{cmd}}\"</span>&gt;&lt;/<span style=\"color: #0000ff;\">i</span>&gt;
        &lt;/<span style=\"color: #0000ff;\">button</span>&gt;
      &lt;/<span style=\"color: #0000ff;\">li</span>&gt;
    &lt;/<span style=\"color: #0000ff;\">script</span>&gt;

    &lt;<span style=\"color: #0000ff;\">script</span> <span style=\"color: #a0522d;\">id</span>=<span style=\"color: #8b2252;\">\"tmp-control-block\"</span> <span style=\"color: #a0522d;\">type</span>=<span style=\"color: #8b2252;\">\"text/x-handlebars-template\"</span>&gt;
      &lt;<span style=\"color: #0000ff;\">ul</span>&gt;
        {{#each this}}
        {{#control-button this}}{{/control-button}}
        {{/each}}
      &lt;/<span style=\"color: #0000ff;\">ul</span>&gt;
    &lt;/<span style=\"color: #0000ff;\">script</span>&gt;
    
    <span style=\"color: #b22222;\">&lt;!-- </span><span style=\"color: #b22222;\">---- </span><span style=\"color: #b22222;\">--&gt;</span>
    <span style=\"color: #b22222;\">&lt;!-- </span><span style=\"color: #b22222;\">Body </span><span style=\"color: #b22222;\">--&gt;</span>
    <span style=\"color: #b22222;\">&lt;!-- </span><span style=\"color: #b22222;\">---- </span><span style=\"color: #b22222;\">--&gt;</span>
    &lt;<span style=\"color: #0000ff;\">ul</span> <span style=\"color: #a0522d;\">id</span>=<span style=\"color: #8b2252;\">\"file-list\"</span>&gt;&lt;/<span style=\"color: #0000ff;\">ul</span>&gt;
    &lt;<span style=\"color: #0000ff;\">div</span> <span style=\"color: #a0522d;\">id</span>=<span style=\"color: #8b2252;\">\"controls\"</span>&gt;&lt;/<span style=\"color: #0000ff;\">div</span>&gt;
    
    <span style=\"color: #b22222;\">&lt;!-- </span><span style=\"color: #b22222;\">------ </span><span style=\"color: #b22222;\">--&gt;</span>
    <span style=\"color: #b22222;\">&lt;!-- </span><span style=\"color: #b22222;\">Styles </span><span style=\"color: #b22222;\">--&gt;</span>
    <span style=\"color: #b22222;\">&lt;!-- </span><span style=\"color: #b22222;\">------ </span><span style=\"color: #b22222;\">--&gt;</span>
    &lt;<span style=\"color: #0000ff;\">link</span> <span style=\"color: #a0522d;\">rel</span>=<span style=\"color: #8b2252;\">\"stylesheet\"</span> <span style=\"color: #a0522d;\">href</span>=<span style=\"color: #8b2252;\">\"css/custom-theme/jquery-ui-1.8.13.custom.css\"</span> <span style=\"color: #a0522d;\">type</span>=<span style=\"color: #8b2252;\">\"text/css\"</span> <span style=\"color: #a0522d;\">media</span>=<span style=\"color: #8b2252;\">\"screen\"</span> /&gt;
    &lt;<span style=\"color: #0000ff;\">link</span> <span style=\"color: #a0522d;\">rel</span>=<span style=\"color: #8b2252;\">\"stylesheet\"</span> <span style=\"color: #a0522d;\">href</span>=<span style=\"color: #8b2252;\">\"css/bootstrap.css\"</span> <span style=\"color: #a0522d;\">type</span>=<span style=\"color: #8b2252;\">\"text/css\"</span> <span style=\"color: #a0522d;\">media</span>=<span style=\"color: #8b2252;\">\"screen\"</span> /&gt;
    &lt;<span style=\"color: #0000ff;\">link</span> <span style=\"color: #a0522d;\">rel</span>=<span style=\"color: #8b2252;\">\"stylesheet\"</span> <span style=\"color: #a0522d;\">href</span>=<span style=\"color: #8b2252;\">\"css/bootstrap-responsive.css\"</span> <span style=\"color: #a0522d;\">type</span>=<span style=\"color: #8b2252;\">\"text/css\"</span> <span style=\"color: #a0522d;\">media</span>=<span style=\"color: #8b2252;\">\"screen\"</span> /&gt;
    &lt;<span style=\"color: #0000ff;\">link</span> <span style=\"color: #a0522d;\">rel</span>=<span style=\"color: #8b2252;\">\"stylesheet\"</span> <span style=\"color: #a0522d;\">href</span>=<span style=\"color: #8b2252;\">\"css/style.css\"</span> <span style=\"color: #a0522d;\">type</span>=<span style=\"color: #8b2252;\">\"text/css\"</span> <span style=\"color: #a0522d;\">media</span>=<span style=\"color: #8b2252;\">\"screen\"</span> /&gt;
    
    <span style=\"color: #b22222;\">&lt;!-- </span><span style=\"color: #b22222;\">------- </span><span style=\"color: #b22222;\">--&gt;</span>
    <span style=\"color: #b22222;\">&lt;!-- </span><span style=\"color: #b22222;\">Scripts </span><span style=\"color: #b22222;\">--&gt;</span>
    <span style=\"color: #b22222;\">&lt;!-- </span><span style=\"color: #b22222;\">------- </span><span style=\"color: #b22222;\">--&gt;</span>
    &lt;<span style=\"color: #0000ff;\">script</span> <span style=\"color: #a0522d;\">type</span>=<span style=\"color: #8b2252;\">\"text/javascript\"</span> <span style=\"color: #a0522d;\">src</span>=<span style=\"color: #8b2252;\">\"js/jquery.min.js\"</span>&gt;&lt;/<span style=\"color: #0000ff;\">script</span>&gt;
    &lt;<span style=\"color: #0000ff;\">script</span> <span style=\"color: #a0522d;\">type</span>=<span style=\"color: #8b2252;\">\"text/javascript\"</span> <span style=\"color: #a0522d;\">src</span>=<span style=\"color: #8b2252;\">\"js/jquery-ui-1.8.13.custom.min.js\"</span>&gt;&lt;/<span style=\"color: #0000ff;\">script</span>&gt;
    &lt;<span style=\"color: #0000ff;\">script</span> <span style=\"color: #a0522d;\">type</span>=<span style=\"color: #8b2252;\">\"text/javascript\"</span> <span style=\"color: #a0522d;\">src</span>=<span style=\"color: #8b2252;\">\"js/handlebars-1.0.rc.1.js\"</span>&gt;&lt;/<span style=\"color: #0000ff;\">script</span>&gt;
    &lt;<span style=\"color: #0000ff;\">script</span> <span style=\"color: #a0522d;\">type</span>=<span style=\"color: #8b2252;\">\"text/javascript\"</span> <span style=\"color: #a0522d;\">src</span>=<span style=\"color: #8b2252;\">\"js/underscore-min.js\"</span>&gt;&lt;/<span style=\"color: #0000ff;\">script</span>&gt;
    &lt;<span style=\"color: #0000ff;\">script</span> <span style=\"color: #a0522d;\">type</span>=<span style=\"color: #8b2252;\">\"text/javascript\"</span> <span style=\"color: #a0522d;\">src</span>=<span style=\"color: #8b2252;\">\"js/backbone-min.js\"</span>&gt;&lt;/<span style=\"color: #0000ff;\">script</span>&gt;

    &lt;<span style=\"color: #0000ff;\">script</span> <span style=\"color: #a0522d;\">type</span>=<span style=\"color: #8b2252;\">\"text/javascript\"</span> <span style=\"color: #a0522d;\">src</span>=<span style=\"color: #8b2252;\">\"js/web-mote.js\"</span>&gt;&lt;/<span style=\"color: #0000ff;\">script</span>&gt;

  &lt;/<span style=\"color: #0000ff;\">body</span>&gt;
&lt;/<span style=\"color: #0000ff;\">html</span>&gt;
</pre>

<p>and <i>this</i> is what the exact same front-end looks like expressed in the Angular HTMLDSL</p>

<pre>&lt;<span style=\"color: #a020f0;\">!DOCTYPE</span> HTML&gt;
&lt;<span style=\"color: #0000ff;\">html</span> <span style=\"color: #a0522d;\">lang</span>=<span style=\"color: #8b2252;\">\"en-US\"</span>&gt;
  &lt;<span style=\"color: #0000ff;\">head</span>&gt;
    &lt;<span style=\"color: #0000ff;\">meta</span> <span style=\"color: #a0522d;\">charset</span>=<span style=\"color: #8b2252;\">\"UTF-8\"</span>&gt;
    &lt;<span style=\"color: #0000ff;\">meta</span> <span style=\"color: #a0522d;\">name</span>=<span style=\"color: #8b2252;\">\"viewport\"</span> <span style=\"color: #a0522d;\">content</span>=<span style=\"color: #8b2252;\">\"width=device-width\"</span> /&gt;
    &lt;<span style=\"color: #0000ff;\">title</span>&gt;<span style=\"font-weight: bold; text-decoration: underline;\">WebMote</span>&lt;/<span style=\"color: #0000ff;\">title</span>&gt;
  &lt;/<span style=\"color: #0000ff;\">head</span>&gt;
  &lt;<span style=\"color: #0000ff;\">body</span>&gt;

    &lt;<span style=\"color: #0000ff;\">div</span> ng-app&gt;
      &lt;<span style=\"color: #0000ff;\">ul</span> <span style=\"color: #a0522d;\">id</span>=<span style=\"color: #8b2252;\">\"file-list\"</span> <span style=\"color: #a0522d;\">ng-controller</span>=<span style=\"color: #8b2252;\">\"FileListCtrl\"</span>&gt;
        &lt;<span style=\"color: #0000ff;\">li</span> <span style=\"color: #a0522d;\">class</span>=<span style=\"color: #8b2252;\">\"{{file.type}}\"</span> <span style=\"color: #a0522d;\">ng-repeat</span>=<span style=\"color: #8b2252;\">\"file in filesList\"</span> <span style=\"color: #a0522d;\">ng-switch</span>=<span style=\"color: #8b2252;\">\"file.buttons\"</span>&gt;
          &lt;<span style=\"color: #0000ff;\">span</span> <span style=\"color: #a0522d;\">ng-switch-when</span>=<span style=\"color: #8b2252;\">\"true\"</span>&gt;
            &lt;<span style=\"color: #0000ff;\">button</span> <span style=\"color: #a0522d;\">class</span>=<span style=\"color: #8b2252;\">\"play btn\"</span> <span style=\"color: #a0522d;\">ng-click</span>=<span style=\"color: #8b2252;\">\"play(file.path)\"</span>&gt;&lt;<span style=\"color: #0000ff;\">i</span> <span style=\"color: #a0522d;\">class</span>=<span style=\"color: #8b2252;\">\"icon-play\"</span>&gt;&lt;/<span style=\"color: #0000ff;\">i</span>&gt;&lt;/<span style=\"color: #0000ff;\">button</span>&gt;
            &lt;<span style=\"color: #0000ff;\">button</span> <span style=\"color: #a0522d;\">class</span>=<span style=\"color: #8b2252;\">\"shuffle btn\"</span> <span style=\"color: #a0522d;\">ng-click</span>=<span style=\"color: #8b2252;\">\"shuffle(file.path)\"</span>&gt;&lt;<span style=\"color: #0000ff;\">i</span> <span style=\"color: #a0522d;\">class</span>=<span style=\"color: #8b2252;\">\"icon-random\"</span>&gt;&lt;/<span style=\"color: #0000ff;\">i</span>&gt;&lt;/<span style=\"color: #0000ff;\">button</span>&gt;
            &lt;<span style=\"color: #0000ff;\">a</span> <span style=\"color: #a0522d;\">class</span>=<span style=\"color: #8b2252;\">\"dir-link\"</span> <span style=\"color: #a0522d;\">ng-click</span>=<span style=\"color: #8b2252;\">\"play(file.path)\"</span>&gt;{{file.name}}&lt;/<span style=\"color: #0000ff;\">a</span>&gt;
          &lt;/<span style=\"color: #0000ff;\">span</span>&gt;
          &lt;<span style=\"color: #0000ff;\">a</span> <span style=\"color: #a0522d;\">class</span>=<span style=\"color: #8b2252;\">\"dir-link buttonless\"</span> ng-switch-default <span style=\"color: #a0522d;\">ng-click</span>=<span style=\"color: #8b2252;\">\"play(file.path)\"</span>&gt;{{file.name}}&lt;/<span style=\"color: #0000ff;\">a</span>&gt;
        &lt;/<span style=\"color: #0000ff;\">li</span>&gt;
      &lt;/<span style=\"color: #0000ff;\">ul</span>&gt;
      &lt;<span style=\"color: #0000ff;\">div</span> <span style=\"color: #a0522d;\">id</span>=<span style=\"color: #8b2252;\">\"controls\"</span> <span style=\"color: #a0522d;\">ng-controller</span>=<span style=\"color: #8b2252;\">\"CommandCtrl\"</span>&gt;
        &lt;<span style=\"color: #0000ff;\">ul</span> <span style=\"color: #a0522d;\">ng-repeat</span>=<span style=\"color: #8b2252;\">\"controlsList in controlTree\"</span>&gt;
          &lt;<span style=\"color: #0000ff;\">li</span> <span style=\"color: #a0522d;\">ng-repeat</span>=<span style=\"color: #8b2252;\">\"control in controlsList\"</span> <span style=\"color: #a0522d;\">class</span>=<span style=\"color: #8b2252;\">\"{{control.cmd}}\"</span> <span style=\"color: #a0522d;\">ng-switch</span>=<span style=\"color: #8b2252;\">\"control.held\"</span>&gt;
            &lt;<span style=\"color: #0000ff;\">button</span> <span style=\"color: #a0522d;\">class</span>=<span style=\"color: #8b2252;\">\"btn\"</span> <span style=\"color: #a0522d;\">ng-switch-when</span>=<span style=\"color: #8b2252;\">\"true\"</span> 
                    <span style=\"color: #a0522d;\">ng-mousedown</span>=<span style=\"color: #8b2252;\">\"command(control.cmd); hold(control.cmd)\"</span>
                    <span style=\"color: #a0522d;\">ng-mouseup</span>=<span style=\"color: #8b2252;\">\"release()\"</span> <span style=\"color: #a0522d;\">ng-mouseleave</span>=<span style=\"color: #8b2252;\">\"release()\"</span>&gt;
              &lt;<span style=\"color: #0000ff;\">i</span> <span style=\"color: #a0522d;\">class</span>=<span style=\"color: #8b2252;\">\"icon-{{control.cmd}}\"</span>&gt;&lt;/<span style=\"color: #0000ff;\">i</span>&gt;
            &lt;/<span style=\"color: #0000ff;\">button</span>&gt;
            &lt;<span style=\"color: #0000ff;\">button</span> <span style=\"color: #a0522d;\">class</span>=<span style=\"color: #8b2252;\">\"btn\"</span> ng-switch-default <span style=\"color: #a0522d;\">ng-click</span>=<span style=\"color: #8b2252;\">\"command(control.cmd)\"</span>&gt;
              &lt;<span style=\"color: #0000ff;\">i</span> <span style=\"color: #a0522d;\">class</span>=<span style=\"color: #8b2252;\">\"icon-{{control.cmd}}\"</span>&gt;&lt;/<span style=\"color: #0000ff;\">i</span>&gt;
            &lt;/<span style=\"color: #0000ff;\">button</span>&gt;
          &lt;/<span style=\"color: #0000ff;\">li</span>&gt;
        &lt;/<span style=\"color: #0000ff;\">ul</span>&gt;
      &lt;/<span style=\"color: #0000ff;\">div</span>&gt;
    &lt;/<span style=\"color: #0000ff;\">div</span>&gt;
    
    <span style=\"color: #b22222;\">&lt;!-- </span><span style=\"color: #b22222;\">------ </span><span style=\"color: #b22222;\">--&gt;</span>
    <span style=\"color: #b22222;\">&lt;!-- </span><span style=\"color: #b22222;\">Styles </span><span style=\"color: #b22222;\">--&gt;</span>
    <span style=\"color: #b22222;\">&lt;!-- </span><span style=\"color: #b22222;\">------ </span><span style=\"color: #b22222;\">--&gt;</span>
    &lt;<span style=\"color: #0000ff;\">link</span> <span style=\"color: #a0522d;\">rel</span>=<span style=\"color: #8b2252;\">\"stylesheet\"</span> <span style=\"color: #a0522d;\">href</span>=<span style=\"color: #8b2252;\">\"css/bootstrap.css\"</span> <span style=\"color: #a0522d;\">type</span>=<span style=\"color: #8b2252;\">\"text/css\"</span> <span style=\"color: #a0522d;\">media</span>=<span style=\"color: #8b2252;\">\"screen\"</span> /&gt;
    &lt;<span style=\"color: #0000ff;\">link</span> <span style=\"color: #a0522d;\">rel</span>=<span style=\"color: #8b2252;\">\"stylesheet\"</span> <span style=\"color: #a0522d;\">href</span>=<span style=\"color: #8b2252;\">\"css/bootstrap-responsive.css\"</span> <span style=\"color: #a0522d;\">type</span>=<span style=\"color: #8b2252;\">\"text/css\"</span> <span style=\"color: #a0522d;\">media</span>=<span style=\"color: #8b2252;\">\"screen\"</span> /&gt;
    &lt;<span style=\"color: #0000ff;\">link</span> <span style=\"color: #a0522d;\">rel</span>=<span style=\"color: #8b2252;\">\"stylesheet\"</span> <span style=\"color: #a0522d;\">href</span>=<span style=\"color: #8b2252;\">\"css/style.css\"</span> <span style=\"color: #a0522d;\">type</span>=<span style=\"color: #8b2252;\">\"text/css\"</span> <span style=\"color: #a0522d;\">media</span>=<span style=\"color: #8b2252;\">\"screen\"</span> /&gt;
    
    <span style=\"color: #b22222;\">&lt;!-- </span><span style=\"color: #b22222;\">------- </span><span style=\"color: #b22222;\">--&gt;</span>
    <span style=\"color: #b22222;\">&lt;!-- </span><span style=\"color: #b22222;\">Scripts </span><span style=\"color: #b22222;\">--&gt;</span>
    <span style=\"color: #b22222;\">&lt;!-- </span><span style=\"color: #b22222;\">------- </span><span style=\"color: #b22222;\">--&gt;</span>
    &lt;<span style=\"color: #0000ff;\">script</span> <span style=\"color: #a0522d;\">type</span>=<span style=\"color: #8b2252;\">\"text/javascript\"</span> <span style=\"color: #a0522d;\">src</span>=<span style=\"color: #8b2252;\">\"js/jquery.min.js\"</span>&gt;&lt;/<span style=\"color: #0000ff;\">script</span>&gt;
    &lt;<span style=\"color: #0000ff;\">script</span> <span style=\"color: #a0522d;\">type</span>=<span style=\"color: #8b2252;\">\"text/javascript\"</span> <span style=\"color: #a0522d;\">src</span>=<span style=\"color: #8b2252;\">\"js/angular.min.js\"</span>&gt;&lt;/<span style=\"color: #0000ff;\">script</span>&gt;
    &lt;<span style=\"color: #0000ff;\">script</span> <span style=\"color: #a0522d;\">type</span>=<span style=\"color: #8b2252;\">\"text/javascript\"</span> <span style=\"color: #a0522d;\">src</span>=<span style=\"color: #8b2252;\">\"js/angular-resource.min.js\"</span>&gt;&lt;/<span style=\"color: #0000ff;\">script</span>&gt;

    &lt;<span style=\"color: #0000ff;\">script</span> <span style=\"color: #a0522d;\">type</span>=<span style=\"color: #8b2252;\">\"text/javascript\"</span> <span style=\"color: #a0522d;\">src</span>=<span style=\"color: #8b2252;\">\"js/mote.js\"</span>&gt;&lt;/<span style=\"color: #0000ff;\">script</span>&gt;

  &lt;/<span style=\"color: #0000ff;\">body</span>&gt;
&lt;/<span style=\"color: #0000ff;\">html</span>&gt;
</pre>

<p>What you don't see above is that the amount of JavaScript required for this new approach is easily 1/2 of what I needed to write to get comparable functionality with separate templating/routing/DOM libraries. Most of it, I get the feeling, is Angulars' use of <a href=\"http://en.wikipedia.org/wiki/Reactive_programming\">reactive programming</a>, but I can't really be sure of that. Since I haven't done much testing yet, I also don't know what kind of performance hit I'm going to be taking by using such a transformative approach.</p>

<p>Add that to the massive list of things I need to keep you posted about, I guess.</p>

<hr />
<h5>Footnotes</h5>
<p>1 - <a href=\"#note-Mon-Dec-10-161221EST-2012\" name=\"foot-Mon-Dec-10-161221EST-2012\">[back]</a> - But give me ten years or so.</p>

<p>2 - <a href=\"#note-Mon-Dec-10-161300EST-2012\" name=\"foot-Mon-Dec-10-161300EST-2012\">[back]</a> - Where we actually discuss many things of interest to functional programmers, not just Common Lisp.</p>

<p>3 - <a href=\"#note-Mon-Dec-10-161810EST-2012\" name=\"foot-Mon-Dec-10-161810EST-2012\">[back]</a> - So you can still use jQuery for the <a href=\"http://api.jquery.com/jQuery.ajax/\">one</a> or <a href=\"http://api.jquery.com/jQuery.browser/\">two</a> things Angular doesn't bother with.</p>
"))
((5202 3723 598919000) :INSERT (114 :POSTED 3564104400))
((5202 3723 599565000) :INSERT
 (115 :TITLE "Life Extreme - Optimizing for Time in Common Lisp"))
((5202 3723 599570000) :INSERT (115 :FILE "life-EXTREME.html"))
((5202 3723 599572000) :INSERT (115 :EDITED 3610022331))
((5202 3723 599574000) :INSERT
 (115 :BODY "<p>I'm sick today.</p>

<p>I fucking <i>hate</i> being sick.</p>

<p>So, to make myself feel better, I'm profiling things. Specifically, the Common Lisp version of Life I wrote last time. I'll be using <a href=\"http://www.gnu.org/software/emacs/\">Emacs</a> and <a href=\"http://common-lisp.net/project/slime/\">SLIME</a>, but I'm pretty sure you can do at least some of this using <a href=\"http://www.gnu.org/software/emacs/\"><code>time</code></a> in whatever <code>REPL</code> you've got lying around.</p>

<pre>(<span style=\"color: #a020f0;\">defpackage</span> <span style=\"color: #228b22;\">:life</span> (<span style=\"color: #7a378b;\">:use</span> <span style=\"color: #7a378b;\">:cl</span>))
(<span style=\"color: #a020f0;\">in-package</span> <span style=\"color: #7a378b;\">:life</span>)

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">moore-neighborhood</span> (cell)
  (<span style=\"color: #a020f0;\">let</span> ((r '(-1 0 1)))
    (mapcan
         (<span style=\"color: #a020f0;\">lambda</span> (delta-x)
           (<span style=\"color: #a020f0;\">loop</span> for delta-y in r
              unless (and (= delta-x 0) (= delta-y 0))
              collect (cons (+ (car cell) delta-x) (+ (cdr cell) delta-y))))
         r)))

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">frequencies</span> (cells)
  (<span style=\"color: #a020f0;\">let</span> ((h (make-hash-table <span style=\"color: #7a378b;\">:test</span> #'equal)))
    (<span style=\"color: #a020f0;\">loop</span> for c in cells
       do (incf (gethash c h 0)))
    h))

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">life-step</span> (cells)
  (<span style=\"color: #a020f0;\">let</span> ((f (frequencies (mapcan #'moore-neighborhood cells))))
    (<span style=\"color: #a020f0;\">loop</span> for k being the hash-keys in f
       when (or 
             (= (gethash k f) 3) 
             (and (= (gethash k f) 2) (member k cells <span style=\"color: #7a378b;\">:test</span> #'equal)))
         collect k)))

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">print-world</span> (live-cells <span style=\"color: #228b22;\">&amp;optional</span> (world-size 10))
  (<span style=\"color: #a020f0;\">dotimes</span> (y world-size)
    (<span style=\"color: #a020f0;\">dotimes</span> (x world-size)
      (<span style=\"color: #a020f0;\">if</span> (member (cons x y) live-cells <span style=\"color: #7a378b;\">:test</span> #'equal)
          (format t <span style=\"color: #8b2252;\">\"X\"</span>)
          (format t <span style=\"color: #8b2252;\">\".\"</span>)))
    (format t <span style=\"color: #8b2252;\">\"~%\"</span>)))

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">run-life</span> (world-size steps cells)
  (<span style=\"color: #a020f0;\">when</span> (&lt; 0 steps)
    (run-life world-size (- steps 1) (life-step cells))))

<span style=\"color: #b22222;\">;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; </span><span style=\"color: #b22222;\">data related
</span>(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">.cells-&gt;list</span> (filename)
  (<span style=\"color: #a020f0;\">with-open-file</span> (stream filename)
    (apply #'append
           (<span style=\"color: #a020f0;\">loop</span> with y = 0
              for line = (read-line stream nil 'eof) until (eq line 'eof)
              unless (char= (aref line 0) #\\!)
              collect (<span style=\"color: #a020f0;\">let</span> ((line (<span style=\"color: #a020f0;\">loop</span> for x from 0
                                     for char being the elements of line
                                     when (char= char #\\O) collect (cons x y)))) 
                        (incf y)
                        line)))))

(<span style=\"color: #a020f0;\">defparameter</span> <span style=\"color: #a0522d;\">*blinker*</span> '((1 . 2) (2 . 2) (3 . 2)))
(<span style=\"color: #a020f0;\">defparameter</span> <span style=\"color: #a0522d;\">*glider*</span> '((1 . 0) (2 . 1) (0 . 2) (1 . 2) (2 . 2)))
(<span style=\"color: #a020f0;\">defparameter</span> <span style=\"color: #a0522d;\">*gosper-glider-gun*</span> 
  '((24 . 0) (22 . 1) (24 . 1) (12 . 2) (13 . 2) (20 . 2) (21 . 2) (34 . 2)
    (35 . 2) (11 . 3) (15 . 3) (20 . 3) (21 . 3) (34 . 3) (35 . 3) (0 . 4) (1 . 4)
    (10 . 4) (16 . 4) (20 . 4) (21 . 4) (0 . 5) (1 . 5) (10 . 5) (14 . 5) (16 . 5)
    (17 . 5) (22 . 5) (24 . 5) (10 . 6) (16 . 6) (24 . 6) (11 . 7) (15 . 7)
    (12 . 8) (13 . 8)))</pre>

  <p><a href=\"http://www.conwaylife.com/wiki/Gosper_glider_gun\">Gosper's gun</a> is the simplest emitter I could find, and I need to test that sort of thing to convince myself of the performance of this abstract machine. The <code>.cells->list</code> function exists purely to convert files like <a href=\"http://www.conwaylife.com/patterns/gosperglidergun.cells\">this</a> into inputs suitable for our peculiar model of the Life world. You'll also notice that I stripped all printing code from <code>run-life</code>; I'm not interested in how inefficient the conversion between sparse-array and grid is, and I imagine that it would have been the main cost-center had I kept it. Lets hop into the <code>REPL</code></p>

<pre>CL-USER&gt; (load <span style=\"color: #8b2252;\">\"life.lisp\"</span>)
T
CL-USER&gt; (<span style=\"color: #a020f0;\">in-package</span> <span style=\"color: #7a378b;\">:life</span>)
#&lt;PACKAGE <span style=\"color: #8b2252;\">\"LIFE\"</span>&gt;</pre>

<p>Remember to turn on profiling with <code>M-x slime-profile-package life</code>, and answer yes to the options it asks about.</p>


<pre>LIFE&gt; (run-life 50 5000 *gosper-glider-gun*)
Control stack guard page temporarily disabled: proceed with caution
Control stack guard page temporarily disabled: proceed with caution
Control stack guard page temporarily disabled: proceed with caution
Control stack guard page temporarily disabled: proceed with caution
Control stack guard page temporarily disabled: proceed with caution
Control stack guard page temporarily disabled: proceed with caution
Control stack guard page temporarily disabled: proceed with caution
Control stack guard page temporarily disabled: proceed with caution
Control stack guard page temporarily disabled: proceed with caution
Control stack guard page temporarily disabled: proceed with caution
Control stack guard page temporarily disabled: proceed with caution
Control stack guard page temporarily disabled: proceed with caution
<span style=\"color: #b22222;\">; </span><span style=\"color: #b22222;\">Evaluation aborted on #&lt;SB-KERNEL::CONTROL-STACK-EXHAUSTED {100F0230D3}&gt;.</span></pre>

<p>Ok, I guess that's not entirely unexpected. After all, <code>run-life</code> is still recursive, and Common Lisp doesn't guarantee tail-call optimization. Still, we probably got some pretty decent data, even from a failed attempt. <code>M-x slime-profile-report</code> says</p>

<pre>  seconds  |     gc     |    consed   |   calls   |  sec/call  |  name  
-------------------------------------------------------------
    11.820 |      0.000 |     590,592 |     3,322 |   0.003558 | LIFE::LIFE-STEP
     4.082 |      1.796 | 534,176,080 |     3,322 |   0.001229 | LIFE::FREQUENCIES
     0.887 |      0.428 | 378,046,784 | 1,073,904 |   0.000001 | LIFE::MOORE-NEIGHBORHOOD
     0.000 |      0.000 |  12,360,624 |     3,322 |   0.000000 | LIFE::RUN-LIFE
-------------------------------------------------------------
    16.790 |      2.224 | 925,174,080 | 1,083,870 |            | Total

estimated total profiling overhead: 1.99 seconds
overhead estimation parameters:
  8.000001e-9s/call, 1.84e-6s total profiling, 8.24e-7s internal profiling</pre>

<p><code>frequencies</code> and <code>life-step</code> are obviously the culprits here, and since we now know what the cost-centers are, we can mitigate them. Discounting micro-optimization<a href=\"#foot-Thu-Dec-13-133118EST-2012\" name=\"note-Thu-Dec-13-133118EST-2012\">[1]</a>, there are essentially three ways to optimize a piece of code for time<a href=\"#foot-Thu-Dec-13-133125EST-2012\" name=\"note-Thu-Dec-13-133125EST-2012\">[2]</a></p>

<ol>
  <li>reduce the number of traversals of your corpus</li>
  <li>reduce the time taken per traversal</li>
  <li>eliminate sequential data dependencies and do more traversals at once through parallelism</li>
</ol>

<p>We won't be doing the third because the Game of Life problem doesn't inherently lend itself to it; you need to compute step N before you can compute step N+1, and that can't really be helped. We might be able to take advantage of parallelism in a couple of places <i>during</i> each step, but that tends to have its own costs associated and typically doesn't pay off except on very large data sets.</p>

<p>There are a bunch of ways to do one and two. We can re-write pieces of our code with tight loops; reducing readability somewhat but removing traversals where we can. We can change the representation of our corpus to something more easily searchable, or we can be more aggressive up-front about throwing out elements we know we won't need later. We'll probably end up doing <i>all</i> of that.</p>

<p>But first...</p>

<pre>(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">run-life</span> (world-size steps cells)
  (<span style=\"color: #a020f0;\">declare</span> (ignore world-size))
  (<span style=\"color: #a020f0;\">let</span> ((world (copy-list cells)))
    (<span style=\"color: #a020f0;\">loop</span> 
       repeat steps
       do (setf world (life-step world)))
    world))</pre>

<p>That should get around our snippy little stack warning.</p>

<pre>LIFE&gt; (run-life 50 5000 *gosper-glider-gun*)</pre>

<p>now returns with a list of 884 living cells. Which makes perfect sense, since this is a generator we're testing. The profiler says \"moo\".</p>

<pre>  seconds  |     gc     |     consed    |   calls   |  sec/call  |  name  
---------------------------------------------------------------
    37.257 |      0.000 |       622,592 |     5,000 |   0.007451 | LIFE::LIFE-STEP
     5.156 |      0.588 | 1,058,382,096 |     5,000 |   0.001031 | LIFE::FREQUENCIES
     1.692 |      0.564 |   821,550,624 | 2,315,504 |   0.000001 | LIFE::MOORE-NEIGHBORHOOD
     0.000 |      0.000 |             0 |         1 |   0.000000 | LIFE::RUN-LIFE
---------------------------------------------------------------
    44.105 |      1.152 | 1,880,555,312 | 2,325,505 |            | Total

estimated total profiling overhead: 4.28 seconds
overhead estimation parameters:
  8.000001e-9s/call, 1.84e-6s total profiling, 8.24e-7s internal profiling</pre>

<p>So frequencies takes up a fuckton of <code>cons</code>es, and the second most execution time, right behind <code>life-step</code>. This preliminary survey probably wasn't worth doing on a program this size; just looking at our defined functions would probably have convinced you who the culprits are and aren't.</p>

<pre>(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">life-step</span> (cells)
  (<span style=\"color: #a020f0;\">let</span> ((f (frequencies (mapcan #'moore-neighborhood cells))))
    (<span style=\"color: #a020f0;\">loop</span> for k being the hash-keys in f
       when (or 
             (= (gethash k f) 3) 
             (and (= (gethash k f) 2) (member k cells <span style=\"color: #7a378b;\">:test</span> #'equal)))
         collect k)))</pre>

<p>First off, <code>(mapcan #'moore-neighborhood cells)</code> is one traversal of the input. Ok, not too much we can do about that, we need to do it at least once. Calling <code>frequencies</code> on that is a second traversal, and we can probably tweak our code enough that those two happen at once. The subsequent <code>loop</code> call is another traversal of <code>(* ~8 cells)</code>. We do actually need to traverse <code>f</code>, but it's currently longer than it needs to be because it's a <code>hash-table</code> that contains <i>all</i> cells in any living cells' Moore neighborhood. Fixing that would mean tweaking <code>frequencies</code> so that it automatically threw out cells with fewer than two or more than three neighbors, since those couldn't possibly be alive next time. Finally, it might not be entirely obvious, but <code>member</code> is a linked-list operation that traverses its list argument each time its called. I put it in the tail end of an <code>and</code>, which means it should only be getting called for cells with two neighbors, but each time it <i>does</i> get called, it traverses some part of <code>cells</code>; all of it, if its argument wasn't alive last time. We'll fix <i>that</i> by using a data type that has a more efficient membership check than a linked list.</p>

<p>Ok, firstly, do it in one traversal</p>

<pre>(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">compute-frequencies</span> (cells)
  (<span style=\"color: #a020f0;\">let</span> ((h (make-hash-table <span style=\"color: #7a378b;\">:test</span> #'equal)))
    (<span style=\"color: #a020f0;\">loop</span> for a-cell in cells
       do (<span style=\"color: #a020f0;\">loop</span> for c in (moore-neighborhood a-cell)
             do (incf (gethash c h 0))))
    h))</pre>

<p>Oh, by the by, I have to apologize for the poor <code>frequencies</code> implementation last time. It turns out that Common Lisp has something like Python's <code>defaultdict</code> built-in; <code>gethash</code> takes an optional third argument which it returns as the default value. Which is nice because <code>(incf (gethash [key] [table] 0))</code> will do exactly what you think it should. Now then, one traversal eliminated, lets hook the new thing into <code>life-step</code></p>

<pre>(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">life-step</span> (cells)
  (<span style=\"color: #a020f0;\">let</span> ((f (compute-frequencies cells)))
    (<span style=\"color: #a020f0;\">loop</span> for k being the hash-keys in f
       when (or 
             (= (gethash k f) 3) 
             (and (= (gethash k f) 2) (member k cells <span style=\"color: #7a378b;\">:test</span> #'equal)))
         collect k)))</pre>

<p>How did we do?</p>

<pre>  seconds  |     gc     |     consed    |   calls   |  sec/call  |  name  
---------------------------------------------------------------
    33.800 |      0.012 |    42,812,560 |     5,000 |   0.006760 | LIFE::LIFE-STEP
     4.404 |      0.172 | 1,098,791,040 |     5,000 |   0.000881 | LIFE::COMPUTE-FREQUENCIES
     1.276 |      0.072 |   738,782,288 | 2,315,504 |   0.000001 | LIFE::MOORE-NEIGHBORHOOD
     0.000 |      0.000 |             0 |         1 |   0.000000 | LIFE::RUN-LIFE
---------------------------------------------------------------
    39.481 |      0.256 | 1,880,385,888 | 2,325,505 |            | Total

estimated total profiling overhead: 4.28 seconds
overhead estimation parameters:
  8.000001e-9s/call, 1.84e-6s total profiling, 8.24e-7s internal profiling</pre>

<p>Not bad, actually. <code>compute-frequencies</code> conses more, but saves us about half a second over the programs' running time. A direct result of this is a ~5 second drop in computing time for a 5000 step Gosper gun. Not too shabby for five minutes' worth of work. Next up, lets try to ignore irrelevant cells. That means not adding them to the result hash unless they've got at least two neighbors, and it means knocking them out if they have more than three. In other words, we'll be wanting more <code>hash-table</code>.</p>

<pre>(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">compute-frequencies</span> (cells)
  (<span style=\"color: #a020f0;\">let</span> ((lonely (make-hash-table <span style=\"color: #7a378b;\">:test</span> #'equal)) 
        (h (make-hash-table <span style=\"color: #7a378b;\">:test</span> #'equal)))
    (<span style=\"color: #a020f0;\">loop</span> for a-cell in cells
       do (<span style=\"color: #a020f0;\">loop</span> for c in (moore-neighborhood a-cell)
             do (<span style=\"color: #a020f0;\">let</span> ((res (incf (gethash c lonely 0))))
                  (<span style=\"color: #a020f0;\">cond</span> 
                    ((or (= res 2) (= res 3)) (setf (gethash c h) res))
                    ((= res 4) (remhash c h))))))
    h))</pre>

<p>My memory is gonna cry, but the processor will have a slightly easier time of this, because it will only need to deal with cells that have a decent shot of being alive in the next iteration.</p>

<pre>  seconds  |     gc     |     consed    |   calls   |  sec/call  |  name  
---------------------------------------------------------------
    32.981 |      0.000 |    37,683,200 |     5,000 |   0.006596 | LIFE::LIFE-STEP
     5.931 |      0.288 | 1,718,346,016 |     5,000 |   0.001186 | LIFE::COMPUTE-FREQUENCIES
     1.220 |      0.080 |   638,848,352 | 2,315,504 |   0.000001 | LIFE::MOORE-NEIGHBORHOOD
     0.000 |      0.000 |             0 |         1 |   0.000000 | LIFE::RUN-LIFE
---------------------------------------------------------------
    40.133 |      0.368 | 2,394,877,568 | 2,325,505 |            | Total

estimated total profiling overhead: 4.28 seconds
overhead estimation parameters:
  8.000001e-9s/call, 1.84e-6s total profiling, 8.24e-7s internal profiling</pre>

<p>Hm. Very slightly easier, it turns out. All the time we buy in reducing the number of cells we need to traverse seems to get eaten by the more complex check. I'm not entirely sure it was worth it, but lets keep that optimization where it is for now. We've got one trick left up our sleeves, and it's changing the representation of <code>cells</code>. At the moment, it's represented by that Lisp mainstay, the Linked List. In Clojure, we'd use a set, but we don't have ready access to those here. So, we'll need to use the next best thing; a data structure with quick insertion and constant-time lookup.</p>

<pre>(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">compute-frequencies</span> (cells)
  (<span style=\"color: #a020f0;\">let</span> ((lonely (make-hash-table <span style=\"color: #7a378b;\">:test</span> #'equal)) 
        (h (make-hash-table <span style=\"color: #7a378b;\">:test</span> #'equal)))
    (<span style=\"color: #a020f0;\">loop</span> for a-cell being the hash-keys of cells
       do (<span style=\"color: #a020f0;\">loop</span> for c in (moore-neighborhood a-cell)
             do (<span style=\"color: #a020f0;\">let</span> ((res (incf (gethash c lonely 0))))
                  (<span style=\"color: #a020f0;\">cond</span> 
                    ((or (= res 2) (= res 3)) (setf (gethash c h) res))
                    ((= res 4) (remhash c h))))))
    h))

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">cells-&gt;hash</span> (cells)
  (<span style=\"color: #a020f0;\">let</span> ((h (make-hash-table <span style=\"color: #7a378b;\">:test</span> #'equal <span style=\"color: #7a378b;\">:size</span> 800)))
    (<span style=\"color: #a020f0;\">loop</span> for c in cells
         do (setf (gethash c h) 0))
    h))

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">life-step</span> (cells)
  (<span style=\"color: #a020f0;\">let</span> ((f (compute-frequencies cells)))
    (<span style=\"color: #a020f0;\">loop</span> for k being the hash-keys in f
       when (and (= (gethash k f) 2) (not (gethash k cells)))
       do (remhash k f))
    f))

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">run-life</span> (world-size steps cells)
  (<span style=\"color: #a020f0;\">declare</span> (ignore world-size))
  (<span style=\"color: #a020f0;\">let</span> ((world (cells-&gt;hash cells)))
    (<span style=\"color: #a020f0;\">loop</span> 
       repeat steps
       do (setf world (life-step world)))
    world))</pre>

<p>Subtle changes happen to each of those functions to support the overarching change, which is that we're using <code>hash-table</code>s everywhere now. Because <code>member</code> has to traverse the entire list of <code>cells</code>, while <code>gethash</code> is constant time, this should knock the shit out of our performance problems.</p>

<pre>  seconds  |     gc     |     consed    |   calls   |  sec/call  |  name  
---------------------------------------------------------------
     5.871 |      0.268 | 1,716,630,608 |     5,000 |   0.001174 | LIFE::COMPUTE-FREQUENCIES
     1.252 |      0.108 |   641,132,304 | 2,315,504 |   0.000001 | LIFE::MOORE-NEIGHBORHOOD
     0.000 |      0.000 |             0 |     5,000 |   0.000000 | LIFE::LIFE-STEP
     0.000 |      0.000 |             0 |         1 |   0.000000 | LIFE::RUN-LIFE
     0.000 |      0.000 |        30,080 |         1 |   0.000000 | LIFE::CELLS-&gt;HASH
---------------------------------------------------------------
     7.123 |      0.376 | 2,357,792,992 | 2,325,506 |            | Total

estimated total profiling overhead: 4.28 seconds
overhead estimation parameters:
  8.000001e-9s/call, 1.84e-6s total profiling, 8.24e-7s internal profiling</pre>

<p>Boom. Headshot.</p>

<p>Granted, we're still <code>cons</code>ing like crazy, but removing that <code>member</code> check has pushed <code>life-step</code> down so low that it actually takes up significantly fewer resources than friggin <code>moore-neighborhood</code>. We've cut our total running time from ~40 seconds to under 10. In fact, lets crank this fucker up to eleven.</p>

<pre>LIFE&gt; (run-life 50 50000 *gosper-glider-gun*)

  seconds  |     gc     |      consed     |    calls    |  sec/call  |  name  
-------------------------------------------------------------------
   371.779 |     23.251 |  96,030,964,864 |      40,182 |   0.009252 | LIFE::COMPUTE-FREQUENCIES
    74.690 |      8.977 |  44,912,583,584 | 136,410,636 |   0.000001 | LIFE::MOORE-NEIGHBORHOOD
     0.000 |      0.000 |          77,920 |      40,182 |   0.000000 | LIFE::LIFE-STEP
     0.000 |      0.000 |               0 |           1 |   0.000000 | LIFE::RUN-LIFE
     0.000 |      0.000 |          21,840 |           1 |   0.000000 | LIFE::CELLS-&gt;HASH
-------------------------------------------------------------------
   446.468 |     32.228 | 140,943,648,208 | 136,491,002 |            | Total

estimated total profiling overhead: 251.14 seconds
overhead estimation parameters:
  8.000001e-9s/call, 1.84e-6s total profiling, 8.24e-7s internal profiling</pre>

<p>Aaaaand I got bored. Yeah, that took a while. What were you expecting? We get plenty of new cells each iteration, and we don't actually throw any away unless they die naturally. Which doesn't happen often when you're dealing with a generator. That's the last \"optimization\" we can make; instead of <code>(declare (ignore</code>ing the <code>world-size</code>, we can use it to forget cells that lie outside of our target area. It won't help all patterns, but the <code>*gosper-glider-gun*</code> won't create a Malthusian disaster for our computing resources.</p>

<pre>(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">run-life</span> (world-size steps cells)
  (<span style=\"color: #a020f0;\">let</span> ((world (cells-&gt;hash cells)))
    (<span style=\"color: #a020f0;\">loop</span> 
       repeat steps
       do (setf world (life-step world world-size)))
    world))

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">life-step</span> (cells world-size)
  (<span style=\"color: #a020f0;\">let</span> ((f (compute-frequencies cells)))
    (<span style=\"color: #a020f0;\">loop</span> for k being the hash-keys in f
       when (or 
             (&gt; (car k) world-size)
             (&gt; (cdr k) world-size)
             (and (= (gethash k f) 2) (not (gethash k cells))))
       do (remhash k f))
    f))</pre>

<p>There. Now we just chuck all the cells that run off the edge of the world. Provided the world is small enough, that keeps the population from exploding tribble style.</p>

<pre>LIFE&gt; (run-life 50 50000 *gosper-glider-gun*)

  seconds  |     gc     |     consed    |   calls   |  sec/call  |  name  
---------------------------------------------------------------
     8.938 |      0.500 | 2,520,410,944 |    50,000 |   0.000179 | LIFE::COMPUTE-FREQUENCIES
     1.801 |      0.100 | 1,100,839,008 | 3,352,906 |   0.000001 | LIFE::MOORE-NEIGHBORHOOD
     0.000 |      0.000 |             0 |    50,000 |   0.000000 | LIFE::LIFE-STEP
     0.000 |      0.000 |             0 |         1 |   0.000000 | LIFE::RUN-LIFE
     0.000 |      0.000 |        52,144 |         1 |   0.000000 | LIFE::CELLS-&gt;HASH
---------------------------------------------------------------
    10.739 |      0.600 | 3,621,302,096 | 3,452,908 |            | Total

estimated total profiling overhead: 6.35 seconds
overhead estimation parameters:
  8.000001e-9s/call, 1.84e-6s total profiling, 8.24e-7s internal profiling</pre>

<p>Pretty good right? All things considered? Before we go, lets take a look at how this approach compares to the traditional grid Life technique. Here's <a href=\"http://rosettacode.org/wiki/Conway%27s_Game_of_Life#Common_Lisp\">the code pulled from Rosetta Code</a>, using a two-dimensional array instead of a list of the living. Oh, I've commented out printing of intermediate steps, and included a 50x50 field with the Gosper Gun, just to make sure this is as even as possible. Oh, I also have to reset the starting world for <code><span style=\"color: #7a378b;\">:life-grid</span></code> each time, since its process is destructive.</p>

<pre>(<span style=\"color: #a020f0;\">defpackage</span> <span style=\"color: #228b22;\">:life-grid</span> (<span style=\"color: #7a378b;\">:use</span> <span style=\"color: #7a378b;\">:cl</span>))
(<span style=\"color: #a020f0;\">in-package</span> <span style=\"color: #7a378b;\">:life-grid</span>)

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">next-life</span> (array <span style=\"color: #228b22;\">&amp;optional</span> results)
  (<span style=\"color: #a020f0;\">let*</span> ((dimensions (array-dimensions array))
         (results (or results (make-array dimensions <span style=\"color: #7a378b;\">:element-type</span> 'bit))))
    (<span style=\"color: #a020f0;\">destructuring-bind</span> (rows columns) dimensions
      (<span style=\"color: #a020f0;\">labels</span> ((entry (row col)
                 <span style=\"color: #8b2252;\">\"Return array(row,col) for valid (row,col) else 0.\"</span>
                 (<span style=\"color: #a020f0;\">if</span> (or (not (&lt; -1 row rows))
                         (not (&lt; -1 col columns)))
                   0
                   (aref array row col)))
               (neighbor-count (row col <span style=\"color: #228b22;\">&amp;aux</span> (count 0))
                 <span style=\"color: #8b2252;\">\"Return the sum of the neighbors of (row,col).\"</span>
                 (<span style=\"color: #a020f0;\">dolist</span> (r (list (1- row) row (1+ row)) count)
                   (<span style=\"color: #a020f0;\">dolist</span> (c (list (1- col) col (1+ col)))
                     (<span style=\"color: #a020f0;\">unless</span> (and (eql r row) (eql c col))
                       (incf count (entry r c))))))
               (live-or-die? (current-state neighbor-count)
                 (<span style=\"color: #a020f0;\">if</span> (or (and (eql current-state 1)
                              (&lt;=  2 neighbor-count 3))
                         (and (eql current-state 0)
                              (eql neighbor-count 3)))
                   1
                   0)))
        (<span style=\"color: #a020f0;\">dotimes</span> (row rows results)
          (<span style=\"color: #a020f0;\">dotimes</span> (column columns)
            (setf (aref results row column)
                  (live-or-die? (aref array row column)
                                (neighbor-count row column)))))))))
 
(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">print-grid</span> (grid <span style=\"color: #228b22;\">&amp;optional</span> (out *standard-output*))
  (<span style=\"color: #a020f0;\">destructuring-bind</span> (rows columns) (array-dimensions grid)
    (<span style=\"color: #a020f0;\">dotimes</span> (r rows grid)
      (<span style=\"color: #a020f0;\">dotimes</span> (c columns (terpri out))
        (write-char (<span style=\"color: #a020f0;\">if</span> (zerop (aref grid r c)) #\\+ #\\#) out)))))
 
(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">run-life</span> (<span style=\"color: #228b22;\">&amp;optional</span> world (iterations 10) (out *standard-output*))
  (<span style=\"color: #a020f0;\">let*</span> ((world (or world (make-array '(10 10) <span style=\"color: #7a378b;\">:element-type</span> 'bit)))
         (result (make-array (array-dimensions world) <span style=\"color: #7a378b;\">:element-type</span> 'bit)))
    (<span style=\"color: #a020f0;\">do</span> ((i 0 (1+ i))) ((eql i iterations) world)
<span style=\"color: #b22222;\">;;      </span><span style=\"color: #b22222;\">(terpri out) (print-grid world out)
</span>      (psetq world (next-life world result)
             result world))))

(<span style=\"color: #a020f0;\">defparameter</span> <span style=\"color: #a0522d;\">*gosper-glider-gun*</span>
  (<span style=\"color: #a020f0;\">let</span> ((w (make-array '(50 50) <span style=\"color: #7a378b;\">:element-type</span> 'bit)))
    (<span style=\"color: #a020f0;\">loop</span> for (x . y) in '((24 . 0) (22 . 1) (24 . 1) (12 . 2) (13 . 2) (20 . 2) (21 . 2) (34 . 2)
                           (35 . 2) (11 . 3) (15 . 3) (20 . 3) (21 . 3) (34 . 3) (35 . 3) (0 . 4) (1 . 4)
                           (10 . 4) (16 . 4) (20 . 4) (21 . 4) (0 . 5) (1 . 5) (10 . 5) (14 . 5) (16 . 5)
                           (17 . 5) (22 . 5) (24 . 5) (10 . 6) (16 . 6) (24 . 6) (11 . 7) (15 . 7)
                           (12 . 8) (13 . 8))
       do (setf (aref w y x) 1))
    w))</pre>


<p>Lets start small</p>

<pre>  seconds  |     gc     |   consed  | calls |  sec/call  |  name  
-------------------------------------------------------
     0.005 |      0.000 | 1,588,176 |    50 |   0.000103 | LIFE::COMPUTE-FREQUENCIES
     0.002 |      0.000 |   786,432 | 2,534 |   0.000001 | LIFE::MOORE-NEIGHBORHOOD
     0.000 |      0.000 |    20,768 |     1 |   0.000000 | LIFE::CELLS-&gt;HASH
     0.000 |      0.000 |         0 |    50 |   0.000000 | LIFE::LIFE-STEP
     0.000 |      0.000 |         0 |     1 |   0.000000 | LIFE::RUN-LIFE
-------------------------------------------------------
     0.007 |      0.000 | 2,395,376 | 2,636 |            | Total

estimated total profiling overhead: 0.00 seconds
overhead estimation parameters:
  8.000001e-9s/call, 1.808e-6s total profiling, 7.04e-7s internal profiling</pre>
<br />
<pre>  seconds  |     gc     |   consed   | calls |  sec/call  |  name  
--------------------------------------------------------
     0.048 |      0.000 | 23,997,056 |    50 |   0.000959 | LIFE-GRID::NEXT-LIFE
     0.000 |      0.000 |          0 |     1 |   0.000000 | LIFE-GRID::RUN-LIFE
--------------------------------------------------------
     0.048 |      0.000 | 23,997,056 |    51 |            | Total

estimated total profiling overhead: 0.00 seconds
overhead estimation parameters:
  8.000001e-9s/call, 1.808e-6s total profiling, 7.04e-7s internal profiling</pre>

<hr />

<pre>LIFE&gt; (run-life 50 5000 *gosper-glider-gun*)
  seconds  |     gc     |    consed   |  calls  |  sec/call  |  name  
-----------------------------------------------------------
     0.828 |      0.016 | 241,614,336 |   5,000 |   0.000166 | LIFE::COMPUTE-FREQUENCIES
     0.237 |      0.032 | 118,408,160 | 334,156 |   0.000001 | LIFE::MOORE-NEIGHBORHOOD
     0.000 |      0.000 |      57,248 |       1 |   0.000000 | LIFE::CELLS-&gt;HASH
     0.000 |      0.000 |           0 |   5,000 |   0.000000 | LIFE::LIFE-STEP
     0.000 |      0.000 |           0 |       1 |   0.000000 | LIFE::RUN-LIFE
-----------------------------------------------------------
     1.064 |      0.048 | 360,079,744 | 344,158 |            | Total

estimated total profiling overhead: 0.62 seconds
overhead estimation parameters:
  8.000001e-9s/call, 1.808e-6s total profiling, 7.04e-7s internal profiling</pre>
<br />
<pre>LIFE-GRID&gt; (run-life *gosper-glider-gun* 5000)
  seconds  |     gc     |     consed    | calls |  sec/call  |  name  
-----------------------------------------------------------
     4.760 |      0.288 | 2,400,164,160 | 5,000 |   0.000952 | LIFE-GRID::NEXT-LIFE
     0.014 |      0.000 |             0 |     1 |   0.014479 | LIFE-GRID::RUN-LIFE
-----------------------------------------------------------
     4.775 |      0.288 | 2,400,164,160 | 5,001 |            | Total

estimated total profiling overhead: 0.01 seconds
overhead estimation parameters:
  8.000001e-9s/call, 1.808e-6s total profiling, 7.04e-7s internal profiling</pre>

<p>Hm. Honestly wasn't expecting to be cleaning the grids' clock yet, but we're using about a quarter of the time and about a sixth of the memory. <a href=\"http://science.slc.edu/~jmarshall/courses/2002/spring/cs50/BigO/index.html\">Remember</a>, at the low-end of the spectrum, the difference between a poor algorithm and a good one isn't very big. If you've got a corpus of length 20, it really doesn't matter whether you pick <a href=\"http://en.wikipedia.org/wiki/Bubble_sort\">bubble-sort</a>, <a href=\"http://en.wikipedia.org/wiki/Quicksort\">quicksort</a> or <a href=\"http://en.wikipedia.org/wiki/Timsort\">timsort</a>. In fact, you'd expect the better algorithms to do mildly worse on smaller data sets, since their optimizations don't have as much opportunity to pay for themselves.</p>

<p>Lets crank it up a bit to figure out how these numbers diverge.</p>

<pre>LIFE&gt; (run-life 50 50000 *gosper-glider-gun*)
  seconds  |     gc     |     consed    |   calls   |  sec/call  |  name  
---------------------------------------------------------------
     8.812 |      0.456 | 2,418,859,120 |    50,000 |   0.000176 | LIFE::COMPUTE-FREQUENCIES
     2.265 |      0.092 | 1,202,364,272 | 3,352,906 |   0.000001 | LIFE::MOORE-NEIGHBORHOOD
     0.000 |      0.000 |        58,240 |         1 |   0.000000 | LIFE::CELLS-&gt;HASH
     0.000 |      0.000 |             0 |    50,000 |   0.000000 | LIFE::LIFE-STEP
     0.000 |      0.000 |             0 |         1 |   0.000000 | LIFE::RUN-LIFE
---------------------------------------------------------------
    11.077 |      0.548 | 3,621,281,632 | 3,452,908 |            | Total

estimated total profiling overhead: 6.24 seconds
overhead estimation parameters:
  8.000001e-9s/call, 1.808e-6s total profiling, 7.04e-7s internal profiling</pre>
<br />
<pre>LIFE-GRID&gt; (run-life *gosper-glider-gun* 50000)
  seconds  |     gc     |     consed     |  calls |  sec/call  |  name  
-------------------------------------------------------------
    48.140 |      3.116 | 24,001,592,224 | 50,000 |   0.000963 | LIFE-GRID::NEXT-LIFE
     0.025 |      0.000 |              0 |      1 |   0.024799 | LIFE-GRID::RUN-LIFE
-------------------------------------------------------------
    48.165 |      3.116 | 24,001,592,224 | 50,001 |            | Total

estimated total profiling overhead: 0.09 seconds
overhead estimation parameters:
  8.000001e-9s/call, 1.808e-6s total profiling, 7.04e-7s internal profiling</pre>

<p>The optimized gridless approach is holding steady at about 1/4 time taken and about 1/6 memory used. Again, because this is a garbage collected language, those affect each other. Each trip of the collector adds precious seconds to the tally of consumed resources, so being a memory <i>hog</i> does come back to bite you in the ass even if you're not directly optimizing for space. Last one. Don't try this at home, unless you have something to do for a little while.</p>

<pre>LIFE&gt; (run-life 50 5000000 *gosper-glider-gun*)
  seconds  |     gc     |      consed     |    calls    |  sec/call  |  name  
-------------------------------------------------------------------
   924.769 |     45.233 | 252,714,140,464 |   5,000,000 |   0.000185 | LIFE::COMPUTE-FREQUENCIES
   145.698 |     10.865 | 109,648,457,760 | 335,415,406 |   0.000000 | LIFE::MOORE-NEIGHBORHOOD
     0.000 |      0.000 |              64 |   5,000,000 |   0.000000 | LIFE::LIFE-STEP
     0.000 |      0.000 |               0 |           1 |   0.000000 | LIFE::RUN-LIFE
     0.000 |      0.000 |          20,320 |           1 |   0.000000 | LIFE::CELLS-&gt;HASH
-------------------------------------------------------------------
  1070.467 |     56.098 | 362,362,618,608 | 345,415,408 |            | Total

estimated total profiling overhead: 635.56 seconds
overhead estimation parameters:
  8.000001e-9s/call, 1.84e-6s total profiling, 8.24e-7s internal profiling</pre>
<br />
<pre>LIFE-GRID&gt; (run-life *gosper-glider-gun* 5000000)
  seconds  |     gc     |       consed      |   calls   |  sec/call  |  name  
-------------------------------------------------------------------
  4818.453 |    340.823 | 2,400,161,918,448 | 5,000,000 |   0.000964 | LIFE-GRID::NEXT-LIFE
     5.769 |      0.000 |             3,008 |         1 |   5.768999 | LIFE-GRID::RUN-LIFE
-------------------------------------------------------------------
  4824.222 |    340.823 | 2,400,161,921,456 | 5,000,001 |            | Total

estimated total profiling overhead: 9.04 seconds
overhead estimation parameters:
  8.000001e-9s/call, 1.808e-6s total profiling, 7.04e-7s internal profiling</pre>

<p>We're still the same fraction better, but the numbers have increased pretty drastically. I know which one I'd rather rely on for crunching large life patterns.</p>

<p>These aren't all the optimizations we could pull, by the way. If we wanted to do better, we could inline <code>moore-neighborhood</code> within <code>compute-frequencies</code>, and we could prevent it from consing nearly as much by using its integers directly rather than allocating a fresh list of <code>cons</code>es every time. A particular optimization we could do that would be relatively difficult with the grid approach would be to check for a barren world before each step; if we ever get an empty set as a result, we can return immediately rather than spinning wheels until we reach the end of our step counter. It would be easy for us to do, since we just need to check <code>(= 0 (hash-table-count cells))</code>, whereas doing it the obvious way would add another traversal of the corpus per step for the already much slower traditional approach.</p>

<p>Ok. I'm going to sleep. I was <i>going</i> to do a similar writeup using the <a href=\"http://www.haskell.org/ghc/docs/7.0.1/html/users_guide/profiling.html\">Haskell profiler</a>, but that took a lot out of me. Hopefully, you've learned something from all this. Fresh code up at <a href=\"https://github.com/Inaimathi/life\">my Life github</a>. Feel free to beat those numbers. I'd be particularly interested if someone wanted to do some micro-optimization on the same problem and put forth an explanatory article.</p>

<hr />
<h5>Footnotes</h5>
<p>1 - <a href=\"#note-Thu-Dec-13-133118EST-2012\" name=\"foot-Thu-Dec-13-133118EST-2012\">[back]</a> - Which is a huge topic in its own right, and involves things like hand-optimizing memory cache interactions for minimum fall-through and various other low-level, machine oriented optimizations.</p>

<p>2 - <a href=\"#note-Thu-Dec-13-133125EST-2012\" name=\"foot-Thu-Dec-13-133125EST-2012\">[back]</a> - We're optimizing for time because space tends to be cheap, and running things fast is fun.</p>
"))
((5202 3723 599868000) :INSERT (115 :POSTED 3564363600))
((5202 3723 599870000) :INSERT (115 :TAG :COMMON-LISP))
((5202 3723 599871000) :INSERT (115 :TAG :EMACS))
((5202 3723 600511000) :INSERT (116 :TITLE "Not Optimizing Haskell"))
((5202 3723 600516000) :INSERT (116 :FILE "not-optimizing-haskell.html"))
((5202 3723 600518000) :INSERT (116 :EDITED 3610022331))
((5202 3723 600520000) :INSERT
 (116 :BODY
  "<p>The flu can go fuck itself in its nonexistent, viral ass. This shit will not beat me. While I run down the clock, I'm profiling more things to make me feel a bit better.</p>

<p>First off, neither GHCi nor Haskell mode doesn't come with an interactive profiler. Or, as far as I can tell, any utilities to make batch profiling any easier. The way you <a href=\"http://www.haskell.org/ghc/docs/7.0.1/html/users_guide/profiling.html\">profile Haskell programs</a> is by installing the profiling extensions</p> 

<pre>apt-get install libghc-mtl-dev libghc-mtl-prof</pre>

<p>compiling your program with the profiling flags on</p>

<pre>ghc -prof -auto-all -o outFile yourFile.hs</pre>

<p>and then running the result with some different profiling flags.</p>

<pre>./outfile +RTS -p</pre>

<p>That should create a file called <code>outFile.prof</code> in the directory you just ran it from, and that file will contain a well formatted couple of tables that will tell you where your space and time cost-centers are.</p>

<p>So... lets automate this.</p>

<pre>(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">ha-custom-profile-buffer</span> ()
  (interactive)
  (find-file-other-window 
   (ha-custom-profile-haskell-file (buffer-file-name))))

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">ha-custom-profile-haskell-file</span> (abs-filename)
  <span style=\"color: #8b2252;\">\"Compiles the given file with profiling, 
runs it with the +RTS -p flags and returns
the filename of the profiling output.\"</span>
  (<span style=\"color: #ff0000; font-weight: bold;\">assert</span> (string= <span style=\"color: #8b2252;\">\"hs\"</span> (file-name-extension abs-filename)))
  (<span style=\"color: #a020f0;\">let*</span> ((f-name (file-name-sans-extension abs-filename))
         (tmp (make-temp-file f-name))
         (tmp-name (file-name-nondirectory tmp))
         (tmp-dir (file-name-directory tmp)))
    (message <span style=\"color: #8b2252;\">\"Compiling...\"</span>)
    (shell-command (format <span style=\"color: #8b2252;\">\"ghc -prof -auto-all -o %s '%s'\"</span> tmp abs-filename))
    (message <span style=\"color: #8b2252;\">\"Profiling...\"</span>)
    (shell-command (format <span style=\"color: #8b2252;\">\"%s./%s +RTS -p\"</span> tmp-dir tmp-name))
    (concat tmp-name <span style=\"color: #8b2252;\">\".prof\"</span>)))</pre>

<p>Those functions are both now part of my <a href=\"https://github.com/Inaimathi/emacs-utils/blob/master/ha-custom.el\">ha-custom</a> mode. The big one takes a Haskell file, compiles it to a tempfile with the appropriate flags, runs the result with the other appropriate flags, and returns the name of the profiling output file. The little function takes the current buffer and runs it through the big one, then opens the result in a new window. That should make it a bit easier to actually do the profiling.</p>

<h3>Actually Profiling Haskell</h3>

<p>We started with pretty much the same thing as the Lisp code. And, I'll strip the printing elements again for the purposes of this exercise; we're not interested in how inefficient it is to actually produce a grid based on our model of the world.</p>

<pre><span style=\"color: #a020f0;\">module</span> <span style=\"color: #228b22;\">Main</span> <span style=\"color: #a020f0;\">where</span>
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Data.List</span> (group, sort, concatMap)
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Data.Set</span>

<span style=\"color: #0000ff;\">lifeStep</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">Set</span> (<span style=\"color: #228b22;\">Int</span>, <span style=\"color: #228b22;\">Int</span>) <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Set</span> (<span style=\"color: #228b22;\">Int</span>, <span style=\"color: #228b22;\">Int</span>)
<span style=\"color: #0000ff;\">lifeStep</span> cells <span style=\"color: #a0522d;\">=</span> fromList [head g <span style=\"color: #a0522d;\">|</span> g <span style=\"color: #a0522d;\">&lt;-</span> grouped cells, viable g]
  <span style=\"color: #a020f0;\">where</span> grouped <span style=\"color: #a0522d;\">=</span> group <span style=\"color: #a0522d;\">.</span> sort <span style=\"color: #a0522d;\">.</span> concatMap neighbors <span style=\"color: #a0522d;\">.</span> toList
        neighbors (x, y) <span style=\"color: #a0522d;\">=</span> [(x<span style=\"color: #a0522d;\">+</span>dx, y<span style=\"color: #a0522d;\">+</span>dy) <span style=\"color: #a0522d;\">|</span> dx <span style=\"color: #a0522d;\">&lt;-</span> [<span style=\"color: #a0522d;\">-</span>1<span style=\"color: #a0522d;\">..</span>1], dy <span style=\"color: #a0522d;\">&lt;-</span> [<span style=\"color: #a0522d;\">-</span>1<span style=\"color: #a0522d;\">..</span>1], (dx,dy) <span style=\"color: #a0522d;\">/=</span> (0,0)]
        viable [<span style=\"color: #a020f0;\">_</span>,<span style=\"color: #a020f0;\">_</span>,<span style=\"color: #a020f0;\">_</span>] <span style=\"color: #a0522d;\">=</span> <span style=\"color: #228b22;\">True</span>
        viable [c,<span style=\"color: #a020f0;\">_</span>] <span style=\"color: #a0522d;\">=</span> c <span style=\"color: #a0522d;\">`member`</span> cells
        viable <span style=\"color: #a020f0;\">_</span> <span style=\"color: #a0522d;\">=</span> <span style=\"color: #228b22;\">False</span>

<span style=\"color: #0000ff;\">runLife</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">Int</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Set</span> (<span style=\"color: #228b22;\">Int</span>, <span style=\"color: #228b22;\">Int</span>) <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Set</span> (<span style=\"color: #228b22;\">Int</span>, <span style=\"color: #228b22;\">Int</span>)
<span style=\"color: #0000ff;\">runLife</span> steps cells <span style=\"color: #a0522d;\">=</span> rec (steps <span style=\"color: #a0522d;\">-</span> 1) cells
  <span style=\"color: #a020f0;\">where</span> rec 0 cells <span style=\"color: #a0522d;\">=</span> cells
        rec s cells <span style=\"color: #a0522d;\">=</span> rec (s <span style=\"color: #a0522d;\">-</span> 1) <span style=\"color: #a0522d;\">$!</span> lifeStep cells

<span style=\"color: #0000ff;\">glider</span> <span style=\"color: #a0522d;\">=</span> fromList [(1, 0), (2, 1), (0, 2), (1, 2), (2, 2)]
<span style=\"color: #0000ff;\">blinker</span> <span style=\"color: #a0522d;\">=</span> fromList [(1, 0), (1, 1), (1, 2)]
<span style=\"color: #0000ff;\">gosperGliderGun</span> <span style=\"color: #a0522d;\">=</span> fromList [(24, 0), (22, 1), (24, 1), (12, 2), (13, 2), (20, 2), (21, 2), (34, 2), (35, 2), (11, 3), (15, 3), (20, 3), (21, 3), (34, 3), (35, 3), (0, 4), (1, 4), (10, 4), (16, 4), (20, 4), (21, 4), (0, 5), (1, 5), (10, 5), (14, 5), (16, 5), (17, 5), (22, 5), (24, 5), (10, 6), (16, 6), (24, 6), (11, 7), (15, 7), (12, 8), (13, 8)]

<span style=\"color: #0000ff;\">main</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">IO</span> <span style=\"color: #228b22;\">()</span>
<span style=\"color: #0000ff;\">main</span> <span style=\"color: #a0522d;\">=</span> putStrLn <span style=\"color: #a0522d;\">.</span> show <span style=\"color: #a0522d;\">$</span> runLife 5000 gosperGliderGun</pre>

<p>It's <i>almost</i> the same, actually, because we determine frequencies differently. Instead of doing a single traversal of the corpus, we do what <i><b>looks like</b></i> a much more expensive operation composing <code>group</code> onto <code>sort</code> onto <code>concatMap neighbors</code>. In a book, that would be called \"foreshadowing\".</p>

<p>A first run-through of <code>M-x ha-custom-profile-buffer</code> gives us</p>

<pre>        Fri Dec 14 21:48 2012 Time and Allocation Profiling Report  (Final)

           life21765U60 +RTS -p -RTS

        total time  =       30.15 secs   (30153 ticks @ 1000 us, 1 processor)
        total alloc = 24,382,856,840 bytes  (excludes profiling overheads)

COST CENTRE        MODULE    <span style=\"color: #a0522d;\">%time</span> <span style=\"color: #a0522d;\">%alloc</span>

lifeStep.grouped   Main       57.4   53.6
lifeStep.neighbors Main       24.7   40.9
lifeStep           Main       11.4    5.5
lifeStep.viable    Main        6.5    0.0


                                                                    individual     inherited
COST CENTRE               MODULE                  no.     entries  <span style=\"color: #a0522d;\">%time</span> <span style=\"color: #a0522d;\">%alloc</span>   <span style=\"color: #a0522d;\">%time</span> <span style=\"color: #a0522d;\">%alloc</span>

MAIN                      MAIN                     46           0    0.0    0.0   100.0  100.0
 CAF                      Main                     91           0    0.0    0.0   100.0  100.0
  gosperGliderGun         Main                     97           1    0.0    0.0     0.0    0.0
  main                    Main                     92           1    0.0    0.0   100.0  100.0
   runLife                Main                     93           1    0.0    0.0   100.0  100.0
    runLife.rec           Main                     94        5000    0.0    0.0   100.0  100.0
     lifeStep             Main                     95        4999   11.4    5.5   100.0  100.0
      lifeStep.viable     Main                     99    10002308    6.5    0.0     6.5    0.0
      lifeStep.grouped    Main                     96        4999   57.4   53.6    82.1   94.5
       lifeStep.neighbors Main                     98     2314620   24.7   40.9    24.7   40.9
 CAF                      Data.Set                 90           0    0.0    0.0     0.0    0.0
 CAF                      GHC.Conc.Signal          87           0    0.0    0.0     0.0    0.0
 CAF                      GHC.IO.Handle.FD         80           0    0.0    0.0     0.0    0.0
 CAF                      GHC.IO.Encoding          74           0    0.0    0.0     0.0    0.0
 CAF                      GHC.IO.Encoding.Iconv    62           0    0.0    0.0     0.0    0.0</pre>

<p>We're actually only interested in that small table, so I'll omit the exhaustive one for the future. Basically, yes. <code>grouped</code> and <code>neighbors</code> are the resource-hogs here. Even still, this compares favorably against the Common Lisp infinite plane version; both in terms of program complexity and in terms of runtime. Not to mention that the initial CL version actually crashed at ~3000 iterations because it doesn't like tail recursion.</p>

<p>Anyhow, the first thing we're doing this time is limiting the size of the world.</p>

<pre><span style=\"color: #0000ff;\">inRange</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">Ord</span> a <span style=\"color: #a0522d;\">=&gt;</span> a <span style=\"color: #a0522d;\">-&gt;</span> a <span style=\"color: #a0522d;\">-&gt;</span> a <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Bool</span>
<span style=\"color: #0000ff;\">inRange</span> low n high <span style=\"color: #a0522d;\">=</span> low <span style=\"color: #a0522d;\">&lt;</span> n <span style=\"color: #a0522d;\">&amp;&amp;</span> n <span style=\"color: #a0522d;\">&lt;</span> high

<span style=\"color: #0000ff;\">lifeStep</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">Int</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Set</span> (<span style=\"color: #228b22;\">Int</span>, <span style=\"color: #228b22;\">Int</span>) <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Set</span> (<span style=\"color: #228b22;\">Int</span>, <span style=\"color: #228b22;\">Int</span>)
<span style=\"color: #0000ff;\">lifeStep</span> worldSize cells <span style=\"color: #a0522d;\">=</span> fromList [head g <span style=\"color: #a0522d;\">|</span> g <span style=\"color: #a0522d;\">&lt;-</span> grouped cells, viable g]
  <span style=\"color: #a020f0;\">where</span> grouped <span style=\"color: #a0522d;\">=</span> group <span style=\"color: #a0522d;\">.</span> sort <span style=\"color: #a0522d;\">.</span> concatMap neighbors <span style=\"color: #a0522d;\">.</span> toList
        neighbors (x, y) <span style=\"color: #a0522d;\">=</span> [(x<span style=\"color: #a0522d;\">+</span>dx, y<span style=\"color: #a0522d;\">+</span>dy) <span style=\"color: #a0522d;\">|</span> dx <span style=\"color: #a0522d;\">&lt;-</span> [<span style=\"color: #a0522d;\">-</span>1<span style=\"color: #a0522d;\">..</span>1], dy <span style=\"color: #a0522d;\">&lt;-</span> [<span style=\"color: #a0522d;\">-</span>1<span style=\"color: #a0522d;\">..</span>1], 
                            (dx,dy) <span style=\"color: #a0522d;\">/=</span> (0,0), inSize (dx<span style=\"color: #a0522d;\">+</span>x) (dy<span style=\"color: #a0522d;\">+</span>y)]
        inSize x y <span style=\"color: #a0522d;\">=</span> inR x worldSize <span style=\"color: #a0522d;\">&amp;&amp;</span> inR y worldSize
        inR <span style=\"color: #a0522d;\">=</span> inRange 0
        viable [<span style=\"color: #a020f0;\">_</span>,<span style=\"color: #a020f0;\">_</span>,<span style=\"color: #a020f0;\">_</span>] <span style=\"color: #a0522d;\">=</span> <span style=\"color: #228b22;\">True</span>
        viable [c,<span style=\"color: #a020f0;\">_</span>] <span style=\"color: #a0522d;\">=</span> c <span style=\"color: #a0522d;\">`member`</span> cells
        viable <span style=\"color: #a020f0;\">_</span> <span style=\"color: #a0522d;\">=</span> <span style=\"color: #228b22;\">False</span>

<span style=\"color: #0000ff;\">runLife</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">Int</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Int</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Set</span> (<span style=\"color: #228b22;\">Int</span>, <span style=\"color: #228b22;\">Int</span>) <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Set</span> (<span style=\"color: #228b22;\">Int</span>, <span style=\"color: #228b22;\">Int</span>)
<span style=\"color: #0000ff;\">runLife</span> worldSize steps cells <span style=\"color: #a0522d;\">=</span> rec (steps <span style=\"color: #a0522d;\">-</span> 1) cells
  <span style=\"color: #a020f0;\">where</span> rec 0 cells <span style=\"color: #a0522d;\">=</span> cells
        rec s cells <span style=\"color: #a0522d;\">=</span> rec (s <span style=\"color: #a0522d;\">-</span> 1) <span style=\"color: #a0522d;\">$!</span> lifeStep worldSize cells

<span style=\"color: #0000ff;\">main</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">IO</span> <span style=\"color: #228b22;\">()</span>
<span style=\"color: #0000ff;\">main</span> <span style=\"color: #a0522d;\">=</span> putStrLn <span style=\"color: #a0522d;\">.</span> show <span style=\"color: #a0522d;\">$</span> runLife 50 5000 gosperGliderGun</pre>

<p>That's gonna do the same thing it did yesterday; prevent massive, processor-fucking overpopulation.</p>

<pre>        Fri Dec 14 22:03 2012 Time and Allocation Profiling Report  (Final)

           life21765GEE +RTS -p -RTS

        total time  =        1.61 secs   (1608 ticks @ 1000 us, 1 processor)
        total alloc = 1,132,473,192 bytes  (excludes profiling overheads)

COST CENTRE        MODULE  <span style=\"color: #a0522d;\">%time</span> <span style=\"color: #a0522d;\">%alloc</span>

lifeStep.grouped   Main     46.5   41.2
lifeStep.neighbors Main     23.4   37.8
inRange            Main     11.1   11.9
lifeStep           Main      6.2    3.0
lifeStep.viable    Main      6.1    0.0
lifeStep.inSize    Main      3.6    6.0
lifeStep.inR       Main      2.9    0.0</pre>

<p>Granted, <code>inRange</code> is on the map as a cost center, but this shaved ~28 seconds off the final run time, I'm gonna call that fair enough. Given the numbers we were posting yesterday, I'm almost tempted to call this good enough. Lets see where it all goes, shall we? Step size of</p>

<h3>50</h3>

<pre>        Fri Dec 14 22:06 2012 Time and Allocation Profiling Report  (Final)

           life21765TOK +RTS -p -RTS

        total time  =        0.03 secs   (29 ticks @ 1000 us, 1 processor)
        total alloc =  18,129,192 bytes  (excludes profiling overheads)

COST CENTRE        MODULE  <span style=\"color: #a0522d;\">%time</span> <span style=\"color: #a0522d;\">%alloc</span>

lifeStep.grouped   Main     55.2   42.0
lifeStep.neighbors Main     17.2   36.9
inRange            Main     13.8   11.7
main               Main      3.4    0.1
lifeStep           Main      3.4    3.2
lifeStep.inSize    Main      3.4    5.8
lifeStep.inR       Main      3.4    0.0</pre>

<p>We've seen 5000 already, so</p>

<h3>50 000</h3>

<pre>        Fri Dec 14 22:07 2012 Time and Allocation Profiling Report  (Final)

           life21765gYQ +RTS -p -RTS

        total time  =       15.94 secs   (15942 ticks @ 1000 us, 1 processor)
        total alloc = 11,262,873,192 bytes  (excludes profiling overheads)

COST CENTRE        MODULE    <span style=\"color: #a0522d;\">%time</span> <span style=\"color: #a0522d;\">%alloc</span>

lifeStep.grouped   Main       45.3   41.2
lifeStep.neighbors Main       23.0   37.8
inRange            Main       12.7   11.9
lifeStep           Main        6.6    3.0
lifeStep.viable    Main        5.9    0.0
lifeStep.inSize    Main        3.8    6.0
lifeStep.inR       Main        2.4    0.0</pre>

<h3>5 000 000</h3>

<pre>        Fri Dec 14 22:37 2012 Time and Allocation Profiling Report  (Final)

           big +RTS -p -RTS

        total time  =     1594.43 secs   (1594429 ticks @ 1000 us, 1 processor)
        total alloc = 1,125,606,873,896 bytes  (excludes profiling overheads)

COST CENTRE        MODULE    <span style=\"color: #a0522d;\">%time</span> <span style=\"color: #a0522d;\">%alloc</span>

lifeStep.grouped   Main       45.4   41.2
lifeStep.neighbors Main       23.6   37.8
inRange            Main       12.5   11.9
lifeStep           Main        6.2    3.0
lifeStep.viable    Main        5.8    0.0
lifeStep.inSize    Main        3.6    6.0
lifeStep.inR       Main        2.6    0.0</pre>

<p>It's funny, after just clipping the board, we start getting <i>much</i> better numbers with unoptimized Haskell than we saw with unoptimized Common Lisp. That's not really much of a victory, since optimized lisp <i>was</i> handily beating the numbers we're putting down today, but it's also not the showdown I want to see. I want to know how optimized Haskell stacks up, and I want to know how Gridless Life stacks up to a gridded implementation. Back to <a href=\"http://rosettacode.org/wiki/Conway%27s_Game_of_Life#Haskell\">Rosetta Code</a>, I guess. Second verse same as the first; added a grid-appropriate gun<a href=\"#foot-Fri-Dec-14-232656EST-2012\" name=\"note-Fri-Dec-14-232656EST-2012\">[1]</a> and stripped all but the final printing code.</p>

<pre><span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Data.Array.Unboxed</span>
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Data.List</span> (unfoldr) 

<span style=\"color: #a020f0;\">type</span> <span style=\"color: #228b22;\">Grid</span> <span style=\"color: #a0522d;\">=</span> <span style=\"color: #228b22;\">UArray</span> (<span style=\"color: #228b22;\">Int</span>,<span style=\"color: #228b22;\">Int</span>) <span style=\"color: #228b22;\">Bool</span>
 <span style=\"color: #b22222;\">-- </span><span style=\"color: #b22222;\">The grid is indexed by (y, x).
</span> 
<span style=\"color: #0000ff;\">life</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">Int</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Int</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Grid</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Grid</span>
<span style=\"color: #b22222;\">{- </span><span style=\"color: #b22222;\">Returns the given Grid advanced by one generation. -}</span>
<span style=\"color: #0000ff;\">life</span> w h old <span style=\"color: #a0522d;\">=</span>
    listArray b (map f (range b))
  <span style=\"color: #a020f0;\">where</span> b<span style=\"color: #a0522d;\">@</span>((y1,x1),(y2,x2)) <span style=\"color: #a0522d;\">=</span> bounds old
        f (y, x) <span style=\"color: #a0522d;\">=</span> ( c <span style=\"color: #a0522d;\">&amp;&amp;</span> (n <span style=\"color: #a0522d;\">==</span> 2 <span style=\"color: #a0522d;\">||</span> n <span style=\"color: #a0522d;\">==</span> 3) ) <span style=\"color: #a0522d;\">||</span> ( not c <span style=\"color: #a0522d;\">&amp;&amp;</span> n <span style=\"color: #a0522d;\">==</span> 3 )
          <span style=\"color: #a020f0;\">where</span> c <span style=\"color: #a0522d;\">=</span> get x y
                n <span style=\"color: #a0522d;\">=</span> count [get (x <span style=\"color: #a0522d;\">+</span> x') (y <span style=\"color: #a0522d;\">+</span> y') <span style=\"color: #a0522d;\">|</span>
                    x' <span style=\"color: #a0522d;\">&lt;-</span> [<span style=\"color: #a0522d;\">-</span>1, 0, 1], y' <span style=\"color: #a0522d;\">&lt;-</span> [<span style=\"color: #a0522d;\">-</span>1, 0, 1],
                    not (x' <span style=\"color: #a0522d;\">==</span> 0 <span style=\"color: #a0522d;\">&amp;&amp;</span> y' <span style=\"color: #a0522d;\">==</span> 0)]
 
        get x y <span style=\"color: #a0522d;\">|</span> x <span style=\"color: #a0522d;\">&lt;</span> x1 <span style=\"color: #a0522d;\">||</span> x <span style=\"color: #a0522d;\">&gt;</span> x2 <span style=\"color: #a0522d;\">=</span> <span style=\"color: #228b22;\">False</span>
                <span style=\"color: #a0522d;\">|</span> y <span style=\"color: #a0522d;\">&lt;</span> y1 <span style=\"color: #a0522d;\">||</span> y <span style=\"color: #a0522d;\">&gt;</span> y2 <span style=\"color: #a0522d;\">=</span> <span style=\"color: #228b22;\">False</span>
                <span style=\"color: #a0522d;\">|</span> otherwise       <span style=\"color: #a0522d;\">=</span> old <span style=\"color: #a0522d;\">!</span> (y, x)
 
<span style=\"color: #0000ff;\">count</span> <span style=\"color: #a0522d;\">::</span> [<span style=\"color: #228b22;\">Bool</span>] <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Int</span>
<span style=\"color: #0000ff;\">count</span> <span style=\"color: #a0522d;\">=</span> length <span style=\"color: #a0522d;\">.</span> filter id

<span style=\"color: #0000ff;\">grid</span> <span style=\"color: #a0522d;\">::</span> [<span style=\"color: #228b22;\">String</span>] <span style=\"color: #a0522d;\">-&gt;</span> (<span style=\"color: #228b22;\">Int</span>, <span style=\"color: #228b22;\">Int</span>, <span style=\"color: #228b22;\">Grid</span>)
<span style=\"color: #0000ff;\">grid</span> l <span style=\"color: #a0522d;\">=</span> (width, height, a)
  <span style=\"color: #a020f0;\">where</span> (width, height) <span style=\"color: #a0522d;\">=</span> (length <span style=\"color: #a0522d;\">$</span> head l, length l)
        a <span style=\"color: #a0522d;\">=</span> listArray ((1, 1), (height, width)) <span style=\"color: #a0522d;\">$</span> concatMap f l
        f <span style=\"color: #a0522d;\">=</span> map g
        g <span style=\"color: #8b2252;\">'.'</span> <span style=\"color: #a0522d;\">=</span> <span style=\"color: #228b22;\">False</span>
        g <span style=\"color: #a020f0;\">_</span>   <span style=\"color: #a0522d;\">=</span> <span style=\"color: #228b22;\">True</span>
 
<span style=\"color: #0000ff;\">printGrid</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">Int</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Grid</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">IO</span> <span style=\"color: #228b22;\">()</span>
<span style=\"color: #0000ff;\">printGrid</span> width <span style=\"color: #a0522d;\">=</span> mapM_ f <span style=\"color: #a0522d;\">.</span> split width <span style=\"color: #a0522d;\">.</span> elems
  <span style=\"color: #a020f0;\">where</span> f <span style=\"color: #a0522d;\">=</span> putStrLn <span style=\"color: #a0522d;\">.</span> map g
        g <span style=\"color: #228b22;\">False</span> <span style=\"color: #a0522d;\">=</span> <span style=\"color: #8b2252;\">'.'</span>
        g <span style=\"color: #a020f0;\">_</span>     <span style=\"color: #a0522d;\">=</span> <span style=\"color: #8b2252;\">'#'</span>
 
<span style=\"color: #0000ff;\">split</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">Int</span> <span style=\"color: #a0522d;\">-&gt;</span> [a] <span style=\"color: #a0522d;\">-&gt;</span> [[a]]
<span style=\"color: #0000ff;\">split</span> n <span style=\"color: #a0522d;\">=</span> takeWhile (not <span style=\"color: #a0522d;\">.</span> null) <span style=\"color: #a0522d;\">.</span> unfoldr (<span style=\"color: #228b22;\">Just</span> <span style=\"color: #a0522d;\">.</span> splitAt n)

<span style=\"color: #0000ff;\">gosperGliderGun</span> <span style=\"color: #a0522d;\">=</span> grid
    [<span style=\"color: #8b2252;\">\"........................#.........................\"</span>,
     <span style=\"color: #8b2252;\">\"......................#.#.........................\"</span>,
     <span style=\"color: #8b2252;\">\"............##......##............##..............\"</span>,
     <span style=\"color: #8b2252;\">\"...........#...#....##............##..............\"</span>,
     <span style=\"color: #8b2252;\">\"##........#.....#...##............................\"</span>,
     <span style=\"color: #8b2252;\">\"##........#...#.##....#.#.........................\"</span>,
     <span style=\"color: #8b2252;\">\"..........#.....#.......#.........................\"</span>,
     <span style=\"color: #8b2252;\">\"...........#...#..................................\"</span>,
     <span style=\"color: #8b2252;\">\"............##....................................\"</span>,
     <span style=\"color: #8b2252;\">\"..................................................\"</span>,
     <span style=\"color: #8b2252;\">\"..................................................\"</span>,
     <span style=\"color: #8b2252;\">\"..................................................\"</span>,
     <span style=\"color: #8b2252;\">\"..................................................\"</span>,
     <span style=\"color: #8b2252;\">\"..................................................\"</span>,
     <span style=\"color: #8b2252;\">\"..................................................\"</span>,
     <span style=\"color: #8b2252;\">\"..................................................\"</span>,
     <span style=\"color: #8b2252;\">\"..................................................\"</span>,
     <span style=\"color: #8b2252;\">\"..................................................\"</span>,
     <span style=\"color: #8b2252;\">\"..................................................\"</span>,
     <span style=\"color: #8b2252;\">\"..................................................\"</span>,
     <span style=\"color: #8b2252;\">\"..................................................\"</span>,
     <span style=\"color: #8b2252;\">\"..................................................\"</span>,
     <span style=\"color: #8b2252;\">\"..................................................\"</span>,
     <span style=\"color: #8b2252;\">\"..................................................\"</span>,
     <span style=\"color: #8b2252;\">\"..................................................\"</span>,
     <span style=\"color: #8b2252;\">\"..................................................\"</span>,
     <span style=\"color: #8b2252;\">\"..................................................\"</span>,
     <span style=\"color: #8b2252;\">\"..................................................\"</span>,
     <span style=\"color: #8b2252;\">\"..................................................\"</span>,
     <span style=\"color: #8b2252;\">\"..................................................\"</span>,
     <span style=\"color: #8b2252;\">\"..................................................\"</span>,
     <span style=\"color: #8b2252;\">\"..................................................\"</span>,
     <span style=\"color: #8b2252;\">\"..................................................\"</span>,
     <span style=\"color: #8b2252;\">\"..................................................\"</span>,
     <span style=\"color: #8b2252;\">\"..................................................\"</span>,
     <span style=\"color: #8b2252;\">\"..................................................\"</span>,
     <span style=\"color: #8b2252;\">\"..................................................\"</span>,
     <span style=\"color: #8b2252;\">\"..................................................\"</span>,
     <span style=\"color: #8b2252;\">\"..................................................\"</span>,
     <span style=\"color: #8b2252;\">\"..................................................\"</span>,
     <span style=\"color: #8b2252;\">\"..................................................\"</span>,
     <span style=\"color: #8b2252;\">\"..................................................\"</span>,
     <span style=\"color: #8b2252;\">\"..................................................\"</span>,
     <span style=\"color: #8b2252;\">\"..................................................\"</span>,
     <span style=\"color: #8b2252;\">\"..................................................\"</span>,
     <span style=\"color: #8b2252;\">\"..................................................\"</span>,
     <span style=\"color: #8b2252;\">\"..................................................\"</span>,
     <span style=\"color: #8b2252;\">\"..................................................\"</span>,
     <span style=\"color: #8b2252;\">\"..................................................\"</span>,
     <span style=\"color: #8b2252;\">\"..................................................\"</span>]

<span style=\"color: #0000ff;\">printLife</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">Int</span> <span style=\"color: #a0522d;\">-&gt;</span> (<span style=\"color: #228b22;\">Int</span>, <span style=\"color: #228b22;\">Int</span>, <span style=\"color: #228b22;\">Grid</span>) <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">IO</span> <span style=\"color: #228b22;\">()</span>
<span style=\"color: #0000ff;\">printLife</span> n (w, h, g) <span style=\"color: #a0522d;\">=</span> printGrid w <span style=\"color: #a0522d;\">.</span> last <span style=\"color: #a0522d;\">.</span> take n <span style=\"color: #a0522d;\">$</span> iterate (life w h) g
 
<span style=\"color: #0000ff;\">main</span> <span style=\"color: #a0522d;\">=</span> printLife 50 gosperGliderGun</pre>

<p>Ok, lets rev this sucker up.</p>

<h3>50</h3>

<pre>        Fri Dec 14 22:29 2012 Time and Allocation Profiling Report  (Final)

           life-grid21765tiW +RTS -p -RTS

        total time  =        1.32 secs   (1319 ticks @ 1000 us, 1 processor)
        total alloc = 891,555,608 bytes  (excludes profiling overheads)

COST CENTRE MODULE  <span style=\"color: #a0522d;\">%time</span> <span style=\"color: #a0522d;\">%alloc</span>

life.get    Main     59.9   50.4
life.f.n    Main     30.5   41.7
life.f      Main      3.9    3.0
count       Main      3.5    0.8
life        Main      2.0    3.9</pre>

<h3>5000</h3>

<pre>        Fri Dec 14 22:32 2012 Time and Allocation Profiling Report  (Final)

           life-grid217656sc +RTS -p -RTS

        total time  =      133.77 secs   (133771 ticks @ 1000 us, 1 processor)
        total alloc = 90,810,516,640 bytes  (excludes profiling overheads)

COST CENTRE MODULE  <span style=\"color: #a0522d;\">%time</span> <span style=\"color: #a0522d;\">%alloc</span>

life.get    Main     59.1   50.5
life.f.n    Main     31.3   41.8
count       Main      3.5    0.8
life.f      Main      3.4    3.0
life        Main      2.4    3.9</pre>

<p>That's ... almost sad enough not to be funny. Almost. Do note for the record that this is an <i>order of magnitude</i> up from the gridless version with the same inputs. And when you think about what's involved in each traversal of each corpus, it kind of becomes obvious why that is. The grids' corpus traversal <i>always</i> has 2500 stops. The gridless traversal is somewhere between 50 and 100 for a comparably populated board of the same size. 2500 is our <i>worst case</i>, and we'll probably never hit it.</p>

<p>I'm not even going to bother profiling the higher steps with this approach if 5000 took two minutes. I do still want to see how low we can go, and how we'd go about it.</p>

<p>The first thought I have is to try out that <code>iterate</code> approach, rather than recurring manually</p>

<pre><span style=\"color: #0000ff;\">runLife</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">Int</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Int</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Set</span> (<span style=\"color: #228b22;\">Int</span>, <span style=\"color: #228b22;\">Int</span>) <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Set</span> (<span style=\"color: #228b22;\">Int</span>, <span style=\"color: #228b22;\">Int</span>)
<span style=\"color: #0000ff;\">runLife</span> worldSize steps cells <span style=\"color: #a0522d;\">=</span> last <span style=\"color: #a0522d;\">.</span> take steps <span style=\"color: #a0522d;\">$</span> iterate (lifeStep worldSize) cells

<span style=\"color: #0000ff;\">main</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">IO</span> <span style=\"color: #228b22;\">()</span>
<span style=\"color: #0000ff;\">main</span> <span style=\"color: #a0522d;\">=</span> putStrLn <span style=\"color: #a0522d;\">.</span> show <span style=\"color: #a0522d;\">$</span> runLife 50 50000 gosperGliderGun</pre>

<p>Yes, it's more elegant. But will it blend?</p>

<pre>        Fri Dec 14 22:45 2012 Time and Allocation Profiling Report  (Final)

           life21765UId +RTS -p -RTS

        total time  =        0.01 secs   (12 ticks @ 1000 us, 1 processor)
        total alloc =  20,022,728 bytes  (excludes profiling overheads)

COST CENTRE      MODULE  <span style=\"color: #a0522d;\">%time</span> <span style=\"color: #a0522d;\">%alloc</span>

runLife          Main     41.7   36.0
lifeStep.grouped Main     33.3   52.1
lifeStep         Main     25.0   11.7</pre>

<p>Hm.</p>

<p>I'm gonna go ahead and put that one down to a profiler error, especially since running the same program in interactive mode confers no such magical acceleration. This does kind of call the process into question somewhat though...</p>

<p>Oh, well, I'm meant to be exploring. Lets pull the same incremental stuff we did with CL yesterday. Firstly, we're already using <code>Set</code> here, so the <code>memer</code> check is already as tight as it's going to get. Our last valid profiler ping told us that <code>lifeStep.grouped</code> is where the big costs are paid, so lets see if we can't reduce them somewhat.</p>

<pre><span style=\"color: #a020f0;\">import</span> <span style=\"color: #a020f0;\">qualified</span> <span style=\"color: #228b22;\">Data.Map</span> <span style=\"color: #a020f0;\">as</span> <span style=\"color: #228b22;\">Map</span> 
  (<span style=\"color: #228b22;\">Map</span>, lookup, insert, adjust, delete, fromList, toList)

<span style=\"color: #0000ff;\">frequencies</span> <span style=\"color: #a0522d;\">::</span> [(<span style=\"color: #228b22;\">Int</span>, <span style=\"color: #228b22;\">Int</span>)] <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Map.Map</span> (<span style=\"color: #228b22;\">Int</span>, <span style=\"color: #228b22;\">Int</span>) <span style=\"color: #228b22;\">Int</span>
<span style=\"color: #0000ff;\">frequencies</span> list <span style=\"color: #a0522d;\">=</span> rec list <span style=\"color: #a0522d;\">$</span> <span style=\"color: #228b22;\">Map</span><span style=\"color: #a0522d;\">.</span>fromList <span style=\"color: #228b22;\">[]</span>
  <span style=\"color: #a020f0;\">where</span> inc <span style=\"color: #a0522d;\">=</span> <span style=\"color: #228b22;\">Map</span><span style=\"color: #a0522d;\">.</span>adjust (<span style=\"color: #a0522d;\">+</span>1)
        rec <span style=\"color: #228b22;\">[]</span> m <span style=\"color: #a0522d;\">=</span> m
        rec (cell<span style=\"color: #228b22;\">:</span>rest) m <span style=\"color: #a0522d;\">=</span> rec rest newM
          <span style=\"color: #a020f0;\">where</span> newM <span style=\"color: #a0522d;\">=</span> <span style=\"color: #a020f0;\">if</span> <span style=\"color: #228b22;\">Nothing</span> <span style=\"color: #a0522d;\">==</span> <span style=\"color: #228b22;\">Map</span><span style=\"color: #a0522d;\">.</span>lookup cell m
                       <span style=\"color: #a020f0;\">then</span> <span style=\"color: #228b22;\">Map</span><span style=\"color: #a0522d;\">.</span>insert cell 1 m
                       <span style=\"color: #a020f0;\">else</span> inc cell m

<span style=\"color: #0000ff;\">lifeStep</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">Int</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Set</span> (<span style=\"color: #228b22;\">Int</span>, <span style=\"color: #228b22;\">Int</span>) <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Set</span> (<span style=\"color: #228b22;\">Int</span>, <span style=\"color: #228b22;\">Int</span>)
<span style=\"color: #0000ff;\">lifeStep</span> worldSize cells <span style=\"color: #a0522d;\">=</span> fromList [fst g <span style=\"color: #a0522d;\">|</span> g <span style=\"color: #a0522d;\">&lt;-</span> grouped cells, viable g]
  <span style=\"color: #a020f0;\">where</span> grouped <span style=\"color: #a0522d;\">=</span> <span style=\"color: #228b22;\">Data.List</span><span style=\"color: #a0522d;\">.</span>filter viable <span style=\"color: #a0522d;\">.</span> <span style=\"color: #228b22;\">Map</span><span style=\"color: #a0522d;\">.</span>toList <span style=\"color: #a0522d;\">.</span> frequencies <span style=\"color: #a0522d;\">.</span> concatMap neighbors <span style=\"color: #a0522d;\">.</span> toList
        neighbors (x, y) <span style=\"color: #a0522d;\">=</span> [(x<span style=\"color: #a0522d;\">+</span>dx, y<span style=\"color: #a0522d;\">+</span>dy) <span style=\"color: #a0522d;\">|</span> dx <span style=\"color: #a0522d;\">&lt;-</span> [<span style=\"color: #a0522d;\">-</span>1<span style=\"color: #a0522d;\">..</span>1], dy <span style=\"color: #a0522d;\">&lt;-</span> [<span style=\"color: #a0522d;\">-</span>1<span style=\"color: #a0522d;\">..</span>1], 
                            (dx,dy) <span style=\"color: #a0522d;\">/=</span> (0,0), inSize (dx<span style=\"color: #a0522d;\">+</span>x) (dy<span style=\"color: #a0522d;\">+</span>y)]
        inSize x y <span style=\"color: #a0522d;\">=</span> inR x worldSize <span style=\"color: #a0522d;\">&amp;&amp;</span> inR y worldSize
        inR <span style=\"color: #a0522d;\">=</span> inRange 0
        viable (<span style=\"color: #a020f0;\">_</span>,3) <span style=\"color: #a0522d;\">=</span> <span style=\"color: #228b22;\">True</span>
        viable (c,2) <span style=\"color: #a0522d;\">=</span> c <span style=\"color: #a0522d;\">`member`</span> cells
        viable <span style=\"color: #a020f0;\">_</span> <span style=\"color: #a0522d;\">=</span> <span style=\"color: #228b22;\">False</span></pre>

<p>We've added a <code>Map</code> of frequencies, rather than doing the naive <code>group . sort</code> thing. We've also had to tweak viable just a bit to accomodate.</p>

<pre>        Fri Dec 14 22:54 2012 Time and Allocation Profiling Report  (Final)

           life21765ucp +RTS -p -RTS

        total time  =        2.41 secs   (2406 ticks @ 1000 us, 1 processor)
        total alloc = 1,216,439,760 bytes  (excludes profiling overheads)

COST CENTRE          MODULE    <span style=\"color: #a0522d;\">%time</span> <span style=\"color: #a0522d;\">%alloc</span>

frequencies.rec.newM Main       41.2   17.4
lifeStep.neighbors   Main       16.6   35.2
frequencies.inc      Main       12.4   12.2
lifeStep.viable      Main        9.4    4.7
inRange              Main        8.1   11.1
lifeStep.grouped     Main        3.4    8.2
lifeStep             Main        3.4    2.8
lifeStep.inSize      Main        2.3    5.6
lifeStep.inR         Main        1.4    0.0
frequencies.rec      Main        1.3    2.8</pre>

<p>That's ... hm. Actually an increase of about a second. Maybe it does comparatively better on bigger data-sets?</p>

<pre><span style=\"color: #0000ff;\">main</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">IO</span> <span style=\"color: #228b22;\">()</span>
<span style=\"color: #0000ff;\">main</span> <span style=\"color: #a0522d;\">=</span> putStrLn <span style=\"color: #a0522d;\">.</span> show <span style=\"color: #a0522d;\">$</span> runLife 50 50000 gosperGliderGun</pre>

<pre>        Fri Dec 14 22:57 2012 Time and Allocation Profiling Report  (Final)

           life217657mv +RTS -p -RTS

        total time  =       23.96 secs   (23961 ticks @ 1000 us, 1 processor)
        total alloc = 12,100,319,760 bytes  (excludes profiling overheads)

COST CENTRE          MODULE    <span style=\"color: #a0522d;\">%time</span> <span style=\"color: #a0522d;\">%alloc</span>

frequencies.rec.newM Main       39.7   17.4
lifeStep.neighbors   Main       16.0   35.2
frequencies.inc      Main       13.3   12.2
lifeStep.viable      Main        9.5    4.7
inRange              Main        8.6   11.1
lifeStep.grouped     Main        3.6    8.2
lifeStep             Main        3.4    2.8
lifeStep.inSize      Main        2.6    5.6
lifeStep.inR         Main        1.8    0.0
frequencies.rec      Main        1.4    2.8</pre>

<p>Nope. It actually does comparatively worse.</p>

<p>Hmmm.</p>

<p>I'm going to cut it here for now. I think I've done enough damage. I won't be putting the latest up<a href=\"#foot-Fri-Dec-14-232729EST-2012\" name=\"note-Fri-Dec-14-232729EST-2012\">[2]</a> for obvious reasons. Yes, I peeked ahead, which is why I knew this particular optimization wouldn't work in Haskell early enough to foreshadow it, but I still wanted to formalize my thoughts about it.</p>

<p>It's hard not to learn something from playing with a languages' profiler. This experience tells me that I might have the wrong model in my head, or it might be that predicting where a traversal will happen is a lot more difficult in lazy languages, <i>or</i>, as I suspect from the latest profiler readouts, it might be that a Haskell <code>Map</code>s' <code>lookup</code> speed isn't constant time. The reason I suspect this is that some of our biggest cost centers are now <code>frequencies.rec.newM</code> (which does a <code>Map.lookup</code> each call) and <code>frequencies.inc</code> (which manipulates a particular element of a <code>Map</code>, so I assume a lookup is part of it).</p>

<p>I'm off to read up on Haskell data structures and test these hypotheses.</p>

<p>Oh. And heal up.</p>

<hr />
<h5>Footnotes</h5>
<p>1 - <a href=\"#note-Fri-Dec-14-232656EST-2012\" name=\"foot-Fri-Dec-14-232656EST-2012\">[back]</a> -  (by the way, this makes clear that whatever the performance comparisons come down to, the gridless version has a more elegant notation)</p>

<p>2 - <a href=\"#note-Fri-Dec-14-232729EST-2012\" name=\"foot-Fri-Dec-14-232729EST-2012\">[back]</a> -  (though the limited-size version and the gridded competitor will be checked in)</p>
"))
((5202 3723 600842000) :INSERT (116 :POSTED 3564450000))
((5202 3723 600843000) :INSERT (116 :TAG :ELISP))
((5202 3723 600845000) :INSERT (116 :TAG :HASKELL))
((5202 3723 601270000) :INSERT (117 :TITLE "Angular Reflections"))
((5202 3723 601275000) :INSERT (117 :FILE "angular-reflections.html"))
((5202 3723 601277000) :INSERT (117 :EDITED 3610022331))
((5202 3723 601278000) :INSERT
 (117 :BODY
  "<p>I've been working with <a href=\"http://angularjs.org/\">Angular.js</a> for the past little while, both on <a href=\"https://github.com/Inaimathi/web-mote\">Web-Mote</a> (still listed as a Perl project for some reason) and various work projects. Overall, the impression is very good. For the most part, the Angular approach saves a lot of lines and cycles over <a href=\"http://jquery.com/\">jQuery</a>-style DOM-traversal and manipulation. It <i>always</i> saves a lot of lines over Handlebars-style HTML templating, which was honestly a bit of a surprise at first. Proper routing is slightly more annoying than its backbone.js counterpart, but forces you to break your app out into discrete, composeable pieces, which seems like it would help you scale up down the line.</p>

<p>There are a couple of small places where DOM-traversal seems to be the easier way forward<a href=\"#foot-Thu-Dec-27-100616EST-2012\" name=\"note-Thu-Dec-27-100616EST-2012\">[1]</a>, and there's one omission made by the Angular guys<a href=\"#foot-Thu-Dec-27-100622EST-2012\" name=\"note-Thu-Dec-27-100622EST-2012\">[2]</a>, but otherwise, I can heartily recommend the library, even after initial frustration.</p>

<p>The big perspective change you need to come to grips with is the shift from imperative/functional-ish programming to a model-centric, <a href=\"http://en.wikipedia.org/wiki/Reactive_programming\">reactive</a> approach. Using plain jQuery, you might define a dynamic list as a <code>$.each/append</code> call wrapped in a <code>render</code> method somewhere. You might define the template manually in your js code if it's simple enough, or do it using <a href=\"http://handlebarsjs.com/\">Handlebars</a> or a similar HTML-templating if it's more involved. If you needed to collect the contents/order of the list later, you traverse the DOM and pull out the chunks you need.</p>

<p>It's not an unreasonable way of going about things, but Angular does it better; the same task is done by using the HTML-DSL to describe the relationship of a model (a literal JS list of objects) to the markup, and then populating that model. The framework reactively updates the DOM whenever model changes occur. Later, when you need the data back, you don't need to traverse anything. You just send the model out to wherever it needs to go.</p>

<p>Lets go through some before and after shots of web-mote for illustrative purposes. Specifically, lets take a look at the controls, since that's the simpler piece. Incidentally, I'm not claiming that this is the most elegant code either before or after. I just want to show you the structural and philosophical differences between approaches.</p>

<h3>Before</h3>

<p>First, the relevant HTML markup</p>

<pre>...

&lt;<span style=\"color: #0000ff;\">script</span> <span style=\"color: #a0522d;\">id</span>=<span style=\"color: #8b2252;\">\"tmp-control\"</span> <span style=\"color: #a0522d;\">type</span>=<span style=\"color: #8b2252;\">\"text/x-handlebars-template\"</span>&gt;
  &lt;<span style=\"color: #0000ff;\">li</span> <span style=\"color: #a0522d;\">class</span>=<span style=\"color: #8b2252;\">\"{{cmd}}\"</span>&gt;
    &lt;<span style=\"color: #0000ff;\">button</span> <span style=\"color: #a0522d;\">class</span>=<span style=\"color: #8b2252;\">\"btn\"</span> <span style=\"color: #a0522d;\">onclick</span>=<span style=\"color: #8b2252;\">\"mote.command('{{cmd}}');\"</span>
            {{#if held}}
            <span style=\"color: #a0522d;\">onmousedown</span>=<span style=\"color: #8b2252;\">\"mote.hold('{{cmd}}');\"</span> <span style=\"color: #a0522d;\">onmouseup</span>=<span style=\"color: #8b2252;\">\"mote.release();\"</span> <span style=\"color: #a0522d;\">onmouseout</span>=<span style=\"color: #8b2252;\">\"mote.release();\"</span>
            {{/if}}&gt;
      &lt;<span style=\"color: #0000ff;\">i</span> <span style=\"color: #a0522d;\">class</span>=<span style=\"color: #8b2252;\">\"icon-{{cmd}}\"</span>&gt;&lt;/<span style=\"color: #0000ff;\">i</span>&gt;
    &lt;/<span style=\"color: #0000ff;\">button</span>&gt;
  &lt;/<span style=\"color: #0000ff;\">li</span>&gt;
&lt;/<span style=\"color: #0000ff;\">script</span>&gt;

&lt;<span style=\"color: #0000ff;\">script</span> <span style=\"color: #a0522d;\">id</span>=<span style=\"color: #8b2252;\">\"tmp-control-block\"</span> <span style=\"color: #a0522d;\">type</span>=<span style=\"color: #8b2252;\">\"text/x-handlebars-template\"</span>&gt;
  &lt;<span style=\"color: #0000ff;\">ul</span>&gt;
    {{#each this}}
    {{#control-button this}}{{/control-button}}
    {{/each}}
  &lt;/<span style=\"color: #0000ff;\">ul</span>&gt;
&lt;/<span style=\"color: #0000ff;\">script</span>&gt;

...

&lt;<span style=\"color: #0000ff;\">div</span> <span style=\"color: #a0522d;\">id</span>=<span style=\"color: #8b2252;\">\"controls\"</span>&gt;&lt;/<span style=\"color: #0000ff;\">div</span>&gt;

...</pre>

<p>The target element gets its own <code>id</code> so that we can refer to it from our jQuery code. The <code>script</code> blocks are <a href=\"http://handlebarsjs.com/\">Handlebars</a> template declarations. I've elided the rest of the HTML markup because it's all include/template/meta overhead, but you can see it in <a href=\"https://github.com/Inaimathi/web-mote/tree/f349e240ac88f0344de8b8a3a8738e08a8aa9c29/static\">the appropriate Web-Mote commit</a> if you are so inclined.</p>

<p>Here are the relevant JS declarations</p>

<pre>Handlebars.registerHelper(<span style=\"color: #8b2252;\">\"control-button\"</span>, <span style=\"color: #a020f0;\">function</span> (<span style=\"color: #a0522d;\">ctrl</span>) {
    <span style=\"color: #a020f0;\">return</span> <span style=\"color: #a020f0;\">new</span> <span style=\"color: #228b22;\">Handlebars.SafeString</span>(templates.control(ctrl));
});

<span style=\"color: #a020f0;\">var</span> <span style=\"color: #a0522d;\">templates</span> = {
    control: Handlebars.compile($(<span style=\"color: #8b2252;\">\"#tmp-control\"</span>).html()),
    controlBlock : Handlebars.compile($(<span style=\"color: #8b2252;\">\"#tmp-control-block\"</span>).html())
}

<span style=\"color: #a020f0;\">var</span> <span style=\"color: #a0522d;\">mote</span> = {
    pressed: <span style=\"color: #008b8b;\">false</span>,
    <span style=\"color: #0000ff;\">hold</span>: <span style=\"color: #a020f0;\">function</span> (<span style=\"color: #a0522d;\">cmd</span>) {
        mote.release();
        mote.pressed = setInterval(<span style=\"color: #a020f0;\">function</span>(){
            mote.command(cmd);
        }, 200);
    },
    <span style=\"color: #0000ff;\">release</span>: <span style=\"color: #a020f0;\">function</span> () {
        clearInterval(mote.pressed);
        mote.pressed = <span style=\"color: #008b8b;\">false</span>;
    },
    <span style=\"color: #0000ff;\">renderControls</span>: <span style=\"color: #a020f0;\">function</span> (<span style=\"color: #a0522d;\">controlLists</span>) {
        $.each(controlLists,
               <span style=\"color: #a020f0;\">function</span> (<span style=\"color: #a0522d;\">index</span>, <span style=\"color: #a0522d;\">e</span>) {
                   $(<span style=\"color: #8b2252;\">\"#controls\"</span>).append(templates.controlBlock(e));
               })
            },
    <span style=\"color: #0000ff;\">command</span>: <span style=\"color: #a020f0;\">function</span> (<span style=\"color: #a0522d;\">cmd</span>) {
        console.log(cmd);
        $.post(<span style=\"color: #8b2252;\">\"/command\"</span>, {<span style=\"color: #8b2252;\">\"command\"</span>: cmd},
               <span style=\"color: #a020f0;\">function</span> () {
                   <span style=\"color: #a020f0;\">if</span> (cmd == <span style=\"color: #8b2252;\">\"pause\"</span>) {
                       <span style=\"color: #a020f0;\">var</span> <span style=\"color: #a0522d;\">btn</span> = templates.control({cmd: <span style=\"color: #8b2252;\">\"play\"</span>});
                       $(<span style=\"color: #8b2252;\">\"#controls .pause\"</span>).replaceWith(btn);
                   } <span style=\"color: #a020f0;\">else</span> <span style=\"color: #a020f0;\">if</span> (cmd == <span style=\"color: #8b2252;\">\"play\"</span>) {
                       <span style=\"color: #a020f0;\">var</span> <span style=\"color: #a0522d;\">btn</span> = templates.control({cmd: <span style=\"color: #8b2252;\">\"pause\"</span>});
                       $(<span style=\"color: #8b2252;\">\"#controls .play\"</span>).replaceWith(btn);
                   }
               })
    }
}

<span style=\"color: #b22222;\">// </span><span style=\"color: #b22222;\">older versions of safari don't like `position: fixed`.
</span><span style=\"color: #b22222;\">// </span><span style=\"color: #b22222;\">they also don't like when you set `position: fixed` in a stylesheet,
</span><span style=\"color: #b22222;\">//   </span><span style=\"color: #b22222;\">then override that with inline styles.
</span><span style=\"color: #b22222;\">// </span><span style=\"color: #b22222;\">what I'm saying is that older versions of safari are assholes
</span><span style=\"color: #a020f0;\">if</span> ($.browser.safari) {
    $(<span style=\"color: #8b2252;\">\"#controls\"</span>).css({ <span style=\"color: #8b2252;\">\"position\"</span>: <span style=\"color: #8b2252;\">'absolute'</span> });
    window.onscroll = <span style=\"color: #a020f0;\">function</span>() {
        $(<span style=\"color: #8b2252;\">\"#controls\"</span>).css({ 
            <span style=\"color: #8b2252;\">\"top\"</span> : window.pageYOffset + <span style=\"color: #8b2252;\">'px'</span>
        });
    };
} <span style=\"color: #a020f0;\">else</span> {
    $(<span style=\"color: #8b2252;\">\"#controls\"</span>).css({ <span style=\"color: #8b2252;\">\"position\"</span>: <span style=\"color: #8b2252;\">'fixed'</span> });    
}</pre>

<p><code>command</code> is only relevant because it switches out the <code>pause</code> button for a <code>play</code> button when its pressed successfully. Observe that all of the rendering here is happening through DOM manipulations. We run <code>.append</code> over the result of calling the <code>controlBlock</code> template on each group of player controls, and each call to <code>controlBlock</code> itself applies the <code>control</code> template. When we need to do that button switch I mentioned, we do it by calling <code>.replaceWith</code> on the appropriate DOM selector. We probably could have avoided going to sub-templates for control buttons, but that would have saved us five lines at the outside; just the <code>script</code> tag boilerplate in the HTML markup, and that <code>Handlebars</code> helper definition.</p>

<p>Finally, here's the <code>.ready()</code> call</p>

<pre>$(document).ready(<span style=\"color: #a020f0;\">function</span>() {
    mote.renderControls(
        [[<span style=\"color: #b22222;\">//</span><span style=\"color: #b22222;\">{cmd: \"step-backward\"},
</span>            {cmd: <span style=\"color: #8b2252;\">\"backward\"</span>, held: <span style=\"color: #008b8b;\">true</span>},
            {cmd: <span style=\"color: #8b2252;\">\"stop\"</span>},
            {cmd: <span style=\"color: #8b2252;\">\"pause\"</span>},
            {cmd: <span style=\"color: #8b2252;\">\"forward\"</span>, held: <span style=\"color: #008b8b;\">true</span>}
          <span style=\"color: #b22222;\">//</span><span style=\"color: #b22222;\">{cmd: \"step-forward\"}
</span>        ],
         [{cmd: <span style=\"color: #8b2252;\">\"volume-down\"</span>, held: <span style=\"color: #008b8b;\">true</span>}, 
          {cmd: <span style=\"color: #8b2252;\">\"volume-off\"</span>}, 
          {cmd: <span style=\"color: #8b2252;\">\"volume-up\"</span>, held: <span style=\"color: #008b8b;\">true</span>}]]);
});</pre>

<p>That's that. Like I said, this isn't the most elegant code I've ever written. If I really put my mind to it, I might be able to shave off ten lines or so, and clarify my intent in a couple of places, but I think it would be pretty difficult to do <i>much</i> better without fundamentally changing the approach.</p>

<h3>After</h3>

<p>HTML markup first</p>

<pre>&lt;<span style=\"color: #0000ff;\">div</span> <span style=\"color: #a0522d;\">id</span>=<span style=\"color: #8b2252;\">\"controls\"</span> <span style=\"color: #a0522d;\">ng-controller</span>=<span style=\"color: #8b2252;\">\"CommandCtrl\"</span> <span style=\"color: #a0522d;\">ng-style</span>=<span style=\"color: #8b2252;\">\"style\"</span>&gt;
  &lt;<span style=\"color: #0000ff;\">ul</span> <span style=\"color: #a0522d;\">ng-repeat</span>=<span style=\"color: #8b2252;\">\"controlsList in controlTree\"</span>&gt;
    &lt;<span style=\"color: #0000ff;\">li</span> <span style=\"color: #a0522d;\">ng-repeat</span>=<span style=\"color: #8b2252;\">\"control in controlsList\"</span> <span style=\"color: #a0522d;\">class</span>=<span style=\"color: #8b2252;\">\"{{control.cmd}}\"</span> <span style=\"color: #a0522d;\">ng-switch</span>=<span style=\"color: #8b2252;\">\"control.held\"</span>&gt;
      &lt;<span style=\"color: #0000ff;\">button</span> <span style=\"color: #a0522d;\">class</span>=<span style=\"color: #8b2252;\">\"btn\"</span> <span style=\"color: #a0522d;\">ng-switch-when</span>=<span style=\"color: #8b2252;\">\"true\"</span> 
              <span style=\"color: #a0522d;\">ng-mousedown</span>=<span style=\"color: #8b2252;\">\"command(control.cmd); hold(control.cmd)\"</span>
              <span style=\"color: #a0522d;\">ng-mouseup</span>=<span style=\"color: #8b2252;\">\"release()\"</span> <span style=\"color: #a0522d;\">ng-mouseleave</span>=<span style=\"color: #8b2252;\">\"release()\"</span>&gt;
        &lt;<span style=\"color: #0000ff;\">i</span> <span style=\"color: #a0522d;\">class</span>=<span style=\"color: #8b2252;\">\"icon-{{control.cmd}}\"</span>&gt;&lt;/<span style=\"color: #0000ff;\">i</span>&gt;
      &lt;/<span style=\"color: #0000ff;\">button</span>&gt;
      &lt;<span style=\"color: #0000ff;\">button</span> <span style=\"color: #a0522d;\">class</span>=<span style=\"color: #8b2252;\">\"btn\"</span> ng-switch-default <span style=\"color: #a0522d;\">ng-click</span>=<span style=\"color: #8b2252;\">\"command(control.cmd)\"</span>&gt;
        &lt;<span style=\"color: #0000ff;\">i</span> <span style=\"color: #a0522d;\">class</span>=<span style=\"color: #8b2252;\">\"icon-{{control.cmd}}\"</span>&gt;&lt;/<span style=\"color: #0000ff;\">i</span>&gt;
      &lt;/<span style=\"color: #0000ff;\">button</span>&gt;
    &lt;/<span style=\"color: #0000ff;\">li</span>&gt;
  &lt;/<span style=\"color: #0000ff;\">ul</span>&gt;
&lt;/<span style=\"color: #0000ff;\">div</span>&gt;</pre>

<p>It should be fairly self-explanatory. That's not the clearest code you're likely to find, but it's illustrative. We've got a bunch of non-HTML directives strewn about; all the stuff starting with <code>ng-</code> is part of the Angular DSL. While we need to do the <code>{{}}</code> thing to evaluate code inside of standard HTML properties, any code inside of <code>ng-</code> properties is automatically run in the context of the <code>controller</code> <code>CommandCtrl</code>.</p>

<pre><span style=\"color: #a020f0;\">function</span> <span style=\"color: #0000ff;\">CommandCtrl</span> (<span style=\"color: #a0522d;\">$scope</span>, <span style=\"color: #a0522d;\">$http</span>) {
<span style=\"color: #b22222;\">// </span><span style=\"color: #b22222;\">older versions of safari don't like `position: fixed`.
</span><span style=\"color: #b22222;\">// </span><span style=\"color: #b22222;\">they also don't like when you set `position: fixed` in a stylesheet,
</span><span style=\"color: #b22222;\">//   </span><span style=\"color: #b22222;\">then override that with inline styles.
</span><span style=\"color: #b22222;\">// </span><span style=\"color: #b22222;\">what I'm saying is that older versions of safari are assholes
</span>    <span style=\"color: #a020f0;\">if</span> (util.browser().agent == <span style=\"color: #8b2252;\">'safari'</span>) {
        window.onscroll = <span style=\"color: #a020f0;\">function</span>() { 
            $scope.style = { position: <span style=\"color: #8b2252;\">\"absolute\"</span>, top : window.pageYOffset + <span style=\"color: #8b2252;\">'px'</span> };
        };
    } <span style=\"color: #a020f0;\">else</span> {
        $scope.style = { position: <span style=\"color: #8b2252;\">\"fixed\"</span> };
    }

    $scope.held = <span style=\"color: #008b8b;\">false</span>;

    $scope.controlTree = [
        [ <span style=\"color: #b22222;\">//</span><span style=\"color: #b22222;\">{cmd: \"step-backward\"},
</span>            {cmd: <span style=\"color: #8b2252;\">\"backward\"</span>, held: <span style=\"color: #008b8b;\">true</span>},
            {cmd: <span style=\"color: #8b2252;\">\"stop\"</span>},
            {cmd: <span style=\"color: #8b2252;\">\"pause\"</span>},
            {cmd: <span style=\"color: #8b2252;\">\"forward\"</span>, held: <span style=\"color: #008b8b;\">true</span>}
            <span style=\"color: #b22222;\">//</span><span style=\"color: #b22222;\">{cmd: \"step-forward\"}
</span>        ],
        [{cmd: <span style=\"color: #8b2252;\">\"volume-down\"</span>, held: <span style=\"color: #008b8b;\">true</span>}, 
         {cmd: <span style=\"color: #8b2252;\">\"volume-off\"</span>}, 
         {cmd: <span style=\"color: #8b2252;\">\"volume-up\"</span>, held: <span style=\"color: #008b8b;\">true</span>}]
    ]

    $scope.command = <span style=\"color: #a020f0;\">function</span> (<span style=\"color: #a0522d;\">cmd</span>) { 
        util.post($http, <span style=\"color: #8b2252;\">\"/command\"</span>, {<span style=\"color: #8b2252;\">\"command\"</span>: cmd})
            .success(<span style=\"color: #a020f0;\">function</span> (<span style=\"color: #a0522d;\">data</span>, <span style=\"color: #a0522d;\">status</span>, <span style=\"color: #a0522d;\">headers</span>, <span style=\"color: #a0522d;\">config</span>) {
                $scope.data = data;
                <span style=\"color: #a020f0;\">if</span> (cmd == <span style=\"color: #8b2252;\">\"pause\"</span>) $scope.controlTree[0][2] = {cmd: <span style=\"color: #8b2252;\">\"play\"</span>}
                <span style=\"color: #a020f0;\">else</span> <span style=\"color: #a020f0;\">if</span> (cmd == <span style=\"color: #8b2252;\">\"play\"</span>) $scope.controlTree[0][2] = {cmd: <span style=\"color: #8b2252;\">\"pause\"</span>}
            })
    }

    $scope.hold = <span style=\"color: #a020f0;\">function</span> (<span style=\"color: #a0522d;\">cmd</span>) {
        $scope.held = setInterval(<span style=\"color: #a020f0;\">function</span>() { $scope.command(cmd) }, 200);
    }

    $scope.release = <span style=\"color: #a020f0;\">function</span> (<span style=\"color: #a0522d;\">cmd</span>) { 
        clearInterval($scope.held);
        $scope.held = <span style=\"color: #008b8b;\">false</span>;
    }
}</pre>

<p>That's all, by the way. You've seen all the code for the Angular version, and the two are functionally identical from the users' point of view.</p>

<p>Unlike in the jQuery solution, there's no DOM manipulation here. We've got a model called <code>controlTree</code> which contains the same specification of controls that the earlier version did, but this time, the actual construction of relevant templates is taken care of by the framework. We just specify the relationship between that model and the front-end in the form of the HTML code above, and Angular automatically updates. The clearest demonstration of that is these lines</p>

<pre><span style=\"color: #a020f0;\">if</span> (cmd == <span style=\"color: #8b2252;\">\"pause\"</span>) $scope.controlTree[0][2] = {cmd: <span style=\"color: #8b2252;\">\"play\"</span>}
<span style=\"color: #a020f0;\">else</span> <span style=\"color: #a020f0;\">if</span> (cmd == <span style=\"color: #8b2252;\">\"play\"</span>) $scope.controlTree[0][2] = {cmd: <span style=\"color: #8b2252;\">\"pause\"</span>}</pre>

<p>That's part of sending a command, and all it does is change the contents of our model. The view is updated as soon as this change is made. The equivalent from <b>\"Before\"</b> is</p> 

<pre><span style=\"color: #a020f0;\">if</span> (cmd == <span style=\"color: #8b2252;\">\"pause\"</span>) {
    <span style=\"color: #a020f0;\">var</span> <span style=\"color: #a0522d;\">btn</span> = templates.control({cmd: <span style=\"color: #8b2252;\">\"play\"</span>});
    $(<span style=\"color: #8b2252;\">\"#controls .pause\"</span>).replaceWith(btn);
} <span style=\"color: #a020f0;\">else</span> <span style=\"color: #a020f0;\">if</span> (cmd == <span style=\"color: #8b2252;\">\"play\"</span>) {
    <span style=\"color: #a020f0;\">var</span> <span style=\"color: #a0522d;\">btn</span> = templates.control({cmd: <span style=\"color: #8b2252;\">\"pause\"</span>});
    $(<span style=\"color: #8b2252;\">\"#controls .play\"</span>).replaceWith(btn);
}</pre>

<p>Where we're back to templating ourselves. You can also see the same principles affecting that code hacking around older versions of Safari; we're just setting up some objects rather than doing DOM traversal ourselves.</p> 

<pre><span style=\"color: #a020f0;\">if</span> ($.browser.safari) {
  $(<span style=\"color: #8b2252;\">\"#controls\"</span>).css({ <span style=\"color: #8b2252;\">\"position\"</span>: <span style=\"color: #8b2252;\">'absolute'</span> });
  window.onscroll = <span style=\"color: #a020f0;\">function</span>() {
    $(<span style=\"color: #8b2252;\">\"#controls\"</span>).css({ 
        <span style=\"color: #8b2252;\">\"top\"</span> : window.pageYOffset + <span style=\"color: #8b2252;\">'px'</span>
    });
  };
} <span style=\"color: #a020f0;\">else</span> {
  $(<span style=\"color: #8b2252;\">\"#controls\"</span>).css({ <span style=\"color: #8b2252;\">\"position\"</span>: <span style=\"color: #8b2252;\">'fixed'</span> });    
}</pre>

<p>vs</p>

<pre><span style=\"color: #a020f0;\">if</span> (util.browser().agent == <span style=\"color: #8b2252;\">'safari'</span>) {
  window.onscroll = <span style=\"color: #a020f0;\">function</span>() { 
    $scope.style = { position: <span style=\"color: #8b2252;\">\"absolute\"</span>, top : window.pageYOffset + <span style=\"color: #8b2252;\">'px'</span> };
  };
} <span style=\"color: #a020f0;\">else</span> {
  $scope.style = { position: <span style=\"color: #8b2252;\">\"fixed\"</span> };
}</pre>

<p>The effect is the same, but the particulars of updating and rendering are kept comfortably away from us.</p>

<p>As I said, the above example was picked to clearly illustrate the differences between approaches, not necessarily because it's the biggest gain in clarity I've gotten out of porting over<a href=\"#foot-Thu-Dec-27-101739EST-2012\" name=\"note-Thu-Dec-27-101739EST-2012\">[3]</a>. I'm sure a headache or two will pop up down the line, but I submit that this is a fundamentally more humane way to craft responsive web front-ends than the alternatives.</p>

<p>And I'll be <a href=\"http://angularjs.org/\">using it</a> where I can from now on.</p>


<hr />
<h5>Footnotes</h5>
<p>1 - <a href=\"#note-Thu-Dec-27-100616EST-2012\" name=\"foot-Thu-Dec-27-100616EST-2012\">[back]</a> -  (re-ordering complex elements is really the only one I've observed; stuff that's too complex to do like <a href=\"http://jsfiddle.net/g/hKYWr/\">this</a>, but where you still need to pass the current order of some set of UI elements back to the server for persistence. As I said already, <a href=\"http://angular-ui.github.com/\">angular-ui</a> does it just fine for simple constructs, but for anything more complicated, the Angular solution is ~30-lines of sub-module, where the DOM-traversal solution is a mere 5)</p>
<p>2 - <a href=\"#note-Thu-Dec-27-100622EST-2012\" name=\"foot-Thu-Dec-27-100622EST-2012\">[back]</a> -  (the <code>$http.post</code> function <i>doesn't</i> do the jQuery thing of encoding an object as <code>POST</code> parameters. The default behavior is to dump the parameter object to a JSON string and pass that to the server as a post body. I could actually see that being the easier approach if you had perfect control of the server, since that would let you do some not-exactly-HTTP processing on the incoming structure. If you're using a pre-built one, though, you're probably stuck doing something manual and annoying like this

<pre>...
<span style=\"color: #0000ff;\">post</span>: <span style=\"color: #a020f0;\">function</span> (<span style=\"color: #a0522d;\">$http</span>, <span style=\"color: #a0522d;\">url</span>, <span style=\"color: #a0522d;\">data</span>) {
  <span style=\"color: #a020f0;\">var</span> <span style=\"color: #a0522d;\">encoded</span> = _.map(data, <span style=\"color: #a020f0;\">function</span> (<span style=\"color: #a0522d;\">val</span>, <span style=\"color: #a0522d;\">k</span>) { <span style=\"color: #a020f0;\">return</span> encodeURI(k) + <span style=\"color: #8b2252;\">\"=\"</span> + encodeURI(val); });
  $http.defaults.headers.post[<span style=\"color: #8b2252;\">\"Content-Type\"</span>] = <span style=\"color: #8b2252;\">\"application/x-www-form-urlencoded\"</span>;
  <span style=\"color: #a020f0;\">return</span> $http.post(url, encoded.join(<span style=\"color: #8b2252;\">\"&amp;\"</span>));
},
...</pre>

or (if you're concerned about going with the grain of the framework) this

<pre>myModule.config(<span style=\"color: #a020f0;\">function</span> (<span style=\"color: #a0522d;\">$httpProvider</span>) {
  $httpProvider.defaults.headers.post[<span style=\"color: #8b2252;\">'Content-Type'</span>] = <span style=\"color: #8b2252;\">'application/x-www-form-urlencoded'</span>;
  $httpProvider.defaults.transformRequest = <span style=\"color: #a020f0;\">function</span>(<span style=\"color: #a0522d;\">data</span>){
    <span style=\"color: #a020f0;\">return</span> _.map(data, <span style=\"color: #a020f0;\">function</span> (<span style=\"color: #a0522d;\">val</span>, <span style=\"color: #a0522d;\">k</span>) { <span style=\"color: #a020f0;\">return</span> encodeURI(k) + <span style=\"color: #8b2252;\">\"=\"</span> + encodeURI(val); });
  }
});</pre>

Not <i>too</i> ugly once you throw in the usual pinch of <a href=\"http://underscorejs.org/\">underscore</a>, but this is the sort of thing that really seems like it should be built in as a default behavior. Unless the Angular devs really think some large portion of their users are going to build their own servers to work the other way)</p>

<p>3 - <a href=\"#note-Thu-Dec-27-101739EST-2012\" name=\"foot-Thu-Dec-27-101739EST-2012\">[back]</a> -  (in fact, this is probably the least clarity I've gained by moving over to the reactive approach. As I said earlier, the line-count is usually halved without breaking a sweat)</p>
"))
((5202 3723 601473000) :INSERT (117 :POSTED 3565573200))
((5202 3723 601475000) :INSERT (117 :TAG :ALMOST-LITERATE-PROGRAMMING))
((5202 3723 601476000) :INSERT (117 :TAG :CLIENT-SIDE))
((5202 3723 601478000) :INSERT (117 :TAG :HTML5))
((5202 3723 601480000) :INSERT (117 :TAG :JAVASCRIPT))
((5202 3723 601482000) :INSERT (117 :TAG :JQUERY))
((5202 3723 601718000) :INSERT (118 :TITLE "Autopair, Paredit and Bitching"))
((5202 3723 601723000) :INSERT (118 :FILE "autopair-paredit-burnout.html"))
((5202 3723 601725000) :INSERT (118 :EDITED 3610022331))
((5202 3723 601727000) :INSERT
 (118 :BODY
  "<p>First, lets get the useful information out of the way. I've been using <a href=\"http://emacswiki.org/emacs/ParEdit\">the fantastic <code>paredit</code></a> to edit Lisp code for a while now, and <a href=\"autopairs\">the slightly-less-fantastic-but-generally-useful <code>autopairs</code></a> to help with parentheses/curlies/quotes/what-have-you in other languages<a href=\"#foot-Sun-Jan-06-181038EST-2013\" name=\"note-Sun-Jan-06-181038EST-2013\">[1]</a>. There's a little <a href=\"http://www.emacswiki.org/emacs/AutoPairs#toc5\">blurb on the Emacs wiki</a> page about using the two of them together, which implies that <code>(autopair-global-mode)</code> should automatically respect <code>paredit</code>s primacy in Lisp modes, but that doesn't seem to happen. When I tried editing Elisp, or Common Lisp or Clojure with that fix in place, I got some odd edge-case behavior.</p>

<p>Specifically, highlighting a region to parenthesize it produced an extraneous close-paren and backspace suddenly didn't balance deletions. I'm not sure this is the most elegant way forward, but the way I wound up fixing it is</p>

<pre>(<span style=\"color: #a020f0;\">defvar</span> <span style=\"color: #a0522d;\">*paredit-modes*</span>
  '(common-lisp-mode lisp-mode emacs-lisp-mode clojure-mode lisp-interaction-mode)
  <span style=\"color: #8b2252;\">\"A list of modes wherein I use paredit.\"</span>)

(<span style=\"color: #a020f0;\">require</span> '<span style=\"color: #008b8b;\">autopair</span>)
(autopair-global-mode)

(autoload 'paredit-mode <span style=\"color: #8b2252;\">\"paredit\"</span>
  <span style=\"color: #8b2252;\">\"Minor mode for pseudo-structurally editing Lisp code.\"</span> t)

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">custom-paredit-mode</span> ()
  (<span style=\"color: #a020f0;\">progn</span> (paredit-mode +1) 
         (define-key paredit-mode-map (kbd <span style=\"color: #8b2252;\">\"&lt;C-left&gt;\"</span>) 'backward-sexp)
         (define-key paredit-mode-map (kbd <span style=\"color: #8b2252;\">\"&lt;C-right&gt;\"</span>) 'forward-sexp)))

(<span style=\"color: #a020f0;\">dolist</span> (mode *paredit-modes*)
  <span style=\"color: #b22222;\">;; </span><span style=\"color: #b22222;\">Activate paredit and deactivate autopair in lisp modes
</span>  (add-hook (intern (concat (symbol-name mode) <span style=\"color: #8b2252;\">\"-hook\"</span>))
            (<span style=\"color: #a020f0;\">lambda</span> ()
              (custom-paredit-mode)
              (setq autopair-dont-activate t)
              (autopair-mode -1))))</pre>

<p><code>*paredit-modes*</code> is just a list of language modes where I want <code>paredit</code>, and therefore <b>not</b> <code>autopair</code>. I want <code>autopair</code> <code>global</code>ized because I use it in every mode where I'm <i>not</i> using <code>paredit</code>, so it's much easier to set exceptions than to exhaustively list ever non-lisp language mode. After both modes are included, I iterate over <code>*paredit-modes*</code> with a <code>dolist</code> and set the appropriate hooks.</p>

<p>Right, that's the useful part out of the way. I'm going to bitch now, and I'd appreciate some privacy.</p>

<h3>Bitching</h3>

<p>I'm starting to feel bored with what I'm doing. The last time I felt this way was back in college, where I suddenly went from producing two finished illustrations and about ~30 sketches per week to just under .01 and 2 respectively. I doubt the same thing is going to happen with programming because of what I think programming <i>is</i>, but it's still kind of disconcerting that I'm emotionally beyond my own control. Over the past couple of months, I've been working pretty hard on three or four personal projects and one giant project at work, most of it in Python.</p>

<p>That's kind of depressing. Not that Python is a horrible language, mind you, it's ok and it's terse enough once you get to grip with its particular way of doing things, and <i>most</i> of its libraries aren't as over-engineered as the stuff I've found myself needing to include over in Clojure-land, but it <a href=\"http://dev.clojure.org/display/design/Library+Coding+Standards\">lacks</a> a <a href=\"http://www.lispworks.com/documentation/HyperSpec/Body/m_defmac.htm#defmacro\">feature</a> or <a href=\"http://www.aiai.ed.ac.uk/~jeff/clos-guide.html\">three</a> that <a href=\"http://www.haskell.org/haskellwiki/Partial_application\">I've</a> gotten <a href=\"http://learnyouahaskell.com/syntax-in-functions#pattern-matching\">very</a> used <a href=\"https://github.com/technomancy/leiningen\">to</a>. You'll note that those links don't all point to things from the same language<a href=\"#foot-Sun-Jan-06-181326EST-2013\" name=\"note-Sun-Jan-06-181326EST-2013\">[2]</a>.</p>

<p>I remember reading about something called <a href=\"http://www.reddit.com/r/IWantOut/comments/zykw2/getting_out_and_what_it_means_to_me/c68uit9\">The Curse of the Traveller</a> a little while ago. It seemed like an interesting concept, but not one I'd be able to relate to since I don't actually <i>like</i> traveling<a href=\"#foot-Sun-Jan-06-181347EST-2013\" name=\"note-Sun-Jan-06-181347EST-2013\">[3]</a>. It feels painfully relevant here though. Re-phrasing it for the language enthusiast</p>

<blockquote>
  The more languages you learn, the more things you see that appeal to you, but no one language has them all. In fact, each language has a smaller and smaller percentage of the things you love, the more languages you learn. It drives you, even subconsciously, to keep looking, for a language not that's perfect (we all know there's no Shangri-La), but just for a language that's \"just right for you.\" But the curse is that the odds of finding \"just right\" get smaller, not larger, the more you experience. So you keep looking even more, but it always gets worse the more you see.
</blockquote>

<p>In theory, language users have an out because we can technically build a \"just-right\" language. In practice, it turns out that implementing your own garbage collection, optimizing compiler, streams, i/o, package management, web-server, asynchronous web-server etc. is a lot harder than just living with a reasonably popular language you already know<a href=\"#foot-Sun-Jan-06-181401EST-2013\" name=\"note-Sun-Jan-06-181401EST-2013\">[4]</a>. Also, there are very few things lonelier than being the only one who knows your language of choice. The end result is that, while I've probably been getting more stuff done in Python/JavaScript than I'd ever gotten done in a comparable time-period, I've been getting skull-fuckingly bored doing it. And I'm really not sure what the solution is.</p>

<h3>Realistically</h3>

<p>This is the effect of having a single quarter wherein I</p>

<ul>
  <li>had a child. I mean, my wife <i>had</i> him, but I still lost plenty of sleep as a result.</li>
  <li>got sick enough that I couldn't exercise for a good week and a half.</li>
  <li>went through the holiday garbage typical of the season.</li>
</ul>

<p>Any one of those could probably put me in a funk on its own. The combination, as well as the evil fucking grey winter that's just descending on Toronto streets, is enough to explain the mood and then some. So I mean, that's that. I was planning on starting another project or two in the next little while, but all things considered, maybe I owe myself a bit of relaxation for a change. Metaphorically spin down the drives and kick my feet up, at least 'till I get the chance to get a good sprint or two and a few winks in.</p>


<hr />
<h5>Footnotes</h5>
<p>1 - <a href=\"#note-Sun-Jan-06-181038EST-2013\" name=\"foot-Sun-Jan-06-181038EST-2013\">[back]</a> - I still don't use <code><a href=\"http://www.emacswiki.org/emacs/auto-pair%2b.el\">auto-pair+</a></code>, but you should feel free to.</p>

<p>2 - <a href=\"#note-Sun-Jan-06-181326EST-2013\" name=\"foot-Sun-Jan-06-181326EST-2013\">[back]</a> - Although, as usual, it wouldn't be very difficult to put together 90-95% adequate versions of the rest if you have access to <code>defmacro</code>, which is why Common Lisp tends to be my language of choice if I have any say in the matter at all. As proof, I submit the article count by language over there in the sidebar.</p>

<p>3 - <a href=\"#note-Sun-Jan-06-181347EST-2013\" name=\"foot-Sun-Jan-06-181347EST-2013\">[back]</a> - I got that shit out of my system before I turned 12, and I have no more desire for it, thank you very much.</p>

<p>4 - <a href=\"#note-Sun-Jan-06-181401EST-2013\" name=\"foot-Sun-Jan-06-181401EST-2013\">[back]</a> - Or picking up a Lisp that hits enough of the bases then <code>defmacro</code>ing the additional facilities you need.</p>
"))
((5202 3723 601792000) :INSERT (118 :POSTED 3566437200))
((5202 3723 601794000) :INSERT (118 :TAG :BITCHING))
((5202 3723 601796000) :INSERT (118 :TAG :ELISP))
((5202 3723 601798000) :INSERT (118 :TAG :EMACS))
((5202 3723 603198000) :INSERT
 (119 :TITLE "Wai Without Yesod - Simple Example of Haskell Web Development"))
((5202 3723 603204000) :INSERT (119 :FILE "wai-without-yesod.html"))
((5202 3723 603206000) :INSERT (119 :EDITED 3610299409))
((5202 3723 603208000) :INSERT
 (119 :BODY
  "<p>It's been a slow writing month, as you can tell by the number of recent submissions. Hopefully, I remember how to do this.</p>

<p>Other than raising a child<a href=\"#foot-Sun-Feb-10-150629EST-2013\" name=\"note-Sun-Feb-10-150629EST-2013\">[1]</a>, taking a long-overdue break from programming in my down time and dealing with various other mundane bullshit, I've been working on a small project in Haskell that'll make coordination for my wife and I marginally simpler. It's a minimal, web-based running shopping list, and the idea is to use it to forget fewer things during the weekly trip as well as make occasional after-work quick grocery stops possible. I could easily have knocked this out in a day or three using Python, but I figured I'd take some time to put my Haskell skills through more rigorous testing.</p>

<p><a href=\"http://barbershop.inaimathi.ca/\">Last time</a>, I worked with <a href=\"http://happstack.com/clck/view-page-slug/1/home\">Happstack</a>, which is the best looking web framework available in the language, as far as I'm concerned. This time, I just pulled out <a href=\"http://hackage.haskell.org/package/warp-1.3.7.2\">warp</a>, the <a href=\"https://github.com/yesodweb/wai\">wai</a>-based server, and went frameworkless.</p>

<h3>Why wai without Y?</h3>

<p>Using a framework binds you to it. <a href=\"http://www.yesodweb.com/\">Yesod</a> especially seems to have a stick up its ass about using something other than Haskell to build pieces of a project. You may recall that <a href=\"/article?name=js-frameworks.html\">I theorized</a> about keeping front and back-ends entirely separate a little while ago. Well, I'm still on that. So as much as framework maintainers want me to use or <a href=\"http://hackage.haskell.org/package/hamlet-1.1.3.1\">Hamlet</a> or whatever, doing so would be counter-productive for me. Yesod actually goes one further and has <a href=\"http://www.yesodweb.com/blog/2012/01/wiki-chat-subsite\">a JS-generation language too</a>. The idea is supposed to be that <i>all</i> of your code then goes through the same rigorous type checks and optimizations that the ML family is famous for. In practice, what it means is that you're more-or-less forced to use jQuery<a href=\"#foot-Sun-Feb-10-150633EST-2013\" name=\"note-Sun-Feb-10-150633EST-2013\">[2]</a>, and it means that all of your project is in Haskell<a href=\"#foot-Sun-Feb-10-150637EST-2013\" name=\"note-Sun-Feb-10-150637EST-2013\">[3]</a> and it means that your server-side code is doing everything<a href=\"#foot-Sun-Feb-10-150641EST-2013\" name=\"note-Sun-Feb-10-150641EST-2013\">[4]</a>. I think I'll stick to the manual trio for the front-end and just let Haskell do the heavy database lifting.</p>

<p>The easiest way to do that seems to be to basically keep the model and a controller on server-side, and the view and a controller on the client side. <a href=\"http://happstack.com/clck/view-page-slug/1/home\">Happstack</a> is the only <a href=\"http://snapframework.com/\">one of</a> the main three Haskell <a href=\"http://www.yesodweb.com/\">web frameworks</a> to make something like that reasonably simple, but I already got some time in with it, and the Warp server claims to <a href=\"http://www.yesodweb.com/blog/2011/03/preliminary-warp-cross-language-benchmarks\">bench much better</a>.</p>

<p>So, let's give this a whirl.</p>

<h3>Haskell Dev General Thoughts</h3>

<p>Before I get to the code in my usual self-review fashion, let me let you in on some lessons I had to learn the hard way by <a href=\"http://stackoverflow.com/questions/14721720/ambiguous-type-variable-in-acidstate-functions\">hitting my head up against the language</a>.</p>

<p>Firstly, don't try to do bottom-up design here. Or, at least, slow down with it until you get fairly good with the language, fairly familiar with the documentation/conventions, and fairly good at understanding how GHCi works. The techniques of <a href=\"http://c2.com/cgi/wiki?WishfulThinking\">wishful thinking</a> and <a href=\"http://www.paulgraham.com/progbot.html\">building the language up</a> towards your problem are still applicable, but Haskell has a way of focusing pretty relentlessly on types. Even though it infers a lot of type information without your help, the most common pieces of advice I get from other Haskellers is to</p> 

<ol>
  <li>work out what the type of my function is going to be before writing the function itself and</li>
  <li>explicitly write it down above the function</li>
</ol>

<p>I've found that this <i>does</i> help, if for no other reason than thinking through your operations' types will highlight the pieces that you didn't think through well enough, and it'll remind you what the next piece needs to interface with. It's just not what I'm used to doing<a href=\"#foot-Sun-Feb-10-150645EST-2013\" name=\"note-Sun-Feb-10-150645EST-2013\">[5]</a>.</p>

<p>Secondly, don't trust GHCi completely. As a Lisper, this sort of blew my mind because the Lisp REPL <i>is</i> a running Lisp image. If something works in the SLIME prompt, it's a fairly good bet that you can just copy it out into your <code>.lisp</code> file and have it work the same way<a href=\"#foot-Sun-Feb-10-150651EST-2013\" name=\"note-Sun-Feb-10-150651EST-2013\">[6]</a>. GHCi isn't exactly that. Its type reflection directive does some odd things when inferring types<a href=\"#foot-Sun-Feb-10-150655EST-2013\" name=\"note-Sun-Feb-10-150655EST-2013\">[7]</a>, and it fudges <code><span style=\"color: #228b22;\">IO</span></code>-related operations in general<a href=\"#foot-Sun-Feb-10-150702EST-2013\" name=\"note-Sun-Feb-10-150702EST-2013\">[8]</a>. For simple stuff that doesn't do IO, you can probably still get away with Lisp-style exploratory REPLing, but it doesn't seem to be a good general strategy. For GHCi, at least. For all I know, HUGS is better at this sort of thing, but I haven't used it extensively yet, despite it being the only Haskell REPL on offer for ARM at the moment.</p>

<p>Thirdly, it's possible<a href=\"#foot-Sun-Feb-10-150705EST-2013\" name=\"note-Sun-Feb-10-150705EST-2013\">[9]</a> to apply the venerable technique of <a href=\"http://en.wikipedia.org/wiki/Debugging#Techniques\">debugging by <code>printf</code></a>. At first glance, it seems like it wouldn't be, since doing any output from a function pollutes its type with <code><span style=\"color: #228b22;\">IO</span></code>, which then cascades to all of the callers of that function and causes you to rewrite half the project if you want to add some output in one place. Oh, and then rewrite it back once you're done looking at debugging output. There's a library called <a href=\"http://www.haskell.org/ghc/docs/latest/html/libraries/base//Debug-Trace.html\"><code><span style=\"color: #228b22;\">Debug</span><span style=\"color: #0000ff;\">.</span><span style=\"color: #228b22;\">Trace</span></code></a> that lets you pull off something similar enough. It highlights very clearly that this isn't meant for production use though; what you're supposed to do, near as I can tell, is <code><span style=\"color: #a020f0;\">import</span> <span style=\"color: #a020f0;\">qualified</span> <span style=\"color: #228b22;\">Debug.Trace</span> <span style=\"color: #a020f0;\">as</span> <span style=\"color: #228b22;\">Debug</span></code>, then sprinkle <code>Debug.trace \"A trace message goes here...\" $ {{the thing you want trace output for}</code> throughout your code, and run <code>M-x query-replace-regexp Debug.trace \".*?\" </code> later to replace these calls with nothing. It's possible that there's an automatic way of removing them, but I didn't bother finding it for a project this size.</p>

<h3>Routing</h3>

<pre><span style=\"color: #b22222;\">{-</span><span style=\"color: #b22222;\"># LANGUAGE OverloadedStrings #-}</span>
<span style=\"color: #a020f0;\">module</span> <span style=\"color: #228b22;\">Main</span> <span style=\"color: #a020f0;\">where</span>

<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Data.Default</span> (def)
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Data.String</span> (fromString)
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Data.Aeson</span>
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #a020f0;\">qualified</span> <span style=\"color: #228b22;\">Data.Text</span> <span style=\"color: #a020f0;\">as</span> <span style=\"color: #228b22;\">Text</span>
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #a020f0;\">qualified</span> <span style=\"color: #228b22;\">Data.Vault</span> <span style=\"color: #a020f0;\">as</span> <span style=\"color: #228b22;\">Vault</span>

<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Data.Acid</span> (<span style=\"color: #228b22;\">AcidState</span>, <span style=\"color: #228b22;\">Update</span>, <span style=\"color: #228b22;\">Query</span>, makeAcidic, openLocalState)
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Data.Acid.Advanced</span> (update', query')
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Data.Acid.Local</span> (createCheckpointAndClose)
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Data.IxSet</span> ((<span style=\"color: #a0522d;\">@=</span>), <span style=\"color: #228b22;\">Proxy</span>(<span style=\"color: #a0522d;\">..</span>), getOne)

<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Network.Wai</span>
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Network.Wai.Parse</span> (parseRequestBody, lbsBackEnd)
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Network.Wai.Session</span> (withSession)
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Network.Wai.Session.Map</span> (mapStore_)
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Network.Wai.Handler.Warp</span> (run)
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Network.Wai.EventSource</span> (<span style=\"color: #228b22;\">ServerEvent</span> (<span style=\"color: #a0522d;\">..</span>), eventSourceAppChan)
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Network.HTTP.Types</span> (ok200, unauthorized401, status404)

<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Control.Exception</span> (bracket)
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Control.Concurrent.Chan</span> (<span style=\"color: #228b22;\">Chan</span>, newChan, dupChan, writeChan)
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Control.Monad.Trans.Resource</span> (<span style=\"color: #228b22;\">ResourceT</span>)
    
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">TypeSynonyms</span>
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Util</span>
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Model</span>
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Handlers</span>

<span style=\"color: #0000ff;\">routes</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">DB</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">SessionStore</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Request</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">RES</span>
<span style=\"color: #0000ff;\">routes</span> db session req <span style=\"color: #a0522d;\">=</span> <span style=\"color: #a020f0;\">do</span>
  <span style=\"color: #a020f0;\">let</span> <span style=\"color: #228b22;\">Just</span> (sessionLookup, sessionInsert) <span style=\"color: #a0522d;\">=</span> <span style=\"color: #228b22;\">Vault</span><span style=\"color: #a0522d;\">.</span>lookup session (vault req)
  user <span style=\"color: #a0522d;\">&lt;-</span> sessionLookup <span style=\"color: #8b2252;\">\"user\"</span>
  <span style=\"color: #a020f0;\">case</span> pathInfo req <span style=\"color: #a020f0;\">of</span>
    (<span style=\"color: #8b2252;\">\"app\"</span><span style=\"color: #228b22;\">:</span>rest) <span style=\"color: #a0522d;\">-&gt;</span> 
      loggedInRoutes db user rest req
    (<span style=\"color: #8b2252;\">\"auth\"</span><span style=\"color: #228b22;\">:</span>rest) <span style=\"color: #a0522d;\">-&gt;</span>
      authRoutes db sessionLookup sessionInsert rest req
    [<span style=\"color: #8b2252;\">\"static\"</span>, subDir, fileName] <span style=\"color: #a0522d;\">-&gt;</span> 
      serveStatic subDir fileName
    <span style=\"color: #228b22;\">[]</span> <span style=\"color: #a0522d;\">-&gt;</span> 
      resFile <span style=\"color: #8b2252;\">\"text/html\"</span> <span style=\"color: #8b2252;\">\"static/index.html\"</span>
    [<span style=\"color: #8b2252;\">\"favicon.ico\"</span>] <span style=\"color: #a0522d;\">-&gt;</span> 
      resPlaceholder
    <span style=\"color: #a020f0;\">_</span> <span style=\"color: #a0522d;\">-&gt;</span> res404

<span style=\"color: #0000ff;\">authRoutes</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">DB</span> <span style=\"color: #a0522d;\">-&gt;</span>  <span style=\"color: #228b22;\">LookupFN</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">InsertFN</span> <span style=\"color: #a0522d;\">-&gt;</span> [<span style=\"color: #228b22;\">Text.Text</span>] <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Request</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">RES</span>
<span style=\"color: #0000ff;\">authRoutes</span> db sLookup sInsert path req <span style=\"color: #a0522d;\">=</span> <span style=\"color: #a020f0;\">do</span>
  withPostParams req [<span style=\"color: #8b2252;\">\"name\"</span>, <span style=\"color: #8b2252;\">\"passphrase\"</span>] route
  <span style=\"color: #a020f0;\">where</span> route [name, pass] <span style=\"color: #a0522d;\">=</span> 
          <span style=\"color: #a020f0;\">case</span> path <span style=\"color: #a020f0;\">of</span>
            [<span style=\"color: #8b2252;\">\"login\"</span>] <span style=\"color: #a0522d;\">-&gt;</span> 
              login db sInsert name pass
            [<span style=\"color: #8b2252;\">\"register\"</span>] <span style=\"color: #a0522d;\">-&gt;</span> 
              <span style=\"color: #a020f0;\">case</span> pass <span style=\"color: #a020f0;\">of</span>
                <span style=\"color: #8b2252;\">\"\"</span> <span style=\"color: #a0522d;\">-&gt;</span> resError <span style=\"color: #8b2252;\">\"At least pick a non-empty passphrase\"</span>
                <span style=\"color: #a020f0;\">_</span>  <span style=\"color: #a0522d;\">-&gt;</span> register db sInsert name pass
            <span style=\"color: #a020f0;\">_</span> <span style=\"color: #a0522d;\">-&gt;</span> res404

<span style=\"color: #0000ff;\">loggedInRoutes</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">DB</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Maybe</span> <span style=\"color: #228b22;\">String</span> <span style=\"color: #a0522d;\">-&gt;</span> [<span style=\"color: #228b22;\">Text.Text</span>] <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Request</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">RES</span>
<span style=\"color: #0000ff;\">loggedInRoutes</span> db maybeUserName path req <span style=\"color: #a0522d;\">=</span> <span style=\"color: #a020f0;\">do</span>
  (params, <span style=\"color: #a020f0;\">_</span>) <span style=\"color: #a0522d;\">&lt;-</span> parseRequestBody lbsBackEnd req
  <span style=\"color: #a020f0;\">case</span> maybeUserName <span style=\"color: #a020f0;\">of</span>
    <span style=\"color: #228b22;\">Just</span> name <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #a020f0;\">do</span>
      maybeAccount <span style=\"color: #a0522d;\">&lt;-</span> query' db <span style=\"color: #a0522d;\">$</span> <span style=\"color: #228b22;\">AccountByName</span> name
      <span style=\"color: #a020f0;\">case</span> maybeAccount <span style=\"color: #a020f0;\">of</span>
        <span style=\"color: #228b22;\">Just</span> user <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #a020f0;\">case</span> path <span style=\"color: #a020f0;\">of</span>
          (<span style=\"color: #8b2252;\">\"item\"</span><span style=\"color: #228b22;\">:</span>rest) <span style=\"color: #a0522d;\">-&gt;</span> 
            withParams params [<span style=\"color: #8b2252;\">\"itemName\"</span>] route
            <span style=\"color: #a020f0;\">where</span> route [itemName] <span style=\"color: #a0522d;\">=</span> itemRoutes db user itemName rest params
          [<span style=\"color: #8b2252;\">\"list\"</span>] <span style=\"color: #a0522d;\">-&gt;</span> 
            listItems db user
          [<span style=\"color: #8b2252;\">\"new\"</span>] <span style=\"color: #a0522d;\">-&gt;</span> 
            withParams params [<span style=\"color: #8b2252;\">\"itemName\"</span>, <span style=\"color: #8b2252;\">\"comment\"</span>, <span style=\"color: #8b2252;\">\"count\"</span>] new
            <span style=\"color: #a020f0;\">where</span> new [name, comment, count] <span style=\"color: #a0522d;\">=</span> newItem db user name comment (read count <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">Integer</span>)
          [<span style=\"color: #8b2252;\">\"change-passphrase\"</span>] <span style=\"color: #a0522d;\">-&gt;</span> 
            withParams params [<span style=\"color: #8b2252;\">\"newPassphrase\"</span>] change
            <span style=\"color: #a020f0;\">where</span> change [newPass] <span style=\"color: #a0522d;\">=</span> changePassphrase db user newPass
          <span style=\"color: #a020f0;\">_</span> <span style=\"color: #a0522d;\">-&gt;</span> res404
        <span style=\"color: #228b22;\">Nothing</span> <span style=\"color: #a0522d;\">-&gt;</span> resError <span style=\"color: #8b2252;\">\"Invalid user\"</span>
    <span style=\"color: #228b22;\">Nothing</span> <span style=\"color: #a0522d;\">-&gt;</span> resError <span style=\"color: #8b2252;\">\"Not Logged In\"</span>

<span style=\"color: #0000ff;\">itemRoutes</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">DB</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Account</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">String</span> <span style=\"color: #a0522d;\">-&gt;</span> [<span style=\"color: #228b22;\">Text.Text</span>] <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">BSAssoc</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">RES</span>
<span style=\"color: #0000ff;\">itemRoutes</span> db user itemName path params <span style=\"color: #a0522d;\">=</span> <span style=\"color: #a020f0;\">do</span>
  <span style=\"color: #a020f0;\">case</span> getOne <span style=\"color: #a0522d;\">$</span> (accountItems user) <span style=\"color: #a0522d;\">@=</span> itemName <span style=\"color: #a020f0;\">of</span>
    <span style=\"color: #228b22;\">Just</span> item <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #a020f0;\">case</span> path <span style=\"color: #a020f0;\">of</span>
      [<span style=\"color: #8b2252;\">\"need\"</span>] <span style=\"color: #a0522d;\">-&gt;</span> 
        needItem db user item
      [<span style=\"color: #8b2252;\">\"got\"</span>] <span style=\"color: #a0522d;\">-&gt;</span> 
        gotItem db user item
      [<span style=\"color: #8b2252;\">\"delete\"</span>] <span style=\"color: #a0522d;\">-&gt;</span> 
        deleteItem db user item
      [<span style=\"color: #8b2252;\">\"edit\"</span>] <span style=\"color: #a0522d;\">-&gt;</span>
        edit <span style=\"color: #a0522d;\">$</span> extractOptional params [<span style=\"color: #8b2252;\">\"comment\"</span>, <span style=\"color: #8b2252;\">\"count\"</span>]
        <span style=\"color: #a020f0;\">where</span> edit [comment, count] <span style=\"color: #a0522d;\">=</span> editItem db user item comment count
      <span style=\"color: #a020f0;\">_</span> <span style=\"color: #a0522d;\">-&gt;</span> res404
    <span style=\"color: #228b22;\">Nothing</span> <span style=\"color: #a0522d;\">-&gt;</span> resError <span style=\"color: #8b2252;\">\"Invalid item\"</span>

<span style=\"color: #b22222;\">--</span><span style=\"color: #b22222;\">--- Server start
</span><span style=\"color: #0000ff;\">main</span> <span style=\"color: #a0522d;\">=</span> <span style=\"color: #a020f0;\">do</span>
  session <span style=\"color: #a0522d;\">&lt;-</span> <span style=\"color: #228b22;\">Vault</span><span style=\"color: #a0522d;\">.</span>newKey
  store <span style=\"color: #a0522d;\">&lt;-</span> mapStore_
  bracket (openLocalState initialDB) (createCheckpointAndClose) 
    (<span style=\"color: #a0522d;\">\\</span>db <span style=\"color: #a0522d;\">-&gt;</span> run 3000 <span style=\"color: #a0522d;\">.</span> withSession store (fromString <span style=\"color: #8b2252;\">\"SESSION\"</span>) def session <span style=\"color: #a0522d;\">$</span> routes db session)
</pre>
<p>Basically, case statements. <code>routes</code> at the top there dispatches on <code>pathInfo req</code>, which returns the URI minus <code>GET</code>/<code>#</code> parameters and <code>split</code> on <code>/</code>. You then use the standard Haskell pattern matching facilities to figure out what the user has requested and what to do about it.</p>

<p>Lets take a close-up look at the type signature of <code>routes</code> before moving on.</p>

<pre><span style=\"color: #0000ff;\">routes</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">DB</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">SessionStore</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Request</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">RES</span></pre>

<p>That should look suspiciously minimal to anyone who's actually done web development in Haskell before, and it is. The why has to do with this import</p>

<pre><span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">TypeSynonyms</span></pre>

<p>I have no idea whether this is good Haskelling practice or not, but I ended up defining descriptive synonyms for a bunch of the complex types I needed to work with. <i>Then</i> I realized that I need to refer to them in more than one module and it would be better to centralize them rather than having copies of the definitions in each relevant file.</p>

<pre><span style=\"color: #a020f0;\">module</span> <span style=\"color: #228b22;\">TypeSynonyms</span> <span style=\"color: #a020f0;\">where</span>

<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Data.Acid</span> (<span style=\"color: #228b22;\">AcidState</span>)
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #a020f0;\">qualified</span> <span style=\"color: #228b22;\">Data.ByteString.Char8</span> <span style=\"color: #a020f0;\">as</span> <span style=\"color: #228b22;\">BS</span>
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #a020f0;\">qualified</span> <span style=\"color: #228b22;\">Data.Vault</span> <span style=\"color: #a020f0;\">as</span> <span style=\"color: #228b22;\">Vault</span>

<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Network.Wai</span>
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Network.Wai.Session</span> (<span style=\"color: #228b22;\">Session</span>)

<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Control.Monad.Trans.Resource</span> (<span style=\"color: #228b22;\">ResourceT</span>)

<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Model</span>

<span style=\"color: #a020f0;\">type</span> <span style=\"color: #228b22;\">DB</span> <span style=\"color: #a0522d;\">=</span> <span style=\"color: #228b22;\">AcidState</span> <span style=\"color: #228b22;\">GoGetDB</span>
<span style=\"color: #a020f0;\">type</span> <span style=\"color: #228b22;\">RES</span> <span style=\"color: #a0522d;\">=</span> <span style=\"color: #228b22;\">ResourceT</span> <span style=\"color: #228b22;\">IO</span> <span style=\"color: #228b22;\">Response</span>
<span style=\"color: #a020f0;\">type</span> <span style=\"color: #228b22;\">SessionStore</span> <span style=\"color: #a0522d;\">=</span> <span style=\"color: #228b22;\">Vault.Key</span> (<span style=\"color: #228b22;\">Session</span> (<span style=\"color: #228b22;\">ResourceT</span> <span style=\"color: #228b22;\">IO</span>) <span style=\"color: #228b22;\">String</span> <span style=\"color: #228b22;\">String</span>)
<span style=\"color: #a020f0;\">type</span> <span style=\"color: #228b22;\">LookupFN</span> <span style=\"color: #a0522d;\">=</span> (<span style=\"color: #228b22;\">String</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">ResourceT</span> <span style=\"color: #228b22;\">IO</span> (<span style=\"color: #228b22;\">Maybe</span> <span style=\"color: #228b22;\">String</span>))
<span style=\"color: #a020f0;\">type</span> <span style=\"color: #228b22;\">InsertFN</span> <span style=\"color: #a0522d;\">=</span> (<span style=\"color: #228b22;\">String</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">String</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">ResourceT</span> <span style=\"color: #228b22;\">IO</span> <span style=\"color: #228b22;\">()</span>)
<span style=\"color: #a020f0;\">type</span> <span style=\"color: #228b22;\">BSAssoc</span> <span style=\"color: #a0522d;\">=</span> [(<span style=\"color: #228b22;\">BS.ByteString</span>, <span style=\"color: #228b22;\">BS.ByteString</span>)]</pre>

<p>So <code><span style=\"color: #228b22;\">DB</span></code> is shorthand for the database class we're using<a href=\"#foot-Sun-Feb-10-150716EST-2013\" name=\"note-Sun-Feb-10-150716EST-2013\">[10]</a>, <code><span style=\"color: #228b22;\">RES</span></code> is shorthand for the HTTP response <code><span style=\"color: #228b22;\">IO</span></code> type, and <code><span style=\"color: #228b22;\">SessionStore</span></code>/<code><span style=\"color: #228b22;\">LookupFN</span></code>/<code><span style=\"color: #228b22;\">InsertFN</span></code> are session vault and related lookup/insertion functions respectively. I also defined shorthand for a <code><span style=\"color: #228b22;\">ByteString</span></code> association table, since that's how parsed request parameters are stored and they get passed around more than once.</p>

<p>Ok, back to routes.</p>

<p>If you read through that file, you'll notice that a lot of validation and lookup logic in with the routing rather than in the specific handlers that might need them. That sort of happened accidentally, and again, I'm not sure it's the best way to organize these files, but it does have two big advantages. First, because validation and error routing happens beforehand, the handler functions themselves can be exclusively concerned with the successful case. By the time an item-related function is called for example, it's guaranteed to have a request from an existing, logged-in user relating to an existing item. So the handler doesn't need to check for any of those internally. Second, we centralize the validation and lookups. If we expected the handlers themselves to deal with it, then <i>each</i> of the item-related handlers, for example would need to check for an authenticated user, and they'd each have to check that the item they're asked to operate on actually exists. By doing it beforehand, we only do that check once.</p>

<p>I mentioned that this is new to me. That's because the various Python/Ruby frameworks I'm familiar with all represent a routing table as some sort of ordered associative list of regexes and handlers, while all of the Common Lisp/Clojure servers I'm familiar with give you something along the lines of <code>define-handler</code>, which takes a name, handler body <i>and</i> routing URI, removing the need for an explicit central routing structure at all. As I recall, Smalltalk works something like the Lisps and Erlang does something similar to Python/Ruby. So this is the first time I did any real work as part of handler routing, and it seems like it might be a good approach. In a dynamically typed language, I'd be really worried about not making it obvious enough that a handler function is expecting thoroughly validated input rather than doing that part itself, which would increase the chances of a dev passing in <i>un</i>validated input and causing an explosion somewhere. But the type annotations and rigorous static checking take care of that for me here in Haskell-land.</p>

<p>Lets take a look at these simplified handlers we're passing stuff on to.</p>

<h3>The Handlers</h3>

<pre><span style=\"color: #a020f0;\">module</span> <span style=\"color: #228b22;\">Handlers</span> ( listItems, needItem, gotItem, editItem, deleteItem, newItem
                , changePassphrase, register, login ) <span style=\"color: #a020f0;\">where</span>

<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Control.Monad.Trans</span>  (liftIO)

<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Data.Maybe</span> (fromMaybe)
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #a020f0;\">qualified</span> <span style=\"color: #228b22;\">Data.ByteString.Char8</span> <span style=\"color: #a020f0;\">as</span> <span style=\"color: #228b22;\">BS</span>

<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Data.Acid</span> (<span style=\"color: #228b22;\">AcidState</span>, <span style=\"color: #228b22;\">Update</span>, <span style=\"color: #228b22;\">Query</span>, makeAcidic, openLocalState)
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Data.Acid.Advanced</span> (update', query')
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Data.Acid.Local</span> (createCheckpointAndClose)
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Data.IxSet</span> (<span style=\"color: #228b22;\">Indexable</span>(<span style=\"color: #a0522d;\">..</span>), <span style=\"color: #228b22;\">IxSet</span>(<span style=\"color: #a0522d;\">..</span>), (<span style=\"color: #a0522d;\">@=</span>), <span style=\"color: #228b22;\">Proxy</span>(<span style=\"color: #a0522d;\">..</span>), getOne, ixFun, ixSet, insert, delete, toAscList, updateIx )

<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Crypto.Scrypt</span> (<span style=\"color: #228b22;\">EncryptedPass</span>(<span style=\"color: #a0522d;\">..</span>), <span style=\"color: #228b22;\">Pass</span>(<span style=\"color: #a0522d;\">..</span>), defaultParams, encryptPass, verifyPass)

<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">TypeSynonyms</span>
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Util</span>
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Model</span>

<span style=\"color: #b22222;\">--</span><span style=\"color: #b22222;\">-------- HTTP Handlers
</span><span style=\"color: #b22222;\">--</span><span style=\"color: #b22222;\">--- Item Related
</span><span style=\"color: #0000ff;\">listItems</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">DB</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Account</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">RES</span>
<span style=\"color: #0000ff;\">listItems</span> db user <span style=\"color: #a0522d;\">=</span> <span style=\"color: #a020f0;\">do</span>
  resIxItems  <span style=\"color: #a0522d;\">$</span> accountItems user

<span style=\"color: #0000ff;\">needItem</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">DB</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Account</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Item</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">RES</span>
<span style=\"color: #0000ff;\">needItem</span> db user item <span style=\"color: #a0522d;\">=</span> <span style=\"color: #a020f0;\">do</span>
  update' db <span style=\"color: #a0522d;\">$</span> <span style=\"color: #228b22;\">ChangeItem</span> user new
  resIxItems <span style=\"color: #a0522d;\">$</span> updateIx (itemName item) new (accountItems user) 
    <span style=\"color: #a020f0;\">where</span> new <span style=\"color: #a0522d;\">=</span> item { itemStatus <span style=\"color: #a0522d;\">=</span> <span style=\"color: #228b22;\">Need</span> }

<span style=\"color: #0000ff;\">gotItem</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">DB</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Account</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Item</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">RES</span>
<span style=\"color: #0000ff;\">gotItem</span> db user item <span style=\"color: #a0522d;\">=</span> <span style=\"color: #a020f0;\">do</span>
  update' db <span style=\"color: #a0522d;\">$</span> <span style=\"color: #228b22;\">ChangeItem</span> user new
  resIxItems <span style=\"color: #a0522d;\">$</span> updateIx (itemName item) new (accountItems user)
    <span style=\"color: #a020f0;\">where</span> new <span style=\"color: #a0522d;\">=</span> item { itemStatus <span style=\"color: #a0522d;\">=</span> <span style=\"color: #228b22;\">Got</span> }

<span style=\"color: #0000ff;\">editItem</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">DB</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Account</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Item</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Maybe</span> <span style=\"color: #228b22;\">String</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Maybe</span> <span style=\"color: #228b22;\">String</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">RES</span>
<span style=\"color: #0000ff;\">editItem</span> db user item newComment newCount <span style=\"color: #a0522d;\">=</span> <span style=\"color: #a020f0;\">do</span>
  update' db <span style=\"color: #a0522d;\">$</span> <span style=\"color: #228b22;\">ChangeItem</span> user new
  resIxItems <span style=\"color: #a0522d;\">$</span> updateIx (itemName item) new (accountItems user)
    <span style=\"color: #a020f0;\">where</span> new <span style=\"color: #a0522d;\">=</span> item { itemComment <span style=\"color: #a0522d;\">=</span> comment, itemCount <span style=\"color: #a0522d;\">=</span> count }
          comment <span style=\"color: #a0522d;\">=</span> fromMaybe (itemComment item) newComment
          count <span style=\"color: #a0522d;\">=</span> fromMaybe (itemCount item) (maybeRead newCount <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">Maybe</span> <span style=\"color: #228b22;\">Integer</span>)

<span style=\"color: #0000ff;\">deleteItem</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">DB</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Account</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Item</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">RES</span>
<span style=\"color: #0000ff;\">deleteItem</span> db user item <span style=\"color: #a0522d;\">=</span> <span style=\"color: #a020f0;\">do</span>
  update' db <span style=\"color: #a0522d;\">$</span> <span style=\"color: #228b22;\">DeleteItem</span> user item
  resIxItems <span style=\"color: #a0522d;\">$</span> delete item (accountItems user)

<span style=\"color: #0000ff;\">newItem</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">DB</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Account</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">String</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">String</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Integer</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">RES</span>
<span style=\"color: #0000ff;\">newItem</span> db user name comment count <span style=\"color: #a0522d;\">=</span>
  <span style=\"color: #a020f0;\">case</span> getOne <span style=\"color: #a0522d;\">$</span> (accountItems user) <span style=\"color: #a0522d;\">@=</span> name <span style=\"color: #a020f0;\">of</span>
    <span style=\"color: #228b22;\">Just</span> item <span style=\"color: #a0522d;\">-&gt;</span> needItem db user item
    <span style=\"color: #228b22;\">Nothing</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #a020f0;\">do</span>
      update' db <span style=\"color: #a0522d;\">$</span> <span style=\"color: #228b22;\">NewItem</span> user item
      resIxItems <span style=\"color: #a0522d;\">$</span> insert item (accountItems user)
      <span style=\"color: #a020f0;\">where</span> item <span style=\"color: #a0522d;\">=</span> <span style=\"color: #228b22;\">Item</span> { itemName<span style=\"color: #a0522d;\">=</span>name, itemComment<span style=\"color: #a0522d;\">=</span>comment, itemCount<span style=\"color: #a0522d;\">=</span>count, itemStatus<span style=\"color: #a0522d;\">=</span><span style=\"color: #228b22;\">Need</span> }

<span style=\"color: #b22222;\">--</span><span style=\"color: #b22222;\">--- Account Related
</span><span style=\"color: #0000ff;\">changePassphrase</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">DB</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Account</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">String</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">RES</span>
<span style=\"color: #0000ff;\">changePassphrase</span> db user newPassphrase <span style=\"color: #a0522d;\">=</span> <span style=\"color: #a020f0;\">do</span>
  new <span style=\"color: #a0522d;\">&lt;-</span> liftIO <span style=\"color: #a0522d;\">.</span> encryptPass defaultParams <span style=\"color: #a0522d;\">.</span> <span style=\"color: #228b22;\">Pass</span> <span style=\"color: #a0522d;\">$</span> <span style=\"color: #228b22;\">BS</span><span style=\"color: #a0522d;\">.</span>pack newPassphrase
  update' db <span style=\"color: #a0522d;\">.</span> <span style=\"color: #228b22;\">UpdateAccount</span> <span style=\"color: #a0522d;\">$</span> user { accountPassphrase <span style=\"color: #a0522d;\">=</span> unEncryptedPass new }
  resOk user

<span style=\"color: #0000ff;\">register</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">DB</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">InsertFN</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">String</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">String</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">RES</span>
<span style=\"color: #0000ff;\">register</span> db sessionInsert name passphrase <span style=\"color: #a0522d;\">=</span> <span style=\"color: #a020f0;\">do</span>
  pass <span style=\"color: #a0522d;\">&lt;-</span> liftIO <span style=\"color: #a0522d;\">.</span> encryptPass defaultParams <span style=\"color: #a0522d;\">.</span> <span style=\"color: #228b22;\">Pass</span> <span style=\"color: #a0522d;\">$</span> <span style=\"color: #228b22;\">BS</span><span style=\"color: #a0522d;\">.</span>pack passphrase
  existing <span style=\"color: #a0522d;\">&lt;-</span> query' db <span style=\"color: #a0522d;\">$</span> <span style=\"color: #228b22;\">AccountByName</span> name
  <span style=\"color: #a020f0;\">case</span> existing <span style=\"color: #a020f0;\">of</span>
    <span style=\"color: #228b22;\">Nothing</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #a020f0;\">do</span>
      acct <span style=\"color: #a0522d;\">&lt;-</span> update' db <span style=\"color: #a0522d;\">.</span> <span style=\"color: #228b22;\">NewAccount</span> name <span style=\"color: #a0522d;\">$</span> unEncryptedPass pass
      sessionInsert <span style=\"color: #8b2252;\">\"user\"</span> name
      resOk acct
    <span style=\"color: #a020f0;\">_</span> <span style=\"color: #a0522d;\">-&gt;</span> resError <span style=\"color: #8b2252;\">\"User already exists\"</span>

<span style=\"color: #0000ff;\">login</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">DB</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">InsertFN</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">String</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">String</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">RES</span>
<span style=\"color: #0000ff;\">login</span> db sessionInsert name passphrase <span style=\"color: #a0522d;\">=</span> <span style=\"color: #a020f0;\">do</span> 
  res <span style=\"color: #a0522d;\">&lt;-</span> query' db <span style=\"color: #a0522d;\">$</span> <span style=\"color: #228b22;\">AccountByName</span> name
  <span style=\"color: #a020f0;\">case</span> res <span style=\"color: #a020f0;\">of</span>
    <span style=\"color: #228b22;\">Just</span> user <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #a020f0;\">case</span> verifyPass defaultParams (<span style=\"color: #228b22;\">Pass</span> <span style=\"color: #a0522d;\">$</span> <span style=\"color: #228b22;\">BS</span><span style=\"color: #a0522d;\">.</span>pack passphrase) pass <span style=\"color: #a020f0;\">of</span>
      (<span style=\"color: #228b22;\">True</span>, <span style=\"color: #a020f0;\">_</span>) <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #a020f0;\">do</span>
        sessionInsert <span style=\"color: #8b2252;\">\"user\"</span> <span style=\"color: #a0522d;\">$</span> accountName user
        resOk user
      <span style=\"color: #a020f0;\">_</span> <span style=\"color: #a0522d;\">-&gt;</span> resNO
      <span style=\"color: #a020f0;\">where</span> pass <span style=\"color: #a0522d;\">=</span> <span style=\"color: #228b22;\">EncryptedPass</span> <span style=\"color: #a0522d;\">$</span> accountPassphrase user
    <span style=\"color: #a020f0;\">_</span> <span style=\"color: #a0522d;\">-&gt;</span> resNO

<span style=\"color: #a0522d;\">&lt;</span>p<span style=\"color: #a0522d;\">&gt;</span><span style=\"color: #228b22;\">The</span> authentication functions are predictably complicated, but <span style=\"color: #228b22;\">I'll</span> get to them later<span style=\"color: #a0522d;\">.</span> <span style=\"color: #228b22;\">Take</span> a look at the <span style=\"color: #a0522d;\">&lt;</span>code<span style=\"color: #a0522d;\">&gt;</span>needItem<span style=\"color: #a0522d;\">&lt;/</span>code<span style=\"color: #a0522d;\">&gt;</span> function<span style=\"color: #a0522d;\">.&lt;/</span>p<span style=\"color: #a0522d;\">&gt;</span>

<span style=\"color: #0000ff;\">needItem</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">DB</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Account</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Item</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">RES</span>
<span style=\"color: #0000ff;\">needItem</span> db user item <span style=\"color: #a0522d;\">=</span> <span style=\"color: #a020f0;\">do</span>
  update' db <span style=\"color: #a0522d;\">$</span> <span style=\"color: #228b22;\">ChangeItem</span> user new
  resIxItems <span style=\"color: #a0522d;\">$</span> updateIx (itemName item) new (accountItems user) 
    <span style=\"color: #a020f0;\">where</span> new <span style=\"color: #a0522d;\">=</span> item { itemStatus <span style=\"color: #a0522d;\">=</span> <span style=\"color: #228b22;\">Need</span> }</pre>

<p>It's not expecting an account name and item ID to reference by. It's expecting an <code><span style=\"color: #228b22;\">Account</span></code><a href=\"#foot-Sun-Feb-10-150754EST-2013\" name=\"note-Sun-Feb-10-150754EST-2013\">[11]</a> and it's expecting an <code><span style=\"color: #228b22;\">Item</span></code><a href=\"#foot-Sun-Feb-10-150758EST-2013\" name=\"note-Sun-Feb-10-150758EST-2013\">[12]</a>. It does the work of updating the <code><span style=\"color: #228b22;\">DB</span></code>, and then sends back an appropriate response.</p>

<p>Really, I could have made one more general function along the lines of <code>editItem</code>, then called it for <code>need</code>, <code>got</code>, and separate handlers for <code>changeComment</code> and <code>changeCount</code>. In fact, that was officially a <code>note to self</code>.</p>

<span class=\"edit\">EDIT:

The item-related section now reads

<pre><span style=\"color: #0000ff;\">needItem</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">DB</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Account</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Item</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">RES</span>
<span style=\"color: #0000ff;\">needItem</span> db user item <span style=\"color: #a0522d;\">=</span> updateItem db user new
  <span style=\"color: #a020f0;\">where</span> new <span style=\"color: #a0522d;\">=</span> item { itemStatus <span style=\"color: #a0522d;\">=</span> <span style=\"color: #228b22;\">Need</span> }

<span style=\"color: #0000ff;\">gotItem</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">DB</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Account</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Item</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">RES</span>
<span style=\"color: #0000ff;\">gotItem</span> db user item <span style=\"color: #a0522d;\">=</span> updateItem db user new
  <span style=\"color: #a020f0;\">where</span> new <span style=\"color: #a0522d;\">=</span> item { itemStatus <span style=\"color: #a0522d;\">=</span> <span style=\"color: #228b22;\">Got</span> }

<span style=\"color: #0000ff;\">editItem</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">DB</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Account</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Item</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Maybe</span> <span style=\"color: #228b22;\">String</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Maybe</span> <span style=\"color: #228b22;\">String</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">RES</span>
<span style=\"color: #0000ff;\">editItem</span> db user item newComment newCount <span style=\"color: #a0522d;\">=</span> updateItem db user new
  <span style=\"color: #a020f0;\">where</span> new <span style=\"color: #a0522d;\">=</span> item { itemComment <span style=\"color: #a0522d;\">=</span> comment, itemCount <span style=\"color: #a0522d;\">=</span> count }
        comment <span style=\"color: #a0522d;\">=</span> fromMaybe (itemComment item) newComment
        count <span style=\"color: #a0522d;\">=</span> fromMaybe (itemCount item) (maybeRead newCount <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">Maybe</span> <span style=\"color: #228b22;\">Integer</span>)

<span style=\"color: #0000ff;\">updateItem</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">DB</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Account</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Item</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">RES</span>
<span style=\"color: #0000ff;\">updateItem</span> db user newItem <span style=\"color: #a0522d;\">=</span> <span style=\"color: #a020f0;\">do</span>
  update' db <span style=\"color: #a0522d;\">$</span> <span style=\"color: #228b22;\">ChangeItem</span> user newItem
  resIxItems <span style=\"color: #a0522d;\">$</span> updateIx (itemName newItem) newItem (accountItems user)</pre>

Sat, 09 Feb, 2013</span>

<p>The way it's currently written, the most complex of the item-related handlers is <code>editItem</code>, and that's because it needs to optionally change the <code>comment</code>, <code>count</code> or both depending on what's passed in. This is the price you pay for automatic currying and maximally terse partials; those features don't share space well with optional/keyword/rest arguments. The result is that when you need the latter, you need to represent them as mandatory <code><span style=\"color: #228b22;\">Maybe</span></code> args, or as a custom type argument. We've already gone through an example of the first approach. You can see the second if you squint at <code>verifyPass</code> and <code>encryptPass</code>. Specifically, the second argument, <code>defaultParams</code> is of type <code><span style=\"color: #228b22;\">ScryptParams</span></code>, which is defined as</p>

<pre><span style=\"color: #a020f0;\">data</span> <span style=\"color: #228b22;\">ScryptParams</span> <span style=\"color: #a0522d;\">=</span> <span style=\"color: #228b22;\">Params</span> { logN, r, p, bufLen <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">Integer</span>} <span style=\"color: #a020f0;\">deriving</span> (<span style=\"color: #228b22;\">Eq</span>)</pre>

<p>which is really a way of representing keyword args in a language without any. <code>defaultParams</code> itself is defined as</p> 

<pre><span style=\"color: #0000ff;\">defaultParams</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">ScryptParams</span>
<span style=\"color: #0000ff;\">defaultParams</span> <span style=\"color: #a0522d;\">=</span> fromJust (scryptParams 14 8 1)</pre>

<p>and <code>scryptParams</code> is a surprisingly complicated function that validates input and returns <code><span style=\"color: #228b22;\">Params</span> { logN, r, p, bufLen <span style=\"color: #a0522d;\">=</span> 64 }</code>. In Lisp, <code>verifyPass</code> would have an arg line like</p>

<pre>(verify-pass incoming stored <span style=\"color: #228b22;\">&amp;key</span> (logN 14) (r 8) (p 1) (bufLen 64))</pre>

<p>and start off with some <code>assert</code>ions to mimic the validation done in <code>scryptParams</code>. Of course, that's not to say that the Haskell approach is a hack; both approaches have their advantages and disadvantages in practice<a href=\"#foot-Sun-Feb-10-150808EST-2013\" name=\"note-Sun-Feb-10-150808EST-2013\">[13]</a>. In the specific situation I'm dealing with above, since we don't have optionals, it would probably have been better to separate the count and comment changing handlers and let the front-end call the specific one it wants. That was another note to self.</p>

<p>Since we're here, and since I'm the guy who's been going on and on about this, something would be slightly amiss if I failed to note the authentication system, at least in passing. We're using the <a href=\"http://en.wikipedia.org/wiki/Scrypt\"><code>scrypt</code> algorithm</a> to store and verify passwords<a href=\"#foot-Sun-Feb-10-150811EST-2013\" name=\"note-Sun-Feb-10-150811EST-2013\">[14]</a>. If a password is verified we store the users' name in their session cookie. <code>wai-session</code> encrypts its cookies for security, so this system would actually be a simplistic<a href=\"#foot-Sun-Feb-10-150814EST-2013\" name=\"note-Sun-Feb-10-150814EST-2013\">[15]</a> but secure way of maintaining user account as long as we used it over HTTPS.</p>

<p>Lets see, where were we. Oh, right, all those functions beginning with <code>res</code> in the <code><span style=\"color: #228b22;\">Handlers</span></code> and <code><span style=\"color: #228b22;\">Main</span></code> modules aren't built-ins. They're defined in a generically named <code><span style=\"color: #228b22;\">Util</span></code> module.</p>

<h3>Util</h3>

<pre><span style=\"color: #b22222;\">{-</span><span style=\"color: #b22222;\"># LANGUAGE OverloadedStrings #-}</span>
<span style=\"color: #a020f0;\">module</span> <span style=\"color: #228b22;\">Util</span> ( resOk, res404, resError, resNO, resFile, resIxItems, serveStatic
            , resPlaceholder
            , extractOptional, withParams, withPostParams 
            , maybeRead) <span style=\"color: #a020f0;\">where</span>

<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Data.String</span> (fromString)
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Data.Aeson</span>
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #a020f0;\">qualified</span> <span style=\"color: #228b22;\">Data.Text</span> <span style=\"color: #a020f0;\">as</span> <span style=\"color: #228b22;\">Text</span>
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #a020f0;\">qualified</span> <span style=\"color: #228b22;\">Data.ByteString.Char8</span> <span style=\"color: #a020f0;\">as</span> <span style=\"color: #228b22;\">BS</span>

<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Data.IxSet</span> (<span style=\"color: #228b22;\">IxSet</span>(<span style=\"color: #a0522d;\">..</span>), <span style=\"color: #228b22;\">Proxy</span>(<span style=\"color: #a0522d;\">..</span>), toAscList )

<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Network.Wai</span>
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Network.Wai.Parse</span> (parseRequestBody, lbsBackEnd)
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Network.HTTP.Types</span> (ok200, unauthorized401, status404)

<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Control.Monad</span> (sequence, liftM)
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Control.Monad.Trans.Resource</span> (<span style=\"color: #228b22;\">ResourceT</span>)

<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">TypeSynonyms</span>
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Model</span>

<span style=\"color: #0000ff;\">resIxItems</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">IxSet</span> <span style=\"color: #228b22;\">Item</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">RES</span>
<span style=\"color: #0000ff;\">resIxItems</span> body <span style=\"color: #a0522d;\">=</span> resOk <span style=\"color: #a0522d;\">$</span> toAscList (<span style=\"color: #228b22;\">Proxy</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">Proxy</span> <span style=\"color: #228b22;\">ItemStatus</span>) <span style=\"color: #a0522d;\">$</span> body

<span style=\"color: #0000ff;\">resOk</span> <span style=\"color: #a0522d;\">::</span> (<span style=\"color: #228b22;\">ToJSON</span> a) <span style=\"color: #a0522d;\">=&gt;</span> a <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">RES</span>
<span style=\"color: #0000ff;\">resOk</span> body <span style=\"color: #a0522d;\">=</span> return <span style=\"color: #a0522d;\">$</span> responseLBS ok200 <span style=\"color: #228b22;\">[]</span> <span style=\"color: #a0522d;\">$</span> encode body

<span style=\"color: #0000ff;\">resNO</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">RES</span>
<span style=\"color: #0000ff;\">resNO</span> <span style=\"color: #a0522d;\">=</span> resError <span style=\"color: #8b2252;\">\"NO -_-\"</span>

<span style=\"color: #0000ff;\">res404</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">RES</span>
<span style=\"color: #0000ff;\">res404</span> <span style=\"color: #a0522d;\">=</span> return <span style=\"color: #a0522d;\">$</span> responseLBS status404 <span style=\"color: #228b22;\">[]</span> <span style=\"color: #a0522d;\">$</span> fromString <span style=\"color: #8b2252;\">\"Not Found\"</span>

<span style=\"color: #0000ff;\">resPlaceholder</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">RES</span>
<span style=\"color: #0000ff;\">resPlaceholder</span> <span style=\"color: #a0522d;\">=</span> return <span style=\"color: #a0522d;\">$</span> responseLBS status404 <span style=\"color: #228b22;\">[]</span> <span style=\"color: #a0522d;\">$</span> fromString <span style=\"color: #8b2252;\">\"Not implemented yet\"</span>

<span style=\"color: #0000ff;\">resError</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">String</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">RES</span>
<span style=\"color: #0000ff;\">resError</span> message <span style=\"color: #a0522d;\">=</span> return <span style=\"color: #a0522d;\">$</span> responseLBS unauthorized401 <span style=\"color: #228b22;\">[]</span> <span style=\"color: #a0522d;\">$</span> fromString message

<span style=\"color: #0000ff;\">resFile</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">BS.ByteString</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">FilePath</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">RES</span>
<span style=\"color: #0000ff;\">resFile</span> contentType filename <span style=\"color: #a0522d;\">=</span> return <span style=\"color: #a0522d;\">$</span> <span style=\"color: #228b22;\">ResponseFile</span> ok200 [(<span style=\"color: #8b2252;\">\"Content-Type\"</span>, contentType)] filename <span style=\"color: #228b22;\">Nothing</span>

<span style=\"color: #0000ff;\">serveStatic</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">Text.Text</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Text.Text</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">RES</span>
<span style=\"color: #0000ff;\">serveStatic</span> subDir fName <span style=\"color: #a0522d;\">=</span> 
  <span style=\"color: #a020f0;\">case</span> sub <span style=\"color: #a020f0;\">of</span>
    <span style=\"color: #8b2252;\">\"js\"</span> <span style=\"color: #a0522d;\">-&gt;</span> serve <span style=\"color: #8b2252;\">\"text/javascript\"</span>
    <span style=\"color: #8b2252;\">\"css\"</span> <span style=\"color: #a0522d;\">-&gt;</span> serve <span style=\"color: #8b2252;\">\"text/css\"</span>
    <span style=\"color: #8b2252;\">\"img\"</span> <span style=\"color: #a0522d;\">-&gt;</span> serve <span style=\"color: #8b2252;\">\"image/png\"</span>
    <span style=\"color: #a020f0;\">_</span> <span style=\"color: #a0522d;\">-&gt;</span> res404
  <span style=\"color: #a020f0;\">where</span> serve mimeType <span style=\"color: #a0522d;\">=</span> resFile mimeType <span style=\"color: #a0522d;\">$</span> concat [<span style=\"color: #8b2252;\">\"static/\"</span>, sub, <span style=\"color: #8b2252;\">\"/\"</span>, <span style=\"color: #228b22;\">Text</span><span style=\"color: #a0522d;\">.</span>unpack fName]
        sub <span style=\"color: #a0522d;\">=</span> <span style=\"color: #228b22;\">Text</span><span style=\"color: #a0522d;\">.</span>unpack subDir

<span style=\"color: #0000ff;\">withPostParams</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">Request</span> <span style=\"color: #a0522d;\">-&gt;</span> [<span style=\"color: #228b22;\">BS.ByteString</span>] <span style=\"color: #a0522d;\">-&gt;</span> ([<span style=\"color: #228b22;\">String</span>] <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">RES</span>) <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">RES</span>
<span style=\"color: #0000ff;\">withPostParams</span> req paramNames fn <span style=\"color: #a0522d;\">=</span> <span style=\"color: #a020f0;\">do</span>
  (params, <span style=\"color: #a020f0;\">_</span>) <span style=\"color: #a0522d;\">&lt;-</span> parseRequestBody lbsBackEnd req
  withParams params paramNames fn

<span style=\"color: #0000ff;\">withParams</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">BSAssoc</span> <span style=\"color: #a0522d;\">-&gt;</span> [<span style=\"color: #228b22;\">BS.ByteString</span>] <span style=\"color: #a0522d;\">-&gt;</span> ([<span style=\"color: #228b22;\">String</span>] <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">RES</span>) <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">RES</span>
<span style=\"color: #0000ff;\">withParams</span> params paramNames fn <span style=\"color: #a0522d;\">=</span> 
  <span style=\"color: #a020f0;\">case</span> extractParams params paramNames <span style=\"color: #a020f0;\">of</span>
    <span style=\"color: #228b22;\">Just</span> paramVals <span style=\"color: #a0522d;\">-&gt;</span> 
      fn paramVals
    <span style=\"color: #228b22;\">Nothing</span> <span style=\"color: #a0522d;\">-&gt;</span>
      resError <span style=\"color: #a0522d;\">$</span> concat [<span style=\"color: #8b2252;\">\"Need '\"</span>, paramsList, <span style=\"color: #8b2252;\">\"' parameters\"</span>]
      <span style=\"color: #a020f0;\">where</span> paramsList <span style=\"color: #a0522d;\">=</span> <span style=\"color: #228b22;\">BS</span><span style=\"color: #a0522d;\">.</span>unpack <span style=\"color: #a0522d;\">$</span> <span style=\"color: #228b22;\">BS</span><span style=\"color: #a0522d;\">.</span>intercalate <span style=\"color: #8b2252;\">\"', '\"</span> paramNames

<span style=\"color: #0000ff;\">extractOptional</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">BSAssoc</span> <span style=\"color: #a0522d;\">-&gt;</span> [<span style=\"color: #228b22;\">BS.ByteString</span>] <span style=\"color: #a0522d;\">-&gt;</span> [<span style=\"color: #228b22;\">Maybe</span> <span style=\"color: #228b22;\">String</span>]
<span style=\"color: #0000ff;\">extractOptional</span>  params paramNames <span style=\"color: #a0522d;\">=</span> map lookunpack paramNames
  <span style=\"color: #a020f0;\">where</span> lookunpack k <span style=\"color: #a0522d;\">=</span> <span style=\"color: #a020f0;\">do</span>
          res <span style=\"color: #a0522d;\">&lt;-</span> lookup k params
          return <span style=\"color: #a0522d;\">$</span> <span style=\"color: #228b22;\">BS</span><span style=\"color: #a0522d;\">.</span>unpack res

<span style=\"color: #0000ff;\">extractParams</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">BSAssoc</span> <span style=\"color: #a0522d;\">-&gt;</span> [<span style=\"color: #228b22;\">BS.ByteString</span>] <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Maybe</span> [<span style=\"color: #228b22;\">String</span>]
<span style=\"color: #0000ff;\">extractParams</span> params paramNames <span style=\"color: #a0522d;\">=</span> <span style=\"color: #a020f0;\">do</span>
  res <span style=\"color: #a0522d;\">&lt;-</span> allLookups params paramNames
  return <span style=\"color: #a0522d;\">$</span> map <span style=\"color: #228b22;\">BS</span><span style=\"color: #a0522d;\">.</span>unpack res

<span style=\"color: #0000ff;\">maybeRead</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">Read</span> a <span style=\"color: #a0522d;\">=&gt;</span> <span style=\"color: #228b22;\">Maybe</span> <span style=\"color: #228b22;\">String</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Maybe</span> a
<span style=\"color: #0000ff;\">maybeRead</span> str <span style=\"color: #a0522d;\">=</span> <span style=\"color: #a020f0;\">do</span>
  res <span style=\"color: #a0522d;\">&lt;-</span> str
  return <span style=\"color: #a0522d;\">$</span> read res

<span style=\"color: #0000ff;\">allLookups</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">Eq</span> a <span style=\"color: #a0522d;\">=&gt;</span> [(a, a)] <span style=\"color: #a0522d;\">-&gt;</span> [a] <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Maybe</span> [a]
<span style=\"color: #0000ff;\">allLookups</span> assoc keys <span style=\"color: #a0522d;\">=</span> sequence <span style=\"color: #a0522d;\">$</span> map (<span style=\"color: #a0522d;\">\\</span>k <span style=\"color: #a0522d;\">-&gt;</span> lookup k assoc) keys</pre>

<p>The response functions seem fairly self-explanatory. <code>resOk</code> constructs a standard HTTP 200 response, <code>resIxItems</code> takes an <code><span style=\"color: #228b22;\">IxSet</span> <span style=\"color: #228b22;\">Items</span></code> and constructs a response by JSON-encoding it, and the error handlers each return a 404 or perhaps 401 with some error message. The <code>resPlaceholder</code> was something I used as a<a href=\"#foot-Sun-Feb-10-150826EST-2013\" name=\"note-Sun-Feb-10-150826EST-2013\">[16]</a> placeholder in the various <code>routes</code> functions while writing the final handlers. I think the only place a call to it still exists is in the favicon handler.</p>

<p><code>withPostParams</code> and more generally <code>withParams</code> are functions that call functions using the output of serial <code>lookup</code> calls, which would be a pain in the ass to do manually. <code>maybeRead</code> is exactly what it says on the tin; it's a wrapper around Haskell's polymorphic <code>read</code> function wrapped so that it can deal with <code><span style=\"color: #228b22;\">Maybe</span> <span style=\"color: #228b22;\">String</span></code> rather than <code><span style=\"color: #228b22;\">String</span></code> input.</p>

<p>That's ... really it. I'm struggling to describe these a bit more than I usually do because the type signatures tell you a pretty significant amount of what you need to know about a given function. Not everything, obviously, but you'd be surprised how many times I've cut \"<code>foo</code> is self-explanatory\" from this write-up.</p>

<p>The last module left is the model; the one that actually takes all this information and stores it in some way.</p>

<h3>The Model</h3>

<p>Before we dive into the code on this one, I want to highlight two things.</p>

<p>First, I initially did my best to separate the model entirely from the rest of the logic. Going so far as to define \"external\" API functions to call from other modules. That didn't last. Using naked <code>query'</code> and <code>update'</code> caused some type issues that I'm still not entirely clear about, and the code separating the database primitives from other functions was almost tripling the total size of the model. When modularity costs that much, I prefer to chuck it in a bin and resign myself to re-writing most of the application if I need to change out my database engine.</p>

<p>Second, this isn't the first back-end I tried using<a href=\"#foot-Sun-Feb-10-150830EST-2013\" name=\"note-Sun-Feb-10-150830EST-2013\">[17]</a>. Before settling on AcidState, I tried out the haskell-MongoDB interface and <code><a href=\"http://hackage.haskell.org/package/HDBC-sqlite3-2.3.3.0\">hdbc-sqlite3</a></code>, neither of which impressed me much<a href=\"#foot-Sun-Feb-10-150832EST-2013\" name=\"note-Sun-Feb-10-150832EST-2013\">[18]</a>. The Mongo interface just plain does not fit with the Haskll way of doing things. It's a massive, loosely structured, JSON-based key/value store, and since my application mainly responds to clients using JSON feeds, I figured that would be a good fit. One problem is that it turns out that <code>aeson</code><a href=\"#foot-Sun-Feb-10-150835EST-2013\" name=\"note-Sun-Feb-10-150835EST-2013\">[19]</a> has a fundamentally different type architecture than <code>mongodb</code>s BSON, which means that converting between them is ... lets go with <a href=\"http://stackoverflow.com/questions/7996140/haskell-correct-way-to-map-bson-to-json-where-to-put-code\">\"non-trivial\"</a>. The other big problem is that doing k/v lookups in Haskell is harder than dealing with native Haskell types, which means that the easiest way of using Mongo here would have been to define a type, and then specify how it gets encoded/decoded to both JSON and BSON. Given that I'm pretty used to <a href=\"http://api.mongodb.org/python/current/\">pymongo</a> and <a href=\"http://clojuremongodb.info/\">Monger</a>, that's a lot more work than I was expecting. The <code>hdbc</code> interface was slightly better, since relational databases assume some up-front modeling, and slightly worse, since it expected me to write string-template based queries. Both external options required dealing with the actual DB through an external connection, both required a conversion step from associative lists before being converted to JSON, and both seemed to expect me to perform that conversion step.</p>

<p><a href=\"http://hackage.haskell.org/package/acid-state-0.8.2\">AcidState</a> didn't. It serializes most native Haskell types<a href=\"#foot-Sun-Feb-10-150838EST-2013\" name=\"note-Sun-Feb-10-150838EST-2013\">[20]</a>.</p>

<p>Without further ado</p>

<pre><span style=\"color: #b22222;\">{-</span><span style=\"color: #b22222;\"># LANGUAGE DeriveDataTypeable, GeneralizedNewtypeDeriving, RecordWildCards, TemplateHaskell, TypeFamilies, OverloadedStrings #-}</span>
 
<span style=\"color: #a020f0;\">module</span> <span style=\"color: #228b22;\">Model</span> ( initialDB
             , <span style=\"color: #228b22;\">GoGetDB</span>(<span style=\"color: #a0522d;\">..</span>), <span style=\"color: #228b22;\">Account</span>(<span style=\"color: #a0522d;\">..</span>), <span style=\"color: #228b22;\">Item</span>(<span style=\"color: #a0522d;\">..</span>), <span style=\"color: #228b22;\">ItemStatus</span>(<span style=\"color: #a0522d;\">..</span>)
             , <span style=\"color: #228b22;\">NewAccount</span>(<span style=\"color: #a0522d;\">..</span>), <span style=\"color: #228b22;\">UpdateAccount</span>(<span style=\"color: #a0522d;\">..</span>), <span style=\"color: #228b22;\">AccountByName</span>(<span style=\"color: #a0522d;\">..</span>), <span style=\"color: #228b22;\">GetAccounts</span>(<span style=\"color: #a0522d;\">..</span>)
             , <span style=\"color: #228b22;\">NewItem</span>(<span style=\"color: #a0522d;\">..</span>), <span style=\"color: #228b22;\">DeleteItem</span>(<span style=\"color: #a0522d;\">..</span>), <span style=\"color: #228b22;\">ChangeItem</span>(<span style=\"color: #a0522d;\">..</span>) ) <span style=\"color: #a020f0;\">where</span>

<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Control.Monad.Reader</span> (ask)
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Control.Monad.State</span>  (get, put)
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Control.Monad.Trans</span>  (liftIO)
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Control.Monad.IO.Class</span> (<span style=\"color: #228b22;\">MonadIO</span>)

<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Data.Acid</span> (<span style=\"color: #228b22;\">AcidState</span>, <span style=\"color: #228b22;\">Update</span>, <span style=\"color: #228b22;\">Query</span>, makeAcidic, openLocalState)
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Data.Acid.Local</span> (createCheckpointAndClose)
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Data.Acid.Advanced</span> (update', query')
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Data.Data</span> (<span style=\"color: #228b22;\">Data</span>, <span style=\"color: #228b22;\">Typeable</span>)
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Data.IxSet</span> (<span style=\"color: #228b22;\">Indexable</span>(<span style=\"color: #a0522d;\">..</span>), <span style=\"color: #228b22;\">IxSet</span>(<span style=\"color: #a0522d;\">..</span>), (<span style=\"color: #a0522d;\">@=</span>), <span style=\"color: #228b22;\">Proxy</span>(<span style=\"color: #a0522d;\">..</span>), getOne, ixFun, ixSet, insert, delete, toAscList, updateIx )
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Data.SafeCopy</span> (<span style=\"color: #228b22;\">SafeCopy</span>, base, deriveSafeCopy)
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Data.Text.Lazy</span> (toStrict)
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #a020f0;\">qualified</span> <span style=\"color: #228b22;\">Data.Text</span> <span style=\"color: #a020f0;\">as</span> <span style=\"color: #228b22;\">Text</span>
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Data.ByteString.Char8</span> (<span style=\"color: #228b22;\">ByteString</span>, pack)
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Data.Maybe</span>
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Data.Aeson</span>

<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Crypto.Scrypt</span> (<span style=\"color: #228b22;\">EncryptedPass</span>(<span style=\"color: #a0522d;\">..</span>), <span style=\"color: #228b22;\">Pass</span>(<span style=\"color: #a0522d;\">..</span>), defaultParams, encryptPass, verifyPass)

<span style=\"color: #b22222;\">--</span><span style=\"color: #b22222;\">-------- Base types (for IxSet and Account components)
</span><span style=\"color: #a020f0;\">newtype</span> <span style=\"color: #228b22;\">AccountId</span> <span style=\"color: #a0522d;\">=</span> <span style=\"color: #228b22;\">AccountId</span> { unAccountId <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">Integer</span> } <span style=\"color: #a020f0;\">deriving</span> (<span style=\"color: #228b22;\">Eq</span>, <span style=\"color: #228b22;\">Ord</span>, <span style=\"color: #228b22;\">Data</span>, <span style=\"color: #228b22;\">Show</span>, <span style=\"color: #228b22;\">Enum</span>, <span style=\"color: #228b22;\">Typeable</span>, <span style=\"color: #228b22;\">SafeCopy</span>)

<span style=\"color: #b22222;\">--</span><span style=\"color: #b22222;\">-------- Item-Related types
</span><span style=\"color: #a020f0;\">data</span> <span style=\"color: #228b22;\">ItemStatus</span> <span style=\"color: #a0522d;\">=</span> <span style=\"color: #228b22;\">Need</span> <span style=\"color: #a0522d;\">|</span> <span style=\"color: #228b22;\">Got</span> <span style=\"color: #a020f0;\">deriving</span> (<span style=\"color: #228b22;\">Eq</span>, <span style=\"color: #228b22;\">Ord</span>, <span style=\"color: #228b22;\">Data</span>, <span style=\"color: #228b22;\">Enum</span>, <span style=\"color: #228b22;\">Read</span>, <span style=\"color: #228b22;\">Show</span>, <span style=\"color: #228b22;\">Typeable</span>)
<span style=\"color: #0000ff;\">deriveSafeCopy</span> 0 'base ''ItemStatus

<span style=\"color: #a020f0;\">data</span> <span style=\"color: #228b22;\">Item</span> <span style=\"color: #a0522d;\">=</span> <span style=\"color: #228b22;\">Item</span> { itemName <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">String</span>, itemComment <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">String</span>, itemStatus <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">ItemStatus</span>, itemCount <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">Integer</span> } <span style=\"color: #a020f0;\">deriving</span> (<span style=\"color: #228b22;\">Eq</span>, <span style=\"color: #228b22;\">Ord</span>, <span style=\"color: #228b22;\">Show</span>, <span style=\"color: #228b22;\">Data</span>, <span style=\"color: #228b22;\">Typeable</span>)
<span style=\"color: #0000ff;\">deriveSafeCopy</span> 0 'base ''Item
<span style=\"color: #a020f0;\">instance</span> <span style=\"color: #228b22;\">Indexable</span> <span style=\"color: #228b22;\">Item</span> <span style=\"color: #a020f0;\">where</span>
  empty <span style=\"color: #a0522d;\">=</span> ixSet [ ixFun <span style=\"color: #a0522d;\">$</span> (<span style=\"color: #228b22;\">:[]</span>) <span style=\"color: #a0522d;\">.</span> itemName
                , ixFun <span style=\"color: #a0522d;\">$</span> (<span style=\"color: #228b22;\">:[]</span>) <span style=\"color: #a0522d;\">.</span> itemStatus
                , ixFun <span style=\"color: #a0522d;\">$</span> (<span style=\"color: #228b22;\">:[]</span>) <span style=\"color: #a0522d;\">.</span> itemCount
                ]
<span style=\"color: #a020f0;\">instance</span> <span style=\"color: #228b22;\">ToJSON</span> <span style=\"color: #228b22;\">Item</span> <span style=\"color: #a020f0;\">where</span>
  toJSON (<span style=\"color: #228b22;\">Item</span> name comment status count) <span style=\"color: #a0522d;\">=</span> object [ <span style=\"color: #8b2252;\">\"name\"</span> <span style=\"color: #a0522d;\">.=</span> name
                                                   , <span style=\"color: #8b2252;\">\"comment\"</span> <span style=\"color: #a0522d;\">.=</span> comment
                                                   , <span style=\"color: #8b2252;\">\"status\"</span> <span style=\"color: #a0522d;\">.=</span> show status
                                                   , <span style=\"color: #8b2252;\">\"count\"</span> <span style=\"color: #a0522d;\">.=</span> count 
                                                   ]

<span style=\"color: #b22222;\">--</span><span style=\"color: #b22222;\">-------- Account
</span><span style=\"color: #a020f0;\">data</span> <span style=\"color: #228b22;\">Account</span> <span style=\"color: #a0522d;\">=</span> <span style=\"color: #228b22;\">Account</span> { accountId <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">AccountId</span>
                       , accountName <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">String</span> 
                       , accountPassphrase <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">ByteString</span>
                       , accountItems <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">IxSet</span> <span style=\"color: #228b22;\">Item</span>
                       } <span style=\"color: #a020f0;\">deriving</span> (<span style=\"color: #228b22;\">Eq</span>, <span style=\"color: #228b22;\">Show</span>, <span style=\"color: #228b22;\">Data</span>, <span style=\"color: #228b22;\">Typeable</span>) 

<span style=\"color: #a020f0;\">instance</span> <span style=\"color: #228b22;\">Ord</span> <span style=\"color: #228b22;\">Account</span> <span style=\"color: #a020f0;\">where</span>
  a <span style=\"color: #a0522d;\">`compare`</span> b <span style=\"color: #a0522d;\">=</span> (accountId a) <span style=\"color: #a0522d;\">`compare`</span> (accountId b)

<span style=\"color: #0000ff;\">deriveSafeCopy</span> 0 'base ''Account
<span style=\"color: #a020f0;\">instance</span> <span style=\"color: #228b22;\">Indexable</span> <span style=\"color: #228b22;\">Account</span> <span style=\"color: #a020f0;\">where</span>
  empty <span style=\"color: #a0522d;\">=</span> ixSet [ ixFun <span style=\"color: #a0522d;\">$</span> (<span style=\"color: #228b22;\">:[]</span>) <span style=\"color: #a0522d;\">.</span> accountId
                , ixFun <span style=\"color: #a0522d;\">$</span> (<span style=\"color: #228b22;\">:[]</span>) <span style=\"color: #a0522d;\">.</span> accountName 
                ]

<span style=\"color: #a020f0;\">instance</span> <span style=\"color: #228b22;\">ToJSON</span> <span style=\"color: #228b22;\">Account</span> <span style=\"color: #a020f0;\">where</span>
  toJSON (<span style=\"color: #228b22;\">Account</span> id name <span style=\"color: #a020f0;\">_</span> items) <span style=\"color: #a0522d;\">=</span> object [ <span style=\"color: #8b2252;\">\"id\"</span> <span style=\"color: #a0522d;\">.=</span> unAccountId id
                                            , <span style=\"color: #8b2252;\">\"name\"</span> <span style=\"color: #a0522d;\">.=</span> name
                                            , <span style=\"color: #8b2252;\">\"items\"</span> <span style=\"color: #a0522d;\">.=</span> toAscList (<span style=\"color: #228b22;\">Proxy</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">Proxy</span> <span style=\"color: #228b22;\">ItemStatus</span>) items]

<span style=\"color: #b22222;\">--</span><span style=\"color: #b22222;\">-------- DB root type
</span>  <span style=\"color: #b22222;\">--</span><span style=\"color: #b22222;\">- This is declared so that acid-state has a top level element to store
</span><span style=\"color: #a020f0;\">data</span> <span style=\"color: #228b22;\">GoGetDB</span> <span style=\"color: #a0522d;\">=</span> <span style=\"color: #228b22;\">GoGetDB</span> { nextAccountId <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">AccountId</span>, accounts <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">IxSet</span> <span style=\"color: #228b22;\">Account</span>
                       } <span style=\"color: #a020f0;\">deriving</span> (<span style=\"color: #228b22;\">Show</span>, <span style=\"color: #228b22;\">Data</span>, <span style=\"color: #228b22;\">Typeable</span>)
<span style=\"color: #0000ff;\">deriveSafeCopy</span> 0 'base ''GoGetDB

<span style=\"color: #0000ff;\">initialDB</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">GoGetDB</span>
<span style=\"color: #0000ff;\">initialDB</span> <span style=\"color: #a0522d;\">=</span> <span style=\"color: #228b22;\">GoGetDB</span> { nextAccountId <span style=\"color: #a0522d;\">=</span> <span style=\"color: #228b22;\">AccountId</span> 0, accounts <span style=\"color: #a0522d;\">=</span> empty }

<span style=\"color: #b22222;\">--</span><span style=\"color: #b22222;\">-------- Insertion Functions
</span><span style=\"color: #0000ff;\">newAccount</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">String</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">ByteString</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Update</span> <span style=\"color: #228b22;\">GoGetDB</span> <span style=\"color: #228b22;\">Account</span>
<span style=\"color: #0000ff;\">newAccount</span> name passphrase <span style=\"color: #a0522d;\">=</span> <span style=\"color: #a020f0;\">do</span>
  db<span style=\"color: #a0522d;\">@</span><span style=\"color: #228b22;\">GoGetDB</span>{<span style=\"color: #a0522d;\">..</span>} <span style=\"color: #a0522d;\">&lt;-</span> get
  <span style=\"color: #a020f0;\">let</span> account <span style=\"color: #a0522d;\">=</span> <span style=\"color: #228b22;\">Account</span> { accountId <span style=\"color: #a0522d;\">=</span> nextAccountId
                        , accountName <span style=\"color: #a0522d;\">=</span> name
                        , accountPassphrase <span style=\"color: #a0522d;\">=</span> passphrase
                        , accountItems <span style=\"color: #a0522d;\">=</span> empty
                        }
  put <span style=\"color: #a0522d;\">$</span> db { nextAccountId <span style=\"color: #a0522d;\">=</span> succ nextAccountId
           , accounts <span style=\"color: #a0522d;\">=</span> insert account accounts 
           }
  return account

<span style=\"color: #0000ff;\">deleteItem</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">Account</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Item</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Update</span> <span style=\"color: #228b22;\">GoGetDB</span> <span style=\"color: #228b22;\">()</span>
<span style=\"color: #0000ff;\">deleteItem</span> acct item <span style=\"color: #a0522d;\">=</span> <span style=\"color: #a020f0;\">do</span>
  db<span style=\"color: #a0522d;\">@</span><span style=\"color: #228b22;\">GoGetDB</span>{<span style=\"color: #a0522d;\">..</span>} <span style=\"color: #a0522d;\">&lt;-</span> get
  put <span style=\"color: #a0522d;\">$</span> db { accounts <span style=\"color: #a0522d;\">=</span> updateIx (accountId acct) removed accounts }
    <span style=\"color: #a020f0;\">where</span> removed <span style=\"color: #a0522d;\">=</span> acct { accountItems <span style=\"color: #a0522d;\">=</span> delete item (accountItems acct)}

<span style=\"color: #0000ff;\">newItem</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">Account</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Item</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Update</span> <span style=\"color: #228b22;\">GoGetDB</span> <span style=\"color: #228b22;\">()</span>
<span style=\"color: #0000ff;\">newItem</span> acct item <span style=\"color: #a0522d;\">=</span> <span style=\"color: #a020f0;\">do</span>
  db<span style=\"color: #a0522d;\">@</span><span style=\"color: #228b22;\">GoGetDB</span>{<span style=\"color: #a0522d;\">..</span>} <span style=\"color: #a0522d;\">&lt;-</span> get
  put <span style=\"color: #a0522d;\">$</span> db { accounts <span style=\"color: #a0522d;\">=</span> updateIx (accountId acct) added accounts }
    <span style=\"color: #a020f0;\">where</span> added <span style=\"color: #a0522d;\">=</span> acct { accountItems <span style=\"color: #a0522d;\">=</span> insert item (accountItems acct) }

<span style=\"color: #0000ff;\">changeItem</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">Account</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Item</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Update</span> <span style=\"color: #228b22;\">GoGetDB</span> <span style=\"color: #228b22;\">()</span>
<span style=\"color: #0000ff;\">changeItem</span> acct item <span style=\"color: #a0522d;\">=</span> <span style=\"color: #a020f0;\">do</span>
  db<span style=\"color: #a0522d;\">@</span><span style=\"color: #228b22;\">GoGetDB</span>{<span style=\"color: #a0522d;\">..</span>} <span style=\"color: #a0522d;\">&lt;-</span> get
  put <span style=\"color: #a0522d;\">$</span> db { accounts <span style=\"color: #a0522d;\">=</span> updateIx (accountId acct) changed accounts }
    <span style=\"color: #a020f0;\">where</span> changed <span style=\"color: #a0522d;\">=</span> acct { accountItems <span style=\"color: #a0522d;\">=</span> updateIx (itemName item) item (accountItems acct)}

<span style=\"color: #0000ff;\">updateAccount</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">Account</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Update</span> <span style=\"color: #228b22;\">GoGetDB</span> <span style=\"color: #228b22;\">()</span>
<span style=\"color: #0000ff;\">updateAccount</span> u <span style=\"color: #a0522d;\">=</span> <span style=\"color: #a020f0;\">do</span>
  db<span style=\"color: #a0522d;\">@</span><span style=\"color: #228b22;\">GoGetDB</span>{<span style=\"color: #a0522d;\">..</span>} <span style=\"color: #a0522d;\">&lt;-</span> get
  put <span style=\"color: #a0522d;\">$</span> db { accounts <span style=\"color: #a0522d;\">=</span> updateIx (accountId u) u accounts }

<span style=\"color: #b22222;\">--</span><span style=\"color: #b22222;\">-------- Query Functions
</span><span style=\"color: #0000ff;\">getAccounts</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">Query</span> <span style=\"color: #228b22;\">GoGetDB</span> [<span style=\"color: #228b22;\">Account</span>]
<span style=\"color: #0000ff;\">getAccounts</span> <span style=\"color: #a0522d;\">=</span> <span style=\"color: #a020f0;\">do</span>
  <span style=\"color: #228b22;\">GoGetDB</span>{<span style=\"color: #a0522d;\">..</span>} <span style=\"color: #a0522d;\">&lt;-</span> ask
  return <span style=\"color: #a0522d;\">$</span> toAscList (<span style=\"color: #228b22;\">Proxy</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">Proxy</span> <span style=\"color: #228b22;\">AccountId</span>) accounts

<span style=\"color: #0000ff;\">getAccount</span> <span style=\"color: #a0522d;\">::</span> (<span style=\"color: #228b22;\">Typeable</span> a) <span style=\"color: #a0522d;\">=&gt;</span> a <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Query</span> <span style=\"color: #228b22;\">GoGetDB</span> (<span style=\"color: #228b22;\">Maybe</span> <span style=\"color: #228b22;\">Account</span>)
<span style=\"color: #b22222;\">-- </span><span style=\"color: #b22222;\">separate so we can get accounts by something else at some point in the future
</span><span style=\"color: #0000ff;\">getAccount</span> ix <span style=\"color: #a0522d;\">=</span> <span style=\"color: #a020f0;\">do</span>
  <span style=\"color: #228b22;\">GoGetDB</span>{<span style=\"color: #a0522d;\">..</span>} <span style=\"color: #a0522d;\">&lt;-</span> ask
  return <span style=\"color: #a0522d;\">$</span> getOne <span style=\"color: #a0522d;\">$</span> accounts <span style=\"color: #a0522d;\">@=</span> ix

<span style=\"color: #0000ff;\">accountByName</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">String</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Query</span> <span style=\"color: #228b22;\">GoGetDB</span> (<span style=\"color: #228b22;\">Maybe</span> <span style=\"color: #228b22;\">Account</span>)
<span style=\"color: #0000ff;\">accountByName</span> name <span style=\"color: #a0522d;\">=</span> getAccount name

<span style=\"color: #0000ff;\">makeAcidic</span> ''GoGetDB [ 'newAccount, 'newItem, 'deleteItem, 'changeItem, 'updateAccount, 'accountByName, 'getAccounts ]</pre>

<p>The temptation is really strong to say \"this is self-explanatory\", but that's only true if you've also gone through the <a href=\"http://happstack.com/docs/crashcourse/AcidState.html\">relevant Happstack Crash Course section</a>. Basically, AcidState is a Haskell-native noSQL data store. You define Haskell types that represent stuff you want to store, and it serializes them to disk through an interface that looks pretty close to <a href=\"http://www.haskell.org/haskellwiki/State_Monad\">the state monad</a> if you squint hard enough.</p>

<p>I want to draw your attention to a few things.</p>

<pre><span style=\"color: #b22222;\">--</span><span style=\"color: #b22222;\">-------- Account
</span><span style=\"color: #a020f0;\">data</span> <span style=\"color: #228b22;\">Account</span> <span style=\"color: #a0522d;\">=</span> <span style=\"color: #228b22;\">Account</span> { accountId <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">AccountId</span>
                       , accountName <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">String</span> 
                       , accountPassphrase <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">ByteString</span>
                       , accountItems <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">IxSet</span> <span style=\"color: #228b22;\">Item</span>
                       } <span style=\"color: #a020f0;\">deriving</span> (<span style=\"color: #228b22;\">Eq</span>, <span style=\"color: #228b22;\">Show</span>, <span style=\"color: #228b22;\">Data</span>, <span style=\"color: #228b22;\">Typeable</span>) 

<span style=\"color: #a020f0;\">instance</span> <span style=\"color: #228b22;\">Ord</span> <span style=\"color: #228b22;\">Account</span> <span style=\"color: #a020f0;\">where</span>
  a <span style=\"color: #a0522d;\">`compare`</span> b <span style=\"color: #a0522d;\">=</span> (accountId a) <span style=\"color: #a0522d;\">`compare`</span> (accountId b)

<span style=\"color: #0000ff;\">deriveSafeCopy</span> 0 'base ''Account
<span style=\"color: #a020f0;\">instance</span> <span style=\"color: #228b22;\">Indexable</span> <span style=\"color: #228b22;\">Account</span> <span style=\"color: #a020f0;\">where</span>
  empty <span style=\"color: #a0522d;\">=</span> ixSet [ ixFun <span style=\"color: #a0522d;\">$</span> (<span style=\"color: #228b22;\">:[]</span>) <span style=\"color: #a0522d;\">.</span> accountId
                , ixFun <span style=\"color: #a0522d;\">$</span> (<span style=\"color: #228b22;\">:[]</span>) <span style=\"color: #a0522d;\">.</span> accountName 
                ]

<span style=\"color: #a020f0;\">instance</span> <span style=\"color: #228b22;\">ToJSON</span> <span style=\"color: #228b22;\">Account</span> <span style=\"color: #a020f0;\">where</span>
  toJSON (<span style=\"color: #228b22;\">Account</span> id name <span style=\"color: #a020f0;\">_</span> items) <span style=\"color: #a0522d;\">=</span> object [ <span style=\"color: #8b2252;\">\"id\"</span> <span style=\"color: #a0522d;\">.=</span> unAccountId id
                                            , <span style=\"color: #8b2252;\">\"name\"</span> <span style=\"color: #a0522d;\">.=</span> name
                                            , <span style=\"color: #8b2252;\">\"items\"</span> <span style=\"color: #a0522d;\">.=</span> toAscList (<span style=\"color: #228b22;\">Proxy</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">Proxy</span> <span style=\"color: #228b22;\">ItemStatus</span>) items]</pre>

<p>This is the full definition of the <code><span style=\"color: #228b22;\">Account</span></code> type. The <code><span style=\"color: #228b22;\">ToJSON</span></code> declaration allows <code>aeson</code> to serialize this type for the front-end, and the <code><span style=\"color: #228b22;\">Indexable</span></code> class lets <code><span style=\"color: #228b22;\">IxSet</span></code> construct collections of <code><span style=\"color: #228b22;\">Account</span></code>s. <code><span style=\"color: #228b22;\">IxSet</span></code> itself is a multi-indexing set implementation that I'm using to store both the accounts and shopping list items for this project.</p>

<p>The <code>deriveSafeCopy</code> call there is actually a <code>TemplateHaskell</code> invocation, and not a regular function<a href=\"#foot-Sun-Feb-10-150855EST-2013\" name=\"note-Sun-Feb-10-150855EST-2013\">[21]</a>. Basically what that means is that this call will be resolved at compile time; in that sense, TemplateHaskell is a very restricted answer to Lisp macros.</p>

<p>Next, note the type of <code>accountPassphrase</code>. If you take a look at the <code>login</code> handler from earlier, you'll notice something a bit odd.</p>

<pre><span style=\"color: #0000ff;\">login</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">DB</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">InsertFN</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">String</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">String</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">RES</span>
<span style=\"color: #0000ff;\">login</span> db sessionInsert name passphrase <span style=\"color: #a0522d;\">=</span> <span style=\"color: #a020f0;\">do</span> 
  res <span style=\"color: #a0522d;\">&lt;-</span> query' db <span style=\"color: #a0522d;\">$</span> <span style=\"color: #228b22;\">AccountByName</span> name
  <span style=\"color: #a020f0;\">case</span> res <span style=\"color: #a020f0;\">of</span>
    <span style=\"color: #228b22;\">Just</span> user <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #a020f0;\">case</span> verifyPass defaultParams (<span style=\"color: #228b22;\">Pass</span> <span style=\"color: #a0522d;\">$</span> <span style=\"color: #228b22;\">BS</span><span style=\"color: #a0522d;\">.</span>pack passphrase) pass <span style=\"color: #a020f0;\">of</span>
      (<span style=\"color: #228b22;\">True</span>, <span style=\"color: #a020f0;\">_</span>) <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #a020f0;\">do</span>
        sessionInsert <span style=\"color: #8b2252;\">\"user\"</span> <span style=\"color: #a0522d;\">$</span> accountName user
        resOk user
      <span style=\"color: #a020f0;\">_</span> <span style=\"color: #a0522d;\">-&gt;</span> resNO
      <span style=\"color: #a020f0;\">where</span> pass <span style=\"color: #a0522d;\">=</span> <span style=\"color: #228b22;\">EncryptedPass</span> <span style=\"color: #a0522d;\">$</span> accountPassphrase user
    <span style=\"color: #a020f0;\">_</span> <span style=\"color: #a0522d;\">-&gt;</span> resNO</pre>

<p>We're storing a <code><span style=\"color: #228b22;\">ByteString</span></code> in the database, but converting it to/from the type <code><span style=\"color: #228b22;\">EncryptedPass</span></code>. We don't have to do that with other types, but the developers who wrote Haskell's <code>scrypt</code> library didn't bother deriving <code><span style=\"color: #228b22;\">Typeable</span></code> for their types. There's quite likely a way for me to derive it manually, but that seems like more trouble in this particular instance. I just wanted to point out that even though we're doing type conversion to fit something into an AcidState DB here, that's not the ideal case, and you typically don't have to.</p>

<p>Finally, note that except for <code>initialDB</code>, all the exports from the <code><span style=\"color: #228b22;\">Model</span></code> module are types rather than functions</p>

<pre><span style=\"color: #a020f0;\">module</span> <span style=\"color: #228b22;\">Model</span> ( initialDB
             , <span style=\"color: #228b22;\">GoGetDB</span>(<span style=\"color: #a0522d;\">..</span>), <span style=\"color: #228b22;\">Account</span>(<span style=\"color: #a0522d;\">..</span>), <span style=\"color: #228b22;\">Item</span>(<span style=\"color: #a0522d;\">..</span>), <span style=\"color: #228b22;\">ItemStatus</span>(<span style=\"color: #a0522d;\">..</span>)
             , <span style=\"color: #228b22;\">NewAccount</span>(<span style=\"color: #a0522d;\">..</span>), <span style=\"color: #228b22;\">UpdateAccount</span>(<span style=\"color: #a0522d;\">..</span>), <span style=\"color: #228b22;\">AccountByName</span>(<span style=\"color: #a0522d;\">..</span>), <span style=\"color: #228b22;\">GetAccounts</span>(<span style=\"color: #a0522d;\">..</span>)
             , <span style=\"color: #228b22;\">NewItem</span>(<span style=\"color: #a0522d;\">..</span>), <span style=\"color: #228b22;\">DeleteItem</span>(<span style=\"color: #a0522d;\">..</span>), <span style=\"color: #228b22;\">ChangeItem</span>(<span style=\"color: #a0522d;\">..</span>) ) <span style=\"color: #a020f0;\">where</span></pre>

<p>If you take a look at any <code>query'</code> or <code>update'</code> call in the handlers, you'll note that they work by passing arguments to one of these types. What's actually happening is that AcidState is forward-journaling your requests so that it can fulfill the ACID guarantees. The trouble is that functions aren't inherently serializable in Haskell. So what it expects you to do is define the appropriate database functions, then use <code>makeAcidic</code> to derive the relevant, serializable types.</p>

<p>That about does it for the back end. I was going to go over the client-side code too, but this piece is getting quite long already. I'll likely write a follow-up to show you how I ended up actually calling the JSON-based handlers I describe above, but in the meantime, you'll have to check out <a href=\"https://github.com/Inaimathi/goget/blob/master/static/js/goget.js\">goget.js</a> and <a href=\"https://github.com/Inaimathi/goget/blob/master/static/index.html\">index.html</a> in the <a href=\"https://github.com/Inaimathi/goget/tree/master/static\">static folder</a> of the <a href=\"https://github.com/Inaimathi/goget\">github project</a>.</p>


<hr />
<h5>Footnotes</h5>
<p>1 - <a href=\"#note-Sun-Feb-10-150629EST-2013\" name=\"foot-Sun-Feb-10-150629EST-2013\">[back]</a> - Which has progressed to three-month-old status, in case you care.</p>

<p>2 - <a href=\"#note-Sun-Feb-10-150633EST-2013\" name=\"foot-Sun-Feb-10-150633EST-2013\">[back]</a> - Or whatever JS framework the server-side framework team picked out.</p>
<p>3 - <a href=\"#note-Sun-Feb-10-150637EST-2013\" name=\"foot-Sun-Feb-10-150637EST-2013\">[back]</a> - So good luck getting a front-end specialist in later.</p>
<p>4 - <a href=\"#note-Sun-Feb-10-150641EST-2013\" name=\"foot-Sun-Feb-10-150641EST-2013\">[back]</a> - So any changes, regardless how trivial, actually need a re-compile and re-run on the final server.</p>
<p>5 - <a href=\"#note-Sun-Feb-10-150645EST-2013\" name=\"foot-Sun-Feb-10-150645EST-2013\">[back]</a> - Which shouldn't surprise you in the least: this just in languages that <a href=\"http://en.wikiquote.org/wiki/Alan_Perlis#Epigrams_on_Programming.2C_1982\">affect the way you think about programming</a> expect you to think differently about programming.</p>

<p>6 - <a href=\"#note-Sun-Feb-10-150651EST-2013\" name=\"foot-Sun-Feb-10-150651EST-2013\">[back]</a> - Modulo the obvious state problems you have from potentially having some intermediary values defined in the image.</p>
<p>7 - <a href=\"#note-Sun-Feb-10-150655EST-2013\" name=\"foot-Sun-Feb-10-150655EST-2013\">[back]</a> - That <a href=\"http://stackoverflow.com/questions/14721720/ambiguous-type-variable-in-acidstate-functions\">SO question</a> has an example in the <a href=\"http://stackoverflow.com/a/14738171\">answer</a>s' comments; the type <code><span style=\"color: #228b22;\">EventResult</span></code> is reported as belonging to the module <code><span style=\"color: #228b22;\">Data</span><span style=\"color: #0000ff;\">.</span><span style=\"color: #228b22;\">Acid</span><span style=\"color: #a0522d;\">.</span><span style=\"color: #228b22;\">Common</span></code>, but that file actually doesn't exist. What's actually happening is that <code>Common</code> is a hidden module in the <code>AcidState</code> project, and another module is responsible for exporting its symbols. I didn't know this just from looking. The reason it matters is that when you want to make a type signature explicit by <i>importing</i> the relevant module, GHCi will tell you where a given type is <b>defined</b> and not where it's <b>exported</b>. Fun times.</p>

<p>8 - <a href=\"#note-Sun-Feb-10-150702EST-2013\" name=\"foot-Sun-Feb-10-150702EST-2013\">[back]</a> - Which kind of makes sense, because conceptually speaking, a purely functional REPL for a lazy language would more or less have to be implemented in the IO monad.</p>
<p>9 - <a href=\"#note-Sun-Feb-10-150705EST-2013\" name=\"foot-Sun-Feb-10-150705EST-2013\">[back]</a> - If slightly clunkier than in CL or Python.</p>
<p>10 - <a href=\"#note-Sun-Feb-10-150716EST-2013\" name=\"foot-Sun-Feb-10-150716EST-2013\">[back]</a> - There'll be more on that later, obviously. Do note that this is only a reasonable thing to do because we only use one database class for our model; if we used several, we'd need to figure something else out. To be fair though, I'm having a hard time imagining a situation that would call for using several DB classes in a single project.</p>

<p>11 - <a href=\"#note-Sun-Feb-10-150754EST-2013\" name=\"foot-Sun-Feb-10-150754EST-2013\">[back]</a> - Meaning lookup has been done and validated for it.</p>
<p>12 - <a href=\"#note-Sun-Feb-10-150758EST-2013\" name=\"foot-Sun-Feb-10-150758EST-2013\">[back]</a> - Meaning we've already collapsed the waveform and made sure that the user wants to <code>need</code> an existing item, otherwise we'd be expecting a <code><span style=\"color: #228b22;\">Maybe</span> <span style=\"color: #228b22;\">Item</span></code> here instead.</p>

<p>13 - <a href=\"#note-Sun-Feb-10-150808EST-2013\" name=\"foot-Sun-Feb-10-150808EST-2013\">[back]</a> - In fact, I've been meaning to write a piece comparing the two, I just haven't gotten around to it.</p>
<p>14 - <a href=\"#note-Sun-Feb-10-150811EST-2013\" name=\"foot-Sun-Feb-10-150811EST-2013\">[back]</a> - Which you still shouldn't count as a flat out recommendation, but I am using it, and I do intend to deploy this, so draw what conclusions you like.</p>
<p>15 - <a href=\"#note-Sun-Feb-10-150814EST-2013\" name=\"foot-Sun-Feb-10-150814EST-2013\">[back]</a> - We don't do any kind of throttling on login, aside from the complexity of the <code>scrypt</code> algorithm itself, and we don't check registration requests for automation with <a href=\"http://www.google.com/recaptcha\">recaptcha</a> or similar. I'm not sure how I feel about the first, while the second seems entirely unnecessary for an acount that doesn't allow sending any kind of email, or doing anything other than managing associated data.</p>

<p>16 - <a href=\"#note-Sun-Feb-10-150826EST-2013\" name=\"foot-Sun-Feb-10-150826EST-2013\">[back]</a> - Surprise.</p>

<p>17 - <a href=\"#note-Sun-Feb-10-150830EST-2013\" name=\"foot-Sun-Feb-10-150830EST-2013\">[back]</a> - Which, on reflection, is probably why I over-estimated the need to switch out databases at first.</p>

<p>18 - <a href=\"#note-Sun-Feb-10-150832EST-2013\" name=\"foot-Sun-Feb-10-150832EST-2013\">[back]</a> - Although I really could have put a project this small together with either if I felt like it.</p>

<p>19 - <a href=\"#note-Sun-Feb-10-150835EST-2013\" name=\"foot-Sun-Feb-10-150835EST-2013\">[back]</a> - Haskell's main JSON encoding library.</p>

<p>20 - <a href=\"#note-Sun-Feb-10-150838EST-2013\" name=\"foot-Sun-Feb-10-150838EST-2013\">[back]</a> - In order to serialize a type, you need to <code>derive</code> <code><span style=\"color: #228b22;\">Typeable</span></code> and <code><span style=\"color: #228b22;\">SafeCopy</span></code>. They're both trivial tasks for your own types, assuming you've got <code>TemplateHaskell</code> on, but are non-trivial for types you're including from modules you didn't write. You'll see an example of this when you see how I store encrypted passwords later on. That's the only type I needed to massage myself though; had I used an option other than AcidState, I'd have had to do the same for all of them.</p>

<p>21 - <a href=\"#note-Sun-Feb-10-150855EST-2013\" name=\"foot-Sun-Feb-10-150855EST-2013\">[back]</a> - You can tell because of the <code>'</code> and <code>''</code> argument prefixes.</p>
"))
((5202 3723 603999000) :INSERT (119 :POSTED 3569461200))
((5202 3723 604002000) :INSERT (119 :TAG :ALMOST-LITERATE-PROGRAMMING))
((5202 3723 604004000) :INSERT (119 :TAG :HASKELL))
((5202 3723 604689000) :INSERT (120 :TITLE "Wai Without Yesod - The Front End"))
((5202 3723 604694000) :INSERT
 (120 :FILE "wai-without-yesod--the-front-end.html"))
((5202 3723 604696000) :INSERT (120 :EDITED 3610022331))
((5202 3723 604697000) :INSERT
 (120 :BODY
  "<p>Firstly, those notes to self I mentioned last time have been applied. You can see the results <a href=\"https://github.com/Inaimathi/goget\">here</a>, or more specifically, <a href=\"https://github.com/Inaimathi/goget/blob/master/Handlers.hs#L23-L42\">here</a> among other places. Those used to be separate functions that each edited specific things, rather than each calling out to one actual editor. Also, the <code>countItem</code> and <code>commentItem</code> pieces were one function that accepted multiple <code>Maybe</code>s and only applied the relevant ones. That was more complicated than it needed to be, so it has been separated into what you see there. Thinking about that function more thoroughly also pointed me to a bug I had previously missed<a href=\"#foot-Sat-Feb-16-205443EST-2013\" name=\"note-Sat-Feb-16-205443EST-2013\">[1]</a>.</p>

<p>Secondly, I ended up having to put together two front-ends; an Angular-based page and something a bit more traditional with jQuery. The reason was that the Angular.js version refused to work on my phone for some bizarre reason. It showed the intro screen fine, and displayed auth errors like it was supposed to, but refused to show the main screen on a successful authentication. I have no idea why that was, but since half the point of this app was that I could check it from my phone on the way from work, it wasn't going to fly. Luckily, the API-friendly back-end technique I'm trying out here made it a breeze to create a new front-end without touching the rest of the application. The changes involved a <a href=\"https://github.com/Inaimathi/goget/commit/8e6760d45871a531b5dfd62c527ce8aa7f735b23\">couple of CSS tweaks and re-writes of goget.js and index.html</a>. Also, I had to throw <a href=\"http://handlebarsjs.com/\">handlebars</a> back in there.</p>

<p>Thirdly, I <a href=\"http://goget.inaimathi.ca/\">deployed it</a>. It doesn't run under HTTPS yet, so don't put in anything illegal or embarrassing, but that's a usable shopping list synchronizer which I intend to use. Let me know if you try it and anything explodes.</p>

<h3>On to the code!</h3>

<p>At the moment, I've got the <a href=\"http://jquery.com/\">jQuery</a> and <a href=\"http://angularjs.org/\">Angular</a> versions separated into different branches, but I'll merge them shortly and just provide each as a separate front-end<a href=\"#foot-Sat-Feb-16-205448EST-2013\" name=\"note-Sat-Feb-16-205448EST-2013\">[2]</a>. On a scale this small, it turns out not to matter much how you write the interface. If you check out the line-count on both those front-ends, the reactive version saves about 10 lines of HTML and 15 of JavaScript. It stacks up in larger applications, and if there's an option to use less JS, I'll take it, but in this case, the elegant solution doesn't work, so whatever. Lets start with the HTML markup first. Here's the <b>Angular</b></p>

<pre>&lt;<span style=\"color: #a020f0;\">!DOCTYPE</span> html PUBLIC <span style=\"color: #8b2252;\">\"-//W3C//DTD XHTML 1.0 Strict//EN\"</span> <span style=\"color: #8b2252;\">\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"</span>&gt;
&lt;<span style=\"color: #0000ff;\">html</span> <span style=\"color: #a0522d;\">xmlns</span>=<span style=\"color: #8b2252;\">\"http://www.w3.org/1999/xhtml\"</span> <span style=\"color: #7a378b;\">xml</span>:<span style=\"color: #a0522d;\">lang</span>=<span style=\"color: #8b2252;\">\"en\"</span> <span style=\"color: #a0522d;\">lang</span>=<span style=\"color: #8b2252;\">\"en\"</span>&gt;
  &lt;<span style=\"color: #0000ff;\">head</span>&gt;
    &lt;<span style=\"color: #0000ff;\">meta</span> <span style=\"color: #a0522d;\">charset</span>=<span style=\"color: #8b2252;\">\"UTF-8\"</span> /&gt;
    &lt;<span style=\"color: #0000ff;\">title</span>&gt;<span style=\"font-weight: bold; text-decoration: underline;\">GoGet - Because I Can't Be Expected to Remember This Shit</span>&lt;/<span style=\"color: #0000ff;\">title</span>&gt;
  &lt;/<span style=\"color: #0000ff;\">head</span>&gt;
  &lt;<span style=\"color: #0000ff;\">body</span> <span style=\"color: #a0522d;\">ng-app</span>=<span style=\"color: #8b2252;\">\"goget\"</span>&gt;
    
    &lt;<span style=\"color: #0000ff;\">div</span> <span style=\"color: #a0522d;\">ng-controller</span>=<span style=\"color: #8b2252;\">\"GoGetCtrl\"</span>&gt;
      &lt;<span style=\"color: #0000ff;\">div</span> <span style=\"color: #a0522d;\">ng-show</span>=<span style=\"color: #8b2252;\">\"!user.loggedIn\"</span> <span style=\"color: #a0522d;\">class</span>=<span style=\"color: #8b2252;\">\"user-form\"</span>&gt;
        &lt;<span style=\"color: #0000ff;\">div</span> <span style=\"color: #a0522d;\">ng-show</span>=<span style=\"color: #8b2252;\">\"authError\"</span> <span style=\"color: #a0522d;\">class</span>=<span style=\"color: #8b2252;\">\"error\"</span>&gt;{{authError}}&lt;/<span style=\"color: #0000ff;\">div</span>&gt;
        &lt;<span style=\"color: #0000ff;\">input</span> <span style=\"color: #a0522d;\">type</span>=<span style=\"color: #8b2252;\">\"text\"</span> <span style=\"color: #a0522d;\">placeholder</span>=<span style=\"color: #8b2252;\">\"User Name\"</span> <span style=\"color: #a0522d;\">ng-model</span>=<span style=\"color: #8b2252;\">\"user.name\"</span> /&gt;
        &lt;<span style=\"color: #0000ff;\">input</span> <span style=\"color: #a0522d;\">type</span>=<span style=\"color: #8b2252;\">\"password\"</span> <span style=\"color: #a0522d;\">placeholder</span>=<span style=\"color: #8b2252;\">\"Passphrase\"</span> <span style=\"color: #a0522d;\">ng-model</span>=<span style=\"color: #8b2252;\">\"user.passphrase\"</span> /&gt;
        &lt;<span style=\"color: #0000ff;\">a</span> <span style=\"color: #a0522d;\">class</span>=<span style=\"color: #8b2252;\">\"register\"</span> <span style=\"color: #a0522d;\">ng-click</span>=<span style=\"color: #8b2252;\">\"register(user.name, user.passphrase)\"</span>&gt;Register&lt;/<span style=\"color: #0000ff;\">a</span>&gt;
        &lt;<span style=\"color: #0000ff;\">button</span> <span style=\"color: #a0522d;\">class</span>=<span style=\"color: #8b2252;\">\"btn login\"</span> <span style=\"color: #a0522d;\">ng-click</span>=<span style=\"color: #8b2252;\">\"login(user.name, user.passphrase)\"</span>&gt;&lt;<span style=\"color: #0000ff;\">i</span> <span style=\"color: #a0522d;\">class</span>=<span style=\"color: #8b2252;\">\"icon-check\"</span>&gt;&lt;/<span style=\"color: #0000ff;\">i</span>&gt; Login&lt;/<span style=\"color: #0000ff;\">button</span>&gt;
      &lt;/<span style=\"color: #0000ff;\">div</span>&gt;
        
      &lt;<span style=\"color: #0000ff;\">ul</span> <span style=\"color: #a0522d;\">ng-show</span>=<span style=\"color: #8b2252;\">\"user.loggedIn\"</span> <span style=\"color: #a0522d;\">class</span>=<span style=\"color: #8b2252;\">\"shopping-list\"</span>&gt;
        &lt;<span style=\"color: #0000ff;\">li</span> <span style=\"color: #a0522d;\">class</span>=<span style=\"color: #8b2252;\">\"{{itm.status}}\"</span> <span style=\"color: #a0522d;\">ng-repeat</span>=<span style=\"color: #8b2252;\">\"itm in itemList\"</span>
            <span style=\"color: #a0522d;\">ng-mouseover</span>=<span style=\"color: #8b2252;\">\"itm.hovered = true\"</span> <span style=\"color: #a0522d;\">ng-mouseout</span>=<span style=\"color: #8b2252;\">\"itm.hovered = false\"</span>&gt;
          &lt;<span style=\"color: #0000ff;\">span</span> <span style=\"color: #a0522d;\">class</span>=<span style=\"color: #8b2252;\">\"count\"</span>&gt;{{itm.count}}x&lt;/<span style=\"color: #0000ff;\">span</span>&gt; 
          &lt;<span style=\"color: #0000ff;\">span</span> <span style=\"color: #a0522d;\">class</span>=<span style=\"color: #8b2252;\">\"name\"</span>&gt;{{itm.name}}&lt;/<span style=\"color: #0000ff;\">span</span>&gt; 
          &lt;<span style=\"color: #0000ff;\">button</span> <span style=\"color: #a0522d;\">class</span>=<span style=\"color: #8b2252;\">\"btn\"</span> <span style=\"color: #a0522d;\">ng-click</span>=<span style=\"color: #8b2252;\">\"got(itm.name)\"</span> <span style=\"color: #a0522d;\">ng-show</span>=<span style=\"color: #8b2252;\">\"itm.status=='Need'\"</span>&gt;&lt;<span style=\"color: #0000ff;\">i</span> <span style=\"color: #a0522d;\">class</span>=<span style=\"color: #8b2252;\">\"icon-check\"</span>&gt;&lt;/<span style=\"color: #0000ff;\">i</span>&gt;&lt;/<span style=\"color: #0000ff;\">button</span>&gt;
          &lt;<span style=\"color: #0000ff;\">button</span> <span style=\"color: #a0522d;\">class</span>=<span style=\"color: #8b2252;\">\"btn\"</span> <span style=\"color: #a0522d;\">ng-click</span>=<span style=\"color: #8b2252;\">\"need(itm.name)\"</span> <span style=\"color: #a0522d;\">ng-show</span>=<span style=\"color: #8b2252;\">\"itm.status=='Got'\"</span>&gt;&lt;<span style=\"color: #0000ff;\">i</span> <span style=\"color: #a0522d;\">class</span>=<span style=\"color: #8b2252;\">\"icon-exclamation-sign\"</span>&gt;&lt;/<span style=\"color: #0000ff;\">i</span>&gt;&lt;/<span style=\"color: #0000ff;\">button</span>&gt;
          &lt;<span style=\"color: #0000ff;\">p</span> <span style=\"color: #a0522d;\">class</span>=<span style=\"color: #8b2252;\">\"comment\"</span> <span style=\"color: #a0522d;\">ng-show</span>=<span style=\"color: #8b2252;\">\"itm.hovered\"</span>&gt;{{itm.comment}}&lt;/<span style=\"color: #0000ff;\">p</span>&gt;
        &lt;/<span style=\"color: #0000ff;\">li</span>&gt;
        &lt;<span style=\"color: #0000ff;\">li</span> <span style=\"color: #a0522d;\">class</span>=<span style=\"color: #8b2252;\">\"controls\"</span>&gt;
          &lt;<span style=\"color: #0000ff;\">input</span> <span style=\"color: #a0522d;\">type</span>=<span style=\"color: #8b2252;\">\"text\"</span> <span style=\"color: #a0522d;\">placeholder</span>=<span style=\"color: #8b2252;\">\"Item Name\"</span> <span style=\"color: #a0522d;\">ng-model</span>=<span style=\"color: #8b2252;\">\"newItem.name\"</span> /&gt; 
          &lt;<span style=\"color: #0000ff;\">input</span> <span style=\"color: #a0522d;\">type</span>=<span style=\"color: #8b2252;\">\"text\"</span> <span style=\"color: #a0522d;\">placeholder</span>=<span style=\"color: #8b2252;\">\"Comment\"</span> <span style=\"color: #a0522d;\">ng-model</span>=<span style=\"color: #8b2252;\">\"newItem.comment\"</span> /&gt;
          &lt;<span style=\"color: #0000ff;\">input</span> <span style=\"color: #a0522d;\">type</span>=<span style=\"color: #8b2252;\">\"text\"</span> <span style=\"color: #a0522d;\">placeholder</span>=<span style=\"color: #8b2252;\">\"Count\"</span> <span style=\"color: #a0522d;\">ng-model</span>=<span style=\"color: #8b2252;\">\"newItem.count\"</span>&gt;
          &lt;<span style=\"color: #0000ff;\">button</span> <span style=\"color: #a0522d;\">class</span>=<span style=\"color: #8b2252;\">\"btn\"</span> <span style=\"color: #a0522d;\">ng-click</span>=<span style=\"color: #8b2252;\">\"add(newItem.name, newItem.comment, newItem.count)\"</span>&gt;&lt;<span style=\"color: #0000ff;\">i</span> <span style=\"color: #a0522d;\">class</span>=<span style=\"color: #8b2252;\">\"icon-plus\"</span>&gt;&lt;/<span style=\"color: #0000ff;\">i</span>&gt;&lt;/<span style=\"color: #0000ff;\">button</span>&gt;
        &lt;/<span style=\"color: #0000ff;\">li</span>&gt;
      &lt;/<span style=\"color: #0000ff;\">ul</span>&gt;
    &lt;/<span style=\"color: #0000ff;\">div</span>&gt;

    <span style=\"color: #b22222;\">&lt;!-- </span><span style=\"color: #b22222;\">------ </span><span style=\"color: #b22222;\">--&gt;</span>
    <span style=\"color: #b22222;\">&lt;!-- </span><span style=\"color: #b22222;\">Styles </span><span style=\"color: #b22222;\">--&gt;</span>
    <span style=\"color: #b22222;\">&lt;!-- </span><span style=\"color: #b22222;\">------ </span><span style=\"color: #b22222;\">--&gt;</span>
    &lt;<span style=\"color: #0000ff;\">link</span> <span style=\"color: #a0522d;\">rel</span>=<span style=\"color: #8b2252;\">\"stylesheet\"</span> <span style=\"color: #a0522d;\">href</span>=<span style=\"color: #8b2252;\">\"/static/css/bootstrap.min.css\"</span> <span style=\"color: #a0522d;\">type</span>=<span style=\"color: #8b2252;\">\"text/css\"</span> <span style=\"color: #a0522d;\">media</span>=<span style=\"color: #8b2252;\">\"screen\"</span> /&gt;
    &lt;<span style=\"color: #0000ff;\">link</span> <span style=\"color: #a0522d;\">rel</span>=<span style=\"color: #8b2252;\">\"stylesheet\"</span> <span style=\"color: #a0522d;\">href</span>=<span style=\"color: #8b2252;\">\"/static/css/bootstrap-responsive.min.css\"</span> <span style=\"color: #a0522d;\">type</span>=<span style=\"color: #8b2252;\">\"text/css\"</span> <span style=\"color: #a0522d;\">media</span>=<span style=\"color: #8b2252;\">\"screen\"</span> /&gt;

    &lt;<span style=\"color: #0000ff;\">link</span> <span style=\"color: #a0522d;\">rel</span>=<span style=\"color: #8b2252;\">\"stylesheet\"</span> <span style=\"color: #a0522d;\">href</span>=<span style=\"color: #8b2252;\">\"/static/css/style.css\"</span> <span style=\"color: #a0522d;\">type</span>=<span style=\"color: #8b2252;\">\"text/css\"</span> <span style=\"color: #a0522d;\">media</span>=<span style=\"color: #8b2252;\">\"screen\"</span> /&gt;    

    <span style=\"color: #b22222;\">&lt;!-- </span><span style=\"color: #b22222;\">------- </span><span style=\"color: #b22222;\">--&gt;</span>
    <span style=\"color: #b22222;\">&lt;!-- </span><span style=\"color: #b22222;\">Scripts </span><span style=\"color: #b22222;\">--&gt;</span>
    <span style=\"color: #b22222;\">&lt;!-- </span><span style=\"color: #b22222;\">------- </span><span style=\"color: #b22222;\">--&gt;</span>
    &lt;<span style=\"color: #0000ff;\">script</span> <span style=\"color: #a0522d;\">src</span>=<span style=\"color: #8b2252;\">\"/static/js/underscore-min.js\"</span> <span style=\"color: #a0522d;\">type</span>=<span style=\"color: #8b2252;\">\"text/javascript\"</span>&gt;&lt;/<span style=\"color: #0000ff;\">script</span>&gt;
    &lt;<span style=\"color: #0000ff;\">script</span> <span style=\"color: #a0522d;\">src</span>=<span style=\"color: #8b2252;\">\"/static/js/angular.min.js\"</span> <span style=\"color: #a0522d;\">type</span>=<span style=\"color: #8b2252;\">\"text/javascript\"</span>&gt;&lt;/<span style=\"color: #0000ff;\">script</span>&gt;    
    
    &lt;<span style=\"color: #0000ff;\">script</span> <span style=\"color: #a0522d;\">src</span>=<span style=\"color: #8b2252;\">\"/static/js/goget.js\"</span> <span style=\"color: #a0522d;\">type</span>=<span style=\"color: #8b2252;\">\"text/javascript\"</span>&gt;&lt;/<span style=\"color: #0000ff;\">script</span>&gt;
  &lt;/<span style=\"color: #0000ff;\">body</span>&gt;
&lt;/<span style=\"color: #0000ff;\">html</span>&gt;</pre>

<p>and here's the <b>jQuery</b></p>

<pre>&lt;<span style=\"color: #a020f0;\">!DOCTYPE</span> html PUBLIC <span style=\"color: #8b2252;\">\"-//W3C//DTD XHTML 1.0 Strict//EN\"</span> <span style=\"color: #8b2252;\">\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"</span>&gt;
&lt;<span style=\"color: #0000ff;\">html</span> <span style=\"color: #a0522d;\">xmlns</span>=<span style=\"color: #8b2252;\">\"http://www.w3.org/1999/xhtml\"</span> <span style=\"color: #7a378b;\">xml</span>:<span style=\"color: #a0522d;\">lang</span>=<span style=\"color: #8b2252;\">\"en\"</span> <span style=\"color: #a0522d;\">lang</span>=<span style=\"color: #8b2252;\">\"en\"</span>&gt;
  &lt;<span style=\"color: #0000ff;\">head</span>&gt;
    &lt;<span style=\"color: #0000ff;\">meta</span> <span style=\"color: #a0522d;\">charset</span>=<span style=\"color: #8b2252;\">\"UTF-8\"</span> /&gt;
    &lt;<span style=\"color: #0000ff;\">title</span>&gt;<span style=\"font-weight: bold; text-decoration: underline;\">GoGet - Because I Can't Be Expected to Remember This Shit</span>&lt;/<span style=\"color: #0000ff;\">title</span>&gt;
  &lt;/<span style=\"color: #0000ff;\">head</span>&gt;
  &lt;<span style=\"color: #0000ff;\">body</span>&gt; 

    <span style=\"color: #b22222;\">&lt;!-- </span><span style=\"color: #b22222;\">templates </span><span style=\"color: #b22222;\">--&gt;</span>
    &lt;<span style=\"color: #0000ff;\">script</span> <span style=\"color: #a0522d;\">id</span>=<span style=\"color: #8b2252;\">\"tmp-item\"</span> <span style=\"color: #a0522d;\">type</span>=<span style=\"color: #8b2252;\">\"text/x-handlebars-template\"</span>&gt;
      &lt;<span style=\"color: #0000ff;\">li</span> <span style=\"color: #a0522d;\">class</span>=<span style=\"color: #8b2252;\">\"{{status}}\"</span>&gt;
        &lt;<span style=\"color: #0000ff;\">span</span> <span style=\"color: #a0522d;\">class</span>=<span style=\"color: #8b2252;\">\"count\"</span>&gt;{{count}}x&lt;/<span style=\"color: #0000ff;\">span</span>&gt;
        &lt;<span style=\"color: #0000ff;\">span</span> <span style=\"color: #a0522d;\">class</span>=<span style=\"color: #8b2252;\">\"name\"</span>&gt;{{name}}&lt;/<span style=\"color: #0000ff;\">span</span>&gt;
        {{#controls this}}{{/controls}}
        <span style=\"color: #b22222;\">&lt;!-- </span><span style=\"color: #b22222;\">&lt;p class=\"comment\"&gt;{{comment}}&lt;/p&gt; </span><span style=\"color: #b22222;\">--&gt;</span>
      &lt;/<span style=\"color: #0000ff;\">li</span>&gt;
    &lt;/<span style=\"color: #0000ff;\">script</span>&gt;

    &lt;<span style=\"color: #0000ff;\">script</span> <span style=\"color: #a0522d;\">id</span>=<span style=\"color: #8b2252;\">\"tmp-item-controls\"</span> <span style=\"color: #a0522d;\">type</span>=<span style=\"color: #8b2252;\">\"text/x-handlebars-template\"</span>&gt;
      &lt;<span style=\"color: #0000ff;\">button</span> <span style=\"color: #a0522d;\">class</span>=<span style=\"color: #8b2252;\">\"btn\"</span> <span style=\"color: #a0522d;\">onclick</span>=<span style=\"color: #8b2252;\">\"goget.{{fn}}(jQuery(this).siblings('.name').text())\"</span>&gt;&lt;<span style=\"color: #0000ff;\">i</span> <span style=\"color: #a0522d;\">class</span>=<span style=\"color: #8b2252;\">\"{{iconClass}}\"</span>&gt;&lt;/<span style=\"color: #0000ff;\">i</span>&gt;&lt;/<span style=\"color: #0000ff;\">button</span>&gt;
    &lt;/<span style=\"color: #0000ff;\">script</span>&gt;

    <span style=\"color: #b22222;\">&lt;!-- </span><span style=\"color: #b22222;\">body </span><span style=\"color: #b22222;\">--&gt;</span>
    &lt;<span style=\"color: #0000ff;\">div</span>&gt;
      &lt;<span style=\"color: #0000ff;\">div</span> <span style=\"color: #a0522d;\">class</span>=<span style=\"color: #8b2252;\">\"user-form\"</span>&gt;
        &lt;<span style=\"color: #0000ff;\">div</span> <span style=\"color: #a0522d;\">class</span>=<span style=\"color: #8b2252;\">\"error\"</span>&gt;&lt;/<span style=\"color: #0000ff;\">div</span>&gt;
        &lt;<span style=\"color: #0000ff;\">input</span> <span style=\"color: #a0522d;\">type</span>=<span style=\"color: #8b2252;\">\"text\"</span> <span style=\"color: #a0522d;\">class</span>=<span style=\"color: #8b2252;\">\"user-name\"</span> <span style=\"color: #a0522d;\">placeholder</span>=<span style=\"color: #8b2252;\">\"User Name\"</span> /&gt;
        &lt;<span style=\"color: #0000ff;\">input</span> <span style=\"color: #a0522d;\">type</span>=<span style=\"color: #8b2252;\">\"password\"</span> <span style=\"color: #a0522d;\">class</span>=<span style=\"color: #8b2252;\">\"passphrase\"</span> <span style=\"color: #a0522d;\">placeholder</span>=<span style=\"color: #8b2252;\">\"Passphrase\"</span> /&gt;
        &lt;<span style=\"color: #0000ff;\">a</span> <span style=\"color: #a0522d;\">class</span>=<span style=\"color: #8b2252;\">\"register\"</span> <span style=\"color: #a0522d;\">onclick</span>=<span style=\"color: #8b2252;\">\"util.applyToUser(goget.register)\"</span>&gt;Register&lt;/<span style=\"color: #0000ff;\">a</span>&gt;
        &lt;<span style=\"color: #0000ff;\">button</span> <span style=\"color: #a0522d;\">class</span>=<span style=\"color: #8b2252;\">\"btn login\"</span> <span style=\"color: #a0522d;\">onclick</span>=<span style=\"color: #8b2252;\">\"util.applyToUser(goget.login)\"</span>&gt;
          &lt;<span style=\"color: #0000ff;\">i</span> <span style=\"color: #a0522d;\">class</span>=<span style=\"color: #8b2252;\">\"icon-check\"</span>&gt;&lt;/<span style=\"color: #0000ff;\">i</span>&gt; Login
        &lt;/<span style=\"color: #0000ff;\">button</span>&gt;
      &lt;/<span style=\"color: #0000ff;\">div</span>&gt;

      &lt;<span style=\"color: #0000ff;\">ul</span> <span style=\"color: #a0522d;\">class</span>=<span style=\"color: #8b2252;\">\"shopping-list\"</span>&gt;
      &lt;/<span style=\"color: #0000ff;\">ul</span>&gt;
      &lt;<span style=\"color: #0000ff;\">ul</span> <span style=\"color: #a0522d;\">class</span>=<span style=\"color: #8b2252;\">\"shopping-list-controls\"</span>&gt;
        &lt;<span style=\"color: #0000ff;\">li</span> <span style=\"color: #a0522d;\">class</span>=<span style=\"color: #8b2252;\">\"controls\"</span>&gt;
          &lt;<span style=\"color: #0000ff;\">input</span> <span style=\"color: #a0522d;\">type</span>=<span style=\"color: #8b2252;\">\"text\"</span> <span style=\"color: #a0522d;\">class</span>=<span style=\"color: #8b2252;\">\"name\"</span> <span style=\"color: #a0522d;\">placeholder</span>=<span style=\"color: #8b2252;\">\"Item Name\"</span> /&gt; 
          &lt;<span style=\"color: #0000ff;\">input</span> <span style=\"color: #a0522d;\">type</span>=<span style=\"color: #8b2252;\">\"text\"</span> <span style=\"color: #a0522d;\">class</span>=<span style=\"color: #8b2252;\">\"comment\"</span> <span style=\"color: #a0522d;\">placeholder</span>=<span style=\"color: #8b2252;\">\"Comment\"</span> /&gt;
          &lt;<span style=\"color: #0000ff;\">input</span> <span style=\"color: #a0522d;\">type</span>=<span style=\"color: #8b2252;\">\"text\"</span> <span style=\"color: #a0522d;\">class</span>=<span style=\"color: #8b2252;\">\"count\"</span> <span style=\"color: #a0522d;\">placeholder</span>=<span style=\"color: #8b2252;\">\"Count\"</span> <span style=\"color: #a0522d;\">value</span>=<span style=\"color: #8b2252;\">\"1\"</span> /&gt;
          &lt;<span style=\"color: #0000ff;\">button</span> <span style=\"color: #a0522d;\">class</span>=<span style=\"color: #8b2252;\">\"btn\"</span> <span style=\"color: #a0522d;\">onclick</span>=<span style=\"color: #8b2252;\">\"util.applyToVals(goget.add, '.controls ', ['.name', '.comment', '.count'])\"</span>&gt;&lt;<span style=\"color: #0000ff;\">i</span> <span style=\"color: #a0522d;\">class</span>=<span style=\"color: #8b2252;\">\"icon-plus\"</span>&gt;&lt;/<span style=\"color: #0000ff;\">i</span>&gt;&lt;/<span style=\"color: #0000ff;\">button</span>&gt;
        &lt;/<span style=\"color: #0000ff;\">li</span>&gt;
      &lt;/<span style=\"color: #0000ff;\">ul</span>&gt;
    &lt;/<span style=\"color: #0000ff;\">div</span>&gt;

    <span style=\"color: #b22222;\">&lt;!-- </span><span style=\"color: #b22222;\">------ </span><span style=\"color: #b22222;\">--&gt;</span>
    <span style=\"color: #b22222;\">&lt;!-- </span><span style=\"color: #b22222;\">Styles </span><span style=\"color: #b22222;\">--&gt;</span>
    <span style=\"color: #b22222;\">&lt;!-- </span><span style=\"color: #b22222;\">------ </span><span style=\"color: #b22222;\">--&gt;</span>
    &lt;<span style=\"color: #0000ff;\">link</span> <span style=\"color: #a0522d;\">rel</span>=<span style=\"color: #8b2252;\">\"stylesheet\"</span> <span style=\"color: #a0522d;\">href</span>=<span style=\"color: #8b2252;\">\"/static/css/bootstrap.min.css\"</span> <span style=\"color: #a0522d;\">type</span>=<span style=\"color: #8b2252;\">\"text/css\"</span> <span style=\"color: #a0522d;\">media</span>=<span style=\"color: #8b2252;\">\"screen\"</span> /&gt;
    &lt;<span style=\"color: #0000ff;\">link</span> <span style=\"color: #a0522d;\">rel</span>=<span style=\"color: #8b2252;\">\"stylesheet\"</span> <span style=\"color: #a0522d;\">href</span>=<span style=\"color: #8b2252;\">\"/static/css/bootstrap-responsive.min.css\"</span> <span style=\"color: #a0522d;\">type</span>=<span style=\"color: #8b2252;\">\"text/css\"</span> <span style=\"color: #a0522d;\">media</span>=<span style=\"color: #8b2252;\">\"screen\"</span> /&gt;

    &lt;<span style=\"color: #0000ff;\">link</span> <span style=\"color: #a0522d;\">rel</span>=<span style=\"color: #8b2252;\">\"stylesheet\"</span> <span style=\"color: #a0522d;\">href</span>=<span style=\"color: #8b2252;\">\"/static/css/style.css\"</span> <span style=\"color: #a0522d;\">type</span>=<span style=\"color: #8b2252;\">\"text/css\"</span> <span style=\"color: #a0522d;\">media</span>=<span style=\"color: #8b2252;\">\"screen\"</span> /&gt;    

    <span style=\"color: #b22222;\">&lt;!-- </span><span style=\"color: #b22222;\">------- </span><span style=\"color: #b22222;\">--&gt;</span>
    <span style=\"color: #b22222;\">&lt;!-- </span><span style=\"color: #b22222;\">Scripts </span><span style=\"color: #b22222;\">--&gt;</span>
    <span style=\"color: #b22222;\">&lt;!-- </span><span style=\"color: #b22222;\">------- </span><span style=\"color: #b22222;\">--&gt;</span>
    &lt;<span style=\"color: #0000ff;\">script</span> <span style=\"color: #a0522d;\">src</span>=<span style=\"color: #8b2252;\">\"/static/js/underscore-min.js\"</span> <span style=\"color: #a0522d;\">type</span>=<span style=\"color: #8b2252;\">\"text/javascript\"</span>&gt;&lt;/<span style=\"color: #0000ff;\">script</span>&gt;
    &lt;<span style=\"color: #0000ff;\">script</span> <span style=\"color: #a0522d;\">src</span>=<span style=\"color: #8b2252;\">\"/static/js/handlebars.js\"</span> <span style=\"color: #a0522d;\">type</span>=<span style=\"color: #8b2252;\">\"text/javascript\"</span>&gt;&lt;/<span style=\"color: #0000ff;\">script</span>&gt;    
    &lt;<span style=\"color: #0000ff;\">script</span> <span style=\"color: #a0522d;\">src</span>=<span style=\"color: #8b2252;\">\"/static/js/jquery.min.js\"</span> <span style=\"color: #a0522d;\">type</span>=<span style=\"color: #8b2252;\">\"text/javascript\"</span>&gt;&lt;/<span style=\"color: #0000ff;\">script</span>&gt;    
    
    &lt;<span style=\"color: #0000ff;\">script</span> <span style=\"color: #a0522d;\">src</span>=<span style=\"color: #8b2252;\">\"/static/js/goget.js\"</span> <span style=\"color: #a0522d;\">type</span>=<span style=\"color: #8b2252;\">\"text/javascript\"</span>&gt;&lt;/<span style=\"color: #0000ff;\">script</span>&gt;
  &lt;/<span style=\"color: #0000ff;\">body</span>&gt;
&lt;/<span style=\"color: #0000ff;\">html</span>&gt;</pre>

<p>There's a bunch of common boilerplate at the bottom and top that you can safely ignore. The meat begins at the <code>body</code> tag and stops at the block comment denoting the <code>Styles</code> section. The only real difference is that you can see some unfamiliar <code>util</code> calls and explicit templates in the jQuery version. Oh, the Angular version also controls its visibility explicitly through those <code>ng-show</code> attributes; the jQuery version relies on CSS to do the same. The actual differences are readily on display in the JS code though. First, Angular</p>

<pre><span style=\"color: #a020f0;\">var</span> <span style=\"color: #a0522d;\">App</span> = angular.module(<span style=\"color: #8b2252;\">\"goget\"</span>, [])
    .config(<span style=\"color: #a020f0;\">function</span> (<span style=\"color: #a0522d;\">$httpProvider</span>) {
        <span style=\"color: #b22222;\">/// </span><span style=\"color: #b22222;\">Angular's post doesn't do the correct default thing with POST parameters
</span>        $httpProvider.defaults.headers.post[<span style=\"color: #8b2252;\">'Content-Type'</span>] = <span style=\"color: #8b2252;\">'application/x-www-form-urlencoded; charset=UTF-8'</span>;
        $httpProvider.defaults.transformRequest = <span style=\"color: #a020f0;\">function</span>(<span style=\"color: #a0522d;\">data</span>){
            <span style=\"color: #a020f0;\">return</span> _.map(data, <span style=\"color: #a020f0;\">function</span> (<span style=\"color: #a0522d;\">val</span>, <span style=\"color: #a0522d;\">k</span>) { <span style=\"color: #a020f0;\">return</span> encodeURIComponent(k) + <span style=\"color: #8b2252;\">\"=\"</span> + encodeURIComponent(val); }).join(<span style=\"color: #8b2252;\">\"&amp;\"</span>);
        }
    });

App.controller(<span style=\"color: #8b2252;\">'GoGetCtrl'</span>, <span style=\"color: #a020f0;\">function</span> (<span style=\"color: #a0522d;\">$scope</span>, <span style=\"color: #a0522d;\">$http</span>) {
    $scope.itemList = [];
    $scope.newItem = { count: 1 };
    $scope.user = { id: <span style=\"color: #008b8b;\">false</span>, loggedIn: <span style=\"color: #008b8b;\">false</span>, passphrase: <span style=\"color: #8b2252;\">\"\"</span> };

    <span style=\"color: #a020f0;\">function</span> <span style=\"color: #0000ff;\">itemPost</span> (<span style=\"color: #a0522d;\">uri</span>, <span style=\"color: #a0522d;\">params</span>) {
        $http.post(uri, params)
            .success(<span style=\"color: #a020f0;\">function</span> (<span style=\"color: #a0522d;\">data</span>) {
                $scope.itemList = data;
            })
            .error(<span style=\"color: #a020f0;\">function</span> (<span style=\"color: #a0522d;\">data</span>) {
                console.log(data);
            })
    }

    <span style=\"color: #a020f0;\">function</span> <span style=\"color: #0000ff;\">userPost</span> (<span style=\"color: #a0522d;\">uri</span>, <span style=\"color: #a0522d;\">params</span>) {
        console.log(<span style=\"color: #8b2252;\">\"Sending \"</span> + uri + <span style=\"color: #8b2252;\">\" request...\"</span>)
        $http.post(uri, params)
            .success(<span style=\"color: #a020f0;\">function</span> (<span style=\"color: #a0522d;\">data</span>) {
                $scope.user.id = data.id;
                $scope.user.loggedIn = <span style=\"color: #008b8b;\">true</span>;
                $scope.itemList = data.items;
            })
            .error(<span style=\"color: #a020f0;\">function</span> (<span style=\"color: #a0522d;\">data</span>) {
                $scope.authError = data;
                console.log(data)
            })
    }

    $scope.login = <span style=\"color: #a020f0;\">function</span> (<span style=\"color: #a0522d;\">name</span>, <span style=\"color: #a0522d;\">pass</span>) {
        userPost(<span style=\"color: #8b2252;\">\"/auth/login\"</span>, {name : name, passphrase: pass});
    }

    $scope.register = <span style=\"color: #a020f0;\">function</span> (<span style=\"color: #a0522d;\">name</span>, <span style=\"color: #a0522d;\">pass</span>) {
        userPost(<span style=\"color: #8b2252;\">\"/auth/register\"</span>, {name : name, passphrase: pass});
    }

    $scope.add = <span style=\"color: #a020f0;\">function</span> (<span style=\"color: #a0522d;\">itemName</span>, <span style=\"color: #a0522d;\">comment</span>, <span style=\"color: #a0522d;\">count</span>) {
        $http.post(<span style=\"color: #8b2252;\">\"/app/new\"</span>, {itemName: itemName, comment: comment, count: count})
            .success(<span style=\"color: #a020f0;\">function</span> (<span style=\"color: #a0522d;\">data</span>) {
                $scope.itemList = data;
                $scope.newItem = { count: 1 }
            })
    }
    
    $scope.need = <span style=\"color: #a020f0;\">function</span> (<span style=\"color: #a0522d;\">itemName</span>) {
        itemPost(<span style=\"color: #8b2252;\">\"/app/item/need\"</span>, {itemName: itemName});
    }
    
    $scope.got = <span style=\"color: #a020f0;\">function</span> (<span style=\"color: #a0522d;\">itemName</span>) {
        itemPost(<span style=\"color: #8b2252;\">\"/app/item/got\"</span>, {itemName: itemName});
    }

});</pre>

<p>and then jQuery</p>

<pre><span style=\"color: #a020f0;\">var</span> <span style=\"color: #a0522d;\">util</span> = {
    <span style=\"color: #0000ff;\">hcompile</span>: <span style=\"color: #a020f0;\">function</span> (<span style=\"color: #a0522d;\">template</span>) {
        <span style=\"color: #a020f0;\">return</span> Handlebars.compile($(<span style=\"color: #8b2252;\">\"#tmp-\"</span> + template).html())
    },
    <span style=\"color: #0000ff;\">vals</span>: <span style=\"color: #a020f0;\">function</span> (<span style=\"color: #a0522d;\">listOfDOMSelectors</span>) {
        <span style=\"color: #a020f0;\">return</span> _.map(listOfDOMSelectors, <span style=\"color: #a020f0;\">function</span> (<span style=\"color: #a0522d;\">s</span>) { <span style=\"color: #a020f0;\">return</span> $(s).val() })
    },
    <span style=\"color: #0000ff;\">under</span>: <span style=\"color: #a020f0;\">function</span> (<span style=\"color: #a0522d;\">DOMContext</span>, <span style=\"color: #a0522d;\">listOfDOMSelectors</span>) {
        <span style=\"color: #a020f0;\">return</span> _.map(listOfDOMSelectors, <span style=\"color: #a020f0;\">function</span> (<span style=\"color: #a0522d;\">s</span>) { <span style=\"color: #a020f0;\">return</span> DOMContext + s })
    },
    <span style=\"color: #0000ff;\">applyToVals</span>: <span style=\"color: #a020f0;\">function</span> (<span style=\"color: #a0522d;\">fn</span>, <span style=\"color: #a0522d;\">DOMContext</span>, <span style=\"color: #a0522d;\">listOfDOMSelectors</span>) {
        <span style=\"color: #a020f0;\">return</span> fn.apply({}, util.vals(util.under(DOMContext, listOfDOMSelectors)));
    },
    <span style=\"color: #0000ff;\">applyToUser</span>: <span style=\"color: #a020f0;\">function</span> (<span style=\"color: #a0522d;\">fn</span>) {
        <span style=\"color: #a020f0;\">return</span> util.applyToVals(fn, <span style=\"color: #8b2252;\">'.user-form '</span>, [<span style=\"color: #8b2252;\">'.user-name'</span>, <span style=\"color: #8b2252;\">'.passphrase'</span>]);
    }
}

Handlebars.registerHelper(<span style=\"color: #8b2252;\">\"controls\"</span>, <span style=\"color: #a020f0;\">function</span> (<span style=\"color: #a0522d;\">anItem</span>) {
    <span style=\"color: #a020f0;\">if</span> (anItem.status == <span style=\"color: #8b2252;\">'Got'</span>) {
        <span style=\"color: #a020f0;\">var</span> <span style=\"color: #a0522d;\">ctrl</span> = {fn: <span style=\"color: #8b2252;\">'need'</span>, iconClass: <span style=\"color: #8b2252;\">\"icon-exclamation-sign\"</span>}
    } <span style=\"color: #a020f0;\">else</span> {
        <span style=\"color: #a020f0;\">var</span> <span style=\"color: #a0522d;\">ctrl</span> = {fn: <span style=\"color: #8b2252;\">'got'</span>, iconClass: <span style=\"color: #8b2252;\">\"icon-check\"</span>}
    }
    <span style=\"color: #a020f0;\">return</span> <span style=\"color: #a020f0;\">new</span> <span style=\"color: #228b22;\">Handlebars.SafeString</span>(templates.itemButtons(ctrl));
})

<span style=\"color: #a020f0;\">var</span> <span style=\"color: #a0522d;\">templates</span> = {
    item: util.hcompile(<span style=\"color: #8b2252;\">\"item\"</span>),
    itemButtons: util.hcompile(<span style=\"color: #8b2252;\">\"item-controls\"</span>)
}

<span style=\"color: #a020f0;\">var</span> <span style=\"color: #a0522d;\">goget</span> = {
    <span style=\"color: #0000ff;\">render</span>: <span style=\"color: #a020f0;\">function</span> (<span style=\"color: #a0522d;\">itemList</span>) {
        $(<span style=\"color: #8b2252;\">\".shopping-list-controls\"</span>).show()
        $(<span style=\"color: #8b2252;\">\".shopping-list\"</span>).empty();
        $.each(itemList, <span style=\"color: #a020f0;\">function</span> (<span style=\"color: #a0522d;\">ix</span>, <span style=\"color: #a0522d;\">anItem</span>) {
            $(<span style=\"color: #8b2252;\">\".shopping-list\"</span>).append(templates.item(anItem));
        })
    },
    <span style=\"color: #0000ff;\">itemPost</span>: <span style=\"color: #a020f0;\">function</span> (<span style=\"color: #a0522d;\">uri</span>, <span style=\"color: #a0522d;\">params</span>) {
        $.post(uri, params)
            .done(<span style=\"color: #a020f0;\">function</span> (<span style=\"color: #a0522d;\">data</span>, <span style=\"color: #a0522d;\">textStatus</span>, <span style=\"color: #a0522d;\">jqXHR</span>) {
                goget.render($.parseJSON(jqXHR.responseText))
            })
            .fail(<span style=\"color: #a020f0;\">function</span> (<span style=\"color: #a0522d;\">data</span>, <span style=\"color: #a0522d;\">textStatus</span>, <span style=\"color: #a0522d;\">jqXHR</span>) {
                console.log([<span style=\"color: #8b2252;\">\"Failed!\"</span>, data, textStatus, jqXHR])
                <span style=\"color: #b22222;\">// </span><span style=\"color: #b22222;\">something odd happened; either invalid item, or failed connection
</span>            })
    },
    <span style=\"color: #0000ff;\">userPost</span>: <span style=\"color: #a020f0;\">function</span> (<span style=\"color: #a0522d;\">uri</span>, <span style=\"color: #a0522d;\">params</span>) {
        $.post(uri, params)
            .done(<span style=\"color: #a020f0;\">function</span> (<span style=\"color: #a0522d;\">data</span>, <span style=\"color: #a0522d;\">textStatus</span>, <span style=\"color: #a0522d;\">jqXHR</span>) {
                $(<span style=\"color: #8b2252;\">\".user-form\"</span>).hide();
                goget.render($.parseJSON(jqXHR.responseText).items);
            })
            .fail(<span style=\"color: #a020f0;\">function</span> (<span style=\"color: #a0522d;\">data</span>) {
                console.log([<span style=\"color: #8b2252;\">\"Failed!\"</span>, data.responseText])
                $(<span style=\"color: #8b2252;\">\".user-form .error\"</span>).text(data.responseText).show()
            })
    },
    <span style=\"color: #0000ff;\">login</span>: <span style=\"color: #a020f0;\">function</span> (<span style=\"color: #a0522d;\">name</span>, <span style=\"color: #a0522d;\">pass</span>) {
        goget.userPost(<span style=\"color: #8b2252;\">\"/auth/login\"</span>, { name: name, passphrase: pass });
    },
    <span style=\"color: #0000ff;\">register</span>: <span style=\"color: #a020f0;\">function</span> (<span style=\"color: #a0522d;\">name</span>, <span style=\"color: #a0522d;\">pass</span>) {
        goget.userPost(<span style=\"color: #8b2252;\">\"/auth/register\"</span>, { name: name, passphrase: pass });
    },
    <span style=\"color: #0000ff;\">add</span>: <span style=\"color: #a020f0;\">function</span> (<span style=\"color: #a0522d;\">itemName</span>, <span style=\"color: #a0522d;\">comment</span>, <span style=\"color: #a0522d;\">count</span>) {
        goget.itemPost(<span style=\"color: #8b2252;\">\"/app/new\"</span>, {itemName: itemName, comment: comment, count: count})
    },
    <span style=\"color: #0000ff;\">need</span>: <span style=\"color: #a020f0;\">function</span> (<span style=\"color: #a0522d;\">itemName</span>) {
        goget.itemPost(<span style=\"color: #8b2252;\">\"/app/item/need\"</span>, {itemName: itemName});
    },
    <span style=\"color: #0000ff;\">got</span>: <span style=\"color: #a020f0;\">function</span> (<span style=\"color: #a0522d;\">itemName</span>) {
        goget.itemPost(<span style=\"color: #8b2252;\">\"/app/item/got\"</span>, {itemName: itemName});
    }
    
}</pre>

<p><code>util</code> is a bunch of shortcut functions that make it relatively simple to do things which are trivial in the reactive version. Take <code>applyToVals</code>, for instance.</p>

<pre>    <span style=\"color: #0000ff;\">applyToVals</span>: <span style=\"color: #a020f0;\">function</span> (<span style=\"color: #a0522d;\">fn</span>, <span style=\"color: #a0522d;\">DOMContext</span>, <span style=\"color: #a0522d;\">listOfDOMSelectors</span>) {
        <span style=\"color: #a020f0;\">return</span> fn.apply({}, util.vals(util.under(DOMContext, listOfDOMSelectors)));
    },</pre>

<p>This is only necessary because in order to get values out of inputs, I have to do DOM traversals. Take a look at the sample invocation back in the jQuery-style HTML file</p>

<pre><span style=\"color: #a0522d;\">onclick</span>=\"util.applyToVals(goget.add, '.controls ', ['.name', '.comment', '.count'])\"</pre>

<p>So, in other words, there are three controls in the DOM somewhere, and I'd like to grab their values and pass them to the function <code>goget.add</code>. I could call <code>goget.add($(\".controls .name\").val(), $(\".controls .comment\").val(), $(\".controls .count\").val(),)</code>, but that seems more than mildly annoying if I have to do it multiple times. So I pulled out the pattern; <code>applyToVals</code> takes a function, a DOM context<a href=\"#foot-Sat-Feb-16-205520EST-2013\" name=\"note-Sat-Feb-16-205520EST-2013\">[3]</a> and a list of element selectors. It then concatenates the DOM context onto each of the selectors, and returns a list of the values of the elements specified by those selectors.</p>

<p>How do we do that in Angular?</p>

<pre>        &lt;<span style=\"color: #0000ff;\">li</span> <span style=\"color: #a0522d;\">class</span>=<span style=\"color: #8b2252;\">\"controls\"</span>&gt;
          &lt;<span style=\"color: #0000ff;\">input</span> <span style=\"color: #a0522d;\">type</span>=<span style=\"color: #8b2252;\">\"text\"</span> <span style=\"color: #a0522d;\">placeholder</span>=<span style=\"color: #8b2252;\">\"Item Name\"</span> <span style=\"color: #a0522d;\">ng-model</span>=<span style=\"color: #8b2252;\">\"newItem.name\"</span> /&gt; 
          &lt;<span style=\"color: #0000ff;\">input</span> <span style=\"color: #a0522d;\">type</span>=<span style=\"color: #8b2252;\">\"text\"</span> <span style=\"color: #a0522d;\">placeholder</span>=<span style=\"color: #8b2252;\">\"Comment\"</span> <span style=\"color: #a0522d;\">ng-model</span>=<span style=\"color: #8b2252;\">\"newItem.comment\"</span> /&gt;
          &lt;<span style=\"color: #0000ff;\">input</span> <span style=\"color: #a0522d;\">type</span>=<span style=\"color: #8b2252;\">\"text\"</span> <span style=\"color: #a0522d;\">placeholder</span>=<span style=\"color: #8b2252;\">\"Count\"</span> <span style=\"color: #a0522d;\">ng-model</span>=<span style=\"color: #8b2252;\">\"newItem.count\"</span>&gt;
          &lt;<span style=\"color: #0000ff;\">button</span> <span style=\"color: #a0522d;\">class</span>=<span style=\"color: #8b2252;\">\"btn\"</span> <span style=\"color: #a0522d;\">ng-click</span>=<span style=\"color: #8b2252;\">\"add(newItem.name, newItem.comment, newItem.count)\"</span>&gt;&lt;<span style=\"color: #0000ff;\">i</span> <span style=\"color: #a0522d;\">class</span>=<span style=\"color: #8b2252;\">\"icon-plus\"</span>&gt;&lt;/<span style=\"color: #0000ff;\">i</span>&gt;&lt;/<span style=\"color: #0000ff;\">button</span>&gt;
        &lt;/<span style=\"color: #0000ff;\">li</span>&gt;</pre>

<p>That's actually a snippet from the Angular-style HTML file, and only about 1/5th of it is responsible for the equivalent. Each of the inputs we care about has an <code>ng-model</code> property, and that we then just pass those models into <code>add</code>. If it worked where I needed it to, I wouldn't have bothered finding a better solution than this.</p>

<p>Most of the rest of the <code>util</code> namespace is actually just intermediate definitions for <code>util.applyToVals</code>, and there's one definition that uses it specifically to pull out data from the user form. Oh, and a shorthand for compiling a particular <code>Handlebars</code> template. There's a snippet where we define a helper function for the main template, and a place in the <code>goget</code> namespace wherein we call <code>render</code>, which is famously missing from Angular, and that's really it. The rest of it is transliterated pretty clearly.</p>

<p>The only other thing I'll highlight is that the Angular version contains this:</p>

<pre>    .config(<span style=\"color: #a020f0;\">function</span> (<span style=\"color: #a0522d;\">$httpProvider</span>) {
        <span style=\"color: #b22222;\">/// </span><span style=\"color: #b22222;\">Angular's post doesn't do the correct default thing with POST parameters
</span>        $httpProvider.defaults.headers.post[<span style=\"color: #8b2252;\">'Content-Type'</span>] = <span style=\"color: #8b2252;\">'application/x-www-form-urlencoded; charset=UTF-8'</span>;
        $httpProvider.defaults.transformRequest = <span style=\"color: #a020f0;\">function</span>(<span style=\"color: #a0522d;\">data</span>){
            <span style=\"color: #a020f0;\">return</span> _.map(data, <span style=\"color: #a020f0;\">function</span> (<span style=\"color: #a0522d;\">val</span>, <span style=\"color: #a0522d;\">k</span>) { <span style=\"color: #a020f0;\">return</span> encodeURIComponent(k) + <span style=\"color: #8b2252;\">\"=\"</span> + encodeURIComponent(val); }).join(<span style=\"color: #8b2252;\">\"&amp;\"</span>);
        }
    });</pre>

<p>which the jQuery version doesn't. As far as I'm concerned, this is the one place where the Angular devs are just plain wrong. I know other approaches are possible here, so I guess it's a good thing that there's an option. But as far as I'm aware, all the widely used HTTP servers out there right now expect POST parameters to be encoded in the <code>www-form</code> format by default. And that's <i>not</i> what Angular does with JSON objects by default.</p>

<pre>$http.post(<span style=\"color: #8b2252;\">\"/foo\"</span>, { bar: 1, baz: 2 });</pre>

<p>will actually send the server a POST body that looks like <code>{<span style=\"color: #8b2252;\">\"bar\"</span>:1,<span style=\"color: #8b2252;\">\"baz\"</span>:2}</code>. At that point it's up to you to grab the raw request and parse that body with a JSON interpreter. What you likely want, because most HTTP servers will parse it appropriately by default, is <code>bar=1&baz=2</code>, with both the keys and values getting URI-encoded just in case. The way you do that is by using this config option I've got above. The jQuery equivalent doesn't need this, because <code>$.post</code> does the right thing with no additional prodding<a href=\"#foot-Sat-Feb-16-205531EST-2013\" name=\"note-Sat-Feb-16-205531EST-2013\">[4]</a>.</p>


<hr />
<h5>Footnotes</h5>
<p>1 - <a href=\"#note-Sat-Feb-16-205443EST-2013\" name=\"foot-Sat-Feb-16-205443EST-2013\">[back]</a> - Specifically, it had to do with reading the <code>count</code> parameter. You can see the fix <a href=\"https://github.com/Inaimathi/goget/blob/master/goget.hs#L98-L102\">here</a> and <a href=\"https://github.com/Inaimathi/goget/blob/master/goget.hs#L74-L78\">here</a>. Short version: <code>count</code> needs to be readable as an <code><span style=\"color: #228b22;\">Integer</span></code> for the back-end to proceed, but it's coming from the outside, which means I can't guarantee that. The initial version of the code was optimistic, simply using <code><span style=\"color: #0000ff;\">read</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">Integer</span></code> assuming it could work. If a malicious front-end sent back something that couldn't be read as a number, that would have given me a run-time error. I'm under the impression that these are to be avoided in Haskell..</p>

<p>2 - <a href=\"#note-Sat-Feb-16-205448EST-2013\" name=\"foot-Sat-Feb-16-205448EST-2013\">[back]</a> - Defaulting to jQuery because I want to use it from my phone, and putting the angular version at <code>/angular/*</code> rather than at root.</p>

<p>3 - <a href=\"#note-Sat-Feb-16-205520EST-2013\" name=\"foot-Sat-Feb-16-205520EST-2013\">[back]</a> - The common selector prefix of any elements I'll need to grab from.</p>

<p>4 - <a href=\"#note-Sat-Feb-16-205531EST-2013\" name=\"foot-Sat-Feb-16-205531EST-2013\">[back]</a> - I have no idea whether there are options to do it another way in jQuery.</p>
"))
((5202 3723 605040000) :INSERT (120 :POSTED 3569979600))
((5202 3723 605042000) :INSERT (120 :TAG :ANGULARJS))
((5202 3723 605045000) :INSERT (120 :TAG :HTML))
((5202 3723 605047000) :INSERT (120 :TAG :JAVASCRIPT))
((5202 3723 605048000) :INSERT (120 :TAG :JQUERY))
((5202 3723 605415000) :INSERT
 (121 :TITLE "Haskell Profiling Redux. Also, briefly Ponies."))
((5202 3723 605420000) :INSERT (121 :FILE "haskell-profiling-redux.html"))
((5202 3723 605422000) :INSERT (121 :EDITED 3610300345))
((5202 3723 605424000) :INSERT
 (121 :BODY
  "<p>Before we get into the <a href=\"http://hackage.haskell.org/package/criterion-0.6.0.0\">Criterion</a> benchmarking library, I guess I should actually fulfill the function of this journal of mine every so often. This is entirely unrelated to programming, so skip to the next heading if you want to get directly to benching examples.</p>

<h3>Ponies</h3>

<p>Before the last little while, I could have recommended <a href=\"http://www.youtube.com/watch?v=zy6ELvVdgh4&list=PLFF6671BFA09E4AD8\">it</a> to you without reservations.</p>

<p>However, apparently some Hasbro exec wasn't happy to leave well enough alone? So Season 3, which concluded this past Saturday was both a) half as long as usual and b) very hit-or-miss.</p>

<p>The finale in particular was excruciating. Not that the animators and writers didn't do their best, I guess, but it's pretty obvious that this episode was rushed as fuck and not at all what they were planning for the ending of the season<a href=\"#foot-Sun-Feb-17-224001EST-2013\" name=\"note-Sun-Feb-17-224001EST-2013\">[1]</a>. I actually had to stop watching because my eye-rolling intensity was ramping up at each scene. You <i>really</i> have to work to kill my willing suspension of disbelief in any cartoon, let alone this one. That should tell you something. My wife is a more hardcore fan, having started in on ponies at G1, back when the fandom was almost exclusively female. She managed to finish out the episode, then she cried for a while. If she wasn't still nursing, I have no doubt that she'd have pulled out the scotch. That should tell you the same thing, but in 76-point, bold, condensed type.</p>

<p>So anyway, instead of</p>

<blockquote>Go watch ponies, they're quite good. <span class=\"sig\">Inaimathi</span></blockquote>

<p>my recommendation now has to look something like</p>

<blockquote>Go watch ponies, they're quite good. But avoid episodes 10, 11, 12 and 13 of season 3. And actually, S3E3 and S3E4 weren't up to par either. And S3E9 has some annoyingly out of character behavior. And while otherwise excellent, the season 3 premiere foreshadows some interesting character development and story hooks that never got followed up on, so don't watch that unless you're ok with getting no closure at all. <span class=\"sig\">Inaimathi</span></blockquote>

<p>That's ... less than a ringing endorsement, but I guess I'll stick around to see what they can pull off in season 4<a href=\"#foot-Sun-Feb-17-224008EST-2013\" name=\"note-Sun-Feb-17-224008EST-2013\">[2]</a>. In the meantime, there are some fan projects that look really good<a href=\"#foot-Sun-Feb-17-224032EST-2013\" name=\"note-Sun-Feb-17-224032EST-2013\">[4]</a>. <a href=\"http://sliceofponylife.tumblr.com/\">Slice of Life</a> is a tumblr based webcomic that honestly looks like what the next step for the official media <i>should</i> be; a simple, character-driven story of some minor characters introduced over the course of the first two seasons<a href=\"#foot-Sun-Feb-17-224036EST-2013\" name=\"note-Sun-Feb-17-224036EST-2013\">[5]</a>. Also, there's <a href=\"http://www.youtube.com/playlist?list=PL347AD9B9E509804A\">Turnabout Storm</a>, a fan-made FiM/Phoenix Wright crossover which treats both source series fairly respectfully. That might just be my wife's and my weird tastes showing, but we're both heavily invested.</p>

<h3>Haskell</h3>

<p>Right, back to the subject at hand. Last week, I finally got out to <a href=\"http://hacklab.to/archives/toronto-haskell-users-meetup/\">the Haskell group</a>. They don't always meet up, and when they do it's usually in the second Wednesday of the month<a href=\"#foot-Sun-Feb-17-224040EST-2013\" name=\"note-Sun-Feb-17-224040EST-2013\">[6]</a>, but this month, they met on a Thursday that wasn't otherwise occupied for me.</p>

<p>First impressions are that I have no idea what the fuck I'm doing.</p>

<p>These guys are far enough beyond me in terms of math chops that I couldn't follow all of the conversation happening. I know it's a good thing to periodically be the dumbest guy in the room, but it doesn't feel good while it's happening. Anyhow, we had a long-ish presentation on <a href=\"http://www.haskell.org/arrows/\">Arrows</a> and their implications followed by some free-form discussion. One of the things I picked up was the question of how <a href=\"http://hackage.haskell.org/package/acid-state-0.8.2\">Acid-State</a> compares performance-wise to <a href=\"http://hackage.haskell.org/package/mongoDB\">other</a> data <a href=\"http://hackage.haskell.org/package/HDBC\">back-ends</a> available, and another was mention of <a href=\"http://hackage.haskell.org/package/criterion-0.6.0.0\">Criterion</a>. The first is something I aim to get to next time, the second is a profiling library for Haskell that doesn't require you to go through any of that <a href=\"/article?name=not-optimizing-haskell.html\">GHC compilation flag bullshit I took you through last time</a>. So I figured I'd crack it open and see if it can provide decent output for me.</p>

<h3>Profiling Haskell with Criterion</h3>

<p>Criterion doesn't work on the same level as the GHC profiler. Specifically, it works on individual functions rather than complete programs. It lets you specify labels and benchmark groups, and it takes your hardware into consideration. In concrete terms, lets take that Life module from <a href=\"/article?name=not-optimizing-haskell.html\">a while ago</a> for a spin.</p>

<pre><span style=\"color: #a020f0;\">module</span> <span style=\"color: #228b22;\">Life</span> <span style=\"color: #a020f0;\">where</span>
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Data.List</span> (group, sort, concatMap)
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Data.Set</span>

<span style=\"color: #0000ff;\">inRange</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">Ord</span> a <span style=\"color: #a0522d;\">=&gt;</span> a <span style=\"color: #a0522d;\">-&gt;</span> a <span style=\"color: #a0522d;\">-&gt;</span> a <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Bool</span>
<span style=\"color: #0000ff;\">inRange</span> low n high <span style=\"color: #a0522d;\">=</span> low <span style=\"color: #a0522d;\">&lt;</span> n <span style=\"color: #a0522d;\">&amp;&amp;</span> n <span style=\"color: #a0522d;\">&lt;</span> high

<span style=\"color: #0000ff;\">lifeStep</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">Integer</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Set</span> (<span style=\"color: #228b22;\">Integer</span>, <span style=\"color: #228b22;\">Integer</span>) <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Set</span> (<span style=\"color: #228b22;\">Integer</span>, <span style=\"color: #228b22;\">Integer</span>)
<span style=\"color: #0000ff;\">lifeStep</span> worldSize cells <span style=\"color: #a0522d;\">=</span> fromList [head g <span style=\"color: #a0522d;\">|</span> g <span style=\"color: #a0522d;\">&lt;-</span> grouped cells, viable g]
  <span style=\"color: #a020f0;\">where</span> grouped <span style=\"color: #a0522d;\">=</span> group <span style=\"color: #a0522d;\">.</span> sort <span style=\"color: #a0522d;\">.</span> concatMap neighbors <span style=\"color: #a0522d;\">.</span> toList
        neighbors (x, y) <span style=\"color: #a0522d;\">=</span> [(x<span style=\"color: #a0522d;\">+</span>dx, y<span style=\"color: #a0522d;\">+</span>dy) <span style=\"color: #a0522d;\">|</span> dx <span style=\"color: #a0522d;\">&lt;-</span> [<span style=\"color: #a0522d;\">-</span>1<span style=\"color: #a0522d;\">..</span>1], dy <span style=\"color: #a0522d;\">&lt;-</span> [<span style=\"color: #a0522d;\">-</span>1<span style=\"color: #a0522d;\">..</span>1], 
                            (dx,dy) <span style=\"color: #a0522d;\">/=</span> (0,0), inSize (dx<span style=\"color: #a0522d;\">+</span>x) (dy<span style=\"color: #a0522d;\">+</span>y)]
        inSize x y <span style=\"color: #a0522d;\">=</span> inR x worldSize <span style=\"color: #a0522d;\">&amp;&amp;</span> inR y worldSize
        inR <span style=\"color: #a0522d;\">=</span> inRange 0
        viable [<span style=\"color: #a020f0;\">_</span>,<span style=\"color: #a020f0;\">_</span>,<span style=\"color: #a020f0;\">_</span>] <span style=\"color: #a0522d;\">=</span> <span style=\"color: #228b22;\">True</span>
        viable [c,<span style=\"color: #a020f0;\">_</span>] <span style=\"color: #a0522d;\">=</span> c <span style=\"color: #a0522d;\">`member`</span> cells
        viable <span style=\"color: #a020f0;\">_</span> <span style=\"color: #a0522d;\">=</span> <span style=\"color: #228b22;\">False</span>

<span style=\"color: #0000ff;\">runLife</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">Integer</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Integer</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Set</span> (<span style=\"color: #228b22;\">Integer</span>, <span style=\"color: #228b22;\">Integer</span>) <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Set</span> (<span style=\"color: #228b22;\">Integer</span>, <span style=\"color: #228b22;\">Integer</span>)
<span style=\"color: #0000ff;\">runLife</span> worldSize steps cells <span style=\"color: #a0522d;\">=</span> rec (steps <span style=\"color: #a0522d;\">-</span> 1) cells
  <span style=\"color: #a020f0;\">where</span> rec 0 cells <span style=\"color: #a0522d;\">=</span> cells
        rec s cells <span style=\"color: #a0522d;\">=</span> rec (s <span style=\"color: #a0522d;\">-</span> 1) <span style=\"color: #a0522d;\">$!</span> lifeStep worldSize cells

<span style=\"color: #0000ff;\">glider</span> <span style=\"color: #a0522d;\">=</span> fromList [(1, 0), (2, 1), (0, 2), (1, 2), (2, 2)]
<span style=\"color: #0000ff;\">blinker</span> <span style=\"color: #a0522d;\">=</span> fromList [(1, 0), (1, 1), (1, 2)]
<span style=\"color: #0000ff;\">gosperGliderGun</span> <span style=\"color: #a0522d;\">=</span> fromList [(24, 0), (22, 1), (24, 1), (12, 2), (13, 2), (20, 2), (21, 2), (34, 2), (35, 2), (11, 3), (15, 3), (20, 3), (21, 3), (34, 3), (35, 3), (0, 4), (1, 4), (10, 4), (16, 4), (20, 4), (21, 4), (0, 5), (1, 5), (10, 5), (14, 5), (16, 5), (17, 5), (22, 5), (24, 5), (10, 6), (16, 6), (24, 6), (11, 7), (15, 7), (12, 8), (13, 8)]

<span style=\"color: #0000ff;\">main</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">IO</span> <span style=\"color: #228b22;\">()</span>
<span style=\"color: #0000ff;\">main</span> <span style=\"color: #a0522d;\">=</span> putStrLn <span style=\"color: #a0522d;\">.</span> show <span style=\"color: #a0522d;\">$</span> runLife 50 5000 gosperGliderGun</pre>

<p>The <code><span style=\"color: #228b22;\">Critreion</span></code> benching specification for that would look something like</p>

<pre><span style=\"color: #b22222;\">{-</span><span style=\"color: #b22222;\"># LANGUAGE ScopedTypeVariables #-}</span>

<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Criterion.Main</span>
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #a020f0;\">qualified</span> <span style=\"color: #228b22;\">Life</span>

<span style=\"color: #0000ff;\">main</span> <span style=\"color: #a0522d;\">=</span> defaultMain [
  bgroup <span style=\"color: #8b2252;\">\"lifeStep\"</span> [
     bench <span style=\"color: #8b2252;\">\"Gun\"</span> <span style=\"color: #a0522d;\">$</span> whnf step <span style=\"color: #228b22;\">Life</span><span style=\"color: #a0522d;\">.</span>gosperGliderGun,
     bench <span style=\"color: #8b2252;\">\"Glider\"</span> <span style=\"color: #a0522d;\">$</span> whnf step <span style=\"color: #228b22;\">Life</span><span style=\"color: #a0522d;\">.</span>glider,
     bench <span style=\"color: #8b2252;\">\"Blinker\"</span> <span style=\"color: #a0522d;\">$</span> whnf step <span style=\"color: #228b22;\">Life</span><span style=\"color: #a0522d;\">.</span>blinker
     ],
  bgroup <span style=\"color: #8b2252;\">\"runLife\"</span> [ 
     bench <span style=\"color: #8b2252;\">\"Gun\"</span> <span style=\"color: #a0522d;\">$</span> whnf run <span style=\"color: #228b22;\">Life</span><span style=\"color: #a0522d;\">.</span>gosperGliderGun,
     bench <span style=\"color: #8b2252;\">\"Glider\"</span> <span style=\"color: #a0522d;\">$</span> whnf run <span style=\"color: #228b22;\">Life</span><span style=\"color: #a0522d;\">.</span>glider,
     bench <span style=\"color: #8b2252;\">\"Blinker\"</span> <span style=\"color: #a0522d;\">$</span> whnf run <span style=\"color: #228b22;\">Life</span><span style=\"color: #a0522d;\">.</span>blinker
     ],
  bgroup <span style=\"color: #8b2252;\">\"main\"</span> [
    bench <span style=\"color: #8b2252;\">\"with IO\"</span> <span style=\"color: #a0522d;\">$</span> whnfIO <span style=\"color: #228b22;\">Life</span><span style=\"color: #a0522d;\">.</span>main
    ]
  ]
  <span style=\"color: #a020f0;\">where</span> step <span style=\"color: #a0522d;\">=</span> <span style=\"color: #228b22;\">Life</span><span style=\"color: #a0522d;\">.</span>lifeStep 50
        run <span style=\"color: #a0522d;\">=</span> <span style=\"color: #228b22;\">Life</span><span style=\"color: #a0522d;\">.</span>runLife 50 5000</pre>

<p>Take note of a few things in here. First, <code>bgroup</code> is of type <code><span style=\"color: #228b22;\">String</span> <span style=\"color: #a0522d;\">-&gt;</span> [<span style=\"color: #228b22;\">Benchmark</span>] <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Benchmark</span></code>, which means that you can nest them; I just don't. Second, because you actually have to pass the functions you bench this way, you obviously can't measure internal definitions; you'll need to pull those pieces out to the top-level in order to figure out how much time they're taking. Third, <code>whnf</code> actually takes the target function and its last argument as separate arguments. <a href=\"http://hackage.haskell.org/packages/archive/criterion/latest/doc/html/Criterion-Main.html\">The documentation</a> says this is to prevent <code>bench</code> calls themselves from being optimized away by <code>ghc -O</code>, which would be less than ideal for obvious reasons. The output of the above will be something like</p>

<pre>warming up
estimating clock resolution...
mean is 2.233879 us (320001 iterations)
found 52279 outliers among 319999 samples (16.3%)
  158 (4.9e-2%) low severe
  52121 (16.3%) high severe
estimating cost of a clock call...
mean is 53.36260 ns (14 iterations)

benchmarking lifeStep/Gun
mean: 1.741280 ms, lb 1.737541 ms, ub 1.745301 ms, ci 0.950
std dev: 19.92180 us, lb 17.54283 us, ub 24.73115 us, ci 0.950

benchmarking lifeStep/Glider
mean: 202.0392 us, lb 201.8147 us, ub 202.3017 us, ci 0.950
std dev: 1.240524 us, lb 1.058166 us, ub 1.716059 us, ci 0.950

benchmarking lifeStep/Blinker
mean: 113.2888 us, lb 113.1514 us, ub 113.4549 us, ci 0.950
std dev: 775.2598 ns, lb 649.4014 ns, ub 1.132731 us, ci 0.950

benchmarking runLife/Gun
collecting 100 samples, 1 iterations each, in estimated 539.4134 s
mean: 5.436085 s, lb 5.427699 s, ub 5.447670 s, ci 0.950
std dev: 50.19115 ms, lb 38.42313 ms, ub 67.52400 ms, ci 0.950

benchmarking runLife/Glider
mean: 21.11409 ms, lb 20.93418 ms, ub 21.53549 ms, ci 0.950
std dev: 1.325480 ms, lb 478.7184 us, ub 2.322194 ms, ci 0.950
found 5 outliers among 100 samples (5.0%)
  3 (3.0%) high mild
  2 (2.0%) high severe
variance introduced by outliers: 59.525%
variance is severely inflated by outliers

benchmarking runLife/Blinker
mean: 19.77626 ms, lb 19.74970 ms, ub 19.81207 ms, ci 0.950
std dev: 157.6956 us, lb 125.2292 us, ub 204.1448 us, ci 0.950

benchmarking main/with IO
fromList [(3,5),(4,4),(4,6),(5,4),(5,6),(6,5),(17,3),(17,4),(18,3),(18,4),(22,4),(22,5),(23,3),(23,6),(24,4),(24,6),(25,5),(34,2),(34,3),(35,2),(35,3)]
collecting 100 samples, 1 iterations each, in estimated 547.4592 s
fromList [(3,5),(4,4),(4,6),(5,4),(5,6),(6,5),(17,3),(17,4),(18,3),(18,4),(22,4),(22,5),(23,3),(23,6),(24,4),(24,6),(25,5),(34,2),(34,3),(35,2),(35,3)]

&lt;snip a fuckton of duplicates /&gt;

fromList [(3,5),(4,4),(4,6),(5,4),(5,6),(6,5),(17,3),(17,4),(18,3),(18,4),(22,4),(22,5),(23,3),(23,6),(24,4),(24,6),(25,5),(34,2),(34,3),(35,2),(35,3)]
mean: 772.6040 us, lb 753.6831 us, ub 785.0876 us, ci 0.950
std dev: 77.70160 us, lb 51.99922 us, ub 110.7696 us, ci 0.950
found 8 outliers among 100 samples (8.0%)
  5 (5.0%) low severe
  2 (2.0%) high severe
variance introduced by outliers: 79.011%
variance is severely inflated by outliers</pre>

<p>You can apparently generate shiny HTML/JS-based performance reports, judging by what I'm reading <a href=\"https://github.com/bos/criterion/blob/master/Criterion/Report.hs\">here</a>, but I haven't bothered to. Basically what this library does, which you can see by that output, is take each function you pass it and try it a bunch of times, then hand you stats on how long it took. It <i>doesn't</i> give you any kind of memory usage information, and won't give you information on sub-expressions. On the other hand, you don't need to dick around with installing the profiling versions of any library, or any of GHC's profiling flags, and you get to be more surgical about it <i>and</i> this compiles results from a bunch of trials<a href=\"#foot-Sun-Feb-17-224056EST-2013\" name=\"note-Sun-Feb-17-224056EST-2013\">[7]</a> which gives me slightly more confidence in the results.</p>

<p>So, I mean, pros and cons.</p>

<p>Not having to grub around my <code>.cabal</code> config<a href=\"#foot-Sun-Feb-17-224100EST-2013\" name=\"note-Sun-Feb-17-224100EST-2013\">[8]</a> sounds like a good thing, and I typically care a lot more about execution time than memory usage in the applications I write. So <a href=\"https://github.com/bos/criterion\">this</a> looks like an all-round better way to benchmark than the default.</p>

<p>Tune in next time, when I'll probably put this tool to use in comparing some of the database options I have in Haskell.</p>

<hr />
<h5>Footnotes</h5>
<p>1 - <a href=\"#note-Sun-Feb-17-224001EST-2013\" name=\"foot-Sun-Feb-17-224001EST-2013\">[back]</a> - Since there was no mention of this \"Equestria Games\" thing they were building up for three episodes.</p>

<p>2 - <a href=\"#note-Sun-Feb-17-224008EST-2013\" name=\"foot-Sun-Feb-17-224008EST-2013\">[back]</a> - My wife's theory is that I shouldn't bother. She thinks the studio has been giving FiM less attention because they're preparing to ramp up on <a href=\"http://mlp.wikia.com/wiki/Equestria_Girls_(spinoff)\">Equestria Girls</a>; another spin-off show for kids about chicks in high-school<a href=\"#foot-Sun-Feb-17-224017EST-2013\" name=\"note-Sun-Feb-17-224017EST-2013\">[3]</a>. It's plausible, but I'll still reserve judgement.</p>
<p>3 - <a href=\"#note-Sun-Feb-17-224017EST-2013\" name=\"foot-Sun-Feb-17-224017EST-2013\">[back]</a> - Incidentally, my wife adds \"Booooo!\".</p>

<p>4 - <a href=\"#note-Sun-Feb-17-224032EST-2013\" name=\"foot-Sun-Feb-17-224032EST-2013\">[back]</a> - Except that <a href=\"http://tvtropes.org/pmwiki/pmwiki.php/Main/FanonDiscontinuity\">they're happening in a parallel universe now</a><a href=\"#foot-Mon-Feb-18-011321EST-2013\" name=\"note-Mon-Feb-18-011321EST-2013\">[9]</a> or whatever, because Twilight Sparkle is not a unicorn anymore.</p>

<p>5 - <a href=\"#note-Sun-Feb-17-224036EST-2013\" name=\"foot-Sun-Feb-17-224036EST-2013\">[back]</a> - Incidentally, if anyone from Hasbro is reading; one way you could correct course at this point is by walking over to <a href=\"http://egophiliac.deviantart.com/\">egophiliac</a>'s house with a giant cheque, asking her what number she'd like on it, then putting her in charge of the writing and/or editing staff.</p>

<p>6 - <a href=\"#note-Sun-Feb-17-224040EST-2013\" name=\"foot-Sun-Feb-17-224040EST-2013\">[back]</a> - Which conflicts with my workout schedule.</p>

<p>7 - <a href=\"#note-Sun-Feb-17-224056EST-2013\" name=\"foot-Sun-Feb-17-224056EST-2013\">[back]</a> - The number of which you can specify by using <code>defaultMainWith</code> instead of <code>defaultMain</code> and passing it a potentially modified <code><a href=\"https://github.com/bos/criterion/blob/master/Criterion/Config.hs#L73-L89\">defaultConfig</a></code>.</p>

<p>8 - <a href=\"#note-Sun-Feb-17-224100EST-2013\" name=\"foot-Sun-Feb-17-224100EST-2013\">[back]</a> - Or re-install half my libraries later.</p>

<p>9 - <a href=\"#note-Mon-Feb-18-011321EST-2013\" name=\"foot-Mon-Feb-18-011321EST-2013\">[back]</a> - Actually, after I wrote this, I went over to check out the Slice of Life archives and it turns out that egophiliac has been going back and revising history as new stuff gets added to the show. For instance, Twilight now has added wings and there was a slight conversational change between Pound Cake and Scootaloo. My theory is that she hasn't updated more frequently lately because she's been too busy changing her archives in response to Hasbro's various wankery.</p>
"))
((5202 3723 605580000) :INSERT (121 :POSTED 3570066000))
((5202 3723 605582000) :INSERT (121 :TAG :HASKELL))
((5202 3723 606011000) :INSERT
 (122 :TITLE "Haskell Profiling: Third Impact, or, AcidState vs. The World"))
((5202 3723 606016000) :INSERT (122 :FILE "haskell-benchmarking.html"))
((5202 3723 606018000) :INSERT (122 :EDITED 3610022331))
((5202 3723 606020000) :INSERT
 (122 :BODY
  "<p>The <i>other</i> question mentioned last time was \"How does <a href=\"http://acid-state.seize.it/\">AcidState</a> stack up against the other database back-ends?\". So, here's a crack at the answer.</p>

<p>My benchmarking method was basically to port the <a href=\"https://github.com/Inaimathi/goget\">GoGet</a> back-end to <a href=\"http://hackage.haskell.org/package/HDBC\">HDBC</a> and <a href=\"https://github.com/selectel/mongodb-haskell\">MongoDB</a>, then see how each one does at</p>

<ul>
  <li>user insertion</li>
  <li>user listing</li>
  <li>item insertion</li>
  <li>user querying</li>
</ul>

<p>All of this was done on a 64-bit Debian Wheezy machine running on top of a Core i3. Data for other platforms/architectures welcome, but I'm not going there myself. Without further ado:</p>

<ul>
  <li><a href=\"http://173.255.226.138/report.html\">SM</a> - Starting with empty tables/collections and dealing with user #42</li>
  <li><a href=\"http://173.255.226.138/report-medium.html\">MD</a> - Starting with 1000 user records and dealing with user #789</li>
  <li><a href=\"http://173.255.226.138/report-large.html\">LG</a> - Starting with 50000 user records and dealing with user #42</li>
  <li><a href=\"http://173.255.226.138/report-large2.html\">LG2</a> - Starting with 50000 user records and dealing with user #45678</li>
  <li><a href=\"http://173.255.226.138/report-large-O.html\">LG-O</a> - Starting with 50000 user records and dealing with user #45678, compiled with <code>ghc -O --make</code> instead of just <code>ghc --make</code></li>
</ul>

<p>These are hosted on my own server because Blogger doesn't seem to like the Criterion markup. You'll find the same files in <a href=\"https://github.com/Inaimathi/haskell-profile/tree/master/results\">the codebase</a> if you prefer viewing local copies.</p>

<p>You'll note that I only managed the tiny benchmark for MySQL, and it's absent from the rest; this is because the connection kept choking randomly, which is consistent with my real-world experience. Not pictured is the four or five attempts/clears/restarts that I had to pull before even getting the numbers for a 100 user corpus. No other database, including SQLite, did anything similar.</p>

<p>So lets do a rundown.</p>

<h3>Obvious</h3>

<ul>
  <li>The vast majority of time spent inserting a user goes to generating the <code>scrypt</code> hash. This is obvious because of the huge difference between inserting an item and inserting a user. And, really, this is what you want in a real-world scenario. It should take fairly significant resources to try a password so as to make brute-forcing them a poor option, but in hindsight I could have saved myself a lot of time and compute by cutting that portion of user insertion across the board for benchmarking purposes.</li>
  <li>The <code>ghc</code> optimization flag approximately halves most numbers, and improves AcidState lookups by about 5x.</li>
  <li>MongoDB consistently outperforms all comers when it comes to user insertion, and performs very well on sub-insertion with small data-sets. The <code>$push</code> directive seems to be much faster than merely popping a new top-level record in, which I assume is why it manages to take about 1/3 the time of the next contender until we get up to the 50k corpus.</li>
  <li>SQLite loses in every category at every corpus size, but not by as much as I was expecting. It's actually a pretty good little lightweight DB engine, assuming you don't need to support too many simultaneous requests or too much data.</li>
  <li>AcidState is an absolute fucking monster. The benchmarks it loses, it loses narrowly<a href=\"#foot-Sat-Mar-09-134319EST-2013\" name=\"note-Sat-Mar-09-134319EST-2013\">[1]</a>, but the benchmarks it wins, it wins by an 8x or larger margin. Take special note that while the other engines bench in the high single/low double digit milliseconds, Acid consistently posts list and select numbers in the low double-digit <i>micro</i>seconds. Granted, insertion speed goes down a bit based on corpus size, but selection speed is always the same range of extremely low numbers. That's excellent for web applications, which tend to have a usage profile of \"rare-ish insertions coupled with large and common lookups\". It performs suspiciously well on selects. Well enough that I went back to GHCi and tried <code><span style=\"color: #0000ff;\">mapM</span> (getUserAcid acid) [40000<span style=\"color: #a0522d;\">..</span>40050]</code> and <code><span style=\"color: #0000ff;\">mapM_</span> (getUserAcid acid) [40000<span style=\"color: #a0522d;\">..</span>45000]</code> on the large corpus, just to make sure it wasn't recording thunk time instead of actual result time. It isn't. An IxSet lookup is actually just that fast.</li>
</ul>

<h3>Not-So Obvious</h3>

<p>There isn't as big a difference in code size as I was expecting. Honestly, I thought AcidState would be much chunkier than the competition, but it only turns out to be the longest by about 10 lines. This might be because I was determined to work with Haskell-style type declarations in each of the models. The reasoning there was that I'd typically be wanting to pull out data then convert it to some external data format after the fact<a href=\"#foot-Sat-Mar-09-134323EST-2013\" name=\"note-Sat-Mar-09-134323EST-2013\">[2]</a>, so getting a record in a canonical typed format was going to happen sooner or later anyway. This ends up working hardest against MongoDB, where conversion from very loosely-typed k/v pairs ends up looking something like</p>

<pre><span style=\"color: #0000ff;\">itemFromMongo</span> [nameField, commentField, statusField, countField] <span style=\"color: #a0522d;\">=</span> 
  <span style=\"color: #228b22;\">Item</span> { itemName <span style=\"color: #a0522d;\">=</span>  name, itemComment <span style=\"color: #a0522d;\">=</span> comment, itemStatus <span style=\"color: #a0522d;\">=</span> status, itemCount <span style=\"color: #a0522d;\">=</span> count }
  <span style=\"color: #a020f0;\">where</span> <span style=\"color: #228b22;\">Database.MongoDB.String</span> n <span style=\"color: #a0522d;\">=</span> value nameField
        name <span style=\"color: #a0522d;\">=</span> <span style=\"color: #228b22;\">Text</span><span style=\"color: #a0522d;\">.</span>unpack n
        <span style=\"color: #228b22;\">Database.MongoDB.String</span> c <span style=\"color: #a0522d;\">=</span> value commentField
        comment <span style=\"color: #a0522d;\">=</span> <span style=\"color: #228b22;\">Text</span><span style=\"color: #a0522d;\">.</span>unpack c
        <span style=\"color: #228b22;\">Database.MongoDB.String</span> s <span style=\"color: #a0522d;\">=</span> value statusField
        status <span style=\"color: #a0522d;\">=</span> read <span style=\"color: #a0522d;\">$</span> <span style=\"color: #228b22;\">Text</span><span style=\"color: #a0522d;\">.</span>unpack s
        <span style=\"color: #228b22;\">Int32</span> co <span style=\"color: #a0522d;\">=</span> value countField
        count <span style=\"color: #a0522d;\">=</span> fromIntegral co</pre>

<p>...which is ugly as fuck. A couple of those lines could have been eliminated by declaring <code>itemName</code> and <code>itemComment</code> as <code><span style=\"color: #228b22;\">Text</span></code> rather than string, but that would only make it very slightly less ugly.</p>

<p>MySQL crashes like a champ. I use it in a couple of real applications, and I remember having configuration problems there too. It really seems to want a fresh connection each time you do any significant chunk of work, and that seems like it would slow the whole thing down further. Like I said, this is probably a misconfiguration somewhere, and I welcome help if someone wants to go over the tests again on a different machine, giving MySQL more airtime. For the benchmarks it completed, it performs marginally better than AcidState on insertion and very marginally better than SQLite on selection.</p>

<p>It is almost trivially easy to port between HDBC back-ends. You need to call a different <code>connect</code> function and pass it different arguments, but that's more or less it. The only other hiccup I ran into here is the different table creation syntax; SQLite barfs if you try to declare something <code>AUTO_INCREMENT</code><a href=\"#foot-Sat-Mar-09-134330EST-2013\" name=\"note-Sat-Mar-09-134330EST-2013\">[3]</a>, but MySQL requires the statement or leaves you to specify the <code>ID</code> manually. I'm not sure what the differences are between implementations of the SQL standard across other engines, but they seem minimal enough that hopping around wouldn't be difficult.</p>

<p>MongoDB really <i>really</i> doesn't mesh with the Haskell way of doing things. I already mentioned this in the first Not-So Obvious point, but I wanted to highlight it a bit more. This is not to say it's bad. In fact, it would be my top choice if not for the massive impedance mismatch it has with the language. My negative opinion may also be exacerbated by the fact that I've used it in Python and Clojure, where there are no such problems because both languages deal with loosely typed k/v pairs as their primary hash construct<a href=\"#foot-Sat-Mar-09-134336EST-2013\" name=\"note-Sat-Mar-09-134336EST-2013\">[4]</a>. As always, it's possible that I'm doing it wrong, in which case, do point that out.</p>

<p>Finally, a hidden advantage that AcidState and to a lesser extent SQLite have is ease of deployment. The other engines all require some degree of setup beyond coding. MySQL needs an installed, running, properly configured server, with appropriate databases and users created, and your program needs to use the appropriate credentials when communicating. MongoDB needs an installed, running server<a href=\"#foot-Sat-Mar-09-134340EST-2013\" name=\"note-Sat-Mar-09-134340EST-2013\">[5]</a>. SQLite just requires that the deployment machine have <code>libsqlite3.so</code> or <code>sqlite3.dll</code> as appropriate. You need to create your tables the first time, but that's it. AcidState doesn't even require that much. All you need to make sure of is that you have the AcidState Haskell library installed when you're compiling your program. The resulting binary has no external deps whatsoever, so you can just run it on any machine of the appropriate architecture and platform. Personally, I'd be willing to give up non-trivial amounts of performance for a simplified setup process, so I'm quite happy that the easiest DB to work with from that perspective is also benching at or near the top for everything, at every corpus size.</p>

<h3>Code Notes</h3>

<p>That's all my thoughts on results; if that's all you were here for, you can safely disregard the rest of the article.</p>

<p>The code for these tests is <a href=\"https://github.com/Inaimathi/haskell-profile\">here</a>, but it's very raw at the moment. I plan to write some docs and make it easier to run these tests shortly. There's just a couple of things I want to call attention to explicitly so I don't forget about them.</p>

<p>First, note that I'm making one connection and handing it to each function.</p>

<pre><span style=\"color: #0000ff;\">main</span> <span style=\"color: #a0522d;\">=</span> <span style=\"color: #a020f0;\">do</span>
  acid <span style=\"color: #a0522d;\">&lt;-</span> openLocalState <span style=\"color: #228b22;\">Acid</span><span style=\"color: #a0522d;\">.</span>initialDB
  mongo <span style=\"color: #a0522d;\">&lt;-</span> <span style=\"color: #228b22;\">Mongo</span><span style=\"color: #a0522d;\">.</span>newConn
  sqlite <span style=\"color: #a0522d;\">&lt;-</span> <span style=\"color: #228b22;\">Database.HDBC.Sqlite3</span><span style=\"color: #a0522d;\">.</span>connectSqlite3 <span style=\"color: #8b2252;\">\"GoGetDB\"</span>
<span style=\"color: #b22222;\">--  </span><span style=\"color: #b22222;\">mysql &lt;- Database.HDBC.MySQL.connectMySQL defaultMySQLConnectInfo
</span>  defaultMain 
    [ 
      benchBlock <span style=\"color: #8b2252;\">\"AcidState\"</span> acid 
      (insertUserAcid, insertItemAcid, getUserAcid, (<span style=\"color: #a0522d;\">\\</span>acid <span style=\"color: #a0522d;\">-&gt;</span> query' acid <span style=\"color: #228b22;\">Acid.GetAccounts</span>)),
      bgroup <span style=\"color: #8b2252;\">\"HDBC\"</span> 
      [ 
<span style=\"color: #b22222;\">--        </span><span style=\"color: #b22222;\">hdbcBlock \"MySQL\" mysql,
</span>        hdbcBlock <span style=\"color: #8b2252;\">\"SQLite\"</span> sqlite
      ], 
      benchBlock <span style=\"color: #8b2252;\">\"MongoDB\"</span> mongo 
      (insertUserMongo, insertItemMongo, getUserMongo, <span style=\"color: #228b22;\">Mongo</span><span style=\"color: #a0522d;\">.</span>getAccounts)
    ]
  <span style=\"color: #228b22;\">Mongo</span><span style=\"color: #a0522d;\">.</span>close mongo
  <span style=\"color: #228b22;\">Database.HDBC</span><span style=\"color: #a0522d;\">.</span>disconnect sqlite
<span style=\"color: #b22222;\">--  </span><span style=\"color: #b22222;\">Database.HDBC.disconnect mysql
</span>  createCheckpointAndClose acid</pre>

<p>This is the recommended usage for AcidState and MongoDB, but I'm not entirely convinced it's the best approach for arbitrary SQL databases, or entirely sure how HDBC handles connection-pooling. The end result is, I think, to somewhat deflate the times attributed to using the HDBC back-ends.</p>

<p>Second, if you look at how the SQL database is organized</p>

<pre><span style=\"color: #0000ff;\">createTables</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">Connection</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">IO</span> [<span style=\"color: #228b22;\">Integer</span>]
<span style=\"color: #0000ff;\">createTables</span> conn <span style=\"color: #a0522d;\">=</span> withCommit conn q
  <span style=\"color: #a020f0;\">where</span> q conn <span style=\"color: #a0522d;\">=</span> mapM (<span style=\"color: #a0522d;\">\\</span>s <span style=\"color: #a0522d;\">-&gt;</span> run conn s <span style=\"color: #228b22;\">[]</span>) 
            [<span style=\"color: #8b2252;\">\"CREATE TABLE accounts (id INTEGER PRIMARY KEY AUTO_INCREMENT, name VARCHAR(120), passphrase VARCHAR(250))\"</span>,
             <span style=\"color: #8b2252;\">\"CREATE TABLE items (user VARCHAR(120), name VARCHAR(120), comment VARCHAR(120), status VARCHAR(4), count INTEGER)\"</span>]</pre>

<p>You'll see that I slightly re-configured the storage approach to match the back-end's relational model. Also, while the individual account selectors return a <code><span style=\"color: #228b22;\">Maybe</span> <span style=\"color: #228b22;\">Account</span></code>, <code>getAccounts</code> just does the naive SQL thing of <code>SELECT * FROM</code></p>

<pre><span style=\"color: #0000ff;\">getAccounts</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">Connection</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">IO</span> [[<span style=\"color: #228b22;\">SqlValue</span>]]
<span style=\"color: #0000ff;\">getAccounts</span> conn <span style=\"color: #a0522d;\">=</span> withCommit conn q
  <span style=\"color: #a020f0;\">where</span> q conn <span style=\"color: #a0522d;\">=</span> quickQuery' conn <span style=\"color: #8b2252;\">\"SELECT * FROM accounts\"</span> <span style=\"color: #228b22;\">[]</span>

<span style=\"color: #0000ff;\">getAccountBy</span> conn column value <span style=\"color: #a0522d;\">=</span> withCommit conn q
  <span style=\"color: #a020f0;\">where</span> qString <span style=\"color: #a0522d;\">=</span> <span style=\"color: #8b2252;\">\"SELECT * FROM accounts WHERE \"</span> <span style=\"color: #a0522d;\">++</span> column <span style=\"color: #a0522d;\">++</span> <span style=\"color: #8b2252;\">\" = ?\"</span>
        q conn <span style=\"color: #a0522d;\">=</span> <span style=\"color: #a020f0;\">do</span>
          res <span style=\"color: #a0522d;\">&lt;-</span> quickQuery' conn qString [toSql value]
          <span style=\"color: #a020f0;\">case</span> res <span style=\"color: #a020f0;\">of</span>
            <span style=\"color: #228b22;\">[]</span> <span style=\"color: #a0522d;\">-&gt;</span> return <span style=\"color: #a0522d;\">$</span> <span style=\"color: #228b22;\">Nothing</span>
            (u<span style=\"color: #a0522d;\">@</span>[<span style=\"color: #a020f0;\">_</span>, <span style=\"color: #228b22;\">SqlByteString</span> name, <span style=\"color: #a020f0;\">_</span>]<span style=\"color: #228b22;\">:</span>rest) <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #a020f0;\">do</span>
              items <span style=\"color: #a0522d;\">&lt;-</span> getAccountItems conn <span style=\"color: #a0522d;\">$</span> unpack name
              return <span style=\"color: #a0522d;\">$</span> <span style=\"color: #228b22;\">Just</span> <span style=\"color: #a0522d;\">$</span> accountFromSql u items

<span style=\"color: #0000ff;\">accountByName</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">Connection</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">String</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">IO</span> (<span style=\"color: #228b22;\">Maybe</span> <span style=\"color: #228b22;\">Account</span>)
<span style=\"color: #0000ff;\">accountByName</span> conn name <span style=\"color: #a0522d;\">=</span> getAccountBy conn <span style=\"color: #8b2252;\">\"name\"</span> name

<span style=\"color: #0000ff;\">accountById</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">Connection</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Integer</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">IO</span> (<span style=\"color: #228b22;\">Maybe</span> <span style=\"color: #228b22;\">Account</span>)
<span style=\"color: #0000ff;\">accountById</span> conn id <span style=\"color: #a0522d;\">=</span> getAccountBy conn <span style=\"color: #8b2252;\">\"id\"</span> id</pre>

<p>The MongoDB back-end does the same sort of thing</p>

<pre><span style=\"color: #0000ff;\">getAccounts</span> pipe <span style=\"color: #a0522d;\">=</span> <span style=\"color: #a020f0;\">do</span>
  res <span style=\"color: #a0522d;\">&lt;-</span> run pipe <span style=\"color: #a0522d;\">$</span> find (select <span style=\"color: #228b22;\">[]</span> <span style=\"color: #8b2252;\">\"accounts\"</span>) <span style=\"color: #a0522d;\">&gt;&gt;=</span> rest
  return <span style=\"color: #a0522d;\">$</span> <span style=\"color: #a020f0;\">case</span> res <span style=\"color: #a020f0;\">of</span>
    <span style=\"color: #228b22;\">Right</span> accounts <span style=\"color: #a0522d;\">-&gt;</span> accounts
    <span style=\"color: #a020f0;\">_</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">[]</span>

<span style=\"color: #0000ff;\">getAccountBy</span> pipe property value <span style=\"color: #a0522d;\">=</span> <span style=\"color: #a020f0;\">do</span>
  res <span style=\"color: #a0522d;\">&lt;-</span> run pipe <span style=\"color: #a0522d;\">$</span> findOne <span style=\"color: #a0522d;\">$</span> select [property <span style=\"color: #a0522d;\">=:</span> value] <span style=\"color: #8b2252;\">\"accounts\"</span>
  return <span style=\"color: #a0522d;\">$</span> <span style=\"color: #a020f0;\">case</span> res <span style=\"color: #a020f0;\">of</span>
    <span style=\"color: #228b22;\">Right</span> (<span style=\"color: #228b22;\">Just</span> acct) <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Just</span> <span style=\"color: #a0522d;\">$</span> accountFromMongo acct
    <span style=\"color: #a020f0;\">_</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Nothing</span>

<span style=\"color: #0000ff;\">accountById</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">Pipe</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Integer</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">IO</span> (<span style=\"color: #228b22;\">Maybe</span> <span style=\"color: #228b22;\">Account</span>)
<span style=\"color: #0000ff;\">accountById</span> pipe id <span style=\"color: #a0522d;\">=</span> getAccountBy pipe <span style=\"color: #8b2252;\">\"id\"</span> id

<span style=\"color: #0000ff;\">accountByName</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">Pipe</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">String</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">IO</span> (<span style=\"color: #228b22;\">Maybe</span> <span style=\"color: #228b22;\">Account</span>)
<span style=\"color: #0000ff;\">accountByName</span> pipe name <span style=\"color: #a0522d;\">=</span> getAccountBy pipe <span style=\"color: #8b2252;\">\"name\"</span> name</pre>

<p>That means that both <code><span style=\"color: #228b22;\">Mongo</span></code> and the <code><span style=\"color: #228b22;\">HDBC</span></code> back-ends should have a massive advantage over <code><span style=\"color: #228b22;\">Acid</span></code> for this particular function. Really, if I wanted to make it fair and get everyone to return the same data type, I'd have to write a <code>JOIN</code> for the <code>SQL</code> approach and <code>map</code> a conversion function over the whole thing. <code><span style=\"color: #228b22;\">Acid</span></code> gets that for free and, just in case I haven't pointed it out thoroughly enough yet, <i>still</i> schools all the rest on listing accounts.</p>

<p>Thirdly, I used manual auto-incrementing for MongoDB</p>

<pre><span style=\"color: #0000ff;\">newAccount</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">Val</span> v <span style=\"color: #a0522d;\">=&gt;</span> <span style=\"color: #228b22;\">Pipe</span> <span style=\"color: #a0522d;\">-&gt;</span> v <span style=\"color: #a0522d;\">-&gt;</span> v <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">IO</span> <span style=\"color: #228b22;\">Account</span>
<span style=\"color: #0000ff;\">newAccount</span> pipe name pass <span style=\"color: #a0522d;\">=</span> <span style=\"color: #a020f0;\">do</span>
  <span style=\"color: #228b22;\">Right</span> ct <span style=\"color: #a0522d;\">&lt;-</span> run pipe <span style=\"color: #a0522d;\">$</span> count <span style=\"color: #a0522d;\">$</span> select <span style=\"color: #228b22;\">[]</span> <span style=\"color: #8b2252;\">\"accounts\"</span>
  <span style=\"color: #a020f0;\">let</span> u <span style=\"color: #a0522d;\">=</span> [<span style=\"color: #8b2252;\">\"id\"</span> <span style=\"color: #a0522d;\">=:</span> succ ct, <span style=\"color: #8b2252;\">\"items\"</span> <span style=\"color: #a0522d;\">=:</span> (<span style=\"color: #228b22;\">[]</span> <span style=\"color: #a0522d;\">::</span> [<span style=\"color: #228b22;\">Database.MongoDB.Value</span>]), <span style=\"color: #8b2252;\">\"name\"</span> <span style=\"color: #a0522d;\">=:</span> name, <span style=\"color: #8b2252;\">\"passphrase\"</span> <span style=\"color: #a0522d;\">=:</span> pass]
  run pipe <span style=\"color: #a0522d;\">$</span> insert <span style=\"color: #8b2252;\">\"accounts\"</span> u
  return <span style=\"color: #a0522d;\">$</span> accountFromMongo u</pre>

<p>I don't think this adds too much overhead to user insertion, since the Mongo docs imply that <code>count</code> is not an expensive operation, but I thought I'd mention it. This is not how I'd do it in the real world, but I didn't feel like figuring out how to reliably predict a MongoDB ID hash for the purposes of benching it.</p>

<p>Now, to be fair, while the field is tilted slightly towards <code><span style=\"color: #228b22;\">HDBC</span></code>, the <i>task</i> actually favors noSQL data stores because of how <code><span style=\"color: #228b22;\">Account</span></code>s and <code><span style=\"color: #228b22;\">Item</span></code>s relate to one another. Where I'd have to pull some <code>JOIN</code> trickery in a relational database, a mere <code><span style=\"color: #228b22;\">IxSet</span></code> lookup gives me the same effect with AcidState, and a recursively nesting <code><span style=\"color: #228b22;\">Document</span></code> type does it for Mongo.</p>

<h3>Next Steps</h3>

<p>What I'd really like at this point is some peer review. Either refinements to the tasks, or implementations for other database back-ends<a href=\"#foot-Sat-Mar-09-134353EST-2013\" name=\"note-Sat-Mar-09-134353EST-2013\">[6]</a>, or data from different machines/environments, or general comments on approach/results. It would also be nice if someone did benchmarks with a large enough corpus that the entire thing didn't fit in memory. Remember, the question I'm trying to answer here is \"How well does AcidState stack up against other data storage options in Haskell\", and at this point the answer looks to be \"It destroys them and pisses on the ashes\". If that's not your experience, or if I missed some approach or edge case in my testing, it would be nice to find out before I start outright recommending it to everyone.</p>

<p>And that error checking is something I'll have to leave to the internet.</p>

<hr />
<h5>Footnotes</h5>
<p>1 - <a href=\"#note-Sat-Mar-09-134319EST-2013\" name=\"foot-Sat-Mar-09-134319EST-2013\">[back]</a> - Except that MongoDB is significantly better at item insertion for data sets in the ~1k user range.</p>

<p>2 - <a href=\"#note-Sat-Mar-09-134323EST-2013\" name=\"foot-Sat-Mar-09-134323EST-2013\">[back]</a> - Probably JSON, for most of my purposes.</p>

<p>3 - <a href=\"#note-Sat-Mar-09-134330EST-2013\" name=\"foot-Sat-Mar-09-134330EST-2013\">[back]</a> - It just automatically does the Right Thing©™ with a <code>PRIMARY KEY</code> field.</p>

<p>4 - <a href=\"#note-Sat-Mar-09-134336EST-2013\" name=\"foot-Sat-Mar-09-134336EST-2013\">[back]</a> - If you've never tried <a href=\"http://clojure.org/\">Clojure</a> with <a href=\"http://clojuremongodb.info/\">Monger</a>, incidentally, I suggest you stop reading now and go give it a shot. It is goddamned <b>glorious</b>.</p>

<p>5 - <a href=\"#note-Sat-Mar-09-134340EST-2013\" name=\"foot-Sat-Mar-09-134340EST-2013\">[back]</a> - I've heard that at higher traffic levels, Mongo tends to need more configuration and apparently assumes that it has the run of all server resources itself. I haven't run into such problems, and it seems like you could fix this by putting it on its own server in any case.</p>

<p>6 - <a href=\"#note-Sat-Mar-09-134353EST-2013\" name=\"foot-Sat-Mar-09-134353EST-2013\">[back]</a> - Specifically, I'm looking for pointers on how to get MySQL working properly, and I wouldn't mind someone putting together running code for PostgreSQL, but I won't be doing either myself.</p>
   "))
((5202 3723 606218000) :INSERT (122 :POSTED 3571880400))
((5202 3723 606223000) :INSERT (122 :TAG :DATABASES))
((5202 3723 606225000) :INSERT (122 :TAG :HASKELL))
((5202 3723 606435000) :INSERT
 (123 :TITLE "What Programming Language Should I Learn?"))
((5202 3723 606440000) :INSERT (123 :FILE "what-language-should-i-learn.html"))
((5202 3723 606442000) :INSERT (123 :EDITED 3610301148))
((5202 3723 606446000) :INSERT
 (123 :BODY
  "<p>I've seen this question pop up on various forums with disturbing frequency lately. Enough that I just wrote this so that I can link people to it instead of typing the advice out each time. The stuff I cover here has already been touched on in <a href=\"/article?name=self-titled.html\">a post called Self Titled</a>. Go read that if you want more perspective on my opinion, but it's fairly long so I need to put something shorter and more accessible together.</p>

<h3>A Better Question</h3>

<p>is \"What do I want to do with my programming skills?\"</p>

<p>If your goal is merely employment in commercial IT in the shallow future, then the answer is simple. You should learn C++. Then one of Java, C#, Objective C or PHP depending on what niche you want to work in. Then you should stop learning things. After a little bit of a grind, and as long as you're not a <i>complete</i> asshole, or idiot, or both, you'll get promoted to team lead somewhere. At that point you're not writing code, so it doesn't really matter what languages you know or how well.</p>

<p>That's it, you can go.</p>

<p>Pretend the rest of this article doesn't exist.</p>

<h3>If You're Still Reading</h3>

<p>your goal is to push the bleeding edge of Comp Sci/IT forward, and you have your work cut out for you.</p>

<p>If you're serious about this goal, then you need to understand something. Being a new programmer and asking \"What language should I learn?\" is roughly like being an aspiring carpenter and asking \"Should I learn to use hammers or screwdrivers?\". You won't get good answers because it's the wrong question. Usually, you get an avalanche of people coming in to push their pet language forward (\"Definitely just stick to the hammer\"), or to push the currently fashionable answers (\"No one uses hammers anymore, learn to use a nail gun\"), and you shouldn't listen to <i>any</i> of them.</p>

<p>Languages <i>are</i> tools, but they're not like <i>physical</i> tools. A language is not a bandsaw. It's the <a href=\"http://en.wikipedia.org/wiki/Theory_of_relativity\">Theory of Relativity</a>. A collection of <i>cognitive</i> tools and abstractions that help you think about unfamiliar and counterintuitive concepts precisely enough to explain them to very stupid machines, and perhaps to very inattentive humans. I say this because the askers of the big question often say that someone has told them something like \"Blub is old; don't bother with it\". That's not a valid argument against a language. Theories don't rust. Occasionally they're disproven, or revised, but merely being old isn't enough to discredit them<a href=\"#foot-Thu-Mar-14-155452EDT-2013\" name=\"note-Thu-Mar-14-155452EDT-2013\">[1]</a>.</p>

<p>If you want to be a brilliant programmer with a chance of impacting the deep future, sure, you need to understand how the underlying physical machine actually works, and C/C++ helps with that, but it's nowhere near sufficient. You need to <i>really</i> understand OO, which means spending a while hacking on <a href=\"http://www.pharo-project.org/home\">Smalltalk</a> or <a href=\"http://www.ruby-lang.org/en/\">Ruby</a> or <a href=\"http://staff.um.edu.mt/jskl1/talk.html\">Simula</a>. You need to understand the different <i>kinds</i> of OO on offer, which means dealing with class-based systems (like <a href=\"http://gcc.gnu.org/onlinedocs/libstdc++/\">C++</a>/<a href=\"http://www.java.com/en/\">Java</a> et al), prototype systems (<a href=\"http://nodejs.org/\">JavaScript</a> or <a href=\"http://selflanguage.org/\">Self</a>) and generic-based systems (<a href=\"http://www.sbcl.org/platform-table.html\">Common Lisp</a>) at minimum.</p>

<p>You need to go beyond OO; understand functional and declarative programming, in both strongly/statically and dynamically typed flavors. If you just want a list of languages, that means a whirlwind tour of <a href=\"http://www.haskell.org/platform/\">Haskell</a>/<a href=\"http://www.scala-lang.org/\">Scala</a>/an <a href=\"http://www.smlnj.org/\">ML</a>, a <a href=\"http://racket-lang.org/\">Lisp</a>, <a href=\"http://www.swi-prolog.org/\">Prolog</a> or <a href=\"http://www.erlang.org/\">Erlang</a>, and more than I can reasonably list here besides. It's probably a good bet to just look at the <a href=\"http://en.wikipedia.org/wiki/Programming_paradigm\">Programming Paradigms</a> page on Wikipedia and read anything linked off the right sidebar, it's all relevant.</p>

<p>You need a thorough understanding of compilers, which you can get by putting a few years into really, truly <a href=\"http://www.paulgraham.com/onlisptext.html\">understanding Lisp macros</a> and/or reading the <a href=\"http://www.amazon.com/Compilers-Principles-Techniques-Tools-2nd/dp/0321486811\">Purple Dragon book</a><a href=\"#foot-Thu-Mar-14-155656EDT-2013\" name=\"note-Thu-Mar-14-155656EDT-2013\">[2]</a> and/or <a href=\"http://en.wikibooks.org/wiki/Write_Yourself_a_Scheme_in_48_Hours\">writing one</a>. You'll need to know about data structures, both <a href=\"http://www.amazon.com/Data-Structures-Algorithms-Programming-Books/b?ie=UTF8&node=132570011\">traditional</a> and <a href=\"http://www.amazon.ca/Purely-Functional-Structures-Chris-Okasaki/dp/0521663504\">functional</a><a href=\"#foot-Thu-Mar-14-155701EDT-2013\" name=\"note-Thu-Mar-14-155701EDT-2013\">[3]</a>, about <a href=\"http://en.wikibooks.org/wiki/Set_Theory\">set theory</a>, and <a href=\"http://www.graphtheory.com/\">graph theory</a>, and <a href=\"http://cstheory.stackexchange.com/a/5816\">probability theory</a>, and <a href=\"http://cstheory.stackexchange.com/a/10929\">advanced algebra</a> and probably a hundred other things I missed. Including things that are only incidentally related to programming, like <a href=\"http://git-scm.com/\">source control</a>, <a href=\"http://www.amazon.com/gp/product/1430243147/ref=as_li_ss_tl?ie=UTF8&tag=beigee-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=1430243147\">human management/interaction</a>, hardware maintenance, <a href=\"http://www.amazon.com/The-Elements-Style-Fourth-Edition/dp/020530902X\">writing</a>, <a href=\"http://www.interhack.net/pubs/network-security/\">security</a>, <a href=\"http://steve-yegge.blogspot.ca/2008/09/programmings-dirtiest-little-secret.html\">typing</a> and the <a href=\"https://www.gnu.org/philosophy/free-sw.html\">social impacts</a> of the work we do.</p>

<p>Learning to program is not a thing you <a href=\"http://norvig.com/21-days.html\">pick up in seven days</a>, and you could do a lot worse than to start by reading <a href=\"http://norvig.com/21-days.html\">that article</a>. Just make sure to also disabuse yourself of the idea that you do it by picking one language and sticking to that.</p>

<h2>TL DR</h2>

<p>So, in case you skipped directly to this line, the short answer is <b>\"all of them, and that's just for starters\"</b>. Good luck; I'll see you on the other side.</p>

<hr />
<h5>Footnotes</h5>
<p>1 - <a href=\"#note-Thu-Mar-14-155452EDT-2013\" name=\"foot-Thu-Mar-14-155452EDT-2013\">[back]</a> -\"Blub has an inactive community\" or \"Blub's community is principally composed of assholes\" <i>are</i> valid arguments against <i>using</i> a language. But keep in mind that you can still learn a lot by understanding a language that assholes use, or that very few people decided to use. Also, keep in mind that the metrics related to these arguments are relative and necessarily personal; if you're close friends with five or six people who use <a href=\"http://iolanguage.org/\">Io</a>, then it really doesn't matter much what the rest of the world is doing.</p>

<p>2 - <a href=\"#note-Thu-Mar-14-155656EDT-2013\" name=\"foot-Thu-Mar-14-155656EDT-2013\">[back]</a> - If the price-tag scares you, I should mention that there's a way to get a softcover edition for something like $40, but it doesn't include the same exercise sections or cover and is printed on pretty shitty stock. That's what I ended up doing, and mine's still in one piece even after a few years, but I can't find the link to that deal anymore even though one of the customer images is that edition of the book..</p>

<p>3 - <a href=\"#note-Thu-Mar-14-155701EDT-2013\" name=\"foot-Thu-Mar-14-155701EDT-2013\">[back]</a> - I'm putting the Amazon link there, but the first link in a google search about \"Purely Functional Data Structures\" seems to be a legitimate, free PDF copy of the same from <a href=\"http://search.library.cmu.edu/\">CMU</a>.</p>
"))
((5202 3723 606510000) :INSERT (123 :POSTED 3572222400))
((5202 3723 606512000) :INSERT (123 :TAG :GENERAL-PROGRAMMING-THOUGHTS))
((5202 3723 606514000) :INSERT (123 :TAG :IDEA-PEELING))
((5202 3723 606845000) :INSERT (124 :TITLE "Actors"))
((5202 3723 606853000) :INSERT (124 :FILE "actors.html"))
((5202 3723 606855000) :INSERT (124 :EDITED 3610311373))
((5202 3723 606857000) :INSERT
 (124 :BODY "<p>Two things this time. First...</p>

<h3>...An Admission</h3>

<img src=\"/static/img/vrms-output.png\" class=\"middle\" alt=\"The output of vrms (a Richard Stallman emulator that keeps a vigilant eye on your freedom)\" />

<p>I'm weak.</p>

<p>It turns out there are exactly two things I'm willing to run non-free software for, and one is wifi access<a href=\"#foot-Fri-Mar-22-212851EDT-2013\" name=\"note-Fri-Mar-22-212851EDT-2013\">[1]</a>. Another other option is of course, buying an <a href=\"https://www.thinkpenguin.com/gnu-linux/penguin-wireless-n-usb-req-antennas\">Atheros wifi card</a>, which I intend to do eventually but don't have the spare $100 right at this very moment. Lets move on and say no more about this.</p>

<h3>Actors</h3>

<p>I've been on vacation for a little while now, which finally gave me the chance to get back into some Common Lisp<a href=\"#foot-Fri-Mar-22-212856EDT-2013\" name=\"note-Fri-Mar-22-212856EDT-2013\">[2]</a>. You know, since I've mostly been hacking Python at work for the past five months or so. Specifically, I got to do some long-overdue thinking on <a href=\"https://github.com/Inaimathi/Common-Lisp-Actors\">that Actors library I forked</a> forever and a fucking day ago.</p>

<p>The big problem with actors as they're implemented here is that, while they don't care where their messages come from, they very much <i>do</i> care where their messages go. To be fair, this seems to be a very common implementation, and not limited to cl-actors, so I don't think it's worth holding against the author. What it does is force you to choose between three fairly shitty alternatives for composeability:</p>

<h2>1, Message Targets</h2>

<p>Define a communication convention whereby a piece of the message is going to specify the actor that it needs to be passed to next.</p>

<pre>(<span style=\"color: #a020f0;\">define-actor</span> greeter () (target name)
  (send target (format nil <span style=\"color: #8b2252;\">\"Hello, ~a!\"</span> name))
  next)

(<span style=\"color: #a020f0;\">define-actor</span> printer (stream) (msg)
  (format stream <span style=\"color: #8b2252;\">\"~a~%\"</span> msg)
  next)

(<span style=\"color: #a020f0;\">defparameter</span> <span style=\"color: #a0522d;\">*greeter*</span> (greeter))
(<span style=\"color: #a020f0;\">defparameter</span> <span style=\"color: #a0522d;\">*printer*</span> (printer <span style=\"color: #7a378b;\">:stream</span> *standard-output*))

(send *greeter* *printer* <span style=\"color: #8b2252;\">\"whoeverthefuck\"</span>)</pre>

<p>The problem here is that you're setting up a situation where each sender is going to have to know the entire call chain its message will be going through. That's not good because changing any node suddenly becomes an exercise in frustration if you've got a non-trivial actor network set up, and it only gets worse if you want to do anything other than straight chaining actors. For instance, think about how you would implement an imbalanced tree here; a situation where you have actors <code>A</code> through <code>F</code>, and what needs to happen is</p>

<pre>    actor-A
    &#9500;&#9472;&#9472;&gt; actor-B
    &#9500;&#9472;&#9472;&gt; actor-C
    &#9492;&#9472;&#9472;&gt; actor-D
         &#9492;&#9472;&#9472;&gt; actor-E &#9472;&#9472;&gt; actor-F</pre>

<h2>2. Globals</h2>

<p>The Erlang equivalent is \"<a href=\"http://www.erlang.org/doc/reference_manual/processes.html#id82815\">registered processes</a>\"; you define a global name which will refer to your actor instance, and any other actors that need to interact with it use that global name.</p>

<pre>(<span style=\"color: #a020f0;\">define-actor</span> greeter () (name)
  (send *printer* (format nil <span style=\"color: #8b2252;\">\"Hello, ~a!\"</span> name))
  next)

(<span style=\"color: #a020f0;\">define-actor</span> printer (stream) (msg)
  (format stream <span style=\"color: #8b2252;\">\"~a~%\"</span> msg)
  next)

(<span style=\"color: #a020f0;\">defparameter</span> <span style=\"color: #a0522d;\">*greeter*</span> (greeter))
(<span style=\"color: #a020f0;\">defparameter</span> <span style=\"color: #a0522d;\">*printer*</span> (printer <span style=\"color: #7a378b;\">:stream</span> *standard-output*))

(send *greeter* <span style=\"color: #8b2252;\">\"whoeverthefuck\"</span>)</pre>

<p>The problem has moved from the last line to the second line. This approach requires you to re-write pieces of every non-leaf actor if you want to use them in a new context. Ideally, an actor wouldn't have care where its messages go, or at least it wouldn't have to care about it until after it's instantiated. That would let you increase the isolation of your components, thereby giving you more and easier opportunities for code reuse.</p>

<h2>3. Local State</h2>

<p>Instead of manually specifying targets, make the actor track its targets with a piece of local state. You'd then have to pass targets in along with the other initialization parameters.</p>

<pre>(<span style=\"color: #a020f0;\">define-actor</span> greeter (targets) (name)
  (<span style=\"color: #a020f0;\">let</span> ((msg (format nil <span style=\"color: #8b2252;\">\"Hello, ~a!\"</span> name)))
    (mapcar (<span style=\"color: #a020f0;\">lambda</span> (trg) <span style=\"color: #b22222;\">;; </span><span style=\"color: #b22222;\">blast you, canonical truth value T!
</span>              (send trg msg))
            targets))
  next)

(<span style=\"color: #a020f0;\">define-actor</span> printer (stream) (msg)
  (format stream <span style=\"color: #8b2252;\">\"~a~%\"</span> msg)
  next)

(<span style=\"color: #a020f0;\">defparameter</span> <span style=\"color: #a0522d;\">*printer*</span> (printer <span style=\"color: #7a378b;\">:stream</span> *standard-output*))
(<span style=\"color: #a020f0;\">defparameter</span> <span style=\"color: #a0522d;\">*greeter*</span> (greeter <span style=\"color: #7a378b;\">:targets</span> (list *printer*)))

(send *greeter* <span style=\"color: #8b2252;\">\"whoeverthefuck\"</span>)</pre>

<p>The two problems with this are complexity and definition dependencies. Complexity because, as you can see from that new <code>greeter</code> definition, <i>most</i> of the body code is now dealing with where the message is meant to go next, rather than with the business logic of what this actor is supposed to be doing. I'm tempted to call this the Yak Shaving Anti-pattern, except that someone else has certainly identified and named it already.</p>

<p>The other problem is apparent in the change among those two <code>defparameter</code> lines. Note that <code>*greeter*</code> is now defined second, and that this isn't an accident. If you did it the other way around, you'd discover that <code>*printer*</code> must be defined in order for it to be specified as a message target.It may be a minor annoyance, but I prefer to avoid those where I can.</p>

<h3>The Solution?</h3>

<p>As far as I can see, oh and thanks to <a href=\"https://github.com/guitarvydas\">Paul Tarvydas</a> for pointing me in this direction, it's to separate the actors from their call chains. That is, define an actor as essentially a queue, a thread and a function that returns some value given some message, then introduce an external mechanism by which to get that return value to the next node in the network. What we really want to be able to do is something like</p>

<pre>(<span style=\"color: #a020f0;\">define-actor</span> greeter () (name)
  (format nil <span style=\"color: #8b2252;\">\"Hello, ~a!\"</span> name))

(<span style=\"color: #a020f0;\">define-actor</span> printer (stream) (msg)
  (format stream <span style=\"color: #8b2252;\">\"~a~%\"</span> msg))

(<span style=\"color: #a020f0;\">defparameter</span> <span style=\"color: #a0522d;\">*greeter*</span> (greeter))
(<span style=\"color: #a020f0;\">defparameter</span> <span style=\"color: #a0522d;\">*printer*</span> (printer <span style=\"color: #7a378b;\">:stream</span> *standard-output*))

(link *greeter* *printer*)

(send *greeter* <span style=\"color: #8b2252;\">\"whoeverthefuck\"</span>)</pre>

<p>which concentrates the links entirely into that call to <code>link</code>, and leaves the actors themselves cheerfully oblivious to what they're interacting with at the time. It also separates out the general patterns of communication<a href=\"#foot-Fri-Mar-22-212912EDT-2013\" name=\"note-Fri-Mar-22-212912EDT-2013\">[3]</a> from the business logic of an actor body, so your <code>define-actor</code>s are <i>only</i> dealing with the stuff they want to do, rather than the minutia of who needs to do the next bit. So, here's how we do it. Firstly, we'll want to change the definition of an <code>actor</code> to take into account the fact that others may be watching.</p>

<pre>(<span style=\"color: #a020f0;\">defclass</span> <span style=\"color: #228b22;\">actor</span> ()
  ((name <span style=\"color: #7a378b;\">:initarg</span> <span style=\"color: #7a378b;\">:name</span>
         <span style=\"color: #7a378b;\">:initform</span> (<span style=\"color: #ff0000; font-weight: bold;\">error</span> <span style=\"color: #8b2252;\">\":name must be specified\"</span>)
         <span style=\"color: #7a378b;\">:accessor</span> name)
   (behavior <span style=\"color: #7a378b;\">:initarg</span> <span style=\"color: #7a378b;\">:behavior</span>
             <span style=\"color: #7a378b;\">:initform</span> (<span style=\"color: #ff0000; font-weight: bold;\">error</span> <span style=\"color: #8b2252;\">\":behavior must be specified\"</span>)
             <span style=\"color: #7a378b;\">:accessor</span> behavior
             <span style=\"color: #7a378b;\">:documentation</span> <span style=\"color: #8b2252;\">\"Behavior\"</span>)
   (watched-by <span style=\"color: #7a378b;\">:initarg</span> <span style=\"color: #7a378b;\">:watched-by</span> <span style=\"color: #7a378b;\">:initform</span> nil 
             <span style=\"color: #7a378b;\">:accessor</span> watched-by)
   (in <span style=\"color: #7a378b;\">:initform</span> (make-queue) <span style=\"color: #7a378b;\">:accessor</span> in
       <span style=\"color: #7a378b;\">:documentation</span> <span style=\"color: #8b2252;\">\"Queue of incoming messages\"</span>)
   thread))</pre>

<p><code>watched-by</code> is the addition there; it'll hold a list of all <code>actor</code>s and/or <code>queue</code>s that might need to be notified about this actors' output. Next, we'll want to simplify <code>define-actor</code> slightly, because we want to collect the return value from its behavior rather than assuming it sends the message on itself</p>

<pre>(<span style=\"color: #a020f0;\">defmacro</span> <span style=\"color: #0000ff;\">define-actor</span> (name state vars <span style=\"color: #228b22;\">&amp;body</span> body)
  <span style=\"color: #8b2252;\">\"Macro for creating actors with the behavior specified by body\"</span>
  `(<span style=\"color: #a020f0;\">defun</span> ,name (<span style=\"color: #228b22;\">&amp;key</span> (self) ,@state)
     (<span style=\"color: #a020f0;\">declare</span> (ignorable self)) <span style=\"color: #b22222;\">;; </span><span style=\"color: #b22222;\">You might not care about referencing self, and that's ok
</span>     (setf self (make-actor (<span style=\"color: #a020f0;\">lambda</span> ,vars (<span style=\"color: #a020f0;\">progn</span> ,@body)) ,(string name)))
     self))</pre>

<p>I also took the opportunity to do away with the need for an explicit <code>next</code>. Near as I can tell, this is just going to prevent me from changing out behaviors at runtime and creating one-cycle actors. My intuition about the first is that it'd be easier to define a new actor and insert it into the network than it would be to reliably and correctly rip out the behavior function of one we already have in place, so I don't mind losing that, though I reserve the right to change my mind if experience teaches me the contrary. The second one is a situation where I'd really want to use a <code>thread</code> with an embedded <code>lambda</code> anyway, so not being able to use an actor there doesn't sound particularly disastrous.</p>

<p>Finally, we'll need to change what each cycle through the message queue does.</p>

<pre>(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">initialize-instance</span> <span style=\"color: #7a378b;\">:after</span> ((self actor) <span style=\"color: #228b22;\">&amp;key</span>)
  <span style=\"color: #8b2252;\">\"Uses the main function name to create a thread\"</span>
  (<span style=\"color: #a020f0;\">with-slots</span> (behavior in name thread) self
    (setf thread 
          (bt:make-thread 
           (<span style=\"color: #a020f0;\">lambda</span> () 
             (<span style=\"color: #a020f0;\">loop</span> 
                for res = (apply behavior (dequeue in))
                when (watched-by self)
                  <span style=\"color: #b22222;\">;; </span><span style=\"color: #b22222;\">TODO -- Add customization to protocol, rather than always send-all
</span>                do (<span style=\"color: #a020f0;\">loop</span> for target in (watched-by self)
                      do (enqueue (list res) target))))
           <span style=\"color: #7a378b;\">:name</span> name))))</pre>

<p>so, instead of just <code>apply</code>ing <code>behavior</code> to each message, we get the result and send it on to any watchers. The <code>TODO</code> is there because, as written, an <code>actor</code> <i>always</i> notifies <i>all</i> watchers, and we might want to do something like round-robin scheduling instead. The main reason I'm thinking along those lines is that I'm planning to use this library in the construction of a non-blocking web-server, where I'd want a single listener but multiple, parallel parsers/response-generators picking up some percentage of total load. Doing something other than \"send one to everyone\" is an integral part of that strategy. We'll see how it goes.</p>

<p>I should note that you don't have to decide to use only one of <code>send</code>/<code>link</code> here; even with the connection system working<a href=\"#foot-Fri-Mar-22-212925EDT-2013\" name=\"note-Fri-Mar-22-212925EDT-2013\">[4]</a> there are use cases where you really do want a manual <code>send</code> in an actor body. To be fair, most of those use cases seem to be places where you wouldn't really want to use actors in the first place, but I've reserved judgment and left in both options in the interests of flexibility.</p>

<h3>Still ToDo</h3>

<p>I've already mentioned separating out the send pattern for an actor so that you can have more flexibility in deciding targets. Although, to be fair, I'm not <i>entirely</i> sure whether that's the best approach; it might be possible to implement different behaviors by just specifying different network shapes rather than by complicating actors further. I'll think on it, and probably solicit some advice from people smarter than I am.</p>

<p>Some additional network-oriented constructs would be nice. We've already got <code>link</code> and <code>chain</code>, but it seems like <code>splice</code>, <code>prune</code> and <code>nip</code> might be useful too. <code>splice</code> would take two linked actors and a third actor, and insert the third one between the first two. <code>prune</code> would take an actor, kill it and remove it from any <code>watched-by</code> lists it might be on. <code>nip</code> would basically do the opposite of <code>splice</code>; take three linked actors, remove the middle one and connect the first to the last.</p>

<p>While I'm at it, it would be nice if all these functions, real and notional, played by Actor Model rules rather than doing hard edits. For instance, instead of <code>link</code> doing <code>(push target (watched-by self))</code>, it would send a message to <code>self</code> which would get processed when it came up in the queue. This has a bit more background complexity than the straight-up side-effect, but it prevents the actor from dropping any messages that might be getting processed while the change is taking place.</p>

<p>While I'm at <i>that</i>, it would be nice if actors automatically responded to certain messages without being specified explicitly in the <code>define-actor</code> body. Off the top of my head, <code><span style=\"color: #7a378b;\">:link</span></code> (for creating connections), <code><span style=\"color: #7a378b;\">:drop</span></code> (for breaking them), <code><span style=\"color: #7a378b;\">:set</span></code> (for changing actor state) and <code><span style=\"color: #7a378b;\">:ping</span></code> (to allow for supervisor-style constructs later).</p>

<p>The reason I'm just listing these rather than building them <i>right now</i> is that some of them would require a fundamental change to the way the system works. For one thing, accepting default messages implies that we're taking a message which is only one object that we then <a href=\"https://github.com/arielnetworks/cl-pattern\">pattern</a>-<a href=\"https://github.com/m2ym/optima\">match</a> on. For another, things like <code>prune</code> imply either a centralized storage method for all actors, or imply two-way links between nodes, neither of which I'm sure is a good idea. It might be better to assume that connections are only going to be created at startup.</p>

<p>Anyhow, in the meanwhile, what I've got here is a trivially composeable actor system, which lets you re-use any of them at will in any context that applies. That by itself makes the effort worth it as far as I'm concerned. I'll see what I can do for the next pass.</p>


<hr />
<h5>Footnotes</h5>
<p>1 - <a href=\"#note-Fri-Mar-22-212851EDT-2013\" name=\"foot-Fri-Mar-22-212851EDT-2013\">[back]</a> - The other is vintage gaming. Which doesn't pollute my main machine, but I do have a desktop set up at home which has a virtual Win XP machine where I installed a bunch of games from the golden age of fantasy gaming; copies of <a href=\"http://www.planetbaldursgate.com/iwd2/\">Icewind Dale 2</a>, <a href=\"http://www.amazon.com/Planescape-Torment-Pc/dp/B00002EPZ2\">Planescape Torment</a>, <a href=\"http://web.archive.org/web/20000815213945/http://www.interplay.com/bgate2/\">Baldur's Gate 2</a>, and <a href=\"http://en.wikipedia.org/wiki/Dungeon_Keeper\">Dungeon Keeper</a>.</p>

<p>2 - <a href=\"#note-Fri-Mar-22-212856EDT-2013\" name=\"foot-Fri-Mar-22-212856EDT-2013\">[back]</a> - And a bunch of sketching, but this isn't the place for that. If you're interested, go to <a href=\"http://inaimathi.deviantart.com/\">my deviantart</a> instead, I'll be uploading a new batch shortly.</p>

<p>3 - <a href=\"#note-Fri-Mar-22-212912EDT-2013\" name=\"foot-Fri-Mar-22-212912EDT-2013\">[back]</a> - Though, as you'll see later, those could probably be separated further still. I'll be working on it for the next little while.</p>
<p>4 - <a href=\"#note-Fri-Mar-22-212925EDT-2013\" name=\"foot-Fri-Mar-22-212925EDT-2013\">[back]</a> - And in most cases, producing much more elegant and flexible code, I might add.</p>
"))
((5202 3723 606998000) :INSERT (124 :POSTED 3572913600))
((5202 3723 606999000) :INSERT (124 :TAG :COMMON-LISP))
((5202 3723 607001000) :INSERT (124 :TAG :IDEA-PEELING))
((5202 3723 607190000) :INSERT (125 :TITLE "Actors Again"))
((5202 3723 607195000) :INSERT (125 :FILE "actors-again.html"))
((5202 3723 607197000) :INSERT (125 :EDITED 3610300817))
((5202 3723 607199000) :INSERT
 (125 :BODY
  "<p>That <a href=\"https://github.com/Inaimathi/Common-Lisp-Actors\"><code>cl-actors</code> fork</a> has gotten a few hours thrown at it. This time around, I integrated the <a href=\"https://github.com/m2ym/optima\">Optima pattern-matching library</a>, and made certain things a little easier. I'm nowhere near done yet though; in addition to the rest of the ToDos from <a href=\"/article?name=actors.html\">last time</a>, and seeing what I can do with <a href=\"https://github.com/deliciousrobots/green-threads\">green threads</a>, I need to settle things that the Erlang guys have clearly been thinking about for a few years.</p>

<h2>First</h2>

<p>How do you deal with error reporting/handling here? And I specifically mean</p>

<pre>(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">initialize-instance</span> <span style=\"color: #7a378b;\">:after</span> ((self actor) <span style=\"color: #228b22;\">&amp;key</span>)
  <span style=\"color: #8b2252;\">\"Uses the main function name to create a thread\"</span>
  (<span style=\"color: #a020f0;\">with-slots</span> (behavior in name thread) self
    (setf thread 
          (bt:make-thread 
           (<span style=\"color: #a020f0;\">lambda</span> () 
             (<span style=\"color: #a020f0;\">loop</span>
                (<span style=\"color: #a020f0;\">handler-case</span>
                    (<span style=\"color: #a020f0;\">let</span> ((res (funcall behavior (dequeue in))))
                      (<span style=\"color: #a020f0;\">loop</span> for target in (targets self)
                         do (enqueue res target)))
                  (match-error (e)
                    (format t <span style=\"color: #8b2252;\">\"There isn't a match clause that fits. Do something more intelligent with unmatched messages.~%~a~%~%\"</span> e))
                  (<span style=\"color: #ff0000; font-weight: bold;\">error</span> (e)
                    (format t <span style=\"color: #8b2252;\">\"BLEARGH! I AM SLAIN! (this should kill the actor, and possibly call some fall-back mechanism)~%~a~%~%\"</span> e)))))
           <span style=\"color: #7a378b;\">:name</span> name))))
</pre>
<p>here. Spitting unmatched messages out at <code>*standard-output*</code> sounds <i>kind of</i> ok, until you start thinking about how you'd deal with any kind of non-trivial system, or a situation where you want to defer those messages to someone else who might know how to deal with them. The standard <a href=\"http://www.erlang.org/doc/man/supervisor.html\">Supervisor infrastructure</a> that Erlang implements looks like it would be a good solution, and will probably going to be easier to put together in Lisp. That's more or less the only sane option for things like unmatched messages, because you don't ever want those to derail the whole system.</p>

<p>The second <code>case</code> there is more ambiguous though.</p>

<pre>  (<span style=\"color: #ff0000; font-weight: bold;\">error</span> (e)
    (format t <span style=\"color: #8b2252;\">\"BLEARGH! I AM SLAIN! (this should kill the actor, and possibly call some fall-back mechanism)~%~a~%~%\"</span> e))</pre>

<p>That handles all other <code>error</code>s. Run-time snafus like passing the wrong number of arguments to <code>format</code>. For these, you do really, truly want to take the actor out of commission until it gets fixed; there's no point whatsoever in trying to process further messages until that time. So another reasonable approach here would be to use Common Lisp's built-in condition system. That is, re-raise the <code>error</code> and give the user a restart option to define a new behavior in-line.</p>

<p>I don't know, there might be pitfalls there that I'm not seeing, which is why I need to think pretty hard about it, and then try it out.</p>

<h2>Second</h2>

<p>I want to make sure that networks resulting from this system are flexible enough to withstand change. That's a tougher one, and the built in <a href=\"https://github.com/naveensundarg/Common-Lisp-Actors/blob/master/actors.lisp#L100-L104\">behav</a> function from <a href=\"https://github.com/naveensundarg/Common-Lisp-Actors\">the original <code>cl-actors</code></a> doesn't quite satisfy. The two things we want to preserve from an actor when we're modifying it, if we want robust networks, are its state and its inbound message queue. The second is hopefully obvious, but the first might not be given how that <code>behav</code> function I just linked is implemented. It leaves the task of assigning new state up to the user, who may not know what the latest state of the actor is. Worse than that, there may be no way for them to find out, because that state is locked away in a closure with no hooks other than the ones manually defined by the behavior they're trying to replace. I'm not entirely sure what the solution there is, but it probably won't be straightforward.</p>

<p>What I <i>apparently</i> want is a macro that takes a series of <code>ematch</code> clauses, and returns a macro that accepts a list of state variables/values, which returns a function that takes a message and returns whatever we want to pass on. I'd call that first macro to define the skeleton of my new behavior, then pass the result through to an actor which would provide its own internal state to fill in the gaps, then take the result of that operation and assign it to a new behavior. The end result would be a function which I can define on the outside somewhere, but which will take into consideration an actors most current internal state when finally applied. The queue, of course, goes nowhere, and assuming the new behavior function doesn't error out anywhere, the actor should continue <code>dequeue</code>ing on its merry way</p>

<h2>Finally</h2>

<p>That \"assuming\" isn't to be glossed over. Replacing an actor or behavior with another is straightforward in toy examples, but in an actual, running system, you want good fail-over capabilities. Specifically, if the new guy chokes on his first couple of messages, you want the option of slotting in the old process before too much time has elapsed. You definitely <i>don't</i> want to grind the entire downstream system to a halt while the programmers figure out what the issue is with the new code. Another thing that might be useful is a default <code><span style=\"color: #7a378b;\">:test</span></code> message that you can throw at an actor which should tell the sender whether it can respond to the given message. In a situation where you're replacing an existing actor with a new one, or just replacing the behavior of an existing actor, you want to know that the messages sent out by the new thing are going to be intelligible to their targets before committing to the change-over. How the reporting for this is going to work, I haven't the first clue, but I've got more than enough implementation to do already, so I'll probably leave that one for the next article.</p>
"))
((5202 3723 607252000) :INSERT (125 :POSTED 3573518400))
((5202 3723 607254000) :INSERT (125 :TAG :COMMON-LISP))
((5202 3723 607255000) :INSERT (125 :TAG :IDEA-PEELING))
((5202 3723 607620000) :INSERT
 (126 :TITLE "Simple web chat using Haskell's Wai/Warp"))
((5202 3723 607626000) :INSERT (126 :FILE "wai-chat.html"))
((5202 3723 607642000) :INSERT (126 :EDITED 3610022331))
((5202 3723 607644000) :INSERT
 (126 :BODY
  "<p>Here's a quick and dirty chat application written in Wai<a href=\"#foot-Tue-Apr-16-133808EDT-2013\" name=\"note-Tue-Apr-16-133808EDT-2013\">[1]</a>.</p>

<pre><span style=\"color: #b22222;\">{-</span><span style=\"color: #b22222;\"># LANGUAGE OverloadedStrings #-}</span>
<span style=\"color: #a020f0;\">module</span> <span style=\"color: #228b22;\">Main</span> <span style=\"color: #a020f0;\">where</span>

<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Control.Concurrent.Chan</span>

<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Control.Monad.Trans</span> (liftIO)

<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Network.Wai</span>
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Network.Wai.EventSource</span>
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Network.Wai.Handler.Warp</span> (run)
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Network.Wai.Middleware.Gzip</span> (gzip, def)
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Network.Wai.Parse</span> (parseRequestBody, lbsBackEnd)
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Network.HTTP.Types</span> (status200, ok200)

<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Blaze.ByteString.Builder.Char.Utf8</span> (fromString)
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Data.ByteString.Char8</span> (<span style=\"color: #228b22;\">ByteString</span>, unpack)

<span style=\"color: #0000ff;\">app</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">Chan</span> <span style=\"color: #228b22;\">ServerEvent</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Application</span>
<span style=\"color: #0000ff;\">app</span> chan req <span style=\"color: #a0522d;\">=</span> <span style=\"color: #a020f0;\">do</span>
  (params, <span style=\"color: #a020f0;\">_</span>) <span style=\"color: #a0522d;\">&lt;-</span> parseRequestBody lbsBackEnd req
  <span style=\"color: #a020f0;\">case</span> pathInfo req <span style=\"color: #a020f0;\">of</span>
    <span style=\"color: #228b22;\">[]</span> <span style=\"color: #a0522d;\">-&gt;</span> return <span style=\"color: #a0522d;\">$</span> <span style=\"color: #228b22;\">ResponseFile</span> status200 [(<span style=\"color: #8b2252;\">\"Content-Type\"</span>, <span style=\"color: #8b2252;\">\"text/html\"</span>)] <span style=\"color: #8b2252;\">\"static/index.html\"</span> <span style=\"color: #228b22;\">Nothing</span>
    [<span style=\"color: #8b2252;\">\"post\"</span>] <span style=\"color: #a0522d;\">-&gt;</span> liftIO <span style=\"color: #a0522d;\">$</span> postMessage chan <span style=\"color: #a0522d;\">$</span> lookPost <span style=\"color: #8b2252;\">\"message\"</span> params
    [<span style=\"color: #8b2252;\">\"source\"</span>] <span style=\"color: #a0522d;\">-&gt;</span> eventSourceAppChan chan req
    path <span style=\"color: #a0522d;\">-&gt;</span> error <span style=\"color: #a0522d;\">$</span> <span style=\"color: #8b2252;\">\"unexpected pathInfo \"</span> <span style=\"color: #a0522d;\">++</span> show (queryString req)

<span style=\"color: #0000ff;\">lookPost</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">ByteString</span> <span style=\"color: #a0522d;\">-&gt;</span> [(<span style=\"color: #228b22;\">ByteString</span>, <span style=\"color: #228b22;\">ByteString</span>)] <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">String</span>
<span style=\"color: #0000ff;\">lookPost</span> paramName params <span style=\"color: #a0522d;\">=</span> <span style=\"color: #a020f0;\">case</span> lookup paramName params <span style=\"color: #a020f0;\">of</span>
  <span style=\"color: #228b22;\">Just</span> val <span style=\"color: #a0522d;\">-&gt;</span> unpack val
  <span style=\"color: #a020f0;\">_</span> <span style=\"color: #a0522d;\">-&gt;</span>  <span style=\"color: #8b2252;\">\"\"</span>

<span style=\"color: #0000ff;\">postMessage</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">Chan</span> <span style=\"color: #228b22;\">ServerEvent</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">String</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">IO</span> <span style=\"color: #228b22;\">Response</span>
<span style=\"color: #0000ff;\">postMessage</span> chan msg <span style=\"color: #a0522d;\">=</span> <span style=\"color: #a020f0;\">do</span>
  writeChan chan <span style=\"color: #a0522d;\">$</span> <span style=\"color: #228b22;\">ServerEvent</span> (<span style=\"color: #228b22;\">Just</span> <span style=\"color: #a0522d;\">$</span> fromString <span style=\"color: #8b2252;\">\"message\"</span>) <span style=\"color: #228b22;\">Nothing</span> <span style=\"color: #a0522d;\">$</span> [fromString msg]
  return <span style=\"color: #a0522d;\">$</span> responseLBS ok200 <span style=\"color: #228b22;\">[]</span> <span style=\"color: #8b2252;\">\"Posted\"</span>

<span style=\"color: #0000ff;\">main</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">IO</span> <span style=\"color: #228b22;\">()</span>
<span style=\"color: #0000ff;\">main</span> <span style=\"color: #a0522d;\">=</span> <span style=\"color: #a020f0;\">do</span>  
  chan <span style=\"color: #a0522d;\">&lt;-</span> newChan
  run 8000 <span style=\"color: #a0522d;\">$</span> gzip def <span style=\"color: #a0522d;\">$</span> app chan</pre>

<p>That's the most basic example I could find/cobble together of using <a href=\"https://github.com/yesodweb/wai/tree/master/wai-eventsource\">SSEs in Wai</a>. That's the library called <code>Network.Wai.EventSource</code> up there, and you can see the channel represented in the expressions involving <code>newChan</code>, <code>eventSourceAppChan</code> and <code>writeChan</code>. Basically, we set up a <code>Chan</code><a href=\"#foot-Tue-Apr-16-133913EDT-2013\" name=\"note-Tue-Apr-16-133913EDT-2013\">[2]</a> at server startup, we hand out an endpoint whenever someone requests <code>/source</code>, and we write to all endpoints whenever someone requests <code>/post</code>.</p>

<p>The file <code>index.html</code> is exactly what you think it is; about 10 lines each of HTML and JavaScript that set up the front-end <code>EventSource</code> hooks and make sure the chat list gets updated with each new message. You could write it yourself without very much trouble.</p>

<p>This isn't particularly interesting. Firstly because, as you can see, it's <i>ridiculously</i> simple, and secondly because it doesn't scale. I mean it scales with users, sure. According to the <a href=\"http://www.yesodweb.com/blog/2011/03/preliminary-warp-cross-language-benchmarks\">Warp benchmarks</a>, we can expect this to support somewhere between 20k and 50k people chatting depending on their loquaciousness, but since they'll all be chatting anonymously in the same room, the experience will stop being useful well before that. The next step confounded me for a little while because I had the assumption that using state in Haskell meant using <a href=\"http://www.haskell.org/haskellwiki/State_Monad\">the <code>State</code> monad</a><a href=\"#foot-Tue-Apr-16-134338EDT-2013\" name=\"note-Tue-Apr-16-134338EDT-2013\">[3]</a>. It turns out that's probably not what you'd want here.</p>

<p>What we're after is a system where you can start up arbitrary new rooms, and post to a specific one. In other words, something like</p>

<pre><span style=\"color: #b22222;\">{-</span><span style=\"color: #b22222;\"># LANGUAGE OverloadedStrings #-}</span>
<span style=\"color: #a020f0;\">module</span> <span style=\"color: #228b22;\">Main</span> <span style=\"color: #a020f0;\">where</span>

<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Control.Concurrent.Chan</span>
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Control.Concurrent</span> (forkIO, threadDelay)

<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Control.Monad.Trans</span> (liftIO)
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Control.Monad.Trans.Resource</span> (<span style=\"color: #228b22;\">ResourceT</span>)

<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Network.Wai</span>
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Network.Wai.EventSource</span>
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Network.Wai.Handler.Warp</span> (run)
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Network.Wai.Middleware.Gzip</span> (gzip, def)
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Network.Wai.Parse</span> (parseRequestBody, lbsBackEnd)

<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Network.HTTP.Types</span> (status200, ok200)
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Blaze.ByteString.Builder.Char.Utf8</span> (fromString)
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #a020f0;\">qualified</span> <span style=\"color: #228b22;\">Data.ByteString.Char8</span> <span style=\"color: #a020f0;\">as</span> <span style=\"color: #228b22;\">C</span>

<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Data.IORef</span>
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Data.Text</span> (unpack, pack)

<span style=\"color: #0000ff;\">app</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">IORef</span> [(<span style=\"color: #228b22;\">String</span>, <span style=\"color: #228b22;\">Chan</span> <span style=\"color: #228b22;\">ServerEvent</span>)] <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Application</span>
<span style=\"color: #0000ff;\">app</span> channels req <span style=\"color: #a0522d;\">=</span> <span style=\"color: #a020f0;\">do</span>
  (params, <span style=\"color: #a020f0;\">_</span>) <span style=\"color: #a0522d;\">&lt;-</span> parseRequestBody lbsBackEnd req
  <span style=\"color: #a020f0;\">case</span> pathInfo req <span style=\"color: #a020f0;\">of</span>
    <span style=\"color: #228b22;\">[]</span> <span style=\"color: #a0522d;\">-&gt;</span> serveFile <span style=\"color: #8b2252;\">\"text/html\"</span> <span style=\"color: #8b2252;\">\"static/index.html\"</span>
    [<span style=\"color: #8b2252;\">\"jquery.js\"</span>] <span style=\"color: #a0522d;\">-&gt;</span> serveFile <span style=\"color: #8b2252;\">\"text/javascript\"</span> <span style=\"color: #8b2252;\">\"static/jquery.min.js\"</span>
    [<span style=\"color: #8b2252;\">\"chat.js\"</span>] <span style=\"color: #a0522d;\">-&gt;</span> serveFile <span style=\"color: #8b2252;\">\"text/javascript\"</span> <span style=\"color: #8b2252;\">\"static/chat.js\"</span>
    [channelName, action] <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #a020f0;\">do</span>
      chan <span style=\"color: #a0522d;\">&lt;-</span> liftIO <span style=\"color: #a0522d;\">$</span> getOrCreateChannel channels <span style=\"color: #a0522d;\">$</span> unpack channelName
      <span style=\"color: #a020f0;\">case</span> action <span style=\"color: #a020f0;\">of</span>
        <span style=\"color: #8b2252;\">\"post\"</span> <span style=\"color: #a0522d;\">-&gt;</span> 
          liftIO <span style=\"color: #a0522d;\">$</span> postMessage chan <span style=\"color: #a0522d;\">$</span> lookPost <span style=\"color: #8b2252;\">\"message\"</span> params
        <span style=\"color: #8b2252;\">\"source\"</span> <span style=\"color: #a0522d;\">-&gt;</span> 
          eventSourceAppChan chan req
        <span style=\"color: #a020f0;\">_</span> <span style=\"color: #a0522d;\">-&gt;</span> serveFile <span style=\"color: #8b2252;\">\"text/html\"</span> <span style=\"color: #8b2252;\">\"static/index.html\"</span>
    <span style=\"color: #a020f0;\">_</span> <span style=\"color: #a0522d;\">-&gt;</span> serveFile <span style=\"color: #8b2252;\">\"text/html\"</span> <span style=\"color: #8b2252;\">\"static/index.html\"</span>

<span style=\"color: #0000ff;\">serveFile</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">C.ByteString</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">FilePath</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">ResourceT</span> <span style=\"color: #228b22;\">IO</span> <span style=\"color: #228b22;\">Response</span>
<span style=\"color: #0000ff;\">serveFile</span> mime filePath <span style=\"color: #a0522d;\">=</span> return <span style=\"color: #a0522d;\">$</span> <span style=\"color: #228b22;\">ResponseFile</span> status200 [(<span style=\"color: #8b2252;\">\"Content-Type\"</span>, mime)] filePath <span style=\"color: #228b22;\">Nothing</span>

<span style=\"color: #0000ff;\">lookPost</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">C.ByteString</span> <span style=\"color: #a0522d;\">-&gt;</span> [(<span style=\"color: #228b22;\">C.ByteString</span>, <span style=\"color: #228b22;\">C.ByteString</span>)] <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">String</span>
<span style=\"color: #0000ff;\">lookPost</span> paramName params <span style=\"color: #a0522d;\">=</span> <span style=\"color: #a020f0;\">case</span> lookup paramName params <span style=\"color: #a020f0;\">of</span>
  <span style=\"color: #228b22;\">Just</span> val <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">C</span><span style=\"color: #a0522d;\">.</span>unpack val
  <span style=\"color: #a020f0;\">_</span> <span style=\"color: #a0522d;\">-&gt;</span>  <span style=\"color: #8b2252;\">\"\"</span>

<span style=\"color: #0000ff;\">getOrCreateChannel</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">IORef</span> [(<span style=\"color: #228b22;\">String</span>, <span style=\"color: #228b22;\">Chan</span> <span style=\"color: #228b22;\">ServerEvent</span>)] <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">String</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">IO</span> (<span style=\"color: #228b22;\">Chan</span> <span style=\"color: #228b22;\">ServerEvent</span>)
<span style=\"color: #0000ff;\">getOrCreateChannel</span> channels name <span style=\"color: #a0522d;\">=</span> <span style=\"color: #a020f0;\">do</span>
  res <span style=\"color: #a0522d;\">&lt;-</span> readIORef channels
  <span style=\"color: #a020f0;\">case</span> lookup name res <span style=\"color: #a020f0;\">of</span>
    <span style=\"color: #228b22;\">Just</span> chan <span style=\"color: #a0522d;\">-&gt;</span> 
      return chan
    <span style=\"color: #a020f0;\">_</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #a020f0;\">do</span>
      new <span style=\"color: #a0522d;\">&lt;-</span> newChan
      atomicModifyIORef channels (<span style=\"color: #a0522d;\">\\</span>cs <span style=\"color: #a0522d;\">-&gt;</span> ((name, new)<span style=\"color: #228b22;\">:</span>cs, new))
      return new

<span style=\"color: #0000ff;\">postMessage</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">Chan</span> <span style=\"color: #228b22;\">ServerEvent</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">String</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">IO</span> <span style=\"color: #228b22;\">Response</span>
<span style=\"color: #0000ff;\">postMessage</span> chan msg <span style=\"color: #a0522d;\">=</span> <span style=\"color: #a020f0;\">do</span>
  writeChan chan <span style=\"color: #a0522d;\">$</span> <span style=\"color: #228b22;\">ServerEvent</span> (<span style=\"color: #228b22;\">Just</span> <span style=\"color: #a0522d;\">$</span> fromString <span style=\"color: #8b2252;\">\"message\"</span>) <span style=\"color: #228b22;\">Nothing</span> <span style=\"color: #a0522d;\">$</span> [fromString msg]
  return <span style=\"color: #a0522d;\">$</span> responseLBS ok200 <span style=\"color: #228b22;\">[]</span> <span style=\"color: #8b2252;\">\"Posted\"</span>

<span style=\"color: #0000ff;\">main</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">IO</span> <span style=\"color: #228b22;\">()</span>
<span style=\"color: #0000ff;\">main</span> <span style=\"color: #a0522d;\">=</span> <span style=\"color: #a020f0;\">do</span>
  channels <span style=\"color: #a0522d;\">&lt;-</span> newIORef <span style=\"color: #228b22;\">[]</span>
  run 8000 <span style=\"color: #a0522d;\">$</span> gzip def <span style=\"color: #a0522d;\">$</span> app channels</pre>

<p>That's a bit chunkier, but not by very much.</p>

<p>The significant operations there all involve something called an <code>IORef</code>, which is Haskell-talk for \"a pointer\". You can think of it an <code>IO</code>-based global variable that you can store stuff in<a href=\"#foot-Tue-Apr-16-134413EDT-2013\" name=\"note-Tue-Apr-16-134413EDT-2013\">[4]</a>, in this case, a map of channel names to channel streams.</p>

<p>That <code>index.html</code> file has a bunch of front-end changes too, mostly to do with acquiring and displaying multiple SSE sources, but we're not interested in that today. In the back-end, you'll notice that we've got a new function, <code>getOrCreateChannel</code>, which takes a \"pointer\" to our channel map and a name, and either returns the result of looking up that name, or inserts and returns a corresponding entry. <p>readIORef</p> \"dereferences\" that \"pointer\" to our map, and <code>atomicModifyIORef</code> mutates it. The rest of it should be self-explanatory.</p>

<p>Because we need to do a channel lookup before calling <code>postMessage</code> or <code>eventSourceAppChan</code>, our routes get a bit more complicated. We need to call <code>getOrCreateChannel</code> on the passed in <code>channelName</code>, then pass that to the appropriate function and return the response<a href=\"#foot-Tue-Apr-16-134535EDT-2013\" name=\"note-Tue-Apr-16-134535EDT-2013\">[5]</a>.</p>

<p>Finally, instead of passing a single <code>channel</code> to our <code>app</code>, we need to pass it a \"pointer\" to our lookup table. That happens in <code>main</code> at the bottom there.</p>

<p>The result of this exercise, as long as we put the front-end together appropriately, is a multi-room, anonymous, HTML chat system. More importantly though, this is a demonstration of how to handle simple global states in Haskell without tearing all your hair out.</p>

<p>I really wish someone else had written this before I started thinking about it...</p>


<hr />
<h5>Footnotes</h5>
<p>1 - <a href=\"#note-Tue-Apr-16-133808EDT-2013\" name=\"foot-Tue-Apr-16-133808EDT-2013\">[back]</a> - No, still not <a href=\"http://www.yesodweb.com/\">Yesod</a>. Feel perfectly free to use it if that's your thing, but I'd still recommend <a href=\"http://www.happstack.com/page/view-page-slug/1/happstack\">Happstack</a> if you absolutely, positively <i>need</i> a framework..</p>

<p>2 - <a href=\"#note-Tue-Apr-16-133913EDT-2013\" name=\"foot-Tue-Apr-16-133913EDT-2013\">[back]</a> - Which I assume is reasonably efficient, since it's one of Haskell's <a href=\"http://www.haskell.org/ghc/docs/latest/html/libraries/base/Control-Concurrent-Chan.html\">basic concurrency constructs</a>.</p>

<p>3 - <a href=\"#note-Tue-Apr-16-134338EDT-2013\" name=\"foot-Tue-Apr-16-134338EDT-2013\">[back]</a> - Also, because I'm still not quite awesome enough at this that I can manipulate type expressions in my head. As a result, successful signature changes rarely happen first try, and I often find myself commenting them out then resorting to <code>:t</code> in <code>GHCi</code> and following the compilers' lead. I assume that's mechanical rather than a conceptual problem though, and talking about how I need more practice won't really help <i>you</i> out in any way.</p>

<p>4 - <a href=\"#note-Tue-Apr-16-134413EDT-2013\" name=\"foot-Tue-Apr-16-134413EDT-2013\">[back]</a> - The <a href=\"http://www.haskell.org/ghc/docs/latest/html/libraries/base/Data-IORef.html#v:atomicModifyIORef\">IORef docs</a> warn that using more than one of these in a program makes them unreliable in a multi-threaded setting. The thing is: 
  <ul>
    <li>This chat program is extremely simple, needing only one global map to store open channels</li>
    <li>If it ever got to the point of needing a more complex model, I'd hook it up to AcidState rather than trying to fiddle with MVars myself.</li>
  </ul></p>

<p>5 - <a href=\"#note-Tue-Apr-16-134535EDT-2013\" name=\"foot-Tue-Apr-16-134535EDT-2013\">[back]</a> - You can see that happening in the branch labeled <code>[channelName, action] <span style=\"color: #a0522d;\">-&gt;</span></code>, though we easily could have separated it into an external function rather than nesting <code><span style=\"color: #a020f0;\">case</span></code>s.</p>
"))
((5202 3723 607799000) :INSERT (126 :POSTED 3575073600))
((5202 3723 607801000) :INSERT (126 :TAG :ALMOST-LITERATE-PROGRAMMING))
((5202 3723 607803000) :INSERT (126 :TAG :HASKELL))
((5202 3723 608036000) :INSERT (127 :TITLE "Hardware and Squares"))
((5202 3723 608041000) :INSERT (127 :FILE "hardware-and-squares.html"))
((5202 3723 608042000) :INSERT (127 :EDITED 3610311167))
((5202 3723 608044000) :INSERT
 (127 :BODY
  "<p>First things first, there was finally a sale on <a href=\"http://www.newegg.ca/Product/Product.aspx?Item=N82E16820147189&nm_mc=KNC-GoogleAdwordsCA&cm_mmc=KNC-GoogleAdwordsCA-_-pla-_-Internal+SSD-_-N82E16820147189\">these things</a>, and I was getting sick of the <a href=\"/article?name=x220.html\">jury-rigged Vertex in my current laptop</a>, so I picked one up. They're back up at ~$170, but mine cost me a much more attractive $90 last week.</p>

<img src=\"/static/img/hardware-and-squares-1.jpg\" class=\"middle\" alt=\"A hard drive\" />

<img src=\"/static/img/hardware-and-squares-2.jpg\" class=\"middle\" alt=\"The same hard drive from another angle\" />

<p>First impressions are ok.</p>

<p>I'm not going to endorse SATA3 for anyone, because it's honestly not a mind-blowing change. I mean load times are noticeably faster, but the difference isn't anything like what you get from switching to a SATA2 SSD from a traditional platter drive. If you end up trading up to this from one of the slower SSDs, be prepared to hear yourself say \"Oh, that's nice\" rather than \"This is fucking glorious\". Honestly, my purchase was a result of the fact that this sale price came under my may-as-well threshold for hardware and that my previous HD was <i>literally</i> held in by rubber stoppers and electrical tape.</p>

<h2>Dissecting Squares</h2>

<p>I'm blaming <a href=\"http://www.meetup.com/Toronto-Code-Retreat/members/2372148/\">Dann</a> for this one <a href=\"/article?name=life-common-lisp-haskell-and-clojure.html\">again</a>. Here's the problem we decided to go after for this months' <a href=\"http://www.meetup.com/Toronto-Code-Retreat/\">Toronto Code Retreat</a>:</p>

<p>Suppose you have a grid of squares <code>n</code>x<code>n</code> large. There is a finite number of ways you can split that square grid up into squares of at least 1x1 size. For example, for a 1x1 grid, there is only <code>1</code> possible dissection. For a 2x2 grid, there are <code>2</code> (either 4 1x1 squares or 1 2x2 square). For a 3x3 grid there are <code>6</code>; (either 9 1x1 squares, 1 3x3 square, or 4 separate combinations of 1 2x2 square and 5 1x1 squares). This is the Number of Square Dissections.</p>

<img src=\"/static/img/square-dissections.png\" class=\"middle\" alt=\"Squares. Nothing at all hard-drive related.\" />

<p><i>(A <a href=\"http://oeis.org/A224239/a224239_4.jpg\">complete illustration of the first four terms</a> is over in the OEIS page. There's <a href=\"http://oeis.org/A224239/a224239_5.jpg\">also</a> a <a href=\"http://oeis.org/A224239/a224239_6.jpg\">further</a> three <a href=\"http://oeis.org/A224239/a224239_7.jpg\">pages</a> illustrating the fifth term. This gets big in a hurry.)</i></p>

<p>The challenge:</p>

<ul>
  <li><b>\"Easy\" Mode:</b> Write a function that takes a number <code>N</code> and returns the Number of Square Dissections of an <code>N</code> by <code>N</code> grid.</li>
  <li><b>\"Hard\" Mode:</b> Write a second function with the same input as above that returns the number of <b>unique</b>, under rotation and reflection, dissections.</li>
</ul>

<p>Before you chuckle at this, bear in mind that a general solution is publishable<a href=\"#foot-Fri-Apr-19-210429EDT-2013\" name=\"note-Fri-Apr-19-210429EDT-2013\">[1]</a>. According to Dann, the sequence is <a href=\"http://oeis.org/A045846\">solved up to an <code>N</code> of 15</a> or so, and that's already some ungodly number best expressed by exponents.</p>

<p>A couple of people took a stab at working \"Hard\" mode solutions<a href=\"#foot-Fri-Apr-19-210437EDT-2013\" name=\"note-Fri-Apr-19-210437EDT-2013\">[2]</a>, but as far as I know, no one managed to get to a working solution for \"Easy\" mode. This is the first Code Retreat I've gone to where I've felt deeply inadequate as a programmer, and that the most popular tool \"a notebook\" rather than a particular programming language.</p>

<p>As to the problem, I tried a bunch of approaches, none of which seemed to do anything other than annoy me. In terms of problem-solving, I'm usually a data-representation guy. Maybe it's the design degree making me focus on that, I don't fucking know, but it works fairly well. Given a thorny problem, my first reflex is to figure out a way of storing the data such that the mechanical components of the solution are going to be as simple as possible with no more moving parts than necessary. Which is why my train of thought as the problem was coming in was something like...</p>

<blockquote>Can we do this as a naive area calculation? No, that actually fails on the 3x3 grid. We need to represent area <i>and</i> position, or we might represent the remaining area of the board in a more explicit way. Too complicated. Ok, we need to fit things into other things; is this actually a factoring problem? No, we're looking for the count of unique ways <i>of</i> factoring a thing rather than actual factorization. Doing it that way sounds like it would be computationally expensive. Can we model it as a tree of possible square placements? We'd need to represent each square as a <code>width x y</code> triple, at minimum, starting with <code>(list (- n 2) 0 0)</code> and working from there. But there are multiple interconnected combinations that can start with each 2x2 square on a 4x4 grid, and we can't actually prune a lot of sub-branches. Can we do this as a graph traversal? Sounds pretty go... wait, no. No, we wouldn't be visiting each node once. In fact, we can't know a-priori how many times a given node would have to be visited, or what the endpoints of any valid traversal are. Can we model this as an inventory system? Each grid has yae space and adding a square depletes it; when you get stuck, fill the rest with ones, each fill is a different dissection, count the results. Wait, isn't that going to be <code>O^scary^fucking-scary</code>? You need to generate all possible inventory combinations <i>and</i> de-duplicate. I guess you could keep a set of dissections somewhere and keep a canonical sorting order for placed squares. That still implies a representation that tracks position <i>and</i> size rather than just a size and a count. Is it possible that a 2D grid is actually a better representation for this one?<span class=\"sig\">-Inaimathi's brain</span></blockquote>

<p>As it happens, sitting down and throwing together a simple program to test some of these didn't do anything to help. I'd start, get about a third of the way through, then realize that I wasn't accounting for this or that edge case. Or I'd figure out that edge-cases were covered, but the approach doesn't scale up to a general solution. The most promising I've got so far, and this is nowhere near a working solution yet, looks like</p>

<pre>(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">positions</span> (board-size square-size)
  (<span style=\"color: #a020f0;\">loop</span> for x from 0 to (- board-size square-size)
     append (<span style=\"color: #a020f0;\">loop</span> for y from 0 to (- board-size square-size)
               collect (list square-size x y))))

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">next-squares</span> (board-size starting-square disregard)
  (<span style=\"color: #a020f0;\">destructuring-bind</span> (sq-size sq-x sq-y) starting-square
    (<span style=\"color: #a020f0;\">loop</span> for current-sq-size from sq-size downto 2
         append (<span style=\"color: #a020f0;\">loop</span> for x from sq-x 
                   append (<span style=\"color: #a020f0;\">loop</span> for y from sq-y
                             when (and (or (= x sq-size) (= y sq-size)) 
                                       (not (member (list current-sq-size x y) disregard <span style=\"color: #7a378b;\">:test</span> #'equal))) 
                             collect (list current-sq-size x y)
                             until (&gt;= (+ sq-size y) board-size))
                   until (&gt;= (+ sq-size x) board-size)))))

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">tree-out</span> (board-size list-of-squares)
  (<span style=\"color: #a020f0;\">loop</span> for sq in list-of-squares
     collect sq into dis
     collect (next-squares board-size sq dis)))</pre>

<p>which is godawful, and doesn't work yet, but it isn't obvious that it <i>can't</i> work so I'm rolling with it. The (very) general high-level approach is starting from the largest possible sub-squares of a given grid and doing a depth-first placement traversal. Each successful placement will then be sorted and stored in a set, which will ensure uniqueness<a href=\"#foot-Fri-Apr-19-210451EDT-2013\" name=\"note-Fri-Apr-19-210451EDT-2013\">[3]</a>. There's a few places where we can definitely prune possibilities, but not as many as I thought there would be, which means that this will ultimately be a fairly expensive operation in any case.</p>

<p>Ugh. This isn't where I was planning on sinking the next week or so of my free time. I <i>wanted</i> to say a few words about Raspberry Pi hacking, and about its GPIO facilities specifically, or to talk a bit more about Wai in the context of large web applications, or maybe finally unveil my Plan For World Domination™© centered around building a general HTML-based MMO, but no.</p>

<p>I got a meme on me. So instead, I'll be thinking about squares.</p>

<p>And how they fit into each other.</p>


<hr />
<h5>Footnotes</h5>
<p>1 - <a href=\"#note-Fri-Apr-19-210429EDT-2013\" name=\"foot-Fri-Apr-19-210429EDT-2013\">[back]</a> - A proof that it's an NP-complete problem in the general case would also be noteworthy apparently.</p>

<p>2 - <a href=\"#note-Fri-Apr-19-210437EDT-2013\" name=\"foot-Fri-Apr-19-210437EDT-2013\">[back]</a> - That is, taking the list of all dissections of a given grid size and filtering out the rotationally/reflectively unique ones.</p>

<p>3 - <a href=\"#note-Fri-Apr-19-210451EDT-2013\" name=\"foot-Fri-Apr-19-210451EDT-2013\">[back]</a> - This can all happen in a single traversal, though there might be some opportunity for easy parallelism depending on how the implementation shakes out.</p>
   "))
((5202 3723 608121000) :INSERT (127 :POSTED 3575332800))
((5202 3723 608122000) :INSERT (127 :TAG :HARDWARE))
((5202 3723 608124000) :INSERT (127 :TAG :IDEA-PEELING))
((5202 3723 608283000) :INSERT (128 :TITLE "Conduits and More Squares"))
((5202 3723 608288000) :INSERT (128 :FILE "conduits-and-more-squares.html"))
((5202 3723 608290000) :INSERT (128 :EDITED 3610301332))
((5202 3723 608292000) :INSERT
 (128 :BODY
  "<p>Ok, so I've been coding something for the past little while in between <a href=\"http://oeis.org/A045846\">thinking about squares</a> and reading up on <a href=\"http://www.haskell.org/haskellwiki/Haskell_for_multicores\">concurrency in haskell</a>. I'm not going to tell you what it is, because we've established <a href=\"/article?name=indirect-reflections.html\">my track record</a>, but I did want to note that it looks like it's going to rely on <a href=\"http://www.tfeb.org/lisp/hax.html#CONDUITS\">Conduits</a>. A minimal module that provides some interesting additional options for <code>defpackage</code>.</p>

<p>It doesn't have a <code><a href=\"http://www.quicklisp.org/beta/\">quicklisp</a></code> installation package yet, so I've written a basic <code>.asd</code> and chucked it up onto <a href=\"https://github.com/Inaimathi/conduits\">my github</a> in the meantime.</p>

<h3>More Square Thoughts</h3>

<p>I haven't been actively working on this, just sort of letting it percolate at the back of my mind while other stuff is going on. Having taken a closer look at <a href=\"http://oeis.org/A224239/a224239_4.jpg\">the original solution for 1..4</a>, and imagining how its author went about getting it, it looks like we might be able to cut a lot of placements out of the process if we picked a representation that was easy to <code>reflect</code> and <code>rotate</code>. Then the actual solution would look something like</p>

<pre>(<span style=\"color: #a020f0;\">defclass</span> <span style=\"color: #228b22;\">grid</span> ...)

(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">rotate</span> ((grid grid) squares direction) ...)
(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">reflect</span> ((grid grid) squares axis) ...)

(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">collect-rotations</span> ((grid grid) squares)
  (insert-dissection grid squares)
  (<span style=\"color: #a020f0;\">loop</span> repeat 3 (insert-dissection grid (rotate grid squares <span style=\"color: #7a378b;\">:cw</span>)))
  (rotate grid squares <span style=\"color: #7a378b;\">:cw</span>))

(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">collect-reflection</span> ((grid grid) squares)
  (<span style=\"color: #a020f0;\">loop</span> for axis in '(<span style=\"color: #7a378b;\">:x</span> <span style=\"color: #7a378b;\">:y</span> <span style=\"color: #7a378b;\">:xy</span> <span style=\"color: #7a378b;\">:yx</span>)
     do (collect-rotations (reflect grid squares axis))))

(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">collect-dissections</span> ((grid grid) squares)
  (collect-rotations grid squares)
  (collect-reflections grid squares))

(<span style=\"color: #a020f0;\">loop</span> for sq in (starting-positions a-grid)
   do (<span style=\"color: #a020f0;\">loop</span> until (full? g) collect (place-next g) into g
         do (collect-dissections a-grid g))
   finally (<span style=\"color: #a020f0;\">return</span> (dissection-count grid)))</pre>

<p>Assuming this works, we could easily write a solution to the \"hard\" version too; just call <code>insert-dissection</code> directly rather than going through <code>collect-dissection</code> and friends.</p>

<p>I'm carefully refraining from defining <code>dissection-count</code>, <code>insert-dissection</code>, <code>grid</code>, and indeed <code>rotate</code> and <code>reflect</code>. What I know is</p>

<ul>
  <li><code>insert-dissection</code> is going to have to do the work of ensuring that duplicate dissections are discarded, which implies storing them as a set or hash</li>
  <li>the definitions of <code>rotate</code> and <code>reflect</code> will depend heavily on the definition of <code>grid</code>, and square storage needs to be thought out to make sure they're all fast</li>
  <li>it seems like there should be a better way to solve this problem than \"brute force\", but I'm not seeing it yet. I've joked about it before, but this may actually be the problem that gets me off my ass and into seriously learning about <a href=\"http://www.obitko.com/tutorials/genetic-algorithms/index.php\">genetic algorithms</a></li>
</ul>

<p>That's that for now. I was going to talk a bit about how work has been going, and the shape of small-scale development in Toronto's medical industry, but it looks like a client has finally decided to respond to me, so back to the grindstone I go.</p>
"))
((5202 3723 608326000) :INSERT (128 :POSTED 3575678400))
((5202 3723 608328000) :INSERT (128 :TAG :COMMON-LISP))
((5202 3723 608330000) :INSERT (128 :TAG :IDEA-PEELING))
((5202 3723 608576000) :INSERT (129 :TITLE "Briefly, Laziness"))
((5202 3723 608581000) :INSERT (129 :FILE "laziness.html"))
((5202 3723 608583000) :INSERT (129 :EDITED 3610300148))
((5202 3723 608585000) :INSERT
 (129 :BODY
  "<p>I've gotten some questions about what, exactly, <a href=\"http://en.wikipedia.org/wiki/Lazy_evaluation\">laziness</a> is good for, so I'll want to touch on it briefly.</p>

<p>Short answer: <b>it saves you space and time</b>.</p>

<h2>Space</h2>

<p>Really, this should be obvious, but if we're going through this, lets do it properly. Here are some lists</p>

<pre>(<span style=\"color: #a020f0;\">defparameter</span> <span style=\"color: #a0522d;\">foo</span> (list 1 2 3 4 5 6 7 8 9))</pre>

<pre><span style=\"color: #a0522d;\">foo</span> = [1, 2, 3, 4, 5, 6, 7, 8, 9] <span style=\"color: #b22222;\">## This one's from Python</span></pre>

<pre><span style=\"color: #0000ff;\">foo</span> <span style=\"color: #a0522d;\">=</span> [1, 2, 3, 4, 5, 6, 7, 8, 9] <span style=\"color: #b22222;\">-- </span><span style=\"color: #b22222;\">This one's from Haskell</span></pre>

<pre>foo = [1, 2, 3, 4, 5, 6, 7, 8, 9] <span style=\"color: #b22222;\">// </span><span style=\"color: #b22222;\">This one's from Javascript</span></pre>

<p>and here's some lazy lists</p>

<pre>(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">lazy-numbers</span> (<span style=\"color: #228b22;\">&amp;optional</span> (starting-with 1))
  (cons starting-with (<span style=\"color: #a020f0;\">lambda</span> () (lazy-numbers (+ starting-with 1)))))

(<span style=\"color: #a020f0;\">defparameter</span> <span style=\"color: #a0522d;\">foo</span> (lazy-numbers))</pre>

<pre><span style=\"color: #a020f0;\">def</span> <span style=\"color: #0000ff;\">lazyNumbers</span>(startingWith=1):
    i = startingWith
    <span style=\"color: #a020f0;\">while</span> <span style=\"color: #a020f0;\">True</span>:
        <span style=\"color: #a020f0;\">yield</span> i
        i += 1

<span style=\"color: #a0522d;\">foo</span> = lazyNumbers()</pre>

<pre><span style=\"color: #0000ff;\">foo</span> <span style=\"color: #a0522d;\">=</span> [1<span style=\"color: #a0522d;\">..</span>]</pre>

<pre><span style=\"color: #a020f0;\">function</span> <span style=\"color: #0000ff;\">lazyNumbers</span> (<span style=\"color: #a0522d;\">startingWith</span>) {
    <span style=\"color: #a020f0;\">if</span> (startingWith === <span style=\"color: #008b8b;\">undefined</span>) startingWith = 1;
    <span style=\"color: #a020f0;\">return</span> { num: startingWith,
             <span style=\"color: #0000ff;\">next</span>: <span style=\"color: #a020f0;\">function</span> () {
                 <span style=\"color: #008b8b;\">this</span>.num += 1;
                 <span style=\"color: #a020f0;\">return</span> <span style=\"color: #008b8b;\">this</span>.num
             }
           }
}

foo = lazyNumbers();</pre>

<p>Granted the second set looks more complicated, except for the Haskell line, but it has some advantages. Firstly, while the first bunch of lists is bounded, this second bunch is infinite, and you do sometimes want to express that. More to the point though, the reason these can <i>be</i> infinite is that they're lazy. They only compute as much of the remainder of the sequence as you actually ask for, which means they save you space in two ways</p>

<ul>
  <li>they don't keep the entire list in memory by default; they deal with only one element at a time and any used ones are garbage collected unless you decide to keep a pointer to them yourself</li>
  <li>they never bother computing parts of the list you don't call for, so they don't waste space storing values that'll never actually get used somewhere</li>
</ul>

<p>That's basic stuff, it should be pretty obvious. Less obvious, but more significant, is how this saves you time.</p>

<h2>Time</h2>

<p>By its lonesome, it actually doesn't.</p>

<pre>(<span style=\"color: #a020f0;\">loop</span> with lst = (list 1 2 3 4 5 6 7 8 9)
   repeat 5 for n in lst
   do (format t <span style=\"color: #8b2252;\">\"~a~%\"</span> n))</pre>

<p>takes exactly the same amount of run time as</p>

<pre>(<span style=\"color: #a020f0;\">loop</span> with lst = (lazy-numbers 1) repeat 5
     repeat 5 for n = (car lst) for lst = (funcall (cdr lst))
     do (format t <span style=\"color: #8b2252;\">\"~a~%\"</span> n))</pre>

<p>But what about when we compose multiple operations on one sequence? You'll recall that back when I sat down to <a href=\"/article?name=life-EXTREME.html\">optimize Life</a> for <a href=\"/article?name=not-optimizing-haskell.html\">a couple of days</a>, I made a big deal of reducing the number of iterations of our corpus. Specifically, recall that the Haskell version of <a href=\"/article?name=life-common-lisp-haskell-and-clojure.html\">Gridless Life</a> started out like this:</p>

<pre><span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Data.List</span>

<span style=\"color: #0000ff;\">neighbors</span> <span style=\"color: #a0522d;\">::</span> (<span style=\"color: #228b22;\">Int</span>, <span style=\"color: #228b22;\">Int</span>) <span style=\"color: #a0522d;\">-&gt;</span> [(<span style=\"color: #228b22;\">Int</span>, <span style=\"color: #228b22;\">Int</span>)]
<span style=\"color: #0000ff;\">neighbors</span> (x, y) <span style=\"color: #a0522d;\">=</span> [(x<span style=\"color: #a0522d;\">+</span>dx, y<span style=\"color: #a0522d;\">+</span>dy) <span style=\"color: #a0522d;\">|</span> dx <span style=\"color: #a0522d;\">&lt;-</span> [<span style=\"color: #a0522d;\">-</span>1<span style=\"color: #a0522d;\">..</span>1], dy <span style=\"color: #a0522d;\">&lt;-</span> [<span style=\"color: #a0522d;\">-</span>1<span style=\"color: #a0522d;\">..</span>1], (dx,dy) <span style=\"color: #a0522d;\">/=</span> (0,0)]

<span style=\"color: #0000ff;\">lifeStep</span> <span style=\"color: #a0522d;\">::</span> [(<span style=\"color: #228b22;\">Int</span>, <span style=\"color: #228b22;\">Int</span>)] <span style=\"color: #a0522d;\">-&gt;</span> [(<span style=\"color: #228b22;\">Int</span>, <span style=\"color: #228b22;\">Int</span>)]
<span style=\"color: #0000ff;\">lifeStep</span> cells <span style=\"color: #a0522d;\">=</span> [head g <span style=\"color: #a0522d;\">|</span> g <span style=\"color: #a0522d;\">&lt;-</span> grouped cells, viable g]
  <span style=\"color: #a020f0;\">where</span> grouped <span style=\"color: #a0522d;\">=</span> group <span style=\"color: #a0522d;\">.</span> sort <span style=\"color: #a0522d;\">.</span> concat <span style=\"color: #a0522d;\">.</span> map neighbors
        viable [<span style=\"color: #a020f0;\">_</span>,<span style=\"color: #a020f0;\">_</span>,<span style=\"color: #a020f0;\">_</span>] <span style=\"color: #a0522d;\">=</span> <span style=\"color: #228b22;\">True</span>
        viable [c,<span style=\"color: #a020f0;\">_</span>] <span style=\"color: #a0522d;\">=</span> c <span style=\"color: #a0522d;\">`elem`</span> cells
        viable <span style=\"color: #a020f0;\">_</span> <span style=\"color: #a0522d;\">=</span> <span style=\"color: #228b22;\">False</span></pre>

<p>and zoom in on one line in particular.</p>

<pre><span style=\"color: #a0522d;\">...</span>
  <span style=\"color: #a020f0;\">where</span> grouped <span style=\"color: #a0522d;\">=</span> group <span style=\"color: #a0522d;\">.</span> sort <span style=\"color: #a0522d;\">.</span> concat <span style=\"color: #a0522d;\">.</span> map neighbors
        <span style=\"color: #a0522d;\">...</span></pre>

<p><i>That right there</i> is what laziness trivially enables. If you think about what's being done here, you'll realize that you'd never do this in an eager context. Because if you did, what you'd get is</p>

<ol>
  <li>the argument would get evaluated</li>
  <li>it would get traversed once by <code>map neighbors</code></li>
  <li>and then it would get traversed again by <code>concat</code></li>
  <li>and then it would get traversed again by <code>sort</code><a href=\"#foot-Mon-Apr-29-130749EDT-2013\" name=\"note-Mon-Apr-29-130749EDT-2013\">[1]</a></li>
  <li>and then it would get traversed again by <code>group</code></li>
</ol>

<p>which means six total trips over the entire list. That's bad because every element you touch adds to your run time, <i>and</i> each element you have to touch again as part of the computation is one that you can't throw out of memory. On the other hand, expressing a computation by composing smaller, easy computations is very straightforward<a href=\"#foot-Mon-Apr-29-130806EDT-2013\" name=\"note-Mon-Apr-29-130806EDT-2013\">[2]</a>. This is a place where the code you want to <i>run</i>, and the code you want to <i>write</i> are completely different.</p>

<p>What you want to run is a tight loop that walks over the entire corpus <i>once</i>, and applies all of the chained functions at once per element. What you want to write is the naive composition of those chained functions, because you've otherwise created an algorithm that will only ever be useful for your particular computation, and that computation will be burdened with the specifics of iteration which will make it non-trivial at best and <a href=\"https://github.com/slyrus/cl-typesetting/blob/master/tables.lisp#L168-L277\">impenetrable</a> at worst.</p>

<p>Now, granted, Common Lisp has other ways of dealing of dealing with this<a href=\"#foot-Mon-Apr-29-131658EDT-2013\" name=\"note-Mon-Apr-29-131658EDT-2013\">[3]</a>, but laziness is one general solution. If each of those functions were lazy (as, in fact, they are in Haskell), what you'd get instead is exactly what you want. One, tight loop running over the entire corpus, applying only as much <code>group</code>ing, <code>sort</code>ing, <code>concat</code>ing and <code>neighbors</code>ing as it needed to for the next part of the computation. That saves you a few trips over the input with no additional effort on your part. Talk about low-hanging fruit.</p>

<p>I'll be honest, I was <i>also</i> going to talk about my latest thoughts on the square dissection problem, but this ended up being longer than I'd like as it is. It'll probably happen next time, I guess. Probably. Stay tuned if you're into that sort of thing.</p>


<hr />
<h5>Footnotes</h5>
<p>1 - <a href=\"#note-Mon-Apr-29-130749EDT-2013\" name=\"foot-Mon-Apr-29-130749EDT-2013\">[back]</a> - A note on functional, lazy sorts, because I was wondering about this both back when tuning the Haskell version of Life and as I was re-visiting it for today's feature. The way that lazy sorts seem to work is basically by using a destructured <a href=\"http://en.wikipedia.org/wiki/Heapsort\">heapsort</a>. Specifically, if you take a look at <a href=\"http://en.wikipedia.org/wiki/Heapsort#Pseudocode\">this pseudocode</a>, what's happening is that a lazy sort runs <code>heapify</code> right away and passes up the first element, then pulls out the next element each time it's asked for one. That results in <code>On</code> performance for finding the first element (which as far as I'm aware is what you'd have to do in order to get the \"nextest\" element in the general case anyway), followed by <code>O(log n)</code> performance on looking up each next element. That's good because it means you don't have to do it all at once, and it means that if you only want the first 5 sorted elements of a list of 10000, you get to avoid most of the work. On the other hand, note that this <i>doesn't</i> save you much memory, if any; you still need to store that heap for the whole list, even if you only want the first few chunklets.</p>

<p>2 - <a href=\"#note-Mon-Apr-29-130806EDT-2013\" name=\"foot-Mon-Apr-29-130806EDT-2013\">[back]</a> - Which is why I did this for the first pass of that program, not realizing that Haskell's lazy-by-default outlook would <i>also</i> make it about as efficient as it could be.</p>

<p>3 - <a href=\"#note-Mon-Apr-29-131658EDT-2013\" name=\"foot-Mon-Apr-29-131658EDT-2013\">[back]</a> - In fact, the situation of \"I want to write the pretty code, but run the ugly, optimized code\" should send any Lisp veterans off thinking about how you'd <code>defmacro</code> your way out of this particular annoyance.</p>
"))
((5202 3723 608674000) :INSERT (129 :POSTED 3576196800))
((5202 3723 608676000) :INSERT (129 :TAG :COMMON-LISP))
((5202 3723 608678000) :INSERT (129 :TAG :GENERAL-PROGRAMMING-THOUGHTS))
((5202 3723 608679000) :INSERT (129 :TAG :HASKELL))
((5202 3723 608681000) :INSERT (129 :TAG :JAVASCRIPT))
((5202 3723 608683000) :INSERT (129 :TAG :PYTHON))
((5202 3723 608847000) :INSERT (130 :TITLE "Dissecting Squares"))
((5202 3723 608851000) :INSERT (130 :FILE "squares.html"))
((5202 3723 608855000) :INSERT (130 :EDITED 3610311264))
((5202 3723 608857000) :INSERT
 (130 :BODY
  "<p>I know I posted earlier, but this has to come out of my head. And I don't think I'll have time to do much more writing this week, despite the fact that there are at <i>least</i> three other things on my mind that I need to idea peel.</p>

<p>So...</p>

<img src=\"/static/img/square-zones.png\" class=\"middle\" alt=\"Square placements map\" />

<p>That's what I'm thinking.</p>

<p>And here's an attempt at forcing this primitive tool called \"English\" to explain what it means in my head.</p>

<p>First off, <a href=\"/article?name=hardware-and-squares.html\">this</a> is what I was thinking <a href=\"/article?name=conduits-and-more-squares.html\">previously</a>. Which is to say, not much in particular; just working my way up to meaningfully tearing into the problem. The basic problem is that there are lots of ways to <a href=\"http://oeis.org/A045846\">dissect a square into smaller, integer-sized squares</a>, and brute-forcing it isn't going to be viable for very high <code>n</code>s. In fact, from what I've observed, it took multiple days of compute time to solve for 16, and that's not encouraging.</p>

<p>Thing is, there are lots of little ways to cut out a <i>lot</i> of the brute-force work required for the calculation. An approach that starts from the universe of possibilities and filters isn't going to get very far, but we can constrain that universe pretty significantly if we pick our model carefully, and I think I have.</p>

<h3>Characteristics of the Optimal Dissection Model</h3>

<h2>Cut at the base</h2>

<p>A huge contribution to the final tally of work is going to be figuring out where <code>1x1</code> squares can fit. If you look at each of them as a <code>Place</code>ment, you'll be overwhelmed pretty quickly. An easy way out of that is picking a model that lets you ignore 1x1 squares, and the easiest obvious way to do <i>that</i> is using a sparse array with the understanding that any unrecorded placements actually represent 1x1 squares. This lets you ignore a bunch of <code>StartingPoint</code>s too (more on that in a moment).</p>

<h2>Take symmetry into account</h2>

<p>A second huge contribution to the bottom line of work for this problem is that you need to recompute a lot of dissections which you must then de-duplicate later. I don't think we can lick this one entirely; we'll still need to do <code>Set</code> insertions at some point in the process just to make sure we're not counting anything twice. <i>But</i>. We can cut out a lot of them. Specifically, since the problem already mentions rotations and reflections, we don't need to <code>Place</code> any squares that we <i>know</i> will be picked up by some other permutations' reflections or rotations. That can greatly reduce the number potential starting nodes these placement trees. It also means we'll want a representation where <code>rotate</code> and <code>reflect</code> are really, <i>really</i> fast operations. The sparse array approach seems to be better than using an explicit grid, but I'm not quite convinced it's optimal.</p>

<h2>Bring it all together</h2>

<p>So what we've got as a 10000-foot-view for the process is this:</p>

<ol>
  <li>find all <code>StartingPoint</code>s</li>
  <li><code>unfold</code> each starting point, starting with squares of size <code>nxn</code> and working your way down to <code>2x2</code></li>
  <li><code>record</code> the null dissection (a grid full of 1x1 squares)</li>
  <li>return the size of the set of recorded dissections</li>
</ol>

<ul>
  <li>A <code>StartingPoint</code> is any point on our grid from <code>'(0 0)</code> to <code>`(,(limit n) ,(limit n))</code>.</li>
  <li>The <code>limit</code> of <code>n</code> is <code>(- (ceiling (/ n 2)) 1)</code></li>
  <li>To <code>unfold</code> a <code>StartingPoint</code>, <code>insert</code> the solitary placement as a dissection (remember, any empty spaces are treated as \"placed 1x1 squares\"), then find all <code>free</code> <code>SecondPoint</code>s and <code>unfold</code> them.</li>
  <li>A <code>SecondPoint</code> is any <code>free</code> <code>StartingPoint</code>, or any point between <code>`(,(limit n) ,y)</code> and <code>`(,(- n 2) ,y)</code>. Again, any others should be represented among <code>reflect</code>ions/<code>rotate</code>ions of other dissections.</li>
  <li>To <code>unfold</code> a <code>SecondPoint</code>, <code>insert</code> it as a dissection, then <code>unfold</code> all remaining <code>free</code> points on the grid (there's probably a way to cut this step down, but I can't see it yet).</li>
  <li>To <code>unfold</code> any other point, <code>insert</code> it as a dissection, and <code>unfold</code> all remaining <code>free</code> points until there's no more room.</li>
  <li>To <code>insert</code> a dissection, perform <code>Set</code> insertion on each of its <code>rotate</code>ions and <code>reflect</code>ions into the set of all insertions for this particular grid.</li>
  <li>A <code>free</code> point is one where there's enough room to put a square larger than 1x1 <i>(this implies that <code>place</code> could probably remove some additional squares from the potential starting pool to make calculating this easier)</i>.</li>
</ul>

<p>Granted, that's easier said than done. I get the feeling that when I actually go to implement this fully, a whole bunch of problems are going to crop up, but at least I have a half-way decent starting point.</p>
"))
((5202 3723 608898000) :INSERT (130 :POSTED 3576196800))
((5202 3723 608900000) :INSERT (130 :TAG :IDEA-PEELING))
((5202 3723 609360000) :INSERT (131 :TITLE "How to implement a lazy sort"))
((5202 3723 609365000) :INSERT (131 :FILE "how-to-implement-a-lazy-sort.html"))
((5202 3723 609367000) :INSERT (131 :EDITED 3610022331))
((5202 3723 609369000) :INSERT
 (131 :BODY "<p>You can't implement a lazy sort.</p>

<p>Not really.</p>

<p>I mean, ok, yes, you can implement a sort that defers as much work as possible via that destructured approach I touched on last time and which I will expand on in a minute, but that's <b>not a lazy sort</b>.</p>

<p>It has certain characteristics which seem intrinsic to sorts that prevent it from behaving the way you'd expect an actual lazy function to behave. For starters, it doesn't save you any memory. In fact, you need to pull some fairly fancy footwork to write a functional, deferring sort that doesn't waste much more memory than the in-place version<a href=\"#foot-Thu-May-02-214518EDT-2013\" name=\"note-Thu-May-02-214518EDT-2013\">[1]</a>. Next, it can't consume infinite sequences. That's to do with the definition of a sort; I can't see a good way of sorting an infinite sequence without backtracking, which isn't practical in the wild. Finally, it doesn't seem to save you as much time in composition as a regular lazy function would. It has to consume the entire relevant input stream, do some preliminary processing on it<a href=\"#foot-Thu-May-02-214521EDT-2013\" name=\"note-Thu-May-02-214521EDT-2013\">[2]</a>, then hand you a stream of outputs.</p>

<p>The end result is a sort function that defers a lot of its work, and does save you a lot of time if you only happen to want the first bit of a list sorted, <i>and</i> it even saves you a little bit of time if you want to run several lazy functions in succession on its output, but it doesn't quite do enough to get the label \"lazy\" without a massive asterisk next to it.</p>

<h3>How to implement a lazy* sort</h3>

<p>First up, here's the Python code.</p>

<pre><span style=\"color: #a020f0;\">from</span> copy <span style=\"color: #a020f0;\">import</span> copy

<span style=\"color: #a020f0;\">def</span> <span style=\"color: #0000ff;\">eager</span>(aList, pred=<span style=\"color: #a020f0;\">lambda</span> a, b: a &gt; b):
    arr = copy(aList)
    count = <span style=\"color: #7a378b;\">len</span>(aList)
    heapify(arr, count, pred)
    end = count - 1
    <span style=\"color: #a020f0;\">while</span> end &gt; 0:
        __swap(arr, end, 0)
        end -= 1
        sift(arr, 0, end, pred)
    arr.reverse()
    <span style=\"color: #a020f0;\">return</span> arr

<span style=\"color: #a020f0;\">def</span> <span style=\"color: #0000ff;\">lazy</span>(aList, pred=<span style=\"color: #a020f0;\">lambda</span> a, b: a &gt; b):
    arr = copy(aList)
    count = <span style=\"color: #7a378b;\">len</span>(arr)
    heapify(arr, count, pred)
    end = count - 1
    <span style=\"color: #a020f0;\">while</span> end &gt; 0:
        <span style=\"color: #a020f0;\">yield</span> arr[0]
        __swap(arr, end, 0)
        end -= 1
        sift(arr, 0, end, pred)
    <span style=\"color: #a020f0;\">yield</span> arr[0]

<span style=\"color: #a020f0;\">def</span> <span style=\"color: #0000ff;\">heapify</span>(arr, count, pred=<span style=\"color: #a020f0;\">lambda</span> a, b: a &gt; b):
    start = (count - 1)/2
    <span style=\"color: #a020f0;\">while</span> start &gt;= 0:
        sift(arr, start, count-1, pred)
        start -= 1
    <span style=\"color: #a020f0;\">return</span> arr

<span style=\"color: #a020f0;\">def</span> <span style=\"color: #0000ff;\">sift</span>(arr, start, end, pred=<span style=\"color: #a020f0;\">lambda</span> a, b: a &gt; b):
    root = start
    <span style=\"color: #a020f0;\">while</span> root * 2 + 1 &lt;= end:
        child = root * 2 + 1
        target = root
        <span style=\"color: #a020f0;\">if</span> pred(arr[target], arr[child]):
            target = child
        <span style=\"color: #a020f0;\">if</span> child+1 &lt;= end <span style=\"color: #a020f0;\">and</span> pred(arr[target], arr[child+1]):
            target = child + 1
        <span style=\"color: #a020f0;\">if</span> <span style=\"color: #a020f0;\">not</span> target == root:
            __swap(arr, root, target)
            root = target
        <span style=\"color: #a020f0;\">else</span>:
            <span style=\"color: #a020f0;\">return</span> arr

<span style=\"color: #a020f0;\">def</span> <span style=\"color: #0000ff;\">__swap</span>(arr, a, b):
    arr[a], arr[b] = arr[b], arr[a]</pre>

<p>This is a direct translation of the <a href=\"http://en.wikipedia.org/wiki/Heapsort#Pseudocode\">Wikipedia Heapsort pseudo-code</a>. And yes, I used Python because it's close enough to pseudo-code that I could do a working, line-by-line translation. It was really, <i>really</i> tempting to just implement <code>eager</code> as <code>list(lazy(aList, pred))</code>, but that wouldn't have told me what I wanted to know for the next bit.</p>


<pre>&gt;&gt;&gt; <span style=\"color: #a020f0;\">import</span> heapsort, cProfile
&gt;&gt;&gt; <span style=\"color: #a020f0;\">from</span> random <span style=\"color: #a020f0;\">import</span> Random
&gt;&gt;&gt; sample = [Random().randint(0, 1000) <span style=\"color: #a020f0;\">for</span> i <span style=\"color: #a020f0;\">in</span> <span style=\"color: #7a378b;\">xrange</span>(0, 5000)]
&gt;&gt;&gt; cProfile.run(<span style=\"color: #8b2252;\">\"heapsort.eager(sample)\"</span>)
         172098 function calls <span style=\"color: #a020f0;\">in</span> 0.103 seconds

   Ordered by: standard name

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    0.000    0.000    0.103    0.103 &lt;string&gt;:1(&lt;module&gt;)
        1    0.000    0.000    0.000    0.000 copy.py:113(_copy_with_constructor)
        1    0.000    0.000    0.000    0.000 copy.py:66(copy)
        1    0.002    0.002    0.013    0.013 heapsort.py:27(heapify)
   107567    0.014    0.000    0.014    0.000 heapsort.py:3(&lt;<span style=\"color: #a020f0;\">lambda</span>&gt;)
        1    0.004    0.004    0.103    0.103 heapsort.py:3(eager)
     7499    0.069    0.000    0.097    0.000 heapsort.py:34(sift)
    57023    0.015    0.000    0.015    0.000 heapsort.py:49(__swap)
        1    0.000    0.000    0.000    0.000 {<span style=\"color: #7a378b;\">len</span>}
        1    0.000    0.000    0.000    0.000 {method <span style=\"color: #8b2252;\">'disable'</span> of <span style=\"color: #8b2252;\">'_lsprof.Profiler'</span> objects}
        1    0.000    0.000    0.000    0.000 {method <span style=\"color: #8b2252;\">'get'</span> of <span style=\"color: #8b2252;\">'dict'</span> objects}
        1    0.000    0.000    0.000    0.000 {method <span style=\"color: #8b2252;\">'reverse'</span> of <span style=\"color: #8b2252;\">'list'</span> objects}


&gt;&gt;&gt; cProfile.run(<span style=\"color: #8b2252;\">\"heapsort.lazy(sample)\"</span>)
         3 function calls <span style=\"color: #a020f0;\">in</span> 0.000 seconds

   Ordered by: standard name

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    0.000    0.000    0.000    0.000 &lt;string&gt;:1(&lt;module&gt;)
        1    0.000    0.000    0.000    0.000 heapsort.py:15(lazy)
        1    0.000    0.000    0.000    0.000 {method <span style=\"color: #8b2252;\">'disable'</span> of <span style=\"color: #8b2252;\">'_lsprof.Profiler'</span> objects}


&gt;&gt;&gt; cProfile.run(<span style=\"color: #8b2252;\">\"list(heapsort.lazy(sample))\"</span>)
         177097 function calls <span style=\"color: #a020f0;\">in</span> 0.107 seconds

   Ordered by: standard name

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    0.001    0.001    0.107    0.107 &lt;string&gt;:1(&lt;module&gt;)
        1    0.000    0.000    0.000    0.000 copy.py:113(_copy_with_constructor)
        1    0.000    0.000    0.000    0.000 copy.py:66(copy)
   107567    0.015    0.000    0.015    0.000 heapsort.py:15(&lt;<span style=\"color: #a020f0;\">lambda</span>&gt;)
     5001    0.004    0.000    0.106    0.000 heapsort.py:15(lazy)
        1    0.002    0.002    0.014    0.014 heapsort.py:27(heapify)
     7499    0.070    0.000    0.098    0.000 heapsort.py:34(sift)
    57023    0.015    0.000    0.015    0.000 heapsort.py:49(__swap)
        1    0.000    0.000    0.000    0.000 {<span style=\"color: #7a378b;\">len</span>}
        1    0.000    0.000    0.000    0.000 {method <span style=\"color: #8b2252;\">'disable'</span> of <span style=\"color: #8b2252;\">'_lsprof.Profiler'</span> objects}
        1    0.000    0.000    0.000    0.000 {method <span style=\"color: #8b2252;\">'get'</span> of <span style=\"color: #8b2252;\">'dict'</span> objects}


&gt;&gt;&gt; </pre>

<p>This is that work deferring thing happening. The call to <code>heapsort.lazy</code> doesn't give you a sorted list; it gives you a generator you can traverse to get that list. The call to <code>heapsort.eager</code> does give you the whole sorted list, and takes very slightly less time than the lazy version if you happen to need the whole list. As I said before though; if you're only after the first 10% or so elements, there's no contest in terms of execution time, <i>even if</i> you're trying to be semi-functional by copying out the input instead of destructively modifying it.</p>

<p>Oh, before anyone gets the wrong idea</p>

<pre>&gt;&gt;&gt; cProfile.run(<span style=\"color: #8b2252;\">\"sorted(sample)\"</span>)
         3 function calls <span style=\"color: #a020f0;\">in</span> 0.002 seconds

   Ordered by: standard name

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    0.000    0.000    0.002    0.002 &lt;string&gt;:1(&lt;module&gt;)
        1    0.000    0.000    0.000    0.000 {method <span style=\"color: #8b2252;\">'disable'</span> of <span style=\"color: #8b2252;\">'_lsprof.Profiler'</span> objects}
        1    0.002    0.002    0.002    0.002 {<span style=\"color: #7a378b;\">sorted</span>}


&gt;&gt;&gt; </pre>

<p>My stupid little heapsort implementation isn't meant to showcase how slow Python is or anything like that. It's a learning exercise to show how you'd go about implementing a deferred sort in principle, not go into the nuts-and-bolts tuning process that comes once you've got your algorithm and data structures down. In other words, see it as a direct comparison of a shitty sort to the equivalent-except-lazy shitty sort.</p>

<h3>Second verse, same as the first</h3>

<p>Except with more parentheses. And I actually try to think through the problem rather than mindlessly parroting back an algorithm outline pilfered from Wikipedia.</p>

<pre>(<span style=\"color: #a020f0;\">defpackage</span> <span style=\"color: #228b22;\">:heapsort</span> (<span style=\"color: #7a378b;\">:use</span> <span style=\"color: #7a378b;\">:cl</span>))
(<span style=\"color: #a020f0;\">in-package</span> <span style=\"color: #7a378b;\">:heapsort</span>)

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">heapsort-lazy</span> (seq <span style=\"color: #228b22;\">&amp;optional</span> (predicate #'&gt;))
  (<span style=\"color: #a020f0;\">let*</span> ((len (length seq))
         (heap-vector (heapify seq len predicate)))
    (<span style=\"color: #a020f0;\">lambda</span> ()
      (decf len)
      (heappop! heap-vector len predicate))))

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">heapsort-eager</span> (seq <span style=\"color: #228b22;\">&amp;optional</span> (predicate #'&gt;))
  (<span style=\"color: #a020f0;\">let*</span> ((len (length seq))
         (heap-vector (heapify seq len predicate)))
    (<span style=\"color: #a020f0;\">loop</span> for i from (- len 1) downto 0
       unless (= 0 i) 
       collect (heappop! heap-vector i predicate))))

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">heapify</span> (seq len predicate)
  (<span style=\"color: #a020f0;\">loop</span> with buf = (make-array len <span style=\"color: #7a378b;\">:adjustable</span> t <span style=\"color: #7a378b;\">:fill-pointer</span> len)
     for ix from 0
     for elem in seq do (setf (aref buf ix) elem)
     do (<span style=\"color: #a020f0;\">loop</span> with i = ix
           while (&gt; i 0)
           for parent = (heap-parent i)
           until (compare buf parent i predicate)
           do (swap! buf parent i)
           do (setf i parent))
     finally (<span style=\"color: #a020f0;\">return</span> buf)))

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">sift!</span> (heap-vector start end predicate)
  (<span style=\"color: #a020f0;\">loop</span> with ix = start
     until (&gt; (+ 1 (* 2 ix)) end)
     while (<span style=\"color: #a020f0;\">loop</span> for child-ix in (heap-children-descending heap-vector ix end predicate)
              when child-ix
              do (<span style=\"color: #a020f0;\">unless</span> (or (compare heap-vector ix child-ix predicate))
                   (swap! heap-vector ix child-ix)
                   (setf ix child-ix)
                   (<span style=\"color: #a020f0;\">return</span> t))
              finally (<span style=\"color: #a020f0;\">return</span> nil))))

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">heappop!</span> (heap-vector last predicate)
  (swap! heap-vector 0 last)
  (sift! heap-vector 0 (- last 1) predicate)
  (vector-pop heap-vector))

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">heap-children-descending</span> (heap-vector ix bounds predicate)
  (<span style=\"color: #a020f0;\">let</span> ((child-l (+ 1 (* 2 ix)))
        (child-r (+ 2 (* 2 ix))))
    (<span style=\"color: #a020f0;\">cond</span> ((&gt; child-l bounds) nil)
          ((&gt; child-r bounds) (list child-l nil))
          (t (<span style=\"color: #a020f0;\">if</span> (compare heap-vector child-l child-r predicate) 
                 (list child-l child-r)
                 (list child-r child-l))))))

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">heap-parent</span> (n)
  (- (ceiling (/ n 2)) 1))

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">compare</span> (arr ix-a ix-b <span style=\"color: #228b22;\">&amp;optional</span> (predicate #'&gt;))
  (funcall predicate (aref arr ix-a) (aref arr ix-b)))

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">swap!</span> (arr ix-a ix-b)
  (rotatef (aref arr ix-a) (aref arr ix-b)))</pre>

<p>I'm not going to bother showing you the profiling on this one. Rest assured that the results on this and the Python version were very similar; the eager version is marginally faster than the lazy version at sorting the entire list and handing it to you, but has a <i>massive</i> disadvantage if you only want some small chunklet of the complete list. Also, the built-in sort beats both by several orders of magnitude.</p>

<p>For those of you who, like me, have never worked with heaps before<a href=\"#foot-Thu-May-02-214622EDT-2013\" name=\"note-Thu-May-02-214622EDT-2013\">[3]</a>, here's some basic theory. A heap is actually two things:</p>

<ul>
  <li><b>A tree-based data structure in which each parent node is ordered with respect to its children.</b> This is the easier-than-sorted-but-still-useful property mentioned earlier; children aren't ordered with respect to each other, and if you're watching the <a href=\"http://en.wikipedia.org/wiki/File:Sorting_heapsort_anim.gif\">wiki illustration</a> for the first time ever, you might be forgiven for thinking that step 1 involves randomly re-arranging your input. It's very easy to pull out the next element; it's the root. However, every time you pop the root, you need to do some re-juggling to maintain the heap property.</li>
  <li><b>A way of packing said tree-based data-structure into a 1-d array.</b> It's not painfully obvious, so I figured I'd make this part explicit: you pack a heap into a vector by designating <code>(aref vector (+ 1 (* i 2)))</code> and <code>(aref vector (+ 2 (* i 2)))</code> to be the children of <code>(aref vector i)</code>. This is faster than navigating an actual pointer tree, but it makes the structure of the code a bit counter-intuitive to the uninitiated, since it's talking about indices in non-obvious ways rather than talking about parents and children.</li>
</ul>

<p>Now then, most of the actual <code>heapsort.lisp</code> code is implementing a heap. Again, just for educational purposes, I'm sure there's a variable-predicate heap implementation floating around somewhere even though I haven't looked for it<a href=\"#foot-Thu-May-02-214631EDT-2013\" name=\"note-Thu-May-02-214631EDT-2013\">[4]</a>. In fact, lets take a look at the top-level functions before diving into that code, just to get it out of the way.</p>

<pre>(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">heapsort-eager</span> (seq <span style=\"color: #228b22;\">&amp;optional</span> (predicate #'&gt;))
  (<span style=\"color: #a020f0;\">let*</span> ((len (length seq))
         (heap-vector (heapify seq len predicate)))
    (<span style=\"color: #a020f0;\">loop</span> for i from (- len 1) downto 0
       unless (= 0 i) 
       collect (heappop! heap-vector i predicate))))</pre>

<p>We take a list, <code>heapify</code> it, then collect <code>heappop!</code>ed elements and return the result. Nothing to see here, it's exactly what you'd expect from a sort.</p>

<pre>(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">heapsort-lazy</span> (seq <span style=\"color: #228b22;\">&amp;optional</span> (predicate #'&gt;))
  (<span style=\"color: #a020f0;\">labels</span> ((next (heap-vector)
             (<span style=\"color: #a020f0;\">lambda</span> ()
               (cons (heappop! heap-vector (- (length heap-vector) 1) predicate)
                     (next heap-vector)))))
    (funcall (next (heapify seq (length seq) predicate)))))</pre>

<p>The lazy version is mildly more interesting </p>

<pre>(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">heapsort-lazy</span> (seq <span style=\"color: #228b22;\">&amp;optional</span> (predicate #'&gt;))
  (<span style=\"color: #a020f0;\">let*</span> ((len (length seq))
         (heap-vector (heapify seq len predicate)))
    (<span style=\"color: #a020f0;\">lambda</span> ()
      (decf len)
      (heappop! heap-vector len predicate))))</pre>

<p>Common Lisp doesn't have the notion of a generator in the same sense as Python, but a lambda with a closure around it does just as well for our purposes. You keep calling it to get at the <code>next</code> element, and it eventually throws an <code>invalid-array-index-error</code> that you need to deal with in some way. This actually seems like the most reasonable solution here; the alternative is something like</p>

<pre>(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">heapsort-lazy</span> (seq <span style=\"color: #228b22;\">&amp;optional</span> (predicate #'&gt;))
  (<span style=\"color: #a020f0;\">let*</span> ((len (length seq))
         (heap-vector (heapify seq len predicate)))
    (<span style=\"color: #a020f0;\">lambda</span> ()
      (<span style=\"color: #a020f0;\">if</span> (&gt;= 0 len)
          (values nil nil)
          (<span style=\"color: #a020f0;\">progn</span> (decf len)
                 (values (heappop! heap-vector len predicate) t))))))</pre>

<p>It's tempting to <i>just</i> return <code>NIL</code>, but then there's no way for a caller to disambiguate between \"The next element in your sequence is <code>NIL</code>\" and \"There are no more elements in the sequence. So <code>NIL</code>\". My kingdom for a <code><span style=\"color: #228b22;\">Maybe</span></code> monad, as annoying as most people seem to consider them.</p>

<p>Anyhow, onward.</p>

<pre>(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">heapify</span> (seq len predicate)
  (<span style=\"color: #a020f0;\">loop</span> with buf = (make-array len <span style=\"color: #7a378b;\">:adjustable</span> t <span style=\"color: #7a378b;\">:fill-pointer</span> len)
     for ix from 0
     for elem in seq do (setf (aref buf ix) elem)
     do (<span style=\"color: #a020f0;\">loop</span> with i = ix
           while (&gt; i 0)
           for parent = (heap-parent i)
           until (compare buf parent i predicate)
           do (swap! buf parent i)
           do (setf i parent))
     finally (<span style=\"color: #a020f0;\">return</span> buf)))</pre>

<p>My definition of <code>heapify</code> doesn't use a call to <code>sift!</code> anywhere, in blatant defiance of the standard implementation. Really, I should have factored that middle bit out into <code>heappush!</code>, because that's what it amounts to. You start with an empty heap, insert new elements, and compare each new element to its parent, calling <code>swap!</code> until you have something that respects the Heap Property.</p>

<pre>(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">swap!</span> (arr ix-a ix-b)
  (rotatef (aref arr ix-a) (aref arr ix-b)))</pre>

<p><code>swap!</code> is implemented in terms of <code>rotatef</code>; it takes an array and two indices, and swaps the appropriate array cells. <code>heap-parent</code> shouldn't surprise you at all if you were paying attention when I explained what a heap actually is</p>

<pre>(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">heap-parent</span> (n)
  (- (ceiling (/ n 2)) 1))</pre>

<p>And <code>heappop!</code> swaps the first element with the last, calls <code>sift!</code> on everything but the last element, then runs <code>vector-pop</code> to return the last element and shorten the vector.</p>

<pre>(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">heappop!</span> (heap-vector last predicate)
  (swap! heap-vector 0 last)
  (sift! heap-vector 0 (- last 1) predicate)
  (vector-pop heap-vector))</pre>

<p>Which just leaves the <code>sift!</code> procedure, and its utility functions.</p>

<pre>(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">sift!</span> (heap-vector start end predicate)
  (<span style=\"color: #a020f0;\">loop</span> with ix = start
     until (&gt; (+ 1 (* 2 ix)) end)
     while (<span style=\"color: #a020f0;\">loop</span> for child-ix in (heap-children-descending heap-vector ix end predicate)
              when child-ix
              do (<span style=\"color: #a020f0;\">unless</span> (or (compare heap-vector ix child-ix predicate))
                   (swap! heap-vector ix child-ix)
                   (setf ix child-ix)
                   (<span style=\"color: #a020f0;\">return</span> t))
              finally (<span style=\"color: #a020f0;\">return</span> nil))))</pre>

<p>It takes a <code>start</code> parameter, since the pseudo-code did the same, but I didn't find myself calling it with anything other than <code>0</code>, so maybe that was a bit of a waste. To be fair, that pseudo also uses <code>sift!</code> as part of insertion, rather than doing the more straight-forward parent comparison, which might explain the difference. This is literally the most impenetrable part of this program, and it's crucial, because unless you understand this you won't get how the entire system produces sorted output. I'll take it slow, just in case. Feel free to stop reading here if you know this already.</p>

<pre>  ...
  (<span style=\"color: #a020f0;\">loop</span> with ix = start
  ...</pre>

<p>We're starting at the beginning</p>

<pre>     ...
     until (&gt; (+ 1 (* 2 ix)) end)
     while [something-huge]
     ...</pre>

<p>and going either until we get to the end of the heap, or until we get to the point where no more calls to <code>swap!</code> are needed. That makes sense because if we don't need to <code>swap!</code> further, and we started with a heap, we know that the rest of it already satisfies the Heap Property and therefore doesn't need to be heaped again. If we've gotten to the end, then we know that we just tried to <code>sift!</code> the smallest element in the heap, which is why it's at the bottom.</p>

<pre>     while (<span style=\"color: #a020f0;\">loop</span> for child-ix in (heap-children-descending heap-vector ix end predicate)
     ...</pre>

<p>That's going to do something to each <code>child-ix</code> in the result of <code>heap-children-descending</code> function.</p>

<pre>(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">heap-children-descending</span> (heap-vector ix bounds predicate)
  (<span style=\"color: #a020f0;\">let</span> ((child-l (+ 1 (* 2 ix)))
        (child-r (+ 2 (* 2 ix))))
    (<span style=\"color: #a020f0;\">cond</span> ((&gt; child-l bounds) nil)
          ((&gt; child-r bounds) (list child-l nil))
          (t (<span style=\"color: #a020f0;\">if</span> (compare heap-vector child-l child-r predicate) 
                 (list child-l child-r)
                 (list child-r child-l))))))</pre>

<p>This isn't in the pseudocode either; I ended up deciding to <code>compare</code> the children for size so that the parent <code>compare</code>s against the greatest first so that the Heap Property is more easily preserved. The return value is a list of children in descending order, and we also handle the case where this particular parent only has one child. Oh, also, <code>compare</code> is just a utility function that helps me compare two <code>array</code> elements by index</p>

<pre>(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">compare</span> (arr ix-a ix-b <span style=\"color: #228b22;\">&amp;optional</span> (predicate #'&gt;))
  (funcall predicate (aref arr ix-a) (aref arr ix-b)))</pre>

<p>Now then.</p>

<pre>              ...
              when child-ix
              do (<span style=\"color: #a020f0;\">unless</span> (or (compare heap-vector ix child-ix predicate))
                   (swap! heap-vector ix child-ix)
                   (setf ix child-ix)
                   (<span style=\"color: #a020f0;\">return</span> t))
              finally (<span style=\"color: #a020f0;\">return</span> nil))))
              ...</pre>

<p>If there are any children, <code>compare</code> the parent to them in descending order. If one of the children is bigger than the parent, <code>swap!</code> them, set <code>ix</code> to the index of that child (which now contains our new parent), and <code>return</code> <code>t</code> (this tells the upper <code>loop</code> to keep comparing, since we now need to compare that new <code>ix</code> to <i>its</i> children). Otherwise, <code>return</code> <code>nil</code> to signal that we've achieved a new heap.</p>

<p>And that's that. As long as the Heap Property is respected, the next item by whatever predicate was passed is always one quasi-efficient <code>heappop!</code> away, and as a result, a call to <code>heapsort-lazy</code> never does any more work than it absolutely needs to while still providing flexible sorted output.</p>

<p><i>I</i> learned a lot implementing this. Hopefully the write-up does something for someone else out there too.</p>


<hr />
<h5>Footnotes</h5>
<p>1 - <a href=\"#note-Thu-May-02-214518EDT-2013\" name=\"foot-Thu-May-02-214518EDT-2013\">[back]</a> - I don't incidentally, both the Python and Common Lisp code I'm going to show you use <a href=\"http://wiki.python.org/moin/Generators\">generators</a>. That is, side-effect-dependent lazy sequences with the restriction that you can only traverse them once, mostly as a result of those side-effects.</p>
<p>2 - <a href=\"#note-Thu-May-02-214521EDT-2013\" name=\"foot-Thu-May-02-214521EDT-2013\">[back]</a> - I've been saying \"heapsort\", though that's strictly speaking not the case. What you need for a lazy* sort is an intermediate structure that

<ul>
  <li>is easier create than a full sort in the general case</li>
  <li>has some property which makes it useful than an arbitrary collection when it comes to finding <code>next</code></li>
</ul>

A heap does both of those, and it's fairly easy to understand, so I picked it, but it's not necessarily the only or best approach. I just don't know any other ones.</p>

<p>3 - <a href=\"#note-Thu-May-02-214622EDT-2013\" name=\"foot-Thu-May-02-214622EDT-2013\">[back]</a> - Graphic Design degree, remember? They didn't offer Data Structures 101, as much as I would have enjoyed that much more than Art History for Consumers.</p>

<p>4 - <a href=\"#note-Thu-May-02-214631EDT-2013\" name=\"foot-Thu-May-02-214631EDT-2013\">[back]</a> - As a note, Python <i>doesn't</i> seem to. The standard <code><a href=\"http://docs.python.org/2/library/heapq.html\">heapq</a></code> doesn't provide <a href=\"http://code.activestate.com/lists/python-list/162387/\">a way of pulling out a <code>key</code> from the sorted structures, <i>or</i> a way change out predicates</a>. The <a href=\"http://stackoverflow.com/a/14189741/190887\">standard Python wisdom</a> seems to be pulling keys out yourself, storing your actual values in a way indexable by said keys, then sorting the keys instead.</p>
"))
((5202 3723 609585000) :INSERT (131 :POSTED 3576456000))
((5202 3723 609588000) :INSERT (131 :TAG :ALMOST-LITERATE-PROGRAMMING))
((5202 3723 609589000) :INSERT (131 :TAG :COMMON-LISP))
((5202 3723 609591000) :INSERT (131 :TAG :IDEA-PEELING))
((5202 3723 609593000) :INSERT (131 :TAG :PYTHON))
((5202 3723 609952000) :INSERT (132 :TITLE "Code Retreat - Sudoku"))
((5202 3723 609957000) :INSERT (132 :FILE "sudoku.html"))
((5202 3723 609961000) :INSERT (132 :EDITED 3610022331))
((5202 3723 609963000) :INSERT
 (132 :BODY "<p>Dammit, Dann, this is getting to be a habit.</p>

<p>I haven't gotten to the bottom of the squares problem yet, and yesterday was the monthly Toronto Code Retreat. Which means my time is effectively up thanks to this new problem we're being handed. I'm sure there's a canonical, three-line solution out there somewhere, but I didn't want to read up on it until after the event, so I'm thinking at this from first principles. As a result, it won't be pretty or optimized.</p>

<h3>The Problem</h3>

<p>Near as I can tell, <a href=\"http://en.wikipedia.org/wiki/Sudoku\">Sudoku</a> is a Set problem. This isn't how I first heard the rules described, but it fits. A solved Sudoku board is one where</p>

<ul>
  <li>each number is filled in</li>
  <li>each row is a set</li>
  <li>each column is a set</li>
  <li>each disjoint <code>nxn</code> square is a set (where <code>n</code> is the square root of the board size)</li>
</ul>

<p>we'll call this \"The Sudoku Property\"</p>

<p>Now there's actually two problems; one is generating boards and one is solving boards. Solving seems to be pretty straightforward:</p>

<ol>
  <li>take a board</li>
  <li>optionally, fill in all obvious squares until there are no more (an obvious square is one where only one legal move exists)</li>
  <li>for each blank square, try each possibility</li>
</ol>

<p>If it can't be done, you've got an unsolvable board. If it can, return the first solution you find<a href=\"#foot-Wed-May-22-155922EDT-2013\" name=\"note-Wed-May-22-155922EDT-2013\">[1]</a>. That seems to be that.</p>

<p>Generating is a bit of a different story. The naive solution is to generate a bunch of numbers and place them onto a board such that they respect TSP. Essentially, we're solving an empty board by starting with some random seeds. It really seems like this should work, but I can't convince myself that placing a number in an empty square while respecting the TSP will <i>certainly</i> avoid generating impossible boards. That is, an otherwise valid board which contains one or more empty squares whose set of possibilities is the empty set. It might be a better idea to start with nine sets and perform some sort transformation on it until we get something that respects TSP, rather than building it up piecemeal.</p>

<h3>The Event</h3>

<p>We did this pretty casually. The problem as presented was to solve boards generated by <a href=\"http://www.sudoku-solutions.com/\">this site</a>, and not bother with the generation side of things. In practice, no group ever got to the point of a general brute-force Sudoku solver. Three groups managed to solve obvious boards (ones where it's possible to find a complete solution without guessing), and one managed to hook together a <a href=\"http://en.wikipedia.org/wiki/Bogosort\">bogosort</a>-style solution that could, in principle, if we left it running for a few years, solve an arbitrary 9x9 Sudoku board.</p>

<p>We went the usual three sessions, and I did my usual and used a different language each time. First up, we had a mostly-ideation session in which we ostensibly worked in Python. The only snippet I've got left over from that is</p>

<pre><span style=\"color: #a020f0;\">def</span> <span style=\"color: #0000ff;\">makeBoard</span>(regionWidth):
    side = regionWidth * regionWidth
    <span style=\"color: #a020f0;\">return</span> [[0 <span style=\"color: #a020f0;\">for</span> x <span style=\"color: #a020f0;\">in</span> <span style=\"color: #7a378b;\">xrange</span>(side)] <span style=\"color: #a020f0;\">for</span> y <span style=\"color: #a020f0;\">in</span> <span style=\"color: #7a378b;\">xrange</span>(side)]

<span style=\"color: #a0522d;\">sample</span> = [[0, 7, 1, 4, 0, 0, 0, 0, 5],
          [0, 0, 0, 0, 5, 0, 0, 8, 0],
          [0, 0, 3, 9, 0, 7, 6, 0, 0],
          [0, 0, 0, 0, 0, 1, 0, 0, 0],
          [0, 9, 0, 8, 0, 6, 0, 0, 3],
          [0, 0, 0, 0, 0, 0, 8, 2, 0],
          [0, 6, 0, 0, 4, 0, 7, 0, 8],
          [3, 0, 0, 0, 0, 0, 0, 9, 0],
          [0, 0, 0, 0, 8, 5, 0, 0, 0]]

<span style=\"color: #a020f0;\">def</span> <span style=\"color: #0000ff;\">placements</span>(board, n):
    <span style=\"color: #8b2252;\">\"\"\"Return list of coords where `n` is a legal placement.\"\"\"</span>
    emptyRows = [i <span style=\"color: #a020f0;\">for</span> i, row <span style=\"color: #a020f0;\">in</span> <span style=\"color: #7a378b;\">enumerate</span>(board) <span style=\"color: #a020f0;\">if</span> <span style=\"color: #a020f0;\">not</span> n <span style=\"color: #a020f0;\">in</span> row]
    res = []
    <span style=\"color: #a020f0;\">for</span> i <span style=\"color: #a020f0;\">in</span> emptyRows:
        <span style=\"color: #a020f0;\">for</span> j, col <span style=\"color: #a020f0;\">in</span> <span style=\"color: #7a378b;\">enumerate</span>(board[i]):
            <span style=\"color: #a020f0;\">if</span> col == 0: res.append((i, j))
    <span style=\"color: #a020f0;\">return</span> res</pre>

<p>The idea would be to get a function which takes a <code>board</code> and an <code>n</code>, and finds out what the possible placements of <code>n</code> are. I'm not entirely sure how we would have proceeded if this ended up working; I think we'd have to hope really hard that at least one of the digits has only one possible position, which doesn't sound terribly likely in general. The fully implemented version of that function would also check for column and block presences, rather than just filtering rows poorly.</p>

<p>For round two, I got into a group of three with two people who wanted to see Haskell in action. So, after some type-system snafus, we did this:</p>

<pre><span style=\"color: #a020f0;\">module</span> <span style=\"color: #228b22;\">Sudoku</span> <span style=\"color: #a020f0;\">where</span>

<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Data.Set</span> (<span style=\"color: #228b22;\">Set</span>(<span style=\"color: #a0522d;\">..</span>), fromList, union, difference)
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Data.List</span> (genericIndex, genericTake)

<span style=\"color: #a020f0;\">type</span> <span style=\"color: #228b22;\">Board</span> <span style=\"color: #a0522d;\">=</span> [[<span style=\"color: #228b22;\">Int</span>]]

<span style=\"color: #0000ff;\">sample</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">Board</span>
<span style=\"color: #0000ff;\">sample</span> <span style=\"color: #a0522d;\">=</span> [[0, 7, 1, 4, 0, 0, 0, 0, 5],
          [0, 0, 0, 0, 5, 0, 0, 8, 0],
          [0, 0, 3, 9, 0, 7, 6, 0, 0],
          [0, 0, 0, 0, 0, 1, 0, 0, 0],
          [0, 9, 0, 8, 0, 6, 0, 0, 3],
          [0, 0, 0, 0, 0, 0, 8, 2, 0],
          [0, 6, 0, 0, 4, 0, 7, 0, 8],
          [3, 0, 0, 0, 0, 0, 0, 9, 0],
          [0, 0, 0, 0, 8, 5, 0, 0, 0]]

<span style=\"color: #0000ff;\">row</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">Board</span> <span style=\"color: #a0522d;\">-&gt;</span> (<span style=\"color: #228b22;\">Int</span>, <span style=\"color: #228b22;\">Int</span>) <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Set</span> <span style=\"color: #228b22;\">Int</span>
<span style=\"color: #0000ff;\">row</span> board (x, y) <span style=\"color: #a0522d;\">=</span> fromList <span style=\"color: #a0522d;\">$</span> genericIndex board y

<span style=\"color: #0000ff;\">col</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">Board</span> <span style=\"color: #a0522d;\">-&gt;</span> (<span style=\"color: #228b22;\">Int</span>, <span style=\"color: #228b22;\">Int</span>) <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Set</span> <span style=\"color: #228b22;\">Int</span>
<span style=\"color: #0000ff;\">col</span> board (x, y) <span style=\"color: #a0522d;\">=</span> fromList <span style=\"color: #a0522d;\">$</span> map (flip genericIndex x) board

<span style=\"color: #0000ff;\">origin</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">Int</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Int</span>
<span style=\"color: #b22222;\">-- </span><span style=\"color: #b22222;\">origin n = 3 * fromIntegral $ floor $ n / 3
</span><span style=\"color: #0000ff;\">origin</span> n
  <span style=\"color: #a0522d;\">|</span> 3 <span style=\"color: #a0522d;\">&gt;</span> n <span style=\"color: #a0522d;\">=</span> 0
  <span style=\"color: #a0522d;\">|</span> 6 <span style=\"color: #a0522d;\">&gt;</span> n <span style=\"color: #a0522d;\">=</span> 3
  <span style=\"color: #a0522d;\">|</span> otherwise <span style=\"color: #a0522d;\">=</span> 6

<span style=\"color: #0000ff;\">block</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">Board</span> <span style=\"color: #a0522d;\">-&gt;</span> (<span style=\"color: #228b22;\">Int</span>, <span style=\"color: #228b22;\">Int</span>) <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Set</span> <span style=\"color: #228b22;\">Int</span>
<span style=\"color: #0000ff;\">block</span> board (x, y) <span style=\"color: #a0522d;\">=</span> fromList <span style=\"color: #a0522d;\">.</span> concat <span style=\"color: #a0522d;\">.</span> map (genericTake blockSize <span style=\"color: #a0522d;\">.</span> drop ox) <span style=\"color: #a0522d;\">$</span> genericTake blockSize <span style=\"color: #a0522d;\">$</span> drop oy board
  <span style=\"color: #a020f0;\">where</span> blockSize <span style=\"color: #a0522d;\">=</span> 3
        ox <span style=\"color: #a0522d;\">=</span> origin x
        oy <span style=\"color: #a0522d;\">=</span> origin y
        
<span style=\"color: #0000ff;\">possibilities</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">Board</span> <span style=\"color: #a0522d;\">-&gt;</span> (<span style=\"color: #228b22;\">Int</span>, <span style=\"color: #228b22;\">Int</span>) <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Set</span> <span style=\"color: #228b22;\">Int</span>
<span style=\"color: #0000ff;\">possibilities</span> board (x, y) <span style=\"color: #a0522d;\">=</span> difference (fromList [1<span style=\"color: #a0522d;\">..</span>9]) b
  <span style=\"color: #a020f0;\">where</span> a <span style=\"color: #a0522d;\">=</span> union (row board (x, y)) <span style=\"color: #a0522d;\">$</span> col board (x, y)
        b <span style=\"color: #a0522d;\">=</span> union a <span style=\"color: #a0522d;\">$</span> block board (x, y)</pre>

<p>...which is also ugly as fuck. Let me zoom into two particular pieces for you</p>

<pre><span style=\"color: #0000ff;\">origin</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">Int</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Int</span>
<span style=\"color: #b22222;\">-- </span><span style=\"color: #b22222;\">origin n = 3 * fromIntegral $ floor $ n / 3
</span><span style=\"color: #0000ff;\">origin</span> n
  <span style=\"color: #a0522d;\">|</span> 3 <span style=\"color: #a0522d;\">&gt;</span> n <span style=\"color: #a0522d;\">=</span> 0
  <span style=\"color: #a0522d;\">|</span> 6 <span style=\"color: #a0522d;\">&gt;</span> n <span style=\"color: #a0522d;\">=</span> 3
  <span style=\"color: #a0522d;\">|</span> otherwise <span style=\"color: #a0522d;\">=</span> 6</pre>

<p>That commented line is what we wanted to do initially. Actually, what we wanted was just <code>blockSize * (floor $ n/blockSize)</code>, except that <code>Int</code>s apparently don't derive <code>RealFrac</code>? I don't know what the actual problem there is, and I'll likely toss the question up to SO later, but at the time, we went with the ugly, 9x9-specific, guard-based approach.</p>

<pre><span style=\"color: #0000ff;\">block</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">Board</span> <span style=\"color: #a0522d;\">-&gt;</span> (<span style=\"color: #228b22;\">Int</span>, <span style=\"color: #228b22;\">Int</span>) <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Set</span> <span style=\"color: #228b22;\">Int</span>
<span style=\"color: #0000ff;\">block</span> board (x, y) <span style=\"color: #a0522d;\">=</span> fromList <span style=\"color: #a0522d;\">.</span> concat <span style=\"color: #a0522d;\">.</span> map (genericTake blockSize <span style=\"color: #a0522d;\">.</span> drop ox) <span style=\"color: #a0522d;\">$</span> genericTake blockSize <span style=\"color: #a0522d;\">$</span> drop oy board
  <span style=\"color: #a020f0;\">where</span> blockSize <span style=\"color: #a0522d;\">=</span> 3
        ox <span style=\"color: #a0522d;\">=</span> origin x
        oy <span style=\"color: #a0522d;\">=</span> origin y</pre>

<p>Note that <code>blockSize</code> is specified as 3. Which means that this function is <i>also</i> specific to 9x9 Sudoku boards. We went this route for the same reasons as before; the type system doesn't like it when you try to use <code>fromIntegral . sqrt $ length board</code> for some reason, and we didn't have enough time left to figure out what type annotations we'd need to convince <code>GHCi</code> that yes, this is really what we mean.</p>

<p>We also didn't really have enough time in one 40-minute session to write <code>solve</code>, <i>and</i> chat about Haskell <i>and</i> try to form theories about the errors we were seeing, but it's a reasonable-if-rushed implementation of the approach I was assuming we'd use.</p>

<p>The last session, my partner and I decided to have some fun with JavaScript. Except neither of us had <code>node</code> installed standalone, so we ended up using the Chromium JS console. Once we loaded up <a href=\"http://underscorejs.org/\">underscore</a>, things went much faster than expected. We managed to put together a solution that works on any valid board size, that could solve boards where it doesn't need to guess.</p>

<pre><span style=\"color: #a020f0;\">var</span> <span style=\"color: #a0522d;\">sample4x4</span> = [[1, 0, 3, 0],
                 [0, 4, 0, 2],
                 [0, 3, 4 ,0],
                 [4, 0, 2, 3]];

<span style=\"color: #a020f0;\">var</span> <span style=\"color: #a0522d;\">sample9x9</span> = [[0, 7, 1, 4, 0, 0, 0, 0, 5],
                 [0, 0, 0, 0, 5, 0, 0, 8, 0],
                 [0, 0, 3, 9, 0, 7, 6, 0, 0],
                 [0, 0, 0, 0, 0, 1, 0, 0, 0],
                 [0, 9, 0, 8, 0, 6, 0, 0, 3],
                 [0, 0, 0, 0, 0, 0, 8, 2, 0],
                 [0, 6, 0, 0, 4, 0, 7, 0, 8],
                 [3, 0, 0, 0, 0, 0, 0, 9, 0],
                 [0, 0, 0, 0, 8, 5, 0, 0, 0]];

<span style=\"color: #a020f0;\">function</span> <span style=\"color: #0000ff;\">possibilities</span> (<span style=\"color: #a0522d;\">board</span>, <span style=\"color: #a0522d;\">x</span>, <span style=\"color: #a0522d;\">y</span>) { 
    <span style=\"color: #a020f0;\">return</span> _.difference(_.range(1, _.size(board[0]) + 1), 
                        row(board, x, y),
                        col(board, x, y),
                        block(board, x, y))
}

<span style=\"color: #a020f0;\">function</span> <span style=\"color: #0000ff;\">row</span>(<span style=\"color: #a0522d;\">board</span>, <span style=\"color: #a0522d;\">x</span>, <span style=\"color: #a0522d;\">y</span>) {
    <span style=\"color: #a020f0;\">return</span> board[y];
}

<span style=\"color: #a020f0;\">function</span> <span style=\"color: #0000ff;\">col</span>(<span style=\"color: #a0522d;\">board</span>, <span style=\"color: #a0522d;\">x</span>, <span style=\"color: #a0522d;\">y</span>) {
    <span style=\"color: #a020f0;\">return</span> _.map(board, <span style=\"color: #a020f0;\">function</span> (<span style=\"color: #a0522d;\">row</span>) { row[x] })
}

<span style=\"color: #a020f0;\">function</span> <span style=\"color: #0000ff;\">block</span>(<span style=\"color: #a0522d;\">board</span>, <span style=\"color: #a0522d;\">x</span>, <span style=\"color: #a0522d;\">y</span>) {
    <span style=\"color: #a020f0;\">var</span> <span style=\"color: #a0522d;\">blockSize</span> = Math.sqrt(_.size(board[0]))
    <span style=\"color: #a020f0;\">var</span> <span style=\"color: #a0522d;\">origin</span> = <span style=\"color: #a020f0;\">function</span> (<span style=\"color: #a0522d;\">n</span>) { 
        <span style=\"color: #a020f0;\">return</span> blockSize * Math.floor(n / blockSize)
    }
    <span style=\"color: #a020f0;\">var</span> <span style=\"color: #a0522d;\">relevantRows</span> = _.take(_.drop(board, origin(y)), blockSize);
    <span style=\"color: #a020f0;\">return</span> _.reduce(relevantRows, <span style=\"color: #a020f0;\">function</span> (<span style=\"color: #a0522d;\">memo</span>, <span style=\"color: #a0522d;\">row</span>) { 
        <span style=\"color: #a020f0;\">return</span> _.union(memo, _.take(_.drop(row, origin(y)), blockSize)) 
    }, []);
}

<span style=\"color: #a020f0;\">function</span> <span style=\"color: #0000ff;\">isFilled</span> (<span style=\"color: #a0522d;\">board</span>) { 
    <span style=\"color: #a020f0;\">return</span> _.every(board, <span style=\"color: #a020f0;\">function</span> (<span style=\"color: #a0522d;\">row</span>) { _.every(row, <span style=\"color: #a020f0;\">function</span> (val) { val != 0; })})
}

<span style=\"color: #a020f0;\">function</span> <span style=\"color: #0000ff;\">solve</span>(<span style=\"color: #a0522d;\">board</span>) {
    <span style=\"color: #a020f0;\">if</span> (isFilled(board)) {
        <span style=\"color: #a020f0;\">return</span> board;
    } <span style=\"color: #a020f0;\">else</span> {
        <span style=\"color: #a020f0;\">return</span> solve(_.map(board, <span style=\"color: #a020f0;\">function</span> (<span style=\"color: #a0522d;\">row</span>, <span style=\"color: #a0522d;\">y</span>) { 
            <span style=\"color: #a020f0;\">return</span> _.map(row, <span style=\"color: #a020f0;\">function</span> (<span style=\"color: #a0522d;\">val</span>, <span style=\"color: #a0522d;\">x</span>) { 
                <span style=\"color: #a020f0;\">var</span> <span style=\"color: #a0522d;\">poss</span> = possibilities(board, x, y);
                <span style=\"color: #a020f0;\">if</span> (val != 0) {
                    <span style=\"color: #a020f0;\">return</span> val;
                } <span style=\"color: #a020f0;\">else</span> <span style=\"color: #a020f0;\">if</span> ((val == 0) &amp;&amp; (_.size(poss) == 1)) {
                    <span style=\"color: #a020f0;\">return</span> poss[0];
                } <span style=\"color: #a020f0;\">else</span> {
                    console.log(<span style=\"color: #8b2252;\">\"UNSOLVED\"</span>);
                    <span style=\"color: #a020f0;\">return</span> 0;
                }
            })
        }));
    }
}</pre>

<p>Easily the most annoying thing about writing quickly in JS after having gotten so used to the functional paradigm is having to return things explicitly. That bugs the crap out of me over in Python-land too, but at least Python makes up for it by saving you from lines like this</p>

<pre>                }
            })
        }));
    }
}</pre>

<p>I could do the Lisp-esque thing and start writing</p>

<pre>                }})}));}}</pre>

<p>but doubt anyone would appreciate that.</p>

<h3>Further Reading</h3>

<p>The Sudoku situation isn't quite as solved as I assumed before reading up on it. The <a href=\"http://rosettacode.org/wiki/Sudoku\">appropriate Rosetta Code page</a> doesn't have any solutions that leave me gobsmacked by elegance the way that <a href=\"http://rosettacode.org/wiki/Conway%27s_Game_of_Life#Clojure\">the Clojure Game of Life</a> did. Though <a href=\"http://rosettacode.org/wiki/Sudoku#Prolog\">the Prolog approach</a> looks quite interesting. Also, the Haskellers apparently look at Sudoku-solver-writing as a hobby, so it has its own <a href=\"http://www.haskell.org/haskellwiki/Sudoku\">page over at the Haskell wiki</a>. \"Elegant\" isn't something I'd say about any of these, but that's probably because my Math level isn't high enough.</p>

<p>The last note I'll leave you on is that brute-forcing apparently isn't the best solution here. Sudoku is an instance of something called the <a href=\"http://en.wikipedia.org/wiki/Exact_cover\">Exact cover problem</a>, and a Marlboro College student named Sam Auciello wrote an <a href=\"http://cs.marlboro.edu/courses/fall2012/dedhour/sudoku\">implementation of that solution</a> in Python (links to code files at the bottom of that page page). I haven't quite gotten my head around this one yet, and that's probably what I'll be doing with my next few chunklets of spare time.</p>

<hr />
<h5>Footnotes</h5>
<p>1 - <a href=\"#note-Wed-May-22-155922EDT-2013\" name=\"foot-Wed-May-22-155922EDT-2013\">[back]</a> -  (If you're doing this functionally and recursively, it seems like it would be fairly straight-forward. Side-effects complicate things slightly since you have to copy your board out at each decision step, or devise some other method of backtracking)</p>
"))
((5202 3723 610118000) :INSERT (132 :POSTED 3578184000))
((5202 3723 610120000) :INSERT (132 :TAG :CODE-RETREAT-NOTES))
((5202 3723 610122000) :INSERT (132 :TAG :HASKELL))
((5202 3723 610124000) :INSERT (132 :TAG :JAVASCRIPT))
((5202 3723 610125000) :INSERT (132 :TAG :PYTHON))
((5202 3723 610501000) :INSERT (133 :TITLE "Truthy and Falsy vs Explicit"))
((5202 3723 610506000) :INSERT (133 :FILE "truthy-and-falsy.html"))
((5202 3723 610507000) :INSERT (133 :EDITED 3610022331))
((5202 3723 610512000) :INSERT
 (133 :BODY
  "<p>I've been thinking about this for a bit, and I'm honestly not sure I can understand it while it's in my head. You know what time it is.</p>

<p>In general, having Falsy things makes it easier to use the <code>if</code> statement, and not having them means getting more explicit code. With that in mind, here's the state of play across the spectrum.</p>

<h3>Haskell</h3>

<p>doesn't take your shit. If you want to use <code>if</code> instead of pattern matching or guards, you're damn well going to pass it a <code><span style=\"color: #228b22;\">Bool</span></code>.</p> 

<pre><span style=\"color: #228b22;\">GHCi</span>, version 7<span style=\"color: #a0522d;\">.</span>4<span style=\"color: #a0522d;\">.</span>1<span style=\"color: #228b22;\">:</span> http<span style=\"color: #228b22;\">://</span>www<span style=\"color: #a0522d;\">.</span>haskell<span style=\"color: #a0522d;\">.</span>org<span style=\"color: #a0522d;\">/</span>ghc<span style=\"color: #a0522d;\">/</span>  <span style=\"color: #228b22;\">:?</span> for help
<span style=\"color: #228b22;\">Loading</span> package ghc<span style=\"color: #a0522d;\">-</span>prim <span style=\"color: #a0522d;\">...</span> linking <span style=\"color: #a0522d;\">...</span> done<span style=\"color: #a0522d;\">.</span>
<span style=\"color: #228b22;\">Loading</span> package integer<span style=\"color: #a0522d;\">-</span>gmp <span style=\"color: #a0522d;\">...</span> linking <span style=\"color: #a0522d;\">...</span> done<span style=\"color: #a0522d;\">.</span>
<span style=\"color: #228b22;\">Loading</span> package base <span style=\"color: #a0522d;\">...</span> linking <span style=\"color: #a0522d;\">...</span> done<span style=\"color: #a0522d;\">.</span>
<span style=\"color: #228b22;\">Prelude</span><span style=\"color: #0000ff;\">&gt;</span> <span style=\"color: #a020f0;\">let</span> yayNay val <span style=\"color: #a0522d;\">=</span> <span style=\"color: #a020f0;\">if</span> val <span style=\"color: #a020f0;\">then</span> <span style=\"color: #8b2252;\">\"Yay!\"</span> <span style=\"color: #a020f0;\">else</span> <span style=\"color: #8b2252;\">\"Nay!\"</span>
<span style=\"color: #228b22;\">Prelude</span><span style=\"color: #0000ff;\">&gt;</span> yayNay <span style=\"color: #228b22;\">False</span>
<span style=\"color: #8b2252;\">\"Nay!\"</span>
<span style=\"color: #228b22;\">Prelude</span><span style=\"color: #0000ff;\">&gt;</span> yayNay <span style=\"color: #228b22;\">[]</span>

<span style=\"color: #a0522d;\">&lt;</span>interactive<span style=\"color: #a0522d;\">&gt;:</span>4<span style=\"color: #228b22;\">:</span>8<span style=\"color: #228b22;\">:</span>
    <span style=\"color: #228b22;\">Couldn't</span> match expected <span style=\"color: #a020f0;\">type</span> `<span style=\"color: #228b22;\">Bool'</span> with actual <span style=\"color: #a020f0;\">type</span> `[a0]'
    <span style=\"color: #228b22;\">In</span> the first argument <span style=\"color: #a020f0;\">of</span> `yayNay', namely `<span style=\"color: #228b22;\">[]</span>'
    <span style=\"color: #228b22;\">In</span> the expression<span style=\"color: #228b22;\">:</span> yayNay <span style=\"color: #228b22;\">[]</span>
    <span style=\"color: #228b22;\">In</span> an equation for `it'<span style=\"color: #228b22;\">:</span> it <span style=\"color: #a0522d;\">=</span> yayNay <span style=\"color: #228b22;\">[]</span>
<span style=\"color: #228b22;\">Prelude</span><span style=\"color: #0000ff;\">&gt;</span> yayNay <span style=\"color: #8b2252;\">\"\"</span>

<span style=\"color: #a0522d;\">&lt;</span>interactive<span style=\"color: #a0522d;\">&gt;:</span>5<span style=\"color: #228b22;\">:</span>8<span style=\"color: #228b22;\">:</span>
    <span style=\"color: #228b22;\">Couldn't</span> match expected <span style=\"color: #a020f0;\">type</span> `<span style=\"color: #228b22;\">Bool'</span> with actual <span style=\"color: #a020f0;\">type</span> `[<span style=\"color: #228b22;\">Char</span>]'
    <span style=\"color: #228b22;\">In</span> the first argument <span style=\"color: #a020f0;\">of</span> `yayNay', namely `<span style=\"color: #8b2252;\">\"\"</span>'
    <span style=\"color: #228b22;\">In</span> the expression<span style=\"color: #228b22;\">:</span> yayNay <span style=\"color: #8b2252;\">\"\"</span>
    <span style=\"color: #228b22;\">In</span> an equation for `it'<span style=\"color: #228b22;\">:</span> it <span style=\"color: #a0522d;\">=</span> yayNay <span style=\"color: #8b2252;\">\"\"</span>
<span style=\"color: #228b22;\">Prelude</span><span style=\"color: #0000ff;\">&gt;</span> yayNay 0

<span style=\"color: #a0522d;\">&lt;</span>interactive<span style=\"color: #a0522d;\">&gt;:</span>6<span style=\"color: #228b22;\">:</span>8<span style=\"color: #228b22;\">:</span>
    <span style=\"color: #228b22;\">No</span> <span style=\"color: #a020f0;\">instance</span> for (<span style=\"color: #228b22;\">Num</span> <span style=\"color: #228b22;\">Bool</span>)
      arising from the literal `0'
    <span style=\"color: #228b22;\">Possible</span> fix<span style=\"color: #228b22;\">:</span> add an <span style=\"color: #a020f0;\">instance</span> declaration for (<span style=\"color: #228b22;\">Num</span> <span style=\"color: #228b22;\">Bool</span>)
    <span style=\"color: #228b22;\">In</span> the first argument <span style=\"color: #a020f0;\">of</span> `yayNay', namely `0'
    <span style=\"color: #228b22;\">In</span> the expression<span style=\"color: #228b22;\">:</span> yayNay 0
    <span style=\"color: #228b22;\">In</span> an equation for `it'<span style=\"color: #228b22;\">:</span> it <span style=\"color: #a0522d;\">=</span> yayNay 0
<span style=\"color: #228b22;\">Prelude</span><span style=\"color: #0000ff;\">&gt;</span> </pre>

<p>If you want to check whether something is <code>not empty</code> rather than merely <code>False</code>, check for <i>that</i>.</p>

<pre><span style=\"color: #0000ff;\">empty</span> <span style=\"color: #228b22;\">[]</span> <span style=\"color: #a0522d;\">=</span> <span style=\"color: #228b22;\">True</span>
<span style=\"color: #0000ff;\">empty</span> <span style=\"color: #a020f0;\">_</span> <span style=\"color: #a0522d;\">=</span> <span style=\"color: #228b22;\">False</span></pre>

<p>or, better yet, just use pattern matching in the function you're writing instead of explicit <code>if</code></p>

<pre><span style=\"color: #0000ff;\">foo</span> <span style=\"color: #228b22;\">[]</span> <span style=\"color: #a0522d;\">=</span> handleEmpty
<span style=\"color: #0000ff;\">foo</span> (a<span style=\"color: #228b22;\">:</span>b<span style=\"color: #228b22;\">:</span>rest) <span style=\"color: #a0522d;\">=</span> handleTwo
<span style=\"color: #0000ff;\">foo</span> list <span style=\"color: #a0522d;\">=</span> handleN</pre>

<p>Finally, if you want to express \"this computation can fail\": be explicit about it and use a <code><span style=\"color: #228b22;\">Maybe</span></code>. Then handle the <code><span style=\"color: #228b22;\">Nothing</span></code> case, whether with a <code><span style=\"color: #a0522d;\">&gt;&gt;=</span></code> or a <code><span style=\"color: #a020f0;\">case</span></code> or a <code><span style=\"color: #a020f0;\">do</span></code>. Haskell likes being explicit.</p>

<h3>Python</h3>

<p>At the entirely other end of the spectrum is Python. It'll take your shit, interpreting <code>if</code> in a Pythonic™© way to mean the appropriate empty check in some contexts.</p>

<pre>&gt;&gt;&gt; <span style=\"color: #a020f0;\">def</span> <span style=\"color: #0000ff;\">yayNay</span>(val):
...     <span style=\"color: #a020f0;\">if</span> val:
...             <span style=\"color: #a020f0;\">return</span> <span style=\"color: #8b2252;\">\"Yay!\"</span>
...     <span style=\"color: #a020f0;\">else</span>:
...             <span style=\"color: #a020f0;\">return</span> <span style=\"color: #8b2252;\">\"Nay!\"</span>
... 
&gt;&gt;&gt; yayNay(<span style=\"color: #a020f0;\">False</span>)
<span style=\"color: #8b2252;\">'Nay!'</span>
&gt;&gt;&gt; yayNay([])
<span style=\"color: #8b2252;\">'Nay!'</span>
&gt;&gt;&gt; yayNay({})
<span style=\"color: #8b2252;\">'Nay!'</span>
&gt;&gt;&gt; yayNay(<span style=\"color: #8b2252;\">\"\"</span>)
<span style=\"color: #8b2252;\">'Nay!'</span>
&gt;&gt;&gt; yayNay(()) <span style=\"color: #b22222;\">## the empty tuple
</span><span style=\"color: #8b2252;\">'Nay!'</span>
&gt;&gt;&gt; yayNay(<span style=\"color: #008b8b;\">None</span>)
<span style=\"color: #8b2252;\">'Nay!'</span>
&gt;&gt;&gt; yayNay(0)
<span style=\"color: #8b2252;\">'Nay!'</span>
&gt;&gt;&gt; </pre>

<p>I'm not sure how to feel about that. On the one hand, yes, empty checks are easier. On the other, empty checks usually aren't what you actually want<a href=\"#foot-Fri-May-24-141347EDT-2013\" name=\"note-Fri-May-24-141347EDT-2013\">[1]</a>, and I can't see another benefit of doing things this way. I also don't really understand why <code>[]</code> and <code>0</code> should be Falsy, but <code>[0]</code> should be Truthy. Also, it's not quite as simple as \"Empty values should be Falsy\". Because there are classes that are in the standard library for which this behavior would also make sense<a href=\"#foot-Fri-May-24-141352EDT-2013\" name=\"note-Fri-May-24-141352EDT-2013\">[2]</a>, but that lack it.</p>

<pre>&gt;&gt;&gt; <span style=\"color: #a020f0;\">import</span> Queue
&gt;&gt;&gt; Queue.Queue()
&lt;Queue.Queue instance at 0x2837518&gt;
&gt;&gt;&gt; yayNay(Queue.Queue())
<span style=\"color: #8b2252;\">'Yay!'</span>
&gt;&gt;&gt; </pre>

<p>Despite those built-ins, it does seem to be possible to define your own Falsies. You can either define a <code><a href=\"http://docs.python.org/2/reference/datamodel.html#object.__nonzero__\">__nonzero__</a></code> method for your class, which should return the explicit boolean value you want it mapped to, or a <code><a href=\"http://docs.python.org/2/reference/datamodel.html#object.__len__\">__len__</a></code> method, in which case your class will be treated as Falsy if its <code>len</code> is zero.</p>

<pre>&gt;&gt;&gt; <span style=\"color: #a020f0;\">class</span> <span style=\"color: #228b22;\">Falsy</span>(<span style=\"color: #7a378b;\">object</span>):
...     <span style=\"color: #a020f0;\">def</span> <span style=\"color: #0000ff;\">__nonzero__</span>(<span style=\"color: #a020f0;\">self</span>):
...             <span style=\"color: #a020f0;\">return</span> <span style=\"color: #a020f0;\">False</span>
... 
&gt;&gt;&gt; yayNay(Falsy())
Nay!
&gt;&gt;&gt; <span style=\"color: #a020f0;\">class</span> <span style=\"color: #228b22;\">ShittyStack</span>(<span style=\"color: #7a378b;\">object</span>):
...     <span style=\"color: #a020f0;\">def</span> <span style=\"color: #0000ff;\">__init__</span>(<span style=\"color: #a020f0;\">self</span>):
...             <span style=\"color: #a020f0;\">self</span>.stack = []
...     <span style=\"color: #a020f0;\">def</span> <span style=\"color: #0000ff;\">__len__</span>(<span style=\"color: #a020f0;\">self</span>):
...             <span style=\"color: #a020f0;\">return</span> <span style=\"color: #7a378b;\">len</span>(<span style=\"color: #a020f0;\">self</span>.stack)
...     <span style=\"color: #a020f0;\">def</span> <span style=\"color: #0000ff;\">push</span>(<span style=\"color: #a020f0;\">self</span>, thing):
...             <span style=\"color: #a020f0;\">self</span>.stack.append(thing)
...     <span style=\"color: #a020f0;\">def</span> <span style=\"color: #0000ff;\">pop</span>(<span style=\"color: #a020f0;\">self</span>):
...             <span style=\"color: #a020f0;\">return</span> <span style=\"color: #a020f0;\">self</span>.stack.pop()
... 
&gt;&gt;&gt; s = ShittyStack()
&gt;&gt;&gt; yayNay(s)
Nay!
&gt;&gt;&gt; s.push(1)
&gt;&gt;&gt; yayNay(s)
Yay!</pre>

<h3>JavaScript</h3>

<p>does almost the same thing as Python, but adds <code>null</code>, <code>undefined</code> and <code>NaN</code> to the list of Falsy values, and considers empty sequences <i>other</i> than the empty string Truthy. That is,</p>

<pre>&gt;<span style=\"color: #b22222;\">// </span><span style=\"color: #b22222;\">from the Chromium prompt
</span><span style=\"color: #008b8b;\">undefined</span>
&gt; <span style=\"color: #a020f0;\">function</span> yayNay(<span style=\"color: #a0522d;\">val</span>) { <span style=\"color: #a020f0;\">if</span> (val) <span style=\"color: #a020f0;\">return</span> <span style=\"color: #8b2252;\">\"Yay!\"</span>; <span style=\"color: #a020f0;\">else</span> <span style=\"color: #a020f0;\">return</span> <span style=\"color: #8b2252;\">\"Nay!\"</span>; }
<span style=\"color: #008b8b;\">undefined</span>
&gt; yayNay(0)
<span style=\"color: #8b2252;\">\"Nay!\"</span>
&gt; yayNay([])
<span style=\"color: #8b2252;\">\"Yay!\"</span>
&gt; yayNay({})
<span style=\"color: #8b2252;\">\"Yay!\"</span>
&gt; yayNay(<span style=\"color: #008b8b;\">undefined</span>)
<span style=\"color: #8b2252;\">\"Nay!\"</span>
&gt; yayNay(<span style=\"color: #008b8b;\">null</span>)
<span style=\"color: #8b2252;\">\"Nay!\"</span>
&gt; yayNay(<span style=\"color: #8b2252;\">\"\"</span>)
<span style=\"color: #8b2252;\">\"Nay!\"</span>
&gt; yayNay(<span style=\"color: #008b8b;\">NaN</span>)
<span style=\"color: #8b2252;\">\"Nay!\"</span></pre>

<p>There are no tuples in JS, so it can't do anything there. I have no idea what the reasoning is otherwise though. I especially have no idea what would possess someone to think that making the empty array Truthy <i>and</i> the empty string Falsy, unless strings are actually implemented as linked lists underneath.</p>

<h3>Common Lisp</h3>

<p>is middle-of-the road in this respect. It has a canonical <code>t</code> and <code>nil</code> as <code>True</code>/<code>False</code>, but <code>nil</code> also pulls double-duty as the empty list.</p>

<pre><span style=\"color: #b22222;\">; </span><span style=\"color: #b22222;\">SLIME 2012-09-04
</span>CL-USER&gt; (<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">yay-nay</span> (val) (<span style=\"color: #a020f0;\">if</span> val <span style=\"color: #7a378b;\">:yay!</span> <span style=\"color: #7a378b;\">:nay!</span>))
<span style=\"color: #ff0000;\">YAY-NAY</span>
CL-USER&gt; (yay-nay 0)
<span style=\"color: #ff0000;\">:YAY!</span>
CL-USER&gt; (yay-nay (vector))
<span style=\"color: #ff0000;\">:YAY!</span>
CL-USER&gt; (yay-nay (make-hash-table))
<span style=\"color: #ff0000;\">:YAY!</span>
CL-USER&gt; (yay-nay (list))
<span style=\"color: #ff0000;\">:NAY!</span>
CL-USER&gt; (yay-nay '())
<span style=\"color: #ff0000;\">:NAY!</span>
CL-USER&gt; (yay-nay nil)
<span style=\"color: #ff0000;\">:NAY!</span>
CL-USER&gt; </pre>

<p>To a first approximation, it seems that the rationale here is \"Sequences that you're likely to interact with through recursion should be Falsy when empty\". Except that breaks down when you think about it a bit, because Common Lisp doesn't support tail call optimization either, the way that say, Scheme does.</p>

<p>Speaking of which...</p>

<h3>Scheme</h3>

<pre>CHICKEN
<span style=\"color: #cd0000;\">(</span>c<span style=\"color: #cd0000;\">)</span>2008-2011 The Chicken Team
<span style=\"color: #cd0000;\">(</span>c<span style=\"color: #cd0000;\">)</span>2000-2007 Felix L. Winkelmann
Version 4.7.0 
linux-unix-gnu-x86-64 <span style=\"color: #cd0000;\">[</span> 64bit manyargs dload ptables <span style=\"color: #cd0000;\">]</span>
compiled 2011-09-05 on gladstone.duckburg.org <span style=\"color: #cd0000;\">(</span>Linux<span style=\"color: #cd0000;\">)</span>

#<span style=\"color: #008b8b;\">;1&gt; (define (yay-nay val) (if val 'yay! 'nay!))
</span>#<span style=\"color: #008b8b;\">;2&gt; (yay-nay 0)
</span>yay!
#<span style=\"color: #008b8b;\">;3&gt; (yay-nay nil) ;; wait, fuck, that doesn't exist here
</span>
Error: unbound variable: nil

        Call history:

        &lt;syntax&gt;          <span style=\"color: #cd0000;\">(</span>yay-nay nil<span style=\"color: #cd0000;\">)</span>
        &lt;eval&gt;    <span style=\"color: #cd0000;\">(</span>yay-nay nil<span style=\"color: #cd0000;\">)</span> &lt;--
#<span style=\"color: #008b8b;\">;3&gt; (yay-nay '())
</span>yay!
#<span style=\"color: #008b8b;\">;4&gt; (yay-nay (list))
</span>yay!
#<span style=\"color: #008b8b;\">;5&gt; (yay-nay #f)
</span>nay!
#<span style=\"color: #008b8b;\">;6&gt; (yay-nay (null? (list)))
</span>yay!
#<span style=\"color: #008b8b;\">;7&gt; (yay-nay (not (list)))
</span>nay!
#<span style=\"color: #008b8b;\">;8&gt;</span></pre>

<p>Scheme, or at least <a href=\"http://www.call-cc.org/\">Chicken Scheme</a>, <i>doesn't</i> seem to treat anything but an actual <code>#f</code> as false. Which is mildly bizarre, because the recursion logic would actually make sense here.</p> 

<h3>Clojure</h3>

<p>seems to do its usual and split the difference between Common Lisp and Scheme.</p>

<pre>REPL started<span style=\"color: #b22222;\">; </span><span style=\"color: #b22222;\">server listening on localhost port 40977
</span>user=&gt; (defn yay-nay [val] (<span style=\"color: #a020f0;\">if</span> val <span style=\"color: #7a378b;\">:yay!</span> <span style=\"color: #7a378b;\">:nay!</span>))
#'user/yay-nay
user=&gt; (yay-nay 0)
<span style=\"color: #7a378b;\">:yay!</span>
user=&gt; (yay-nay [])
<span style=\"color: #7a378b;\">:yay!</span>
user=&gt; (yay-nay <span style=\"color: #8b2252;\">\"\"</span>)
<span style=\"color: #7a378b;\">:yay!</span>
user=&gt; (yay-nay (list))
<span style=\"color: #7a378b;\">:yay!</span>
user=&gt; (yay-nay '())
<span style=\"color: #7a378b;\">:yay!</span>
user=&gt; (yay-nay nil)
<span style=\"color: #7a378b;\">:nay!</span>
user=&gt; (yay-nay false)
<span style=\"color: #7a378b;\">:nay!</span>
user=&gt; </pre>

<p>That is, empty sequences are all Truthy, <code>false</code> is obviously <code>false</code>, and <code>nil</code> is a Falsy value that doesn't double as the empty list.</p>

<h3>Conclusion</h3>

<p>Hah! You thought I was going to conclude something?</p>

<h3>Non-Conclusion</h3>

<p>Why is <code>nil</code> Falsy in Clojure? Why is <code>[]</code> Truthy but <code>\"\"</code> Falsy in JavaScript? Why, if a language has already decided to support empty sequences and values as Falsy, is a sequence composed of nothing but Falsy values Truthy? Why give this treatment only to some sequences and container values?</p>

<p>I haven't a fucking clue. And I guess I'll be asking pointed questions at the various language groups I attend periodically. Each of these languages have gotten me mileage, and I'm used to doing explicit <code>empty</code> checks, so Falsy empty values don't give me any sort of concrete advantage. Anything other than the Haskell approach seems arbitrary. Though to be fair, purely functional languages don't have to deal with the idea of pointers<a href=\"#foot-Fri-May-24-141409EDT-2013\" name=\"note-Fri-May-24-141409EDT-2013\">[3]</a> which makes things easier.</p>

<p>There definitely isn't any kind of consensus on the issue, and I really wasn't expecting any, but it bothers me mightily that I can't even get my head around what the parameters of the problem are. It's not that we haven't decided whether Falsy or Explicit is better, it's that I'm not sure what factors would play into picking one over the other.</p>

<p>So much for peeling that one, I guess. I'll keep you posted if I have any more thoughts.</p>

<hr />
<h5>Footnotes</h5>
<p>1 - <a href=\"#note-Fri-May-24-141347EDT-2013\" name=\"foot-Fri-May-24-141347EDT-2013\">[back]</a> - And don't make much sense anyway since <a href=\"http://neopythonic.blogspot.ca/2009/04/tail-recursion-elimination.html\">Tail Recursion is unpythonic</a> for some odd-sounding non- or semi-reasons.</p>

<p>2 - <a href=\"#note-Fri-May-24-141352EDT-2013\" name=\"foot-Fri-May-24-141352EDT-2013\">[back]</a> - For some values of <code>make</code> and <code>sense</code>.</p>

<p>3 - <a href=\"#note-Fri-May-24-141409EDT-2013\" name=\"foot-Fri-May-24-141409EDT-2013\">[back]</a> - Or <a href=\"http://python.net/~goodger/projects/pycon/2007/idiomatic/handout.html#python-has-names\">\"names\"</a>, since Python insists on renaming things.</p>
   "))
((5202 3723 610658000) :INSERT (133 :POSTED 3578356800))
((5202 3723 610660000) :INSERT (133 :TAG :CLOJURE))
((5202 3723 610662000) :INSERT (133 :TAG :COMMON-LISP))
((5202 3723 610664000) :INSERT (133 :TAG :HASKELL))
((5202 3723 610666000) :INSERT (133 :TAG :IDEA-PEELING))
((5202 3723 610667000) :INSERT (133 :TAG :JAVASCRIPT))
((5202 3723 610669000) :INSERT (133 :TAG :PYTHON))
((5202 3723 610671000) :INSERT (133 :TAG :SCHEME))
((5202 3723 611501000) :INSERT (134 :TITLE "Sudoku Redux"))
((5202 3723 611507000) :INSERT (134 :FILE "sudoku-redux.html"))
((5202 3723 611509000) :INSERT (134 :EDITED 3610310340))
((5202 3723 611521000) :INSERT
 (134 :BODY
  "<p>I was in a particularly blah mood today, so I decided to sharpen my teeth on a problem I had half-solved from earlier. Solving Sudoku in Haskell. The code for the solution is up at <a href=\"https://github.com/Inaimathi/sudoku/blob/master/sudoku.hs\">the appropriate github</a>.</p>

<h3>Interlude</h3>

<p>Before we get to the actual code though, do you remember <a href=\"http://www.haskell.org/haskellwiki/Sudoku\">that page</a> I linked, chock full of Sudoku solvers written in Haskell? Well, there aren't as many there as I thought. About half the links from that page actually lead to 404 pages of various intricacies instead of to the examples they promise. The ones you can see source for are all there, but that's really all you can guarantee.</p>

<p>Also, I'll have to take it back.</p>

<blockquote>
  The <a href=\"http://rosettacode.org/wiki/Sudoku\">appropriate Rosetta Code page</a> doesn't have any solutions that leave me gobsmacked by elegance the way that <a href=\"http://rosettacode.org/wiki/Conway%27s_Game_of_Life#Clojure\">the Clojure Game of Life</a> did.
  <span class=\"sig\">Inaimathi</span>
</blockquote>

<p>That's false. Specifically, once I sat down to actually read <i>read</i> the examples there instead of just flipping through them, I got caught by <a href=\"http://web.math.unifi.it/users/maggesi/haskell_sudoku_solver.html\">one that I passed over the first time</a>. The code actually on the Haskellwiki page is even shorter than that, but it does it by omitting the type declarations, which is borderline cheating in Haskell. It took me an embarrassingly long time to understand the approach in my bones, so I'll go over it in depth in a <a href=\"/article?name=sudoku-reredux.html\">follow-up article</a> just in case I'm not the only one.</p>

<h3>Sudoku</h3>

<blockquote>
  So all <a href=\"http://www.haskell.org/haskellwiki/Sudoku\">these people</a> are using Haskell to commit sudoku? Oh what a world...
  <span class=\"sig\">Anonymous</span>
</blockquote>

<blockquote>
  <img src=\"/static/img/oh-you.jpg\" class=\"middle\" alt=\"A really weird internet joke\" />
  <span class=\"sig\">Inaimathi</span>
</blockquote>

<p>Like I said, we did Sudoku solvers at the last Toronto Code Retreat. The group of three I worked in for the Haskell attempt came up with <a href=\"https://github.com/Inaimathi/sudoku/blob/f3b442ce84b58cbe953817a4a96b2b5bfa4c0e5c/sudoku.hs\">this</a>. And I've since expanded that to a solver that works in the general case, although admittedly, <i>very slowly</i><a href=\"#foot-Sun-Jun-02-173100EDT-2013\" name=\"note-Sun-Jun-02-173100EDT-2013\">[1]</a>.</p>

<p>Here's the code</p>

<pre><span style=\"color: #a020f0;\">module</span> <span style=\"color: #228b22;\">Main</span> <span style=\"color: #a020f0;\">where</span>

<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Data.Set</span> (<span style=\"color: #228b22;\">Set</span>(<span style=\"color: #a0522d;\">..</span>), toList, fromList, difference, member)
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #a020f0;\">qualified</span> <span style=\"color: #228b22;\">Data.Set</span> <span style=\"color: #a020f0;\">as</span> <span style=\"color: #228b22;\">Set</span>
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Data.List</span> (sort, sortBy, intercalate, group, find)
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Data.List.Split</span> (chunksOf)
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Data.Ord</span> (comparing)
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Data.Char</span> (intToDigit)
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Data.Maybe</span> (fromJust)

<span style=\"color: #b22222;\">--</span><span style=\"color: #b22222;\">-------- Class Definition, constructors and sample data
</span><span style=\"color: #a020f0;\">data</span> <span style=\"color: #228b22;\">Board</span> <span style=\"color: #a0522d;\">=</span> <span style=\"color: #228b22;\">Board</span> { values <span style=\"color: #a0522d;\">::</span> [[<span style=\"color: #228b22;\">Int</span>]], 
                     empty <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">Set</span> (<span style=\"color: #228b22;\">Int</span>, <span style=\"color: #228b22;\">Int</span>),
                     size <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">Int</span>, 
                     ixs <span style=\"color: #a0522d;\">::</span> [<span style=\"color: #228b22;\">Int</span>],
                     blockSize <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">Int</span> } <span style=\"color: #a020f0;\">deriving</span> (<span style=\"color: #228b22;\">Eq</span>)

<span style=\"color: #a020f0;\">instance</span> <span style=\"color: #228b22;\">Show</span> <span style=\"color: #228b22;\">Board</span> <span style=\"color: #a020f0;\">where</span>
  show board <span style=\"color: #a0522d;\">=</span> (<span style=\"color: #228b22;\">:</span>) <span style=\"color: #8b2252;\">'\\n'</span> <span style=\"color: #a0522d;\">$</span> unlines <span style=\"color: #a0522d;\">.</span> intercalate hdelim <span style=\"color: #a0522d;\">.</span> split <span style=\"color: #a0522d;\">.</span> lns <span style=\"color: #a0522d;\">$</span> values board
    <span style=\"color: #a020f0;\">where</span> lns <span style=\"color: #a0522d;\">=</span> map (intercalate <span style=\"color: #8b2252;\">\"|\"</span> <span style=\"color: #a0522d;\">.</span> split <span style=\"color: #a0522d;\">.</span> map sq)
          split <span style=\"color: #a0522d;\">=</span> chunksOf bs
          sq n <span style=\"color: #a0522d;\">=</span> <span style=\"color: #a020f0;\">if</span> n <span style=\"color: #a0522d;\">==</span> 0 <span style=\"color: #a020f0;\">then</span> <span style=\"color: #8b2252;\">' '</span> <span style=\"color: #a020f0;\">else</span> intToDigit n
          hdelim <span style=\"color: #a0522d;\">=</span> [replicate (size board <span style=\"color: #a0522d;\">+</span> (bs <span style=\"color: #a0522d;\">-</span> 1)) <span style=\"color: #8b2252;\">'-'</span>]
          bs <span style=\"color: #a0522d;\">=</span> blockSize board

<span style=\"color: #0000ff;\">sampleSmall</span> <span style=\"color: #a0522d;\">=</span> toBoard [[1, 0, 3, 0],
                       [0, 4, 0, 2],
                       [0, 3, 4 ,0],
                       [4, 0, 2, 3]]

<span style=\"color: #0000ff;\">sample</span> <span style=\"color: #a0522d;\">=</span> toBoard [[0,7,1,4,0,0,0,0,5],
                  [0,0,0,0,5,0,0,8,0],
                  [0,0,3,9,0,7,6,0,0],
                  [0,0,0,0,0,1,0,0,0],
                  [0,9,0,8,0,6,0,0,3],
                  [0,0,0,0,0,0,8,2,0],
                  [0,6,0,0,4,0,7,0,8],
                  [3,0,0,0,0,0,0,9,0],
                  [0,0,0,0,8,5,0,0,0]]

<span style=\"color: #0000ff;\">sampleHard</span> <span style=\"color: #a0522d;\">=</span> toBoard [[0,7,1,4,0,0,0,0,5],
                      [0,0,0,0,5,0,0,8,0],
                      [0,0,3,9,0,7,6,0,0],
                      [0,0,0,0,0,1,0,0,0],
                      [0,9,0,0,0,6,0,0,3],
                      [0,0,0,0,0,0,8,2,0],
                      [0,0,0,0,4,0,0,0,8],
                      [3,0,0,0,0,0,0,9,0],
                      [0,0,0,0,8,5,0,0,0]]

<span style=\"color: #0000ff;\">sampleDevilish</span> <span style=\"color: #a0522d;\">=</span> toBoard [[0,7,1,4,0,0,0,0,0],
                          [0,0,0,0,5,0,0,0,0],
                          [0,0,3,9,0,7,6,0,0],
                          [0,0,0,0,0,0,0,0,0],
                          [0,9,0,0,0,6,0,0,3],
                          [0,0,0,0,0,0,0,0,0],
                          [0,0,0,0,4,0,0,0,8],
                          [0,0,0,0,0,0,0,9,0],
                          [0,0,0,0,8,5,0,0,0]]

<span style=\"color: #0000ff;\">toBoard</span> <span style=\"color: #a0522d;\">::</span> [[<span style=\"color: #228b22;\">Int</span>]] <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Board</span>
<span style=\"color: #0000ff;\">toBoard</span> values <span style=\"color: #a0522d;\">=</span> findEmpties <span style=\"color: #a0522d;\">$</span> <span style=\"color: #228b22;\">Board</span> { values <span style=\"color: #a0522d;\">=</span> values, empty <span style=\"color: #a0522d;\">=</span> fromList <span style=\"color: #228b22;\">[]</span>,
                                       size <span style=\"color: #a0522d;\">=</span> len, ixs <span style=\"color: #a0522d;\">=</span> [0<span style=\"color: #a0522d;\">..</span>len <span style=\"color: #a0522d;\">-</span> 1], blockSize <span style=\"color: #a0522d;\">=</span> bs }
  <span style=\"color: #a020f0;\">where</span> bs <span style=\"color: #a0522d;\">=</span> fromEnum <span style=\"color: #a0522d;\">.</span> sqrt <span style=\"color: #a0522d;\">.</span> toEnum <span style=\"color: #a0522d;\">$</span> length values
        len <span style=\"color: #a0522d;\">=</span> length values

<span style=\"color: #0000ff;\">findEmpties</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">Board</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Board</span>
<span style=\"color: #0000ff;\">findEmpties</span> board <span style=\"color: #a0522d;\">=</span> board { empty <span style=\"color: #a0522d;\">=</span> fromList [(x, y) <span style=\"color: #a0522d;\">|</span> y <span style=\"color: #a0522d;\">&lt;-</span> is, x <span style=\"color: #a0522d;\">&lt;-</span> is, blank (x, y)] }
  <span style=\"color: #a020f0;\">where</span> blank (x, y) <span style=\"color: #a0522d;\">=</span> 0 <span style=\"color: #a0522d;\">==</span> ((values board) <span style=\"color: #a0522d;\">!!</span> y <span style=\"color: #a0522d;\">!!</span> x)
        is <span style=\"color: #a0522d;\">=</span> ixs board

<span style=\"color: #b22222;\">--</span><span style=\"color: #b22222;\">-------- The solver
</span><span style=\"color: #0000ff;\">main</span> <span style=\"color: #a0522d;\">=</span> putStr <span style=\"color: #a0522d;\">.</span> show <span style=\"color: #a0522d;\">$</span> solve sampleDevilish

<span style=\"color: #0000ff;\">solve</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">Board</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Board</span>
<span style=\"color: #0000ff;\">solve</span> board <span style=\"color: #a0522d;\">=</span> rec [naiveSolve [obvious, blockwise] board]
  <span style=\"color: #a020f0;\">where</span> solved board <span style=\"color: #a0522d;\">=</span> 0 <span style=\"color: #a0522d;\">==</span> (<span style=\"color: #228b22;\">Set</span><span style=\"color: #a0522d;\">.</span>size <span style=\"color: #a0522d;\">$</span> empty board)
        impossible board <span style=\"color: #a0522d;\">=</span> any ((<span style=\"color: #a0522d;\">==</span>0) <span style=\"color: #a0522d;\">.</span> length) <span style=\"color: #a0522d;\">.</span> map (toList <span style=\"color: #a0522d;\">.</span> possibilities board) <span style=\"color: #a0522d;\">.</span> toList <span style=\"color: #a0522d;\">$</span> empty board
        rec <span style=\"color: #228b22;\">[]</span> <span style=\"color: #a0522d;\">=</span> board <span style=\"color: #b22222;\">-- </span><span style=\"color: #b22222;\">Failed
</span>        rec boards <span style=\"color: #a0522d;\">=</span> <span style=\"color: #a020f0;\">case</span> find solved <span style=\"color: #a0522d;\">$</span> boards <span style=\"color: #a020f0;\">of</span>
          <span style=\"color: #228b22;\">Just</span> b <span style=\"color: #a0522d;\">-&gt;</span> b
          <span style=\"color: #228b22;\">Nothing</span> <span style=\"color: #a0522d;\">-&gt;</span> rec <span style=\"color: #a0522d;\">.</span> map (naiveSolve [obvious, blockwise]) <span style=\"color: #a0522d;\">.</span> concatMap guess <span style=\"color: #a0522d;\">$</span> filter (not <span style=\"color: #a0522d;\">.</span> impossible) boards

<span style=\"color: #0000ff;\">naiveSolve</span> <span style=\"color: #a0522d;\">::</span> [(<span style=\"color: #228b22;\">Board</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Board</span>)] <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Board</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Board</span>
<span style=\"color: #0000ff;\">naiveSolve</span> functions board <span style=\"color: #a0522d;\">=</span> rec functions board
  <span style=\"color: #a020f0;\">where</span> rec <span style=\"color: #228b22;\">[]</span> board <span style=\"color: #a0522d;\">=</span> board
        rec fns board <span style=\"color: #a0522d;\">=</span> <span style=\"color: #a020f0;\">case</span> <span style=\"color: #228b22;\">Set</span><span style=\"color: #a0522d;\">.</span>size <span style=\"color: #a0522d;\">$</span> empty new <span style=\"color: #a020f0;\">of</span>
          0 <span style=\"color: #a0522d;\">-&gt;</span> new
          <span style=\"color: #a020f0;\">_</span> <span style=\"color: #a0522d;\">-&gt;</span> rec nextFns new
          <span style=\"color: #a020f0;\">where</span> new <span style=\"color: #a0522d;\">=</span> (head fns) <span style=\"color: #a0522d;\">$</span> board
                nextFns <span style=\"color: #a0522d;\">=</span> <span style=\"color: #a020f0;\">if</span> new <span style=\"color: #a0522d;\">==</span> board <span style=\"color: #a020f0;\">then</span> tail fns <span style=\"color: #a020f0;\">else</span> functions
        
<span style=\"color: #b22222;\">--</span><span style=\"color: #b22222;\">-------- The solve stages
</span><span style=\"color: #0000ff;\">obvious</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">Board</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Board</span>
<span style=\"color: #0000ff;\">obvious</span> board <span style=\"color: #a0522d;\">=</span> findEmpties <span style=\"color: #a0522d;\">$</span> board { values <span style=\"color: #a0522d;\">=</span> newVals }
  <span style=\"color: #a020f0;\">where</span> newVals <span style=\"color: #a0522d;\">=</span> [[newVal (x, y) <span style=\"color: #a0522d;\">|</span> x <span style=\"color: #a0522d;\">&lt;-</span> ixs board] <span style=\"color: #a0522d;\">|</span> y <span style=\"color: #a0522d;\">&lt;-</span> ixs board]
        ps x y <span style=\"color: #a0522d;\">=</span> toList <span style=\"color: #a0522d;\">$</span> possibilities board (x, y)
        newVal (x, y) <span style=\"color: #a0522d;\">=</span> <span style=\"color: #a020f0;\">case</span> ((values board) <span style=\"color: #a0522d;\">!!</span> y <span style=\"color: #a0522d;\">!!</span> x, ps x y) <span style=\"color: #a020f0;\">of</span>
          (0, [val]) <span style=\"color: #a0522d;\">-&gt;</span> val
          (val, <span style=\"color: #a020f0;\">_</span>) <span style=\"color: #a0522d;\">-&gt;</span> val

<span style=\"color: #0000ff;\">blockwise</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">Board</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Board</span>
<span style=\"color: #0000ff;\">blockwise</span> board <span style=\"color: #a0522d;\">=</span> findEmpties <span style=\"color: #a0522d;\">$</span> board { values <span style=\"color: #a0522d;\">=</span> new }
  <span style=\"color: #a020f0;\">where</span> new <span style=\"color: #a0522d;\">=</span> [[newVal (x, y) <span style=\"color: #a0522d;\">|</span> x <span style=\"color: #a0522d;\">&lt;-</span> ixs board] <span style=\"color: #a0522d;\">|</span> y <span style=\"color: #a0522d;\">&lt;-</span> ixs board]
        newVal (x, y) <span style=\"color: #a0522d;\">=</span> <span style=\"color: #a020f0;\">case</span> find (<span style=\"color: #a0522d;\">\\</span>(x', y', v) <span style=\"color: #a0522d;\">-&gt;</span> (x <span style=\"color: #a0522d;\">==</span> x') <span style=\"color: #a0522d;\">&amp;&amp;</span> (y <span style=\"color: #a0522d;\">==</span> y')) uniques <span style=\"color: #a020f0;\">of</span>
          <span style=\"color: #228b22;\">Just</span> (<span style=\"color: #a020f0;\">_</span>, <span style=\"color: #a020f0;\">_</span>, v) <span style=\"color: #a0522d;\">-&gt;</span> v
          <span style=\"color: #228b22;\">Nothing</span> <span style=\"color: #a0522d;\">-&gt;</span> (values board) <span style=\"color: #a0522d;\">!!</span> y <span style=\"color: #a0522d;\">!!</span> x
        uniques <span style=\"color: #a0522d;\">=</span> concat [uniqueInBlock board (x, y) <span style=\"color: #a0522d;\">|</span> y <span style=\"color: #a0522d;\">&lt;-</span> bIxs, x <span style=\"color: #a0522d;\">&lt;-</span> bIxs]
        bIxs <span style=\"color: #a0522d;\">=</span> [0, bs<span style=\"color: #a0522d;\">..</span>size board<span style=\"color: #a0522d;\">-</span>1]
        bs <span style=\"color: #a0522d;\">=</span> blockSize board

<span style=\"color: #0000ff;\">guess</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">Board</span> <span style=\"color: #a0522d;\">-&gt;</span> [<span style=\"color: #228b22;\">Board</span>]
<span style=\"color: #0000ff;\">guess</span> board <span style=\"color: #a0522d;\">=</span> map (<span style=\"color: #a0522d;\">\\</span>v <span style=\"color: #a0522d;\">-&gt;</span> findEmpties <span style=\"color: #a0522d;\">$</span> board { values <span style=\"color: #a0522d;\">=</span> newVals v }) vs
  <span style=\"color: #a020f0;\">where</span> (x, y, vs) <span style=\"color: #a0522d;\">=</span> head <span style=\"color: #a0522d;\">$</span> sortBy (comparing (length <span style=\"color: #a0522d;\">.</span> thd)) posMap
        newVals v <span style=\"color: #a0522d;\">=</span> [[<span style=\"color: #a020f0;\">if</span> x <span style=\"color: #a0522d;\">==</span> x' <span style=\"color: #a0522d;\">&amp;&amp;</span> y <span style=\"color: #a0522d;\">==</span> y' <span style=\"color: #a020f0;\">then</span> v <span style=\"color: #a020f0;\">else</span> (values board) <span style=\"color: #a0522d;\">!!</span> y' <span style=\"color: #a0522d;\">!!</span> x' <span style=\"color: #a0522d;\">|</span> x' <span style=\"color: #a0522d;\">&lt;-</span> ixs board] <span style=\"color: #a0522d;\">|</span> y' <span style=\"color: #a0522d;\">&lt;-</span> ixs board]
        posMap <span style=\"color: #a0522d;\">=</span> [(x, y, toList <span style=\"color: #a0522d;\">$</span> possibilities board (x, y)) <span style=\"color: #a0522d;\">|</span> (x, y) <span style=\"color: #a0522d;\">&lt;-</span> es]
        es <span style=\"color: #a0522d;\">=</span> toList <span style=\"color: #a0522d;\">$</span> empty board


<span style=\"color: #b22222;\">--</span><span style=\"color: #b22222;\">-------- Solver-related utility
</span><span style=\"color: #0000ff;\">possibilities</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">Board</span> <span style=\"color: #a0522d;\">-&gt;</span> (<span style=\"color: #228b22;\">Int</span>, <span style=\"color: #228b22;\">Int</span>) <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Set</span> <span style=\"color: #228b22;\">Int</span>
<span style=\"color: #0000ff;\">possibilities</span> board (x, y) <span style=\"color: #a0522d;\">=</span> foldl difference (fromList [1<span style=\"color: #a0522d;\">..</span>size board]) sets
  <span style=\"color: #a020f0;\">where</span> sets <span style=\"color: #a0522d;\">=</span> mapply (board, (x, y)) [row, col, block]

<span style=\"color: #0000ff;\">row</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">Board</span> <span style=\"color: #a0522d;\">-&gt;</span> (<span style=\"color: #228b22;\">Int</span>, <span style=\"color: #228b22;\">Int</span>) <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Set</span> <span style=\"color: #228b22;\">Int</span>
<span style=\"color: #0000ff;\">row</span> board (x, y) <span style=\"color: #a0522d;\">=</span> fromList <span style=\"color: #a0522d;\">$</span> values board <span style=\"color: #a0522d;\">!!</span> y

<span style=\"color: #0000ff;\">col</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">Board</span> <span style=\"color: #a0522d;\">-&gt;</span> (<span style=\"color: #228b22;\">Int</span>, <span style=\"color: #228b22;\">Int</span>) <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Set</span> <span style=\"color: #228b22;\">Int</span>
<span style=\"color: #0000ff;\">col</span> board (x, y) <span style=\"color: #a0522d;\">=</span> fromList <span style=\"color: #a0522d;\">.</span> map (<span style=\"color: #a0522d;\">!!</span> x) <span style=\"color: #a0522d;\">$</span> values board

<span style=\"color: #0000ff;\">block</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">Board</span> <span style=\"color: #a0522d;\">-&gt;</span> (<span style=\"color: #228b22;\">Int</span>, <span style=\"color: #228b22;\">Int</span>) <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Set</span> <span style=\"color: #228b22;\">Int</span>
<span style=\"color: #0000ff;\">block</span> board (x, y) <span style=\"color: #a0522d;\">=</span> fromList <span style=\"color: #a0522d;\">.</span> concat <span style=\"color: #a0522d;\">.</span> square <span style=\"color: #a0522d;\">$</span> values board
  <span style=\"color: #a020f0;\">where</span> square <span style=\"color: #a0522d;\">=</span> map (take bs <span style=\"color: #a0522d;\">.</span> drop (origin x)) <span style=\"color: #a0522d;\">.</span> take bs <span style=\"color: #a0522d;\">.</span> drop (origin y)
        origin n <span style=\"color: #a0522d;\">=</span> bs <span style=\"color: #a0522d;\">*</span> intFloor n bs
        bs <span style=\"color: #a0522d;\">=</span> blockSize board

<span style=\"color: #0000ff;\">uniqueInBlock</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">Board</span> <span style=\"color: #a0522d;\">-&gt;</span> (<span style=\"color: #228b22;\">Int</span>, <span style=\"color: #228b22;\">Int</span>) <span style=\"color: #a0522d;\">-&gt;</span> [(<span style=\"color: #228b22;\">Int</span>, <span style=\"color: #228b22;\">Int</span>, <span style=\"color: #228b22;\">Int</span>)]
<span style=\"color: #0000ff;\">uniqueInBlock</span> board (x, y) <span style=\"color: #a0522d;\">=</span> singles <span style=\"color: #a0522d;\">$</span> concatMap (toList <span style=\"color: #a0522d;\">.</span> thd) posMap
  <span style=\"color: #a020f0;\">where</span> posMap <span style=\"color: #a0522d;\">=</span> [(x', y', possibilities board (x', y')) <span style=\"color: #a0522d;\">|</span> (x', y') <span style=\"color: #a0522d;\">&lt;-</span> es]
        es <span style=\"color: #a0522d;\">=</span> blockEmpties board (x, y)
        singles <span style=\"color: #a0522d;\">=</span> map (findInMap <span style=\"color: #a0522d;\">.</span> head) <span style=\"color: #a0522d;\">.</span> filter ((<span style=\"color: #a0522d;\">==</span>1) <span style=\"color: #a0522d;\">.</span> length) <span style=\"color: #a0522d;\">.</span> group <span style=\"color: #a0522d;\">.</span> sort
        findInMap n <span style=\"color: #a0522d;\">=</span> <span style=\"color: #a020f0;\">let</span> (x, y, p) <span style=\"color: #a0522d;\">=</span> fromJust <span style=\"color: #a0522d;\">$</span> find (member n <span style=\"color: #a0522d;\">.</span> thd) posMap
                      <span style=\"color: #a020f0;\">in</span> (x, y, n)

<span style=\"color: #0000ff;\">blockEmpties</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">Board</span> <span style=\"color: #a0522d;\">-&gt;</span> (<span style=\"color: #228b22;\">Int</span>, <span style=\"color: #228b22;\">Int</span>) <span style=\"color: #a0522d;\">-&gt;</span> [(<span style=\"color: #228b22;\">Int</span>, <span style=\"color: #228b22;\">Int</span>)]
<span style=\"color: #0000ff;\">blockEmpties</span> board (x, y) <span style=\"color: #a0522d;\">=</span> [(x', y') <span style=\"color: #a0522d;\">|</span> x' <span style=\"color: #a0522d;\">&lt;-</span> xs, y' <span style=\"color: #a0522d;\">&lt;-</span> ys, blank (x', y')]
  <span style=\"color: #a020f0;\">where</span> blank (x, y) <span style=\"color: #a0522d;\">=</span> 0 <span style=\"color: #a0522d;\">==</span> ((values board) <span style=\"color: #a0522d;\">!!</span> y <span style=\"color: #a0522d;\">!!</span> x)
        xs <span style=\"color: #a0522d;\">=</span> [ox<span style=\"color: #a0522d;\">..</span>ox <span style=\"color: #a0522d;\">+</span> bs<span style=\"color: #a0522d;\">-</span>1]
        ys <span style=\"color: #a0522d;\">=</span> [oy<span style=\"color: #a0522d;\">..</span>oy <span style=\"color: #a0522d;\">+</span> bs<span style=\"color: #a0522d;\">-</span>1]
        [ox, oy] <span style=\"color: #a0522d;\">=</span> map origin [x, y]
        origin n <span style=\"color: #a0522d;\">=</span> bs <span style=\"color: #a0522d;\">*</span> intFloor n bs
        bs <span style=\"color: #a0522d;\">=</span> blockSize board

<span style=\"color: #b22222;\">--</span><span style=\"color: #b22222;\">-------- General Utility
</span><span style=\"color: #0000ff;\">mapply</span> <span style=\"color: #a0522d;\">::</span> (a, b) <span style=\"color: #a0522d;\">-&gt;</span> [(a <span style=\"color: #a0522d;\">-&gt;</span> b <span style=\"color: #a0522d;\">-&gt;</span> c)] <span style=\"color: #a0522d;\">-&gt;</span> [c]
<span style=\"color: #0000ff;\">mapply</span> args fns <span style=\"color: #a0522d;\">=</span> map (<span style=\"color: #a0522d;\">\\</span>fn <span style=\"color: #a0522d;\">-&gt;</span> uncurry fn <span style=\"color: #a0522d;\">$</span> args) fns

<span style=\"color: #0000ff;\">intFloor</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">Int</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Int</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Int</span>
<span style=\"color: #0000ff;\">intFloor</span> a b <span style=\"color: #a0522d;\">=</span> fromEnum <span style=\"color: #a0522d;\">.</span> floor <span style=\"color: #a0522d;\">.</span> toEnum <span style=\"color: #a0522d;\">$</span> a <span style=\"color: #a0522d;\">`div`</span> b

<span style=\"color: #0000ff;\">thd</span> <span style=\"color: #a0522d;\">::</span> (a, b, c) <span style=\"color: #a0522d;\">-&gt;</span> c
<span style=\"color: #0000ff;\">thd</span> (a, b, c) <span style=\"color: #a0522d;\">=</span> c</pre>

<p>Just over 110 lines of pretty ham-fisted Haskell, not counting the example data and general utility functions. At a high level, the way this is supposed to work is by taking a board, repeatedly solving all the obvious spaces, potentially doing a blockwise analysis then repeatedly solving the new obvious spaces, and potentially guessing if neither of those tactics work out. In other words, this is more or less a formalization of the basic brute-force method a human Sudoku beginner might use to solve a board. If we ever get to a solved board, we return it, if we discover we've been given an impossible board, we return the input instead.</p>

<p>First off, we've changed our definition of a board from a naive 2D array to a more complex type that keeps some needed info around...</p>

<pre><span style=\"color: #a020f0;\">data</span> <span style=\"color: #228b22;\">Board</span> <span style=\"color: #a0522d;\">=</span> <span style=\"color: #228b22;\">Board</span> { values <span style=\"color: #a0522d;\">::</span> [[<span style=\"color: #228b22;\">Int</span>]], 
                     empty <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">Set</span> (<span style=\"color: #228b22;\">Int</span>, <span style=\"color: #228b22;\">Int</span>),
                     size <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">Int</span>, 
                     ixs <span style=\"color: #a0522d;\">::</span> [<span style=\"color: #228b22;\">Int</span>],
                     blockSize <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">Int</span> } <span style=\"color: #a020f0;\">deriving</span> (<span style=\"color: #228b22;\">Eq</span>)</pre>

<p>...and we've taken the opportunity to just make it an instance of <code>Show</code>.</p>

<pre><span style=\"color: #a020f0;\">instance</span> <span style=\"color: #228b22;\">Show</span> <span style=\"color: #228b22;\">Board</span> <span style=\"color: #a020f0;\">where</span>
  show board <span style=\"color: #a0522d;\">=</span> (<span style=\"color: #228b22;\">:</span>) <span style=\"color: #8b2252;\">'\\n'</span> <span style=\"color: #a0522d;\">$</span> unlines <span style=\"color: #a0522d;\">.</span> intercalate hdelim <span style=\"color: #a0522d;\">.</span> split <span style=\"color: #a0522d;\">.</span> lns <span style=\"color: #a0522d;\">$</span> values board
    <span style=\"color: #a020f0;\">where</span> lns <span style=\"color: #a0522d;\">=</span> map (intercalate <span style=\"color: #8b2252;\">\"|\"</span> <span style=\"color: #a0522d;\">.</span> split <span style=\"color: #a0522d;\">.</span> map sq)
          split <span style=\"color: #a0522d;\">=</span> chunksOf bs
          sq n <span style=\"color: #a0522d;\">=</span> <span style=\"color: #a020f0;\">if</span> n <span style=\"color: #a0522d;\">==</span> 0 <span style=\"color: #a020f0;\">then</span> <span style=\"color: #8b2252;\">' '</span> <span style=\"color: #a020f0;\">else</span> intToDigit n
          hdelim <span style=\"color: #a0522d;\">=</span> [replicate (size board <span style=\"color: #a0522d;\">+</span> (bs <span style=\"color: #a0522d;\">-</span> 1)) <span style=\"color: #8b2252;\">'-'</span>]
          bs <span style=\"color: #a0522d;\">=</span> blockSize board</pre>

<p>Lets start in the middle this time:</p>

<pre><span style=\"color: #0000ff;\">obvious</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">Board</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Board</span>
<span style=\"color: #0000ff;\">obvious</span> board <span style=\"color: #a0522d;\">=</span> findEmpties <span style=\"color: #a0522d;\">$</span> board { values <span style=\"color: #a0522d;\">=</span> newVals }
  <span style=\"color: #a020f0;\">where</span> newVals <span style=\"color: #a0522d;\">=</span> [[newVal (x, y) <span style=\"color: #a0522d;\">|</span> x <span style=\"color: #a0522d;\">&lt;-</span> ixs board] <span style=\"color: #a0522d;\">|</span> y <span style=\"color: #a0522d;\">&lt;-</span> ixs board]
        ps x y <span style=\"color: #a0522d;\">=</span> toList <span style=\"color: #a0522d;\">$</span> possibilities board (x, y)
        newVal (x, y) <span style=\"color: #a0522d;\">=</span> <span style=\"color: #a020f0;\">case</span> ((values board) <span style=\"color: #a0522d;\">!!</span> y <span style=\"color: #a0522d;\">!!</span> x, ps x y) <span style=\"color: #a020f0;\">of</span>
          (0, [val]) <span style=\"color: #a0522d;\">-&gt;</span> val
          (val, <span style=\"color: #a020f0;\">_</span>) <span style=\"color: #a0522d;\">-&gt;</span> val</pre>

<p>That's how we solve a board with obvious values in it: just return a new board with the appropriate spaces filled with their only possible value, and removed from the empty space set. Nothing special here. Slightly more interesting is how we go to the next step</p>

<pre><span style=\"color: #0000ff;\">blockwise</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">Board</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Board</span>
<span style=\"color: #0000ff;\">blockwise</span> board <span style=\"color: #a0522d;\">=</span> findEmpties <span style=\"color: #a0522d;\">$</span> board { values <span style=\"color: #a0522d;\">=</span> new }
  <span style=\"color: #a020f0;\">where</span> new <span style=\"color: #a0522d;\">=</span> [[newVal (x, y) <span style=\"color: #a0522d;\">|</span> x <span style=\"color: #a0522d;\">&lt;-</span> ixs board] <span style=\"color: #a0522d;\">|</span> y <span style=\"color: #a0522d;\">&lt;-</span> ixs board]
        newVal (x, y) <span style=\"color: #a0522d;\">=</span> <span style=\"color: #a020f0;\">case</span> find (<span style=\"color: #a0522d;\">\\</span>(x', y', v) <span style=\"color: #a0522d;\">-&gt;</span> (x <span style=\"color: #a0522d;\">==</span> x') <span style=\"color: #a0522d;\">&amp;&amp;</span> (y <span style=\"color: #a0522d;\">==</span> y')) uniques <span style=\"color: #a020f0;\">of</span>
          <span style=\"color: #228b22;\">Just</span> (<span style=\"color: #a020f0;\">_</span>, <span style=\"color: #a020f0;\">_</span>, v) <span style=\"color: #a0522d;\">-&gt;</span> v
          <span style=\"color: #228b22;\">Nothing</span> <span style=\"color: #a0522d;\">-&gt;</span> (values board) <span style=\"color: #a0522d;\">!!</span> y <span style=\"color: #a0522d;\">!!</span> x
        uniques <span style=\"color: #a0522d;\">=</span> concat [uniqueInBlock board (x, y) <span style=\"color: #a0522d;\">|</span> y <span style=\"color: #a0522d;\">&lt;-</span> bIxs, x <span style=\"color: #a0522d;\">&lt;-</span> bIxs]
        bIxs <span style=\"color: #a0522d;\">=</span> [0, bs<span style=\"color: #a0522d;\">..</span>size board<span style=\"color: #a0522d;\">-</span>1]
        bs <span style=\"color: #a0522d;\">=</span> blockSize board</pre>

<p>Rather than checking for sets that have only one remaining possibility, this checks whether there's a unique position for any value within a <code>block</code>. To illustrate:</p>

<pre><span style=\"color: #228b22;\">GHCi</span>, version 7<span style=\"color: #a0522d;\">.</span>4<span style=\"color: #a0522d;\">.</span>1<span style=\"color: #228b22;\">:</span> http<span style=\"color: #228b22;\">://</span>www<span style=\"color: #a0522d;\">.</span>haskell<span style=\"color: #a0522d;\">.</span>org<span style=\"color: #a0522d;\">/</span>ghc<span style=\"color: #a0522d;\">/</span>  <span style=\"color: #228b22;\">:?</span> for help
<span style=\"color: #228b22;\">Loading</span> package ghc<span style=\"color: #a0522d;\">-</span>prim <span style=\"color: #a0522d;\">...</span> linking <span style=\"color: #a0522d;\">...</span> done<span style=\"color: #a0522d;\">.</span>
<span style=\"color: #228b22;\">Loading</span> package integer<span style=\"color: #a0522d;\">-</span>gmp <span style=\"color: #a0522d;\">...</span> linking <span style=\"color: #a0522d;\">...</span> done<span style=\"color: #a0522d;\">.</span>
<span style=\"color: #228b22;\">Loading</span> package base <span style=\"color: #a0522d;\">...</span> linking <span style=\"color: #a0522d;\">...</span> done<span style=\"color: #a0522d;\">.</span>
<span style=\"color: #228b22;\">Prelude</span><span style=\"color: #0000ff;\">&gt;</span> <span style=\"color: #228b22;\">:</span>load <span style=\"color: #8b2252;\">\"/home/inaimathi/projects/code-retreat/sudoku/sudoku.hs\"</span>
[1 <span style=\"color: #a020f0;\">of</span> 1] <span style=\"color: #228b22;\">Compiling</span> <span style=\"color: #228b22;\">Main</span>             ( <span style=\"color: #a0522d;\">/</span>home<span style=\"color: #a0522d;\">/</span>inaimathi<span style=\"color: #a0522d;\">/</span>projects<span style=\"color: #a0522d;\">/</span>code<span style=\"color: #a0522d;\">-</span>retreat<span style=\"color: #a0522d;\">/</span>sudoku<span style=\"color: #a0522d;\">/</span>sudoku<span style=\"color: #a0522d;\">.</span>hs, interpreted )
<span style=\"color: #228b22;\">Ok</span>, modules loaded<span style=\"color: #228b22;\">:</span> <span style=\"color: #228b22;\">Main</span><span style=\"color: #a0522d;\">.</span>
<span style=\"color: #a0522d;\">*</span><span style=\"color: #228b22;\">Main</span><span style=\"color: #a0522d;\">&gt;</span> sample
<span style=\"color: #228b22;\">Loading</span> package array<span style=\"color: #a0522d;\">-</span>0<span style=\"color: #a0522d;\">.</span>4<span style=\"color: #a0522d;\">.</span>0<span style=\"color: #a0522d;\">.</span>0 <span style=\"color: #a0522d;\">...</span> linking <span style=\"color: #a0522d;\">...</span> done<span style=\"color: #a0522d;\">.</span>
<span style=\"color: #228b22;\">Loading</span> package deepseq<span style=\"color: #a0522d;\">-</span>1<span style=\"color: #a0522d;\">.</span>3<span style=\"color: #a0522d;\">.</span>0<span style=\"color: #a0522d;\">.</span>0 <span style=\"color: #a0522d;\">...</span> linking <span style=\"color: #a0522d;\">...</span> done<span style=\"color: #a0522d;\">.</span>
<span style=\"color: #228b22;\">Loading</span> package containers<span style=\"color: #a0522d;\">-</span>0<span style=\"color: #a0522d;\">.</span>4<span style=\"color: #a0522d;\">.</span>2<span style=\"color: #a0522d;\">.</span>1 <span style=\"color: #a0522d;\">...</span> linking <span style=\"color: #a0522d;\">...</span> done<span style=\"color: #a0522d;\">.</span>
<span style=\"color: #228b22;\">Loading</span> package split<span style=\"color: #a0522d;\">-</span>0<span style=\"color: #a0522d;\">.</span>2<span style=\"color: #a0522d;\">.</span>1<span style=\"color: #a0522d;\">.</span>2 <span style=\"color: #a0522d;\">...</span> linking <span style=\"color: #a0522d;\">...</span> done<span style=\"color: #a0522d;\">.</span>

 71<span style=\"color: #a0522d;\">|</span>4  <span style=\"color: #a0522d;\">|</span>  5
   <span style=\"color: #a0522d;\">|</span> 5 <span style=\"color: #a0522d;\">|</span> 8 
  3<span style=\"color: #a0522d;\">|</span>9 7<span style=\"color: #a0522d;\">|</span>6  
<span style=\"color: #b22222;\">--</span><span style=\"color: #b22222;\">---------
</span>   <span style=\"color: #a0522d;\">|</span>  1<span style=\"color: #a0522d;\">|</span>   
 9 <span style=\"color: #a0522d;\">|</span>8 6<span style=\"color: #a0522d;\">|</span>  3
   <span style=\"color: #a0522d;\">|</span>   <span style=\"color: #a0522d;\">|</span>82 
<span style=\"color: #b22222;\">--</span><span style=\"color: #b22222;\">---------
</span> 6 <span style=\"color: #a0522d;\">|</span> 4 <span style=\"color: #a0522d;\">|</span>7 8
3  <span style=\"color: #a0522d;\">|</span>   <span style=\"color: #a0522d;\">|</span> 9 
   <span style=\"color: #a0522d;\">|</span> 85<span style=\"color: #a0522d;\">|</span>   

<span style=\"color: #a0522d;\">*</span><span style=\"color: #228b22;\">Main</span><span style=\"color: #a0522d;\">&gt;</span> <span style=\"color: #a020f0;\">let</span> obv board <span style=\"color: #a0522d;\">=</span> <span style=\"color: #a020f0;\">if</span> o <span style=\"color: #a0522d;\">==</span> board <span style=\"color: #a020f0;\">then</span> board <span style=\"color: #a020f0;\">else</span> obv o <span style=\"color: #a020f0;\">where</span> o <span style=\"color: #a0522d;\">=</span> obvious board
<span style=\"color: #a0522d;\">*</span><span style=\"color: #228b22;\">Main</span><span style=\"color: #a0522d;\">&gt;</span> obv sample

 71<span style=\"color: #a0522d;\">|</span>4 8<span style=\"color: #a0522d;\">|</span> 35
   <span style=\"color: #a0522d;\">|</span> 53<span style=\"color: #a0522d;\">|</span> 8 
  3<span style=\"color: #a0522d;\">|</span>9 7<span style=\"color: #a0522d;\">|</span>6  
<span style=\"color: #b22222;\">--</span><span style=\"color: #b22222;\">---------
</span>   <span style=\"color: #a0522d;\">|</span>  1<span style=\"color: #a0522d;\">|</span>   
 9 <span style=\"color: #a0522d;\">|</span>8 6<span style=\"color: #a0522d;\">|</span>  3
   <span style=\"color: #a0522d;\">|</span>  4<span style=\"color: #a0522d;\">|</span>82 
<span style=\"color: #b22222;\">--</span><span style=\"color: #b22222;\">---------
</span> 6 <span style=\"color: #a0522d;\">|</span> 49<span style=\"color: #a0522d;\">|</span>7 8
3  <span style=\"color: #a0522d;\">|</span>  2<span style=\"color: #a0522d;\">|</span> 9 
   <span style=\"color: #a0522d;\">|</span> 85<span style=\"color: #a0522d;\">|</span>   

<span style=\"color: #a0522d;\">*</span><span style=\"color: #228b22;\">Main</span><span style=\"color: #a0522d;\">&gt;</span> </pre>

<p>This is how far repeatedly solving the obvious blocks gets us. <b>BUT</b>, there are still squares there that have unambiguous solutions. Specifically</p>

<pre> 71<span style=\"color: #a0522d;\">|</span>4 8<span style=\"color: #a0522d;\">|</span> 35
   <span style=\"color: #a0522d;\">|</span> 53<span style=\"color: #a0522d;\">|</span> 8<span style=\"color: #228b22;\">X</span>
  3<span style=\"color: #a0522d;\">|</span>9 7<span style=\"color: #a0522d;\">|</span>6  
<span style=\"color: #b22222;\">--</span><span style=\"color: #b22222;\">---------
</span>   <span style=\"color: #a0522d;\">|</span>  1<span style=\"color: #a0522d;\">|</span>   
 9 <span style=\"color: #a0522d;\">|</span>8 6<span style=\"color: #a0522d;\">|</span>  3
   <span style=\"color: #a0522d;\">|</span>  4<span style=\"color: #a0522d;\">|</span>82 
<span style=\"color: #b22222;\">--</span><span style=\"color: #b22222;\">---------
</span> 6 <span style=\"color: #a0522d;\">|</span> 49<span style=\"color: #a0522d;\">|</span>7 8
3  <span style=\"color: #a0522d;\">|</span>  2<span style=\"color: #a0522d;\">|</span> 9 
   <span style=\"color: #a0522d;\">|</span> 85<span style=\"color: #a0522d;\">|</span><span style=\"color: #228b22;\">X</span>  </pre>

<p>Those two have only one possible value. If you take a look at their possibilities list, it doesn't look that way</p>

<pre><span style=\"color: #a0522d;\">*</span><span style=\"color: #228b22;\">Main</span><span style=\"color: #a0522d;\">&gt;</span> possibilities (obv sample) (8, 1)
<span style=\"color: #0000ff;\">fromList</span> [1,2,4,7,9]
<span style=\"color: #a0522d;\">*</span><span style=\"color: #228b22;\">Main</span><span style=\"color: #a0522d;\">&gt;</span> possibilities (obv sample) (6, 8)
<span style=\"color: #0000ff;\">fromList</span> [1,2,3,4]
<span style=\"color: #a0522d;\">*</span><span style=\"color: #228b22;\">Main</span><span style=\"color: #a0522d;\">&gt;</span> </pre>

<p>but if you take a look at only the intersecting values something becomes clear.</p>

<pre> 7<span style=\"color: #a0522d;\">.|.</span> <span style=\"color: #a0522d;\">.|</span> 35
   <span style=\"color: #a0522d;\">|</span> <span style=\"color: #a0522d;\">..|</span> 8<span style=\"color: #228b22;\">X</span>
  <span style=\"color: #a0522d;\">.|.</span> 7<span style=\"color: #a0522d;\">|</span>6  
<span style=\"color: #b22222;\">--</span><span style=\"color: #b22222;\">---------
</span>   <span style=\"color: #a0522d;\">|</span>  <span style=\"color: #a0522d;\">.|</span>   
 <span style=\"color: #a0522d;\">.</span> <span style=\"color: #a0522d;\">|.</span> <span style=\"color: #a0522d;\">.|</span>  3
   <span style=\"color: #a0522d;\">|</span>  <span style=\"color: #a0522d;\">.|..</span> 
<span style=\"color: #b22222;\">--</span><span style=\"color: #b22222;\">---------
</span> <span style=\"color: #a0522d;\">.</span> <span style=\"color: #a0522d;\">|</span> <span style=\"color: #a0522d;\">..|</span>7 8
3  <span style=\"color: #a0522d;\">|</span>  <span style=\"color: #a0522d;\">.|</span> 9 
   <span style=\"color: #a0522d;\">|</span> <span style=\"color: #a0522d;\">..|</span><span style=\"color: #228b22;\">X</span>  </pre>

<p>Because of the placements of <code>7</code>s, and the existing values in block <code>6,0</code>, the <i>only</i> remaining space in that block that could contain a <code>7</code> is <code>(8, 1)</code>. The same situation is happening with <code>3</code>s in block <code>6,6</code>. Because our <code>possibilities</code> function is only doing a set subtraction, it fails to detect this.</p>

<p>I get the feeling that this is what Josh was getting in my first group; what you want in this situation is to figure out whether there's a unique place within a given block that a given value could go. These squares</p>

<pre> 71<span style=\"color: #a0522d;\">|</span>4 8<span style=\"color: #a0522d;\">|</span><span style=\"color: #228b22;\">X</span>35
   <span style=\"color: #a0522d;\">|</span> 53<span style=\"color: #a0522d;\">|</span><span style=\"color: #228b22;\">X</span>8<span style=\"color: #228b22;\">X</span>
  3<span style=\"color: #a0522d;\">|</span>9 7<span style=\"color: #a0522d;\">|</span>6<span style=\"color: #228b22;\">X</span><span style=\"color: #228b22;\">X</span>
<span style=\"color: #b22222;\">--</span><span style=\"color: #b22222;\">---------
</span>   <span style=\"color: #a0522d;\">|</span>  1<span style=\"color: #a0522d;\">|</span>   
 9 <span style=\"color: #a0522d;\">|</span>8 6<span style=\"color: #a0522d;\">|</span>  3
   <span style=\"color: #a0522d;\">|</span>  4<span style=\"color: #a0522d;\">|</span>82 
<span style=\"color: #b22222;\">--</span><span style=\"color: #b22222;\">---------
</span> 6 <span style=\"color: #a0522d;\">|</span> 49<span style=\"color: #a0522d;\">|</span>7 8
3  <span style=\"color: #a0522d;\">|</span>  2<span style=\"color: #a0522d;\">|</span> 9 
   <span style=\"color: #a0522d;\">|</span> 85<span style=\"color: #a0522d;\">|</span>  </pre>

<p>have these possibilities:</p>

<pre><span style=\"color: #a0522d;\">*</span><span style=\"color: #228b22;\">Main</span><span style=\"color: #a0522d;\">&gt;</span> mapM_ (putStrLn <span style=\"color: #a0522d;\">.</span> show <span style=\"color: #a0522d;\">.</span> toList) <span style=\"color: #a0522d;\">$</span> map (possibilities (obv sample)) [(6, 0), (6, 1), (8, 1), (7, 2), (8, 2)]
[2,9]
[1,2,4,9]
[1,2,4,7,9]
[1,4]
[1,2,4]
<span style=\"color: #a0522d;\">*</span><span style=\"color: #228b22;\">Main</span><span style=\"color: #a0522d;\">&gt;</span> </pre>

<p>As you can see, only one of those possibility sets contains <code>7</code>, whereas the other values could go in more than one place. What we want, in terms of our existing board definition, is a way to put that value in the place it can uniquely occupy. That's done here:</p>

<pre><span style=\"color: #0000ff;\">uniqueInBlock</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">Board</span> <span style=\"color: #a0522d;\">-&gt;</span> (<span style=\"color: #228b22;\">Int</span>, <span style=\"color: #228b22;\">Int</span>) <span style=\"color: #a0522d;\">-&gt;</span> [(<span style=\"color: #228b22;\">Int</span>, <span style=\"color: #228b22;\">Int</span>, <span style=\"color: #228b22;\">Int</span>)]
<span style=\"color: #0000ff;\">uniqueInBlock</span> board (x, y) <span style=\"color: #a0522d;\">=</span> singles <span style=\"color: #a0522d;\">$</span> concatMap (toList <span style=\"color: #a0522d;\">.</span> thd) posMap
  <span style=\"color: #a020f0;\">where</span> posMap <span style=\"color: #a0522d;\">=</span> [(x', y', possibilities board (x', y')) <span style=\"color: #a0522d;\">|</span> (x', y') <span style=\"color: #a0522d;\">&lt;-</span> es]
        es <span style=\"color: #a0522d;\">=</span> blockEmpties board (x, y)
        singles <span style=\"color: #a0522d;\">=</span> map (findInMap <span style=\"color: #a0522d;\">.</span> head) <span style=\"color: #a0522d;\">.</span> filter ((<span style=\"color: #a0522d;\">==</span>1) <span style=\"color: #a0522d;\">.</span> length) <span style=\"color: #a0522d;\">.</span> group <span style=\"color: #a0522d;\">.</span> sort
        findInMap n <span style=\"color: #a0522d;\">=</span> <span style=\"color: #a020f0;\">let</span> (x, y, p) <span style=\"color: #a0522d;\">=</span> fromJust <span style=\"color: #a0522d;\">$</span> find (member n <span style=\"color: #a0522d;\">.</span> thd) posMap
                      <span style=\"color: #a020f0;\">in</span> (x, y, n)</pre>

<p>That function takes a <code>Board</code> and an <code>(x, y)</code>, and returns the coordinates and values of each unique value in <code>block board (x, y)</code>. In our example board, </p>

<pre><span style=\"color: #a0522d;\">*</span><span style=\"color: #228b22;\">Main</span><span style=\"color: #a0522d;\">&gt;</span> uniqueInBlock (obv sample) (6, 0)
[(8,1,7)]
<span style=\"color: #a0522d;\">*</span><span style=\"color: #228b22;\">Main</span><span style=\"color: #a0522d;\">&gt;</span> uniqueInBlock (obv sample) (6, 6)
[(6,8,3)]
<span style=\"color: #a0522d;\">*</span><span style=\"color: #228b22;\">Main</span><span style=\"color: #a0522d;\">&gt;</span> </pre>

<p><code>blockwise</code> just takes that result and returns a board which includes those values. Last one:</p>

<pre><span style=\"color: #0000ff;\">naiveSolve</span> <span style=\"color: #a0522d;\">::</span> [(<span style=\"color: #228b22;\">Board</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Board</span>)] <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Board</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Board</span>
<span style=\"color: #0000ff;\">naiveSolve</span> functions board <span style=\"color: #a0522d;\">=</span> rec functions board
  <span style=\"color: #a020f0;\">where</span> rec <span style=\"color: #228b22;\">[]</span> board <span style=\"color: #a0522d;\">=</span> board
        rec fns board <span style=\"color: #a0522d;\">=</span> <span style=\"color: #a020f0;\">case</span> <span style=\"color: #228b22;\">Set</span><span style=\"color: #a0522d;\">.</span>size <span style=\"color: #a0522d;\">$</span> empty new <span style=\"color: #a020f0;\">of</span>
          0 <span style=\"color: #a0522d;\">-&gt;</span> new
          <span style=\"color: #a020f0;\">_</span> <span style=\"color: #a0522d;\">-&gt;</span> rec nextFns new
          <span style=\"color: #a020f0;\">where</span> new <span style=\"color: #a0522d;\">=</span> (head fns) <span style=\"color: #a0522d;\">$</span> board
                nextFns <span style=\"color: #a0522d;\">=</span> <span style=\"color: #a020f0;\">if</span> new <span style=\"color: #a0522d;\">==</span> board <span style=\"color: #a020f0;\">then</span> tail fns <span style=\"color: #a020f0;\">else</span> functions</pre>

<p>I mentioned earlier that the way this works is by trying to repeatedly solve the obvious squares, and resorts to blockwise analysis and guessing only when that doesn't work. This is the part that does the first two. It takes a list of <code>(<span style=\"color: #228b22;\">Board</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Board</span>)</code> functions, and repeatedly calls the first one. If that yields a solved board (one with no empty spaces), it returns that. If that yields an unchanged board, it calls the next function, then repeats that pattern until it runs out of functions to call. The effect is:</p>

<pre><span style=\"color: #a0522d;\">*</span><span style=\"color: #228b22;\">Main</span><span style=\"color: #a0522d;\">&gt;</span> naiveSolve [obvious, blockwise] sample

 71<span style=\"color: #a0522d;\">|</span>4 8<span style=\"color: #a0522d;\">|</span> 35
   <span style=\"color: #a0522d;\">|</span> 53<span style=\"color: #a0522d;\">|</span> 87
  3<span style=\"color: #a0522d;\">|</span>9 7<span style=\"color: #a0522d;\">|</span>6  
<span style=\"color: #b22222;\">--</span><span style=\"color: #b22222;\">---------
</span>   <span style=\"color: #a0522d;\">|</span>  1<span style=\"color: #a0522d;\">|</span>   
 9 <span style=\"color: #a0522d;\">|</span>8 6<span style=\"color: #a0522d;\">|</span>  3
   <span style=\"color: #a0522d;\">|</span>  4<span style=\"color: #a0522d;\">|</span>82 
<span style=\"color: #b22222;\">--</span><span style=\"color: #b22222;\">---------
</span> 6 <span style=\"color: #a0522d;\">|</span>349<span style=\"color: #a0522d;\">|</span>7 8
3  <span style=\"color: #a0522d;\">|</span>  2<span style=\"color: #a0522d;\">|</span> 9 
   <span style=\"color: #a0522d;\">|</span> 85<span style=\"color: #a0522d;\">|</span>3 2

<span style=\"color: #a0522d;\">*</span><span style=\"color: #228b22;\">Main</span><span style=\"color: #a0522d;\">&gt;</span> </pre>

<p>Which is a board where the only remaining moves are ones where we need to guess...</p>

<pre><span style=\"color: #0000ff;\">guess</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">Board</span> <span style=\"color: #a0522d;\">-&gt;</span> [<span style=\"color: #228b22;\">Board</span>]
<span style=\"color: #0000ff;\">guess</span> board <span style=\"color: #a0522d;\">=</span> map (<span style=\"color: #a0522d;\">\\</span>v <span style=\"color: #a0522d;\">-&gt;</span> findEmpties <span style=\"color: #a0522d;\">$</span> board { values <span style=\"color: #a0522d;\">=</span> newVals v }) vs
  <span style=\"color: #a020f0;\">where</span> (x, y, vs) <span style=\"color: #a0522d;\">=</span> head <span style=\"color: #a0522d;\">$</span> sortBy (comparing (length <span style=\"color: #a0522d;\">.</span> thd)) posMap
        newVals v <span style=\"color: #a0522d;\">=</span> [[<span style=\"color: #a020f0;\">if</span> x <span style=\"color: #a0522d;\">==</span> x' <span style=\"color: #a0522d;\">&amp;&amp;</span> y <span style=\"color: #a0522d;\">==</span> y' <span style=\"color: #a020f0;\">then</span> v <span style=\"color: #a020f0;\">else</span> (values board) <span style=\"color: #a0522d;\">!!</span> y' <span style=\"color: #a0522d;\">!!</span> x' <span style=\"color: #a0522d;\">|</span> x' <span style=\"color: #a0522d;\">&lt;-</span> ixs board] <span style=\"color: #a0522d;\">|</span> y' <span style=\"color: #a0522d;\">&lt;-</span> ixs board]
        posMap <span style=\"color: #a0522d;\">=</span> [(x, y, toList <span style=\"color: #a0522d;\">$</span> possibilities board (x, y)) <span style=\"color: #a0522d;\">|</span> (x, y) <span style=\"color: #a0522d;\">&lt;-</span> es]
        es <span style=\"color: #a0522d;\">=</span> toList <span style=\"color: #a0522d;\">$</span> empty board</pre>

<p>... which is done by picking the space with the fewest number of possibilities, and returning all possible next boards. In other words, </p>

<pre><span style=\"color: #a0522d;\">*</span><span style=\"color: #228b22;\">Main</span><span style=\"color: #a0522d;\">&gt;</span> guess <span style=\"color: #a0522d;\">$</span> naiveSolve [obvious, blockwise] sample
[
 71<span style=\"color: #a0522d;\">|</span>4 8<span style=\"color: #a0522d;\">|</span> 35
 2 <span style=\"color: #a0522d;\">|</span> 53<span style=\"color: #a0522d;\">|</span> 87
  3<span style=\"color: #a0522d;\">|</span>9 7<span style=\"color: #a0522d;\">|</span>6  
<span style=\"color: #b22222;\">--</span><span style=\"color: #b22222;\">---------
</span>   <span style=\"color: #a0522d;\">|</span>  1<span style=\"color: #a0522d;\">|</span>   
 9 <span style=\"color: #a0522d;\">|</span>8 6<span style=\"color: #a0522d;\">|</span>  3
   <span style=\"color: #a0522d;\">|</span>  4<span style=\"color: #a0522d;\">|</span>82 
<span style=\"color: #b22222;\">--</span><span style=\"color: #b22222;\">---------
</span> 6 <span style=\"color: #a0522d;\">|</span>349<span style=\"color: #a0522d;\">|</span>7 8
3  <span style=\"color: #a0522d;\">|</span>  2<span style=\"color: #a0522d;\">|</span> 9 
   <span style=\"color: #a0522d;\">|</span> 85<span style=\"color: #a0522d;\">|</span>3 2
,
 71<span style=\"color: #a0522d;\">|</span>4 8<span style=\"color: #a0522d;\">|</span> 35
 4 <span style=\"color: #a0522d;\">|</span> 53<span style=\"color: #a0522d;\">|</span> 87
  3<span style=\"color: #a0522d;\">|</span>9 7<span style=\"color: #a0522d;\">|</span>6  
<span style=\"color: #b22222;\">--</span><span style=\"color: #b22222;\">---------
</span>   <span style=\"color: #a0522d;\">|</span>  1<span style=\"color: #a0522d;\">|</span>   
 9 <span style=\"color: #a0522d;\">|</span>8 6<span style=\"color: #a0522d;\">|</span>  3
   <span style=\"color: #a0522d;\">|</span>  4<span style=\"color: #a0522d;\">|</span>82 
<span style=\"color: #b22222;\">--</span><span style=\"color: #b22222;\">---------
</span> 6 <span style=\"color: #a0522d;\">|</span>349<span style=\"color: #a0522d;\">|</span>7 8
3  <span style=\"color: #a0522d;\">|</span>  2<span style=\"color: #a0522d;\">|</span> 9 
   <span style=\"color: #a0522d;\">|</span> 85<span style=\"color: #a0522d;\">|</span>3 2
]
<span style=\"color: #a0522d;\">*</span><span style=\"color: #228b22;\">Main</span><span style=\"color: #a0522d;\">&gt;</span> </pre>

<p>Note space <code>(1, 1)</code> there. Finally, we need to solve that.</p>

<pre><span style=\"color: #0000ff;\">solve</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">Board</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Board</span>
<span style=\"color: #0000ff;\">solve</span> board <span style=\"color: #a0522d;\">=</span> rec [naiveSolve [obvious, blockwise] board]
  <span style=\"color: #a020f0;\">where</span> solved board <span style=\"color: #a0522d;\">=</span> 0 <span style=\"color: #a0522d;\">==</span> (<span style=\"color: #228b22;\">Set</span><span style=\"color: #a0522d;\">.</span>size <span style=\"color: #a0522d;\">$</span> empty board)
        impossible board <span style=\"color: #a0522d;\">=</span> any ((<span style=\"color: #a0522d;\">==</span>0) <span style=\"color: #a0522d;\">.</span> length) <span style=\"color: #a0522d;\">.</span> map (toList <span style=\"color: #a0522d;\">.</span> possibilities board) <span style=\"color: #a0522d;\">.</span> toList <span style=\"color: #a0522d;\">$</span> empty board
        rec <span style=\"color: #228b22;\">[]</span> <span style=\"color: #a0522d;\">=</span> board <span style=\"color: #b22222;\">-- </span><span style=\"color: #b22222;\">Failed
</span>        rec <span style=\"color: #a0522d;\">!</span>boards <span style=\"color: #a0522d;\">=</span> <span style=\"color: #a020f0;\">case</span> find solved <span style=\"color: #a0522d;\">$</span> boards <span style=\"color: #a020f0;\">of</span>
          <span style=\"color: #228b22;\">Just</span> b <span style=\"color: #a0522d;\">-&gt;</span> b
          <span style=\"color: #228b22;\">Nothing</span> <span style=\"color: #a0522d;\">-&gt;</span> rec <span style=\"color: #a0522d;\">.</span> map (naiveSolve [obvious, blockwise]) <span style=\"color: #a0522d;\">.</span> concatMap guess <span style=\"color: #a0522d;\">$</span> filter (not <span style=\"color: #a0522d;\">.</span> impossible) boards</pre>

<p>That function takes a board, runs <code>naiveSolve</code> on it, and returns it if solved. Otherwise, it repeatedly runs <code>map (naiveSolve [obvious, blockwise]) . concatMap guess</code> on the list of boards that aren't impossible. and there, that solves Sudoku.</p>

<pre><span style=\"color: #a0522d;\">*</span><span style=\"color: #228b22;\">Main</span><span style=\"color: #a0522d;\">&gt;</span> solve sample

971<span style=\"color: #a0522d;\">|</span>468<span style=\"color: #a0522d;\">|</span>235
624<span style=\"color: #a0522d;\">|</span>153<span style=\"color: #a0522d;\">|</span>987
853<span style=\"color: #a0522d;\">|</span>927<span style=\"color: #a0522d;\">|</span>641
<span style=\"color: #b22222;\">--</span><span style=\"color: #b22222;\">---------
</span>538<span style=\"color: #a0522d;\">|</span>291<span style=\"color: #a0522d;\">|</span>476
492<span style=\"color: #a0522d;\">|</span>876<span style=\"color: #a0522d;\">|</span>153
716<span style=\"color: #a0522d;\">|</span>534<span style=\"color: #a0522d;\">|</span>829
<span style=\"color: #b22222;\">--</span><span style=\"color: #b22222;\">---------
</span>265<span style=\"color: #a0522d;\">|</span>349<span style=\"color: #a0522d;\">|</span>718
387<span style=\"color: #a0522d;\">|</span>612<span style=\"color: #a0522d;\">|</span>594
149<span style=\"color: #a0522d;\">|</span>785<span style=\"color: #a0522d;\">|</span>362

<span style=\"color: #a0522d;\">*</span><span style=\"color: #228b22;\">Main</span><span style=\"color: #a0522d;\">&gt;</span> </pre>

<p>That particular solution gets returned in under a second, even in <code>GHCi</code>. I mentioned that it works \"in the general case\". What I mean by that is that it can solve boards which are obvious, <i>and</i> those which require guessing, <b>and</b> those which are non-standard sizes<a href=\"#foot-Sun-Jun-02-173523EDT-2013\" name=\"note-Sun-Jun-02-173523EDT-2013\">[2]</a></p>

<p>So there. I'm not at all proud of this because it does fairly poorly on boards that require extensive guessing, even with the <code>-O2</code> option, and because as I'll show you <a href=\"/article?name=sudoku-reredux.html\">later today</a>, it's not anywhere near as elegant a solution as you can get.</p>

<p>But first, I need some tea.</p>

<hr />
<h5>Footnotes</h5>

<p>1 - <a href=\"#note-Sun-Jun-02-173100EDT-2013\" name=\"foot-Sun-Jun-02-173100EDT-2013\">[back]</a> - Though still quicker than that bogo-sort solution I described from the actual event.</p>

<p>2 - <a href=\"#note-Sun-Jun-02-173523EDT-2013\" name=\"foot-Sun-Jun-02-173523EDT-2013\">[back]</a> - Specifically, it handles 4x4, 9x9, 16x16, 25x25, etc. Any board with a block size such that <code>blockSize^2 == boardSize</code>. Most of the solutions both at the <a href=\"http://www.haskell.org/haskellwiki/Sudoku\">Haskellwiki</a> and at <a href=\"http://rosettacode.org/wiki/Sudoku\">Rosetta Code</a> solve 9x9 only. The larger boards obviously take more time and memory to solve.</p>
"))
((5202 3723 611952000) :INSERT (134 :POSTED 3579134400))
((5202 3723 611955000) :INSERT (134 :TAG :ALMOST-LITERATE-PROGRAMMING))
((5202 3723 611956000) :INSERT (134 :TAG :HASKELL))
((5202 3723 612645000) :INSERT (135 :TITLE "Sudoku ReRedux"))
((5202 3723 612650000) :INSERT (135 :FILE "sudoku-reredux.html"))
((5202 3723 612654000) :INSERT (135 :EDITED 3610300202))
((5202 3723 612656000) :INSERT
 (135 :BODY
  "<p>Ok, <i>this</i> is why I'm less than proud of <a href=\"/article?name=sudoku-redux.html\">that actually, factually working solution</a>.</p>

<pre><span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">List</span>
 
<span style=\"color: #0000ff;\">main</span> <span style=\"color: #a0522d;\">=</span> putStr <span style=\"color: #a0522d;\">.</span> unlines <span style=\"color: #a0522d;\">.</span> map disp <span style=\"color: #a0522d;\">.</span> solve <span style=\"color: #a0522d;\">.</span> return <span style=\"color: #a0522d;\">.</span> input <span style=\"color: #a0522d;\">=&lt;&lt;</span> getContents
 
<span style=\"color: #0000ff;\">solve</span> s <span style=\"color: #a0522d;\">=</span> foldr (<span style=\"color: #a0522d;\">\\</span>p l <span style=\"color: #a0522d;\">-&gt;</span> [mark (p,n) s <span style=\"color: #a0522d;\">|</span> s <span style=\"color: #a0522d;\">&lt;-</span> l, n <span style=\"color: #a0522d;\">&lt;-</span> s p]) s idx
 
<span style=\"color: #0000ff;\">mark</span> (p<span style=\"color: #a0522d;\">@</span>(i,j),n) s q<span style=\"color: #a0522d;\">@</span>(x,y)
    <span style=\"color: #a0522d;\">|</span> p <span style=\"color: #a0522d;\">==</span> q                             <span style=\"color: #a0522d;\">=</span> [n]
    <span style=\"color: #a0522d;\">|</span> x <span style=\"color: #a0522d;\">==</span> i <span style=\"color: #a0522d;\">||</span> y <span style=\"color: #a0522d;\">==</span> j <span style=\"color: #a0522d;\">||</span> e x i <span style=\"color: #a0522d;\">&amp;&amp;</span> e y j <span style=\"color: #a0522d;\">=</span> delete n (s q)
    <span style=\"color: #a0522d;\">|</span> otherwise                          <span style=\"color: #a0522d;\">=</span> s q
    <span style=\"color: #a020f0;\">where</span> e a b <span style=\"color: #a0522d;\">=</span> div (a<span style=\"color: #a0522d;\">-</span>1) 3 <span style=\"color: #a0522d;\">==</span> div (b<span style=\"color: #a0522d;\">-</span>1) 3
 
<span style=\"color: #0000ff;\">disp</span> s <span style=\"color: #a0522d;\">=</span> unlines [unwords [show <span style=\"color: #a0522d;\">$</span> head <span style=\"color: #a0522d;\">$</span> s (i,j) <span style=\"color: #a0522d;\">|</span> j <span style=\"color: #a0522d;\">&lt;-</span> [1<span style=\"color: #a0522d;\">..</span>9]] <span style=\"color: #a0522d;\">|</span> i <span style=\"color: #a0522d;\">&lt;-</span> [1<span style=\"color: #a0522d;\">..</span>9]]
 
<span style=\"color: #0000ff;\">input</span> s <span style=\"color: #a0522d;\">=</span> foldr mark (const [1<span style=\"color: #a0522d;\">..</span>9]) <span style=\"color: #a0522d;\">$</span>
  [(p,n) <span style=\"color: #a0522d;\">|</span> (p,n) <span style=\"color: #a0522d;\">&lt;-</span> zip idx <span style=\"color: #a0522d;\">$</span> map read <span style=\"color: #a0522d;\">$</span> lines s <span style=\"color: #a0522d;\">&gt;&gt;=</span> words, n<span style=\"color: #a0522d;\">&gt;</span>0]
 
<span style=\"color: #0000ff;\">idx</span> <span style=\"color: #a0522d;\">=</span> [(i,j) <span style=\"color: #a0522d;\">|</span> i <span style=\"color: #a0522d;\">&lt;-</span> [1<span style=\"color: #a0522d;\">..</span>9], j <span style=\"color: #a0522d;\">&lt;-</span> [1<span style=\"color: #a0522d;\">..</span>9]]</pre>

<p>Except, as I mentioned, that one cheats by omitting the type signatures<a href=\"#foot-Sun-Jun-02-232557EDT-2013\" name=\"note-Sun-Jun-02-232557EDT-2013\">[1]</a>, so here's the original on which it was based:</p>

<pre><span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Data.List</span>

<span style=\"color: #a020f0;\">type</span> <span style=\"color: #228b22;\">T</span> <span style=\"color: #a0522d;\">=</span> (<span style=\"color: #228b22;\">Int</span>,<span style=\"color: #228b22;\">Int</span>) <span style=\"color: #a0522d;\">-&gt;</span> [<span style=\"color: #228b22;\">Int</span>]

<span style=\"color: #0000ff;\">main</span> <span style=\"color: #a0522d;\">=</span> <span style=\"color: #a020f0;\">do</span>
  s <span style=\"color: #a0522d;\">&lt;-</span> getContents
  putStr <span style=\"color: #a0522d;\">$</span> unlines <span style=\"color: #a0522d;\">$</span> map disp <span style=\"color: #a0522d;\">$</span> solve [input s]

<span style=\"color: #0000ff;\">solve</span> <span style=\"color: #a0522d;\">::</span> [<span style=\"color: #228b22;\">T</span>] <span style=\"color: #a0522d;\">-&gt;</span> [<span style=\"color: #228b22;\">T</span>]
<span style=\"color: #0000ff;\">solve</span> s <span style=\"color: #a0522d;\">=</span> foldr search s idx <span style=\"color: #a020f0;\">where</span>
    search p l <span style=\"color: #a0522d;\">=</span> [mark (p,n) s <span style=\"color: #a0522d;\">|</span> s <span style=\"color: #a0522d;\">&lt;-</span> l, n <span style=\"color: #a0522d;\">&lt;-</span> s p]

<span style=\"color: #0000ff;\">mark</span> <span style=\"color: #a0522d;\">::</span> ((<span style=\"color: #228b22;\">Int</span>,<span style=\"color: #228b22;\">Int</span>),<span style=\"color: #228b22;\">Int</span>) <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">T</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">T</span>
<span style=\"color: #0000ff;\">mark</span> (p<span style=\"color: #a0522d;\">@</span>(i,j),n) s q<span style=\"color: #a0522d;\">@</span>(x,y) <span style=\"color: #a0522d;\">=</span>
  <span style=\"color: #a020f0;\">if</span> p<span style=\"color: #a0522d;\">==</span>q <span style=\"color: #a020f0;\">then</span> [n] <span style=\"color: #a020f0;\">else</span>
  <span style=\"color: #a020f0;\">if</span> x<span style=\"color: #a0522d;\">==</span>i <span style=\"color: #a0522d;\">||</span> y<span style=\"color: #a0522d;\">==</span>j <span style=\"color: #a0522d;\">||</span> e x i <span style=\"color: #a0522d;\">&amp;&amp;</span> e y j <span style=\"color: #a020f0;\">then</span> delete n <span style=\"color: #a0522d;\">$</span> s q <span style=\"color: #a020f0;\">else</span> s q
  <span style=\"color: #a020f0;\">where</span> e a b <span style=\"color: #a0522d;\">=</span> div (a<span style=\"color: #a0522d;\">-</span>1) 3<span style=\"color: #a0522d;\">==</span>div (b<span style=\"color: #a0522d;\">-</span>1) 3

<span style=\"color: #0000ff;\">disp</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">T</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">String</span>
<span style=\"color: #0000ff;\">disp</span> s  <span style=\"color: #a0522d;\">=</span> unlines [unwords [show <span style=\"color: #a0522d;\">$</span> head <span style=\"color: #a0522d;\">$</span> s (i,j) <span style=\"color: #a0522d;\">|</span> j <span style=\"color: #a0522d;\">&lt;-</span> [1<span style=\"color: #a0522d;\">..</span>9]] <span style=\"color: #a0522d;\">|</span> i <span style=\"color: #a0522d;\">&lt;-</span> [1<span style=\"color: #a0522d;\">..</span>9]]

<span style=\"color: #0000ff;\">input</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">String</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">T</span>
<span style=\"color: #0000ff;\">input</span> s <span style=\"color: #a0522d;\">=</span> foldr mark (const [1<span style=\"color: #a0522d;\">..</span>9]) <span style=\"color: #a0522d;\">$</span>
  [(p,n) <span style=\"color: #a0522d;\">|</span> (p,n) <span style=\"color: #a0522d;\">&lt;-</span> zip idx <span style=\"color: #a0522d;\">$</span> map read <span style=\"color: #a0522d;\">$</span> lines s <span style=\"color: #a0522d;\">&gt;&gt;=</span> words, n<span style=\"color: #a0522d;\">&gt;</span>0]

<span style=\"color: #0000ff;\">idx</span> <span style=\"color: #a0522d;\">::</span> [(<span style=\"color: #228b22;\">Int</span>,<span style=\"color: #228b22;\">Int</span>)]
<span style=\"color: #0000ff;\">idx</span> <span style=\"color: #a0522d;\">=</span> [(i,j) <span style=\"color: #a0522d;\">|</span> i <span style=\"color: #a0522d;\">&lt;-</span> [1<span style=\"color: #a0522d;\">..</span>9], j <span style=\"color: #a0522d;\">&lt;-</span> [1<span style=\"color: #a0522d;\">..</span>9]]</pre>

<p>This is not the most readable code ever; its goal is supreme elegance<a href=\"#foot-Sun-Jun-02-232606EDT-2013\" name=\"note-Sun-Jun-02-232606EDT-2013\">[2]</a>, not instant clarity. It took me a couple of days thinking on-and-off, as well as a read-through of this almost equivalent <a href=\"http://www.thenewsh.com/~newsham/x/machine/sud.py\">Python transliteration</a><a href=\"#foot-Sun-Jun-02-232612EDT-2013\" name=\"note-Sun-Jun-02-232612EDT-2013\">[3]</a> to finally understand what the hell is going on here.</p>

<p>Lets get the obvious out of the way.</p>

<pre><span style=\"color: #0000ff;\">disp</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">T</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">String</span>
<span style=\"color: #0000ff;\">disp</span> s  <span style=\"color: #a0522d;\">=</span> unlines [unwords [show <span style=\"color: #a0522d;\">$</span> head <span style=\"color: #a0522d;\">$</span> s (i,j) <span style=\"color: #a0522d;\">|</span> j <span style=\"color: #a0522d;\">&lt;-</span> [1<span style=\"color: #a0522d;\">..</span>9]] <span style=\"color: #a0522d;\">|</span> i <span style=\"color: #a0522d;\">&lt;-</span> [1<span style=\"color: #a0522d;\">..</span>9]]</pre>

<p>This takes a board (whose type is named <code><span style=\"color: #228b22;\">T</span></code> for some reason), and returns its string representation.</p>

<pre><span style=\"color: #0000ff;\">input</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">String</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">T</span>
<span style=\"color: #0000ff;\">input</span> s <span style=\"color: #a0522d;\">=</span> foldr mark (const [1<span style=\"color: #a0522d;\">..</span>9]) <span style=\"color: #a0522d;\">$</span>
  [(p,n) <span style=\"color: #a0522d;\">|</span> (p,n) <span style=\"color: #a0522d;\">&lt;-</span> zip idx <span style=\"color: #a0522d;\">$</span> map read <span style=\"color: #a0522d;\">$</span> lines s <span style=\"color: #a0522d;\">&gt;&gt;=</span> words, n<span style=\"color: #a0522d;\">&gt;</span>0]</pre>

<p>This takes a string representation and returns a board.</p>

<pre><span style=\"color: #0000ff;\">idx</span> <span style=\"color: #a0522d;\">::</span> [(<span style=\"color: #228b22;\">Int</span>,<span style=\"color: #228b22;\">Int</span>)]
<span style=\"color: #0000ff;\">idx</span> <span style=\"color: #a0522d;\">=</span> [(i,j) <span style=\"color: #a0522d;\">|</span> i <span style=\"color: #a0522d;\">&lt;-</span> [1<span style=\"color: #a0522d;\">..</span>9], j <span style=\"color: #a0522d;\">&lt;-</span> [1<span style=\"color: #a0522d;\">..</span>9]]</pre>

<p>This returns all the <code>(y, x)</code> coordinates in a 9x9 board.</p>

<pre><span style=\"color: #0000ff;\">main</span> <span style=\"color: #a0522d;\">=</span> <span style=\"color: #a020f0;\">do</span>
  s <span style=\"color: #a0522d;\">&lt;-</span> getContents
  putStr <span style=\"color: #a0522d;\">$</span> unlines <span style=\"color: #a0522d;\">$</span> map disp <span style=\"color: #a0522d;\">$</span> solve [input s]</pre>

<p>This takes from standard in, tries to interpret the result as a board, solve it and print it.</p>

<pre><span style=\"color: #a020f0;\">type</span> <span style=\"color: #228b22;\">T</span> <span style=\"color: #a0522d;\">=</span> (<span style=\"color: #228b22;\">Int</span>,<span style=\"color: #228b22;\">Int</span>) <span style=\"color: #a0522d;\">-&gt;</span> [<span style=\"color: #228b22;\">Int</span>]</pre>

<p>And finally, this is how a board is represented; it's a function of one argument, an <code><span style=\"color: #228b22;\">Int</span>, <span style=\"color: #228b22;\">Int</span></code> tuple, and returns a list of possible values, a <code>[<span style=\"color: #228b22;\">Int</span>]</code>.</p>

<p>Before we go any further, there are a lot of naming conventions here that are aimed at terseness rather than comprehensibility of the resulting code. So lets just do a naive renaming for now.</p>

<pre><span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Data.List</span>

<span style=\"color: #a020f0;\">type</span> <span style=\"color: #228b22;\">Board</span> <span style=\"color: #a0522d;\">=</span> (<span style=\"color: #228b22;\">Int</span>,<span style=\"color: #228b22;\">Int</span>) <span style=\"color: #a0522d;\">-&gt;</span> [<span style=\"color: #228b22;\">Int</span>]

<span style=\"color: #0000ff;\">main</span> <span style=\"color: #a0522d;\">=</span> <span style=\"color: #a020f0;\">do</span>
  boardString <span style=\"color: #a0522d;\">&lt;-</span> getContents
  putStr <span style=\"color: #a0522d;\">.</span> unlines <span style=\"color: #a0522d;\">.</span> map disp <span style=\"color: #a0522d;\">$</span> solve [input boardString]

<span style=\"color: #0000ff;\">solve</span> <span style=\"color: #a0522d;\">::</span> [<span style=\"color: #228b22;\">Board</span>] <span style=\"color: #a0522d;\">-&gt;</span> [<span style=\"color: #228b22;\">Board</span>]
<span style=\"color: #0000ff;\">solve</span> boards <span style=\"color: #a0522d;\">=</span> foldr search boards idx <span style=\"color: #a020f0;\">where</span>
    search (x, y) boards <span style=\"color: #a0522d;\">=</span> [mark ((x, y),val) brd <span style=\"color: #a0522d;\">|</span> brd <span style=\"color: #a0522d;\">&lt;-</span> boards, val <span style=\"color: #a0522d;\">&lt;-</span> brd (x, y)]

<span style=\"color: #0000ff;\">mark</span> <span style=\"color: #a0522d;\">::</span> ((<span style=\"color: #228b22;\">Int</span>,<span style=\"color: #228b22;\">Int</span>),<span style=\"color: #228b22;\">Int</span>) <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Board</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Board</span>
<span style=\"color: #0000ff;\">mark</span> (p<span style=\"color: #a0522d;\">@</span>(x,y),val) board p'<span style=\"color: #a0522d;\">@</span>(x',y') <span style=\"color: #a0522d;\">=</span> 
  <span style=\"color: #a020f0;\">if</span> p<span style=\"color: #a0522d;\">==</span>p' <span style=\"color: #a020f0;\">then</span> [val] <span style=\"color: #a020f0;\">else</span> 
    <span style=\"color: #a020f0;\">if</span> x<span style=\"color: #a0522d;\">==</span>x' <span style=\"color: #a0522d;\">||</span> y<span style=\"color: #a0522d;\">==</span>y' <span style=\"color: #a0522d;\">||</span> blockBound x x' <span style=\"color: #a0522d;\">&amp;&amp;</span> blockBound y y' <span style=\"color: #a020f0;\">then</span> delete val <span style=\"color: #a0522d;\">$</span> board p' <span style=\"color: #a020f0;\">else</span> board p'
  <span style=\"color: #a020f0;\">where</span> blockBound a b <span style=\"color: #a0522d;\">=</span> div (a<span style=\"color: #a0522d;\">-</span>1) 3<span style=\"color: #a0522d;\">==</span>div (b<span style=\"color: #a0522d;\">-</span>1) 3

<span style=\"color: #0000ff;\">disp</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">Board</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">String</span>
<span style=\"color: #0000ff;\">disp</span> board <span style=\"color: #a0522d;\">=</span> unlines [unwords [show <span style=\"color: #a0522d;\">.</span> head <span style=\"color: #a0522d;\">$</span> board (x,y) <span style=\"color: #a0522d;\">|</span> y <span style=\"color: #a0522d;\">&lt;-</span> [1<span style=\"color: #a0522d;\">..</span>9]] <span style=\"color: #a0522d;\">|</span> x <span style=\"color: #a0522d;\">&lt;-</span> [1<span style=\"color: #a0522d;\">..</span>9]]

<span style=\"color: #0000ff;\">input</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">String</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Board</span>
<span style=\"color: #0000ff;\">input</span> boardString <span style=\"color: #a0522d;\">=</span> foldr mark (const [1<span style=\"color: #a0522d;\">..</span>9]) <span style=\"color: #a0522d;\">$</span>
  [((x, y),val) <span style=\"color: #a0522d;\">|</span> ((x, y),val) <span style=\"color: #a0522d;\">&lt;-</span> zip idx <span style=\"color: #a0522d;\">.</span> map read <span style=\"color: #a0522d;\">$</span> lines boardString <span style=\"color: #a0522d;\">&gt;&gt;=</span> words, val<span style=\"color: #a0522d;\">&gt;</span>0]

<span style=\"color: #0000ff;\">idx</span> <span style=\"color: #a0522d;\">::</span> [(<span style=\"color: #228b22;\">Int</span>,<span style=\"color: #228b22;\">Int</span>)]
<span style=\"color: #0000ff;\">idx</span> <span style=\"color: #a0522d;\">=</span> [(x,y) <span style=\"color: #a0522d;\">|</span> y <span style=\"color: #a0522d;\">&lt;-</span> [1<span style=\"color: #a0522d;\">..</span>9], x <span style=\"color: #a0522d;\">&lt;-</span> [1<span style=\"color: #a0522d;\">..</span>9]]</pre>

<p>Granted, we can no longer claim \"707 bytes\", but even this minor renaming makes the end result a bit more understandable. On to the difficult parts.</p>

<pre><span style=\"color: #0000ff;\">mark</span> <span style=\"color: #a0522d;\">::</span> ((<span style=\"color: #228b22;\">Int</span>,<span style=\"color: #228b22;\">Int</span>),<span style=\"color: #228b22;\">Int</span>) <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Board</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Board</span>
<span style=\"color: #0000ff;\">mark</span> (p<span style=\"color: #a0522d;\">@</span>(x,y),val) board p'<span style=\"color: #a0522d;\">@</span>(x',y') <span style=\"color: #a0522d;\">=</span> 
  <span style=\"color: #a020f0;\">if</span> p<span style=\"color: #a0522d;\">==</span>p' <span style=\"color: #a020f0;\">then</span> [val] <span style=\"color: #a020f0;\">else</span> 
    <span style=\"color: #a020f0;\">if</span> x<span style=\"color: #a0522d;\">==</span>x' <span style=\"color: #a0522d;\">||</span> y<span style=\"color: #a0522d;\">==</span>y' <span style=\"color: #a0522d;\">||</span> blockBound x x' <span style=\"color: #a0522d;\">&amp;&amp;</span> blockBound y y' <span style=\"color: #a020f0;\">then</span> delete val <span style=\"color: #a0522d;\">$</span> board p' <span style=\"color: #a020f0;\">else</span> board p'
  <span style=\"color: #a020f0;\">where</span> blockBound a b <span style=\"color: #a0522d;\">=</span> div (a<span style=\"color: #a0522d;\">-</span>1) 3<span style=\"color: #a0522d;\">==</span>div (b<span style=\"color: #a0522d;\">-</span>1) 3

<span style=\"color: #0000ff;\">input</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">String</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Board</span>
<span style=\"color: #0000ff;\">input</span> boardString <span style=\"color: #a0522d;\">=</span> foldr mark (const [1<span style=\"color: #a0522d;\">..</span>9]) <span style=\"color: #a0522d;\">$</span>
  [((x, y),val) <span style=\"color: #a0522d;\">|</span> ((x, y),val) <span style=\"color: #a0522d;\">&lt;-</span> zip idx <span style=\"color: #a0522d;\">.</span> map read <span style=\"color: #a0522d;\">$</span> lines boardString <span style=\"color: #a0522d;\">&gt;&gt;=</span> words, val<span style=\"color: #a0522d;\">&gt;</span>0]

<span style=\"color: #0000ff;\">solve</span> <span style=\"color: #a0522d;\">::</span> [<span style=\"color: #228b22;\">Board</span>] <span style=\"color: #a0522d;\">-&gt;</span> [<span style=\"color: #228b22;\">Board</span>]
<span style=\"color: #0000ff;\">solve</span> boards <span style=\"color: #a0522d;\">=</span> foldr search boards idx <span style=\"color: #a020f0;\">where</span>
  search (x, y) boards <span style=\"color: #a0522d;\">=</span> [mark ((x, y),val) brd <span style=\"color: #a0522d;\">|</span> brd <span style=\"color: #a0522d;\">&lt;-</span> boards, val <span style=\"color: #a0522d;\">&lt;-</span> brd (x, y)]</pre>

<p>The high level of what's going on here is that you're representing a board as a function of <code>(<span style=\"color: #228b22;\">Int</span>, <span style=\"color: #228b22;\">Int</span>) <span style=\"color: #a0522d;\">-&gt;</span> [<span style=\"color: #228b22;\">Int</span>]</code>, and <code>mark</code>ing spaces by wrapping that function up in a dispatch/delete which returns pruned results in some circumstances.</p>

<pre><span style=\"color: #0000ff;\">mark</span> <span style=\"color: #a0522d;\">::</span> ((<span style=\"color: #228b22;\">Int</span>,<span style=\"color: #228b22;\">Int</span>),<span style=\"color: #228b22;\">Int</span>) <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Board</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Board</span>
<span style=\"color: #0000ff;\">mark</span> (p<span style=\"color: #a0522d;\">@</span>(x,y),val) board p'<span style=\"color: #a0522d;\">@</span>(x',y') <span style=\"color: #a0522d;\">=</span> 
  <span style=\"color: #a020f0;\">if</span> p<span style=\"color: #a0522d;\">==</span>p' <span style=\"color: #a020f0;\">then</span> [val] <span style=\"color: #a020f0;\">else</span> 
    <span style=\"color: #a020f0;\">if</span> x<span style=\"color: #a0522d;\">==</span>x' <span style=\"color: #a0522d;\">||</span> y<span style=\"color: #a0522d;\">==</span>y' <span style=\"color: #a0522d;\">||</span> blockBound x x' <span style=\"color: #a0522d;\">&amp;&amp;</span> blockBound y y' <span style=\"color: #a020f0;\">then</span> delete val <span style=\"color: #a0522d;\">$</span> board p' <span style=\"color: #a020f0;\">else</span> board p'
  <span style=\"color: #a020f0;\">where</span> blockBound a b <span style=\"color: #a0522d;\">=</span> div (a<span style=\"color: #a0522d;\">-</span>1) 3<span style=\"color: #a0522d;\">==</span>div (b<span style=\"color: #a0522d;\">-</span>1) 3</pre>

<p>This function uses some uncommon notation, and isn't really structured the way you'd expect in a Haskell program. That initial 12-line solution actually does a marginally better job of it. Here's a slightly revised, but equivalent version<a href=\"#foot-Sun-Jun-02-232722EDT-2013\" name=\"note-Sun-Jun-02-232722EDT-2013\">[7]</a></p>

<pre><span style=\"color: #0000ff;\">mark</span> <span style=\"color: #a0522d;\">::</span> ((<span style=\"color: #228b22;\">Int</span>,<span style=\"color: #228b22;\">Int</span>),<span style=\"color: #228b22;\">Int</span>) <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Board</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Board</span>
<span style=\"color: #0000ff;\">mark</span> (p<span style=\"color: #a0522d;\">@</span>(x,y),val) board p'<span style=\"color: #a0522d;\">@</span>(x',y') 
  <span style=\"color: #a0522d;\">|</span> p <span style=\"color: #a0522d;\">==</span> p' <span style=\"color: #a0522d;\">=</span> 
    [val]
  <span style=\"color: #a0522d;\">|</span> x<span style=\"color: #a0522d;\">==</span>x' <span style=\"color: #a0522d;\">||</span> y<span style=\"color: #a0522d;\">==</span>y' <span style=\"color: #a0522d;\">||</span> blockBound x x' <span style=\"color: #a0522d;\">&amp;&amp;</span> blockBound y y' <span style=\"color: #a0522d;\">=</span> 
    delete val <span style=\"color: #a0522d;\">$</span> board p'
  <span style=\"color: #a0522d;\">|</span> otherwise <span style=\"color: #a0522d;\">=</span>
    board p'
  <span style=\"color: #a020f0;\">where</span> blockBound a b <span style=\"color: #a0522d;\">=</span> div (a<span style=\"color: #a0522d;\">-</span>1) 3<span style=\"color: #a0522d;\">==</span>div (b<span style=\"color: #a0522d;\">-</span>1) 3</pre>

<p>That uses the more common <a href=\"http://learnyouahaskell.com/syntax-in-functions#guards-guards\">guard statements</a> rather than a cascaded <code><span style=\"color: #a020f0;\">if</span></code>/<code><span style=\"color: #a020f0;\">then</span></code>/<code><span style=\"color: #a020f0;\">else</span></code>. The input line and type signature on this one is what threw me for the longest time, so I'm going to linger there for a moment.</p>

<pre><span style=\"color: #0000ff;\">mark</span> <span style=\"color: #a0522d;\">::</span> ((<span style=\"color: #228b22;\">Int</span>,<span style=\"color: #228b22;\">Int</span>),<span style=\"color: #228b22;\">Int</span>) <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Board</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Board</span>
<span style=\"color: #0000ff;\">mark</span> (p<span style=\"color: #a0522d;\">@</span>(x,y),val) board p'<span style=\"color: #a0522d;\">@</span>(x',y') </pre>

<p>Remember, our <code>Board</code> is defined as <code>((<span style=\"color: #228b22;\">Int</span>, <span style=\"color: #228b22;\">Int</span>) <span style=\"color: #a0522d;\">-&gt;</span> [<span style=\"color: #228b22;\">Int</span>])</code>, so that type signature could also be written </p>

<pre><span style=\"color: #0000ff;\">mark</span> <span style=\"color: #a0522d;\">::</span> ((<span style=\"color: #228b22;\">Int</span>,<span style=\"color: #228b22;\">Int</span>),<span style=\"color: #228b22;\">Int</span>) <span style=\"color: #a0522d;\">-&gt;</span> (<span style=\"color: #228b22;\">Int</span>, <span style=\"color: #228b22;\">Int</span>) <span style=\"color: #a0522d;\">-&gt;</span> [<span style=\"color: #228b22;\">Int</span>] <span style=\"color: #a0522d;\">-&gt;</span> (<span style=\"color: #228b22;\">Int</span>, <span style=\"color: #228b22;\">Int</span>) <span style=\"color: #a0522d;\">-&gt;</span> [<span style=\"color: #228b22;\">Int</span>]</pre>

<p>which should ironically clarify things. The actual arguments aren't doing anyone any favors either. The <code><span style=\"color: #a0522d;\">@</span></code>s there are applying labels to some destructured constructs. The end result is that you can use the name <code>p</code> instead of <code>(x, y)</code> and <code>p'</code> instead of <code>(x', y')</code>. The following code is equivalent, but very slightly longer<a href=\"#foot-Sun-Jun-02-232734EDT-2013\" name=\"note-Sun-Jun-02-232734EDT-2013\">[8]</a>:</p>

<pre><span style=\"color: #0000ff;\">mark</span> ((x,y),val) board (x',y') 
  <span style=\"color: #a0522d;\">|</span> (x, y) <span style=\"color: #a0522d;\">==</span> (x', y') <span style=\"color: #a0522d;\">=</span> 
    [val]
  <span style=\"color: #a0522d;\">|</span> x<span style=\"color: #a0522d;\">==</span>x' <span style=\"color: #a0522d;\">||</span> y<span style=\"color: #a0522d;\">==</span>y' <span style=\"color: #a0522d;\">||</span> blockBound x x' <span style=\"color: #a0522d;\">&amp;&amp;</span> blockBound y y' <span style=\"color: #a0522d;\">=</span> 
    delete val <span style=\"color: #a0522d;\">$</span> board (x', y')
  <span style=\"color: #a0522d;\">|</span> otherwise <span style=\"color: #a0522d;\">=</span>
    board (x', y')
  <span style=\"color: #a020f0;\">where</span> blockBound a b <span style=\"color: #a0522d;\">=</span> div (a<span style=\"color: #a0522d;\">-</span>1) 3<span style=\"color: #a0522d;\">==</span>div (b<span style=\"color: #a0522d;\">-</span>1) 3</pre>

<p>Right, so that's how you <code>mark</code> a value. Except it doesn't really make sense in isolation. Not until we take a look at, at minimum, <code>input</code></p>

<pre><span style=\"color: #0000ff;\">input</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">String</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Board</span>
<span style=\"color: #0000ff;\">input</span> boardString <span style=\"color: #a0522d;\">=</span> foldr mark (const [1<span style=\"color: #a0522d;\">..</span>9]) <span style=\"color: #a0522d;\">$</span>
  [((x, y),val) <span style=\"color: #a0522d;\">|</span> ((x, y),val) <span style=\"color: #a0522d;\">&lt;-</span> zip idx <span style=\"color: #a0522d;\">.</span> map read <span style=\"color: #a0522d;\">$</span> lines boardString <span style=\"color: #a0522d;\">&gt;&gt;=</span> words, val<span style=\"color: #a0522d;\">&gt;</span>0]</pre>

<p>This is the function that takes a board string and returns an actual board constructed from it. The main operation there is <code>foldr</code>, and I'm going to assume you understand how a fold works for this exercise. If you don't, read <a href=\"http://stackoverflow.com/questions/1757740/how-foldr-works\">this</a> and <a href=\"http://stackoverflow.com/questions/384797/implications-of-foldr-vs-foldl-or-foldl\">this</a>, then do some googling. <code>(const [1..9])</code> is a function that always returns the list of integers from <code>1</code> to <code>9</code>, inclusive. It's equivalent to <code>(<span style=\"color: #a0522d;\">\\</span><span style=\"color: #a020f0;\">_</span> <span style=\"color: #a0522d;\">-&gt;</span> [1,2,3,4,5,6,7,8,9])</code><a href=\"#foot-Sun-Jun-02-232746EDT-2013\" name=\"note-Sun-Jun-02-232746EDT-2013\">[9]</a>. What it produces... is a bit trickier. It has to do with an inherent property of Haskell, and that type signature for <code>mark</code> I showed earlier.</p>

<pre><span style=\"color: #0000ff;\">mark</span> <span style=\"color: #a0522d;\">::</span> ((<span style=\"color: #228b22;\">Int</span>,<span style=\"color: #228b22;\">Int</span>),<span style=\"color: #228b22;\">Int</span>) <span style=\"color: #a0522d;\">-&gt;</span> (<span style=\"color: #228b22;\">Int</span>, <span style=\"color: #228b22;\">Int</span>) <span style=\"color: #a0522d;\">-&gt;</span> [<span style=\"color: #228b22;\">Int</span>] <span style=\"color: #a0522d;\">-&gt;</span> (<span style=\"color: #228b22;\">Int</span>, <span style=\"color: #228b22;\">Int</span>) <span style=\"color: #a0522d;\">-&gt;</span> [<span style=\"color: #228b22;\">Int</span>]</pre>

<p>First off, Haskell partially applies everything by default. Meaning that if you pass fewer than 4 arguments to <code>mark</code>, what you actually get back is a function that takes the next argument, and returns either the next partial or the final result. If you take a look at <code>foldr</code>, its type is</p>

<pre><span style=\"color: #0000ff;\">foldr</span> <span style=\"color: #a0522d;\">::</span> (a <span style=\"color: #a0522d;\">-&gt;</span> b <span style=\"color: #a0522d;\">-&gt;</span> b) <span style=\"color: #a0522d;\">-&gt;</span> b <span style=\"color: #a0522d;\">-&gt;</span> [a] <span style=\"color: #a0522d;\">-&gt;</span> b</pre>

<p>which means that it'll be treating <code>mark</code> as a function of two arguments. Note that the second argument is itself a function. Specifically, a <code>(<span style=\"color: #228b22;\">Int</span>, <span style=\"color: #228b22;\">Int</span>) <span style=\"color: #a0522d;\">-&gt;</span> [<span style=\"color: #228b22;\">Int</span>]</code>, which means that <code>mark</code> will be getting three of its arguments filled. It might be easier to think about it like this</p>

<pre><span style=\"color: #0000ff;\">mark</span> <span style=\"color: #a0522d;\">::</span> ((<span style=\"color: #228b22;\">Int</span>,<span style=\"color: #228b22;\">Int</span>),<span style=\"color: #228b22;\">Int</span>) <span style=\"color: #a0522d;\">-&gt;</span> ((<span style=\"color: #228b22;\">Int</span>, <span style=\"color: #228b22;\">Int</span>) <span style=\"color: #a0522d;\">-&gt;</span> [<span style=\"color: #228b22;\">Int</span>]) <span style=\"color: #a0522d;\">-&gt;</span> (<span style=\"color: #228b22;\">Int</span>, <span style=\"color: #228b22;\">Int</span>) <span style=\"color: #a0522d;\">-&gt;</span> [<span style=\"color: #228b22;\">Int</span>]</pre>

<p>but since <i>every</i> function in Haskell can be applied partially, those are equivalent types. The end result of that fold operation is another function of <code>(<span style=\"color: #228b22;\">Int</span>, <span style=\"color: #228b22;\">Int</span>) <span style=\"color: #a0522d;\">-&gt;</span> [<span style=\"color: #228b22;\">Int</span>]</code>. Lets take a real close look at what's going on there.</p>

<p>This is the empty board</p>

<pre>0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0</pre>

<p>Because it only contains zeros, it'll be represented as <code>(const [1..9])</code>. Of course, it also has to be encoded as</p>

<pre><span style=\"color: #8b2252;\">\"0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\"</span></pre>

<p>but that first one is easier to read.</p>

<pre><span style=\"color: #228b22;\">GHCi</span>, version 7<span style=\"color: #a0522d;\">.</span>4<span style=\"color: #a0522d;\">.</span>1<span style=\"color: #228b22;\">:</span> http<span style=\"color: #228b22;\">://</span>www<span style=\"color: #a0522d;\">.</span>haskell<span style=\"color: #a0522d;\">.</span>org<span style=\"color: #a0522d;\">/</span>ghc<span style=\"color: #a0522d;\">/</span>  <span style=\"color: #228b22;\">:?</span> for help
<span style=\"color: #228b22;\">Loading</span> package ghc<span style=\"color: #a0522d;\">-</span>prim <span style=\"color: #a0522d;\">...</span> linking <span style=\"color: #a0522d;\">...</span> done<span style=\"color: #a0522d;\">.</span>
<span style=\"color: #228b22;\">Loading</span> package integer<span style=\"color: #a0522d;\">-</span>gmp <span style=\"color: #a0522d;\">...</span> linking <span style=\"color: #a0522d;\">...</span> done<span style=\"color: #a0522d;\">.</span>
<span style=\"color: #228b22;\">Loading</span> package base <span style=\"color: #a0522d;\">...</span> linking <span style=\"color: #a0522d;\">...</span> done<span style=\"color: #a0522d;\">.</span>
<span style=\"color: #228b22;\">Prelude</span><span style=\"color: #0000ff;\">&gt;</span> <span style=\"color: #228b22;\">:</span>load <span style=\"color: #8b2252;\">\"/home/inaimathi/projects/code-retreat/sudoku/sudoku-elegant.hs\"</span>
[1 <span style=\"color: #a020f0;\">of</span> 1] <span style=\"color: #228b22;\">Compiling</span> <span style=\"color: #228b22;\">Main</span>             ( <span style=\"color: #a0522d;\">/</span>home<span style=\"color: #a0522d;\">/</span>inaimathi<span style=\"color: #a0522d;\">/</span>projects<span style=\"color: #a0522d;\">/</span>code<span style=\"color: #a0522d;\">-</span>retreat<span style=\"color: #a0522d;\">/</span>sudoku<span style=\"color: #a0522d;\">/</span>sudoku<span style=\"color: #a0522d;\">-</span>elegant<span style=\"color: #a0522d;\">.</span>hs, interpreted )
<span style=\"color: #228b22;\">Ok</span>, modules loaded<span style=\"color: #228b22;\">:</span> <span style=\"color: #228b22;\">Main</span><span style=\"color: #a0522d;\">.</span>
<span style=\"color: #a0522d;\">*</span><span style=\"color: #228b22;\">Main</span><span style=\"color: #a0522d;\">&gt;</span> <span style=\"color: #a020f0;\">let</span> b <span style=\"color: #a0522d;\">=</span> input <span style=\"color: #8b2252;\">\"0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\"</span>
<span style=\"color: #a0522d;\">*</span><span style=\"color: #228b22;\">Main</span><span style=\"color: #a0522d;\">&gt;</span> b (1, 2)
[1,2,3,4,5,6,7,8,9]
<span style=\"color: #a0522d;\">*</span><span style=\"color: #228b22;\">Main</span><span style=\"color: #a0522d;\">&gt;</span> b (1, 3)
[1,2,3,4,5,6,7,8,9]
<span style=\"color: #a0522d;\">*</span><span style=\"color: #228b22;\">Main</span><span style=\"color: #a0522d;\">&gt;</span> b (6, 3)
[1,2,3,4,5,6,7,8,9]
<span style=\"color: #a0522d;\">*</span><span style=\"color: #228b22;\">Main</span><span style=\"color: #a0522d;\">&gt;</span> </pre>

<p>Now, adding a value makes sure it recurs once.</p>

<pre><span style=\"color: #a0522d;\">*</span><span style=\"color: #228b22;\">Main</span><span style=\"color: #a0522d;\">&gt;</span> <span style=\"color: #a020f0;\">let</span> b2 <span style=\"color: #a0522d;\">=</span> input <span style=\"color: #8b2252;\">\"4 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\"</span>
<span style=\"color: #a0522d;\">*</span><span style=\"color: #228b22;\">Main</span><span style=\"color: #a0522d;\">&gt;</span> b2 (1, 1)
[4]
<span style=\"color: #a0522d;\">*</span><span style=\"color: #228b22;\">Main</span><span style=\"color: #a0522d;\">&gt;</span> b2 (1, 2)
[1,2,3,5,6,7,8,9]
<span style=\"color: #a0522d;\">*</span><span style=\"color: #228b22;\">Main</span><span style=\"color: #a0522d;\">&gt;</span> b2 (2, 1)
[1,2,3,5,6,7,8,9]
<span style=\"color: #a0522d;\">*</span><span style=\"color: #228b22;\">Main</span><span style=\"color: #a0522d;\">&gt;</span> b2 (2, 3)
[1,2,3,5,6,7,8,9]
<span style=\"color: #a0522d;\">*</span><span style=\"color: #228b22;\">Main</span><span style=\"color: #a0522d;\">&gt;</span> b2 (5, 5)
[1,2,3,4,5,6,7,8,9]
<span style=\"color: #a0522d;\">*</span><span style=\"color: #228b22;\">Main</span><span style=\"color: #a0522d;\">&gt;</span> </pre>

<p>That's the key to understanding this. Lets do the <a href=\"http://mitpress.mit.edu/books/little-schemer\">Little Schemer</a> thing, and break <code>input</code> down. Not necessarily the way GHC does it, but so that we can conceptually understand what's happening here.</p>

<pre>00}} input <span style=\"color: #8b2252;\">\"4 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0\"</span>

01}} foldr mark (const [1<span style=\"color: #a0522d;\">..</span>9]) <span style=\"color: #a0522d;\">$</span> 
                [((x, y),val) <span style=\"color: #a0522d;\">|</span> 
                 ((x, y),val) <span style=\"color: #a0522d;\">&lt;-</span> zip idx <span style=\"color: #a0522d;\">.</span> 
                                 map read <span style=\"color: #a0522d;\">$</span> 
                                     lines boardString 
                                     <span style=\"color: #a0522d;\">&gt;&gt;=</span> words, 
                                     val<span style=\"color: #a0522d;\">&gt;</span>0]

02}} foldr mark (const [1<span style=\"color: #a0522d;\">..</span>9]) <span style=\"color: #a0522d;\">$</span> 
                [((x, y),val) <span style=\"color: #a0522d;\">|</span> 
                 ((x, y),val) <span style=\"color: #a0522d;\">&lt;-</span> zip idx <span style=\"color: #a0522d;\">.</span> 
                                 map read <span style=\"color: #a0522d;\">$</span> 
                                     [<span style=\"color: #8b2252;\">\"4 0 0 0 0 0 0 0 0\"</span>,
                                      <span style=\"color: #8b2252;\">\"0 0 0 0 0 0 0 0 0\"</span>,
                                      <span style=\"color: #8b2252;\">\"0 0 0 0 0 0 0 0 0\"</span>,
                                      <span style=\"color: #8b2252;\">\"0 0 0 0 0 0 0 0 0\"</span>,
                                      <span style=\"color: #8b2252;\">\"0 0 0 0 0 0 0 0 0\"</span>,
                                      <span style=\"color: #8b2252;\">\"0 0 0 0 0 0 0 0 0\"</span>,
                                      <span style=\"color: #8b2252;\">\"0 0 0 0 0 0 0 0 0\"</span>,
                                      <span style=\"color: #8b2252;\">\"0 0 0 0 0 0 0 0 0\"</span>,
                                      <span style=\"color: #8b2252;\">\"0 0 0 0 0 0 0 0 0\"</span>]
                                     <span style=\"color: #a0522d;\">&gt;&gt;=</span> words, 
                                     val<span style=\"color: #a0522d;\">&gt;</span>0]

03}} foldr mark (const [1<span style=\"color: #a0522d;\">..</span>9]) <span style=\"color: #a0522d;\">$</span> [((1, 1), 4)]

04}} foldr (<span style=\"color: #a0522d;\">\\</span>((x,y),val) board (x',y') 
             <span style=\"color: #a0522d;\">|</span> (x, y) <span style=\"color: #a0522d;\">==</span> (x', y') <span style=\"color: #a0522d;\">=</span> 
               [val]
             <span style=\"color: #a0522d;\">|</span> x<span style=\"color: #a0522d;\">==</span>x' <span style=\"color: #a0522d;\">||</span> y<span style=\"color: #a0522d;\">==</span>y' <span style=\"color: #a0522d;\">||</span> blockBound x x' <span style=\"color: #a0522d;\">&amp;&amp;</span> blockBound y y' <span style=\"color: #a0522d;\">=</span> 
               delete val <span style=\"color: #a0522d;\">$</span> board (x', y')
             <span style=\"color: #a0522d;\">|</span> otherwise <span style=\"color: #a0522d;\">=</span>
               board (x', y')
             <span style=\"color: #a020f0;\">where</span> blockBound a b <span style=\"color: #a0522d;\">=</span> div (a<span style=\"color: #a0522d;\">-</span>1) 3<span style=\"color: #a0522d;\">==</span>div (b<span style=\"color: #a0522d;\">-</span>1) 3)
           (const [1<span style=\"color: #a0522d;\">..</span>9]) <span style=\"color: #a0522d;\">$</span>
           [((1, 1), 4)]

05}} (<span style=\"color: #a0522d;\">\\</span>board (x',y') 
        <span style=\"color: #a0522d;\">|</span> (1, 1) <span style=\"color: #a0522d;\">==</span> (x', y') <span style=\"color: #a0522d;\">=</span> 
          [4]
        <span style=\"color: #a0522d;\">|</span> 1<span style=\"color: #a0522d;\">==</span>x' <span style=\"color: #a0522d;\">||</span> 1<span style=\"color: #a0522d;\">==</span>y' <span style=\"color: #a0522d;\">||</span> blockBound 1 x' <span style=\"color: #a0522d;\">&amp;&amp;</span> blockBound 1 y' <span style=\"color: #a0522d;\">=</span> 
          delete 4 <span style=\"color: #a0522d;\">$</span> board (x', y')
        <span style=\"color: #a0522d;\">|</span> otherwise <span style=\"color: #a0522d;\">=</span>
          board (x', y')
        <span style=\"color: #a020f0;\">where</span> blockBound a b <span style=\"color: #a0522d;\">=</span> div (a<span style=\"color: #a0522d;\">-</span>1) 3<span style=\"color: #a0522d;\">==</span>div (b<span style=\"color: #a0522d;\">-</span>1) 3) (const [1<span style=\"color: #a0522d;\">..</span>9])

06}} (<span style=\"color: #a0522d;\">\\</span>(x',y') 
        <span style=\"color: #a0522d;\">|</span> (1, 1) <span style=\"color: #a0522d;\">==</span> (x', y') <span style=\"color: #a0522d;\">=</span> 
          [4]
        <span style=\"color: #a0522d;\">|</span> 1<span style=\"color: #a0522d;\">==</span>x' <span style=\"color: #a0522d;\">||</span> 1<span style=\"color: #a0522d;\">==</span>y' <span style=\"color: #a0522d;\">||</span> blockBound 1 x' <span style=\"color: #a0522d;\">&amp;&amp;</span> blockBound 1 y' <span style=\"color: #a0522d;\">=</span> 
          delete 4 <span style=\"color: #a0522d;\">$</span> (const [1<span style=\"color: #a0522d;\">..</span>9]) (x', y')
        <span style=\"color: #a0522d;\">|</span> otherwise <span style=\"color: #a0522d;\">=</span>
          (const [1<span style=\"color: #a0522d;\">..</span>9]) (x', y')
        <span style=\"color: #a020f0;\">where</span> blockBound a b <span style=\"color: #a0522d;\">=</span> div (a<span style=\"color: #a0522d;\">-</span>1) 3<span style=\"color: #a0522d;\">==</span>div (b<span style=\"color: #a0522d;\">-</span>1) 3)</pre>

<p>And there. If we added another space, it would unfold another level, with the entire step <code>06}}</code> there being slotted in instead of <code>(const [1..9])</code>. Ok, last bit.</p>

<pre><span style=\"color: #0000ff;\">solve</span> <span style=\"color: #a0522d;\">::</span> [<span style=\"color: #228b22;\">Board</span>] <span style=\"color: #a0522d;\">-&gt;</span> [<span style=\"color: #228b22;\">Board</span>]
<span style=\"color: #0000ff;\">solve</span> boards <span style=\"color: #a0522d;\">=</span> foldr search boards idx <span style=\"color: #a020f0;\">where</span>
  search (x, y) boards <span style=\"color: #a0522d;\">=</span> [mark ((x, y),val) brd <span style=\"color: #a0522d;\">|</span> brd <span style=\"color: #a0522d;\">&lt;-</span> boards, val <span style=\"color: #a0522d;\">&lt;-</span> brd (x, y)]</pre>

<p>Hopefully, now that I've un<code>foldr</code>d the definition of <code>input</code>, this is intuitively obvious. <code>search</code> is an internal function that takes a list of boards and a space <code>(x, y)</code>, and attempts to solve for them. It does this by taking each possibility for that space on each board and <code>mark</code>ing them, collecting all the results. If you look carefully, and have read those <code>foldr</code> links from earlier, this also explains why the Haskell version starts returning answers very quickly. The way iteration unfolds here, the first board is going to be solved quite a while before the complete sequence is solved, which means it'll be returned and printed quickly and thereafter not take further resources from the program.</p>

<p>The <a href=\"http://web.math.unifi.it/users/maggesi/haskell_sudoku_solver.html\">page \"explaining\" this code</a> claims that it's \"neither fast nor clever\", and the Python version states that it's \"Not the ideal way to solve Sudoku\", but I'm honestly having a hard time imagining one that would give you any kind of gain, either in terms of performance or elegance<a href=\"#foot-Sun-Jun-02-232819EDT-2013\" name=\"note-Sun-Jun-02-232819EDT-2013\">[10]</a>.</p>

<p>Possibly the most interesting thing about this solution for me is that, since it generates a list of all possible boards given a solution, you write a generator fairly simply<a href=\"#foot-Sun-Jun-02-232823EDT-2013\" name=\"note-Sun-Jun-02-232823EDT-2013\">[11]</a> using something along the lines of <code>choice $ solve [input . take 161 $ cycle \"0 \"]</code>, then redacting the results to a desired difficulty level. That might be another thing for me to throw some time at.</p>


<hr />
<h5>Footnotes</h5>
<p>1 - <a href=\"#note-Sun-Jun-02-232557EDT-2013\" name=\"foot-Sun-Jun-02-232557EDT-2013\">[back]</a> -Which, judging by the responses I get whenever I ask for comments on my Haskell code, is somewhere between grossly impolite and crime-against-<a href=\"http://i.imgur.com/YfUwh.jpg\">humanatee</a>.</p>

<p>2 - <a href=\"#note-Sun-Jun-02-232606EDT-2013\" name=\"foot-Sun-Jun-02-232606EDT-2013\">[back]</a> -Which it hits, in my opinion.</p>

<p>3 - <a href=\"#note-Sun-Jun-02-232612EDT-2013\" name=\"foot-Sun-Jun-02-232612EDT-2013\">[back]</a> -Python doesn't have the same approach to partial functions that Haskell does, so the transliteration is both slightly easier to understand <i>and</i> slightly clunkier.<a href=\"#foot-Sun-Jun-02-232619EDT-2013\" name=\"note-Sun-Jun-02-232619EDT-2013\">[4]</a> It also uses <code><a href=\"http://foldl.com/\">foldl</a></code> instead of <code><a href=\"http://foldr.com/\">foldr</a></code>, because Python only comes with an implementation of <code>foldl</code>. Something tells me this kneecaps the <code>.py</code> versions' performance. Testing it out on the sample data listed at the bottom of <a href=\"http://web.math.unifi.it/users/maggesi/haskell_sudoku_solver.html\">this page</a>, after manually sanitizing for spaces, seems to confirm that suspicion. On my machine, it spun up to 100% usage on one core until it occupied all of my memory, then sat there paging until I <code>kill</code>ed it. The Haskell solution, by contrast, starts producing results very close to instantly, puts all 4 cores to good use, and utterly fails to mem-rape my laptop before computing all possible solutions, which it does well before the Python version produces any solutions<a href=\"#foot-Sun-Jun-02-232625EDT-2013\" name=\"note-Sun-Jun-02-232625EDT-2013\">[5]</a>.</p>

<p>4 - <a href=\"#note-Sun-Jun-02-232619EDT-2013\" name=\"foot-Sun-Jun-02-232619EDT-2013\">[back]</a> -That's Python for you far as I can tell, in case you were wondering. It could almost be their slogan. \"Python: Easier to understand and fatter than Haskell.\".</p>

<p>5 - <a href=\"#note-Sun-Jun-02-232625EDT-2013\" name=\"foot-Sun-Jun-02-232625EDT-2013\">[back]</a> -So I guess that slogan should really be \"Python: Easier to understand, fatter and much slower than Haskell.\"<a href=\"#foot-Sun-Jun-02-232633EDT-2013\" name=\"note-Sun-Jun-02-232633EDT-2013\">[6]</a>.</p>

<p>6 - <a href=\"#note-Sun-Jun-02-232633EDT-2013\" name=\"foot-Sun-Jun-02-232633EDT-2013\">[back]</a> -Ok, that isn't entirely fair; this example wasn't optimized in any sense of the word. It uses list comprehensions instead of generators, and could probably implement a lazy <code>foldr</code> equivalent to start returning results right away. I'll put a bit of time into that later.</p>

<p>7 - <a href=\"#note-Sun-Jun-02-232722EDT-2013\" name=\"foot-Sun-Jun-02-232722EDT-2013\">[back]</a> -As an aside here, it's mildly frustrating that every single gain in clarity in this exercise adds lines to the final count. I wish there was a way of being clearer <i>while</i> being more succinct.</p>

<p>8 - <a href=\"#note-Sun-Jun-02-232734EDT-2013\" name=\"foot-Sun-Jun-02-232734EDT-2013\">[back]</a> -which I get the feeling is why the author chose to use the <code><span style=\"color: #a0522d;\">@</span></code>s.</p>

<p>9 - <a href=\"#note-Sun-Jun-02-232746EDT-2013\" name=\"foot-Sun-Jun-02-232746EDT-2013\">[back]</a> -though in this particular case, it'll be treated as <code>(<span style=\"color: #a0522d;\">\\</span>(<span style=\"color: #a020f0;\">_</span>, <span style=\"color: #a020f0;\">_</span>) <span style=\"color: #a0522d;\">-&gt;</span> [1,2,3,4,5,6,7,8,9]) <span style=\"color: #a0522d;\">::</span> ((<span style=\"color: #228b22;\">Int</span>, <span style=\"color: #228b22;\">Int</span>) <span style=\"color: #a0522d;\">-&gt;</span> [<span style=\"color: #228b22;\">Int</span>])</code> because of how <code><span style=\"color: #228b22;\">Board</span></code> is defined.</p>

<p>10 - <a href=\"#note-Sun-Jun-02-232819EDT-2013\" name=\"foot-Sun-Jun-02-232819EDT-2013\">[back]</a> -Though, obviously, I think clarity could be somewhat improved.</p>

<p>11 - <a href=\"#note-Sun-Jun-02-232823EDT-2013\" name=\"foot-Sun-Jun-02-232823EDT-2013\">[back]</a> -I was going to say \"Trivially\", and then promptly lost 40 minutes to trying to figure out why exactly it is that an <code><span style=\"color: #228b22;\">RVar</span> [<span style=\"color: #228b22;\">Int</span>]</code> can't be <code>show</code>n by default, <i>or</i> have its contents <code>putStr</code>d no matter how much <code>liftM</code> was applied. \"Easier to understand, but fatter and slower than Haskell\", also happens to be why I've been using Python at work. Haskell makes certain, very well understood things supremely easy, but as soon as I sit down to do something like output or randomness that's trivial in other languages, I find myself suffering a few hours of headaches before figuring it out. I also happen to agree <a href=\"http://vimeo.com/12060509\">with Sussman about the core point</a>; implementing things that are very well understood is not the primary goal of programming.</p>
"))
((5202 3723 613008000) :INSERT (135 :POSTED 3579134400))
((5202 3723 613009000) :INSERT (135 :TAG :ALMOST-LITERATE-PROGRAMMING))
((5202 3723 613011000) :INSERT (135 :TAG :HASKELL))
((5202 3723 613206000) :INSERT (136 :TITLE "Elm First Impressions"))
((5202 3723 613211000) :INSERT (136 :FILE "elm-first-impressions.html"))
((5202 3723 613213000) :INSERT (136 :EDITED 3610022331))
((5202 3723 613214000) :INSERT
 (136 :BODY
  "<p>For the past little while, I've been poking around a new language named <a href=\"http://elm-lang.org/\">Elm</a>. A Haskell-like web front-end language with a heavy focus on <a href=\"http://en.wikipedia.org/wiki/Functional_reactive_programming\">FRP</a>. Actually, no, it's not <i>like</i> Haskell, its <a href=\"http://elm-lang.org/learn/Syntax.elm\">syntax</a> <i>is</i> Haskell except for a few <a href=\"http://elm-lang.org/learn/Syntax.elm#things-not-in-elm\">omissions</a><a href=\"#foot-Mon-Jun-17-232836EDT-2013\" name=\"note-Mon-Jun-17-232836EDT-2013\">[1]</a>, a <a href=\"http://elm-lang.org/learn/Syntax.elm#type-annotations\">couple</a> justifiable <a href=\"http://elm-lang.org/learn/Syntax.elm#records\">small</a> changes, and a couple pointlessly gratuitous differences<a href=\"#foot-Mon-Jun-17-232840EDT-2013\" name=\"note-Mon-Jun-17-232840EDT-2013\">[2]</a>. To the point that the actual, official <a href=\"http://elm-lang.org/Download.elm\">recommendation</a> is to just use <a href=\"http://projects.haskell.org/haskellmode-emacs/\">Haskell mode</a> to edit Elm files.</p> 

<p>This works pretty well, except for one thing: Elm has a <a href=\"http://elm-lang.org/edit/examples/Elements/Markdown.elm\">built-in reader macro for Markdown</a> input. Using this feature in Haskell mode plays all kinds of hell with your indentation and highlighting. Enough that I thought it worth-it to hack a workaround in using <a href=\"http://www.welton.it/freesoftware/files/two-mode-mode.el\"><code>two-mode-mode</code></a>. This is far from ideal, but bear with me. You need to get <code>two-mode-mode</code> from that previous link, do a search/replace for <code>mode-name</code> into <code>major-mode</code>, and delete the line that reads <code>(make-local-hook 'post-command-hook)</code>. Then, you have to add the following to your <code>.emacs</code> somewhere:</p>

<pre>(<span style=\"color: #a020f0;\">require</span> '<span style=\"color: #008b8b;\">two-mode-mode</span>)
(setq default-mode (list <span style=\"color: #8b2252;\">\"Haskell\"</span> 'haskell-mode)
      second-modes (list (list <span style=\"color: #8b2252;\">\"Markdown\"</span> <span style=\"color: #8b2252;\">\"\\[markdown|\"</span> <span style=\"color: #8b2252;\">\"|\\]\"</span> 'markdown-mode)))</pre>

<p>and then run <code>two-mode-mode</code> whenever you're editing <code>.elm</code> files. The end result is that, whenever you enter a <code>markdown</code> block with your cursor, your major mode will automatically change to <code>markdown-mode</code>, and change back to <code>haskell-mode</code> when you leave. There <i>has</i> to be a better solution than this, probably involving one of the other <a href=\"http://www.emacswiki.org/emacs/MultipleModes\">Multiple Modes modules</a>, and I'll put some thought into it when I get a bit of time.</p>

<h3>Installation/Basics</h3>

<p>Installing is ridiculously easy. If you've ever installed a module for Haskell, you won't have trouble. It's just <code>cabal update; cabal install elm elm-server</code>. Do the <code>update</code> first, like it says there; the language hasn't reached <code>1.0</code> status as of this writing, which means that it's quite likely there will be significant changes by the time you get around to following these instructions.</p>

<p>You write code into <code>.elm</code> files, which you can either preview dynamically or compile. You do the dynamic preview thing by running <code>elm-server</code> in your working directory. That starts up a server listening on <code>http://localhost:8000</code> that automatically compiles or re-compiles any <code>.elm</code> file you request. That server runs on <a href=\"http://www.happstack.com/page/view-page-slug/1/happstack\">Happstack</a>, and does a good enough job that the official <a href=\"http://elm-lang.org/\"><code>elm-lang</code> site</a> seems to serve directly from it.</p>

<p>If you're like me though, you prefer to use static files for your actual front-end. You can use <code>elm --make --minify [filename]</code> to generate a working <code>.html</code> file<a href=\"#foot-Mon-Jun-17-232850EDT-2013\" name=\"note-Mon-Jun-17-232850EDT-2013\">[3]</a> that you can serve up along with the <code>elm-runtime</code> from whatever application server you want to use.</p>

<p>Enough with the minutia though. Really, I'm here to give you a paragraph or two on what I think about the language.</p>

<h3>What I think about the Language</h3>

<p>The usual disclaimers apply.</p>

<ul>
  <li>you'll easily find more people who are familiar with JS/HTML than those who are familiar with Elm</li>
  <li>if you use it, there's an extra<a href=\"#foot-Mon-Jun-17-232855EDT-2013\" name=\"note-Mon-Jun-17-232855EDT-2013\">[4]</a> abstraction layer between you and the final front-end</li>
  <li>using it forces your users to enable JavaScript. Ostensibly, you can use the compiler to generate <code>noscript</code> tags, but all these seem to do is statically document what the page <i>would</i> do if JS was on.</li>
</ul>

<p>That second one in particular means that once again, you really should learn JavaScript before trying to use Elm to save yourself from it.</p>

<p>Once you get past that, it's quite beautiful and elegant. Much better than plain JS for <i>some</i> front-end work. Not that that's a very high bar.</p>

<p>There's some stuff conspicuously missing, like my beloved <a href=\"http://www.w3schools.com/html/html5_serversentevents.asp\">SSEs</a>, and some basic DOM interactions including <code><a href=\"http://jqueryui.com/draggable/\">draggable</a></code> and an arbitrary, <a href=\"http://www.w3schools.com/jsref/event_onclick.asp\">element-triggered <code>click</code></a> event. The approaches available out-of-the-box are respectively, <a href=\"http://elm-lang.org/edit/examples/Reactive/Transforms.elm\">Drag Only One Element That You Can't Drop</a> and <a href=\"http://www.grzegorzbalcerek.net/elm/TicTacToe.elm\">Detect Mouse Location On A Click, Then Dispatch Based On It</a>. Neither of those seem very satisfying. In fact, the proposed workarounds look strictly worse to me than the <a href=\"http://elm-lang.org/learn/Escape-from-Callback-Hell.elm\">\"callback hell\" this language is trying to save me from</a>.</p>

<p>Those shortcomings are just getting me more interested, to be honest. The reason being that it looks like it's possible to implement additional <a href=\"https://github.com/evancz/Elm/tree/master/libraries/Native\">native functionality</a> fairly easily, so all it'll do is cause me to spend some time writing up the appropriate, signal-based libraries to do these things.</p>

<p>Overall first impressions so far are good, though I'm seriously questioning how useful this language is going to be for more complicated interfaces. In the short term, I'll test out its shallow limits by writing a new <a href=\"https://github.com/Inaimathi/web-mote\">WebMote</a> front-end.</p>

<p>I'll let you know how it goes.</p>

<hr />
<h5>Footnotes</h5>
<p>1 - <a href=\"#note-Mon-Jun-17-232836EDT-2013\" name=\"foot-Mon-Jun-17-232836EDT-2013\">[back]</a> - Which I'm pretty sure will eventually be addressed. I particularly miss full sections and <code><span style=\"color: #a020f0;\">where</span></code>, though you'd think the multi-line function declarations would be the biggest gap.</p>

<p>2 - <a href=\"#note-Mon-Jun-17-232840EDT-2013\" name=\"foot-Mon-Jun-17-232840EDT-2013\">[back]</a> - For no reason I could see, <code>:</code> is Elm's type annotation operator, while <code>::</code> is Elm's <code>cons</code>. It's precisely the opposite in Haskell, and buys little enough that I hereby formally question the decision. Similar reasoning seems to apply to the operator <code>&lt;|</code>, which seems to do exactly the same thing as Haskells' <code>$</code>, except that it's twice as long.</p>

<p>3 - <a href=\"#note-Mon-Jun-17-232850EDT-2013\" name=\"foot-Mon-Jun-17-232850EDT-2013\">[back]</a> - Or separate <code>.html</code> and <code>.js</code> files, if you also passed the <code>-s</code> flag.</p>

<p>4 - <a href=\"#note-Mon-Jun-17-232855EDT-2013\" name=\"foot-Mon-Jun-17-232855EDT-2013\">[back]</a> - Not particularly stable, yet.</p>
"))
((5202 3723 613273000) :INSERT (136 :POSTED 3580430400))
((5202 3723 613275000) :INSERT (136 :TAG :ELISP))
((5202 3723 613279000) :INSERT (136 :TAG :ELM))
((5202 3723 613281000) :INSERT (136 :TAG :HASKELL))
((5202 3723 613452000) :INSERT (137 :TITLE "Dragging in an FRP Context"))
((5202 3723 613457000) :INSERT (137 :FILE "dragging-in-an-frp-context.html"))
((5202 3723 613459000) :INSERT (137 :EDITED 3610301137))
((5202 3723 613461000) :INSERT
 (137 :BODY
  "<p>I made an off-the-cuff remark <a href=\"/article?name=elm-first-impressions.html\">earlier</a> to the effect that Elm doesn't let you easily define drag/drop functionality, or element-originating clicks. Really, the situation is that you can't easily work with <i>any</i> of the basic <a href=\"/article?name=elm-first-impressions.html\">HTML events</a>, which also include hovering, element-originating keypresses, various window events, and various form events. When you think about how you'd implement any of them individually, it starts to become obvious why that is.</p>

<p>The first reflex is to reach for callbacks. Which, <a href=\"http://elm-lang.org/learn/Escape-from-Callback-Hell.elm\">as was already discussed</a>, is the exact opposite of what Elm is trying to do. The real trouble begins when you consider how you'd do the same thing <i>without</i> callbacks in order to preserve that purity of purpose.</p>

<h3>First Pass</h3>

<p>The obvious solution is to use a bunch of signals everywhere. One for each of the element-based events. Let the user specify signal values on elements, and dispatch on their results at the other end.</p>

<p>Except thats quite complex.</p>

<p>At first glance, you're looking at twenty or so global signals, <i>each</i> of which are going to have the kind of isolated, complicated dispatch we saw in <a href=\"http://www.grzegorzbalcerek.net/elm/TicTacToe.elm\">that Tic Tac Toe example</a>. That sounds worse in every way than callback hell; all your dispatch needs to be centralized, which means that behavior under various circumstances will by definition be separated from the element it pertains to, and you suddenly can't understand any component of your program without understanding the central signal dispatch code.</p>

<h3>Second Pass</h3>

<p>Another approach might be not to let the user specify signal values. Make them hooks to the relevant element. Expose some kind of interface to the user so that they can pipe other signal values into various properties of that element, and call it a day.</p>

<p>Also, we don't really need to have a signal per HTML event. For the situations I'm currently thinking about, we could get away with exactly two. <code><span style=\"color: #228b22;\">Keyboard</span><span style=\"color: #0000ff;\">.</span>focus</code> and <code><span style=\"color: #228b22;\">Mouse</span><span style=\"color: #0000ff;\">.</span>focus</code> will give me most of what I'd want in a pretty simple way. Basically, have <code>mouseover</code>, <code>mouseout</code>, <code>mousedown</code>, <code>mouseup</code> and <code>mouseclick</code> send <code><span style=\"color: #008b8b;\">this</span></code> over the <code><span style=\"color: #228b22;\">Mouse</span><span style=\"color: #0000ff;\">.</span>focus</code> signal, and let <code>mouseclick</code>, <code>esc</code> and <code>tab</code> send the same over the <code><span style=\"color: #228b22;\">Keyboard</span><span style=\"color: #0000ff;\">.</span>focus</code> signal.</p>

<p>You'd then have some idea of what needs to be moved as a result.</p>

<h3>User Side</h3>

<p>Of course, that's all base implementation stuff. On the client side, you don't want to have to do things like maintain your own table of draggables to dispatch a signal to when relevant. You'd want to be able to do something like</p>

<pre><span style=\"color: #0000ff;\">draggable</span> dragDefs <span style=\"color: #a0522d;\">$</span> plainText <span style=\"color: #8b2252;\">\"This text is draggable\"</span></pre>

<p>and have that tap the right signals so that when you <code>mousedown</code> or <code>touch</code> on <code>\"This text is draggable\"</code>, it starts moving along with the cursor. In basic terms what needs to happen is</p>

<ul>
  <li>when the mouse down signal is being sent</li>
  <li>and the <code><span style=\"color: #228b22;\">Mouse</span><span style=\"color: #0000ff;\">.</span>focus</code> signal is referring to a draggable</li>
  <li>start piping cursor position, modified by initial deltas, into the <code>x</code> and <code>y</code> coordinates of that element</li>
</ul>

<p>and I have no idea what the appropriate way to express that is in the framework of the existing Elm language.</p>

<p>It sounds like it might just be easier to avoid those interactions while I'm starting out. <a href=\"http://www.w3schools.com/html/html5_serversentevents.asp\">SSEs</a> sound like they'd be a much easier first feature, actually.</p>

<h3>SSEs</h3>

<p>The reason being that, when you think about it, this fits perfectly into the FRP paradigm. A source is a signal whose value is the latest matching message body and/or id. That's it. You'd want the declaration to look something like</p>

<pre><span style=\"color: #0000ff;\">src</span> <span style=\"color: #a0522d;\">=</span> eventSource <span style=\"color: #8b2252;\">\"/my/source/uri\"</span> [<span style=\"color: #8b2252;\">\"message type 1\"</span>, <span style=\"color: #8b2252;\">\"message type 2\"</span> <span style=\"color: #a0522d;\">...</span>]</pre>

<p>at which point <code>src</code> should be a signal you can pass around, whose current value will be the latest message coming out of <code>\"/my/source/uri\"</code> that has one of the message types specified. It might also be useful to handle unlabeled messages, at which point our message needs to look something like</p>

<pre><span style=\"color: #a020f0;\">data</span> <span style=\"color: #228b22;\">SSE</span> <span style=\"color: #a0522d;\">=</span> <span style=\"color: #228b22;\">SSE</span> { id <span style=\"color: #a0522d;\">:</span> <span style=\"color: #228b22;\">Maybe</span> <span style=\"color: #228b22;\">Int</span>, label <span style=\"color: #a0522d;\">:</span> <span style=\"color: #228b22;\">Maybe</span> <span style=\"color: #228b22;\">String</span>, body <span style=\"color: #a0522d;\">:</span> <span style=\"color: #228b22;\">String</span> }</pre>

<p>Manageable, if slightly annoying due to the optional fields.</p>

<p>You'd implement a rolling message by piping <code>src</code> through <code>plainText . .body</code>, and you could put together a very simple chat program with some judicious use of <code><a href=\"http://elm-lang.org/docs/Signal.elm\">foldp</a></code>.</p>

<p>These were all just some random thoughts I wanted a good look at, for the time being. Like I said, I'll be throwing my next few spare hours at putting together an Elm-based <a href=\"https://github.com/Inaimathi/web-mote\">WebMote</a> front-end. Fortunately, this task doesn't involve any in-depth interaction, and the SSEs aren't central to the exercise.</p>
"))
((5202 3723 613509000) :INSERT (137 :POSTED 3580516800))
((5202 3723 613510000) :INSERT (137 :TAG :ELM))
((5202 3723 613512000) :INSERT (137 :TAG :IDEA-PEELING))
((5202 3723 613961000) :INSERT (138 :TITLE "Elm In Practice"))
((5202 3723 613966000) :INSERT (138 :FILE "elm-in-practice.html"))
((5202 3723 613968000) :INSERT (138 :EDITED 3610022331))
((5202 3723 613969000) :INSERT
 (138 :BODY
  "<p>So I've gotten some time in with it. Not quite enough to finalize the new interface, though I do have an unstyled 95% version running on my local with an apropos <a href=\"http://www.youtube.com/watch?v=YR4TDBXebWc\">choice of music</a>. Firstly, here's the code.</p>

<h3>The Code</h3>

<pre><span style=\"color: #a020f0;\">module</span> <span style=\"color: #228b22;\">Mote</span> <span style=\"color: #a020f0;\">where</span>

<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">JavaScript.Experimental</span> (toRecord)
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Json</span> (fromString, toJSObject)
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Graphics.Input</span> (button, buttons, customButtons)
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Window</span> (middle)
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Http</span> (sendGet, send, post)
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Maybe</span> (maybe)

<span style=\"color: #b22222;\">--</span><span style=\"color: #b22222;\">--- Signal Declarations
</span><span style=\"color: #0000ff;\">uriDir</span> str <span style=\"color: #a0522d;\">=</span> <span style=\"color: #8b2252;\">\"/show-directory?dir=\"</span> <span style=\"color: #a0522d;\">++</span> str
<span style=\"color: #0000ff;\">reqPlay</span> str <span style=\"color: #a0522d;\">=</span> post (<span style=\"color: #8b2252;\">\"/play?target=\"</span> <span style=\"color: #a0522d;\">++</span> (maybe <span style=\"color: #8b2252;\">\"\"</span> id str)) <span style=\"color: #8b2252;\">\"\"</span>
<span style=\"color: #0000ff;\">reqCmd</span> str <span style=\"color: #a0522d;\">=</span> post (<span style=\"color: #8b2252;\">\"/command?command=\"</span> <span style=\"color: #a0522d;\">++</span> (maybe <span style=\"color: #8b2252;\">\"\"</span> id str)) <span style=\"color: #8b2252;\">\"\"</span>

<span style=\"color: #0000ff;\">command</span> <span style=\"color: #a0522d;\">=</span> buttons <span style=\"color: #228b22;\">Nothing</span>
<span style=\"color: #0000ff;\">playing</span> <span style=\"color: #a0522d;\">=</span> buttons <span style=\"color: #228b22;\">Nothing</span>
<span style=\"color: #0000ff;\">files</span> <span style=\"color: #a0522d;\">=</span> buttons <span style=\"color: #8b2252;\">\"root\"</span>

<span style=\"color: #0000ff;\">dir</span> <span style=\"color: #a0522d;\">=</span> sendGet <span style=\"color: #a0522d;\">$</span> lift uriDir files<span style=\"color: #a0522d;\">.</span>events
<span style=\"color: #0000ff;\">cmd</span> <span style=\"color: #a0522d;\">=</span> send <span style=\"color: #a0522d;\">$</span> lift reqCmd command<span style=\"color: #a0522d;\">.</span>events
<span style=\"color: #0000ff;\">ply</span> <span style=\"color: #a0522d;\">=</span> send <span style=\"color: #a0522d;\">$</span> lift reqPlay playing<span style=\"color: #a0522d;\">.</span>events

<span style=\"color: #b22222;\">--</span><span style=\"color: #b22222;\">--- Utility
</span><span style=\"color: #0000ff;\">jstrToRec</span> jStr <span style=\"color: #a0522d;\">=</span> <span style=\"color: #a020f0;\">let</span> conv <span style=\"color: #a0522d;\">=</span> toRecord <span style=\"color: #a0522d;\">.</span> toJSObject
                 <span style=\"color: #a020f0;\">in</span> maybe <span style=\"color: #228b22;\">[]</span> conv <span style=\"color: #a0522d;\">$</span> fromString jStr

<span style=\"color: #b22222;\">--</span><span style=\"color: #b22222;\">--- Application
</span><span style=\"color: #0000ff;\">box</span> n <span style=\"color: #a0522d;\">=</span> container 350 n midTop

<span style=\"color: #0000ff;\">cmdButton</span> name <span style=\"color: #a0522d;\">=</span> height 42 <span style=\"color: #a0522d;\">$</span> width 80 <span style=\"color: #a0522d;\">$</span> command<span style=\"color: #a0522d;\">.</span>button (<span style=\"color: #228b22;\">Just</span> name) name

<span style=\"color: #0000ff;\">controls</span> <span style=\"color: #a0522d;\">=</span> flow down [ box 48 <span style=\"color: #a0522d;\">$</span> flow right <span style=\"color: #a0522d;\">$</span> map cmdButton [<span style=\"color: #8b2252;\">\"backward\"</span>, <span style=\"color: #8b2252;\">\"stop\"</span>, <span style=\"color: #8b2252;\">\"pause\"</span>, <span style=\"color: #8b2252;\">\"forward\"</span>]
                     , box 50 <span style=\"color: #a0522d;\">$</span> flow right <span style=\"color: #a0522d;\">$</span> map cmdButton [<span style=\"color: #8b2252;\">\"volume-down\"</span>, <span style=\"color: #8b2252;\">\"volume-off\"</span>, <span style=\"color: #8b2252;\">\"volume-up\"</span>]]
           
<span style=\"color: #0000ff;\">entry</span> { name, path, entryType } <span style=\"color: #a0522d;\">=</span> <span style=\"color: #a020f0;\">let</span> btn <span style=\"color: #a0522d;\">=</span> <span style=\"color: #a020f0;\">if</span> <span style=\"color: #a0522d;\">|</span> entryType <span style=\"color: #a0522d;\">==</span> <span style=\"color: #8b2252;\">\"return\"</span> <span style=\"color: #a0522d;\">-&gt;</span> files<span style=\"color: #a0522d;\">.</span>button path
                                               <span style=\"color: #a0522d;\">|</span> entryType <span style=\"color: #a0522d;\">==</span> <span style=\"color: #8b2252;\">\"directory\"</span> <span style=\"color: #a0522d;\">-&gt;</span> files<span style=\"color: #a0522d;\">.</span>button path
                                               <span style=\"color: #a0522d;\">|</span> otherwise <span style=\"color: #a0522d;\">-&gt;</span> playing<span style=\"color: #a0522d;\">.</span>button (<span style=\"color: #228b22;\">Just</span> path)
                                           <span style=\"color: #a020f0;\">in</span> width 350 <span style=\"color: #a0522d;\">$</span> btn name

<span style=\"color: #0000ff;\">showEntries</span> res <span style=\"color: #a0522d;\">=</span> <span style=\"color: #a020f0;\">case</span> res <span style=\"color: #a020f0;\">of</span>
  <span style=\"color: #228b22;\">Success</span> str <span style=\"color: #a0522d;\">-&gt;</span> flow down <span style=\"color: #a0522d;\">.</span> map entry <span style=\"color: #a0522d;\">$</span> jstrToRec str
  <span style=\"color: #a020f0;\">_</span> <span style=\"color: #a0522d;\">-&gt;</span> plainText <span style=\"color: #8b2252;\">\"Waiting...\"</span>

<span style=\"color: #0000ff;\">showMe</span> entries <span style=\"color: #a0522d;\">=</span> flow down [ box 100 <span style=\"color: #a0522d;\">$</span> controls
                           , showEntries entries ] 

<span style=\"color: #0000ff;\">main</span> <span style=\"color: #a0522d;\">=</span> showMe <span style=\"color: #a0522d;\">&lt;~</span> dir</pre>

<p>And that's all. Seriously. This replaces all of the ~200 lines of JS/HTML/CSS that comprised the <a href=\"https://github.com/Inaimathi/web-mote/blob/master/static/js/mote.js\">Angular.js edition</a>, and the ~300 lines of its <a href=\"https://github.com/Inaimathi/web-mote/blob/a864b926bb8304dba03b32813964291bee2cea9e/static/js/web-mote.js\">jQuery/Backbone predecessor</a>.</p>

<p>So, if nothing else, Elm is very terse.</p>

<pre><span style=\"color: #a020f0;\">module</span> <span style=\"color: #228b22;\">Mote</span> <span style=\"color: #a020f0;\">where</span>

<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">JavaScript.Experimental</span> (toRecord)
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Json</span> (fromString, toJSObject)
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Graphics.Input</span> (button, buttons, customButtons)
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Window</span> (middle)
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Http</span> (sendGet, send, post)
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Maybe</span> (maybe)</pre>

<p>That first part is the module declaration and <code>import</code>s, hopefully self-explanatory.</p>

<pre><span style=\"color: #b22222;\">--</span><span style=\"color: #b22222;\">--- Signal Declarations
</span><span style=\"color: #0000ff;\">uriDir</span> str <span style=\"color: #a0522d;\">=</span> <span style=\"color: #8b2252;\">\"/show-directory?dir=\"</span> <span style=\"color: #a0522d;\">++</span> str
<span style=\"color: #0000ff;\">reqPlay</span> str <span style=\"color: #a0522d;\">=</span> post (<span style=\"color: #8b2252;\">\"/play?target=\"</span> <span style=\"color: #a0522d;\">++</span> (maybe <span style=\"color: #8b2252;\">\"\"</span> id str)) <span style=\"color: #8b2252;\">\"\"</span>
<span style=\"color: #0000ff;\">reqCmd</span> str <span style=\"color: #a0522d;\">=</span> post (<span style=\"color: #8b2252;\">\"/command?command=\"</span> <span style=\"color: #a0522d;\">++</span> (maybe <span style=\"color: #8b2252;\">\"\"</span> id str)) <span style=\"color: #8b2252;\">\"\"</span>

<span style=\"color: #0000ff;\">command</span> <span style=\"color: #a0522d;\">=</span> buttons <span style=\"color: #228b22;\">Nothing</span>
<span style=\"color: #0000ff;\">playing</span> <span style=\"color: #a0522d;\">=</span> buttons <span style=\"color: #228b22;\">Nothing</span>
<span style=\"color: #0000ff;\">files</span> <span style=\"color: #a0522d;\">=</span> buttons <span style=\"color: #8b2252;\">\"root\"</span>

<span style=\"color: #0000ff;\">dir</span> <span style=\"color: #a0522d;\">=</span> sendGet <span style=\"color: #a0522d;\">$</span> lift uriDir files<span style=\"color: #a0522d;\">.</span>events
<span style=\"color: #0000ff;\">cmd</span> <span style=\"color: #a0522d;\">=</span> send <span style=\"color: #a0522d;\">$</span> lift reqCmd command<span style=\"color: #a0522d;\">.</span>events
<span style=\"color: #0000ff;\">ply</span> <span style=\"color: #a0522d;\">=</span> send <span style=\"color: #a0522d;\">$</span> lift reqPlay playing<span style=\"color: #a0522d;\">.</span>events</pre>

<p>This declares the main signals of the interaction, and some uri/request helper functions they'll need. <code>command</code> is the group of buttons that issues playback commands, <code>playing</code> is the group of buttons sending <code>play</code> instructions specifically, and <code>files</code> is the group of buttons sending <code>show-directory</code> commands. These were all handled by the same callback mechanism in earlier versions of the interface, but it makes sense to separate them if we're dealing with their signal streams. <code>dir</code>, <code>cmd</code> and <code>ply</code> just take event signals from those button groups, make appropriate Ajax requests when necessary, and return signals of responses.</p>

<pre><span style=\"color: #b22222;\">--</span><span style=\"color: #b22222;\">--- Utility
</span><span style=\"color: #0000ff;\">jstrToRec</span> jStr <span style=\"color: #a0522d;\">=</span> <span style=\"color: #a020f0;\">let</span> conv <span style=\"color: #a0522d;\">=</span> toRecord <span style=\"color: #a0522d;\">.</span> toJSObject
                 <span style=\"color: #a020f0;\">in</span> maybe <span style=\"color: #228b22;\">[]</span> conv <span style=\"color: #a0522d;\">$</span> fromString jStr</pre>

<p>That is a short utility function that converts a JSON string to a (potentially empty) list of records. The empty list situation happens in two cases</p>

<ul>
  <li>if the server sends back an empty list</li>
  <li>if the server sends back a malformed JSON string</li>
</ul>

<pre><span style=\"color: #b22222;\">--</span><span style=\"color: #b22222;\">--- Application
</span><span style=\"color: #0000ff;\">box</span> n <span style=\"color: #a0522d;\">=</span> container 350 n midTop

<span style=\"color: #0000ff;\">cmdButton</span> name <span style=\"color: #a0522d;\">=</span> height 42 <span style=\"color: #a0522d;\">$</span> width 80 <span style=\"color: #a0522d;\">$</span> command<span style=\"color: #a0522d;\">.</span>button (<span style=\"color: #228b22;\">Just</span> name) name

<span style=\"color: #0000ff;\">controls</span> <span style=\"color: #a0522d;\">=</span> flow down [ box 48 <span style=\"color: #a0522d;\">$</span> flow right <span style=\"color: #a0522d;\">$</span> map cmdButton [<span style=\"color: #8b2252;\">\"backward\"</span>, <span style=\"color: #8b2252;\">\"stop\"</span>, <span style=\"color: #8b2252;\">\"pause\"</span>, <span style=\"color: #8b2252;\">\"forward\"</span>]
                     , box 50 <span style=\"color: #a0522d;\">$</span> flow right <span style=\"color: #a0522d;\">$</span> map cmdButton [<span style=\"color: #8b2252;\">\"volume-down\"</span>, <span style=\"color: #8b2252;\">\"volume-off\"</span>, <span style=\"color: #8b2252;\">\"volume-up\"</span>]]
           
<span style=\"color: #0000ff;\">entry</span> { name, path, entryType } <span style=\"color: #a0522d;\">=</span> <span style=\"color: #a020f0;\">let</span> btn <span style=\"color: #a0522d;\">=</span> <span style=\"color: #a020f0;\">if</span> <span style=\"color: #a0522d;\">|</span> entryType <span style=\"color: #a0522d;\">==</span> <span style=\"color: #8b2252;\">\"return\"</span> <span style=\"color: #a0522d;\">-&gt;</span> files<span style=\"color: #a0522d;\">.</span>button path
                                               <span style=\"color: #a0522d;\">|</span> entryType <span style=\"color: #a0522d;\">==</span> <span style=\"color: #8b2252;\">\"directory\"</span> <span style=\"color: #a0522d;\">-&gt;</span> files<span style=\"color: #a0522d;\">.</span>button path
                                               <span style=\"color: #a0522d;\">|</span> otherwise <span style=\"color: #a0522d;\">-&gt;</span> playing<span style=\"color: #a0522d;\">.</span>button (<span style=\"color: #228b22;\">Just</span> path)
                                           <span style=\"color: #a020f0;\">in</span> width 350 <span style=\"color: #a0522d;\">$</span> btn name

<span style=\"color: #0000ff;\">showEntries</span> res <span style=\"color: #a0522d;\">=</span> <span style=\"color: #a020f0;\">case</span> res <span style=\"color: #a020f0;\">of</span>
  <span style=\"color: #228b22;\">Success</span> str <span style=\"color: #a0522d;\">-&gt;</span> flow down <span style=\"color: #a0522d;\">.</span> map entry <span style=\"color: #a0522d;\">$</span> jstrToRec str
  <span style=\"color: #a020f0;\">_</span> <span style=\"color: #a0522d;\">-&gt;</span> plainText <span style=\"color: #8b2252;\">\"Waiting...\"</span>

<span style=\"color: #0000ff;\">showMe</span> entries <span style=\"color: #a0522d;\">=</span> flow down [ box 100 <span style=\"color: #a0522d;\">$</span> controls
                           , showEntries entries ] 

<span style=\"color: #0000ff;\">main</span> <span style=\"color: #a0522d;\">=</span> showMe <span style=\"color: #a0522d;\">&lt;~</span> dir</pre>

<p>This is the meat of the front-end. <code>box</code> is just a positioning helper function. <code>cmdButton</code> is a helper function to define a playback command element. Note that these are missing a piece of functionality from the old interface: clicking and holding the <code>rewind</code>/<code>forward</code>/<code>volume-up</code>/<code>volume-down</code> buttons doesn't do anything. It <i>used</i> to make serial requests to the server for the appropriate command, but Elm doesn't have very good support for HTML events. I'll talk more about that in a bit.</p>

<p><code>controls</code> defines the two-row, centered placement of those command elements. <code>entry</code> defines a button for the main show/play buttons which comprise the principal interaction with Web Mote. These are missing the play/shuffle sub-buttons for directories and they subtle styling, but that's just because I didn't do it yet. There's no obviously missing feature that would prevent me from implementing all of it; I'd just need to define the appropriate <a href=\"http://elm-lang.org/docs/Graphics/Input.elm\"><code>customButton</code></a> and slot it in. I'd call it five lines at the outside. Thing is, I want to get to writing this article first, so it'll probably happen in an addendum.</p>

<p>Now that we've got that out of the way, here's what I think.</p>

<h3>What I Think</h3>

<p>To summarize, very good, but obviously not finished yet. Which makes sense, since it's only at <code>0.8</code>. I'm going to go through the headaches first, then note the things I particularly like about working with it.</p>

<h3>Headaches</h3>

<h2>Signal Hell</h2>

<p>Or, alternately, \"Type Hell\". I'm putting this one front-and-center, because Elm's author is fiercely <a href=\"http://elm-lang.org/learn/Escape-from-Callback-Hell.elm\">anti-callback</a>, but seems to be just fine with introducing a similar situation with the type system.</p>

<p>The argument against callbacks goes like this in a nutshell: if you write one, you're separating pieces of a procedure that should really be unified. You want to express \"do this stuff\", but part of it has to happen after an asynchronous request, so you have to break your procedure up into pre-async and post-async stuff, then have the request call the function that completes post-async stuff after the request returns. It gets even worse if you need to do multiple async requests as part of your tasks; you might need to split the work up arbitrarily among a large number of functions, all of which should actually be unified conceptually.</p>

<p>Now, I'm <i>not</i> disagreeing with this argument, but take a look at the bottom of that code from <code>Mote.elm</code>.</p>

<pre><span style=\"color: #0000ff;\">showMe</span> entries <span style=\"color: #a0522d;\">=</span> flow down [ box 100 <span style=\"color: #a0522d;\">$</span> controls
                           , showEntries entries ] 

<span style=\"color: #0000ff;\">main</span> <span style=\"color: #a0522d;\">=</span> showMe <span style=\"color: #a0522d;\">&lt;~</span> dir</pre>

<p>What I want to express here is \"Stack the controls on top of the file <code>entries</code> (figuring out <code>entries</code> based on the signal <code>dir</code>)\". But you can't display an <code><span style=\"color: #228b22;\">Element</span></code> in the same list as a <code><span style=\"color: #228b22;\">Signal</span> <span style=\"color: #228b22;\">Element</span></code> because that would make some type theorist somewhere cry apparently. So instead of doing something like</p>

<pre><span style=\"color: #0000ff;\">main</span> <span style=\"color: #a0522d;\">=</span> flow down [ box 100 <span style=\"color: #a0522d;\">$</span> controls, showEntries <span style=\"color: #a0522d;\">$</span> id <span style=\"color: #a0522d;\">&lt;~</span> dir]</pre>

<p>I have to write a separate callback-like function to accept the sanitized signal value and display <i>that</i> instead.</p>

<p>This is the same situation as callback hell. The only difference is that callbacks separate your code at boundaries determined by asynchronous calls, while these signal display functions do it at boundaries determined by the type system. I guess one of those might be better than the other if you squint hard enough, but I'm not seeing it from here.</p>

<h2>Very Few Event Options</h2>

<p>A <code>button</code> or <code>customButton</code> send signals when they're clicked. <code>input</code> of <code><span style=\"color: #a0522d;\">type</span>=\"text\"</code>, <code>password</code>s, <code>checkbox</code>es, and <code>dropDown</code>s send signals when their value changes. <code>textarea</code> and radio buttons don't exist. And that's all.</p>

<p>What do you do if you want a given form to submit when you hit <code>Ret</code> in a relevant input? What do you do if you want to define a button that can be held down (requiring a mouse-down event)? How do you implement draggables, or droppables, or datepickers, or any of <a href=\"http://jqueryui.com/demos/\">the interactive pieces that jQuery has trivially provided since something like 2006</a>? You either don't, or you make liberal use of the JavaScript FFI. Which isn't exactly fun. Since Elm is trying to do all of styling/content/behavior specification, I understand that you need to have elements like <code>image</code> that don't actually have behaviors. That is, they're of type <code><span style=\"color: #228b22;\">Element</span></code> rather than of type <code>(<span style=\"color: #228b22;\">Element</span>, <span style=\"color: #228b22;\">Signal</span> a)</code>. But the ones that do send signals should have a menu of signals to provide. I mean, you already have this cool record syntax, what you could do is provide an interface for the user where,</p>

<code>button <span style=\"color: #0000ff;\">:</span> <span style=\"color: #228b22;\">String</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">SignalOptions</span> <span style=\"color: #a0522d;\">-&gt;</span> (<span style=\"color: #228b22;\">Element</span>, <span style=\"color: #228b22;\">Signal</span> a)</code>

<p>and <code><span style=\"color: #228b22;\">SignalOptions</span></code> is something like  <code>{ click <span style=\"color: #228b22;\">:</span> a, mouseEnter<span style=\"color: #228b22;\">:</span> a, mouseLeave<span style=\"color: #228b22;\">:</span> a, mouseDown<span style=\"color: #228b22;\">:</span> a, mouseUp<span style=\"color: #228b22;\">:</span> a, keyDown<span style=\"color: #228b22;\">:</span> a }</code>. Granted, maybe that shouldn't be a <code>button</code>, but rather a different multi-signal element, but it would give quite a bit more flexibility to front-end developers. If you had an element like that, you could easily implement any of the interactions I mention above.</p>

<h2>No Encoding/Decoding Out-of-the-box</h2>

<p>I'll probably implement something here when I get around to poking at the language again, but there's no built-in way to call <code>encodeURI</code> or <code>encodeURIComponent</code> from Elm. Which means that as written, this front-end will fail to play files with <code>&</code> in their name. That's less than ideal. I get the feeling it wouldn't be too hard to implement using the <a href=\"http://elm-lang.org/learn/Syntax.elm#javascript-ffi\">JS FFI</a>, but I'm not diving into that right now.</p>

<h2>Gimped Case</h2>

<p>The Elm <code>case</code> statement doesn't pattern-match on strings. There's no mention of that behavior in the docs, so I'm not sure whether this is a bug or an unimplemented feature or what, but I missed it once in a ~50 line program. Specifically, in <code>entries</code></p>

<pre><span style=\"color: #0000ff;\">entry</span> { name, path, entryType } <span style=\"color: #a0522d;\">=</span> <span style=\"color: #a020f0;\">let</span> btn <span style=\"color: #a0522d;\">=</span> <span style=\"color: #a020f0;\">if</span> <span style=\"color: #a0522d;\">|</span> entryType <span style=\"color: #a0522d;\">==</span> <span style=\"color: #8b2252;\">\"return\"</span> <span style=\"color: #a0522d;\">-&gt;</span> files<span style=\"color: #a0522d;\">.</span>button path
                                               <span style=\"color: #a0522d;\">|</span> entryType <span style=\"color: #a0522d;\">==</span> <span style=\"color: #8b2252;\">\"directory\"</span> <span style=\"color: #a0522d;\">-&gt;</span> files<span style=\"color: #a0522d;\">.</span>button path
                                               <span style=\"color: #a0522d;\">|</span> otherwise <span style=\"color: #a0522d;\">-&gt;</span> playing<span style=\"color: #a0522d;\">.</span>button (<span style=\"color: #228b22;\">Just</span> path)
                                           <span style=\"color: #a020f0;\">in</span> width 350 <span style=\"color: #a0522d;\">$</span> btn name</pre>

<p>where I had to resort to using the new, otherwise unnecessary multi-branch <code><span style=\"color: #a020f0;\">if</span></code>. Unfortunately ...</p>

<h2>Gimped <code>if</code> Indentation</h2>

<p>Because there's no <code>elm-mode</code> yet, you're stuck using <code>haskell-mode</code> for editing <code>.elm</code>s. <code>haskell-mode</code> craps out on indentation of that multi-branch <code>if</code> statement I just mentioned. If you try to indent the following line, it'll yell at you about parse errors rather than inserting the appropriate amount of white-space, which makes working with an already unnecessary-feeling operator just that little bit more annoying. This is similar to that <code>[markdown| |]</code> tag indentation issue I mentioned last time, it's just that the Web Mote front-end port didn't happen to need any <code>markdown</code>.</p>

<h2>Gratuitous Differences</h2>

<p><a href=\"http://elm-lang.org/learn/Syntax.elm#type-annotations\">Type annotation</a> (<code>::</code>) and <code>cons</code> (<code>:</code>) from Haskell have been switched for no obvious reason, and <a href=\"http://elm-lang.org/learn/Syntax.elm#conditionals\"><code><span style=\"color: #a020f0;\">if</span></code></a> seems to have a similar treatment. Unlike most of the other things I bumped into, this and the <code><span style=\"color: #a020f0;\">case</span></code> \"bug\" have no hope in hell of being solved by a mere user of the language, so hopefully the designer does something about them.</p>

<h3>Nitpicks</h3>

<p>These aren't big things, and they're not really related to the language itself, but I noticed them and they were annoying.</p>

<h2>No Single-File Option</h2>

<p>This is just a nice to have. It would have made this front-end marginally easier to deploy, but I'm not sure how it would work if you <i>needed</i> more than one file served for your program. Elm targets JavaScript as a platform, which means that the base language is deployed as a <code>js</code> file that you have to host manually if you're not using the <code>elm-server</code>. When you compile an Elm project, you have an option that looks like this</p>

<pre>  -r --runtime=FILE           Specify a custom location for Elm's runtime
                              system.</pre>

<p>It's slightly misleading, because what it actually does is specify where to load <code>elm-runtime.js</code> from <i>in the compiled file</i>. Literally, it determines the <code>src</code> property of the appropriate <code>script</code> tag. For that Mote front-end, I had to <code>elm --make -r \"/static/js/elm-runtime.js\" --minify Mote.elm</code>, and then make sure to serve <code>elm-runtime.js</code> from that static url (by default, you can find this file in <code>~/.cabal/share/Elm-0.8.0.3/elm-runtime.js</code>, in case you were wondering).</p>

<p>Anyhow, it would be nice if there was a compiler option you could activate to just have this runtime inlined in your compiled result, rather than served separately.</p>

<h2>Unstable Website</h2>

<p><a href=\"http://elm-lang.org/\">elm-lang.org</a> is down pretty frequently. It seems to be up at the moment, but I'm not sure how long that's going to be the case. It happens often enough that I just went ahead and did a checkout from <a href=\"https://github.com/evancz/elm-lang.org\">its github</a>. Then I found out that the <code><span style=\"color: #8b2252;\">\"Documentation\"</span></code> pages happen to be missing from that repo...</p>

<h3>Highlights</h3>

<p>Anything I didn't mention above is <i>good</i>, which is to say \"most of it\", but there are two things I like about the language enough to call out.</p>

<h2>Records</h2>

<p><a href=\"http://elm-lang.org/learn/Syntax.elm#records\">This</a> is brilliant. Take a bow, you've nailed record interaction. The approach probably wouldn't fit trivially into GHC, but it would solve <a href=\"http://hackage.haskell.org/trac/ghc/wiki/Records\">some of the problems</a> their records have. It's also something the Erlang devs should probably keep an eye on, because it's much <i>much</i> better than <a href=\"http://stackoverflow.com/q/10821930\">what I remember having access to in Erl-land</a>. Probably the biggest win is that Elm records get first-class treatment in terms of the languages' pattern matching facilities, which lets you do things like</p>

<pre><span style=\"color: #0000ff;\">entry</span> <b>{ name, path, entryType }</b> <span style=\"color: #a0522d;\">=</span> <span style=\"color: #a020f0;\">let</span> btn <span style=\"color: #a0522d;\">=</span> <span style=\"color: #a020f0;\">if</span> <span style=\"color: #a0522d;\">|</span> entryType <span style=\"color: #a0522d;\">==</span> <span style=\"color: #8b2252;\">\"return\"</span> <span style=\"color: #a0522d;\">-&gt;</span> files<span style=\"color: #a0522d;\">.</span>button path
<span style=\"color: #a0522d;\">...</span></pre>

<p>That's something I miss in almost every single language that has both pattern matching <i>and</i> k/v constructs. As usual, Common Lisp has a 95% <a href=\"https://github.com/m2ym/optima#class\">solution</a> as <a href=\"https://github.com/m2ym/optima#property\">part</a> of the <a href=\"https://github.com/m2ym/optima\">Optima</a> pattern matching library.</p>

<p>This dynamic record syntax also lets you trivially handle JSON input from a server. In case you didn't notice, the stuff I was passing into <code>entry</code> originates in ajax responses from the server.</p>

<h2>Haskell-grade Terseness</h2>

<p>Just a reminder. Despite all those flaws I pointed out above, the Elm version of this particular program weighs in at about 1/4 the code of the reactive Angular.js version, let alone the traditional plain DOM/jQuery approach. It's also more pleasant to work with than JS, but that's an entirely subjective point. Improvements can still be made here; implementing haskell-style sections and multi-line definitions would save a bit of typing, though, to be fair, not as much as I thought it would.</p>

<h3>Conclusions</h3>

<p>I've already mentioned that I'm going to take a swing at putting together some SSE support, <code>encodeURI(component)?</code> calls and a more appropriate Emacs mode for Elm, but it probably won't be very soon. Thanks to a tip-off from Dann, I managed to squeak into the registration for the <a href=\"http://lispinsummerprojects.org/\">Lisp In Summer Projects</a> event, which looks very much like a multi-month <a href=\"http://www.nanowrimo.org/\">NaNoWriMo</a> with parentheses instead of character development and sleep.</p>

<p>I'm going to make a serious attempt at getting a little pet project of mine up-and-running in either Common Lisp or Clojure by September 30, which means I'll have very little time to hack on someone else's up-and-coming language regardless of how interesting it looks.</p>
"))
((5202 3723 614183000) :INSERT (138 :POSTED 3580862400))
((5202 3723 614184000) :INSERT (138 :TAG :ALMOST-LITERATE-PROGRAMMING))
((5202 3723 614186000) :INSERT (138 :TAG :ELM))
((5202 3723 614188000) :INSERT (138 :TAG :IDEA-PEELING))
((5202 3723 614327000) :INSERT (139 :TITLE "Bittersweet"))
((5202 3723 614331000) :INSERT (139 :FILE "bittersweet.html"))
((5202 3723 614333000) :INSERT (139 :EDITED 3610301105))
((5202 3723 614334000) :INSERT
 (139 :BODY "<p>So I'm leaving another company today.</p>

<p>It's ok, everyone knows.</p>

<p>Actually, they knew about four weeks ago, I gave them ample notice because I genuinely liked working with them. They're on the market for a Common Lisp/Python/JavaScript developer, by the by. Company details <a href=\"http://medirexsys.com/about.php\">here</a> if you're both \"in Toronto\" and \"interested\". There's <a href=\"http://medirexsys.com/email.php?option=4\">an Employment link</a> at the bottom of the sidebar.</p>

<p>This is probably the first time I've left an employer with, on balance, positive feelings. I don't think there's anything here I'm glad to be getting away from, <a href=\"/article?name=exit.html\">unlike last time</a>. I mean, you know, all the usual complaints that apply to any less-than-10-man shop, but nothing that actually prevented me from enjoying damn-near all of it. We made our best effort at avoiding the classic Agile tar-pit, we put together the best practices we could, including source-control, bug-tracking and project wikis. We used tools appropriate to the situation, and tried to solve problems in scalable, reliable and secure ways. If there was anyone other than me there who knew Common Lisp and Python, we'd have done extensive code-reviews too.</p>

<p>We <i>didn't</i> GPL any of our code, which always disappointed me, because it meant that I</p>

<ul>
  <li>couldn't get an outside opinion without collecting NDAs, which I don't like doing</li>
  <li>won't be able to reasonably work on the projects any more after I leave</li>
</ul>

<p>That's in addition to the usual argument about how sufficiently interesting projects are just plain better off becoming open source, so that they can leverage as many developers as they can attract, rather than merely as many as their owners can pay for. There's a threshold at which the first number is so much larger than the second that it really doesn't make sense to keep secrets, and I think at least two of the projects I shepherded could cross it given the chance. Such is life, I suppose.</p>

<p>The <a href=\"http://www.moneris.com/\">new place</a> is going to offer some serious challenges. Starting with, I'm sure, a week or two of severe culture-shock. You see, I've never actually worked at a company with more than about 200 employees. I mean, <i>my employers</i> have contracted for various bureaucracies, ranging from multi-national food chains, to hardware suppliers, to actual governments, but I've always been the visiting contractor or IT consultant. I'm not sure I'll like it, but I'll try almost anything once.</p>

<p>The work will be different. Instead of a bunch of projects, we have The Project, and from what I understand it's a fairly ambitious piece of R&amp;D/prototyping work that has a good chance of changing the world by end of next year. In a good way, I think. The other really big draw for me is that I get to work with people who are, by my reckoning, much more skillful developers than I am. It's been a really long time since I've done that, and I wasn't far enough along my learning process that I could take advantage of it last time.</p>

<p> I've been told not to worry about the culture, and that the biggest challenge will be learning about systems and techniques. Which is not a problem, as you know if you've met me.</p>

<p>\"Learning things\" is my default state.</p>
"))
((5202 3723 614360000) :INSERT (139 :POSTED 3582504000))
((5202 3723 614362000) :INSERT (139 :TAG :IDEA-PEELING))
((5202 3723 614363000) :INSERT (139 :TAG :SPECULATION))
((5202 3723 614507000) :INSERT (140 :TITLE "Ping"))
((5202 3723 614512000) :INSERT (140 :FILE "ping.html"))
((5202 3723 614514000) :INSERT (140 :EDITED 3610022331))
((5202 3723 614515000) :INSERT
 (140 :BODY "<p>I'm still alive, just so you know.</p>

<h3>LISP Contest</h3>

<p>The past little while has seen me refine my entry to <a href=\"http://lispinsummerprojects.org/\">the Lisp In Summer Projects contest</a>. You can find the code <a href=\"https://github.com/Inaimathi/deal\">here</a>, in case you'd like to keep an eye on progress, but it's not playable yet, and I don't want to talk about it until I've at least ironed out some of the big questions. Don't worry, I'm keeping a journal, so you'll see all the gory details rather than just a finished product, but I want to <i>have</i> a product before I show it off. On a related note, I've been told that there's a local <a href=\"https://bentomiso.com/\">Bento</a>-based group called <a href=\"https://bentomiso.com/events/51e01b0fa5a6277896000000\">Games With Friends</a> that regularly tests tabletop card and board games in meatspace. I'm seriously considering dropping by, both before and after I get a working system together.</p>

<h3>Work</h3>

<p>I've started my new job, and it's fun so far. On a scale of <code>1</code> to <code>10</code>, the levels of paranoia and bureaucracy here are <code>Dilbert</code>, and apparently that's all I'll be able to tell you. Not that I ever blogged about the actual systems I was working on at my old job, but we're going to be doing some <i>very</i> interesting things here<a href=\"#foot-Thu-Jul-18-194952EDT-2013\" name=\"note-Thu-Jul-18-194952EDT-2013\">[1]</a> and I was looking forward to being able to talk about them. I won't though; anything past what I've already said could compromise some of my employers' IP, or at least run a significant risk of doing so, and no offense, but that risk isn't worth it for the sake of a hobby blog. So that's that.</p>

<ul>
  <li>We're doing R&amp;D work</li>
  <li>It involves embedded systems</li>
  <li>It's very interesting</li>
  <li>Lots of the locals are severely, sometimes paralyzingly, paranoid about security</li>
  <li>It's sometimes necessary to requisition a requisition-form-requisition form</li>
</ul>

<p>...and you won't hear anything else about what I'm working on <i>at</i> work until I start working somewhere else.</p>

<h3>Fiction</h3>

<p>I just finished reading <a href=\"http://www.amazon.ca/Neptunes-Brood-Charles-Stross/dp/0425256774\">Neptune's Brood</a> by <a href=\"http://www.antipope.org/charlie/\">Charlie Stross</a>, which can best be thumbnailed as \"Accountants In Spaaaaace!\", and it was an excellent read. <a href=\"http://www.orbitbooks.net/2013/07/05/charles-stross-on-exoplanetography-designing-planets/\">This</a> is the sort of stuff I go to Stross for; not the usual Star-Wars-esque naval battles in 3 dimensions, but a hard look at what space battles would actually look like in the absence of hand-waivium and plottite. I'm not sure how sympathetic the characters are since I'm a lousy judge of these things<a href=\"#foot-Thu-Jul-18-195044EDT-2013\" name=\"note-Thu-Jul-18-195044EDT-2013\">[2]</a>, but the world and in particular its finance system is constructed in such a way as to make space-colonization by humans<a href=\"#foot-Thu-Jul-18-195055EDT-2013\" name=\"note-Thu-Jul-18-195055EDT-2013\">[3]</a> plausible both in the physics and economics senses. The societal implications about our deep future are less than encouraging, but I don't want to spoiler any part of this before anyone reading this has likely gotten a chance to read <a href=\"http://www.tor.com/blogs/2013/07/book-review-neptunes-brood-charles-stross\">it</a>. I got the hard-back through an Amazon pre-order, but you can probably walk into your local Chapters and just pick up a fresh one by this point.</p>


<hr />
<h5>Footnotes</h5>
<p>1 - <a href=\"#note-Thu-Jul-18-194952EDT-2013\" name=\"foot-Thu-Jul-18-194952EDT-2013\">[back]</a> - Well, by my definition of \"very\" and \"interesting\" at any rate.</p>

<p>2 - <a href=\"#note-Thu-Jul-18-195044EDT-2013\" name=\"foot-Thu-Jul-18-195044EDT-2013\">[back]</a> - I thought the crew of <a href=\"http://www.rifters.com/real/Blindsight.htm\">Blindsight</a> was very well thought out and understandable in the human sense, only to find out that the author had gotten feedback about how un-cuddly they were. <a href=\"http://en.wikipedia.org/wiki/Blindsight_(Watts_novel)\">That's</a> another very interesting piece of non-hand-wavium sci-fi that I can recommend, by the way. Easily the best vampire story I've ever read.</p>

<p>3 - <a href=\"#note-Thu-Jul-18-195055EDT-2013\" name=\"foot-Thu-Jul-18-195055EDT-2013\">[back]</a> - Or at least post-humans.</p>
"))
((5202 3723 614549000) :INSERT (140 :POSTED 3583108800))
((5202 3723 614550000) :INSERT (140 :TAG :COMMON-LISP))
((5202 3723 614554000) :INSERT (140 :TAG :GENERAL-UPDATE))
((5202 3723 614709000) :INSERT (141 :TITLE "REBOL"))
((5202 3723 614713000) :INSERT (141 :FILE "rebol.html"))
((5202 3723 614715000) :INSERT (141 :EDITED 3610022331))
((5202 3723 614717000) :INSERT
 (141 :BODY
  "<p>One of the things we talk about at the <a href=\"http://www.lisptoronto.org/\">Toronto</a> Common <a href=\"http://lispwiki.inaimathi.ca/\">Lisp</a> User <a href=\"https://groups.google.com/forum/#!forum/toronto-lisp-users-group\">Group</a> meetings is, possibly surprisingly, other interesting languages, whether classical or up-and-coming.</p>

<p>REBOL (pronounced the same as \"rebel\") is one that got mentioned a few times. And it sounded quite interesting. But I never talked about it here because it was released under a proprietary license, and as you've probably guessed if this blog wasn't evidence enough, I'm a <a href=\"http://www.gnu.org/licenses/gpl.html\">GPL</a> nerd. Well, as of <a href=\"http://www.rebol.com/rebol3/\">REBOL3</a>, the language is released under the <a href=\"http://www.apache.org/licenses/LICENSE-2.0\">Apache v2.0 license</a>, which officially makes it Free Software. You can find the complete source <a href=\"https://github.com/rebol/r3\">here</a>.</p>

<p>It's a fairly recent development, so this isn't one you can <code>apt-get install</code> quite yet. So, here's how you go about building it on Debian.</p>

<h3>Before We Get Started...</h3>

<p>You'll obviously need <code>git</code> and <code>make</code> installed.</p>

<pre>apt-get install git make</pre>

<h3>Then...</h3>

<p>...you'll need to clone <a href=\"https://github.com/rebol/r3\">the REBOL3 repo</a>.</p>

<pre>git clone https://github.com/rebol/r3.git</pre>

<p><i>And then</i> you'll need to download the <code>r3</code> binary from <a href=\"http://www.rebol.com/r3/downloads.html\">this page</a>. If you're on an x86 linux machine, you have a choice of three depending on what version of <code>libc</code> you have installed. To find that out, run <code>ldd --version</code><a href=\"#foot-Sat-Jul-20-204704EDT-2013\" name=\"note-Sat-Jul-20-204704EDT-2013\">[1]</a>. Once you've go that, <a href=\"https://github.com/Inaimathi/shell-ui/blob/master/python/unpack\">unpack</a> it, and rename the new <code>r3</code> file to <code>r3-make</code>.</p>

<h3>On 32-bit machines...</h3>

<p>You're pretty much done. Enter</p>

<pre>make make <span style=\"color: #b22222;\"># </span><span style=\"color: #b22222;\">re-generate the makefile
</span>make prep <span style=\"color: #b22222;\"># </span><span style=\"color: #b22222;\">generate relevant header files
</span>make      <span style=\"color: #b22222;\"># </span><span style=\"color: #b22222;\">compile REBOL</span></pre>

<p>After a minute or so, you should have a binary file called <code>r3</code> that you can add to your path as a REBOL3 interpreter.</p>

<h3>On 64-bit machines...</h3>

<p>... you have a couple more things to do. Specifically, you need to run this as root<a href=\"#foot-Sat-Jul-20-204707EDT-2013\" name=\"note-Sat-Jul-20-204707EDT-2013\">[2]</a></p>

<pre>dpkg --add-architecture i386
aptitude update
apt-get install ia32-libs 
apt-get install libc6-dev-i386</pre>

<p>That will add the 32-bit versions of libc and some other libraries so that you can actually run the compilation step.</p>

<h3>Now Then</h3>

<p>You can find the basic primer <a href=\"http://www.rebol.com/rebolsteps.html\">here</a>, but the thing that most interests me about REBOL so far is its implementation and use of <a href=\"http://www.rebol.com/r3/docs/functions/parse.html\">parse</a>, which you can see demonstrated <a href=\"http://rebol-land.blogspot.ca/2013/03/rebols-answer-to-regex-parse-and-rebol.html\">here</a>, <a href=\"http://rebol.com/docs/core23/rebolcore-15.html\">here</a> and <a href=\"http://recoding.blogspot.in/2013/02/looking-to-learn-something-new-try-rebol.html\">here</a>, though there have been changes between REBOL2 and REBOL3. You can find the appropriate Emacs mode <a href=\"http://www.rebol.com/tools/rebol.el\">here</a>, and I'm already thinking of the changes I want to make to it. Other interesting documentation includes <a href=\"http://www.rebol.com/r3/docs/guide.html\">the REBOL3 guide</a>, <a href=\"http://www.rebol.com/r3/docs/functions.html\">the list of REBOL3 functions</a> and <a href=\"http://stackoverflow.com/a/14184638\">this SO answer</a> which includes a quick REBOL3 CGI script, though really, anything in the <a href=\"http://stackoverflow.com/questions/tagged/rebol3\"><code>rebol3</code> tag</a> is pretty interesting.</p>

<hr />
<h5>Footnotes</h5>
<p>1 - <a href=\"#note-Sat-Jul-20-204704EDT-2013\" name=\"foot-Sat-Jul-20-204704EDT-2013\">[back]</a> -Note that if you're just out to <i>use</i> the language, and don't really care about any of this Software Freedom business, you've already wasted some time. You can just get the appropriate binary and call it a day. I'm getting it because REBOL3 builds part of itself using REBOL3 scripts. And I'm compiling my own because I like being able to see inside of the languages I use, <i>and</i> I'm a big enough nerd to actually do it from time to time, <b>and</b> I've probably spent more time than is strictly healthy listening to <a href=\"http://www.youtube.com/watch?v=SNBMdDaYhZA\">Richard Stallman</a>. Proceed or ignore the remaining parts of the process at your discretion.</p>
<p>2 - <a href=\"#note-Sat-Jul-20-204707EDT-2013\" name=\"foot-Sat-Jul-20-204707EDT-2013\">[back]</a> -Thank you user <code>Fork</code> from <a href=\"http://www.rebol.com/cgi-bin/blog.r?view=0519\">this thread</a>.</p>
"))
((5202 3723 614756000) :INSERT (141 :POSTED 3583281600))
((5202 3723 614757000) :INSERT (141 :TAG :REBOL))
((5202 3723 614885000) :INSERT (142 :TITLE "Dear The Internet"))
((5202 3723 614889000) :INSERT (142 :FILE "dear-internet.html"))
((5202 3723 614891000) :INSERT (142 :EDITED 3610300798))
((5202 3723 614893000) :INSERT
 (142 :BODY "<p>Dear Internet,</p>

<p>I see you're <a href=\"http://www.zdnet.com/ubuntu-forums-hacked-1-82m-logins-email-addresses-stolen-7000018336/\">having security problems</a>, so I'm going to let you in on a technique for doing proper authentication. I've <a href=\"/article?name=authentication-part4.html\">discussed it before</a>, but I get the feeling you thought I was trafficking in trade secrets, and scrupulously decided not to hear too much. Let me be clear that this is public knowledge, and is meant for sharing.</p>

<h3>Proper Authentication</h3>

<p>To start with, your server should have a public/private keypair, and so should your users. When a user registers, ask them for their public key, and publish the server's public key in a few disparate places on the web. Then, when a user wants to log in</p>

<ol>
  <li>the user specifies their account with an account name</li>
  <li>the server generates a piece of random state, encrypts it with the accounts' public key, signs it, and sends both the cyphertext and the signature to the client</li>
  <li>the client verifies the signature, decrypts the cyphertext message, signs the resulting cleartext and sends the signature back to the server</li>
  <li>the server verifies the signature against the state it sent out for that account</li>
</ol>

<p>Assuming everything went well, the server can act on a successful authentication.</p>

<p>What just happened?</p>

<ul>
  <li>The user knows that the server they're communicating with has access to the private key they expect</li>
  <li>The server knows that the user they're speaking to has access to the private key that corresponds to the user account asking for authentication</li>
  <li>Finally, <b>critically</b>, neither has enough information to allow impersonation of the other</li>
</ul>

<p>There! That's the secret! Now you'll never fuck it up again!</p>

<p>This is a way to prevent any further \"Oh noez, our server got hacked!\" garbage <i>forever</i>, because if a server using this auth method got hacked, all the hackers <i>actually got</i> is information that's already public, or can reasonably be.</p>

<p>Before you pipe up with the \"But users are too stupid to use private keys\" thing, shut up.</p>

<p>Just shut up.</p> 

<p>The user doesn't have to do this manually; it's easy to imagine a series of plugins, one for each browser, that implement key generation, encryption and management for a user without them having to really understand what's inside the black box. More importantly, even a stupid, simplified, operationally insecure PK authentication system with full focus on ease-of-use <i>would be better than using passwords on the server side</i>.</p>

<p>Please <i>please</i> consider this, Internet, I'm getting really worried about you.</p>

<p>Sincerely yours,</p>

<p>-Inaimathi</p>
"))
((5202 3723 614914000) :INSERT (142 :POSTED 3583713600))
((5202 3723 614916000) :INSERT (142 :TAG :BITCHING))
((5202 3723 614918000) :INSERT (142 :TAG :SECURITY))
((5202 3723 614920000) :INSERT (142 :TAG :SPECULATION))
((5202 3723 615322000) :INSERT (143 :TITLE "REBOL Without A Cause"))
((5202 3723 615330000) :INSERT (143 :FILE "rebol-without-a-cause.html"))
((5202 3723 615332000) :INSERT (143 :EDITED 3610298899))
((5202 3723 615333000) :INSERT
 (143 :BODY
  "<p>So Thursday was this months' <a href=\"https://bentomiso.com/events/toronto-code-retreat-july\">Code Retreat</a> over at <a href=\"https://bentomiso.com/\">Bento</a>. We were solving <a href=\"http://codingdojo.org/cgi-bin/wiki.pl?KataPokerHands\">the Poker Hands kata</a> that I've <a href=\"/article?name=poker-hands.html\">already written about</a>, so <a href=\"https://github.com/NaleagDeco\">Gaelan</a> and <a href=\"https://github.com/Inaimathi\">I</a> decided to make an attempt using <a href=\"https://github.com/rebol/r3\">REBOL3</a>. <i>Because</i> I've already <a href=\"/article?name=poker-hands.html\">written about it</a>, I'm not going to explain the problem, or go very deeply into code-review-style exposition.</p>

<p>I'll show you some REBOL3 code, point out the highlights and the confusing bits, and call it a day. Hit up the <a href=\"http://chat.stackoverflow.com/rooms/291/rebol-and-red\">chat room</a> if you have questions.</p>

<h3>The First Crack</h3>

<pre>REBOL []

<span style=\"color: #0000ff; text-decoration: underline;\">map-f</span>: <span style=\"color: #a020f0;\">func</span> [ fn a-list ] [
    <span style=\"color: #0000ff;\">res</span>: <span style=\"color: #228b22;\">make</span> <span style=\"color: #228b22;\">block!</span> 5
    <span style=\"color: #a020f0;\">foreach</span> elem a-list [ <span style=\"color: #a020f0;\">append</span> res <span style=\"color: #a020f0;\">do</span> [fn elem] ]
    res    
]

<span style=\"color: #0000ff; text-decoration: underline;\">group</span>: <span style=\"color: #a020f0;\">func</span> [ a-list ] [
    <span style=\"color: #0000ff;\">res</span>: <span style=\"color: #228b22;\">make</span> map! 5
    <span style=\"color: #a020f0;\">foreach</span> elem a-list [
        <span style=\"color: #a020f0;\">either</span> res/(elem)
        [ <span style=\"color: #228b22;\">poke</span> res elem res/(elem) + 1 ]
        [ <span style=\"color: #a020f0;\">append</span> res <span style=\"color: #a020f0;\">reduce</span> [ elem 1 ]]
    ]
    res
]

<span style=\"color: #0000ff;\">test-hand</span>: [[ 1  hearts ] [ 2 clubs ] [ 3 clubs ] [ 4 diamonds ] [ 5 hearts ]]
<span style=\"color: #0000ff;\">test-flush</span>: [[ 1  hearts ] [ 2 hearts ] [ 3 hearts ] [ 4 hearts ] [ 5 hearts ]]

<span style=\"color: #0000ff; text-decoration: underline;\">group-by-rank</span>: <span style=\"color: #a020f0;\">func</span> [ hand ] [
    group map-f <span style=\"color: #a020f0;\">func</span> [ a ] [ <span style=\"color: #228b22;\">first</span> a ] hand
]

<span style=\"color: #0000ff; text-decoration: underline;\">group-by-suit</span>: <span style=\"color: #a020f0;\">func</span> [ hand ] [
    group map-f <span style=\"color: #a020f0;\">func</span> [ a ] [ <span style=\"color: #228b22;\">second</span> a ] hand
]

<span style=\"color: #0000ff; text-decoration: underline;\">is-flush</span>: <span style=\"color: #a020f0;\">func</span> [ hand ] [
    1 = <span style=\"color: #228b22;\">length?</span> group-by-suit hand
]

<span style=\"color: #0000ff; text-decoration: underline;\">is-pair</span>: <span style=\"color: #a020f0;\">func</span> [ hand ] [
    <span style=\"color: #0000ff;\">grouped</span>: group-by-rank hand
    <span style=\"color: #a020f0;\">foreach</span> k grouped [
        <span style=\"color: #a020f0;\">if</span> grouped/(k) = 2
    ]
]</pre>

<p>Our first attempt was pretty pathetic, all things considered. Most of that comes down to lack of familiarity with the language, and a desire on my part to do things functionally. The first meant that we spent about 15 minutes trying to figure out how to set the value of a particular map slot<a href=\"#foot-Sat-Jul-27-122302EDT-2013\" name=\"note-Sat-Jul-27-122302EDT-2013\">[1]</a>. The second meant that I had to implement a couple of basics myself, one of which I was used to having provided even in batteries-not-included languages like Common Lisp. The above isn't actually a valid approach because of r3's default scope. Which means</p>

<pre>&gt;&gt; <span style=\"color: #a020f0;\">do</span> <span style=\"color: #7a378b;\">%poker-hands.r</span>
<span style=\"color: #a020f0;\">do</span> <span style=\"color: #7a378b;\">%poker-hands.r</span>
<span style=\"color: #0000ff;\">Script</span>: <span style=\"color: #8b2252;\">\"Untitled\"</span> <span style=\"color: #0000ff;\">Version</span>: none <span style=\"color: #0000ff;\">Date</span>: none
&gt;&gt; <span style=\"color: #0000ff;\">res</span>: <span style=\"color: #8b2252;\">\"Foobarbaz\"</span>
<span style=\"color: #0000ff;\">res</span>: <span style=\"color: #8b2252;\">\"Foobarbaz\"</span>
== <span style=\"color: #8b2252;\">\"Foobarbaz\"</span>

&gt;&gt; map-f <span style=\"color: #a020f0;\">func</span> [ a ] [ a + 1 ] [ 1 2 3 4 5 ]
map-f <span style=\"color: #a020f0;\">func</span> [ a ] [ a + 1 ] [ 1 2 3 4 5 ]
== [2 3 4 5 6]

&gt;&gt; res
res
== [2 3 4 5 6]</pre>

<p>Don't worry; there's a way around this which I'll discuss later. After the event, I made a few refinements and got it up to</p>

<h3>The Second Crack</h3>

<pre>REBOL []

<span style=\"color: #0000ff;\">fn</span>: <span style=\"color: #228b22;\">make</span> <span style=\"color: #228b22;\">object!</span> [
    <span style=\"color: #0000ff; text-decoration: underline;\">map</span>: <span style=\"color: #a020f0;\">func</span> [ fn a-list ] [
        <span style=\"color: #0000ff;\">res</span>: <span style=\"color: #228b22;\">make</span> <span style=\"color: #228b22;\">block!</span> 5
        <span style=\"color: #a020f0;\">foreach</span> elem a-list [ <span style=\"color: #a020f0;\">append</span> res <span style=\"color: #a020f0;\">do</span> [fn elem] ]
        res
    ]
    <span style=\"color: #0000ff; text-decoration: underline;\">range</span>: <span style=\"color: #a020f0;\">func</span> [ start end ] [
        <span style=\"color: #0000ff;\">res</span>: <span style=\"color: #228b22;\">make</span> <span style=\"color: #228b22;\">block!</span> 10
        <span style=\"color: #0000ff;\">step</span>: <span style=\"color: #a020f0;\">either</span> start &lt; end [ 1 ] [ -1 ]
        <span style=\"color: #a020f0;\">for</span> i start end step [ <span style=\"color: #a020f0;\">append</span> res i ]
        res
    ]
    <span style=\"color: #0000ff; text-decoration: underline;\">frequencies</span>: <span style=\"color: #a020f0;\">func</span> [ a-list ] [
        <span style=\"color: #0000ff;\">res</span>: <span style=\"color: #228b22;\">make</span> map! 5
        <span style=\"color: #a020f0;\">foreach</span> elem a-list [
            <span style=\"color: #a020f0;\">either</span> res/(elem)
            [ <span style=\"color: #228b22;\">poke</span> res elem res/(elem) + 1 ]
            [ <span style=\"color: #a020f0;\">append</span> res <span style=\"color: #a020f0;\">reduce</span> [ elem 1 ]]
        ]
        res
    ]
    <span style=\"color: #0000ff; text-decoration: underline;\">val-in?</span>: <span style=\"color: #a020f0;\">func</span> [ val map ] [
        <span style=\"color: #a020f0;\">foreach</span> k map [
            <span style=\"color: #a020f0;\">if</span> map/(k) = val [ <span style=\"color: #a020f0;\">return</span> true ]
        ]
        <span style=\"color: #a020f0;\">return</span> false
    ]
]

<span style=\"color: #0000ff;\">hands</span>: <span style=\"color: #228b22;\">make</span> <span style=\"color: #228b22;\">object!</span> [
    <span style=\"color: #0000ff;\">straight</span>: [[ 1  hearts ] [ 2 clubs ] [ 3 clubs ] [ 4 diamonds ] [ 5 hearts ]]
    <span style=\"color: #0000ff;\">straight-flush</span>: [[ 1  hearts ] [ 2 hearts ] [ 3 hearts ] [ 4 hearts ] [ 5 hearts ]]
    <span style=\"color: #0000ff;\">pair</span>: [[ 2  hearts ] [ 2 clubs ] [ 3 clubs ] [ 4 diamonds ] [ 5 hearts ]]
    <span style=\"color: #0000ff;\">two-pair</span>: [[ 2  hearts ] [ 2 clubs ] [ 3 clubs ] [ 3 diamonds ] [ 5 hearts ]]
]

<span style=\"color: #0000ff; text-decoration: underline;\">ranks</span>: <span style=\"color: #a020f0;\">func</span> [ hand ] [ fn/map <span style=\"color: #a020f0;\">func</span> [ a ] [ <span style=\"color: #228b22;\">first</span> a ] hand ]
<span style=\"color: #0000ff; text-decoration: underline;\">suits</span>: <span style=\"color: #a020f0;\">func</span> [ hand ] [ fn/map <span style=\"color: #a020f0;\">func</span> [ a ] [ <span style=\"color: #228b22;\">second</span> a ] hand ]

<span style=\"color: #0000ff; text-decoration: underline;\">count-ranks</span>: <span style=\"color: #a020f0;\">func</span> [ hand ] [ fn/frequencies ranks hand ]
<span style=\"color: #0000ff; text-decoration: underline;\">count-suits</span>: <span style=\"color: #a020f0;\">func</span> [ hand ] [ fn/frequencies suits hand ]


<span style=\"color: #0000ff; text-decoration: underline;\">has-flush</span>: <span style=\"color: #a020f0;\">func</span> [ hand ] [
    1 = <span style=\"color: #228b22;\">length?</span> group-by-suit hand
]

<span style=\"color: #0000ff; text-decoration: underline;\">has-straight</span>: <span style=\"color: #a020f0;\">func</span> [ hand ] [
    <span style=\"color: #0000ff;\">rs</span>: <span style=\"color: #228b22;\">sort</span> ranks hand
    rs = fn/range rs/1 (rs/1 + (<span style=\"color: #228b22;\">length?</span> rs) - 1)
]

<span style=\"color: #0000ff; text-decoration: underline;\">has-straight-flush</span>: <span style=\"color: #a020f0;\">func</span> [ hand ] [
    <span style=\"color: #a020f0;\">all</span> [ has-straight hand has-flush hand ]
]

<span style=\"color: #0000ff; text-decoration: underline;\">has-group-of</span>: <span style=\"color: #a020f0;\">func</span> [ size hand ] [
    <span style=\"color: #0000ff;\">fs</span>: count-ranks hand
    fn/val-in? size fs
]

<span style=\"color: #0000ff; text-decoration: underline;\">has-pair</span>: <span style=\"color: #a020f0;\">func</span> [ hand ] [ has-group-of 2 hand ]
<span style=\"color: #0000ff; text-decoration: underline;\">has-three</span>: <span style=\"color: #a020f0;\">func</span> [ hand ] [ has-group-of 3 hand ]
<span style=\"color: #0000ff; text-decoration: underline;\">has-four</span>: <span style=\"color: #a020f0;\">func</span> [ hand ] [ has-group-of 4 hand ]
<span style=\"color: #0000ff; text-decoration: underline;\">has-two-pair</span>: <span style=\"color: #a020f0;\">func</span> [ hand ] [
    <span style=\"color: #0000ff;\">fs</span>: fn/frequencies values-of count-ranks hand
    2 = fs/2
]
<span style=\"color: #0000ff; text-decoration: underline;\">has-full-house</span>: <span style=\"color: #a020f0;\">func</span> [ hand ] [ <span style=\"color: #a020f0;\">all</span> [ has-pair hand has-three hand ]]</pre>

<p>Not much trouble taking that step, once I kind of sort of got what I was doing, but I'd be coding along and occasionally get invalid argument errors. And it would <i>always</i> turn out to be a problem with the separation of arguments and calls. It happened in quite a few places, but the worst offender was</p>

<pre><span style=\"color: #0000ff; text-decoration: underline;\">has-straight</span>: <span style=\"color: #a020f0;\">func</span> [ hand ] [
    <span style=\"color: #0000ff;\">rs</span>: <span style=\"color: #228b22;\">sort</span> ranks hand
    rs = fn/range rs/1 (rs/1 + (<span style=\"color: #228b22;\">length?</span> rs) - 1)
]</pre>

<p>That line starting with <code>rs = </code>, specifically. Initially, it read <code>rs = fn/range rs/1 rs/1 + length? rs - 1</code>. Interpreter says: WTFYFWWYETT?<a href=\"#foot-Sat-Jul-27-122315EDT-2013\" name=\"note-Sat-Jul-27-122315EDT-2013\">[2]</a>. What the snippet means is what you can read from the parenthesized version above. That is,</p>

<blockquote>
  Apply the function <code>fn/range</code> to the argument \"<code>rs/1</code>\" and the argument \"one less than the <code>length?</code> of <code>rs</code> added to <code>rs/1</code>\".
</blockquote>

<p>This is probably an expressive edge-case, but it's slightly concerning that I ran into it so soon. That scope issue is still outstanding, by the way. <code>Object!</code>s don't have internal scope by default either, which begs the question of why they're called \"Objects\", so the net effect is still the same.</p>

<pre>&gt;&gt; <span style=\"color: #a020f0;\">do</span> <span style=\"color: #7a378b;\">%poker-hands.r</span>
<span style=\"color: #a020f0;\">do</span> <span style=\"color: #7a378b;\">%poker-hands.r</span>
<span style=\"color: #0000ff;\">Script</span>: <span style=\"color: #8b2252;\">\"Untitled\"</span> <span style=\"color: #0000ff;\">Version</span>: none <span style=\"color: #0000ff;\">Date</span>: none
&gt;&gt; <span style=\"color: #0000ff;\">res</span>: <span style=\"color: #8b2252;\">\"Foobarbaz\"</span>
<span style=\"color: #0000ff;\">res</span>: <span style=\"color: #8b2252;\">\"Foobarbaz\"</span>
== <span style=\"color: #8b2252;\">\"Foobarbaz\"</span>

&gt;&gt; fn/map <span style=\"color: #a020f0;\">func</span> [ a ] [ a + 1 ] [ 1 2 3 4 5 ]
fn/map <span style=\"color: #a020f0;\">func</span> [ a ] [ a + 1 ] [ 1 2 3 4 5 ]
== [2 3 4 5 6]

&gt;&gt; res
res
== [2 3 4 5 6]</pre>

<p>Anyhow, it technically runs. As long as you don't nest <code>map</code> or <code>frequency</code> calls. After a trip over to the <a href=\"http://chat.stackoverflow.com/rooms/291/rebol-and-red\">Rebol/Red chat room on SO</a> for some quick review by actual rebollers<a href=\"#foot-Sat-Jul-27-122340EDT-2013\" name=\"note-Sat-Jul-27-122340EDT-2013\">[3]</a>, I got to</p>

<h3>The Third Crack</h3>

<pre>REBOL []

<span style=\"color: #0000ff;\">fn</span>: <span style=\"color: #a020f0;\">context</span> [
    <span style=\"color: #0000ff; text-decoration: underline;\">map</span>: <span style=\"color: #a020f0;\">func</span>t [ fn a-list ] [
        <span style=\"color: #0000ff;\">res</span>: <span style=\"color: #228b22;\">make</span> <span style=\"color: #228b22;\">block!</span> 5
        <span style=\"color: #a020f0;\">foreach</span> elem a-list [ <span style=\"color: #a020f0;\">append/only</span> res <span style=\"color: #a020f0;\">do</span> [fn elem] ]
        res
    ]
    <span style=\"color: #0000ff; text-decoration: underline;\">range</span>: <span style=\"color: #a020f0;\">func</span>t [ start end ] [
        <span style=\"color: #0000ff;\">res</span>: <span style=\"color: #228b22;\">make</span> <span style=\"color: #228b22;\">block!</span> 10
        <span style=\"color: #0000ff;\">step</span>: <span style=\"color: #a020f0;\">either</span> start &lt; end [ 1 ] [ -1 ]
        <span style=\"color: #a020f0;\">for</span> i start end step [ <span style=\"color: #a020f0;\">append</span> res i ]
        res
    ]
    <span style=\"color: #0000ff; text-decoration: underline;\">frequencies</span>: <span style=\"color: #a020f0;\">func</span>t [ a-list ] [
        <span style=\"color: #0000ff;\">res</span>: <span style=\"color: #228b22;\">make</span> map! 5
        <span style=\"color: #a020f0;\">foreach</span> elem a-list [
            <span style=\"color: #a020f0;\">either</span> res/(elem)
            [ <span style=\"color: #228b22;\">poke</span> res elem res/(elem) + 1 ]
            [ <span style=\"color: #a020f0;\">append</span> res <span style=\"color: #a020f0;\">reduce</span> [ elem 1 ]]
        ]
        res
    ]
    <span style=\"color: #0000ff; text-decoration: underline;\">val-in?</span>: <span style=\"color: #a020f0;\">func</span>t [ val map ] [
        <span style=\"color: #a020f0;\">foreach</span> k map [
            <span style=\"color: #a020f0;\">if</span> map/(k) = val [ <span style=\"color: #a020f0;\">return</span> true ]
        ]
        <span style=\"color: #a020f0;\">return</span> false
    ]
]

<span style=\"color: #0000ff;\">hands</span>: <span style=\"color: #228b22;\">make</span> <span style=\"color: #228b22;\">object!</span> [
    <span style=\"color: #0000ff;\">straight</span>: [ &#9829;/1  &#9827;/2  &#9827;/3  &#9830;/4  &#9824;/5 ]
    <span style=\"color: #0000ff;\">straight-flush</span>: [ &#9829;/1  &#9829;/2  &#9829;/3  &#9829;/4  &#9829;/5 ]
    <span style=\"color: #0000ff;\">pair</span>: [ &#9829;/2  &#9827;/2  &#9827;/3  &#9830;/4  &#9824;/5 ]
    <span style=\"color: #0000ff;\">two-pair</span>: [ &#9829;/2  &#9827;/2  &#9827;/3  &#9830;/3  &#9824;/5 ]
]

<span style=\"color: #0000ff; text-decoration: underline;\">read-hand</span>: <span style=\"color: #a020f0;\">func</span> [ hand-string ] [
    <span style=\"color: #0000ff;\">suits-table</span>: [ #<span style=\"color: #8b2252;\">\"H\"</span> &#9829;  #<span style=\"color: #8b2252;\">\"C\"</span> &#9827;  #<span style=\"color: #8b2252;\">\"D\"</span> &#9830;  #<span style=\"color: #8b2252;\">\"S\"</span> &#9824; ]
    <span style=\"color: #0000ff;\">ranks-table</span>: <span style=\"color: #8b2252;\">\"--23456789TJQKA\"</span>
    fn/map <span style=\"color: #a020f0;\">func</span> [ c ] [
        <span style=\"color: #a020f0;\">to-path</span> <span style=\"color: #a020f0;\">reduce</span> [ 
            <span style=\"color: #228b22;\">select</span> suits-table c/2 
            <span style=\"color: #a020f0;\">offset?</span> ranks-table <span style=\"color: #228b22;\">find</span> c/1 ranks-table ]
    ] <span style=\"color: #a020f0;\">parse</span> hand-string <span style=\"color: #8b2252;\">\" \"</span>
]

<span style=\"color: #0000ff; text-decoration: underline;\">ranks</span>: <span style=\"color: #a020f0;\">func</span> [ hand ] [ fn/map <span style=\"color: #a020f0;\">func</span> [ c ] [ <span style=\"color: #a020f0;\">probe</span> <span style=\"color: #228b22;\">second</span> c] hand ]
<span style=\"color: #0000ff; text-decoration: underline;\">suits</span>: <span style=\"color: #a020f0;\">func</span> [ hand ] [ fn/map <span style=\"color: #a020f0;\">func</span> [ c ] [ <span style=\"color: #a020f0;\">probe</span> <span style=\"color: #228b22;\">first</span> c ] hand ]

<span style=\"color: #0000ff; text-decoration: underline;\">count-ranks</span>: <span style=\"color: #a020f0;\">func</span> [ hand ] [ fn/frequencies ranks hand ]
<span style=\"color: #0000ff; text-decoration: underline;\">count-suits</span>: <span style=\"color: #a020f0;\">func</span> [ hand ] [ fn/frequencies suits hand ]


<span style=\"color: #0000ff; text-decoration: underline;\">has-flush</span>: <span style=\"color: #a020f0;\">func</span> [ hand ] [
    1 = <span style=\"color: #228b22;\">length?</span> group-by-suit hand
]

<span style=\"color: #0000ff; text-decoration: underline;\">has-straight</span>: <span style=\"color: #a020f0;\">func</span> [ hand ] [
    <span style=\"color: #0000ff;\">rs</span>: <span style=\"color: #228b22;\">sort</span> ranks hand
    rs = fn/range rs/1 (rs/1 + (<span style=\"color: #228b22;\">length?</span> rs) - 1)
]

<span style=\"color: #0000ff; text-decoration: underline;\">has-straight-flush</span>: <span style=\"color: #a020f0;\">func</span> [ hand ] [
    <span style=\"color: #a020f0;\">all</span> [ has-straight hand has-flush hand ]
]

<span style=\"color: #0000ff; text-decoration: underline;\">has-group-of</span>: <span style=\"color: #a020f0;\">func</span> [ size hand ] [
    <span style=\"color: #0000ff;\">fs</span>: count-ranks hand
    fn/val-in? size fs
]

<span style=\"color: #0000ff; text-decoration: underline;\">has-pair</span>: <span style=\"color: #a020f0;\">func</span> [ hand ] [ has-group-of 2 hand ]
<span style=\"color: #0000ff; text-decoration: underline;\">has-three</span>: <span style=\"color: #a020f0;\">func</span> [ hand ] [ has-group-of 3 hand ]
<span style=\"color: #0000ff; text-decoration: underline;\">has-four</span>: <span style=\"color: #a020f0;\">func</span> [ hand ] [ has-group-of 4 hand ]
<span style=\"color: #0000ff; text-decoration: underline;\">has-two-pair</span>: <span style=\"color: #a020f0;\">func</span> [ hand ] [
    <span style=\"color: #0000ff;\">fs</span>: fn/frequencies values-of count-ranks hand
    2 = fs/2
]
<span style=\"color: #0000ff; text-decoration: underline;\">has-full-house</span>: <span style=\"color: #a020f0;\">func</span> [ hand ] [ <span style=\"color: #a020f0;\">all</span> [ has-pair hand has-three hand ]]</pre>

<p>Note that the definitions of <code>fn</code>, and in particular <code>fn/map</code> have changed subtly. The change to <code>fn</code> in general is that each of its functions is now a <code><a href=\"http://www.rebol.com/r3/docs/functions/funct.html\">funct</a></code> instead of just a <a href=\"http://www.rebol.com/r3/docs/functions/func.html\"><code>func</code></a>. This is the solution to that scope problem from earlier; <code>funct</code> provides an implicit scope for its body block where <code>func</code> doesn't. Meaning that if you define <code>fn</code> in this new way, you can now actually do</p>

<pre>&gt;&gt; <span style=\"color: #0000ff;\">res</span>: <span style=\"color: #8b2252;\">\"Foobarbaz\"</span>
<span style=\"color: #0000ff;\">res</span>: <span style=\"color: #8b2252;\">\"Foobarbaz\"</span>
== <span style=\"color: #8b2252;\">\"Foobarbaz\"</span>

&gt;&gt; fn/map <span style=\"color: #a020f0;\">func</span> [ a ] [ a + 1] [ 1 2 3 4 5 ]
fn/map <span style=\"color: #a020f0;\">func</span> [ a ] [ a + 1] [ 1 2 3 4 5 ]
== [2 3 4 5 6]

&gt;&gt; res
res
== <span style=\"color: #8b2252;\">\"Foobarbaz\"</span>

&gt;&gt; </pre>

<p>and you can safely nest <code>fn/map</code>/<code>fn/frequencies</code> calls.</p>

<p>The other subtle change to <code>fn/map</code> specifically is that it now uses <code>append/only</code> rather than <code>append</code>. The reason for this is that <code>append</code> implicitly splices its arguments. That is</p>

<pre>&gt;&gt; <span style=\"color: #a020f0;\">do</span> <span style=\"color: #7a378b;\">%poker-hands.r</span> <span style=\"color: #b22222;\">;; </span><span style=\"color: #b22222;\">map defined with plain append
</span><span style=\"color: #a020f0;\">do</span> <span style=\"color: #7a378b;\">%poker-hands.r</span> <span style=\"color: #b22222;\">;; </span><span style=\"color: #b22222;\">map defined with plain append
</span><span style=\"color: #0000ff;\">Script</span>: <span style=\"color: #8b2252;\">\"Untitled\"</span> <span style=\"color: #0000ff;\">Version</span>: none <span style=\"color: #0000ff;\">Date</span>: none
&gt;&gt; read-hand <span style=\"color: #8b2252;\">\"1H 2C 3C 4D 5S\"</span>
read-hand <span style=\"color: #8b2252;\">\"1H 2C 3C 4D 5S\"</span>
== [&#9829; 1 &#9827; 2 &#9827; 3 &#9830; 4 &#9824; 5]

&gt;&gt; <span style=\"color: #a020f0;\">do</span> <span style=\"color: #7a378b;\">%poker-hands.r</span> <span style=\"color: #b22222;\">;; </span><span style=\"color: #b22222;\">changed to append/only
</span><span style=\"color: #a020f0;\">do</span> <span style=\"color: #7a378b;\">%poker-hands.r</span> <span style=\"color: #b22222;\">;; </span><span style=\"color: #b22222;\">changed to append/only
</span><span style=\"color: #0000ff;\">Script</span>: <span style=\"color: #8b2252;\">\"Untitled\"</span> <span style=\"color: #0000ff;\">Version</span>: none <span style=\"color: #0000ff;\">Date</span>: none
&gt;&gt; read-hand <span style=\"color: #8b2252;\">\"1H 2C 3C 4D 5S\"</span>
read-hand <span style=\"color: #8b2252;\">\"1H 2C 3C 4D 5S\"</span>
== [&#9829;/1 &#9827;/2 &#9827;/3 &#9830;/4 &#9824;/5]

&gt;&gt; </pre>

<p>Apparently the original author found that he was doing sequence splicing more than actual <code>append</code>ing. But instead of writing a separate <code><a href=\"http://www.rebol.com/r3/docs/functions/splice.html\">splice</a></code> function, or maybe a <code>/splice</code> refinement to <code>append</code>, he made splicing <code>append</code>s' default behavior. No, I have no idea what he was smoking at the time.</p>

<p>In order to get the behavior you'd probably expect from plain <code>append</code>, you have to run the refinement <code>/only</code>, which as far as I can tell, generally means \"do what you actually wanted to do\" on any function it's provided for. A guy calling himself <a href=\"http://hostilefork.com/\">Hostile Fork</a> <a href=\"https://docs.google.com/presentation/d/1pmDE7eNsZtFb3ey8KXvNz8RF21NXZeFqvDKfR5D-dI4/edit#slide=id.geceb89b9_0210\">says it</a> better than I could:</p>

<blockquote>
  We don't tell someone to take out the garbage and then they shoot the cat if you don't say <i>\"Oh...wait... I meant <code>ONLY</code> take out the garbage\"</i>! The name <code>ONLY</code> makes no semantic sense; if it <i>did</i> make sense, then it's what should be done by the operation without any refinements!<span class=\"sig\">-Hostile Fork</span>
</blockquote>

<h3>Afermath</h3>

<p>So that's that. I didn't get to a working solution yet, because this script doesn't compare two hands to determine a winner (or a draw), and it doesn't handle the aces-low edge case, but I'll leave those as an exercise for the reader. It'll tell you what hand you have, and it can elegantly read the specified input. At the language level, REBOL3 is interesting. And the community is both enthusiastic and smart. And I really hope the r2/3 transition gives them the excuse to clean up the few counter-intuitive things that slipped in over time. It's enough that I'm making an addition to the logo bar, which I don't do lightly<a href=\"#foot-Sat-Jul-27-122350EDT-2013\" name=\"note-Sat-Jul-27-122350EDT-2013\">[4]</a>.</p>

<p>This series of tinkering had no particular cause. I was just playing around with a problem I had lying around in a language I was curious about. Next time, I'll pick one, probably some kind of lightweight application server, and see how far I can push it. Hopefully that doesn't get too far in the way of my <a href=\"http://lispinsummerprojects.org/\">LISP</a> project...</p>

<hr />
<h5>Footnotes</h5>
<p>1 - <a href=\"#note-Sat-Jul-27-122302EDT-2013\" name=\"foot-Sat-Jul-27-122302EDT-2013\">[back]</a> - Using <code><a href=\"http://www.rebol.com/r3/docs/functions/poke.html\">poke</a></code>, in case you're curious.</p>

<p>2 - <a href=\"#note-Sat-Jul-27-122315EDT-2013\" name=\"foot-Sat-Jul-27-122315EDT-2013\">[back]</a> - What The Fuck You Fucker, Why Would You Ever Type That?</p>

<p>3 - <a href=\"#note-Sat-Jul-27-122340EDT-2013\" name=\"foot-Sat-Jul-27-122340EDT-2013\">[back]</a> - I have no idea why they don't just call themselves \"rebels\".</p>

<p>4 - <a href=\"#note-Sat-Jul-27-122350EDT-2013\" name=\"foot-Sat-Jul-27-122350EDT-2013\">[back]</a> - PHP logo notwithstanding.</p>
"))
((5202 3723 615532000) :INSERT (143 :POSTED 3583886400))
((5202 3723 615536000) :INSERT (143 :TAG :REBOL))
((5202 3723 615813000) :INSERT (144 :TITLE "REBOL Mode"))
((5202 3723 615817000) :INSERT (144 :FILE "rebol-mode.html"))
((5202 3723 615819000) :INSERT (144 :EDITED 3610301285))
((5202 3723 615821000) :INSERT
 (144 :BODY
  "<p>I need a short break here. It's nowhere near done yet, not even the pieces I wanted to put together. But, at the risk of ending up with another piece of detritus littering my blog, I need to let off some steam and talk about where I'm going with this.</p>

<p>For the past couple of days, I've been busy working on writing a replacement for <code><a href=\"http://www.rebol.com/tools/rebol.el\">rebol.el</a></code> and running into some not altogether unexpected headaches. The file I just linked you hasn't been updated since about 2001, and doesn't include a license block. After attempting to contact its current host and getting no response, I just went ahead and started from scratch. I had a few goals from the outset:</p>

<h2>Proper Highlighting</h2>

<p>The current <code>rebol.el</code> was put together for REBOL2, and thus lacks highlighting for certain symbols that have been introduced since. The one that sticks out most in my mind is the symbol <code>funct</code>, which you saw semi-humorously higlighted as <code><span style=\"color: #a020f0;\">func</span>t</code> in the third section <a href=\"/article?name=rebol-without-a-cause.html\">last time</a>.</p>

<h2>Jump-To-Definition</h2>

<p>Some kind of binding in a mode that lets you jump to the file and line of the definition of a given symbol. Not entirely sure what the interaction there is going to be, probably just a key-binding that jumps for the <code>thing-at-point</code>. This one looks like it would be pretty simple to pull off actually; when a file is loaded, record the position of any assignments in it. Assignments are simple to find, since there's exactly one way to do it, and it involves adding a single-character suffix to whatever word you're assigning.</p>

<h2>REPL</h2>

<p>There isn't a <code>run-rebol</code>, in the style of <code>run-python</code> or <code>run-lisp</code>, and I'd like one.</p>

<h2>Send Region</h2>

<p>Fairly self-explanatory. Or maybe not? In Lisp modes, there's typically a binding to evaluate the current s-expression, either <code>C-c C-c</code> or <code>C-M-x</code>. When you hit it, the effect is to evaluate the surrounding block into the REPL. There isn't a <code>send-region</code> command in the current <code>rebol-mode</code>, probably because they don't directly implement an in-Emacs-REPL, but since I want the second, I'd also like the first.</p>

<h2>Documentation Display</h2>

<p>Just a simple, straight-forward way to display help about a particular symbol in a separate buffer. Nothing fancy, move along. Ok, in a future edition, it would be nice if the return text was all <a href=\"http://www.gnu.org/software/emacs/manual/html_node/elisp/Clickable-Text.html\">linkified</a> and <a href=\"https://www.gnu.org/software/emacs/manual/html_node/elisp/Text-Properties.html#Text-Properties\">highlighted</a> so that you could click/<code>&lt;Ret&gt;</code> through docs, but that can wait.</p>

<h2>Source Display</h2>

<p>This one might be a bit more functional. You see, you can use the <code><a href=\"http://www.rebol.com/r3/docs/functions/source.html\">source</a></code> function to get a source dump of almost<a href=\"#foot-Fri-Aug-02-000908EDT-2013\" name=\"note-Fri-Aug-02-000908EDT-2013\">[1]</a> any REBOL3 word. It may or may not be useful at all, but it would be pretty cool to build a buffer that would let you load such <code>source</code> output, change it, then send it back to the REPL when you save.</p>

<h2>Argument Hints</h2>

<p>If you've used things like <a href=\"http://common-lisp.net/project/slime/\">SLIME</a>, you'll appreciate this one. As you're typing, a summary of the arguments to the thing you're typing shows up in the minibuffer. This is trivial in Lisp, because of the way everything is parenthesized pretty consistently. It turns out to be quite a headache in REBOL3, and basically necessitates interacting with some sort of running runtime system. Here's an example, pretend these are all actual REBOL words:</p>

foo bar baz mumble |

<p>Assuming that pipe represents my cursor, what should the mode display in your minibuffer, and how would you find out? Near as I can tell, you'd need to ask a running r3 interpreter with the words <code>foo</code>, <code>bar</code>, <code>baz</code> and <code>mumble</code> defined. What it would do is:</p>

<ul>
  <li>check if <code>mumble</code> is a function, and if so, print the arg-hint for <code>mumble</code>, otherwise</li>
  <li>check if <code>baz</code> is a function of more than one argument, and if so print the arg-hint for <code>baz</code>, otherwise</li>
  <li>check if <code>bar</code> is a function of more than two arguments, and if so print the blah blah blah</li>
</ul>

<p>until you run out of words to check. Another open question is: how far back should the mode look for relevant symbols? For the moment, I've settled on \"To the beginning of the previous block, or the first assignment, whichever comes first\", but that's probably not the best approach to take.</p>

<h3>Where I've Got So Far</h3>

<p>At the moment, I'm about a quarter of the way there by my reckoning. And I've run into some issues, both expected and unexpected. The mode as currently posted <a href=\"https://github.com/Inaimathi/r3-mode\">here</a>, implements proper highlighting, a basic REPL, a basic documentation display, a basic source display, and a hacked-together <code>send-region</code>. I've already gone through the problems with argument hinting in an almost-purely whitespace-delimited language; there was only one completely unexpected problem and two little gotchas I ran into. Lets start small:</p>

<p><a href=\"https://github.com/Inaimathi/r3-mode/blob/master/r3-mode.el#L93-L96\">Gotcha the first</a> is that <a href=\"http://www.rebol.com/docs/core23/rebolcore-12.html#section-2.2\">REBOL path strings</a> aren't fully cross-platform. They do the standard Unix thing, and auto-convert for Windows, but if you include a drive letter, which the Windows version of Emacs does by default, your string won't be recognized as a file. As a result, I need that extra snippet to sanitize Windows paths.</p>

<p><a href=\"https://github.com/Inaimathi/r3-mode/blob/master/r3-mode.el#L51-L53\">Gotcha the second</a> is another cross-platform, or possibly cross-version, issue. For some reason the Linux edition of the r3 <code>comint</code> buffer prints its input before its return value. That is</p>

<pre>(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">proc-filter</span> (process msg)
  (message <span style=\"color: #8b2252;\">\"%s\"</span> msg))

(set-process-filter proc #'proc-filter)

<span style=\"color: #b22222;\">;; </span><span style=\"color: #b22222;\">on Linux
</span>
(process-send-string proc <span style=\"color: #8b2252;\">\"source source\"</span>)

<span style=\"color: #b22222;\">;; </span><span style=\"color: #b22222;\">Output to *Message* is
</span><span style=\"color: #b22222;\">;;</span><span style=\"color: #b22222;\">
</span><span style=\"color: #b22222;\">;;    </span><span style=\"color: #b22222;\">source source
</span><span style=\"color: #b22222;\">;;    </span><span style=\"color: #b22222;\">source: make function ! [[ 
</span><span style=\"color: #b22222;\">;;    </span><span style=\"color: #b22222;\">..
</span><span style=\"color: #b22222;\">;;    </span><span style=\"color: #b22222;\">&gt;&gt;
</span>
<span style=\"color: #b22222;\">;; </span><span style=\"color: #b22222;\">on Windows
</span>
(process-send-string proc <span style=\"color: #8b2252;\">\"source source\"</span>)

<span style=\"color: #b22222;\">;; </span><span style=\"color: #b22222;\">Output to *Message* is
</span><span style=\"color: #b22222;\">;;</span><span style=\"color: #b22222;\">
</span><span style=\"color: #b22222;\">;;    </span><span style=\"color: #b22222;\">source: make function ! [[ 
</span><span style=\"color: #b22222;\">;;    </span><span style=\"color: #b22222;\">..
</span><span style=\"color: #b22222;\">;;    </span><span style=\"color: #b22222;\">&gt;&gt;</span></pre>

<p>Not a <i>huge</i> deal, except that I have to deal with it if I want to succeed in my master plan of running an r3 interpreter behind the scenes. Which brings me to the big, unexpected piece of code I had to write. This actually took a few tries, as I came to grips with the situation.</p>

<pre>(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">r3-process-filter</span> (proc msg)
  <span style=\"color: #8b2252;\">\"Receives messages from the r3 background process.
Processes might send responses in 'bunches', rather than one complete response,
which is why we need to collect them, then split on an ending flag of some sort.
Currently, that's the REPL prompt '^&gt;&gt; '\"</span>
  (<span style=\"color: #a020f0;\">let</span> ((buf <span style=\"color: #8b2252;\">\"\"</span>))
    (setf buf (concat buf msg))
    (<span style=\"color: #a020f0;\">when</span> (string-match <span style=\"color: #8b2252;\">\"&gt;&gt; $\"</span> msg)
      (mapc #'r3-ide-directive 
            (split-string buf <span style=\"color: #8b2252;\">\"^&gt;&gt; \"</span>))
      (setf buf <span style=\"color: #8b2252;\">\"\"</span>))))

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">r3-send!</span> (string)
  <span style=\"color: #8b2252;\">\"Shortcut function to send a message to the background r3 interpreter process\"</span>
  (process-send-string r3-rebol-process (concat string <span style=\"color: #8b2252;\">\"\\n\"</span>)))

(set-process-filter r3-rebol-process #'r3-process-filter)

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">r3-ide-directive</span> (msg)
  (<span style=\"color: #a020f0;\">let*</span> ((raw-lines (butlast (split-string msg <span style=\"color: #8b2252;\">\"\\r?\\n\"</span>)))
         <span style=\"color: #b22222;\">;; </span><span style=\"color: #b22222;\">the linux edition seems to return the function call before its output. Might also be an Emacs version issue.
</span>         (lines (<span style=\"color: #a020f0;\">if</span> (eq system-type 'gnu/linux) (rest raw-lines) raw-lines)))
    (<span style=\"color: #a020f0;\">when</span> lines
      (<span style=\"color: #a020f0;\">cond</span> ((string-match <span style=\"color: #8b2252;\">\"NEW-KEYWORDS: </span><span style=\"color: #8b2252; font-weight: bold;\">\\\\</span><span style=\"color: #8b2252; font-weight: bold;\">(</span><span style=\"color: #8b2252;\">.*</span><span style=\"color: #8b2252; font-weight: bold;\">\\\\</span><span style=\"color: #8b2252; font-weight: bold;\">)</span><span style=\"color: #8b2252;\">\"</span> (first lines))
             (<span style=\"color: #a020f0;\">let</span> ((type (intern (match-string 1 (first lines)))))
               (setf (gethash type r3-highlight-symbols) (rest lines))
               (r3-set-fonts)))
            ((string-match <span style=\"color: #8b2252;\">\"HELP: </span><span style=\"color: #8b2252; font-weight: bold;\">\\\\</span><span style=\"color: #8b2252; font-weight: bold;\">(</span><span style=\"color: #8b2252;\">.*</span><span style=\"color: #8b2252; font-weight: bold;\">\\\\</span><span style=\"color: #8b2252; font-weight: bold;\">)</span><span style=\"color: #8b2252;\">\"</span> (first lines))
             (get-buffer-create <span style=\"color: #8b2252;\">\"*r3-help*\"</span>)
             (<span style=\"color: #a020f0;\">with-current-buffer</span> <span style=\"color: #8b2252;\">\"*r3-help*\"</span>
               (kill-region (point-min) (point-max))
               (insert <span style=\"color: #8b2252;\">\";;; \"</span> (match-string 1 (first lines)) <span style=\"color: #8b2252;\">\" ;;;\\n\\n\"</span>)
               (mapc (<span style=\"color: #a020f0;\">lambda</span> (l) (insert l) (insert <span style=\"color: #8b2252;\">\"\\n\"</span>)) (rest lines)))
             (pop-to-buffer <span style=\"color: #8b2252;\">\"*r3-help*\"</span>))
            ((string-match <span style=\"color: #8b2252;\">\"SOURCE\"</span> (first lines))
             (<span style=\"color: #a020f0;\">ignore-errors</span> (kill-buffer <span style=\"color: #8b2252;\">\"*r3-source*\"</span>))
             (get-buffer-create <span style=\"color: #8b2252;\">\"*r3-source*\"</span>)
             (<span style=\"color: #a020f0;\">with-current-buffer</span> <span style=\"color: #8b2252;\">\"*r3-source*\"</span>
               (mapc (<span style=\"color: #a020f0;\">lambda</span> (l) (insert l) (insert <span style=\"color: #8b2252;\">\"\\n\"</span>)) (rest lines))
               (r3-mode))
             (pop-to-buffer <span style=\"color: #8b2252;\">\"*r3-source*\"</span>))))))</pre>

<p>The third piece there isn't terribly important<a href=\"#foot-Fri-Aug-02-000919EDT-2013\" name=\"note-Fri-Aug-02-000919EDT-2013\">[2]</a>. The gist of it is that I want to run a separate <code>r3</code> process, and communicate it for certain things. In order to do that, I have to attach a listener to the process. Then, whenever I send a string to the process, it will respond with a process id and message to that listener.</p>

<p>The catch I wasn't counting on was that output arrives in \"bunches\". Which is to say, if you send three or four commands, you're going to get back strings of ~400 characters, each containing either a partial response, a full response or multiple full/partial responses. Because I'm not expecting responses much larger than a couple thousand characters, I can get away with just buffering until output lets up, but that might not be the best general strategy.</p>

<p>I'll talk about this a bit more after I've had some more time to work on it. Right now?</p>

<p>I. Need. Sleep.</p>

<p>Cheers.</p>


<hr />
<h5>Footnotes</h5>
<p>1 - <a href=\"#note-Fri-Aug-02-000908EDT-2013\" name=\"foot-Fri-Aug-02-000908EDT-2013\">[back]</a> - Before you ask, yes, it's entirely possible to get the <code>source</code> of <code>source</code>. The only words you can't introspect on in this way are <code>native!</code>s, which are implemented in C rather than REBOL.</p>

<p>2 - <a href=\"#note-Fri-Aug-02-000919EDT-2013\" name=\"foot-Fri-Aug-02-000919EDT-2013\">[back]</a> - As a note to self, I'm going to have to re-write pieces of it. Both for speed, and because I'm repeating blocks for each condition. That needs to be a mini-dsl instead of manual code.</p>
"))
((5202 3723 615922000) :INSERT (144 :POSTED 3584318400))
((5202 3723 615924000) :INSERT (144 :TAG :ALMOST-LITERATE-PROGRAMMING))
((5202 3723 615926000) :INSERT (144 :TAG :ELISP))
((5202 3723 615929000) :INSERT (144 :TAG :EMACS))
((5202 3723 615931000) :INSERT (144 :TAG :REBOL))
((5202 3723 616278000) :INSERT (145 :TITLE "Forthlike and Briefly, Keyboards"))
((5202 3723 616283000) :INSERT (145 :FILE "keyboards-and-forthlike.html"))
((5202 3723 616286000) :INSERT (145 :EDITED 3610022331))
((5202 3723 616288000) :INSERT
 (145 :BODY
  "<p>So I got a <a href=\"http://elitekeyboards.com/products.php?sub=topre_keyboards,rftenkeyless&pid=rf_se1700\">new keyboard</a>.</p>

<p>All told, it ran me something in the area of $250. Not sure I consider it worth it, but I've only really typed on it for a solid day so far, so that's probably not enough experience to make a call about it. So far, my impression is that it <i>is</i> an improvement over the Cherry MX blues I've tried, but not quite ~$150 worth of improvement. If you've got some cash burning a hole in your pocket, and a need for more comfortable typing, I can heartily recommend it to you. It's very comfy, the Topre keys feel great, there's dip-switch support for swapping the Caps Lock and left Ctrl keys<a href=\"#foot-Sat-Aug-10-172026EDT-2013\" name=\"note-Sat-Aug-10-172026EDT-2013\">[1]</a>. It also costs quite a bit less than the <a href=\"http://elitekeyboards.com/products.php?sub=pfu_keyboards,hhkbpro2&pid=pdkb400wns\">HHK2</a>, which I would totally order if someone dumped a million dollars on me tomorrow, but as it stands, $400 is out of my price-range for a keyboard.</p>

<h3>Forthlike</h3>

<p>Nothing serious here, just some thinking and playing I've been doing.</p>

<p>At the <a href=\"http://lispwiki.inaimathi.ca/2013%20August%20Meeting\">last meeting</a>, a fellow Toronto Common Lisper presented an idea of <i>his</i> for a language titled FNFAL. The FuNctional Fixed Arity Language. Its primary goal is to be extremely simple to implement, while also not being quite as alien as <a href=\"http://home.iae.nl/users/mhx/sf.html\">Forth</a> or <a href=\"http://www.call-cc.org/\">Scheme</a> to the uninitiated. Someone made a comment to the effect that Forth was extremely easy to implement, which sent me off thinking about how easy it actually is.</p>

<p>I pointedly <i>didn't</i> read the spec, but I have read a few forth <a href=\"http://bernd-paysan.de/httpd-en.html\">tutorials</a> and I have vigorously poked at <a href=\"http://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Tutorial.html\">GForth</a> once or twice.</p>

<p>Anyhow, the answer is \"not very hard\", assuming you start with a high-level language and don't adhere to the standard<a href=\"#foot-Sat-Aug-10-172030EDT-2013\" name=\"note-Sat-Aug-10-172030EDT-2013\">[2]</a>. The entire exercise took me one sitting of about three hours, and ended up weighing in at just under 100 lines of Common Lisp, not including the package and system definitions.</p>

<p>Utility first:</p>

<pre><span style=\"color: #b22222;\">;; </span><span style=\"color: #b22222;\">util.lisp
</span>(<span style=\"color: #a020f0;\">in-package</span> <span style=\"color: #7a378b;\">:forthlike</span>)

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">println</span> (thing) (format t <span style=\"color: #8b2252;\">\"~a~%\"</span> thing))

(<span style=\"color: #a020f0;\">defmacro</span> <span style=\"color: #0000ff;\">aif</span> (test if-true if-false)
  `(<span style=\"color: #a020f0;\">let</span> ((it ,test))
     (<span style=\"color: #a020f0;\">if</span> it ,if-true ,if-false)))

(<span style=\"color: #a020f0;\">defmacro</span> <span style=\"color: #0000ff;\">bif</span> (test) `(<span style=\"color: #a020f0;\">if</span> ,test <span style=\"color: #8b2252;\">\"true\"</span> <span style=\"color: #8b2252;\">\"false\"</span>))

(<span style=\"color: #a020f0;\">defmacro</span> <span style=\"color: #0000ff;\">with-pop!</span> ((<span style=\"color: #228b22;\">&amp;rest</span> symbols) <span style=\"color: #228b22;\">&amp;body</span> body)
  `(<span style=\"color: #a020f0;\">let</span> ,(<span style=\"color: #a020f0;\">loop</span> for s in symbols collect `(,s (pop!)))
     ,@body))

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">parse-num</span> (str)
  (<span style=\"color: #a020f0;\">multiple-value-bind</span> (int end) (parse-integer str <span style=\"color: #7a378b;\">:junk-allowed</span> t)
    (<span style=\"color: #a020f0;\">if</span> (and int (/= end (length str)) (eq #\\. (aref str end)))
        (<span style=\"color: #a020f0;\">ignore-errors</span>
          (<span style=\"color: #a020f0;\">multiple-value-bind</span> (float f-end) (parse-integer str <span style=\"color: #7a378b;\">:start</span> (+ end 1))
            (+ int (float (/ float (expt 10 (- f-end end 1)))))))
        int)))</pre>

<p><code>println</code> is a shortcut for printing something with a newline at the end, <code>aif</code> is one of <a href=\"http://dunsmor.com/lisp/onlisp/onlisp_18.html\">Graham's anaphors</a>, <code>bif</code> is a function to let me deal with the target languages' booleans<a href=\"#foot-Sat-Aug-10-172038EDT-2013\" name=\"note-Sat-Aug-10-172038EDT-2013\">[3]</a>, and <code>with-pop!</code> is a piece of utility to make it easier to work with multiple values from the stack. You'll see how that comes together in a second.</p>

<p><code>parse-num</code> looks like it's the scariest thing here, but all it actually does is use <code>parse-integer</code> to parse integers <i>or</i> floats.</p>

<p>Moving on...</p>

<pre><span style=\"color: #b22222;\">;; </span><span style=\"color: #b22222;\">forthlike
</span>(<span style=\"color: #a020f0;\">in-package</span> #<span style=\"color: #7a378b;\">:forthlike</span>)

(<span style=\"color: #a020f0;\">defparameter</span> <span style=\"color: #a0522d;\">*stack*</span> nil)
(<span style=\"color: #a020f0;\">defparameter</span> <span style=\"color: #a0522d;\">*words*</span> (make-hash-table <span style=\"color: #7a378b;\">:test</span> #'equal))
(<span style=\"color: #a020f0;\">defparameter</span> <span style=\"color: #a0522d;\">*input*</span> <span style=\"color: #8b2252;\">\"\"</span>)

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">pull!</span> (<span style=\"color: #228b22;\">&amp;optional</span> (looking-for #\\ ))
  (<span style=\"color: #a020f0;\">multiple-value-bind</span> (word len) (split-sequence looking-for *input* <span style=\"color: #7a378b;\">:count</span> 1)
    (setf *input* (subseq *input* len))
    (first word)))

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">pop!</span> () (pop *stack*))

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">push!</span> (thing) (push thing *stack*))

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">ev</span> (word)
  (<span style=\"color: #a020f0;\">if</span> (or (string= <span style=\"color: #8b2252;\">\"true\"</span> word) (string= <span style=\"color: #8b2252;\">\"false\"</span> word))
      (push! word)
      (aif (parse-num word)
           (push! it)
           (aif (gethash word *words*)
                (funcall it)
                (format t <span style=\"color: #8b2252;\">\"Unknown word: ~s~%\"</span> word)))))

(<span style=\"color: #a020f0;\">defmacro</span> <span style=\"color: #0000ff;\">def</span> (name <span style=\"color: #228b22;\">&amp;body</span> body)
  `(setf (gethash ,name *words*) (<span style=\"color: #a020f0;\">lambda</span> () ,@body)))

(def <span style=\"color: #8b2252;\">\".\"</span> (println (pop!)))
(def <span style=\"color: #8b2252;\">\".s\"</span>
  (println <span style=\"color: #8b2252;\">\"\"</span>)
  (<span style=\"color: #a020f0;\">if</span> *stack*
      (<span style=\"color: #a020f0;\">loop</span> for i from 0 for elem in *stack*
         do (format t <span style=\"color: #8b2252;\">\"&lt; ~a &gt; :: ~a~%\"</span> i elem))
      (format t <span style=\"color: #8b2252;\">\"&lt; Empty stack &gt;~%\"</span>))
  (println <span style=\"color: #8b2252;\">\"\"</span>))

(def <span style=\"color: #8b2252;\">\"`\"</span> (push! (pull!)))
(def <span style=\"color: #8b2252;\">\",\"</span> (funcall (gethash (pop!) *words*)))
(def <span style=\"color: #8b2252;\">\"\\\"\"</span> (push! (format nil <span style=\"color: #8b2252;\">\"~s\"</span> (pull! <span style=\"color: #8b2252;\">\"\\\"\"</span>))))

(def <span style=\"color: #8b2252;\">\"dup\"</span> (push! (first *stack*)))
(def <span style=\"color: #8b2252;\">\"swap\"</span> (rotatef (first *stack*) (second *stack*)))

(def <span style=\"color: #8b2252;\">\"+\"</span> (push! (+ (pop!) (pop!))))
(def <span style=\"color: #8b2252;\">\"*\"</span> (push! (* (pop!) (pop!))))
(def <span style=\"color: #8b2252;\">\"/\"</span> (<span style=\"color: #a020f0;\">with-pop!</span> (b) (push! (/ (pop!) b))))
(def <span style=\"color: #8b2252;\">\"-\"</span> (<span style=\"color: #a020f0;\">with-pop!</span> (b) (push! (- (pop!) b))))

(def <span style=\"color: #8b2252;\">\"=\"</span> (push! (bif (equal (pop!) (pop!)))))
(def <span style=\"color: #8b2252;\">\"&gt;\"</span> (push! (bif (<span style=\"color: #a020f0;\">with-pop</span> (b) (&gt; (pop!) b)))))
(def <span style=\"color: #8b2252;\">\"&lt;\"</span> (push! (bif (<span style=\"color: #a020f0;\">with-pop</span> (b) (&lt; (pop!) b)))))
(def <span style=\"color: #8b2252;\">\"not\"</span> (push! (<span style=\"color: #a020f0;\">if</span> (string= (pop!) <span style=\"color: #8b2252;\">\"false\"</span>) <span style=\"color: #8b2252;\">\"true\"</span> <span style=\"color: #8b2252;\">\"false\"</span>)))
(def <span style=\"color: #8b2252;\">\"and\"</span> (push! (<span style=\"color: #a020f0;\">with-pop!</span> (a b) (bif (and (string= <span style=\"color: #8b2252;\">\"true\"</span> a) (string= <span style=\"color: #8b2252;\">\"true\"</span> b))))))
(def <span style=\"color: #8b2252;\">\"or\"</span> (push! (<span style=\"color: #a020f0;\">with-pop!</span> (a b) (bif (or (string= <span style=\"color: #8b2252;\">\"true\"</span> a) (string= <span style=\"color: #8b2252;\">\"true\"</span> b))))))
(def <span style=\"color: #8b2252;\">\"if\"</span> (<span style=\"color: #a020f0;\">if</span> (string= (pop!) <span style=\"color: #8b2252;\">\"true\"</span>)
              (<span style=\"color: #a020f0;\">with-pop!</span> (a) (pop!) (ev a))
              (<span style=\"color: #a020f0;\">progn</span> (pop!) (ev (pop!)))))

(def <span style=\"color: #8b2252;\">\":\"</span> (<span style=\"color: #a020f0;\">let</span> ((name (pull!))
               (words (<span style=\"color: #a020f0;\">loop</span> for wd = (pull!) until (string= wd <span style=\"color: #8b2252;\">\";\"</span>) collect wd)))
           (def name (mapc #'ev words))))

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">forthlike-eval</span> (str)
  (setf *input* str)
  (<span style=\"color: #a020f0;\">loop</span> until (string= *input* <span style=\"color: #8b2252;\">\"\"</span>) do (ev (pull!))))

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">forthlike-load</span> (file-path)
  (<span style=\"color: #a020f0;\">with-open-file</span> (s file-path)
    (<span style=\"color: #a020f0;\">loop</span> for res = (read-line s nil <span style=\"color: #7a378b;\">:eof</span>)
       until (eq res <span style=\"color: #7a378b;\">:eof</span>)
         do (forthlike-eval res))))

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">repl</span> ()
  (<span style=\"color: #a020f0;\">loop</span> for line = (<span style=\"color: #a020f0;\">progn</span> (format t <span style=\"color: #8b2252;\">\"~~4th &gt;&gt; \"</span>) (read-line)) 
     until (string= line <span style=\"color: #8b2252;\">\"bye\"</span>) do (forthlike-eval line)))</pre>

<p>And that's all.</p>

<pre>(<span style=\"color: #a020f0;\">defparameter</span> <span style=\"color: #a0522d;\">*stack*</span> nil)
(<span style=\"color: #a020f0;\">defparameter</span> <span style=\"color: #a0522d;\">*words*</span> (make-hash-table <span style=\"color: #7a378b;\">:test</span> #'equal))
(<span style=\"color: #a020f0;\">defparameter</span> <span style=\"color: #a0522d;\">*input*</span> <span style=\"color: #8b2252;\">\"\"</span>)</pre>

<p><code>*stack*</code>, <code>*words*</code> and <code>*input*</code> are storage places for, respectively, the stack, the dictionary, and the current input.</p>

<pre>(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">pop!</span> () (pop *stack*))

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">push!</span> (thing) (push thing *stack*))

(def <span style=\"color: #8b2252;\">\"dup\"</span> (push! (first *stack*)))
(def <span style=\"color: #8b2252;\">\"swap\"</span> (rotatef (first *stack*) (second *stack*)))

(def <span style=\"color: #8b2252;\">\"+\"</span> (push! (+ (pop!) (pop!))))
(def <span style=\"color: #8b2252;\">\"*\"</span> (push! (* (pop!) (pop!))))
(def <span style=\"color: #8b2252;\">\"/\"</span> (<span style=\"color: #a020f0;\">with-pop!</span> (b) (push! (/ (pop!) b))))
(def <span style=\"color: #8b2252;\">\"-\"</span> (<span style=\"color: #a020f0;\">with-pop!</span> (b) (push! (- (pop!) b))))</pre>

<p><code>pop!</code> and <code>push!</code> are both the obvious stack operations, <code>def</code> is a utility macro to make definitions simpler, and it's immediately used to put together some primitives. The obvious ones are <code>+</code>, <code>*</code>, <code>/</code> and <code>-</code>. <code>.</code> <code>pop!</code>s one thing and prints it, while <code>.s</code> prints the entire stack. There should probably also be a way to print the current dictionary, now that I think about it. <code>dup</code> and <code>swap</code> do exactly what you'd expect, knowing their Forth equivalents.</p>

<pre>(def <span style=\"color: #8b2252;\">\"=\"</span> (push! (bif (equal (pop!) (pop!)))))
(def <span style=\"color: #8b2252;\">\"&gt;\"</span> (push! (bif (<span style=\"color: #a020f0;\">with-pop</span> (b) (&gt; (pop!) b)))))
(def <span style=\"color: #8b2252;\">\"&lt;\"</span> (push! (bif (<span style=\"color: #a020f0;\">with-pop</span> (b) (&lt; (pop!) b)))))
(def <span style=\"color: #8b2252;\">\"not\"</span> (push! (<span style=\"color: #a020f0;\">if</span> (string= (pop!) <span style=\"color: #8b2252;\">\"false\"</span>) <span style=\"color: #8b2252;\">\"true\"</span> <span style=\"color: #8b2252;\">\"false\"</span>)))
(def <span style=\"color: #8b2252;\">\"and\"</span> (push! (<span style=\"color: #a020f0;\">with-pop!</span> (a b) (bif (and (string= <span style=\"color: #8b2252;\">\"true\"</span> a) (string= <span style=\"color: #8b2252;\">\"true\"</span> b))))))
(def <span style=\"color: #8b2252;\">\"or\"</span> (push! (<span style=\"color: #a020f0;\">with-pop!</span> (a b) (bif (or (string= <span style=\"color: #8b2252;\">\"true\"</span> a) (string= <span style=\"color: #8b2252;\">\"true\"</span> b))))))
(def <span style=\"color: #8b2252;\">\"if\"</span> (<span style=\"color: #a020f0;\">if</span> (string= (pop!) <span style=\"color: #8b2252;\">\"true\"</span>)
              (<span style=\"color: #a020f0;\">with-pop!</span> (a) (pop!) (ev a))
              (<span style=\"color: #a020f0;\">progn</span> (pop!) (ev (pop!)))))</pre>

<p>The boolean functions all operate on the symbols <code>true</code> and <code>false</code>, represented here as strings. Those symbols include <code>=</code>, <code>&gt;</code>, <code>&lt;</code>, <code>not</code>, <code>and</code>, <code>or</code> and <code>if</code>. The reason I'm not sure this is the best way to handle it is that it makes <code>true</code> and <code>false</code> pretty glaring exceptions to the basic rules of the language. Ideally, I'd have some way of designating a class of words that self-evaluate, and let the user play with them too. This is something I'm thinking about for an upcoming article, though I guess it's possible that I'm just taking it too seriously. Anyhow.</p>

<p>Ok, here's where this gets interesting.</p>

<pre>(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">pull!</span> (<span style=\"color: #228b22;\">&amp;optional</span> (looking-for #\\ ))
  (<span style=\"color: #a020f0;\">multiple-value-bind</span> (word len) (split-sequence looking-for *input* <span style=\"color: #7a378b;\">:count</span> 1)
    (setf *input* (subseq *input* len))
    (first word)))</pre>

<p><code>pull!</code> grabs the next \"word\" from <code>*input*</code>. By default, that's the next space-delimited chunklet, but it's possible to change the terminating character. This turns out to be fairly useful for things like <code>\"</code>, which looks for the next quote<a href=\"#foot-Sat-Aug-10-172051EDT-2013\" name=\"note-Sat-Aug-10-172051EDT-2013\">[4]</a>.</p>

<pre>(def <span style=\"color: #8b2252;\">\"`\"</span> (push! (pull!)))
(def <span style=\"color: #8b2252;\">\",\"</span> (funcall (gethash (pop!) *words*)))
(def <span style=\"color: #8b2252;\">\"\\\"\"</span> (push! (format nil <span style=\"color: #8b2252;\">\"~s\"</span> (pull! <span style=\"color: #8b2252;\">\"\\\"\"</span>))))

...

(def <span style=\"color: #8b2252;\">\":\"</span> (<span style=\"color: #a020f0;\">let</span> ((name (pull!))
               (words (<span style=\"color: #a020f0;\">loop</span> for wd = (pull!) until (string= wd <span style=\"color: #8b2252;\">\";\"</span>) collect wd)))
           (def name (mapc #'ev words))))</pre>

<p><code>pull!</code> is used in places where we care about upcoming input, and it lets Forthlike define <code>:</code> as merely looking for the word <code>;</code>, rather than something more complicated. It also lets me define two words that I don't think exist in traditional Forths, but that seem obvious if you have any lisp experience. <code>`</code> calls <code>pull!</code>, and pushes the result onto the stack <i>without</i> calling <code>ev</code> on it, while <code>,</code> calls <code>pop!</code> and tries to treat the result as a function to call. I was tempted to just make it call <code>ev</code>, but I'm not too sure that would be the best idea since numbers and symbols would just stay on the stack.</p>

<p>The evaluation conditions and evaluation time could both use a pretty thorough thinking session; would it be ok to tokenize things as they're pulled? That is, parse numbers, <code>intern</code> symbols in the <code>keywords</code> package, and intern/lookup the functions? That would mean that it would be easier to tell what to do with the thing on top of the stack; strings, keywords and numbers get left there and functions get called. Do I want to look up functions right away? Or should I keep their name on the stack? What are the implications of that? Do I want to re-think the <code>*words*</code> table entirely? For example, by making <code>:</code> create a <code>lambda</code> rather interning a function, and then letting a different function designate names in the <code>*words*</code> table? That would make it pretty easy to define variables too, which the system currently lacks.</p>

<pre>(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">forthlike-eval</span> (str)
  (setf *input* str)
  (<span style=\"color: #a020f0;\">loop</span> until (string= *input* <span style=\"color: #8b2252;\">\"\"</span>) do (ev (pull!))))

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">forthlike-load</span> (file-path)
  (<span style=\"color: #a020f0;\">with-open-file</span> (s file-path)
    (<span style=\"color: #a020f0;\">loop</span> for res = (read-line s nil <span style=\"color: #7a378b;\">:eof</span>)
       until (eq res <span style=\"color: #7a378b;\">:eof</span>)
         do (forthlike-eval res))))

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">repl</span> ()
  (<span style=\"color: #a020f0;\">loop</span> for line = (<span style=\"color: #a020f0;\">progn</span> (format t <span style=\"color: #8b2252;\">\"~~4th &gt;&gt; \"</span>) (read-line)) 
     until (string= line <span style=\"color: #8b2252;\">\"bye\"</span>) do (forthlike-eval line)))</pre>

<p>The last three functions are what actually let you use the language. <code>forthlike-eval</code> takes a string and evaluates it one word at a time, <code>forthlike-load</code> uses <code>forthlike-eval</code> to load named files, and <code>repl</code> uses <code>forthlike-eval</code> in conjunction with <code>read-line</code> to make a Forthlike <a href=\"http://www.redbubble.com/shop/repl+t-shirts\">REPL</a> available.</p>

<p>It's a pretty featureful little toy for three hours of work. I may come back to this at some point in the future.</p>


<hr />
<h5>Footnotes</h5>
<p>1 - <a href=\"#note-Sat-Aug-10-172026EDT-2013\" name=\"foot-Sat-Aug-10-172026EDT-2013\">[back]</a> - As well as a replacement keycap for your Caps Lock, if you go that route.</p>
<p>2 - <a href=\"#note-Sat-Aug-10-172030EDT-2013\" name=\"foot-Sat-Aug-10-172030EDT-2013\">[back]</a> - Though using Lisp to implement something not unlike Forth feels a little bit like cheating.</p>
<p>3 - <a href=\"#note-Sat-Aug-10-172038EDT-2013\" name=\"foot-Sat-Aug-10-172038EDT-2013\">[back]</a> - Though I'm not convinced I took the right approach quite yet.</p>
<p>4 - <a href=\"#note-Sat-Aug-10-172051EDT-2013\" name=\"foot-Sat-Aug-10-172051EDT-2013\">[back]</a> - It doesn't take escapes into account yet, though I don't suspect that would be very difficult to add. Likewise, it would be nice if I could designate a character to nest on, so that we could grab balanced expressions. Things for the future, I'm sure.</p>
"))
((5202 3723 616436000) :INSERT (145 :POSTED 3585096000))
((5202 3723 616437000) :INSERT (145 :TAG :ALMOST-LITERATE-PROGRAMMING))
((5202 3723 616439000) :INSERT (145 :TAG :COMMON-LISP))
((5202 3723 616444000) :INSERT (145 :TAG :FORTH))
((5202 3723 616593000) :INSERT (146 :TITLE "Debugging Insecurities"))
((5202 3723 616600000) :INSERT (146 :FILE "debugging.html"))
((5202 3723 616602000) :INSERT (146 :EDITED 3610022331))
((5202 3723 616604000) :INSERT
 (146 :BODY
  "<p>I don't know if anyone else does this, but I constantly catch myself doing it. Even when I should <i>really</i> know better by now.</p>

<h2>1. Write Some Code</h2>

<p>That's my usual, and it does feel pretty good. I'm producing code and getting things done. Properly. Not just the barest possible solution that could possibly work, but taking approaches that I haven't before and seeing if they yield implementation or performance improvements.</p>

<h2>2. It Doesn't Work</h2>

<p>Of course it doesn't work, this is the first time I'm trying the technique, and no tech starts out perfect. If anyone tells you otherwise they're either lying to you or themselves, and either way I'm not dealing with them right now. Even after running through this loop several times, it still takes a conscious effort not to get pissed off at the new technique, or some part of the toolchain. It never turns out to be any of those things, but there's still a hard, deep-wired reflex to look for something opaque to point to as a source of my problems. That would be a fail though. So I exert the conscious effort to suppress that reflex in the interests of learning something.</p>

<h2>3. Debug</h2>

<p>Hop into the debugger, or the REPL, and start poring over all the interaction metadata I can get my grubby little paws on. In C, it means setting breakpoints and following them. In Common Lisp it means running the code piecemeal through SLIME, optionally with logging <code>:before</code> and <code>:after</code> methods defined everywhere I could possibly define them. In Haskell it means reading the compiler output and asking someone who knows what the fuck they're doing what it means.</p>

<h2>4. It Still Doesn't Work</h2>

<p>And of course it doesn't work again. I find a couple of superficial things to fix, each one reducing the number of warnings I get, but none ever solving the root of the problem.</p>

<h2>5. Iterate 3 and 4 with a dwindling faith in my understanding of the world</h2>

<p>Somewhere between the second and fifth iterations of the previous two steps, I stop believing that I understand the language I'm using. That such an understanding is even possible for a mere mortal such as myself. I start thinking that maybe I have some piece of basic understanding about the insides of computers and/or compilers fundamentally backwards, and that no amount of poking will ever save me. I should go back and take some high-school level Comp Sci courses, or maybe just drop the whole \"Developer\" thing and go find a job more my speed, with shiny buttons and tabs to click on all day instead.</p>

<h2>6. Oh, there it is...</h2>

<p>Eventually, find the last piece of error-ridden code hiding two or three layers deep in a place that I changed incorrectly a while back. And then it works. And then I have to go back through the intervening code just to convince myself that my understanding was not, in fact, some sort of decade-long mirage which merely fooled me into thinking that I occasionally knew what I was doing.</p>

<p>That happens disturbingly often. Which is not to say that I have lots of errors in my code, oddly. They tend to come few and far between, but the percentage of them that trigger this crisis of confidence in <i>literally everything I know</i> is huge. Easily in the 90% range. I have no idea why this happens or how common it is for other humans, but I find it afflicting me often enough that I finally had to write about it.</p>

<p>I also have no idea what to do about it.</p>

<p>Sorry.</p>

<p>All the alternatives seem worse. Having iron self-assurance in these situations would end with blaming a blameless component for the error and never actually figuring out what went wrong at any level even approaching a deep understanding. That's too high a price to pay for the small comfort of considering myself to be smarter than I am. There's a Stross quote that I particularly like, and I'm going to strip it of context for you here</p>

<blockquote>To never harbor self-doubt is poison for the soul, and these aliens want to inflict their certainties upon us.<span class=\"sig\">--Sadeq, <a href=\"http://www.antipope.org/charlie/blog-static/\">Charles Stross</a>' <a href=\"http://www.antipope.org/charlie/blog-static/fiction/accelerando/accelerando-intro.html\">Accelerando</a></span></blockquote>

<p>There's a bunch of ways you can read that, including literally in context where it refers to a specific group of actual aliens, but that's not what it means to me. My imbued meaning is: Doubt is the strongest elixir of knowledge available to me. It exacts a price on your sense of certainty, but in return lets you face the kind of complexity and understanding that would evade lesser analysis.</p>

<p>So I guess the answer is not to do anything about it. My doubt needs to stay where it is, for the sake of my intellectual development.</p>
"))
((5202 3723 616640000) :INSERT (146 :POSTED 3585528000))
((5202 3723 616641000) :INSERT (146 :TAG :GENERAL-PROGRAMMING-THOUGHTS))
((5202 3723 616643000) :INSERT (146 :TAG :IDEA-PEELING))
((5202 3723 616645000) :INSERT (146 :TAG :SPECULATION))
((5202 3723 616761000) :INSERT (147 :TITLE "cl-web-dev"))
((5202 3723 616768000) :INSERT (147 :FILE "cl-web-dev.html"))
((5202 3723 616769000) :INSERT (147 :EDITED 3610022331))
((5202 3723 616771000) :INSERT
 (147 :BODY
  "<p>Extremely short post. Seriously, not so much as a self-referential footnote this time.</p>

<p>I've been hard at work on <a href=\"https://github.com/Inaimathi/deal\"><code>deal</code></a>, when it occurred to me that I've written at least some of that stuff before. Pretty much every web development project I've started in Common Lisp in the past few years has had certain pieces of low-level helper code baked in. And I got sick of it.</p>

<p>So, <a href=\"https://github.com/Inaimathi/cl-web-dev\">here's <code>cl-web-dev</code></a> a small collection of functions and macros to make it marginally more pleasant to deal with <code>hunchentoot</code>, <code>cl-who</code> and <code>parenscript</code>. The bare-bones \"Hello World!\" for it is</p>

<pre>(ql:quickload <span style=\"color: #7a378b;\">:cl-web-dev</span>)
(<span style=\"color: #a020f0;\">defpackage</span> <span style=\"color: #228b22;\">:your-package</span> (<span style=\"color: #7a378b;\">:use</span> <span style=\"color: #7a378b;\">:cl</span> <span style=\"color: #7a378b;\">:cl-web-dev</span> <span style=\"color: #7a378b;\">:parenscript</span>))
(<span style=\"color: #a020f0;\">in-package</span> <span style=\"color: #7a378b;\">:your-package</span>)

(<span style=\"color: #a020f0;\">define-handler</span> test ()
  (html-str
    (<span style=\"color: #7a378b;\">:html</span>
      (<span style=\"color: #7a378b;\">:body</span>
       (<span style=\"color: #7a378b;\">:h1</span> <span style=\"color: #8b2252;\">\"Hello World!\"</span>)
       (<span style=\"color: #7a378b;\">:p</span> <span style=\"color: #8b2252;\">\"From\"</span> (<span style=\"color: #7a378b;\">:code</span> <span style=\"color: #8b2252;\">\"cl-web-dev\"</span>))
       (<span style=\"color: #7a378b;\">:script</span> (str (ps (alert <span style=\"color: #8b2252;\">\"And also, parenscript\"</span>))))))))

(<span style=\"color: #a020f0;\">defparameter</span> <span style=\"color: #a0522d;\">server</span> (easy-start 4242))</pre>

<p>Which starts a server on local port <code>4242</code>, and sets up that handler at <code>/test</code>. I could probably hack a pretty big chunk out of <code>deal</code>, but I think I'll wait on that until after <a href=\"http://lispinsummerprojects.org/\">the contest</a> has ended.</p>
"))
((5202 3723 616788000) :INSERT (147 :POSTED 3586046400))
((5202 3723 616790000) :INSERT (147 :TAG :COMMON-LISP))
((5202 3723 617427000) :INSERT (148 :TITLE "Deal Journal - Part One"))
((5202 3723 617432000) :INSERT (148 :FILE "deal.html"))
((5202 3723 617434000) :INSERT (148 :EDITED 3610301507))
((5202 3723 617436000) :INSERT
 (148 :BODY
  "<p>I already mentioned <a href=\"http://lispinsummerprojects.org/\">Lisp In Summer Projects</a> time, and called it</p>

<blockquote>...like a multi-month <a href=\"http://www.nanowrimo.org/\">NaNoWriMo</a> with parentheses instead of character development and sleep.<span class=\"sig\">-Inaimathi</span></blockquote>

<p>The project I picked out wasn't something I'd ever talked about here before. It was something <a href=\"http://chillier17.deviantart.com/\">a friend</a> of mine and I were thinking of putting together to make his hobby/job slightly easier. He makes tabletop games you see. Mostly card stuff, but potentially other tabletop stuff too, from what I gather. This is to be the running journal of my project as I'm writing it. I'm not too worried about it denting my motivation, because I don't intend to publish it until I'm done.</p>

<p>To be perfectly honest with you, Lisp wouldn't be my first choice for this. I mean, the language is always a good thing to have in your corner, but there's a notable lack of battle-tested, feature-full, asynchronous web-servers for it. There's <a href=\"http://hoytech.com/antiweb/\">Antiweb</a>, if you want to get down into the nuts and bolts of the system and serve things at the most efficient possible rate, at the expense of more complex installation and configuration. There's <a href=\"http://wookie.beeets.com/\">Wookie</a>, if you don't particularly care about speed or security. There's <a href=\"http://www.cliki.net/sw-http\">sw-http</a>, which I've been <a href=\"http://stackoverflow.com/questions/9388893/details-about-application-finder-fn-in-sw-http\">warned off of directly</a>. And there's <a href=\"http://weitz.de/hunchentoot/\">Hunchentoot</a> if you don't care about being asynchronous. There's no Common Lisp equivalent to <a href=\"http://hackage.haskell.org/package/warp\">Warp</a> or <a href=\"http://hyber.org/\">Yaws</a> or <a href=\"http://www.tornadoweb.org/en/stable/\">Tornado</a>, and I'm fairly comfortable with each of them, so if not for this contest, this probably would have been a <a href=\"http://www.haskell.org/haskellwiki/Haskell\">Haskell</a>/<a href=\"http://elm-lang.org/\">Elm</a>, or perhaps <a href=\"http://www.erlang.org/\">Erlang</a>/<a href=\"http://angularjs.org/\">Angular.js</a> project rather than a <a href=\"http://www.cliki.net/\">CL</a>/<a href=\"http://common-lisp.net/project/parenscript/\">Parenscript</a> one.</p>

<p>I'm not <i>too</i> worried. The only part of this system that capital N <i>needs</i> to be asynchronous is the SSE handler I'll be using for browser pushes, and I'm fairly confident I'll be able to tweak Hunchentoot slightly to offload those onto a single, dedicated thread rather than keeping each one running in its own.</p>

<h3>The Approach</h3>

<p>I want to battle-test some of my own ideas. Starting with the front-end/back-end separation I've been on about for a while, and continuing with some notions I've had about self-documenting APIs. To that end, <code>deal</code> is going to be a pair of projects. A game server implementation which will huddle behind <a href=\"http://wiki.nginx.org/Main\">nginx</a>, deal with the application requests, and whose handler definitions are going to be simple enough to read that you'll be able to. And a reference-implementation of a web UI that will communicate with that server and do useful things in a browser.</p>

<p>Now then, without further ado.</p>

<h3>The Journal</h3>

<h2>Day One</h2>

<p>So here's the minimal amount of stuff we need to model in order to be a useful play-testing tool:</p>

<ul>
  <li>cards</li>
  <li>collections of cards <i>(I'm going with \"stack\" for the moment)</i></li>
  <li>hands <i>(different from stacks in that they're not on the table, but being held by players)</i></li>
  <li>players</li>
  <li>die-rolls/coin-flips</li>
  <li>counters/notes</li>
</ul>

<p>And we need to be able to interact with each one in a variety of ways.</p>

<ul>
  <li>rotate/move/flip cards and collections <i>(\"rotate\" as in \"on an axis\", \"flip\" as in \"from face-up to face-down or vice-versa\")</i></li>
  <li>play <i>(either face up or face down)</i></li>
  <li>play to <i>(onto a stack rather than onto the board directly)</i></li>
  <li>pick up</li>
  <li>shuffle <i>(this one just applies to a stack)</i></li>
  <li>peek <i>(a player looks at n cards of a given stack)</i></li>
  <li>show <i>(all players see n cards of a given stack)</i></li>
  <li>re-arrange <i>(peek at <code>n</code> cards and put them back in an order you specify)</i></li>
</ul>

<p>Each line of that second group needs to be a handler. Each line of the first group needs to be represented somewhere. Despite my confidence, I'm not <i>entirely</i> sure I won't be porting away from Hunchentoot if hacking SSE support into it turns out to be too difficult, so I'd rather define a little sub-language for handler definitions than call <code>define-easy-handler</code>s manually. While I'm at it, let that mini-language take type-hints so I don't have to deal with chucking strings around myself. The initial version of <code>define-handler</code> does simple type conversion, and thinly wraps <code>define-easy-handler</code></p>

<pre>(<span style=\"color: #a020f0;\">defmacro</span> <span style=\"color: #0000ff;\">define-handler</span> ((name <span style=\"color: #228b22;\">&amp;key</span> (default-type <span style=\"color: #7a378b;\">:integer</span>)) (<span style=\"color: #228b22;\">&amp;rest</span> args) <span style=\"color: #228b22;\">&amp;body</span> body)
  (<span style=\"color: #a020f0;\">let</span> ((opts `(,name <span style=\"color: #7a378b;\">:uri</span> (concatenate 'string <span style=\"color: #8b2252;\">\"/\"</span> (string-downcase (symbol-name name))))))
    (<span style=\"color: #a020f0;\">if</span> (not args)
        `(<span style=\"color: #a020f0;\">define-easy-handler</span> ,opts nil (encode-json (<span style=\"color: #a020f0;\">progn</span> ,@body)))
        (<span style=\"color: #a020f0;\">flet</span> ((type-exp (arg type)
                 (<span style=\"color: #a020f0;\">case</span> type
                   (<span style=\"color: #7a378b;\">:integer</span> `(parse-integer ,arg))
                   (<span style=\"color: #7a378b;\">:string</span> arg)
                   (<span style=\"color: #7a378b;\">:keyword</span> `(intern (string-upcase ,arg) <span style=\"color: #7a378b;\">:keyword</span>)))))
          (<span style=\"color: #a020f0;\">let</span> ((type-conversion (mapcar (<span style=\"color: #a020f0;\">lambda</span> (a) 
                                           (<span style=\"color: #a020f0;\">if</span> (atom a) 
                                               (list a (type-exp a default-type))
                                               (list (car a) (type-exp (first a) (second a)))))
                                         args))
                (final-args (mapcar (<span style=\"color: #a020f0;\">lambda</span> (a) (<span style=\"color: #a020f0;\">if</span> (atom a) a (car a))) args)))
            `(<span style=\"color: #a020f0;\">define-easy-handler</span> ,opts ,final-args
               (<span style=\"color: #a020f0;\">let</span> ,type-conversion
                 (encode-json (<span style=\"color: #a020f0;\">progn</span> ,@body)))))))))

(<span style=\"color: #a020f0;\">defmacro</span> <span style=\"color: #0000ff;\">define-game-handler</span> ((name <span style=\"color: #228b22;\">&amp;key</span> (default-type <span style=\"color: #7a378b;\">:integer</span>)) (<span style=\"color: #228b22;\">&amp;rest</span> args) <span style=\"color: #228b22;\">&amp;body</span> body)
  `(<span style=\"color: #a020f0;\">define-handler</span> (,name <span style=\"color: #7a378b;\">:default-type</span> ,default-type) (game-id ,@args) ,@body))</pre>

<p>And it lets me write things like</p>

<pre>(<span style=\"color: #a020f0;\">define-handler</span> (play/move) (thing-id x y z rot)
  (list <span style=\"color: #7a378b;\">:moving</span> thing-id <span style=\"color: #7a378b;\">:to</span> x y z rot))</pre>

<p>and have it mean <code>\"give me the Integers thing-id, x, y, z and rot, and I'll give you a JSON-encoded response of the list ':moving thing-id :to x y z rot'\"</code>.</p>

<p>That's it for day one.</p>

<h2>Day 3</h2>

<p>I skipped one. In truth, this is a few days later, and I <i>have</i> been throwing hours/half-hours at the problem in the meantime, but getting no dedicated time down.</p>

<p>The type annotations are a good idea here, I think. Even in a dynamically typed language, you want to surround any kind of outside input with <code><a href=\"http://www.lispworks.com/documentation/HyperSpec/Body/m_assert.htm#assert\">assert</a></code>ions or similar, and being able to read the types is going to help people trying to interact with your API. The separate handler definition macro for tables was a misstep though. All it actually does at this point is provide a <code>with-lock</code> around the body, and add an invisible argument of <code>(table <span style=\"color: #7a378b;\">:table</span>)</code> to whatever you define with it.</p>

<pre>(<span style=\"color: #a020f0;\">defmacro</span> <span style=\"color: #0000ff;\">define-server-handler</span> ((name) (<span style=\"color: #228b22;\">&amp;rest</span> args) <span style=\"color: #228b22;\">&amp;body</span> body)
  <span style=\"color: #8b2252;\">\"Specifically defines handlers dealing with global server state.
Shares similarity with define-table-handler (if another one comes along, we'll abstract this)\"</span>
  `(<span style=\"color: #a020f0;\">define-handler</span> (,name) ,args
     (<span style=\"color: #a020f0;\">with-lock-held</span> ((lock *server*))
       ,@body)))</pre>

<p>The first is bad because you don't always want a lock with a <code>table</code>. For instance, when you're serving up an <code>EventSource</code>, it would be a phenomenally bad idea to keep a lock on the related table. The second is bad because we're trying to make this self-documenting. Which means that, while invisible arguments are going to save some typing, they'll be just a little bit more annoying to any front-end developers who try to develop against our server. So, this has to go.</p>

<p>There's also the point that my existing type annotations aren't saving me as much work as they could be. Specifically, whenever I ask for a <code>foo-id</code>, I end up looking it up in the appropriate place; either <code>(things table)</code>, or possibly <code>(hand *player*)</code><a href=\"#foot-Sun-Aug-25-220244EDT-2013\" name=\"note-Sun-Aug-25-220244EDT-2013\">[1]</a>, then assert that the thing coming out of the lookup is the sort of <code>thing</code> I'm expecting, then I do something to that <code>thing</code>. The \"type\" system really should be able to do this for me.</p>

<pre>(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">type-exp</span> (arg type)
  <span style=\"color: #8b2252;\">\"Given a symbol name and a type, returns the expression to read that type from a string\"</span>
  (match type
    (<span style=\"color: #7a378b;\">:string</span> nil)
    (<span style=\"color: #7a378b;\">:int</span> `(parse-integer ,arg))
    (<span style=\"color: #7a378b;\">:json</span> `(decode-json-from-string ,arg))
    ((or <span style=\"color: #7a378b;\">:keyword</span> <span style=\"color: #7a378b;\">:facing</span>)
     `(intern (string-upcase ,arg) <span style=\"color: #7a378b;\">:keyword</span>))
    (<span style=\"color: #7a378b;\">:table</span> 
     (lookup-exp arg '(private-tables *server*) '(public-tables *server*)))
    ((or <span style=\"color: #7a378b;\">:stack</span> <span style=\"color: #7a378b;\">:flippable</span> <span style=\"color: #7a378b;\">:placeable</span>
         (list <span style=\"color: #7a378b;\">:card</span> <span style=\"color: #7a378b;\">:from-table</span>))
     (lookup-exp arg '(things table)))
    ((list <span style=\"color: #7a378b;\">:card</span> <span style=\"color: #7a378b;\">:from-hand</span>)
     (lookup-exp arg '(hand *player*)))
    (_ (<span style=\"color: #ff0000; font-weight: bold;\">error</span> <span style=\"color: #8b2252;\">\"Invalid type label: '~a'\"</span> type))))

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">lookup-exp</span> (arg <span style=\"color: #228b22;\">&amp;rest</span> places)
  (<span style=\"color: #a020f0;\">with-gensyms</span> (sym)
    `(<span style=\"color: #a020f0;\">let</span> ((,sym (intern ,arg <span style=\"color: #7a378b;\">:keyword</span>)))
       (or ,@(<span style=\"color: #a020f0;\">loop</span> for p in places
                collect `(gethash ,sym ,p))))))

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">lookup-assn</span> (arg type)
  (match type
    (<span style=\"color: #7a378b;\">:table</span> `(<span style=\"color: #ff0000; font-weight: bold;\">assert</span> ,arg))
    (<span style=\"color: #7a378b;\">:stack</span> `(<span style=\"color: #ff0000; font-weight: bold;\">assert</span> (typep ,arg 'stack)))
    (<span style=\"color: #7a378b;\">:facing</span> `(<span style=\"color: #ff0000; font-weight: bold;\">assert</span> (or (eq ,arg <span style=\"color: #7a378b;\">:up</span>) (eq ,arg <span style=\"color: #7a378b;\">:down</span>))))
    (<span style=\"color: #7a378b;\">:placeable</span> `(<span style=\"color: #ff0000; font-weight: bold;\">assert</span> (typep ,arg 'placeable)))
    (<span style=\"color: #7a378b;\">:flippable</span> `(<span style=\"color: #ff0000; font-weight: bold;\">assert</span> (typep ,arg 'flippable)))
    ((list <span style=\"color: #7a378b;\">:card</span> _) `(<span style=\"color: #ff0000; font-weight: bold;\">assert</span> (typep ,arg 'card)))
    (_ nil)))

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">type-pieces</span> (args)
  <span style=\"color: #8b2252;\">\"Takes a list of arguments and returns three values:
- The conversion expressions
- The names (for use as final args)
- The lookup assertions\"</span>
  (<span style=\"color: #a020f0;\">loop</span> for (name type) in args
     when (aif (type-exp name type) (list name it)) collect it into convs
     collect name into as 
     when (lookup-assn name type) collect it into assrs
     finally (<span style=\"color: #a020f0;\">return</span> (values convs as assrs))))

(<span style=\"color: #a020f0;\">defmacro</span> <span style=\"color: #0000ff;\">define-handler</span> ((name) (<span style=\"color: #228b22;\">&amp;rest</span> args) <span style=\"color: #228b22;\">&amp;body</span> body)
  <span style=\"color: #8b2252;\">\"Defines handlers with an eye for self-documentation, DRY and portability\"</span>
  (<span style=\"color: #a020f0;\">let</span> ((opts `(,name <span style=\"color: #7a378b;\">:uri</span> ,(concatenate 'string <span style=\"color: #8b2252;\">\"/\"</span> (string-downcase (symbol-name name))))))
    (<span style=\"color: #a020f0;\">if</span> (not args)
        `(<span style=\"color: #a020f0;\">define-easy-handler</span> ,opts nil (encode-json (<span style=\"color: #a020f0;\">progn</span> ,@body)))
        (<span style=\"color: #a020f0;\">multiple-value-bind</span> (type-conversion final-args lookup-assertions) (type-pieces args)
          `(<span style=\"color: #a020f0;\">define-easy-handler</span> ,opts ,final-args
             (<span style=\"color: #ff0000; font-weight: bold;\">assert</span> (and ,@final-args))
             ,(<span style=\"color: #a020f0;\">if</span> type-conversion
                  `(<span style=\"color: #a020f0;\">let*</span> ,type-conversion
                     ,@lookup-assertions
                     (encode-json ,@body))
                  `(<span style=\"color: #a020f0;\">progn</span> ,@lookup-assertions
                          (encode-json ,@body))))))))</pre>

<p>And it can.</p>

<p>The other thing I'm finalizing is the <code>id</code> system. An earlier crack just had each component keep count of its contents and assign that as the next id. There are a few obvious problems with this. Firstly that it would result in duplicate <code>id</code>s sometimes. Secondly, unless I wanted to update the item <code>id</code> every time I moved the item, this would mean a global counter in <code>*server*</code>, which would mean a lock on the whole server any time anything changed play zones. The change I ended up making is just using <code><a href=\"http://www.lispworks.com/documentation/HyperSpec/Body/f_gensym.htm#gensym\">gensym</a></code>. Ordinarily, I wouldn't <i>but</i>: these <code>id</code>s don't need to be cryptographically random, they just need to be unique with respect to all other active <code>id</code>s. Of course, doing it this way is going to run me up against potential problems when I get to loading games from disk storage, but that's a pretty long way off. Anyhow, as a result, all the <code>foo-id</code> and <code>id</code> fields are now <code>keyword</code>s rather than <code>integer</code>s.</p>

<h2>Day 4</h2>

<p>First stab at the interface. And by \"first stab\", I mean \"stupid basic interface that quote renders end-quote things by echoing them to console\". It's nowhere near complete, but it's already enough to iron out a wrinkle or two. Specifically, I've had to go back through the model and change every <code>belongs-to</code> slot to expect an ID rather than a pointer to a <code>player</code>. It became obvious that this was necessary when I got memory-use warnings followed by a crash when I tried to \"render\" a card. <code>encode-json-to-string</code> doesn't like circular references, you see.</p>

<p>Now that everything uses IDs, there's one semi-obvious good thing about it: it'll make putting together the front-end much easier. Because the IDs are now globally unique, I can use them as a <code>class</code> tag in the <code>DOM</code> to identify objects on the board. That'll let me update the state of a lot of things in the UI without having to re-render very much at all.</p>

<h2>Day 6</h2>

<p>I've been refining the model a bit to take into account some of the games I'll want to model for this project. There's also a slightly revised <code>define-handler</code> macro that stores information about any <code>handler</code>s it <code>define</code>s, which then gets served through the <code>list-handlers</code> handler. That'll make certain parts of the front-end easier to put together.</p>

<p>Not much work other than that, sadly. I'm still moving forward in increments of an hour or half-hour at the outside. What I <i>have</i> been able to do is read through pieces of the <a href=\"http://weitz.de/hunchentoot/\">Hunchentoot</a> code to try figuring out how, exactly, to hack conditional SSE support to it. Near as I can tell, I'll need to define a <code>:before</code> method for <a href=\"https://github.com/edicl/hunchentoot/blob/master/acceptor.lisp#L563-L582\"><code>handle-request</code></a> and then figure out how to let its call chain know not to terminate the appropriate socket stream. Something else has occurred to me though. Because there's really only one handler I'm going to need to be served asynchronously, <i>and</i> that handler will <i>only</i> serve up public information, a reasonably simple approach here might be to just off-load SSE serving to <a href=\"http://hackage.haskell.org/package/warp\">something</a> better <a href=\"http://hyber.org/server_sent_events.yaws\">suited</a> for <a href=\"http://nic.ferrier.me.uk/blog/2012_08/elnode-nears-1-point-0\">it</a>, <a href=\"https://github.com/ztellman/aleph\">specifically</a>. Yet another approach, since I'm considering <a href=\"https://github.com/ztellman/aleph\">aleph</a>, is to just write the whole thing in Clojure to begin with...</p>

<h2>Fatherly Interlude</h2>

<p>My son is at a stage where everything he gets his hands on automatically goes in his mouth. Food, toys, cats, carpet, the computer I got him to paw at. Everything. He's also gotten to teething, which seems to be a very painful experience judging from his vocal emissions.</p>

<h2>Day 9</h2>

<p>The past few days have been mostly prospective development and a little thought about secrecy. The end result is going to be some minor mechanical changes to how <code>id</code>s function, and they won't be shown for cards inside stacks.</p>

<p>Let me try to take you through it. What I was thinking earlier is that I can just assign a canonical ID to each <code>thing</code> that needs to go on the table. The trouble with that approach is that it canonically identifies a <code>thing</code>. So, for example, if you take a card from the table, put it into a stack, shuffle that stack, and then play a card face-down, it will be possible for each player to tell whether it's the same card. If it has the same <code>id</code> as the starting card, everyone knows what it is, otherwise, no one knows what it is but they can at least knock one option out of the possibility space.</p>

<p>This is not what you want.</p>

<p>The default for that situation is that no one should know what the card is, or have any additional information about it. There are two ways to solve this:</p>

<ol>
  <li>We could create canonical <code>id</code>s for everything, but display a salted+hashed version to the front end, changing out the salt whenever the zone of play changes. That would let us keep a single <code>id</code> in the back-end, but it would keep everything reasonably anonymous to the front end. It seems kind of expensive, and complicated, and not particularly useful in any case.</li>
  <li>We could assign a new <code>id</code> to a <code>thing</code> when it crosses play zones. So, for example, when you <code>play</code> a card, it gets a new <code>id</code> while in play. If you then put it into a stack, it gets a new <code>id</code> while there. If you play it face-down out of the stack again, that's a third in-play <code>id</code>.</li>
</ol>

<p>We don't actually need a central way of addressing a given <code>thing</code>. Or, at least, we don't yet, so I'm inclined to go for this second option. Remember, we generate <code>id</code>s through <code>gensym</code>, which is a pretty cheap computation as far as I know. We could, of course, keep our own global counter as part of <code>*server*</code>, but I'll see if that's necessary later. What I might want to do at the moment is name the function <code>make-id</code> just to make it a bit simpler to change if we end up needing to.</p>

<h2>Day 10</h2>

<p>I've been thinking about the SSE situation, and it occurred to me that since</p>

<ul>
  <li>I'd only need one SSE channel per game</li>
  <li>It would contain only public data</li>
  <li>I would want it to support spectators <i>(and therefore wouldn't want to restrict access to it)</i></li>
  <li>I plan to deploy Deal by running a reverse-proxy from <a href=\"http://wiki.nginx.org/Main\">nginx</a></li>
</ul>

<p>it wouldn't be a bad idea to off-load that particular handler onto nginx itself. The ideal situation would be one where I could just serve up a file per game as the \"stream\", then keep appending to it from within Deal. That <i>doesn't</i> seem to be trivially possible, but nginx <i>does</i> have an optional, production-ready <a href=\"https://github.com/wandenberg/nginx-push-stream-module\">push_stream_module</a> licensed under <a href=\"http://gplv3.fsf.org/\">GPL3</a>. That's something to consider, since it would really only take a bit of configuration twiddling as opposed to actual code to get this up-and-running.</p>

<h2>Day 12</h2>

<p>Ok, I'm ignoring the SSE question for now; we don't really have any call for it until I get enough of a front-end together to support more than one player in any case. That's proceeding apace. I've been thinking about how to approach this task; should I abstract as much and as aggressively as possible, or should I keep it plain, straightforward and stupid? Typically, I go for the second option if I can help it at all, but I decided to go the opposite way this time. Here's a list of utilities I defined. Mostly thin wrappers around existing <a href=\"http://jquery.com/\">jQuery</a> constructs, and two <i>very</i> tasty pieces of syntactic sugar to help me define things.</p>

<pre>(<span style=\"color: #a020f0;\">in-package</span> #<span style=\"color: #7a378b;\">:deal-ui</span>)

(<span style=\"color: #a020f0;\">defparameter</span> <span style=\"color: #a0522d;\">*debugging*</span> t)

(defpsmacro log (<span style=\"color: #228b22;\">&amp;body</span> body)
  (<span style=\"color: #a020f0;\">when</span> *debugging*
    `(chain console (log ,@body))))

<span style=\"color: #b22222;\">;;;;;;;;;; </span><span style=\"color: #b22222;\">JS Basics
</span>(defpsmacro obj-&gt;string (thing)
  `(chain -j-s-o-n (stringify ,thing)))

(defpsmacro string-&gt;obj (thing)
  `(chain j-query (parse-j-s-o-n ,thing)))

(defpsmacro fn (<span style=\"color: #228b22;\">&amp;body</span> body) `(<span style=\"color: #a020f0;\">lambda</span> () ,@body))

<span style=\"color: #b22222;\">;;;;;;;;;; </span><span style=\"color: #b22222;\">jQuery Basics
</span>(defpsmacro $ (selector <span style=\"color: #228b22;\">&amp;body</span> chains)
  `(chain (j-query ,selector) ,@chains))

(defpsmacro doc-ready (<span style=\"color: #228b22;\">&amp;body</span> body) 
  `($ document (ready (fn ,@body))))

(defpsmacro $map (lst <span style=\"color: #228b22;\">&amp;body</span> body)
  `(chain j-query (map ,lst (<span style=\"color: #a020f0;\">lambda</span> (elem i) ,@body))))

(defpsmacro $post (uri arg-plist <span style=\"color: #228b22;\">&amp;body</span> body)
  `(chain j-query 
          (post ,uri (create ,@arg-plist)
                (<span style=\"color: #a020f0;\">lambda</span> (data status jqXHR)
                  (<span style=\"color: #a020f0;\">let</span> ((res (string-&gt;obj (@ jqXHR response-text))))
                    ,@body)))))

(defpsmacro $droppable (target <span style=\"color: #228b22;\">&amp;rest</span> class/action-list)
  `($ ,target (droppable 
               (create 
                <span style=\"color: #7a378b;\">:drop</span> (<span style=\"color: #a020f0;\">lambda</span> (event ui)
                        (<span style=\"color: #a020f0;\">let</span> ((dropped (@ ui helper context)))
                          <span style=\"color: #b22222;\">;; </span><span style=\"color: #b22222;\">not sure if this should be a cond or a list of independent whens
</span>                          (<span style=\"color: #a020f0;\">cond</span> ,@(<span style=\"color: #a020f0;\">loop</span> for (class action) in class/action-list
                                     collect `(($ dropped (has-class ,class)) ,action)))))))))

(defpsmacro $draggable (target (<span style=\"color: #228b22;\">&amp;key</span> revert) <span style=\"color: #228b22;\">&amp;body</span> body)
  `($ ,target (draggable (create <span style=\"color: #7a378b;\">:stop</span> (<span style=\"color: #a020f0;\">lambda</span> (event ui) ,@body) <span style=\"color: #7a378b;\">:revert</span> ,revert))))

<span style=\"color: #b22222;\">;;;;;;;;;; </span><span style=\"color: #b22222;\">Define client-side ajax handlers
</span>(defpsmacro define-ajax (name uri arg-list <span style=\"color: #228b22;\">&amp;body</span> body)
  `(<span style=\"color: #a020f0;\">defun</span> ,name ,arg-list
     (log *current-table-id* ,@arg-list)
     ($post ,uri (<span style=\"color: #7a378b;\">:table</span> *current-table-id* ,@(args-&gt;plist arg-list))
            ,@body)))

<span style=\"color: #b22222;\">;;;;;;;;;; </span><span style=\"color: #b22222;\">Defining markup/behavior hybrids made easier
</span>(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">expand-self-expression</span> (form self-elem)
  (<span style=\"color: #a020f0;\">flet</span> ((recur (frm) (expand-self-expression frm self-elem)))
    (<span style=\"color: #a020f0;\">cond</span> ((null form) nil)
          ((atom form) form)
          ((and (eq 'self (car form)) (eq (second form) 'position))
           (recur '(+ <span style=\"color: #8b2252;\">\"top:\"</span> (self y) <span style=\"color: #8b2252;\">\"px;\"</span> <span style=\"color: #8b2252;\">\"left:\"</span> (self x) <span style=\"color: #8b2252;\">\"px;\"</span> <span style=\"color: #8b2252;\">\"z-index:\"</span> (self z) <span style=\"color: #8b2252;\">\";\"</span> <span style=\"color: #8b2252;\">\"transform:rotate(\"</span> (self rot) <span style=\"color: #8b2252;\">\"deg)\"</span>)))
          ((eq 'self (car form)) 
           `(@ ,self-elem ,@(cdr form)))
          ((atom (car form)) 
           (cons (car form) (recur (cdr form))))
          ((listp (car form)) 
           (cons (recur (car form))
                 (recur (cdr form)))))))

(defpsmacro define-thing (name markup <span style=\"color: #228b22;\">&amp;body</span> behavior)
  (<span style=\"color: #a020f0;\">deal::with-gensyms</span> (thing container)
    `(<span style=\"color: #a020f0;\">defun</span> ,(intern (format nil <span style=\"color: #8b2252;\">\"create-~a\"</span> name)) (container thing)
       (<span style=\"color: #a020f0;\">let*</span> ((,thing thing)
              (,container container)
              (css-id (+ <span style=\"color: #8b2252;\">\"#\"</span> (@ ,thing id))))
         ($ ,container (append (who-ps-html ,(expand-self-expression markup thing))))
         ,@(<span style=\"color: #a020f0;\">loop</span> for clause in behavior
              collect (expand-self-expression clause thing))))))

&lt;p&gt;The first bunch already kind of got addressed &lt;a href=<span style=\"color: #8b2252;\">\"/article?name=javascript-with-a-lisp.html\"</span>&gt;last time I talked about parenscript&lt;/a&gt;. Some newcomers include sugar for using map, draggables and droppables in a simpler way than the default jQuery UI package allows for&lt;/p&gt;

(defpsmacro $map (lst <span style=\"color: #228b22;\">&amp;body</span> body)
  `(chain j-query (map ,lst (<span style=\"color: #a020f0;\">lambda</span> (elem i) ,@body))))

(defpsmacro $droppable (target <span style=\"color: #228b22;\">&amp;rest</span> class/action-list)
  `($ ,target (droppable 
               (create 
                <span style=\"color: #7a378b;\">:drop</span> (<span style=\"color: #a020f0;\">lambda</span> (event ui)
                        (<span style=\"color: #a020f0;\">let</span> ((dropped (@ ui helper context)))
                          <span style=\"color: #b22222;\">;; </span><span style=\"color: #b22222;\">not sure if this should be a cond or a list of independent whens
</span>                          (<span style=\"color: #a020f0;\">cond</span> ,@(<span style=\"color: #a020f0;\">loop</span> for (class action) in class/action-list
                                     collect `(($ dropped (has-class ,class)) ,action)))))))))

(defpsmacro $draggable (target (<span style=\"color: #228b22;\">&amp;key</span> revert) <span style=\"color: #228b22;\">&amp;body</span> body)
  `($ ,target (draggable (create <span style=\"color: #7a378b;\">:stop</span> (<span style=\"color: #a020f0;\">lambda</span> (event ui) ,@body) <span style=\"color: #7a378b;\">:revert</span> ,revert))))</pre>

<p>All of the correspondingly wrapped structures suffer from the same syntactic problem; they want you to pass them a function, but that function will always get the same arguments passed to it. In plain JS, you can't really bust out of this pattern without using <code>eval</code>. Which you shouldn't do. If you're dealing with JS through a language like Lisp though, you can just define macros like these to take the appropriate <code>body</code> arguments and then drop the appropriate <code>lambda</code>s around them. As long as you remember what the arguments <i>are</i>, that frees you from having to check documentation on their order every goddamn time I write any serious front-end JavaScript.</p>

<p><code>define-thing</code> and <code>define-ajax</code> are more complex constructs. The second one is a way for me to define connecting functions between the front-end and the back end. Specifically, it lets me say things like</p>

	     (define-ajax show-table \"/show-table\" ()
			  (render-board res))

<p>That'll do exactly what you think it should; send an ajax request to the uri <code>/show-table</code>, then pass the JSON-parsed result to <code>render-board</code>. <code>define-thing</code> buys me more of the same, except it's good for defining local UI components rather than asynchronous handlers. Here's an example</p>

<pre>             (<span style=\"color: #a020f0;\">define-thing</span> stack
                 (<span style=\"color: #7a378b;\">:div</span> <span style=\"color: #7a378b;\">:id</span> (self id) 
                       <span style=\"color: #7a378b;\">:class</span> (+ <span style=\"color: #8b2252;\">\"stack\"</span> (<span style=\"color: #a020f0;\">when</span> (= (self face) <span style=\"color: #8b2252;\">\"down\"</span>) <span style=\"color: #8b2252;\">\" face-down\"</span>))
                       <span style=\"color: #7a378b;\">:style</span> (self position)
                       <span style=\"color: #7a378b;\">:title</span> (self id)
                       (<span style=\"color: #7a378b;\">:button</span> <span style=\"color: #7a378b;\">:class</span> <span style=\"color: #8b2252;\">\"draw\"</span> <span style=\"color: #8b2252;\">\"Draw\"</span>)
                       (<span style=\"color: #7a378b;\">:div</span> <span style=\"color: #7a378b;\">:class</span> <span style=\"color: #8b2252;\">\"card-count\"</span> (+ <span style=\"color: #8b2252;\">\"x\"</span> (self card-count))))
               ($draggable css-id () 
                           (move (self id) (@ ui offset left) (@ ui offset top) 0 0))
               ($ (+ css-id <span style=\"color: #8b2252;\">\" .draw\"</span>) (click (fn (draw (self id) 1)))))</pre>

<p>Note that this makes use of the <code>$</code> and <code>$draggable</code> macros as well. What this does is sugar-coat the definition of a function called <code>create-stack</code>, which will take a container selector and a JSON object and</p>

<ol>
  <li>slot the object into that markup specification</li>
  <li>append the result to the given container</li>
  <li>run the behavior applying code on the newly formed element</li>
</ol>

<p>I'm still considering having the macro itself add the declaration of <code>:id (self id)</code>, because I do that literally everywhere. The only other interesting part is that this macro goes through the trees you pass it and expands anything that looks like <code>(self foo)</code> into something that looks like <code>(@ self foo)</code>, which is how you're supposed to index thing in Parenscript. It also special-cases <code>(self position)</code> into the complete CSS style rule, making sure that the <code>x</code>, <code>y</code>, <code>z</code> and <code>rot</code> slots are reflected in the relevant CSS properties.</p>

<p>That's that for now. Hopefully, I can 0.1 this thing fairly soon, and finally publish part one of this journal. I <i>was</i> going to wait 'till the end, but it looks like the complete document will be far too long to publish at once.</p>

<h2>Day 37</h2>

<p>Kind of a big jump this time. Haven't really had the chance to do stuff related to this project lately. My time's been getting filled with extremely interesting, lispy things that I'm unfortunately not allowed to tell you about. Yet. Hopefully, I can convince the correct humans to let me publish some or all of it in the near future.</p>

<p>I've implemented the <a href=\"http://weitz.de/hunchentoot/#sessions\">session</a> system, which actually lets multiple people sit down at a single table and play together. That's basically it. I've been thinking about what I want the join/new-game interface to look like, but at this point that's all it'll have to be. An interface. The hard part is more or less done. There's one big architectural question I have to answer, and one big feature I need to properly implement, and then I can move on to the task of making the UI pretty, and maybe build some basic tools for deck construction as well as playing.</p>


<h4>The Big Architectural Decision</h4>

<p>Is whether to explicitly represent stacks in the final model. It <i>kind</i> of makes sense, given that you don't want anyone to know what cards actually get shuffled to, so it's possible to conceptualize \"in a stack\" as a state change for the card on the table. It still doesn't work that way in real life. You can take a bunch of cards and stack them, but you never lose the ability to interact with each of them individually. There might be one or two things that either view of the world enables or prohibits, but it also seems that it'd be pretty straight-forward to switch between them later if I wanted to. Maybe this is one I hold off on until I see a direct need.</p>

<h4>The Big Feature</h4>

<p>Is data pushing.</p>

<p>Fuck, I had vaguely hoped that in the year 2013, <a href=\"/article?name=client-communication.html\">this</a> would be a solved problem, but none of the options provided natively as part of the http/js/html stack are both simple and compatible with the thread-per-request model of serving up data. I'm still heavily leaning to just using the <a href=\"https://github.com/wandenberg/nginx-push-stream-module\">nginx</a> stream module given that this projects' published data fits some specific criteria that would make a full public solution possible.</p>

<p>That's that. Once those are ironed out, I can finally post a one point oh and get people playing it. Oh, and get this piece published already so I can get on with the next one: taking it from \"working\" to \"beautiful\".</p>

<h2>Day 38</h2>

<p>So the trivial part of the feature is done. It seems that the nginx stream module is easy to set up and get running properly. I haven't restricted publishing rights to <code>localhost</code> yet, but I can't imagine that'll be much more difficult to configure. Now comes the slightly harder part: defining the infrastructure inside of <code>deal</code> to publish to these streams and get new arrivals up and running. The basics will look <i>something</i> like</p>

<pre>(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">publish-move!</span> ((table table) move <span style=\"color: #228b22;\">&amp;optional</span> (stream-server *stream-server*))
  (push move (history table))
  (http-request
   (format nil <span style=\"color: #8b2252;\">\"~apub?id=~a\"</span> stream-server (id table))
   <span style=\"color: #7a378b;\">:method</span> <span style=\"color: #7a378b;\">:post</span> <span style=\"color: #7a378b;\">:content</span> move))</pre>

<p>Except that I think I'm going to make <code>move</code> itself a JSON object just to make it easier to work with on the other end. The <code>*stream-server*</code> variable will then be set to the location of the nginx instance that handles stream serving for me. Note two things about this setup, incidentally:</p>

<ul>
  <li>the nginx stream module natively handles multiple protocols. By default it uses a forever-frame, but it can be configured to expose <i>the same stream</i> as an EventSource<a href=\"#foot-Sun-Aug-25-220313EDT-2013\" name=\"note-Sun-Aug-25-220313EDT-2013\">[2]</a>, and a web-socket, and a long-poll handler.</li>
  <li>the server handling my stream publishing doesn't have to be on the same machine as the rest of the application, which opens up some interesting hosting possibilities if scaling up ever gets to be <i>the</i> problem I'm staring down</li>
</ul>

<p>It also really, truly looks like it'll be both more performant and much easier than trying to re-write pieces of Hunchentoot to support asynchronous requests in certain contexts.</p>

<h2>Day 41</h2>

<p>I have no idea what happened, but I finally ended up getting a solid day to put stuff together for this project. As a result, I've got a pretty-much-playable edition sitting up on my server, waiting for a couple more edits before I unveil it, and this massive <code>Journal: Part One</code> I've had going. Right now, I'm in the guts of the <code>define-handler</code> mini-language, trying to get my pseudo-type-system to automatically solve the problems of argument bounding for me. That is, I want to be able to specify the min and max for various argument types and have it do the right thing. Specifically, I'd like to be able to specify minimum/maximum <i>values</i> for <code>:int</code>s, and minimum/maximum <i>lengths</i> for <code>:string</code>s.</p>

<p>The <code>:int</code> changes only come into play in the <code>new-table</code> handlers, and the dice-rolling system. I don't want people to start tables that seat fewer than 2 or more than 12. Also, I don't want people to be able to roll 2&gt;-sided dice, or fewer than one of them. A <code>d2</code> is a coin-flip, which I have a separate handler defined for, and any less than that would be entirely too predictable. That's pretty obvious: assert that the incoming parameter fits within the specified range, and we're done.</p>

<p>The <code>:string</code> changes are going to be used as part of chatting and tagging. Chat messages are going to be delivered from the user to the named table/lobby, and tags are user-specified strings that will be applied either to themselves or games they start. Tags can be empty strings<a href=\"#foot-Sun-Aug-25-220319EDT-2013\" name=\"note-Sun-Aug-25-220319EDT-2013\">[3]</a>, but chat messages need to be at least two characters. And <i>neither</i> thing should ever be longer than 255 characters<a href=\"#foot-Sun-Aug-25-220323EDT-2013\" name=\"note-Sun-Aug-25-220323EDT-2013\">[4]</a>. Now, if I get a chat message shorter than I want it, that's obvious: just throw an error and do nothing.</p>

<p>But.</p>

<p>What do I do with a string <i>longer</i> than I want? There's two reasonable-sounding ways to handle that situation</p>

<ol>
  <li><b>Error out</b>; after all, interface this user is piloting doesn't conforming to my API, so it should come as no surprise to anyone</li>
  <li><b>Truncat</b>; take a chunklet of whatever they sent small enough for my purposes, and proceed to fulfill the request with only the relevant data</li>
</ol>

<p>Erring means chat messages get dropped, truncating means something goes out over the wire, even if it wasn't exactly what the user intended. Now that I think about it, it seems obvious that what you'd really want, as a user, is for the server to be hard-assed about it, but the front-end to tell you what's going on. In the interests of loose coupling, this means I actually want to specify that limitation in both places. Which works perfectly, because my server already emits the specifications for its handlers through <a href=\"https://github.com/Inaimathi/deal/blob/master/deal.lisp#L6-L12\"><code>/server-info</code> requests</a>, and that will automatically include any mins/maxes I define in the relevant argument lines.</p>

<h2>Day 42</h2>

<p>Basically, finished a bunch of the UI changes I needed to make in order to get this into a playable state. Not quasi-playable, not semi-playable, just plain playable. You can actually go <a href=\"http://deal.inaimathi.ca/static/index.html\">here</a> and use it for realzies. I mean, it's not <i>enjoyable</i> yet, and there's a lot of basic functionality still missing<a href=\"#foot-Sun-Aug-25-220327EDT-2013\" name=\"note-Sun-Aug-25-220327EDT-2013\">[5]</a>, but you can actually go there with a couple of friends, start a game of <a href=\"http://en.wikipedia.org/wiki/Crazy_Eights\">crazy eights</a> or <a href=\"http://www.pagat.com/climbing/asshole.html\">something</a>, and have an excellent chance of finishing it before anything crashes. If anything crashes, incidentally, <a href=\"https://github.com/Inaimathi/deal/issues?state=open\">do report that</a>. Or patch it and send me a pull request.</p>

<p>I've got a bunch of things still in my head concerning where this project ought to go. Some of them involve more degrees of freedom in terms of the reference UI I've been putting together, one of them is a deck builder (which it'll need to fulfill the \"prototyping\" promise of this project), and another is a board position editor (which it'll need to fulfill the \"prototyping\" promise of this project for anything other than card games). Now that I think of it, those last to could possibly be combined elegantly. Hmm.</p>

<p>Anyhow, so concludes part one of my journal: <code>zero</code> to <code>playable</code>. Now I'll try to take it from <code>playable</code> to as close to <code>beautiful</code> as I can before the contest deadline is up.</p>

<p>Wish me luck.</p>


<hr />
<h5>Footnotes</h5>
<p>1 - <a href=\"#note-Sun-Aug-25-220244EDT-2013\" name=\"foot-Sun-Aug-25-220244EDT-2013\">[back]</a> - This second one will change, incidentally. In the real system, this will be referencing a player record from the current users' session rather than the global one, so it's an even better idea to handle that in a macro rather than manually as part of each handler.</p>

<p>2 - <a href=\"#note-Sun-Aug-25-220313EDT-2013\" name=\"foot-Sun-Aug-25-220313EDT-2013\">[back]</a> - Which is basically a formally-specified forever-frame with direct JavaScript support in modern browsers.</p>

<p>3 - <a href=\"#note-Sun-Aug-25-220319EDT-2013\" name=\"foot-Sun-Aug-25-220319EDT-2013\">[back]</a> - The appropriate <code>id</code> gets used in that case so that there's an unambiguous way to refer to a player or game, if you're wondering, tags are just supposed to provide something human-readable.</p>

<p>4 - <a href=\"#note-Sun-Aug-25-220323EDT-2013\" name=\"foot-Sun-Aug-25-220323EDT-2013\">[back]</a> - Arbitrarily chosen. It's what all the cool kids were doing, and it serves my purposes well enough, so I went with it.</p>

<p>5 - <a href=\"#note-Sun-Aug-25-220327EDT-2013\" name=\"foot-Sun-Aug-25-220327EDT-2013\">[back]</a> - Such as changing your screen name, playing things face down, picking things up, coin-flips, dice rolls, and pretty much anything other than playing the standard 54-card deck.</p>
"))
((5202 3723 617758000) :INSERT (148 :POSTED 3586392000))
((5202 3723 617763000) :INSERT (148 :TAG :ALMOST-LITERATE-PROGRAMMING))
((5202 3723 617765000) :INSERT (148 :TAG :COMMON-LISP))
((5202 3723 617766000) :INSERT (148 :TAG :HTML))
((5202 3723 617768000) :INSERT (148 :TAG :HTML5))
((5202 3723 617770000) :INSERT (148 :TAG :JAVASCRIPT))
((5202 3723 617772000) :INSERT (148 :TAG :JOURNAL))
((5202 3723 617774000) :INSERT (148 :TAG :JQUERY))
((5202 3723 617776000) :INSERT (148 :TAG :PARENSCRIPT))
((5202 3723 618185000) :INSERT (149 :TITLE "Deal Journal - Part Two"))
((5202 3723 618190000) :INSERT (149 :FILE "deal-part-2.html"))
((5202 3723 618192000) :INSERT (149 :EDITED 3610300742))
((5202 3723 618193000) :INSERT
 (149 :BODY
  "<p>This is part two of the journal for the <a href=\"https://github.com/Inaimathi/deal\">Deal project</a>. <a href=\"/article?name=deal.html\">Part one</a> can be found <a href=\"/article?name=deal.html\">here</a>.</p>

<h2>Day 44</h2>

<p>I've been pouring time into the thing, as you can see by taking a look at the code contribution graphs. I'm trying desperately to keep the JS as terse and understandable as possible, but I'm running into challenges all over the place. If I wasn't writing Lisp, I'd probably have given up by now. Which is not to say that its been <i>easy</i> in Lisp. Mistakes have been made and rolled back, rest assured, and I still need to take a second look at the SSE/chat system to make it as DRY as possible. I currently have a very similar structure repeating in three places, which means its time to factor that out.</p>

<p>Here are a couple of close-ups on things I already changed:</p>

<pre>(defpsmacro $keypress (target <span style=\"color: #228b22;\">&amp;rest</span> key/body-pairs)
  `($ ,target
      (keypress
       (<span style=\"color: #a020f0;\">lambda</span> (event)
         (<span style=\"color: #a020f0;\">let</span> ((shift? (@ event shift-key))
               (alt? (@ event alt-key))
               (ctrl? (@ event ctrl-key))
               (meta? (@ event meta-key))
               (&lt;ret&gt; 13) (&lt;esc&gt; 27) (&lt;space&gt; 32) 
               (&lt;up&gt; 38) (&lt;down&gt; 40) (&lt;left&gt; 37) (&lt;right&gt; 39))
           (<span style=\"color: #a020f0;\">cond</span> ,@(<span style=\"color: #a020f0;\">loop</span> for (key body) on key/body-pairs by #'cddr
                      collect `((= (@ event which) ,(<span style=\"color: #a020f0;\">if</span> (stringp key) `(chain ,key (char-code-at 0)) key)) ,body))))))))</pre>

<p>That's a function for simplifying <code>$(\"foo\").keypress()</code> use. It doesn't simplify the call itself much, but it handles looking up some common keycodes for me. This is the shittily performing version; if I really felt like it, I could have it substitute literals at macro-expansion time rather than doing a run-time let. Hm. In fact, Note To Self.</p>

<p>Next up:</p>

<pre>(defpsmacro $droppable (target (<span style=\"color: #228b22;\">&amp;key</span> overlapping) <span style=\"color: #228b22;\">&amp;rest</span> class/action-list)
  `($ ,target
      (droppable 
       (create 
        <span style=\"color: #7a378b;\">:drop</span> (<span style=\"color: #a020f0;\">lambda</span> (event ui)
                (<span style=\"color: #a020f0;\">let</span> ((dropped (@ ui helper context))
                      (shift? (@ event shift-key)))
                  (<span style=\"color: #a020f0;\">cond</span> ,@(<span style=\"color: #a020f0;\">loop</span> for (class action) in class/action-list
                             collect `(($ dropped (has-class ,class)) ,action)))))
        ,@(<span style=\"color: #a020f0;\">when</span> overlapping
                `(<span style=\"color: #7a378b;\">:over</span> (fn ($ ,overlapping (droppable <span style=\"color: #8b2252;\">\"disable\"</span>)))
                  <span style=\"color: #7a378b;\">:out</span> (fn ($ ,overlapping (droppable <span style=\"color: #8b2252;\">\"enable\"</span>)))))))))</pre>

<p><code>$droppable</code> got a bit of a face-lift due to the way overlapping jQuery droppables interact with one another. Specifically, they <i>all</i> trigger. If you don't want that, you have to write a couple of lines of code to disable potentially overlapping droppables so as not to trigger them. This is a \"good-enough\" solution, but I'm still wondering if <a href=\"http://www.w3schools.com/html/html5_draganddrop.asp\">the HTML5 droppable interface</a> handles this situation better.</p>

<pre>(defpsmacro $draggable (target (<span style=\"color: #228b22;\">&amp;key</span> revert handle cancel) <span style=\"color: #228b22;\">&amp;body</span> body)
  `($ ,target (draggable (create <span style=\"color: #7a378b;\">:stop</span> (<span style=\"color: #a020f0;\">lambda</span> (event ui) 
                                         (<span style=\"color: #a020f0;\">let</span> ((shift? (@ event shift-key)))
                                           ,@body))
                                 ,@(<span style=\"color: #a020f0;\">when</span> revert `(<span style=\"color: #7a378b;\">:revert</span> ,revert))
                                 ,@(<span style=\"color: #a020f0;\">when</span> handle `(<span style=\"color: #7a378b;\">:handle</span> ,handle))
                                 ,@(<span style=\"color: #a020f0;\">when</span> cancel `(<span style=\"color: #7a378b;\">:cancel</span> ,cancel))))))</pre>

<p>Finally, <code>$draggable</code> got the tiny addition of an injected binding of <code>shift?</code>, just because I use it in a few places. Really, I should probably be consistent with these and bind similar symbols for all the modifier keys. That's something I'll change for the versions of these functions that end up getting dropped into <a href=\"https://github.com/Inaimathi/cl-web-dev\">cl-web-dev</a></p>

<p>The back-end isn't going to get any more complicated. In fact, now that I've gotten the chance to test drive <a href=\"http://deal.inaimathi.ca/static/index.html\">the result</a> a few times, I'm probably going to aggressively <i>cut</i> features from it. Every change made to <a href=\"https://github.com/Inaimathi/deal/blob/master/deal.lisp\">deal.lisp</a> since last time has been either a bug fix, a clearer and simpler way to say something, or a change to parameter bounds. Specifically, it came to my attention that rolling <code>4096</code> dice at once created a message big enough to choke the push-stream module, so I limited players to rolling only <code>128</code> dice at a time.</p>

<p>Tons of the features I wanted got put together in the last couple of days. The front-end is now good enough that I'm seriously considering starting in on the deck/board builder rather than adding more stuff. There's nice-to-haves, obviously, but nothing that'll outright prevent any game I can think of from being played.</p>

<h2>Day 45</h2>

<p>Didn't get as much work done as I was hoping today. The lack of sleep is finally taking its toll, I think. Hopefully I can catch up on some rest this weekend, then move on to the deck/setup editor, then get to polishing the fuck out of all of it. I did a bit of that. Little things like</p>

<ul>
  <li>the ability to shuffle</li>
  <li>changed the thought process behind stacks<a href=\"#foot-Sat-Sep-07-221201EDT-2013\" name=\"note-Sat-Sep-07-221201EDT-2013\">[1]</a></li>
  <li>fixing some bugs that don't seem to have bitten yet, but would have in pretty short order</li>
</ul>

<p>but nothing major.</p>

<p>One thing I wanted to point out explicitly, just to convince you that I'm serious about this \"clarity\" thing:</p>

<pre>inaimathi@lambda:~$ cd projects/deal/
inaimathi@lambda:~/projects/deal$ wc -l *lisp model/*lisp deal-ui/*lisp *asd
  197 deal.lisp
  124 define-handler.lisp
   24 package.lisp
   32 start.lisp
   81 util.lisp
   68 model/server.lisp
  123 model/table.lisp
   96 deal-ui/css.lisp
  461 deal-ui/deal-ui.lisp
    4 deal-ui/package.lisp
  150 deal-ui/pQuery.lisp
   46 deal-ui/util.lisp
   14 deal.asd
   15 deal-ui.asd
 1435 total
inaimathi@lambda:~/projects/deal$ </pre>

<p>We're at ~1500 lines, and not terribly likely to crack 2000, <i>and</i> we've got a pretty feature-full little play-testing tool to show for it.</p>

<h2>Day I've lost track. And actually, these have been bullshit for a while. It's August 31st though, so maybe I just start counting from the end now? Yeah, ok, lets do that.</h2>

<h2>T minus 30 days</h2>

<p>It's amazing what a little sleep will accomplish. I haven't written any more code, but I've got the shape of the deck/board editor in my head.</p>

<p>Basically, it'll be an interface where users can specify collections of cards in text or JSON format. Those collections will then be added to their decks pane, at which point they can add it to the table. Each deck will also get a download button, which will let the user save that particular deck in a JSON format suitable for uploading later.</p>

<p>Before a second player joins a game, there will be a save button somewhere on the toolbar, and clicking it will let the user download a chunklet of JSON that represents everything on the board. The \"new table\" window will also gain a new <code>upload</code> button which will let the user upload a start file, and start the game off with the specified items pre-arranged on the board. We want this dump to contain <i>everything</i>. That is, all the information about things on the board, including the <code>contents</code> slots of face-down cards, and the list of cards inside of all stacks in play. <i>That</i> means we can't let the user randomly save out state; they could use it to cheat at the game<a href=\"#foot-Sat-Sep-07-221208EDT-2013\" name=\"note-Sat-Sep-07-221208EDT-2013\">[2]</a>.</p>

<p>Now, because a goal of this project is zero authentication, and because I want it to be inherently distributed, I can't just save all this stuff on the server side. The client actually needs to store their own games and start files, and upload them when they need to use them. This makes certain seemingly uncommon things very slightly clunkier, but it lets a given user freely switch browsers and servers whenever they like, rather than being bound to a single instance of Deal.</p>

<p>Also, because I'm not going to be serializing <i>everything</i> in these dumps<a href=\"#foot-Sat-Sep-07-221214EDT-2013\" name=\"note-Sat-Sep-07-221214EDT-2013\">[3]</a>, the complete system will actually need three different ways of outputting its internal data structures:</p>

<ul>
  <li>one that leaves out any private information, such as the contents of stacks, or the text on face-down cards. This one is already implemented as the <code>redact</code> method</li>
  <li>one that keeps private information, but strips anything game-specific, such as IDs and <code>belongs-to</code> slots. This is what I'm discussing for the save feature; it should be possible to use these to instantiate a particular object or board in a different game. Not sure what to call it, but it's named <code>serialize</code> for the moment. Maybe <code>save</code> or something?</li>
  <li>one that keeps everything. This is the one I'll be using to store logs and replays later. It needs <i>all</i> the information about a particular game, its result shouldn't be available until after a game is concluded, and the board should have an additional piece of data attached to describe its starting position.</li>
</ul>

<h2>T minus 29 days</h2>

<p>Something odd started going wrong recently, and I had to sit down to puzzle through it. It turned out to be an odd corner of how <code>cl-json</code> handles encoding <code>list</code>s. See, because a list might represent an <code><a href=\"http://www.cs.cmu.edu/Groups/AI/html/cltl/clm/node153.html\">alist</a></code>, a <code><a href=\"http://www.cs.cmu.edu/Groups/AI/html/cltl/clm/node108.html\">plist</a></code> or just a vanilla <code><a href=\"http://www.cs.cmu.edu/Groups/AI/html/cltl/clm/node149.html\">list</a></code>, there's ambiguity in terms of how to encode it. The way that this seems to be handled is with an error/backtrack strategy that tries each option and sees what it comes up with. The trouble with <i>that</i> when you're serializing things that look something like</p>

<pre>`((TYPE . <span style=\"color: #7a378b;\">:TABLE</span>) (ID . <span style=\"color: #7a378b;\">:G2444</span>) (TABLECLOTH)
  (THINGS ((<span style=\"color: #7a378b;\">:G2523</span> (TYPE . <span style=\"color: #7a378b;\">:STACK</span>) (ID . <span style=\"color: #7a378b;\">:G2523</span>) (X . 677) (Y . 461) (Z . 0) (ROT . 0)
                   (BELONGS-TO . <span style=\"color: #7a378b;\">:G2443</span>) (CARD-COUNT . 78) (CARD-TYPE . <span style=\"color: #7a378b;\">:OCCULT-TAROT</span>))
           (<span style=\"color: #7a378b;\">:G2578</span> (TYPE . <span style=\"color: #7a378b;\">:STACK</span>) (ID . <span style=\"color: #7a378b;\">:G2578</span>) (X . 705) (Y . 259) (Z . 0) (ROT . 0)
                   (BELONGS-TO . <span style=\"color: #7a378b;\">:G2443</span>) (CARD-COUNT . 54) (CARD-TYPE . <span style=\"color: #7a378b;\">:FRENCH</span>))
           (<span style=\"color: #7a378b;\">:G2619</span> (TYPE . <span style=\"color: #7a378b;\">:STACK</span>) (ID . <span style=\"color: #7a378b;\">:G2619</span>) (X . 815) (Y . 358) (Z . 0) (ROT . 0)
                   (BELONGS-TO . <span style=\"color: #7a378b;\">:G2443</span>) (CARD-COUNT . 40) (CARD-TYPE . <span style=\"color: #7a378b;\">:N-ITALIAN</span>)))
          (PLAYERS ((ID . <span style=\"color: #7a378b;\">:G2443</span>) (HAND . 0)))
          (HISTORY
           ((TIME . 3587036264) (TYPE . <span style=\"color: #7a378b;\">:NEW-DECK</span>) (PLAYER . <span style=\"color: #7a378b;\">:G2443</span>)
            (PLAYER-TAG . <span style=\"color: #8b2252;\">\"Anonymous Coward\"</span>) (NAME . <span style=\"color: #8b2252;\">\"Northern Italian\"</span>)
            (STACK (TYPE . <span style=\"color: #7a378b;\">:STACK</span>) (ID . <span style=\"color: #7a378b;\">:G2619</span>) (X . 815) (Y . 358) (Z . 0) (ROT . 0)
                   (BELONGS-TO . <span style=\"color: #7a378b;\">:G2443</span>) (CARD-COUNT . 40) (CARD-TYPE . <span style=\"color: #7a378b;\">:N-ITALIAN</span>)))
           ((TIME . 3587036262) (TYPE . <span style=\"color: #7a378b;\">:NEW-DECK</span>) (PLAYER . <span style=\"color: #7a378b;\">:G2443</span>)
            (PLAYER-TAG . <span style=\"color: #8b2252;\">\"Anonymous Coward\"</span>) (NAME . <span style=\"color: #8b2252;\">\"54-Card Standard\"</span>)
            (STACK (TYPE . <span style=\"color: #7a378b;\">:STACK</span>) (ID . <span style=\"color: #7a378b;\">:G2578</span>) (X . 705) (Y . 259) (Z . 0) (ROT . 0)
                   (BELONGS-TO . <span style=\"color: #7a378b;\">:G2443</span>) (CARD-COUNT . 54) (CARD-TYPE . <span style=\"color: #7a378b;\">:FRENCH</span>)))
           ((TIME . 3587036259) (TYPE . <span style=\"color: #7a378b;\">:NEW-DECK</span>) (PLAYER . <span style=\"color: #7a378b;\">:G2443</span>)
            (PLAYER-TAG . <span style=\"color: #8b2252;\">\"Anonymous Coward\"</span>) (NAME . <span style=\"color: #8b2252;\">\"Occult Tarot\"</span>)
            (STACK (TYPE . <span style=\"color: #7a378b;\">:STACK</span>) (ID . <span style=\"color: #7a378b;\">:G2523</span>) (X . 677) (Y . 461) (Z . 0) (ROT . 0)
                   (BELONGS-TO . <span style=\"color: #7a378b;\">:G2443</span>) (CARD-COUNT . 78) (CARD-TYPE . <span style=\"color: #7a378b;\">:OCCULT-TAROT</span>))))))</pre>

<p>With, maybe, a few more levels in a couple of places, the error/backtrack strategy ends up bottoming out your error depth. Even if you use <code>encode-json-alist</code> instead of the standard <code>encode-json</code>, the library seems to guess what it needs to do separately for each element of each level. Also, I'm not sure whether it's how I have Hunchentoot configured or whatever, but for some reason, this error would immediately be ignored in REPL. I had to really be paying attention to catch the flicker of <code>error depth exceeded</code> pass by SLIME. The only real symptom I could detect was otherwise unexplained <code>502</code> errors on the client side, which is why it took me a few hours to figure out what was actually happening.</p>

<p>The solution ended up being fairly easy to implement: just use hashes everywhere. Because those are unambiguous to encode into JSON, they won't incur the same guessing damage. So even though I've got a feeling they're heavier than <code>alist</code>s, they'll avoid a whole lot of unnecessary work later. Of course, since Common Lisp doesn't have good built-in syntax for writing hashes, I had to write my own.</p>

<pre>(<span style=\"color: #a020f0;\">defmacro</span> <span style=\"color: #0000ff;\">hash</span> (<span style=\"color: #228b22;\">&amp;rest</span> k/v-pairs)
  (<span style=\"color: #a020f0;\">with-gensyms</span> (hash-table)
    `(<span style=\"color: #a020f0;\">let</span> ((,hash-table (make-hash-table)))
       ,@(<span style=\"color: #a020f0;\">loop</span> for (k v) on k/v-pairs by #'cddr
            collect `(setf (gethash ,k ,hash-table) ,v))
       ,hash-table)))</pre>

<p>Which lets me redefine the <code>redact</code> methods to emit hash tables rather than alists, like so:</p>

<pre>(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">redact</span> ((stack stack))
  (<span style=\"color: #a020f0;\">with-slots</span> (id x y z rot belongs-to card-count card-type) stack
    (hash <span style=\"color: #7a378b;\">:type</span> <span style=\"color: #7a378b;\">:stack</span> <span style=\"color: #7a378b;\">:id</span> id <span style=\"color: #7a378b;\">:x</span> x <span style=\"color: #7a378b;\">:y</span> y <span style=\"color: #7a378b;\">:z</span> z <span style=\"color: #7a378b;\">:rot</span> rot
          <span style=\"color: #7a378b;\">:belongs-to</span> belongs-to
          <span style=\"color: #7a378b;\">:card-count</span> card-count
          <span style=\"color: #7a378b;\">:card-type</span> card-type)))</pre>

<p>That's still begging for some better syntax, of course. Its already bitten me once; I wrote the <code>card</code> emitter and forgot to have it encode the <code>id</code> slot, which ended up preventing cards from being interacted with on the front-end. Anyhow, that's fixed. Hopefully.</p>

<p>The other thing I managed to do was put together a very minimal little system for creating custom decks. Which means that after I hack in the intentionally limited game-state save/load feature, this will officially be a capable playtesting <b>and</b> prototyping tool. Wish me luck.</p>

<h2>T minus 28 days: wee hours of the morning</h2>

<p>It's about 1:20 right now, and I managed to put a few more hours in. The latest <a href=\"https://github.com/Inaimathi/deal\">codebase up at github</a> has a working, if ugly, upload system. That is, while you're the only one in your game, you can set stuff up, save a <code>game.json</code> file, and load it up again later to replicate your earlier setup. It looks like the web hasn't been sitting still after all, by the way. Whereas the server-push situation still sucks a bag of donkey dongs, file uploading now sucks only a single such dong. Two at the outside. You can do <a href=\"http://stackoverflow.com/a/8758614\">asynchronous file uploads fairly simply</a>, provided you're willing to live with only supporting HTML5 browsers, and trust me, I am. Having put that together, this is technically a finished playtesting/prototyping tool for tabletop card games. There's still a <a href=\"https://github.com/Inaimathi/deal/issues\">bunch of polish</a> I want to put on it, patches welcome by the by, and I still want to make a few things make slightly more sense, <i>and</i> I really want to make some parts of the tool prettier before I start promoting it publicly, but even <a href=\"http://deal.inaimathi.ca/static/index.html\">Deal as it stands</a> is now enough to do the prototype work which was ostensibly the point of the project.</p>

<h2>T minus 23 days</h2>

<p>I just finished the single biggest commit since the start of this project. It... well, here, I'll just read you the log message.</p>

<pre>16fb9532 * origin/master 
         | Author: inaimathi &lt;<span style=\"color: #0000ff;\">inaimathi</span>@lambda&gt;
         | Date:   Sat Sep 7 20:53:26 2013 -0400
         | 
         |     Easily the biggest commit yet
         |     
         |     -Added cl-fad to dependency list
         |     -minis are now implemented (still no custom minis; working on it)
         |     -tablecloths are now implemented (still no custom tableclblah blah blah)
         |     -fixed droppable bug related to window scrolling. Not pixel-precise, but I think this is as close as we're gonna get
         |     -fixed droppable bug which kept competing droppables disabled even after a droppable event was completed
         |     -added go-board tablecloth
         |     -added chess-board tablecloth
         |     -added chess/checkers/go/chinese-checkers minis
         |     -added all relevant images
         |     -dragging a card/mini/stack to your backpack now removes it from play (may want to keep this at just minis. Might get a bit confusing otherwise)
         |     -chat history is now tracked in-cookie for completion purposes
         |     -player tag is now tracked in-cookie for completion purposes
         |     -dice counts for rolling icons in backpack are now tracked in-cookie for ease of use (I still prefer rolling via the @roll command)
         |     -position of zoomed card and table-toolbar is now tracked in-cookie for ease of use
         |     -did I mention we had zoomed cards now? We have zoomed cards now.</pre>

<p>Not mentioned is the addition of an actual license<a href=\"#foot-Sat-Sep-07-221225EDT-2013\" name=\"note-Sat-Sep-07-221225EDT-2013\">[4]</a>, but I won't dwell on that.</p>

<p>Minis now actually work. Ditto tablecloths. Which means you can now effectively play <a href=\"http://en.wikipedia.org/wiki/Chess\">chess</a>, <a href=\"http://en.wikipedia.org/wiki/Draughts\">checkers</a> and <a href=\"http://en.wikipedia.org/wiki/Go_(game)\">go</a> in deal, which was a not-entirely-unintended side-effect of building a general-purpose tabletop game simulator. That's all <a href=\"http://deal.inaimathi.ca/static/index.html\">up</a>, by the way. You can play around with it now.</p>

<p>The big stuff that still needs to get done, as far as I'm concerned, is in order of priority</p>

<ul>
  <li>some UI-tweaking regarding the chat, tablecloths, dice interface, stacks (which are still ugly as sin) and deck editing</li>
  <li>cookie-ing of custom decks</li>
  <li>the ability to specify custom tablecloths and minis, and cookie-fying those too</li>
  <li>a bunch of re-factoring and code contraction related to various wordy and common patterns that cropped up in deal-ui</li>
</ul>

<p>that's basically it though. And all of those things deal with the front-end, which I've already mentioned, should really be thought of as \"the reference UI implementation\" rather than \"the UI\". The intent is for people to be able to put together their own specialized, possibly game-specific user interfaces, and run them against the same back-end server.</p>

<p>That's the elephant in the room at the moment, by the way. The server is currently <a href=\"https://github.com/Inaimathi/deal#installation\">much, <i>much</i> harder to set up</a> than I'd like. The main reason is the separation of SSEs from the rest of the application. Since that involves <a href=\"https://github.com/wandenberg/nginx-push-stream-module\">a non-standard nginx module</a>, it means any potential user needs to compile their own <code>nginx</code>, then perform some non-trivial, and not-easily-automated setup before anything starts working. Ideally, that would all be handled by the application. Which means that, after the contest ends, I've got two options:</p>

<ul>
  <li>write a custom, high-performance asynchronous web server for Common Lisp</li>
  <li>re-write the server-side of the application in a language that already has such a server. Most likely candidates being <a href=\"http://hackage.haskell.org/package/warp\">Haskell</a> and <a href=\"http://hyber.org/\">Erlang</a></li>
</ul>

<p>Neither will be too much of a challenge.</p>

<p>If I go the server route, there's no reason whatsoever for me to put together a general-purpose web server. All it'll have to do is handle stream publishing, and serve static files faster than it would take to type them manually<a href=\"#foot-Sat-Sep-07-221236EDT-2013\" name=\"note-Sat-Sep-07-221236EDT-2013\">[5]</a>.</p>

<p>On the other hand, the complete back-end including <code>asd</code>s, config files and the entire <a href=\"https://github.com/Inaimathi/deal/blob/master/define-handler.lisp\"><code>define-handler</code> DSL</a> weighs in at 805 lines of code<a href=\"#foot-Sat-Sep-07-221240EDT-2013\" name=\"note-Sat-Sep-07-221240EDT-2013\">[6]</a>, so I can't see it being exceedingly difficult to port over. I <i>could</i> see either Haskells' assorted type-system bullshittery or Erlangs' <a href=\"/article?name=not-building-erlang.html\">built-in bureaucracy</a> adding another couple hundred lines, but 1000 total is still nothing to worry about in the grand scheme of things. Especially since it would end up letting potential users run the fucker without compiling anything themselves.</p>


<hr />
<h5>Footnotes</h5>
<p>1 - <a href=\"#note-Sat-Sep-07-221201EDT-2013\" name=\"foot-Sat-Sep-07-221201EDT-2013\">[back]</a> - That'll necessitate interacting with multiple cards in the future, but it's the better alternative, I think.</p>

<p>2 - <a href=\"#note-Sat-Sep-07-221208EDT-2013\" name=\"foot-Sat-Sep-07-221208EDT-2013\">[back]</a> - Of course, it is possible to just log this event to history to make everyone aware of the possibility, so it might work either way.</p>

<p>3 - <a href=\"#note-Sat-Sep-07-221214EDT-2013\" name=\"foot-Sat-Sep-07-221214EDT-2013\">[back]</a> - In particular, they'll be leaving out any <code>id</code> and <code>belongs-to</code> slots.</p>

<p>4 - <a href=\"#note-Sat-Sep-07-221225EDT-2013\" name=\"foot-Sat-Sep-07-221225EDT-2013\">[back]</a> - The <a href=\"http://www.gnu.org/licenses/agpl-3.0.html\">AGPL</a>, surprise, surprise.</p>

<p>5 - <a href=\"#note-Sat-Sep-07-221236EDT-2013\" name=\"foot-Sat-Sep-07-221236EDT-2013\">[back]</a> - The assumption being that it should be able to support small custom servers, and that if someone wants to serve several thousand people, they should use a reverse proxy and serve static files that way anyhow.</p>

<p>6 - <a href=\"#note-Sat-Sep-07-221240EDT-2013\" name=\"foot-Sat-Sep-07-221240EDT-2013\">[back]</a> - In case you were wondering, yes, I take the Yegge quote to heart. <blockquote>Large systems suck. This rule is 100% transitive. If you build one, <i>you</i> suck. <span class=\"sig\"><a href=\"http://steve-yegge.blogspot.ca/2007/06/rich-programmer-food.html\">SteveY</a></span></blockquote>.</p>
"))
((5202 3723 618378000) :INSERT (149 :POSTED 3587515200))
((5202 3723 618380000) :INSERT (149 :TAG :ALMOST-LITERATE-PROGRAMMING))
((5202 3723 618382000) :INSERT (149 :TAG :COMMON-LISP))
((5202 3723 618383000) :INSERT (149 :TAG :HTML))
((5202 3723 618385000) :INSERT (149 :TAG :HTML5))
((5202 3723 618387000) :INSERT (149 :TAG :JAVASCRIPT))
((5202 3723 618388000) :INSERT (149 :TAG :JQUERY))
((5202 3723 618390000) :INSERT (149 :TAG :PARENSCRIPT))
((5202 3723 619015000) :INSERT
 (150 :TITLE
  "Deal Journal - Interlude One -- A Treatise on the Design and Construction of Special-Purpose HTTP Servers using Common Lisp with a focus on Readability and Real-World Deployment"))
((5202 3723 619020000) :INSERT (150 :FILE "deal-interlude-1.html"))
((5202 3723 619022000) :INSERT (150 :EDITED 3610022331))
((5202 3723 619024000) :INSERT
 (150 :BODY
  "<p>Just a heads up: you won't see any of the below code checked into <a href=\"https://github.com/Inaimathi/deal\">the Deal repo</a> quite yet. And <a href=\"http://deal.inaimathi.ca/\">production</a> still uses the <a href=\"https://github.com/wandenberg/nginx-push-stream-module\">nginx PushStream module</a> for its asynchronous needs, and will continue to do so either until I finish enough of the other tasks to pull back enough time to re-structure its server, or until the contest ends and I no longer have to worry about making fast forward progress. Once I get around to it though, yes the real, actual Deal server is going to use this approach. It'll still use nginx as a reverse proxy to make sure static files are being served as fast as possible, but it won't rely on external SSE machinery longer than it has to. Not that the machinery's bad, mind you. It just complicates deployment more than I'd like.</p>

<h3>Why and When</h3>

<p>Lets just get this out of the way. Yes, there <a href=\"http://weitz.de/hunchentoot/\">already exist</a> some <a href=\"http://www.cliki.net/araneida\">pretty</a> good <a href=\"https://github.com/orthecreedence/wookie\">general-purpose</a> web servers written in Common Lisp. The reason you'd build your own is if you had a very particular purpose in mind. If you're out to host a vanilla web site, or a traditional stateless, HTML-emitting web application, you'd already have your bases covered. But imagine you were building an application that had a heavy focus on JSON-interaction and session-tracking, with built-in support for SSEs. Say for the sake of argument, <a href=\"https://github.com/Inaimathi/strifebarge\">something like</a> a <a href=\"https://github.com/Inaimathi/deal\">web-game</a>. You probably <i>could</i> make one of the existing things work for you. If you tried hard enough, and were willing to hack in support for one or two things<a href=\"#foot-Sun-Sep-15-225241EDT-2013\" name=\"note-Sun-Sep-15-225241EDT-2013\">[1]</a>. But as you can see by reading the <a href=\"https://github.com/Inaimathi/deal/blob/master/define-handler.lisp\"><code>define-handler</code> mini-language</a> I put together for Deal, using a general purpose server for such a specific task incurs complexity penalties that you could completely sidestep by building something minimal and specialized.</p>

<p>That's the point at which I'd start aiming for a goal like this. When using the existing, tested, reasonably-performing options is introducing conceptual and deployment complexity into my project. And, just in case you <a href=\"https://github.com/Inaimathi/deal#installation\">missed it</a>, it is.</p>

<h3>Gotchas</h3>

<p>HTTP is old. A child of <a href=\"http://www.w3.org/Protocols/HTTP/1.0/spec.html\">the mid-ninties</a>. There are people alive and programming professionally today who were born after it was created. Lisp is <a href=\"http://en.wikipedia.org/wiki/Common_Lisp\">a bit</a> older. And I can only assume no one working on its standardization knew how big the web would actually get, so they made a couple choices that must have made sense to them, but that will annoy the fuck out of you if you need to generate valid HTTP responses from a CL application.</p>

<p><code>#\\newline</code> is a \"platform independent line break\", you see. It expands to <code>#\\linefeed</code>, <code>#\\return</code> or <code>#\\return #\\linefeed</code> depending on where and how you write it. And the <code>format</code> directive <code>~%</code> outputs a <code>#\\newline</code>. This is relevant because HTTP specifies terminators for header lines and request bodies as <code>#\\return #\\linefeed</code>, which means that if you were expecting an expression like <code>(format stream <span style=\"color: #8b2252;\">\"~a ~a~%~{~a~%~}~%~%~a~%~%\"</span> protocol response-code headers body)</code> to output a valid response string, I have <a href=\"http://stackoverflow.com/a/445712/190887\">some news for you</a>.</p>

<p>It's not <a href=\"http://stackoverflow.com/questions/2619172/common-lisps-equivalent-of-r-inside-the-format-function\">particularly easy</a> to do this sort of formatting with the <code>format</code> function, ironically. There <i>aren't</i> directives like <code>~%</code> specified for <code>crlf</code>, or even for <code>#\\return</code> and <code>#\\linefeed</code> individually. About the best you can hope to do using the defaults is <code>(format t <span style=\"color: #8b2252;\">\"Hello world.~C~C\"</span> #\\return #\\linefeed)</code>, which is a shit sandwich if I ever saw one.</p>

<p>So. Step one, if you're going to be hacking on HTTP from lisp is to define a shortcut for that. It can either be something like</p>

<pre>(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">crlf</span> (<span style=\"color: #228b22;\">&amp;optional</span> (stream *standard-output*))
  (write-char #\\return stream)
  (write-char #\\linefeed stream))</pre>

<p>or it can be something like</p>

<pre>(<span style=\"color: #a020f0;\">defconstant</span> <span style=\"color: #a0522d;\">crlf</span> (list #\\return #\\newline))

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">cat</span> (<span style=\"color: #228b22;\">&amp;rest</span> things)
  (apply #'concatenate 'string things))</pre>

<p>I'm not committed yet, and may just go with defining all of the above. The <code>crlf</code> function looks like it would be more useful for an approach where I tried to do as close to single-traversal output as possible, while the <code>crlf</code> constant/<code>cat</code> function pair looks like they'd be more useful for testing purposes. Like I said, they don't really get in each others' way, so \"both\" is not, in fact, an unreasonable choice.</p>

<p>That out of the way, lets spend just a moment discussing...</p>

<h3>The Approach</h3>

<p>As far as I can tell, there are two legitimate approaches to building an async server in Common Lisp.</p>

<ul>
  <li>First, you could install <code>libevent-core-2.0</code> and <code>libevent-extra-2.0</code>, and make use of the <a href=\"https://github.com/orthecreedence/cl-async\"><code>cl-async</code></a> bindings. This way seems to save you having to buffer messages yourself, and it probably provides better performance at the expense of a very mildly complicated deployment.</li>
  <li>Second, you could go pure Lisp and build the whole thing out of <a href=\"http://common-lisp.net/project/usocket/\"><code>usocket</code>s</a>.</li>
</ul>

<p>I'm taking that second approach in this article, but you can use the same theory to construct a <code>cl-async</code>-based equivalent without too much trouble.</p>

<h3>Now Then</h3>

<p>We're building a toy example. The simplest async server that can possibly be constructed while remaining worthy of the name. We're going to have three applicable handlers:</p>

<ul>
  <li>one to serve up a basic front end, which will use JavaScript to connect to our subscription handler and get future messages from our server</li>
  <li>one to handle that subscription</li>
  <li>one to trigger a message send to all existing listeners</li>
</ul>

<p>nothing fancy like user-specified messages, or multiple channels, both of which will be fairly easy changes once you understand what the basic server structure is. To start with, we need to generate responses, which means tacking a body message onto some situation-dependent HTTP headers, and handling the above <code>crlf</code> problems elegantly. So, here are the basics:</p>

<pre>(ql:quickload (list <span style=\"color: #7a378b;\">:cl-ppcre</span> <span style=\"color: #7a378b;\">:usocket</span> <span style=\"color: #7a378b;\">:cl-who</span> <span style=\"color: #7a378b;\">:parenscript</span> <span style=\"color: #7a378b;\">:babel</span>))
(<span style=\"color: #a020f0;\">defpackage</span> <span style=\"color: #228b22;\">:ts-usocket</span> (<span style=\"color: #7a378b;\">:use</span> <span style=\"color: #7a378b;\">:cl</span> <span style=\"color: #7a378b;\">:cl-ppcre</span> <span style=\"color: #7a378b;\">:usocket</span> <span style=\"color: #7a378b;\">:cl-who</span> <span style=\"color: #7a378b;\">:parenscript</span> <span style=\"color: #7a378b;\">:babel</span>))
(<span style=\"color: #a020f0;\">in-package</span> <span style=\"color: #7a378b;\">:ts-usocket</span>)

(<span style=\"color: #a020f0;\">defvar</span> <span style=\"color: #a0522d;\">crlf</span> (list #\\return #\\linefeed))
(<span style=\"color: #a020f0;\">defparameter</span> <span style=\"color: #a0522d;\">day-names</span> '(<span style=\"color: #8b2252;\">\"Mon\"</span> <span style=\"color: #8b2252;\">\"Tue\"</span> <span style=\"color: #8b2252;\">\"Wed\"</span> <span style=\"color: #8b2252;\">\"Thu\"</span> <span style=\"color: #8b2252;\">\"Fri\"</span> <span style=\"color: #8b2252;\">\"Sat\"</span> <span style=\"color: #8b2252;\">\"Sun\"</span>))
(<span style=\"color: #a020f0;\">defparameter</span> <span style=\"color: #a0522d;\">month-names</span> '(<span style=\"color: #8b2252;\">\"Jan\"</span> <span style=\"color: #8b2252;\">\"Feb\"</span> <span style=\"color: #8b2252;\">\"Mar\"</span> <span style=\"color: #8b2252;\">\"Apr\"</span> <span style=\"color: #8b2252;\">\"May\"</span> <span style=\"color: #8b2252;\">\"Jun\"</span> <span style=\"color: #8b2252;\">\"Jul\"</span> <span style=\"color: #8b2252;\">\"Aug\"</span> <span style=\"color: #8b2252;\">\"Sep\"</span> <span style=\"color: #8b2252;\">\"Oct\"</span> <span style=\"color: #8b2252;\">\"Nov\"</span> <span style=\"color: #8b2252;\">\"Dec\"</span>))

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">http-date</span> ()
  (<span style=\"color: #a020f0;\">multiple-value-bind</span> (second minute hour date month year day-of-week dst-p tz)
      (get-decoded-time)
    (format nil <span style=\"color: #8b2252;\">\"~a, ~a ~a ~a ~a:~a:~a GMT~@d\"</span>
            (nth day-of-week day-names) date
            (nth month month-names) year hour minute second (- tz))))

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">cat</span> (<span style=\"color: #228b22;\">&amp;rest</span> seqs)
  (apply #'concatenate 'string seqs))

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">response</span> (<span style=\"color: #228b22;\">&amp;key</span> (response-code <span style=\"color: #8b2252;\">\"200 OK\"</span>) (content-type <span style=\"color: #8b2252;\">\"text/html\"</span>) keep-alive? body)
  (cat <span style=\"color: #8b2252;\">\"HTTP/1.1 \"</span> response-code crlf
       <span style=\"color: #8b2252;\">\"Content-Type: \"</span> content-type <span style=\"color: #8b2252;\">\"; charset=utf-8\"</span> crlf
       <span style=\"color: #8b2252;\">\"Cache-Control: no-cache, no-store, must-revalidate\"</span> crlf
       (<span style=\"color: #a020f0;\">when</span> keep-alive?
         (cat <span style=\"color: #8b2252;\">\"Connection: keep-alive\"</span> crlf
              <span style=\"color: #8b2252;\">\"Date: \"</span> (http-date) crlf
              <span style=\"color: #8b2252;\">\"Expires: Thu, 01 Jan 1970 00:00:01 GMT\"</span> crlf))
       (<span style=\"color: #a020f0;\">when</span> body 
         (cat <span style=\"color: #8b2252;\">\"Content-Length: \"</span> (write-to-string (length body)) crlf crlf 
              body crlf)) 
       crlf))</pre>

<p><code>crlf</code> and <code>cat</code> are pretty self-explanatory. The <code>response</code> function is going to take some basic options, populated with sane defaults, and use them to generate appropriate HTTP headers. The <code>http-date</code> function just formats the current date in a particular format. In a real implementation, I'd probably end up ditching this one. Its presence/absence doesn't seem to make much of a difference, and it seems like it might be resource intensive<a href=\"#foot-Sun-Sep-15-225317EDT-2013\" name=\"note-Sun-Sep-15-225317EDT-2013\">[5]</a>. Next up, lets set up our three responses:</p>

<pre>(<span style=\"color: #a020f0;\">defparameter</span> <span style=\"color: #a0522d;\">*channel*</span> nil)

(<span style=\"color: #a020f0;\">defparameter</span> <span style=\"color: #a0522d;\">interface</span>
  (response 
   <span style=\"color: #7a378b;\">:body</span> 
   (<span style=\"color: #a020f0;\">with-html-output-to-string</span> (str nil <span style=\"color: #7a378b;\">:prologue</span> t)
     (<span style=\"color: #7a378b;\">:html</span>
      (<span style=\"color: #7a378b;\">:head</span> (<span style=\"color: #7a378b;\">:title</span> <span style=\"color: #8b2252;\">\"Test page\"</span>))
      (<span style=\"color: #7a378b;\">:body</span>
       (<span style=\"color: #7a378b;\">:div</span> <span style=\"color: #7a378b;\">:id</span> <span style=\"color: #8b2252;\">\"console\"</span>)
       (<span style=\"color: #7a378b;\">:script</span>
        <span style=\"color: #7a378b;\">:type</span> <span style=\"color: #8b2252;\">\"text/javascript\"</span>
        (str (ps (<span style=\"color: #a020f0;\">defvar</span> <span style=\"color: #a0522d;\">src</span> (new (-event-source <span style=\"color: #8b2252;\">\"/sub\"</span>)))
                 (<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">p</span> (msg)
                   (<span style=\"color: #a020f0;\">let</span> ((elem (chain document (get-element-by-id <span style=\"color: #8b2252;\">\"console\"</span>))))
                     (setf (@ elem inner-h-t-m-l)
                           (+ (@ elem inner-h-t-m-l) <span style=\"color: #8b2252;\">\"&lt;p&gt;\"</span> msg <span style=\"color: #8b2252;\">\"&lt;/p&gt;\"</span>))))
                 (setf (@ src onerror)
                       (<span style=\"color: #a020f0;\">lambda</span> (e) 
                         (p <span style=\"color: #8b2252;\">\"ERROR OCCURRED...\"</span>)
                         (p (chain -j-s-o-n (stringify e))))
                       (@ src onopen)
                       (<span style=\"color: #a020f0;\">lambda</span> (e) (p <span style=\"color: #8b2252;\">\"STREAM OPENED...\"</span>))
                       (@ src onmessage)
                       (<span style=\"color: #a020f0;\">lambda</span> (e) 
                         (p <span style=\"color: #8b2252;\">\"GOT MESSAGE!\"</span>)
                         (p (+ <span style=\"color: #8b2252;\">\"data: \"</span> (@ e data)))))))))))))

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">subscribe!</span> (sock)
  (<span style=\"color: #a020f0;\">let</span> ((s (socket-stream sock)))
    (write-string (response <span style=\"color: #7a378b;\">:keep-alive?</span> t <span style=\"color: #7a378b;\">:content-type</span> <span style=\"color: #8b2252;\">\"text/event-stream\"</span>) s)
    (force-output s)
    (push sock *channel*)))

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">publish!</span> (msg)
  (<span style=\"color: #a020f0;\">loop</span> for sock in *channel*
     do (<span style=\"color: #a020f0;\">handler-case</span>
            (<span style=\"color: #a020f0;\">ignore-errors</span>
              (<span style=\"color: #a020f0;\">let</span> ((s (socket-stream sock)))
                (write-string (cat <span style=\"color: #8b2252;\">\"data: \"</span> msg crlf crlf) s)
                (force-output s)))
          (<span style=\"color: #ff0000; font-weight: bold;\">error</span> (e)
            (format t <span style=\"color: #8b2252;\">\"~s\"</span> e)
            (setf *channel* (remove sock *channel*))))))</pre>

<p>The <code>interface</code> is just a flat file. We'll be sending out exactly the same one to anyone that asks for it, and it would be fairly resource-intensive to generate that each time, so I just cached the result of a <code>response</code> call. What you see in the <code>ps</code> there is a call to create a new <code>EventStream</code>, and calls to attach <code>onopen</code>, <code>onerror</code> and <code>onmessage</code> listeners to it. When the client trips any of those events, it'll add some relevant information to the <code>innerHTML</code> of a <code>div</code> with id <code>console</code><a href=\"#foot-Sun-Sep-15-225327EDT-2013\" name=\"note-Sun-Sep-15-225327EDT-2013\">[6]</a>. The <code>subscribe!</code> function sends headers appropriate for starting an SSE stream, calls <code>force-output</code> then pushes the relevant socket into <code>*channel*</code>. Finally, <code>publish!</code> takes a message and sends it out to each member of <code>*channel*</code>. If the write errors, the relevant socket is removed from <code>*channel*</code>.</p>

<p>Notice that we're doing literally everything so far in a very naive way. The <code>http-date</code> mechanics could be made much more efficient, or removed entirely with little negative effect, we're calling <code>concatenate 'string</code> like it's going out of style, and we're calling <code>remove</code> on each and every socket removal. It's just conceptually easier this way. Once we get to a reasonably well-tested server, we'll go back and make sure that we traverse messages as little as possible, writing directly where we can, and make sure to collect running sockets for re-assignment rather than incurring a traversal per removal. Maybe. If the end result doesn't profile well enough.</p>

<p>Don't worry about it for now. Next up is the actual handler.</p>

<pre>(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">handle-request</span> (socket request-uri)
  (<span style=\"color: #a020f0;\">let</span> ((s (socket-stream socket)))
    (<span style=\"color: #a020f0;\">cond</span> ((string= <span style=\"color: #8b2252;\">\"/sub\"</span> request-uri)
           (subscribe! socket))
          ((string= <span style=\"color: #8b2252;\">\"/pub\"</span> request-uri)
           (publish! (format nil <span style=\"color: #8b2252;\">\"Got a message! ~a\"</span> (gensym)))
           (write-string (response 
                          <span style=\"color: #7a378b;\">:content-type</span> <span style=\"color: #8b2252;\">\"text/plain\"</span>
                          <span style=\"color: #7a378b;\">:body</span> <span style=\"color: #8b2252;\">\"Published!\"</span>) s)
           (socket-close socket))
          (t
           (write-string interface s)
           (socket-close socket)))))</pre>

<p>That'll do it. If we get a request for <code>/sub</code>, we just pass the socket off to the <code>subscribe!</code> function, and pointedly <i>don't</i> close it. If we get one for <code>pub</code>, we <code>publish!</code> a unique message, and send a small, token response to the current requester, then close the socket. Note that if we're closing the connection right away, we don't need to worry about <code>force-output</code> calls, since that automatically gets done on cleanup. Lastly, if we get a request for any other resource, we send out the <code>interface</code> we defined earlier.</p>

<p>We're almost done. We need exactly one more component; a piece that'll monitor a particular port, buffer incoming HTTP requests and call the handler when it gets a completed one.</p>

<pre>(<span style=\"color: #a020f0;\">defvar</span> <span style=\"color: #a0522d;\">*socket-handle*</span> nil)

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">stop</span> ()
  (<span style=\"color: #a020f0;\">when</span> *socket-handle*
    (<span style=\"color: #a020f0;\">loop</span> while (socket-close *socket-handle*))
    (setf *socket-handle* nil
          *channel* nil)))

(<span style=\"color: #a020f0;\">defclass</span> <span style=\"color: #228b22;\">buffer</span> ()
  ((contents <span style=\"color: #7a378b;\">:accessor</span> contents <span style=\"color: #7a378b;\">:initform</span> nil)
   (started <span style=\"color: #7a378b;\">:reader</span> started <span style=\"color: #7a378b;\">:initform</span> (get-universal-time))
   (state <span style=\"color: #7a378b;\">:accessor</span> state <span style=\"color: #7a378b;\">:initform</span> <span style=\"color: #7a378b;\">:empty</span>)))

(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">buffered-read!</span> (stream (buffer buffer))
  (<span style=\"color: #a020f0;\">loop</span> for char = (read-char-no-hang stream nil <span style=\"color: #7a378b;\">:eof</span>)
     until (or (null char) (eql <span style=\"color: #7a378b;\">:eof</span> char))
     do (push char (contents buffer))))

(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">starts-with?</span> ((prefix list) (list list) <span style=\"color: #228b22;\">&amp;optional</span> (test #'eql))
  (<span style=\"color: #a020f0;\">loop</span> for (p . rest-p) on prefix for (l . rest-l) on list
     when (or (and rest-p (not rest-l)) (not (funcall test p l))) 
     do (<span style=\"color: #a020f0;\">return</span> nil)
     finally (<span style=\"color: #a020f0;\">return</span> t)))

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">start</span> (port <span style=\"color: #228b22;\">&amp;optional</span> (log-stream *standard-output*))
  (stop)  
  (setf *socket-handle* (socket-listen <span style=\"color: #8b2252;\">\"127.0.0.1\"</span> port <span style=\"color: #7a378b;\">:reuse-address</span> t))
  (<span style=\"color: #a020f0;\">let</span> ((conns (list *socket-handle*))
        (buffers (make-hash-table)))
    (<span style=\"color: #a020f0;\">loop</span> (<span style=\"color: #a020f0;\">loop</span> for ready in (wait-for-input conns <span style=\"color: #7a378b;\">:ready-only</span> t)
                do (<span style=\"color: #a020f0;\">if</span> (typep ready 'stream-server-usocket)
                       (push (socket-accept ready) conns)
                     (<span style=\"color: #a020f0;\">let</span> ((buf (gethash ready buffers (make-instance 'buffer))))
                       (buffered-read! (socket-stream ready) buf)
                       (<span style=\"color: #a020f0;\">when</span> (starts-with? (list #\\newline #\\return #\\newline #\\return)
                                           (contents buf))
                         (format log-stream <span style=\"color: #8b2252;\">\"COMPLETE ~s~%\"</span>
                                 (coerce (reverse (contents buf)) 'string))
                         (setf conns (remove ready conns))
                         (remhash ready buffers)
                         (<span style=\"color: #a020f0;\">let</span> ((parsed (parse buf)))
                           (format log-stream <span style=\"color: #8b2252;\">\"PARSED: ~s~%\"</span> parsed)
                           (handle-request ready (parse buf))))))))))</pre>

<p>Ok, I <i>may</i> have gone a little overboard in defining <code>starts-with?</code> myself, since there's a similar one already available as part of the <a href=\"http://common-lisp.net/project/alexandria/\">library called <code>alexandria</code></a>, but you get the idea. <code>stop</code> stops our listener explicitly because <code>usocket</code> <i>doesn't</i> free up the socket it's listening on if it errors out, and it also clears out <code>*channel*</code> for the next go.</p>

<p>The <code>buffer</code> class and accompanying <code>buffered-read!</code> procedure are going to make the job of collecting possibly chunked requests easier, and <code>starts-with?</code> does exactly what it says on the tin. It walks a <code>list</code> and a <code>prefix</code>, comparing for equality element-wise by a user-specified predicate, and it keeps going until</p>

<ul>
  <li>it finds a predicate failure (in which case, it returns <code>nil</code>)</li>
  <li>the list runs out before the prefix (in which case it returns <code>nil</code> again)</li>
  <li>the prefix runs out (in which case it returns <code>t</code>)</li>
</ul>

<p>The last piece is the meat. The <code>start</code> function is going to take a <code>port</code> and a <code>log-stream</code>, and listen on that <code>port</code> while dumping logging data to <code>log-stream</code>. Lets take this one slow.</p>

<pre>...
  (setf *socket-handle* (socket-listen <span style=\"color: #8b2252;\">\"127.0.0.1\"</span> port <span style=\"color: #7a378b;\">:reuse-address</span> t))
...</pre>

<p>That sets up the listener on <code>localhost</code> listening on the specified <code>port</code> and ensures <code>*socket-handle*</code> is a reference to that listener.</p>

<pre>...
  (<span style=\"color: #a020f0;\">let</span> ((conns (list *socket-handle*))
        (buffers (make-hash-table)))
...</pre>

<p>That initializes <code>conns</code> to be a list whose only element is the listener we just set up. It also sets up a blank <code>hash-table</code> called <code>buffers</code>.</p>

<pre>...
    (<span style=\"color: #a020f0;\">loop</span> (<span style=\"color: #a020f0;\">loop</span> for ready in (wait-for-input conns <span style=\"color: #7a378b;\">:ready-only</span> t)
...</pre>

<p>We're setting up an infinite loop here. And on each iteration, we're going to wait for some of the sockets in <code>conns</code> to need attention, at which point we will iterate through all <code>ready</code> sockets to <i>give</i> it some attention.</p>

<pre>...
                do (<span style=\"color: #a020f0;\">if</span> (typep ready 'stream-server-usocket)
                       (push (socket-accept ready) conns)
...</pre>

<p>If the ready socket is a <code>stream-server</code>, that means it has a new listener wanting to connect to our server. We push the newcomer onto <code>conns</code>; its request will be handled when it becomes ready.</p>

<pre>...
                     (<span style=\"color: #a020f0;\">let</span> ((buf (gethash ready buffers (make-instance 'buffer))))
                       (buffered-read! (socket-stream ready) buf)
                       (<span style=\"color: #a020f0;\">when</span> (starts-with? (list #\\newline #\\return #\\newline #\\return)
                                           (contents buf))
                         (format log-stream <span style=\"color: #8b2252;\">\"COMPLETE ~s~%\"</span>
                                 (coerce (reverse (contents buf)) 'string))
                         (setf conns (remove ready conns))
                         (remhash ready buffers)
                         (<span style=\"color: #a020f0;\">let</span> ((parsed (parse buf)))
                           (format log-stream <span style=\"color: #8b2252;\">\"PARSED: ~s~%\"</span> parsed)
                           (handle-request ready (parse buf))))))))))</pre>

<p>If it's <i>not</i> a <code>stream-server</code>, that means it's a regular <code>usocket</code>, which means that it has some data ready for us to read. If we wanted to be <i>extremely</i> naive here, we'd just call <code>read-line</code> repeatedly, but just because <i>some</i> data is ready doesn't mean that it represents a complete HTTP request. If the client on the other end is particularly slow, or has a particularly large request to make, it might arrive in chunks. Lets go through that step-by-step.</p>

<pre>...
                     (<span style=\"color: #a020f0;\">let</span> ((buf (gethash ready buffers (make-instance 'buffer))))
                       (buffered-read! (socket-stream ready) buf)
                       (<span style=\"color: #a020f0;\">when</span> (starts-with? (list #\\newline #\\return #\\newline #\\return)
                                           (contents buf))
...</pre>

<p>We're either getting this particular connections' buffer (if one exists), or assigning it a fresh buffer. We're then calling <code>buffered-read!</code> which will result in the <code>contents</code> of that buffer getting filled with all data available for reading from the ready socket. If that data ends with a reversed <code>crlf crlf</code>, we should do something about it. As a Note to Self here, if it doesn't we should make sure that the buffered data doesn't exceed some pre-determined threshold and that this particular request hasn't been around for too long. <code>buffer</code> already has a <code>started</code> slot, we'll just need to check it and evict ones that get too old.</p>

<pre>...
                         (format log-stream <span style=\"color: #8b2252;\">\"COMPLETE ~s~%\"</span>
                                 (coerce (reverse (contents buf)) 'string))
                         (setf conns (remove ready conns))
                         (remhash ready buffers)
                         (<span style=\"color: #a020f0;\">let</span> ((parsed (parse buf)))
                           (format log-stream <span style=\"color: #8b2252;\">\"PARSED: ~s~%\"</span> parsed)
                           (handle-request ready (parse buf))))))))))</pre>

<p>If we have a complete HTTP request, we emit some logging data, remove that socket from <code>conns</code> and its buffer from <code>buffers</code>, since we won't be reading from it again one way or the other, then call <code>handle-request</code>, passing along the socket and the result of calling <code>parse</code> on the buffer. <i>Eventually</i>, <code>parse</code> should provide a tree of relevant data such as <code>POST</code>/<code>GET</code> requests and all incoming headers, but for right now, we just care about one property of the incoming request.</p>

<pre>(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">parse</span> ((buf buffer))
  (<span style=\"color: #a020f0;\">let</span> ((lines (split <span style=\"color: #8b2252;\">\"\\\\r?\\\\n\"</span> (coerce (reverse (contents buf)) 'string))))
    (second (split <span style=\"color: #8b2252;\">\" \"</span> (first lines)))))</pre>

<p>That'll return the request <code>uri</code> of a well-formed, incoming HTTP request. <code>handle</code> will then run it through that logic we set up earlier to decide what is to be done.</p>

<p>And that's that. Assuming I've actually got the SSE points ironed out, and we'll see what the mailing lists say on that score, we have a very minimal asynchronous HTTP server built in just under 150 lines of un-obfuscated Common Lisp.</p>

<pre>(ql:quickload (list <span style=\"color: #7a378b;\">:cl-ppcre</span> <span style=\"color: #7a378b;\">:usocket</span> <span style=\"color: #7a378b;\">:cl-who</span> <span style=\"color: #7a378b;\">:parenscript</span> <span style=\"color: #7a378b;\">:babel</span>))
(<span style=\"color: #a020f0;\">defpackage</span> <span style=\"color: #228b22;\">:ts-usocket</span> (<span style=\"color: #7a378b;\">:use</span> <span style=\"color: #7a378b;\">:cl</span> <span style=\"color: #7a378b;\">:cl-ppcre</span> <span style=\"color: #7a378b;\">:usocket</span> <span style=\"color: #7a378b;\">:cl-who</span> <span style=\"color: #7a378b;\">:parenscript</span> <span style=\"color: #7a378b;\">:babel</span>))
(<span style=\"color: #a020f0;\">in-package</span> <span style=\"color: #7a378b;\">:ts-usocket</span>)

(<span style=\"color: #a020f0;\">defvar</span> <span style=\"color: #a0522d;\">*socket-handle*</span> nil)
(<span style=\"color: #a020f0;\">defparameter</span> <span style=\"color: #a0522d;\">*channel*</span> nil)
(<span style=\"color: #a020f0;\">defvar</span> <span style=\"color: #a0522d;\">crlf</span> (list #\\return #\\linefeed))

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">stop</span> ()
  (<span style=\"color: #a020f0;\">when</span> *socket-handle*
    (<span style=\"color: #a020f0;\">loop</span> while (socket-close *socket-handle*))
    (setf *socket-handle* nil
          *channel* nil)))

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">start</span> (port <span style=\"color: #228b22;\">&amp;optional</span> (log-stream *standard-output*))
  (stop)  
  (setf *socket-handle* (socket-listen <span style=\"color: #8b2252;\">\"127.0.0.1\"</span> port <span style=\"color: #7a378b;\">:reuse-address</span> t))
  (<span style=\"color: #a020f0;\">let</span> ((conns (list *socket-handle*))
        (buffers (make-hash-table)))
    (<span style=\"color: #a020f0;\">loop</span> (<span style=\"color: #a020f0;\">loop</span> for ready in (wait-for-input conns <span style=\"color: #7a378b;\">:ready-only</span> t)
                do (<span style=\"color: #a020f0;\">if</span> (typep ready 'stream-server-usocket)
                       (push (socket-accept ready) conns)
                     (<span style=\"color: #a020f0;\">let</span> ((buf (gethash ready buffers (make-instance 'buffer))))
                       (buffered-read! (socket-stream ready) buf)
                       (<span style=\"color: #a020f0;\">when</span> (starts-with? (list #\\newline #\\return #\\newline #\\return)
                                           (contents buf))
                         (format log-stream <span style=\"color: #8b2252;\">\"COMPLETE ~s~%\"</span>
                                 (coerce (reverse (contents buf)) 'string))
                         (setf conns (remove ready conns))
                         (remhash ready buffers)
                         (<span style=\"color: #a020f0;\">let</span> ((parsed (parse buf)))
                           (format log-stream <span style=\"color: #8b2252;\">\"PARSED: ~s~%\"</span> parsed)
                           (handle-request ready (parse buf))))))))))

(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">handle-request</span> (socket request-uri)
  (<span style=\"color: #a020f0;\">let</span> ((s (socket-stream socket)))
    (<span style=\"color: #a020f0;\">cond</span> ((string= <span style=\"color: #8b2252;\">\"/sub\"</span> request-uri)
           (subscribe! socket))
          ((string= <span style=\"color: #8b2252;\">\"/pub\"</span> request-uri)
           (publish! (format nil <span style=\"color: #8b2252;\">\"Got a message! ~a\"</span> (gensym)))
           (write-string (response 
                          <span style=\"color: #7a378b;\">:content-type</span> <span style=\"color: #8b2252;\">\"text/plain\"</span>
                          <span style=\"color: #7a378b;\">:body</span> <span style=\"color: #8b2252;\">\"Published!\"</span>) s)
           (socket-close socket))
          (t
           (write-string interface s)
           (socket-close socket)))))

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">publish!</span> (msg)
  (<span style=\"color: #a020f0;\">loop</span> for sock in *channel*
     do (<span style=\"color: #a020f0;\">handler-case</span>
            (<span style=\"color: #a020f0;\">ignore-errors</span>
              (<span style=\"color: #a020f0;\">let</span> ((s (socket-stream sock)))
                (write-string (cat <span style=\"color: #8b2252;\">\"data: \"</span> msg crlf crlf) s)
                (force-output s)))
          (<span style=\"color: #ff0000; font-weight: bold;\">error</span> (e)
            (format t <span style=\"color: #8b2252;\">\"~s\"</span> e)
            (setf *channel* (remove sock *channel*))))))

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">subscribe!</span> (sock)
  (<span style=\"color: #a020f0;\">let</span> ((s (socket-stream sock)))
    (write-string (response <span style=\"color: #7a378b;\">:keep-alive?</span> t <span style=\"color: #7a378b;\">:content-type</span> <span style=\"color: #8b2252;\">\"text/event-stream\"</span>) s)
    (force-output s)
    (push sock *channel*)))

(<span style=\"color: #a020f0;\">defclass</span> <span style=\"color: #228b22;\">buffer</span> ()
  ((contents <span style=\"color: #7a378b;\">:accessor</span> contents <span style=\"color: #7a378b;\">:initform</span> nil)
   (started <span style=\"color: #7a378b;\">:reader</span> started <span style=\"color: #7a378b;\">:initform</span> (get-universal-time))
   (state <span style=\"color: #7a378b;\">:accessor</span> state <span style=\"color: #7a378b;\">:initform</span> <span style=\"color: #7a378b;\">:empty</span>)))

(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">buffered-read!</span> (stream (buffer buffer))
  (<span style=\"color: #a020f0;\">loop</span> for char = (read-char-no-hang stream nil <span style=\"color: #7a378b;\">:eof</span>)
     until (or (null char) (eql <span style=\"color: #7a378b;\">:eof</span> char))
     do (push char (contents buffer))))

(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">parse</span> ((buf buffer))
  (<span style=\"color: #a020f0;\">let</span> ((lines (split <span style=\"color: #8b2252;\">\"\\\\r?\\\\n\"</span> (coerce (reverse (contents buf)) 'string))))
    (second (split <span style=\"color: #8b2252;\">\" \"</span> (first lines)))))

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">response</span> (<span style=\"color: #228b22;\">&amp;key</span> (response-code <span style=\"color: #8b2252;\">\"200 OK\"</span>) (content-type <span style=\"color: #8b2252;\">\"text/html\"</span>) keep-alive? body)
  (cat <span style=\"color: #8b2252;\">\"HTTP/1.1 \"</span> response-code crlf
       <span style=\"color: #8b2252;\">\"Content-Type: \"</span> content-type <span style=\"color: #8b2252;\">\"; charset=utf-8\"</span> crlf
       <span style=\"color: #8b2252;\">\"Cache-Control: no-cache, no-store, must-revalidate\"</span> crlf
       (<span style=\"color: #a020f0;\">when</span> keep-alive?
         (cat <span style=\"color: #8b2252;\">\"Connection: keep-alive\"</span> crlf
              <span style=\"color: #8b2252;\">\"Date: \"</span> (http-date) crlf
              <span style=\"color: #8b2252;\">\"Expires: Thu, 01 Jan 1970 00:00:01 GMT\"</span> crlf))
       (<span style=\"color: #a020f0;\">when</span> body 
         (cat <span style=\"color: #8b2252;\">\"Content-Length: \"</span> (write-to-string (length body)) crlf crlf 
              body crlf)) 
       crlf))

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">cat</span> (<span style=\"color: #228b22;\">&amp;rest</span> seqs)
  (apply #'concatenate 'string seqs))

(<span style=\"color: #a020f0;\">defparameter</span> <span style=\"color: #a0522d;\">interface</span>
  (response 
   <span style=\"color: #7a378b;\">:body</span> 
   (<span style=\"color: #a020f0;\">with-html-output-to-string</span> (str nil <span style=\"color: #7a378b;\">:prologue</span> t)
     (<span style=\"color: #7a378b;\">:html</span>
      (<span style=\"color: #7a378b;\">:head</span> (<span style=\"color: #7a378b;\">:title</span> <span style=\"color: #8b2252;\">\"Test page\"</span>))
      (<span style=\"color: #7a378b;\">:body</span>
       (<span style=\"color: #7a378b;\">:div</span> <span style=\"color: #7a378b;\">:id</span> <span style=\"color: #8b2252;\">\"console\"</span>)
       (<span style=\"color: #7a378b;\">:script</span>
        <span style=\"color: #7a378b;\">:type</span> <span style=\"color: #8b2252;\">\"text/javascript\"</span>
        (str (ps (<span style=\"color: #a020f0;\">defvar</span> <span style=\"color: #a0522d;\">src</span> (new (-event-source <span style=\"color: #8b2252;\">\"/sub\"</span>)))
                 (<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">p</span> (msg)
                   (<span style=\"color: #a020f0;\">let</span> ((elem (chain document (get-element-by-id <span style=\"color: #8b2252;\">\"console\"</span>))))
                     (setf (@ elem inner-h-t-m-l)
                           (+ (@ elem inner-h-t-m-l) <span style=\"color: #8b2252;\">\"&lt;p&gt;\"</span> msg <span style=\"color: #8b2252;\">\"&lt;/p&gt;\"</span>))))
                 (setf (@ src onerror)
                       (<span style=\"color: #a020f0;\">lambda</span> (e) 
                         (p <span style=\"color: #8b2252;\">\"ERROR OCCURRED...\"</span>)
                         (p (chain -j-s-o-n (stringify e))))
                       (@ src onopen)
                       (<span style=\"color: #a020f0;\">lambda</span> (e) (p <span style=\"color: #8b2252;\">\"STREAM OPENED...\"</span>))
                       (@ src onmessage)
                       (<span style=\"color: #a020f0;\">lambda</span> (e) 
                         (p <span style=\"color: #8b2252;\">\"GOT MESSAGE!\"</span>)
                         (p (+ <span style=\"color: #8b2252;\">\"data: \"</span> (@ e data)))))))))))))

(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">starts-with?</span> ((prefix list) (list list) <span style=\"color: #228b22;\">&amp;optional</span> (test #'eql))
  (<span style=\"color: #a020f0;\">loop</span> for (p . rest-p) on prefix for (l . rest-l) on list
     when (or (and rest-p (not rest-l)) (not (funcall test p l))) 
     do (<span style=\"color: #a020f0;\">return</span> nil)
     finally (<span style=\"color: #a020f0;\">return</span> t)))

(<span style=\"color: #a020f0;\">defparameter</span> <span style=\"color: #a0522d;\">day-names</span> '(<span style=\"color: #8b2252;\">\"Mon\"</span> <span style=\"color: #8b2252;\">\"Tue\"</span> <span style=\"color: #8b2252;\">\"Wed\"</span> <span style=\"color: #8b2252;\">\"Thu\"</span> <span style=\"color: #8b2252;\">\"Fri\"</span> <span style=\"color: #8b2252;\">\"Sat\"</span> <span style=\"color: #8b2252;\">\"Sun\"</span>))
(<span style=\"color: #a020f0;\">defparameter</span> <span style=\"color: #a0522d;\">month-names</span> '(<span style=\"color: #8b2252;\">\"Jan\"</span> <span style=\"color: #8b2252;\">\"Feb\"</span> <span style=\"color: #8b2252;\">\"Mar\"</span> <span style=\"color: #8b2252;\">\"Apr\"</span> <span style=\"color: #8b2252;\">\"May\"</span> <span style=\"color: #8b2252;\">\"Jun\"</span> <span style=\"color: #8b2252;\">\"Jul\"</span> <span style=\"color: #8b2252;\">\"Aug\"</span> <span style=\"color: #8b2252;\">\"Sep\"</span> <span style=\"color: #8b2252;\">\"Oct\"</span> <span style=\"color: #8b2252;\">\"Nov\"</span> <span style=\"color: #8b2252;\">\"Dec\"</span>))

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">http-date</span> ()
  (<span style=\"color: #a020f0;\">multiple-value-bind</span> (second minute hour date month year day-of-week dst-p tz)
      (get-decoded-time)
    (format nil <span style=\"color: #8b2252;\">\"~a, ~a ~a ~a ~a:~a:~a GMT~@d\"</span>
            (nth day-of-week day-names) date
            (nth month month-names) year hour minute second (- tz))))</pre>

<p>Loading that into your <code>repl</code>, then evaluating</p>

<pre>(<span style=\"color: #a020f0;\">in-package</span> <span style=\"color: #7a378b;\">:ts-usocket</span>)
(start 3000)</pre>

<p>should start that minimal server on your local port <code>3000</code>. At which point you can go to <code>http://localhost:3000</code> in one browser, and hit <code>http://localhost:3000/pub</code> twice in another to see output like</p>

<pre>STREAM OPENED...

GOT MESSAGE!

data: Got a message! G1042

GOT MESSAGE!

data: Got a message! G1043</pre>

<p>If you keep hammering <code>F5</code> on <code>localhost:3000/pub</code>, you'll see new messages streaming into the listening window. Once I've gotten this tested, and worked out the kinks, I'll be able to use it to radically simplify the deployment process for <a href=\"https://github.com/Inaimathi/deal\">the Deal project</a>.</p>

<p>What you don't see above is an implementation of sessions, or very many performance optimizations, but there's a reason I titled this \"Interlude Part 1\".</p>


<hr />
<h5>Footnotes</h5>
<p>1 - <a href=\"#note-Sun-Sep-15-225241EDT-2013\" name=\"foot-Sun-Sep-15-225241EDT-2013\">[back]</a> - Of the three I linked, Araneida has been superseded by Hunchentoot, Hunchentoot works on a thread-per-request model so you'd need to add SSE/websockets/what-have-you support, and Wookie doesn't have sessions (or very good performance, apparently) out of the box.</p>
<p>2 - <a href=\"#note-Sun-Sep-15-225259EDT-2013\" name=\"foot-Sun-Sep-15-225259EDT-2013\">[back]</a> - And currently have <a href=\"https://groups.google.com/a/chromium.org/forum/#!topic/chromium-dev/qcDiw-QP4RE\">questions</a> lodged with the <a href=\"https://groups.google.com/a/chromium.org/forum/#!forum/chromium-dev\">Chromium devs</a>, as well <a href=\"http://stackoverflow.com/a/18819542/190887\">as SO</a>. We'll see what comes of it, I suppose.</p>

<p>3 - <a href=\"#note-Sun-Sep-15-225303EDT-2013\" name=\"foot-Sun-Sep-15-225303EDT-2013\">[back]</a> - Which explains why it errors if you omit it.</p>
<p>4 - <a href=\"#note-Sun-Sep-15-225306EDT-2013\" name=\"foot-Sun-Sep-15-225306EDT-2013\">[back]</a> - Which paranthetically means that you want a reasonably big initial buffer allocated so it doesn't re-request the stream on every other event.</p>

<p>5 - <a href=\"#note-Sun-Sep-15-225317EDT-2013\" name=\"foot-Sun-Sep-15-225317EDT-2013\">[back]</a> - To be fair, I probably <i>could</i> put together a system that just generates one per second, and sends that pre-serialized version to each endpoint. That would, at least, save me the effort of having to generate it per-user, but it would complicate things.</p>

<p>6 - <a href=\"#note-Sun-Sep-15-225327EDT-2013\" name=\"foot-Sun-Sep-15-225327EDT-2013\">[back]</a> - In case you're wondering, the main reason I didn't just <code>console.log</code> is that I happen to use <a href=\"http://conkeror.org/\">a browser that doesn't have very good console facilities</a>. Or leastwise, it didn't when I last installed it.</p>
"))
((5202 3723 619338000) :INSERT (150 :POSTED 3588206400))
((5202 3723 619340000) :INSERT (150 :TAG :ALMOST-LITERATE-PROGRAMMING))
((5202 3723 619341000) :INSERT (150 :TAG :CLIENT-SIDE))
((5202 3723 619345000) :INSERT (150 :TAG :COMMON-LISP))
((5202 3723 619347000) :INSERT (150 :TAG :HTML5))
((5202 3723 619349000) :INSERT (150 :TAG :JAVASCRIPT))
((5202 3723 619351000) :INSERT (150 :TAG :PARENSCRIPT))
((5202 3723 620211000) :INSERT (151 :TITLE "Deal Journal - Part Three"))
((5202 3723 620216000) :INSERT (151 :FILE "deal-part-3.html"))
((5202 3723 620218000) :INSERT (151 :EDITED 3610299328))
((5202 3723 620220000) :INSERT
 (151 :BODY
  "<p>Part three of my journal for the <a href=\"https://github.com/Inaimathi/deal\">Deal Project</a>. Part <a href=\"/article?name=deal.html\">one</a> and <a href=\"/article?name=deal-part-2.html\">two</a> are already up, of course.</p>

<h2>T minus 22 days</h2>

<p>There's a couple of small patterns that I've come across. One:</p>

<pre>($ [foo]
   (button (create <span style=\"color: #7a378b;\">:icons</span> (create <span style=\"color: #7a378b;\">:primary</span> <span style=\"color: #8b2252;\">\"ui-icon-[icon-name]\"</span>) <span style=\"color: #7a378b;\">:text</span> nil))
   (click (<span style=\"color: #a020f0;\">lambda</span> (event) ($ [parent-or-child-of-foo] ([do-something])))))</pre>

<p>and two</p>

<pre>($ foo
   (on [event] [child]
       (<span style=\"color: #a020f0;\">lambda</span> (event)
         ($ [parent-or-child-of-foo] ([do-something])))))</pre>

<p>Or, if you're more comfortable with JavaScript, I guess,</p>

<pre>$(<span style=\"color: #8b2252;\">\"foo\"</span>)
    .button({<span style=\"color: #8b2252;\">\"icons\"</span>: { <span style=\"color: #8b2252;\">\"primary\"</span> : <span style=\"color: #8b2252;\">\"ui-icon-[icon-name]\"</span>}, <span style=\"color: #8b2252;\">\"text\"</span>: <span style=\"color: #008b8b;\">false</span>})
    .click(<span style=\"color: #a020f0;\">function</span> (<span style=\"color: #a0522d;\">event</span>) {
        $(<span style=\"color: #8b2252;\">\"parent-or-child-of-foo\"</span>).<span style=\"color: #a020f0;\">do</span>-something();
    })

$(<span style=\"color: #8b2252;\">\"foo\"</span>)
    .on(<span style=\"color: #8b2252;\">\"event\"</span>, <span style=\"color: #8b2252;\">\"child\"</span>,
        <span style=\"color: #a020f0;\">function</span> (<span style=\"color: #a0522d;\">event</span>) {
            $(<span style=\"color: #8b2252;\">\"parent-or-child-of-foo\"</span>).<span style=\"color: #a020f0;\">do</span>-something();
        })</pre>

<p>Now, you could argue about whether the JS-style hash-literal syntax is more elegant, or about how I might save a word or two somewhere if I was writing jQuery directly, but neither the JS nor the Lisp version of these are particularly fun to type. So.</p>

<pre>(defpsmacro $button (selector (icon-name <span style=\"color: #228b22;\">&amp;key</span> text? (class <span style=\"color: #8b2252;\">\"control-button\"</span>)) <span style=\"color: #228b22;\">&amp;body</span> on-click)
  `($ ,selector
      (button (create <span style=\"color: #7a378b;\">:icons</span> (create <span style=\"color: #7a378b;\">:primary</span> ,(format nil <span style=\"color: #8b2252;\">\"ui-icon-~(~a~)\"</span> icon-name)) <span style=\"color: #7a378b;\">:text</span> ,text?))
      (click (<span style=\"color: #a020f0;\">lambda</span> (event) ,@on-click))
      ,@(<span style=\"color: #a020f0;\">when</span> class `((add-class ,class)))))

(defpsmacro $on (context-selector <span style=\"color: #228b22;\">&amp;rest</span> event/selector/behavior-list)
  `($ ,context-selector
      ,@(<span style=\"color: #a020f0;\">loop</span> for (ev sel . behav) in event/selector/behavior-list
           collect `(on ,ev ,sel (<span style=\"color: #a020f0;\">lambda</span> (event) ,@behav)))))</pre>

<p>Tadaah. I also took the liberty of having the <code>$button</code> macro add a custom body class, for my own ease-of-use in the CSS. These let me write greatly simplified versions of both constructs like this:</p>

<pre>($button foo (<span style=\"color: #7a378b;\">:icon-name</span>) ($ parent-or-child-of-foo (<span style=\"color: #a020f0;\">do-something</span>)))

($on foo
     (<span style=\"color: #7a378b;\">:event</span> <span style=\"color: #8b2252;\">\"child\"</span>
             ($ parent-or-child-of-foo (<span style=\"color: #a020f0;\">do-something</span>)))
     ...)</pre>

<p>Much better. I'll be adding both of these to <a href=\"https://github.com/Inaimathi/cl-web-dev\">cl-web-dev</a> later on. While we're on the subject by the way, <a href=\"https://github.com/Inaimathi/cl-web-dev\">that project</a> has been very helpful for me, even though I've yet to actually use it anywhere. Porting code from <code><span style=\"color: #7a378b;\">:deal</span></code> to <code><span style=\"color: #7a378b;\">:cl-web-dev</span></code> forced me to think about how to generalize certain constructs, and its made me pay a lot more attention to the small assumptions I've been making while writing front-end code. I thoroughly recommend it. In fact, I may just get into the habit of writing a general version along with whatever project-specific code I'm writing in the future.</p>

<h2>Later That Day...</h2>

<p>Two things. First off, I updated the <code>$on</code> macro to give me the same kind of sugar as <code>$keydown</code></p>

<pre>(defpsmacro $on (context-selector <span style=\"color: #228b22;\">&amp;rest</span> event/selector/behavior-list)
  `($ ,context-selector
      ,@(<span style=\"color: #a020f0;\">loop</span> for (ev sel . behav) in event/selector/behavior-list
           collect 
             `(on ,ev ,sel (<span style=\"color: #a020f0;\">lambda</span> (event) 
                             ,@(<span style=\"color: #a020f0;\">if</span> (eq ev <span style=\"color: #7a378b;\">:keydown</span>)
                                   `((<span style=\"color: #a020f0;\">let</span> (,@mod-keys ,@key-codes
                                           (key-code (or (@ event key-code) (@ event which))))
                                       (<span style=\"color: #a020f0;\">cond</span> ,@(<span style=\"color: #a020f0;\">loop</span> for (key body) on behav by #'cddr
                                                  collect `((= key-code ,(<span style=\"color: #a020f0;\">if</span> (stringp key) `(chain ,key (char-code-at 0)) key)) ,body)))))
                                   behav))))))</pre>

<p>That complicates the definition, but it lets me do things like</p>

<pre>...
($on <span style=\"color: #8b2252;\">\"#deck-editor\"</span>
     (<span style=\"color: #7a378b;\">:keydown</span> <span style=\"color: #8b2252;\">\".new-card\"</span>
               &lt;ret&gt; (<span style=\"color: #a020f0;\">unless</span> shift?
                       (chain event (prevent-default))
                       ($ <span style=\"color: #8b2252;\">\"#deck-editor button.add-card\"</span> (click)))
               &lt;esc&gt; ($ <span style=\"color: #8b2252;\">\"#deck-editor .new-card\"</span> (val <span style=\"color: #8b2252;\">\"\"</span>))))
...</pre>

<p>Instead of putting together that keychecking manually, so fair enough. In this particular case, I could have gotten away with just using <code>$keydown</code> diretly, but I have some nefarious plans that involve front-end changes to the way this editor works, so it will <i>shortly</i> become important that the key event gets delegated rather than attached to a particular DOM node.</p>

<p>Second, it turns out file uploading isn't the only way JS file operations suck absolute balls in the browser.</p>

<p>File <i>downloading</i> as well as loading local files are both giant shit sandwiches that'll hopefully get fixed up at some point fairly soon. In the meantime, I've chosen to follow <a href=\"http://stackoverflow.com/users/652308/dave\">Dave</a>'s <a href=\"http://stackoverflow.com/a/18690830/190887\">advice for the file saving</a>, which is basically \"Use <a href=\"https://github.com/eligrey/FileSaver.js\">FileSaver.js</a>\", and use a stupid handler workaround for loading.</p>

<p>As in, when the client needs to load a part of their local filesystem, they'll upload it to the server, which will echo it back so that it can be saved on the client side.</p>

<pre><span style=\"color: #b22222;\">; </span><span style=\"color: #b22222;\">deal.lisp
</span>
...
<span style=\"color: #b22222;\">;;; </span><span style=\"color: #b22222;\">TODO: figure out a way to do this entirely on the client side. 
</span><span style=\"color: #b22222;\">;;; </span><span style=\"color: #b22222;\">Why should I have to give a rats' ass what they want to load?
</span>(<span style=\"color: #a020f0;\">define-handler</span> (load-deck) ((deck <span style=\"color: #7a378b;\">:json-file</span>))
  deck)
...</pre>


<pre><span style=\"color: #b22222;\">; </span><span style=\"color: #b22222;\">deal-ui.lisp
</span>
...
($ <span style=\"color: #8b2252;\">\"#load-deck-form\"</span> 
   (change 
    (fn ($upload <span style=\"color: #8b2252;\">\"#load-deck-form\"</span> <span style=\"color: #8b2252;\">\"/load-deck\"</span>
                 (load-deck-for-editing res)))))
...</pre>

<p>I tell you, it's a good thing I don't drink.</p>

<p>There has got to be a better way of doing that. If all else fails, I'll just unwrap it into the naked <code>define-easy-handler</code> call. Because, just in case you didn't catch that, that wonderful <code>define-handler</code> mini-language works hard against me here. Because all of its output is JSON-serialized, and the incoming argument is of type <code>:json-file</code>, what's actually happening in <code>load-deck</code> is</p>

<ol>
  <li>the server receives a file</li>
  <li>it parses said file into an s-exp representation of the JSON tree<a href=\"#foot-Sun-Sep-29-203106EDT-2013\" name=\"note-Sun-Sep-29-203106EDT-2013\">[1]</a></li>
  <li>it encodes the result into JSON and writes it out as a string<a href=\"#foot-Sun-Sep-29-203108EDT-2013\" name=\"note-Sun-Sep-29-203108EDT-2013\">[2]</a></li>
</ol>

<p>What you're looking at is an <code>On</code> implementation of <code>identity</code>, with some really, <i>really</i> bad, network-dependent constant factors tacked on. And the entire thing is completely, aggravatingly unnecessary anyway because as the comment says: why do I care what my users are loading in the first place? I guess it doesn't really matter for the short term. It will <i>begin</i> to matter the instant people start actually using the thing, because I really won't be able to afford the extra traffic at that point.</p>

<h2>T minus 21 days</h2>

<p>Today, I showed Deal off to the <a href=\"https://bentomiso.com/events/40-games-with-friends\">first bunch of humans who aren't programmers</a>. Reaction was by and large positive, so that's good I guess. Also, someone called me an \"idealistic craftsman\", in what I'm sure he thought was a condescending way, but, well... I resemble that remark.</p>

<p>What I found out is that I'm pretty much on target for what people want, and my observations told me I really ought to fast-track some features I was planning for later on</p>

<ul>
  <li>custom backgrounds on cards/decks</li>
  <li>custom tablecloths/minis</li>
  <li>adding notes<a href=\"#foot-Sun-Sep-29-203112EDT-2013\" name=\"note-Sun-Sep-29-203112EDT-2013\">[3]</a></li>
  <li>rotation</li>
</ul>

<p>I figured I could wait on these, but having seen some games people actually play, they'll will become painfully necessary soon. Also, I got the idea for a feature I wasn't even thinking of, but that's entirely obvious in retrospect. The ability to ping a particular location on the board, or perhaps an existing placeable. This wouldn't change the board in any way, but it would highlight a particular thing on it to draw everyones' attention.</p>

<p>The server-side components for all of those have been implemented, by the by. By the time this is published, they'll have been in production for about two weeks. The <i>client</i> side will take a little longer. Mostly because I have to figure out intuitive ways to trigger all of this without cluttering the UI.</p>

<h2>T minus 14 days</h2>

<p>I've been spending most of my time figuring out a new server arrangement for the project. Which I did, more or less, and the incomplete<a href=\"#foot-Sun-Sep-29-203116EDT-2013\" name=\"note-Sun-Sep-29-203116EDT-2013\">[4]</a> results have already been published <a href=\"/article?name=deal-interlude-1.html\">here</a>. I don't expect the session is going to give me any trouble at all, but I\"m still leaving it for a bit. I've already got a running server with the shitty deployment method, after all, and work on the UI will benefit my current as well as my future deployments, so I figure those are higher priority targets. In particular, the more I think about rotation the more I think that's going to be the really annoying feature to add. We'll see I guess. I hope to have a further update on this project for you later today.</p>

<h2>T minus 13 days</h2>

<p>Got a bit done yesterday, and a bit today. It turns out that neither implementing <a href=\"http://vremenno.net/js/jquery-ui-rotation-using-css-transform/\">element rotation</a> nor implementing <a href=\"http://www.w3schools.com/html/html5_webstorage.asp\">HTML5 localStorage</a> were particularly difficult. It did give me a couple of ideas that I'll need to look into though</p>

<ul>
  <li>resizing minis/tablecloths<a href=\"#foot-Sun-Sep-29-203119EDT-2013\" name=\"note-Sun-Sep-29-203119EDT-2013\">[5]</a></li>
  <li>storing custom mini/tablecloth URIs in local storage<a href=\"#foot-Sun-Sep-29-203122EDT-2013\" name=\"note-Sun-Sep-29-203122EDT-2013\">[6]</a></li>
</ul>

<p>The project's really winding down though. Apart from that server rewrite/tweak I'll need to make at some point, the work's pretty much done. And even that won't really change the UI much. Depending on the approach I end up taking, I may need to switch from EventSource to WebSockets on the front-end, and that's about as intense a project as I've got left. We've got a fairly nice tool in just under 2500 lines of Common Lisp.</p>

<p>Lets see what it'll take to make it beautiful instead of just nice...</p>

<h2>T minus 9 days</h2>

<p>The deck editor has finally been overhauled into something approaching beautiful. You no longer need to know JSON to use it at all<a href=\"#foot-Sun-Sep-29-203128EDT-2013\" name=\"note-Sun-Sep-29-203128EDT-2013\">[7]</a>, and it's reasonably intuitive. That's it. That was the goal. I've amended the note in README.md to reflect that we now, in fact, have the prototyping down cold.</p>

<p>At this point I'm giving serious thought to plowing ahead and putting together that special-purpose server I was on about last time. In a separate branch obviously, so that I still have something to show if it passes \"pencils down\" before I get done with it, but still.</p>

<h2>T minus 8 days</h2>

<p>I've re-considered that again. Looking at the <a href=\"https://github.com/Inaimathi/deal/issues\">issue tracker</a>, there's still a few things I want to put together <i>before</i> I start thinking about re-engineering the back end. It still needs to happen; putting together a stripped-down, async server with SSE and Session capabilities out of the box will make game writing in Lisp much easier. To the point that I might finally go back and finish up <a href=\"/article?name=strifebarge--turn-based-web-games-in-common-lisp.html\">Strifebarge</a> once it's done. For this specific project though, some stuff is slightly more important than re-working the back end. Stuff like card images, custom notes, peek/show/play-from, setting the number of seats and starting private games. Normally, I'd say that's a short list. And I'd probably try to get all of the above done. Unfortunately, my next week is going to be busy as hell even without factoring in the additional work I intend to pour into Deal, so I'm picking my battles at the moment.</p>

<p>On another note, I was pointed to two \"competitors\" to this project way back when I showed this off to other humans. The reason the word \"competitors\" has quotes around it is that, as I said to the other human, I'm not competing. Deal is an entirely free-time project that I intend to release under the AGPL and use for some personal projects with a friend, but I'm not selling it<a href=\"#foot-Sun-Sep-29-203131EDT-2013\" name=\"note-Sun-Sep-29-203131EDT-2013\">[8]</a> or pushing it, I just want feedback. So it feels really bizarre to refer to anything as a competing product.</p>

<p>Anyhow, the two that got pointed out are <a href=\"http://www.vassalengine.org/\">Vassal</a> and <a href=\"http://roll20.net/\">Roll20</a>, both of which I'd have trouble thinking of as \"competitors\" even if not for the previous points. Vassal is, bizarrely, a Java-based desktop app that requires you to connect to a central server to play. They can probably bend the UI to their will further than I can, but there are disadvantages to making something like this a piece of desktop software. Not the least of which is that connectivity is the point, which means you still need to worry about network connections, and run a <a href=\"http://www.vassalengine.org/wiki/Server\">server</a>, but you get to build it all from the ground up<a href=\"#foot-Sun-Sep-29-203147EDT-2013\" name=\"note-Sun-Sep-29-203147EDT-2013\">[9]</a>. So, to summarize: similar goals, wildly different architecture and approach.</p>

<p>Roll20 takes a similar <i>approach</i>, but has much different <i>goals</i>. It's a web application people connect to<a href=\"#foot-Sun-Sep-29-203150EDT-2013\" name=\"note-Sun-Sep-29-203150EDT-2013\">[10]</a>, and they connect in order to have a shared space they can manipulate. That seems to be that though. The focus of Roll20 is to <i>play</i> tabletop games, and I'm not sure, but it looks like their card game support isn't very extensive. They focus on <a href=\"https://wiki.roll20.net/Main_Page\">tabletop games in the vein of D&amp;D</a>, and they don't seem to bother providing facilities to mock up your own minis/boards/cards/what-have-you, which is kind of key if you're looking for a prototyping tool. So again, executive summary: similar architecture and approach, wildly different goal.</p>

<p>I guess you could look at Deal as an attempt to unify these two applications, but that would imply I was aware of either when I started, and I wasn't.</p>

<h2>T minus 4 days</h2>

<p>I seriously wanted to do a countdown from 5, but life gets in the way of that. Today I had an idea for a cooperative card game heavily riffing off of <a href=\"http://boardgamegeek.com/boardgame/112092/shadowrift\">ShadowRift</a>, so I figured I'd put Deal through its paces. It was slow going at first, I'll admit, but I added two or three minor features that made it easier. Most notably, the card editor now deals with copy count rather than naively treating each individual card as a separate record, even if they're copies. It still doesn't go deep; the JSON representation I save still does the stupid thing and it shouldn't in the long run, but the interface has been greatly simplified. I'm going to release the game files so you guys can try it once I get it to version 1.0.</p>

<p>This weekend is the last couple of full days I'll be able to throw at the thing before the contest is up, which means I want to add a last couple of features to the front end, then concentrate on cleanup. There aren't any particularly gnarly bits I can think of off the top of my head, but its been a while since I got the chance to just sit down and read the UI code, so maybe I'll see rot accumulating where I wasn't expecting it.</p>

<h2>T minus 3 days</h2>

<p>Today saw some minor UI changes, inspired by my attempt to actually build a game, as well as the removal of the last piece of stupid JS hack code on the server. There used to be a thing, which I already bitched about earlier, that looked like this</p>

<pre><span style=\"color: #b22222;\">;;;;;;;;;; </span><span style=\"color: #b22222;\">Stupid hacks around in-browser JS limitations
</span><span style=\"color: #b22222;\">;;; </span><span style=\"color: #b22222;\">TODO: figure out a way to do this entirely on the client side. 
</span><span style=\"color: #b22222;\">;;; </span><span style=\"color: #b22222;\">Why should I have to give a rats' ass what they want to load?
</span>(<span style=\"color: #a020f0;\">define-handler</span> (load-deck) ((deck <span style=\"color: #7a378b;\">:json-file</span>))
  deck)</pre>

<p>in <code>deal.lisp</code>. The only reason it was there is that there didn't seem to be a good way of loading a local file into a JS application. Which a player would want to do if they saved their deck file, but were away from their machine or main browser. The result was that in order to accomplish this relatively straight-forward task, I had to let users upload their deck files, send them back (After parsing unfortunately; <code><span style=\"color: #7a378b;\">:json-file</span></code> does a parse of its contents and I didn't feel like putting in further pseudo-types just for something I saw as a hack anyhow), where they would then be loaded locally.</p>

<p>The way I ended up solving that was with a bit of HTML5 tech (which unfortunately means that only HTML5-compatible browsers can load decks, but on the plus side, the sever is finally out of a loop it doesn't belong in anyhow)</p>

<pre><span style=\"color: #b22222;\">;;; </span><span style=\"color: #b22222;\">in pQuery.lisp
</span>...
(defpsmacro $load (elem-id <span style=\"color: #228b22;\">&amp;body</span> body)
  (<span style=\"color: #a020f0;\">with-ps-gensyms</span> (f-list)
    `(<span style=\"color: #a020f0;\">let</span> ((reader (new -file-reader))
           (,f-list (chain document (get-element-by-id ,elem-id) files)))
       (setf (@ reader onloadend)
             (<span style=\"color: #a020f0;\">lambda</span> (event)
               (<span style=\"color: #a020f0;\">let</span> ((res (string-&gt;obj (@ event target result)))) 
                 ,@body)))
       (<span style=\"color: #a020f0;\">when</span> ,f-list
         (chain reader (read-as-text (@ ,f-list 0)))))))
...</pre>

<pre><span style=\"color: #b22222;\">;;; </span><span style=\"color: #b22222;\">in deal-ui.lisp
</span>...
($ <span style=\"color: #8b2252;\">\"#load-deck-form\"</span> 
   (change (fn 
            ($load <span style=\"color: #8b2252;\">\"load-deck-file\"</span> (load-deck-for-editing res))
            ($ <span style=\"color: #8b2252;\">\"#load-deck-dialog\"</span> (dialog <span style=\"color: #7a378b;\">:close</span>)))))
...</pre>

<p>The macro takes an element id<a href=\"#foot-Sun-Sep-29-203159EDT-2013\" name=\"note-Sun-Sep-29-203159EDT-2013\">[11]</a> and a callback <code>body</code>. It sets up a <code>FileReader</code> to read the first file specified by the named element if any, then evaluates <code>body</code> in an environment where <code>event</code> is bound to the reader event and <code>res</code> is bound to the JSON-parsed content of the read file.</p>

<p>The block in <code>deal-ui.lisp</code> just calls that macro in a <code>change</code> event for <code>#load-deck-form</code>, and loads the resulting JSON for editing as a deck.</p>

<p>Not as pretty as it could possibly be, but it does the job.</p>

<h2>T Minus 2 days</h2>

<p>I'm in the middle of throwing the second biggest chunk of time I've had at this project. For an opener, I put together a peek system which lets players look at and manipulate the cards in stacks. You can just peek, and you can reorder the cards you're looking at, <i>and</i> you can take arbitrary ones into your hand. Of course, as usual, all of this is logged in the games public broadcast, so you can't exactly cheat inconspicuously using these techniques.</p>

<p>That killed a good three or four feature requests with one stone. Before the day's up, I'm still hoping to do something about</p>

<ul>
  <li>the ability to play a card directly from a stack<a href=\"#foot-Sun-Sep-29-203202EDT-2013\" name=\"note-Sun-Sep-29-203202EDT-2013\">[12]</a></li>
  <li>the ability to flip over the top card of a stack</li>
  <li>card/deck background images</li>
  <li>leavers hands</li>
  <li>in-game player status</li>
</ul>

<p>and that's all. Once those are put together, I'm just doing a final few cleanup runs before the deadline is up. At that point, I'll consider this One Point Ohed, and I'll move on to the larger project chunklets I still want to put together, including a custom server and multi-select functionality.</p>

<h2>Later That Day...</h2>

<p>So that's done.</p>

<p>Seriously.</p>

<p>All of it.</p>

<p>The only thing I've got left to do tomorrow is cleanup, which is non-trivial but certainly possible. I don't even have enough mental energy to witter about technique at this point, so I know damn well that I don't want to bite off any more features on a schedule this tight. This has been a pretty draining three months, all things considered, but I'm almost done here. A break will be quite welcome after that.</p>

<h2>Dawn of the Final day</h2>

<p>Satori.</p>

<p>So that's it. It's actually <b>T Minus 1 day</b>, but it's highly doubtful I'll be able to do much work tomorrow. Off to tuning I go. If you're used to \"refactoring\" in the Java/C# sense, this is probably going to be the weirdest round of tweaks you've seen. Because I'll be trying to maximize front-end readability as opposed to performance. In other words, as a result of the effort I'm about to put forth, the application will probably get <i>slower</i> and <i>smaller</i><a href=\"#foot-Sun-Sep-29-203205EDT-2013\" name=\"note-Sun-Sep-29-203205EDT-2013\">[13]</a>.</p>

<p>Preliminary triage on <b>The Server Side</b> turned up one thing, but it was <i>very</i> preliminary so there may be more. There's a few handlers like this one</p>

<pre>(<span style=\"color: #a020f0;\">define-player-handler</span> (table/stack/play) ((table <span style=\"color: #7a378b;\">:table</span>) (stack <span style=\"color: #7a378b;\">:stack</span>) (card-id <span style=\"color: #7a378b;\">:keyword</span>) (face <span style=\"color: #7a378b;\">:facing</span>) (x <span style=\"color: #7a378b;\">:int</span>) (y <span style=\"color: #7a378b;\">:int</span>) (z <span style=\"color: #7a378b;\">:int</span>) (rot <span style=\"color: #7a378b;\">:int</span>))
  (<span style=\"color: #a020f0;\">let</span> ((card (find card-id (cards stack) <span style=\"color: #7a378b;\">:key</span> #'id)))
    (<span style=\"color: #ff0000; font-weight: bold;\">assert</span> card)
    (set-props card face x y z rot)
    (publish! table <span style=\"color: #7a378b;\">:played-from-stack</span> `((stack . ,(id stack)) (card . ,(redact card))))
    (move! card stack table)
    <span style=\"color: #7a378b;\">:ok</span>))</pre>

<p>the relevant parts are</p>

<pre>(<span style=\"color: #a020f0;\">define-player-handler</span> (table/stack/play) (... (stack <span style=\"color: #7a378b;\">:stack</span>) (card-id <span style=\"color: #7a378b;\">:keyword</span>) ...)
  (<span style=\"color: #a020f0;\">let</span> ((card (find card-id (cards stack) <span style=\"color: #7a378b;\">:key</span> #'id)))
    (<span style=\"color: #ff0000; font-weight: bold;\">assert</span> card)
    ...))</pre>

<p>What I'm doing is expecting a card. But it won't be in a hand, or on the table, it'll be in a stack. My psuedo-type-system doesn't cover this possibility, so what you see there is me getting a keyword from the client, looking it up manually and <code>assert</code>ing that it's actually in the <code>stack</code> I care about. This is a change I'm not doing right now, because I think the front-end will need much more work, but what I really want to be able to say in this situation is something like</p>

<pre>(<span style=\"color: #a020f0;\">define-player-handler</span> (table/stack/play) (... (stack <span style=\"color: #7a378b;\">:stack</span>) (card (<span style=\"color: #7a378b;\">:card</span> <span style=\"color: #7a378b;\">:in-stack</span> stack) ...)
  ...)</pre>

<p>and have the lookups/assertions happen automatically on my behalf. There's a couple more places this pattern emerges, so I'll come back to put the fix together, but not right now. At the moment, this is a Note To Self.</p>

<p>There's a fuckton of work on <b>The Client Side</b>, as I suspected. There's places where I need to add <code>define-thing</code> declarations, there's places where <code>thing</code>s overlap more than I'd like, and there's a few places where small, counter-intuitive patterns are emerging. So, we'll begin at the beginning, get through as much of the middle as possible, hopefully come to the end and then stop.</p>

<b>Incrementing</b>

<p>There's a bunch of places that exhibit this sort of pattern</p>

<pre>...
(<span style=\"color: #a020f0;\">let</span> ((trg ($ this (siblings <span style=\"color: #8b2252;\">\".num-dice\"</span>))))
  ($ trg (text (max 1 (- ($int trg) 1))))
  (store-dice))
...</pre>

<p>The <code>(store-dice)</code> call there is actually just noise, but the rest of that expression is relevant. What I'm trying to express is \"Decrement the number contained in this DOM element, and make sure the result doesn't go below 1\", but because the number is stored textually, there's a bunch of overhead that needs to happen for that fairly simple concept to be executed. I need to get the element, get an integer from its contents, increment it, make sure it's not below 1 and then store it in place. You'll note that there's already a macro there that isn't helping much. <code>$int</code> just takes an element and returns its contents after a <code>parse-int</code> call. What I really want to be able to write in this situation is</p>

<pre>...
($decf ($ this (siblings <span style=\"color: #8b2252;\">\".num-dice\"</span>)) -1 <span style=\"color: #7a378b;\">:min</span> 1)
(store-dice)
...</pre>

<p>Which is going to mean finally fixing the <code>$int</code> plumbing properly, like I've been meaning to. I already more-or-less solved this problem in <a href=\"https://github.com/Inaimathi/cl-web-dev\"><code>cl-web-dev</code></a>, so I'll be borrowing a slightly modified copy of that solution.</p>

<pre>(defpsmacro $val (selector <span style=\"color: #228b22;\">&amp;optional</span> new-value)
  (<span style=\"color: #a020f0;\">with-ps-gensyms</span> (sel type elem)
    (<span style=\"color: #a020f0;\">let*</span> ((!exp (<span style=\"color: #a020f0;\">when</span> new-value `(,new-value)))
           (val-exp `(chain ,elem (val ,@!exp))))
      `(<span style=\"color: #a020f0;\">let*</span> ((,sel ,selector)
              (,elem ($ ,sel))
              (,type (chain ,elem (get 0) tag-name)))
         (<span style=\"color: #a020f0;\">case</span> ,type
           (<span style=\"color: #8b2252;\">\"INPUT\"</span> ,val-exp) (<span style=\"color: #8b2252;\">\"BUTTON\"</span> ,val-exp) (<span style=\"color: #8b2252;\">\"TEXTAREA\"</span> ,val-exp)
           (t (chain ,elem (text ,@!exp))))))))</pre>

<p>That's going to do a better job than the current <code>$int</code> of getting/setting the <code>val</code> or <code>text</code> of a particular target<a href=\"#foot-Sun-Sep-29-203220EDT-2013\" name=\"note-Sun-Sep-29-203220EDT-2013\">[14]</a>. It takes a <code>selector</code>, and optionally a <code>new-value</code>, checks what kind of element the <code>selector</code> specifies, and returns or modifies either its <code>text</code> or <code>val</code> as appropriate. The <code>!exp</code><a href=\"#foot-Sun-Sep-29-203226EDT-2013\" name=\"note-Sun-Sep-29-203226EDT-2013\">[15]</a> shows up wherever a value is changed/looked up. It's written oddly, because I want it to expand into nothing as opposed to <code>nil</code> if a <code>new-value</code> wasn't passed in, which means stitching with <code>,@</code> rather than just <code>,</code>. The <code>val-exp</code> is what I run if the element is of a type that has a <code>(val)</code>, otherwise we need to return its <code>(text)</code>. This is one of those things that might go easier <i>without</i> jQuery.</p>

<p>Anyhow, now that we have a generic value getter/setter, we can define a new, shorter <code>$int</code> in terms of it.</p>

<pre>(defpsmacro $int (selector)
  `(parse-int ($val ,selector)))</pre>

<p>Which should be self-explanatory. Next, <code>$incf</code> <i>would</i> be trivial to define if not for the bounding requirements. If we wanted a naive increment, we could just say</p>

<pre>(defpsmacro $incf (selector <span style=\"color: #228b22;\">&amp;optional</span> (delta +1))
  (<span style=\"color: #a020f0;\">with-ps-gensyms</span> (elem)
    `(<span style=\"color: #a020f0;\">let</span> ((,elem ,selector))
       ($val ,elem (+ 1 ($int ,elem))))))</pre>

<p>with just one minor complication we need so that <code>selector</code> isn't evaluated twice. however, we want to make sure this is a bounded <code>$incf</code>, so we need to account for that. Luckily, unlike with the <code>$val</code> macro, we can do that at macro-expansion time</p>

<pre>(defpsmacro $incf (selector <span style=\"color: #228b22;\">&amp;optional</span> (delta +1) <span style=\"color: #228b22;\">&amp;key</span> min max)
  (<span style=\"color: #a020f0;\">with-ps-gensyms</span> (elem)
    (<span style=\"color: #a020f0;\">let*</span> ((val-exp `(+ ,delta ($int ,elem)))
           (new-val (<span style=\"color: #a020f0;\">cond</span> ((and min max)
                           `(max (min ,max ,val-exp) ,min))
                          (max `(min ,max ,val-exp))
                          (min `(max ,val-exp ,min))
                          (t val-exp))))
      `(<span style=\"color: #a020f0;\">let</span> ((,elem ,selector))
         ($val ,elem ,new-val)))))</pre>

<p>Now that we've got that, we can define <code>$decf</code> in terms of <code>$incf</code> for a bit of syntactic sugar<a href=\"#foot-Sun-Sep-29-203237EDT-2013\" name=\"note-Sun-Sep-29-203237EDT-2013\">[16]</a>. That kills this pattern. Boom. Headshot.</p>

<b>Self-Replacing <code>component</code>s and <code>aif</code>-friendly <code>$exists?</code></b>

<p>Next up, not so much a pattern as an annoying thing I've had to write</p>

<pre>...
(<span style=\"color: #a020f0;\">let</span> ((sel (+ <span style=\"color: #8b2252;\">\"#game-\"</span> (@ ev id))))
  (<span style=\"color: #a020f0;\">if</span> ($exists? sel)
      ($ sel (replace (render-table-entry (@ ev table))))
      (render-table-entry (@ ev table))))
...</pre>

<p>What I want there is to replace an existing game record with an update. It's not entirely obvious from that expression, but the reason I do this is that I want recently updated games to be at the top of the games list. <code>render-table-entry</code> <code>prepend</code>s, you see. Now that I think back on it actually, the only reason I didn't use <code>define-thing</code><a href=\"#foot-Sun-Sep-29-203245EDT-2013\" name=\"note-Sun-Sep-29-203245EDT-2013\">[17]</a> here <i>is</i> that prepending issue. So...</p>

<pre>(defpsmacro define-thing ((name <span style=\"color: #228b22;\">&amp;key</span> prepend? replace?) markup <span style=\"color: #228b22;\">&amp;body</span> behavior)
  (<span style=\"color: #a020f0;\">with-ps-gensyms</span> (container)
    `(<span style=\"color: #a020f0;\">defun</span> ,(intern (format nil <span style=\"color: #8b2252;\">\"create-~a\"</span> name)) (,container thing)
       ,@(<span style=\"color: #a020f0;\">when</span> replace?
               `(<span style=\"color: #a020f0;\">when</span> (@ thing id)
                  (aif ($exists? (+ <span style=\"color: #8b2252;\">\"#\"</span> (@ thing id)))
                       ($ it (remove)))))
       ($ ,container (,(<span style=\"color: #a020f0;\">if</span> prepend? 'prepend 'append) (who-ps-html ,(expand-self-expression markup 'thing))))
       (<span style=\"color: #a020f0;\">let</span> (($self (aif (@ thing id) ($ (+ <span style=\"color: #8b2252;\">\"#\"</span> it)) ($ ,container (children) ,(<span style=\"color: #a020f0;\">if</span> prepend? '(first) '(last))))))
         (<span style=\"color: #a020f0;\">flet</span> (($child (selector) (chain $self (children selector)))
                ($find (selector) (chain $self (find selector))))
           ,@(<span style=\"color: #a020f0;\">loop</span> for clause in behavior
                collect (expand-self-expression clause 'thing)))))))</pre>

<p>There. That adds optional <code>prepend?</code> and <code>replace?</code> options to <code>define-thing</code>. Note that I make the choice about replacement and prepending in the macro call, rather than the resulting function definition. That means that I can't <code>prepend</code> a thing I've declared as <code>append</code>ing<a href=\"#foot-Sun-Sep-29-203250EDT-2013\" name=\"note-Sun-Sep-29-203250EDT-2013\">[18]</a>, but it means more work can be done at macro-expansion time, which is usually a good thing.</p> 

<p>As an aside, in the course of this edit, I noticed that there's another call pattern surrounding <code>$exists?</code>. Specifically</p>

<pre>...
                        (<span style=\"color: #a020f0;\">if</span> ($exists? (+ <span style=\"color: #8b2252;\">\"#deck-editor .cards .card[title='\"</span> (@ res name) <span style=\"color: #8b2252;\">\"']\"</span>))
                            ($incf (+ <span style=\"color: #8b2252;\">\"#deck-editor .cards .card[title='\"</span> (@ res name) <span style=\"color: #8b2252;\">\"'] .count\"</span>))
                            (create-card-record <span style=\"color: #8b2252;\">\"#deck-editor .cards\"</span> res))
...</pre>

<p>the relevant idea here is that if a particular element <code>$exists?</code>, I tend to do something with it. Which means that I'd really like to use <code>aif</code> here, except I can't because <code>$exists?</code> returns <code>true</code> or <code>false</code>, rather than something interesting in the positive case. That's a pretty quick edit:</p>

<pre>(defpsmacro $exists? (selector)
  `(<span style=\"color: #a020f0;\">when</span> (&gt; (@ ($ ,selector) length) 0)
     ,selector))</pre>

<p>It now returns the original selector, which means that I can re-write that <code>if</code> above as a very slightly cleaner</p>

<pre>...
                        (aif ($exists? (+ <span style=\"color: #8b2252;\">\"#deck-editor .cards .card[title='\"</span> (@ res name) <span style=\"color: #8b2252;\">\"']\"</span>))
                             ($incf ($ it (children <span style=\"color: #8b2252;\">\".count\"</span>)))
                             (create-card-record <span style=\"color: #8b2252;\">\"#deck-editor .cards\"</span> res))
...</pre>

<p>Ahem. Now, then<a href=\"#foot-Sun-Sep-29-203259EDT-2013\" name=\"note-Sun-Sep-29-203259EDT-2013\">[19]</a>.</p>

<pre>...
           (<span style=\"color: #a020f0;\">define-thing</span> (table-entry <span style=\"color: #7a378b;\">:prepend?</span> t <span style=\"color: #7a378b;\">:replace?</span> t)
               (<span style=\"color: #7a378b;\">:li</span> <span style=\"color: #7a378b;\">:id</span> (self id)
                    (<span style=\"color: #7a378b;\">:span</span> <span style=\"color: #7a378b;\">:class</span> <span style=\"color: #8b2252;\">\"tag\"</span> (self tag))
                    (<span style=\"color: #7a378b;\">:span</span> <span style=\"color: #7a378b;\">:class</span> <span style=\"color: #8b2252;\">\"id\"</span> (self id))
                    (<span style=\"color: #7a378b;\">:span</span> <span style=\"color: #7a378b;\">:class</span> <span style=\"color: #8b2252;\">\"players\"</span> (<span style=\"color: #7a378b;\">:span</span> <span style=\"color: #7a378b;\">:class</span> <span style=\"color: #8b2252;\">\"count\"</span> (self player-count)) <span style=\"color: #8b2252;\">\"/\"</span> (self max-players))
                    (<span style=\"color: #7a378b;\">:button</span> <span style=\"color: #7a378b;\">:class</span> <span style=\"color: #8b2252;\">\"join\"</span> <span style=\"color: #8b2252;\">\"Join\"</span>))
             ($highlight $self)
             ($button ($child <span style=\"color: #8b2252;\">\".join\"</span>) (<span style=\"color: #7a378b;\">:arrowthick-1-ne</span>) 
                      (<span style=\"color: #a020f0;\">let</span> ((passphrase <span style=\"color: #8b2252;\">\"\"</span>))
                        (lobby/join-table (self id) passphrase))))
...</pre>

<p>Now that I've got that definition, I can go back and replace things like this</p>

<pre>...
(<span style=\"color: #a020f0;\">let</span> ((sel (+ <span style=\"color: #8b2252;\">\"#game-\"</span> (@ ev id))))
  (<span style=\"color: #a020f0;\">if</span> ($exists? sel)
      ($ sel (replace (render-table-entry (@ ev table))))
      (render-table-entry (@ ev table))))
...</pre>

<p>with things like this</p>

<pre>...
(create-table-entry <span style=\"color: #8b2252;\">\"#open-tables\"</span> (@ ev table))
...</pre>

<b>Hidden Components</b>

<p>Next up, there's a few elements on the front end that <i>are</i> components, but aren't <i>defined</i> as components. Specifically, there are mini-windows for specifying new games, custom minis and such, and they have their own behaviors, but they're specified ad-hoc and in-line.</p>

<pre>...
(<span style=\"color: #a020f0;\">define-component</span> (new-table-form <span style=\"color: #7a378b;\">:empty?</span> nil)
    (<span style=\"color: #7a378b;\">:div</span> <span style=\"color: #7a378b;\">:id</span> <span style=\"color: #8b2252;\">\"new-table-setup\"</span> <span style=\"color: #7a378b;\">:class</span> <span style=\"color: #8b2252;\">\"overlay\"</span>
          (<span style=\"color: #7a378b;\">:h3</span> <span style=\"color: #8b2252;\">\"New Table\"</span>)
          (<span style=\"color: #7a378b;\">:div</span> <span style=\"color: #7a378b;\">:class</span> <span style=\"color: #8b2252;\">\"content\"</span>
                (<span style=\"color: #7a378b;\">:input</span> <span style=\"color: #7a378b;\">:class</span> <span style=\"color: #8b2252;\">\"game-tag\"</span>)
                (<span style=\"color: #7a378b;\">:button</span> <span style=\"color: #7a378b;\">:class</span> <span style=\"color: #8b2252;\">\"ok\"</span> <span style=\"color: #8b2252;\">\"Ok\"</span>)
                (<span style=\"color: #7a378b;\">:button</span> <span style=\"color: #7a378b;\">:class</span> <span style=\"color: #8b2252;\">\"cancel\"</span> <span style=\"color: #8b2252;\">\"Cancel\"</span>)))
  ($button <span style=\"color: #8b2252;\">\"#new-table-setup .ok\"</span> (<span style=\"color: #7a378b;\">:check</span> <span style=\"color: #7a378b;\">:text?</span> t)
           (lobby/new-table ($ <span style=\"color: #8b2252;\">\"#new-table-setup .game-tag\"</span> (val)) <span style=\"color: #8b2252;\">\"\"</span>))
  ($button <span style=\"color: #8b2252;\">\"#new-table-setup .cancel\"</span> (<span style=\"color: #7a378b;\">:cancel</span> <span style=\"color: #7a378b;\">:text?</span> t) ($ <span style=\"color: #8b2252;\">\"#new-table-setup\"</span> (hide)))
  
  ($keydown <span style=\"color: #8b2252;\">\"#new-table-setup .game-tag\"</span> 
            &lt;ret&gt; ($ <span style=\"color: #8b2252;\">\"#new-table-setup .ok\"</span> (click))
            &lt;esc&gt; ($ <span style=\"color: #8b2252;\">\"#new-table-setup .cancel\"</span> (click))))
...

(<span style=\"color: #a020f0;\">define-component</span> (custom-tablecloth-form <span style=\"color: #7a378b;\">:empty?</span> nil)
    (<span style=\"color: #7a378b;\">:div</span> <span style=\"color: #7a378b;\">:id</span> <span style=\"color: #8b2252;\">\"custom-tablecloth-form\"</span> <span style=\"color: #7a378b;\">:class</span> <span style=\"color: #8b2252;\">\"overlay\"</span> 
          (<span style=\"color: #7a378b;\">:h3</span> <span style=\"color: #8b2252;\">\"Custom Tablecloth\"</span>)
          (<span style=\"color: #7a378b;\">:div</span> <span style=\"color: #7a378b;\">:class</span> <span style=\"color: #8b2252;\">\"content\"</span>
                (<span style=\"color: #7a378b;\">:input</span> <span style=\"color: #7a378b;\">:class</span> <span style=\"color: #8b2252;\">\"url-input\"</span> <span style=\"color: #7a378b;\">:placeholder</span> <span style=\"color: #8b2252;\">\"Tablecloth image URL\"</span>)
                (<span style=\"color: #7a378b;\">:input</span> <span style=\"color: #7a378b;\">:class</span> <span style=\"color: #8b2252;\">\"name-input\"</span> <span style=\"color: #7a378b;\">:placeholder</span> <span style=\"color: #8b2252;\">\"Tablecloth Name\"</span>)
                (<span style=\"color: #7a378b;\">:button</span> <span style=\"color: #7a378b;\">:class</span> <span style=\"color: #8b2252;\">\"ok\"</span> <span style=\"color: #8b2252;\">\"Ok\"</span>)
                (<span style=\"color: #7a378b;\">:button</span> <span style=\"color: #7a378b;\">:class</span> <span style=\"color: #8b2252;\">\"cancel\"</span> <span style=\"color: #8b2252;\">\"Cancel\"</span>)))
  ($button <span style=\"color: #8b2252;\">\"#custom-tablecloth-form .ok\"</span> (<span style=\"color: #7a378b;\">:check</span> <span style=\"color: #7a378b;\">:text?</span> t)
           (<span style=\"color: #a020f0;\">let*</span> ((name ($val <span style=\"color: #8b2252;\">\"#custom-tablecloth-form .name-input\"</span>))
                  (tblc (create <span style=\"color: #7a378b;\">:name</span> name <span style=\"color: #7a378b;\">:uri</span> ($val <span style=\"color: #8b2252;\">\"#custom-tablecloth-form .url-input\"</span>))))
             (create-custom-tablecloth <span style=\"color: #8b2252;\">\"#tablecloth-tab .content\"</span> tblc)
             (setf (aref *session* <span style=\"color: #7a378b;\">:custom-tablecloths</span> name) tblc)
             (store-custom-tablecloths)
             ($val <span style=\"color: #8b2252;\">\"#custom-tablecloth-form input\"</span> <span style=\"color: #8b2252;\">\"\"</span>)
             ($ <span style=\"color: #8b2252;\">\"#custom-tablecloth-form\"</span> (hide))))
  ($button <span style=\"color: #8b2252;\">\"#custom-tablecloth-form .cancel\"</span> (<span style=\"color: #7a378b;\">:cancel</span> <span style=\"color: #7a378b;\">:text?</span> t) ($ <span style=\"color: #8b2252;\">\"#custom-tablecloth-form\"</span> (hide))))
...

(<span style=\"color: #a020f0;\">define-component</span> (custom-mini-form <span style=\"color: #7a378b;\">:empty?</span> nil)
    (<span style=\"color: #7a378b;\">:div</span> <span style=\"color: #7a378b;\">:id</span> <span style=\"color: #8b2252;\">\"custom-mini-form\"</span> <span style=\"color: #7a378b;\">:class</span> <span style=\"color: #8b2252;\">\"overlay\"</span>
          (<span style=\"color: #7a378b;\">:h3</span> <span style=\"color: #8b2252;\">\"Custom Mini\"</span>)
          (<span style=\"color: #7a378b;\">:div</span> <span style=\"color: #7a378b;\">:class</span> <span style=\"color: #8b2252;\">\"content\"</span>
                (<span style=\"color: #7a378b;\">:input</span> <span style=\"color: #7a378b;\">:class</span> <span style=\"color: #8b2252;\">\"url-input\"</span> <span style=\"color: #7a378b;\">:placeholder</span> <span style=\"color: #8b2252;\">\"Mini image URL\"</span>)
                (<span style=\"color: #7a378b;\">:button</span> <span style=\"color: #7a378b;\">:class</span> <span style=\"color: #8b2252;\">\"ok\"</span> <span style=\"color: #8b2252;\">\"Ok\"</span>)
                (<span style=\"color: #7a378b;\">:button</span> <span style=\"color: #7a378b;\">:class</span> <span style=\"color: #8b2252;\">\"cancel\"</span> <span style=\"color: #8b2252;\">\"Cancel\"</span>)))
  ($button <span style=\"color: #8b2252;\">\"#custom-mini-form .ok\"</span> (<span style=\"color: #7a378b;\">:check</span> <span style=\"color: #7a378b;\">:text?</span> t)
           (<span style=\"color: #a020f0;\">let</span> ((uri ($ <span style=\"color: #8b2252;\">\"#custom-mini-form .url-input\"</span> (val))))
             (create-custom-mini <span style=\"color: #8b2252;\">\"#minis-tab .content\"</span> (create <span style=\"color: #7a378b;\">:uri</span> uri))
             (aif (aref *session* <span style=\"color: #7a378b;\">:custom-minis</span>)
                  (chain it (push uri))
                  (setf (aref *session* <span style=\"color: #7a378b;\">:custom-minis</span>) (list uri)))
             (store-custom-minis)
             ($val <span style=\"color: #8b2252;\">\"#custom-mini-form .url-input\"</span> <span style=\"color: #8b2252;\">\"\"</span>)
             ($ <span style=\"color: #8b2252;\">\"#custom-mini-form\"</span> (hide))))
  ($button <span style=\"color: #8b2252;\">\"#custom-mini-form .cancel\"</span> (<span style=\"color: #7a378b;\">:cancel</span> <span style=\"color: #7a378b;\">:text?</span> t) ($ <span style=\"color: #8b2252;\">\"#custom-mini-form\"</span> (hide))))
...

(<span style=\"color: #a020f0;\">define-component</span> (load-deck-form <span style=\"color: #7a378b;\">:empty?</span> nil)
    (<span style=\"color: #7a378b;\">:div</span> <span style=\"color: #7a378b;\">:id</span> <span style=\"color: #8b2252;\">\"load-deck-form\"</span> <span style=\"color: #7a378b;\">:class</span> <span style=\"color: #8b2252;\">\"overlay\"</span>
          (<span style=\"color: #7a378b;\">:h3</span> <span style=\"color: #8b2252;\">\"Load Deck\"</span>)
          (<span style=\"color: #7a378b;\">:div</span> <span style=\"color: #7a378b;\">:class</span> <span style=\"color: #8b2252;\">\"content\"</span>
                (<span style=\"color: #7a378b;\">:form</span> <span style=\"color: #7a378b;\">:id</span> <span style=\"color: #8b2252;\">\"load-deck-inputs\"</span> <span style=\"color: #7a378b;\">:enctype</span> <span style=\"color: #8b2252;\">\"multipart/form-data\"</span>
                       (<span style=\"color: #7a378b;\">:input</span> <span style=\"color: #7a378b;\">:id</span> <span style=\"color: #8b2252;\">\"load-deck-file\"</span> <span style=\"color: #7a378b;\">:name</span> <span style=\"color: #8b2252;\">\"deck\"</span> <span style=\"color: #7a378b;\">:type</span> <span style=\"color: #8b2252;\">\"file\"</span>)))
          (<span style=\"color: #7a378b;\">:button</span> <span style=\"color: #7a378b;\">:class</span> <span style=\"color: #8b2252;\">\"cancel\"</span> <span style=\"color: #8b2252;\">\"Cancel\"</span>))
  ($ <span style=\"color: #8b2252;\">\"#load-deck-inputs\"</span> 
     (change (fn 
              ($load <span style=\"color: #8b2252;\">\"load-deck-file\"</span> (load-deck-for-editing res))
              ($ <span style=\"color: #8b2252;\">\"#load-deck-form\"</span> (hide)))))
  ($button <span style=\"color: #8b2252;\">\"#load-deck-form .cancel\"</span> (<span style=\"color: #7a378b;\">:cancel</span> <span style=\"color: #7a378b;\">:text?</span> t) ($ <span style=\"color: #8b2252;\">\"#load-deck-form\"</span> (hide))))
...</pre>

<p>So that's done; they're all pulled together now. Except, that tweak makes it clear that I really mean something else. These are all overlays. They're meant to go in the middle of the screen in place of a <code>prompt</code>, they have a title, a bit of markup and a bit of behavior, and they all have <code>:cancel</code> buttons that work exactly the same way. This looks like something we could easily abstract.</p>

<b>Defining Overlays</b>

<pre>(defpsmacro define-overlay ((name <span style=\"color: #228b22;\">&amp;key</span> (ok-button? t)) content <span style=\"color: #228b22;\">&amp;body</span> behavior)
  (<span style=\"color: #a020f0;\">let*</span> ((elem-name (format nil <span style=\"color: #8b2252;\">\"~(~a~)-overlay\"</span> name))
         (display-name (string-capitalize (cl-ppcre:regex-replace-all <span style=\"color: #8b2252;\">\"-\"</span> <span style=\"color: #8b2252;\">\"load-deck\"</span> <span style=\"color: #8b2252;\">\" \"</span>)))
         (id (concatenate 'string <span style=\"color: #8b2252;\">\"#\"</span> elem-name)))
    `(<span style=\"color: #a020f0;\">define-component</span> (,(intern (string-upcase elem-name)) <span style=\"color: #7a378b;\">:empty?</span> nil)
         (<span style=\"color: #7a378b;\">:div</span> <span style=\"color: #7a378b;\">:id</span> ,elem-name <span style=\"color: #7a378b;\">:class</span> <span style=\"color: #8b2252;\">\"overlay\"</span>
               (<span style=\"color: #7a378b;\">:h3</span> ,display-name)
               (<span style=\"color: #7a378b;\">:div</span> <span style=\"color: #7a378b;\">:class</span> <span style=\"color: #8b2252;\">\"content\"</span>
                     ,content
                     (<span style=\"color: #7a378b;\">:button</span> <span style=\"color: #7a378b;\">:class</span> <span style=\"color: #8b2252;\">\"cancel\"</span> <span style=\"color: #8b2252;\">\"Cancel\"</span>)
                     ,@(<span style=\"color: #a020f0;\">when</span> ok-button? `((<span style=\"color: #7a378b;\">:button</span> <span style=\"color: #7a378b;\">:class</span> <span style=\"color: #8b2252;\">\"ok\"</span> <span style=\"color: #8b2252;\">\"Ok\"</span>)))))
       (<span style=\"color: #a020f0;\">let</span> (($self ,id))
         (<span style=\"color: #a020f0;\">flet</span> (($find (selector) ($ $self (find selector))))
           ,@behavior
           ($button (+ ,id <span style=\"color: #8b2252;\">\" .cancel\"</span>) (<span style=\"color: #7a378b;\">:cancel</span> <span style=\"color: #7a378b;\">:text?</span> t) ($ <span style=\"color: #8b2252;\">\".overlay\"</span> (hide))))))))</pre>

<p>If you haven't seen it before, you may want to go through this one slowly. It's a macro that expands into a definition macro to abstract away the pieces this particular set have in common, leaving more or less just their differences in the resulting <code>define-overlay</code> calls. In this particular case, that's common extra arguments to <code>define-component</code>, a few lines of markup and a line of behavior. I could probably have boiled more out if I wanted to, but as you'll see below, this is already a pretty good result.</p>

<pre>...
(<span style=\"color: #a020f0;\">define-overlay</span> (new-table)
    (<span style=\"color: #7a378b;\">:input</span> <span style=\"color: #7a378b;\">:class</span> <span style=\"color: #8b2252;\">\"game-tag\"</span>)
  ($button ($find <span style=\"color: #8b2252;\">\".ok\"</span>) (<span style=\"color: #7a378b;\">:check</span> <span style=\"color: #7a378b;\">:text?</span> t)
           (lobby/new-table ($ <span style=\"color: #8b2252;\">\"#new-table-setup .game-tag\"</span> (val)) <span style=\"color: #8b2252;\">\"\"</span>))
  ($keydown ($find <span style=\"color: #8b2252;\">\".game-tag\"</span>)
            &lt;ret&gt; ($ ($find <span style=\"color: #8b2252;\">\".ok\"</span>) (click))
            &lt;esc&gt; ($ ($find <span style=\"color: #8b2252;\">\".cancel\"</span>) (click))))
...

(<span style=\"color: #a020f0;\">define-overlay</span> (custom-tablecloth)
    (<span style=\"color: #7a378b;\">:span</span> (<span style=\"color: #7a378b;\">:input</span> <span style=\"color: #7a378b;\">:class</span> <span style=\"color: #8b2252;\">\"url-input\"</span> <span style=\"color: #7a378b;\">:placeholder</span> <span style=\"color: #8b2252;\">\"Tablecloth image URL\"</span>)
           (<span style=\"color: #7a378b;\">:input</span> <span style=\"color: #7a378b;\">:class</span> <span style=\"color: #8b2252;\">\"name-input\"</span> <span style=\"color: #7a378b;\">:placeholder</span> <span style=\"color: #8b2252;\">\"Tablecloth Name\"</span>))
  ($button ($find <span style=\"color: #8b2252;\">\".ok\"</span>) (<span style=\"color: #7a378b;\">:check</span> <span style=\"color: #7a378b;\">:text?</span> t)
           (<span style=\"color: #a020f0;\">let*</span> ((name ($val <span style=\"color: #8b2252;\">\"#custom-tablecloth-form .name-input\"</span>))
                  (tblc (create <span style=\"color: #7a378b;\">:name</span> name <span style=\"color: #7a378b;\">:uri</span> ($val <span style=\"color: #8b2252;\">\"#custom-tablecloth-form .url-input\"</span>))))
             (create-custom-tablecloth <span style=\"color: #8b2252;\">\"#tablecloth-tab .content\"</span> tblc)
             (setf (aref *session* <span style=\"color: #7a378b;\">:custom-tablecloths</span> name) tblc)
             (store-custom-tablecloths)
             ($val ($find <span style=\"color: #8b2252;\">\"input\"</span>) <span style=\"color: #8b2252;\">\"\"</span>)
             ($ $self (hide)))))
...

(<span style=\"color: #a020f0;\">define-overlay</span> (custom-mini)
    (<span style=\"color: #7a378b;\">:input</span> <span style=\"color: #7a378b;\">:class</span> <span style=\"color: #8b2252;\">\"url-input\"</span> <span style=\"color: #7a378b;\">:placeholder</span> <span style=\"color: #8b2252;\">\"Mini image URL\"</span>)
  ($button ($find <span style=\"color: #8b2252;\">\".ok\"</span>) (<span style=\"color: #7a378b;\">:check</span> <span style=\"color: #7a378b;\">:text?</span> t)
           (<span style=\"color: #a020f0;\">let</span> ((uri ($val <span style=\"color: #8b2252;\">\"#custom-mini-form .url-input\"</span>)))
             (create-custom-mini <span style=\"color: #8b2252;\">\"#minis-tab .content\"</span> (create <span style=\"color: #7a378b;\">:uri</span> uri))
             (aif (aref *session* <span style=\"color: #7a378b;\">:custom-minis</span>)
                  (chain it (push uri))
                  (setf (aref *session* <span style=\"color: #7a378b;\">:custom-minis</span>) (list uri)))
             (store-custom-minis)
             ($val ($find <span style=\"color: #8b2252;\">\".url-input\"</span>) <span style=\"color: #8b2252;\">\"\"</span>)
             ($ $self (hide)))))
...

(<span style=\"color: #a020f0;\">define-overlay</span> (load-deck <span style=\"color: #7a378b;\">:ok-button?</span> nil)
    (<span style=\"color: #7a378b;\">:form</span> <span style=\"color: #7a378b;\">:id</span> <span style=\"color: #8b2252;\">\"load-deck-inputs\"</span> <span style=\"color: #7a378b;\">:enctype</span> <span style=\"color: #8b2252;\">\"multipart/form-data\"</span>
           (<span style=\"color: #7a378b;\">:input</span> <span style=\"color: #7a378b;\">:id</span> <span style=\"color: #8b2252;\">\"load-deck-file\"</span> <span style=\"color: #7a378b;\">:name</span> <span style=\"color: #8b2252;\">\"deck\"</span> <span style=\"color: #7a378b;\">:type</span> <span style=\"color: #8b2252;\">\"file\"</span>))
  ($change <span style=\"color: #8b2252;\">\"#load-deck-inputs\"</span>
           ($load <span style=\"color: #8b2252;\">\"load-deck-file\"</span> (load-deck-for-editing res))
           ($ $self (hide))))
...</pre>

<p>And that's going to be the mod I end off on for now. There's more refactoring to do, of course.</p>

<ul>
  <li>The server-side still needs those additions to <code>define-handler</code></li>
  <li>There's a lot of boilerplate on the client-side relating to storing things in <code>localStorage</code> which I'm pretty sure I could abstract away</li>
  <li>The initial <code>localStorage</code> loads happen all over the place, as opposed to just where I set <code>*session*</code></li>
  <li>There's still implicit components hiding in a couple of places</li>
  <li>I've yet to unify the front-end SSE handlers with the chat message interface</li>
  <li><i>and</i> I'm calling <code>$button</code>/<code>$droppable</code>/<code>$draggable</code>/<code>$keydown</code> a lot more than I thought I would, and each of them has their own local bindings for the modifier and special key values. the specials, at least, probably ought to be global bindings instead of being inlined each time.</li>
</ul>

<p>But all of that, and probably a lot more besides, will have to wait until I've had a bit of rest.</p>


<hr />
<h5>Footnotes</h5>
<p>1 - <a href=\"#note-Sun-Sep-29-203106EDT-2013\" name=\"foot-Sun-Sep-29-203106EDT-2013\">[back]</a> - Possibly failing for encoding reasons.</p>
<p>2 - <a href=\"#note-Sun-Sep-29-203108EDT-2013\" name=\"foot-Sun-Sep-29-203108EDT-2013\">[back]</a> - Possibly failing due to that encoding-depth, <code>alist</code>-related bug related to s we discussed <a href=\"/article?name=deal-part-2.html\">last time</a>.</p>
<p>3 - <a href=\"#note-Sun-Sep-29-203112EDT-2013\" name=\"foot-Sun-Sep-29-203112EDT-2013\">[back]</a> - Either standalone to the table, or attached to an existing placeable.</p>
<p>4 - <a href=\"#note-Sun-Sep-29-203116EDT-2013\" name=\"foot-Sun-Sep-29-203116EDT-2013\">[back]</a> - Sans session.</p>

<p>5 - <a href=\"#note-Sun-Sep-29-203119EDT-2013\" name=\"foot-Sun-Sep-29-203119EDT-2013\">[back]</a> - Which will require server-side changes because I don't currently track the size of anything.</p>
<p>6 - <a href=\"#note-Sun-Sep-29-203122EDT-2013\" name=\"foot-Sun-Sep-29-203122EDT-2013\">[back]</a> - That way you don't need to keep pasting from imgur or whatever every time you start a game.</p>

<p>7 - <a href=\"#note-Sun-Sep-29-203128EDT-2013\" name=\"foot-Sun-Sep-29-203128EDT-2013\">[back]</a> - Entry happens in explicit k/v inputs and preview takes the form of actual, zoomable preview cards you can poke at instead of just an object dump.</p>
<p>8 - <a href=\"#note-Sun-Sep-29-203131EDT-2013\" name=\"foot-Sun-Sep-29-203131EDT-2013\">[back]</a> - Though, because it's AGPL, <i>you</i> should feel perfectly free to, as long as you respect your users' freedom by pointing them at a repo that includes any changes you've made.</p>
<p>9 - <a href=\"#note-Sun-Sep-29-203147EDT-2013\" name=\"foot-Sun-Sep-29-203147EDT-2013\">[back]</a> - Rather than getting the vast majority of it for free, as you would if you took the web application approach.</p>
<p>10 - <a href=\"#note-Sun-Sep-29-203150EDT-2013\" name=\"foot-Sun-Sep-29-203150EDT-2013\">[back]</a> - Though it's not AGPL, which I guess technically means that <a href=\"http://www.gnu.org/philosophy/free-software-for-freedom.html\">I should have disregarded it</a> even had I known about it when starting this project.</p>
<p>11 - <a href=\"#note-Sun-Sep-29-203159EDT-2013\" name=\"foot-Sun-Sep-29-203159EDT-2013\">[back]</a> - This is the <i>only</i> construct that does so, but I'm not going to hack leading \"#\" support into it quite yet because I have a sneaking suspicion that I could have put Deal together purely using HTML5 constructs. That's something else I'll look into after the contest; porting the back-end away from jQuery, hopefully just by re-defining the pQuery macros.</p>
<p>12 - <a href=\"#note-Sun-Sep-29-203202EDT-2013\" name=\"foot-Sun-Sep-29-203202EDT-2013\">[back]</a> - Which will also be helped by that peek interface.</p>
<p>13 - <a href=\"#note-Sun-Sep-29-203205EDT-2013\" name=\"foot-Sun-Sep-29-203205EDT-2013\">[back]</a> - Both conceptually and in terms of line-count, but that first one is the more important of the two.</p>
<p>14 - <a href=\"#note-Sun-Sep-29-203220EDT-2013\" name=\"foot-Sun-Sep-29-203220EDT-2013\">[back]</a> - For the record, I re-wrote that macro three times as I was writing this paragraph. Someone asked me why I blogged a while ago, and my answer was basically that this was an attempt at rubber-duck debugging with the internet instead of the duck. Don't laugh; it works.</p>
<p>15 - <a href=\"#note-Sun-Sep-29-203226EDT-2013\" name=\"foot-Sun-Sep-29-203226EDT-2013\">[back]</a> - For the non-schemers, that's pronounced \"set expression\"; <code>!</code> denotes a side-effect, not logical negation.</p>
<p>16 - <a href=\"#note-Sun-Sep-29-203237EDT-2013\" name=\"foot-Sun-Sep-29-203237EDT-2013\">[back]</a> - Specifically so that we don't have to say correct, but counter-intuitive things like <code>($incf -4)</code>.</p>

<p>17 - <a href=\"#note-Sun-Sep-29-203245EDT-2013\" name=\"foot-Sun-Sep-29-203245EDT-2013\">[back]</a> - That's a basic macro I defined earlier to let me group markup with behavior in various places. It defines some <code>who-ps-html</code> and some initialization to run each time I create a <code>thing</code>, and its gotten slightly more elaborate since I started.</p>
<p>18 - <a href=\"#note-Sun-Sep-29-203250EDT-2013\" name=\"foot-Sun-Sep-29-203250EDT-2013\">[back]</a> - Which I don't need to do anywhere.</p>
<p>19 - <a href=\"#note-Sun-Sep-29-203259EDT-2013\" name=\"foot-Sun-Sep-29-203259EDT-2013\">[back]</a> - <p>Actually, as an aside to the aside, this change ended up giving me the expression </p>

<pre>(aif ($exists? (+ <span style=\"color: #8b2252;\">\".new-deck.new-custom-deck[title='\"</span> deck-name <span style=\"color: #8b2252;\">\"']\"</span>))
     ($ it (remove)))</pre>

<p>in one particular place. The <code>($ it (remove))</code> just looks odd to me. And it's one of the reasons I've been defining <code>$foo</code> macros everywhere; my eyebrow wouldn't be raised at <code>($remove it)</code> in the same way. I'm not going to go down the rabbit-hole of implementing <i>that</i> right now, but it would be fairly easiy to.</p></p>
"))
((5202 3723 620664000) :INSERT (151 :POSTED 3589416000))
((5202 3723 620668000) :INSERT (151 :TAG :ALMOST-LITERATE-PROGRAMMING))
((5202 3723 620670000) :INSERT (151 :TAG :COMMON-LISP))
((5202 3723 620672000) :INSERT (151 :TAG :JAVASCRIPT))
((5202 3723 620673000) :INSERT (151 :TAG :JOURNAL))
((5202 3723 620675000) :INSERT (151 :TAG :JQUERY))
((5202 3723 620677000) :INSERT (151 :TAG :PARENSCRIPT))
((5202 3723 620906000) :INSERT
 (152 :TITLE
  "Deal Journal - Interlude Two -- Being The Thoughts on Implementation Minutia of Custom HTTP Servers"))
((5202 3723 620912000) :INSERT (152 :FILE "deal-interlude-2.html"))
((5202 3723 620913000) :INSERT (152 :EDITED 3610299345))
((5202 3723 620915000) :INSERT
 (152 :BODY
  "<h3>Being The Thoughts on Implementation Minutia of Custom HTTP Servers</h3>

<h3>On the Mechanisms of Stopping A Server...</h3>

<p>The <a href=\"/article?name=deal-interlude-1.html\">last prototype</a> I posted had a laughably mis-named <code>stop</code> function</p>

<pre>(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">stop</span> ()
  (<span style=\"color: #a020f0;\">when</span> *socket-handle*
    (<span style=\"color: #a020f0;\">loop</span> while (socket-close *socket-handle*))
    (setf *socket-handle* nil
          *channel* nil)))</pre>

<p>See, because the server I'm putting together is single-threaded, you need to <code>C-c C-c</code> out of it to get back to the REPL. Except, that still leaves the <code>socket-server</code> listening on the specified TCP port. The half-assed solution I'd come up with involved setting a handle into which I'd put the listener so that I could close the process and kill the listener externally later.</p>

<pre>(<span style=\"color: #a020f0;\">defvar</span> <span style=\"color: #a0522d;\">*socket-handle*</span> nil)

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">start</span> (port <span style=\"color: #228b22;\">&amp;optional</span> (log-stream *standard-output*))
  (stop)  
  (setf *socket-handle* (socket-listen <span style=\"color: #8b2252;\">\"127.0.0.1\"</span> port <span style=\"color: #7a378b;\">:reuse-address</span> t))
  (<span style=\"color: #a020f0;\">let</span> ((conns (list *socket-handle*))
        (buffers (make-hash-table)))
    (<span style=\"color: #a020f0;\">loop</span> (<span style=\"color: #a020f0;\">loop</span> for ready in (wait-for-input conns <span style=\"color: #7a378b;\">:ready-only</span> t)
                do (<span style=\"color: #a020f0;\">if</span> (typep ready 'stream-server-usocket)
                       (push (socket-accept ready) conns)
                     (<span style=\"color: #a020f0;\">let</span> ((buf (gethash ready buffers (make-instance 'buffer))))
                       (buffered-read! (socket-stream ready) buf)
                       (<span style=\"color: #a020f0;\">when</span> (starts-with? (list #\\newline #\\return #\\newline #\\return)
                                           (contents buf))
                         (format log-stream <span style=\"color: #8b2252;\">\"COMPLETE ~s~%\"</span>
                                 (coerce (reverse (contents buf)) 'string))
                         (setf conns (remove ready conns))
                         (remhash ready buffers)
                         (<span style=\"color: #a020f0;\">let</span> ((parsed (parse buf)))
                           (format log-stream <span style=\"color: #8b2252;\">\"PARSED: ~s~%\"</span> parsed)
                           (handle-request ready (parse buf))))))))))</pre>

<p>The much more elegant way of solving this is by using <code>unwind-protect</code>:</p>

<pre>(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">start</span> (port <span style=\"color: #228b22;\">&amp;optional</span> (log-stream *standard-output*))
  (<span style=\"color: #a020f0;\">let</span> ((conns (list (socket-listen usocket:*wildcard-host* port <span style=\"color: #7a378b;\">:reuse-address</span> t)))
        (buffers (make-hash-table)))
    (<span style=\"color: #a020f0;\">unwind-protect</span>
         (<span style=\"color: #a020f0;\">loop</span> (<span style=\"color: #a020f0;\">loop</span> for ready in (wait-for-input conns <span style=\"color: #7a378b;\">:ready-only</span> t)
                  do (<span style=\"color: #a020f0;\">if</span> (typep ready 'stream-server-usocket)
                         (push (socket-accept ready) conns)
                         (<span style=\"color: #a020f0;\">let</span> ((buf (gethash ready buffers (make-instance 'buffer))))
                           (buffered-read! (socket-stream ready) buf)
                           (<span style=\"color: #a020f0;\">when</span> (starts-with? (list #\\newline #\\return #\\newline #\\return)
                                               (contents buf))
                             (format log-stream <span style=\"color: #8b2252;\">\"COMPLETE ~s~%\"</span>
                                     (coerce (reverse (contents buf)) 'string))
                             (setf conns (remove ready conns))
                             (remhash ready buffers)
                             (<span style=\"color: #a020f0;\">let</span> ((parsed (parse buf)))
                               (format log-stream <span style=\"color: #8b2252;\">\"PARSED: ~s~%\"</span> parsed)
                               (handle-request ready (parse buf))))))))
      (<span style=\"color: #a020f0;\">loop</span> for c on conns do (<span style=\"color: #a020f0;\">loop</span> while (socket-close c)))
      (setf *channel* nil))))</pre>

<p>That'll automatically clean up on any kind of error, including an Emacs interrupt, <i>and</i> it completely removes the need for <code>stop</code> and <code>*socket-handle*</code>. The above also uses <code>usocket:*wildcard-host*</code> instead of <code>\"127.0.0.1\"</code>, but that's a tiny change.</p>

<h3>On The Mechanism for Listening to Sockets</h3>

<p>There's a less obvious place that I wanted to figure something out for. Here's the above server with elided chunklets, just so we can focus in on the relevant details</p>

<pre>(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">start</span> (port <span style=\"color: #228b22;\">&amp;optional</span> (log-stream *standard-output*))
  (<span style=\"color: #a020f0;\">let</span> ((conns (list (socket-listen usocket:*wildcard-host* port <span style=\"color: #7a378b;\">:reuse-address</span> t)))
        ...)
    (<span style=\"color: #a020f0;\">unwind-protect</span>
         (<span style=\"color: #a020f0;\">loop</span> (<span style=\"color: #a020f0;\">loop</span> for ready in (wait-for-input conns <span style=\"color: #7a378b;\">:ready-only</span> t)
                  do (<span style=\"color: #a020f0;\">if</span> (typep ready 'stream-server-usocket)
                         (push (socket-accept ready) conns)
                         (<span style=\"color: #a020f0;\">let</span> (...)
                           (buffered-read! (socket-stream ready) buf)
                           (<span style=\"color: #a020f0;\">when</span> ...
                             ...
                             (setf conns (remove ready conns))
                             ...)))))
      ...)))</pre>

<p>The point I've been thinking about in particular is that bit that says <code>(wait-for-input conns ...)</code>, and the associated places where I either remove things from, or add things to <code>conns</code>. As written up there, it's a <code>list</code>. Which is to say, a singly linked list. And that means that adding a thing to it is <code>O1</code>, but removing a thing from it is <code>On</code>, and since we're doing that <code>(setf conns (remove ready conns))</code> inside of a loop, this version of start<code>start</code> is effectively an <code>On^2</code> procedure in the worst case. Not <i>horrible</i>, I guess, but I think I can do better.</p>

<p>The challenge here is that no matter what data structure we use to store connections, <code>wait-for-input</code> needs either a <code>socket</code>, or a list of <code>sockets</code>. Here's one attempt to do somewhat better</p>

<pre>(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">start</span> (port <span style=\"color: #228b22;\">&amp;optional</span> (log-stream *standard-output*))
  (<span style=\"color: #a020f0;\">let</span> ((server (socket-listen usocket:*wildcard-host* port <span style=\"color: #7a378b;\">:reuse-address</span> t))
        (conns (make-hash-table))
        ...)
    (<span style=\"color: #a020f0;\">unwind-protect</span>
         (<span style=\"color: #a020f0;\">loop</span> (<span style=\"color: #a020f0;\">loop</span> for ready in (wait-for-input (cons server (hash-keys conns)) <span style=\"color: #7a378b;\">:ready-only</span> t)
                  do (<span style=\"color: #a020f0;\">if</span> (typep ready 'stream-server-usocket)
                         (setf (gethash (socket-accept ready) conns) <span style=\"color: #7a378b;\">:in</span>)
                         (<span style=\"color: #a020f0;\">let</span> (...)
                           (buffered-read! (socket-stream ready) buf)
                           (<span style=\"color: #a020f0;\">when</span> ...
                             ...
                             (remhash ready conns)
                             ...)))))
      ...)))</pre>

<p>If we represent <code>conns</code> as a hash table, we can effectively pay some memory and some best-case time to mitigate worst-case time. Seems worth it, I'd say, but I'm not at all sure. New connection insertion now takes the form of <code>(setf (gethash (socket-accept ready) conns) :in)</code>, and connection removal is written as <code>(remhash ready conns)</code>, both of which are <code>O1</code>. The thing that gets markedly worse, ironically is the <code>wait-for-input</code> call itself. Unlike the original, which just passed the raw <code>conns</code>, we now have to pass <code>(cons server (hash-keys conns))</code>, which requires not only the <code>cons</code>ing of an entirely new list each time through, but also a full traversal of <code>conns</code>. Since the interface of <code>wait-for-input</code> demands an actual list, and not a generator or similar, the best you can do on the implementation of <code>hash-keys</code> is something like <code>(loop for k being the hash-keys of conns collect k)</code>. Which works, but isn't exactly stellar.</p>

<p>To its credit though, it <i>does</i> save us time in the worst case. As a result of this representation change, <code>start</code> now has <code>On</code> performance in both the worst and the best case. I get the feeling we could save some constants by opening up <code>usocket</code> and twiddling with <code>wait-for-input</code>, but a glance at the relevant files tells me that it's implemented something like four times, sometimes in expected configurations I can't easily test.</p>

<p>Ah well. The naive hash is a good enough improvement for now, and I am in the middle of reading through notes about <a href=\"http://en.wikipedia.org/wiki/Berkeley_sockets\">Berkeley Sockets</a> and <a href=\"http://beej.us/guide/bgnet/output/html/singlepage/bgnet.html#man\">their uses</a>. Hopefully, when I get to work I can convince one of my co-workers to take me through the nuts and bolts of the implementation in C. Maybe that will give me enough insight to write something that solves this problem in a satisfactory fashion.</p>
"))
((5202 3723 620992000) :INSERT (152 :POSTED 3590625600))
((5202 3723 620994000) :INSERT (152 :TAG :ALMOST-LITERATE-PROGRAMMING))
((5202 3723 620995000) :INSERT (152 :TAG :COMMON-LISP))
((5202 3723 621299000) :INSERT
 (153 :TITLE
  "Deal Journal - Interlude Three -- Being a Brief Musing on Session Mechanisms and Their Implementation"))
((5202 3723 621304000) :INSERT (153 :FILE "deal-interlude-3.html"))
((5202 3723 621305000) :INSERT (153 :EDITED 3610022331))
((5202 3723 621307000) :INSERT
 (153 :BODY
  "<h3>Deal Journal - Interlude Three -- Being a brief Musing on Session Mechanisms and Their Implementation</h3>

<p>I'm going to get to the reflections piece eventually, I swear. Or maybe I won't. Fuck I don't know.</p>

<p>Anyhow, sessions are things you'll need to deal with if you want to build any kind of stateful application on top of HTTP. Because an HTTP conversation is stateless by default. When you send an HTTP request out, as a general rule there's nothing in it that could let the server positively identify you. Which means that if you make two serial requests to the same site, they usually can't be absolutely sure that both of the requests you just sent came from you. They'll get data on your user agent<a href=\"#foot-Tue-Oct-15-222939EDT-2013\" name=\"note-Tue-Oct-15-222939EDT-2013\">[1]</a>, operating system, and your IP<a href=\"#foot-Tue-Oct-15-222942EDT-2013\" name=\"note-Tue-Oct-15-222942EDT-2013\">[2]</a>. And that's it. Now, granted, if you're me, it's fairly easy for the server to point out the <a href=\"http://www.debian.org/releases/testing/\">Debian Jessie</a>/<a href=\"http://conkeror.org/\">Conkeror</a> user originating at IP foo, but that's not something a server operator can normally rely on.</p>

<p>What they have to do is hand you some piece of data, and ask you to hand it back to them every time you visit. Usually this takes the form of a cookie, and if they've done their job sufficiently well, they can now take any bunch of requests they got with the same cookie and reasonably assume that it came from the same user.</p>

<h2>How Well is \"Sufficiently\"?</h2>

<p>Something should be obvious there. First, unless you're using SSL, that piece of state you've been handed is trivially sniffable. Which means that if you have a habit of logging into a server that doesn't make you use <code>https</code>, well, I hope you're not keeping anything <i>really</i> secret there. Second, unless your session state is pretty hard to guess, someone who wants to impersonate you probably can.</p>

<p>From a server operators' perspective, the <code>https</code> thing is easy. Just use SSL<a href=\"#foot-Tue-Oct-15-222945EDT-2013\" name=\"note-Tue-Oct-15-222945EDT-2013\">[3]</a>. As for guessability, we want the following properties:</p>

<ul>
  <li>each active user should have a unique session token, unless they choose to share it</li>
  <li>knowing any number of previous keys shouldn't give you any edge in guessing others<a href=\"#foot-Tue-Oct-15-222952EDT-2013\" name=\"note-Tue-Oct-15-222952EDT-2013\">[4]</a>.</li>
  <li>knowing how the keys are generated shouldn't give you any edge in guessing others<a href=\"#foot-Tue-Oct-15-222956EDT-2013\" name=\"note-Tue-Oct-15-222956EDT-2013\">[5]</a></li>
</ul>

<p>And that's close enough to the specification of a <a href=\"http://en.wikipedia.org/wiki/Cryptographically_secure_pseudorandom_number_generator\">CSPRNG</a> that if we had one, we could just use it. The absolute simplest way to do that is to use a secure block cipher on a randomly initialized counter. As it happens, Common Lisp Has That©™.</p>

<h2>Generating Session Tokens with Ironclad</h2>

<p>So, basically what we need is for our server to generate a secret key<a href=\"#foot-Tue-Oct-15-222959EDT-2013\" name=\"note-Tue-Oct-15-222959EDT-2013\">[6]</a>, then use that to encrypt the output of a counter, starting at some random point or possibly just modified by a random number.</p>

<p>In other words, if I'm understanding the proposition<a href=\"#foot-Tue-Oct-15-223003EDT-2013\" name=\"note-Tue-Oct-15-223003EDT-2013\">[7]</a>, you can do that like this</p>

<pre>(ql:quickload (list <span style=\"color: #7a378b;\">:ironclad</span> <span style=\"color: #7a378b;\">:cl-base64</span>))
(setf *random-state* (make-random-state t))

(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">sha256</span> ((message integer))
  (ironclad:digest-sequence
   <span style=\"color: #7a378b;\">:sha256</span> (ironclad:integer-to-octets message)))

(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">aes</span> ((message string) (key array))
  (<span style=\"color: #a020f0;\">let</span> ((cipher (ironclad:make-cipher <span style=\"color: #7a378b;\">:aes</span> <span style=\"color: #7a378b;\">:mode</span> <span style=\"color: #7a378b;\">:ecb</span> <span style=\"color: #7a378b;\">:key</span> key))
        (msg (ironclad:ascii-string-to-byte-array message)))
    (ironclad:encrypt-in-place cipher msg)
    msg))

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">new-session-token</span> ()
  (cl-base64:usb8-array-to-base64-string
   (aes (format nil <span style=\"color: #8b2252;\">\"~a::~a::~a\"</span>
                (gensym) (random (expt 2 128)) (get-universal-time))
        (sha256 (random (expt 2 128))))
   <span style=\"color: #7a378b;\">:uri</span> t))</pre>

<p>It's probably not necessary to generate a new key for each session, but it doesn't seem to be too expensive, so I'll spring for it.</p>

<p><code>sha256</code> is a thin wrapper around a particular <code>digest-sequence</code> call, and it produces a 32-element vector of octets representing the digested number. We feed that to an <code>aes</code> cipher as a key, along with a <code>(gensym)</code>, random number and the current time in milliseconds. <code>aes</code> is itself just a call to a set of <code>ironclad</code> functions that return a vector of octets representing the AES-encrypted message described above. That result is itself then fed through <code>cl-base64:usb8-array-to-base64-string</code>, which gives us a string we can use as a reasonably secure session token, provided we're using SSL. Here's a sample</p>

<pre>CL-USER&gt; (new-session-token)
<span style=\"color: #ff0000;\">\"LIAez844JJyKYuvOD9YGJ2rGlzTbVHzd-705gOB4FjSvJyNcw95BigdiC9vE_W5TMDo6MzU5MDg3MTU4Ng..\"</span>
CL-USER&gt; (new-session-token)
<span style=\"color: #ff0000;\">\"Sb455jzLxXHf0i_hALnowAd8JY-GC2aJJ9UekKPlj6AdlxnvpKGELJERnuugWLxWMjo6MzU5MDg3MTU4Ng..\"</span>
CL-USER&gt; (new-session-token)
<span style=\"color: #ff0000;\">\"fgwnkKaxqUfj2GHn_VcR0tBnasfzYOMeFQECAelV3vPc-7VAOxjs3nqm3wGTh9dLNzo6MzU5MDg3MTU4Nw..\"</span>
CL-USER&gt; (new-session-token)
<span style=\"color: #ff0000;\">\"MfCTWUJ0IavpPXY551xpmdTC-MHssRluqwTRsdetNI1bnOqXyoddl73CE8fQ2hAMOjM1OTA4NzE1ODg.\"</span>
CL-USER&gt; (new-session-token)
<span style=\"color: #ff0000;\">\"zckWhe4EJk8hrvVl-y8UeoC0Zqfb5nZAJtyhof66hAlzAN2OkHoCXgR9iTJhcKLVOjM1OTA4NzE1ODk.\"</span>
CL-USER&gt; (new-session-token)
<span style=\"color: #ff0000;\">\"_kQaKM6Ck8GiaRY1ZO4Y_gj0o6LuQT54oSXYSrCIMMORe5hazv0uz5TGPiod4m3NMzo6MzU5MDg3MTU5MA..\"</span>
CL-USER&gt; </pre>

<p>And, just to make sure,</p>

<pre>CL-USER&gt; (<span style=\"color: #a020f0;\">loop</span> repeat 1000000 do (new-session-token))
  seconds  |     gc     |     consed    |   calls   |  sec/call  |  name  
---------------------------------------------------------------
    27.586 |      0.692 | 5,610,325,328 | 1,000,000 |   0.000028 | NEW-SESSION-TOKEN
---------------------------------------------------------------
    27.586 |      0.692 | 5,610,325,328 | 1,000,000 |            | Total

estimated total profiling overhead: 1.79 seconds
overhead estimation parameters:
  1.6000001e-8s/call, 1.7919999e-6s total profiling, 7.4400003e-7s internal profiling
<span style=\"color: #ff0000;\">NIL</span>
CL-USER&gt; </pre>

<p>the profiler says session generation probably isn't going to be my bottleneck. Though I could probably tune it if I liked, not that I could see the gains offsetting the readability hit we'd take. If I <i>had</i> to start cutting somewhere, I'd make sure to only generate one key per server session, and figure out a more efficient way than <code>format</code> to put the key content together.</p>

<p>Actually, that <code>gensym</code>+<code>rand</code>-call+<code>get-universal-time</code> method strikes me as programming by superstition. Even more-so than the Hunchentoot session mechanism, which also includes the target IP/user-agent and validates these against the incoming request<a href=\"#foot-Wed-Oct-16-092953EDT-2013\" name=\"note-Wed-Oct-16-092953EDT-2013\">[8]</a>. If we were implementing the <i>real</i> requirements as I understand them, we'd just need</p>

<pre>(setf *random-state* (make-random-state t))

(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">sha256</span> ((message integer))
  (ironclad:digest-sequence
   <span style=\"color: #7a378b;\">:sha256</span> (ironclad:integer-to-octets message)))

(<span style=\"color: #a020f0;\">let</span> ((cipher (ironclad:make-cipher <span style=\"color: #7a378b;\">:aes</span> <span style=\"color: #7a378b;\">:key</span> (sha256 (random (expt 2 1024))) <span style=\"color: #7a378b;\">:mode</span> <span style=\"color: #7a378b;\">:ecb</span>))
      (counter (random (expt 2 512))))
  (<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">new-session-token</span> ()
    (<span style=\"color: #a020f0;\">let</span> ((raw (ironclad:integer-to-octets (incf counter))))
      (ironclad:encrypt-in-place cipher raw)
      (cl-base64:usb8-array-to-base64-string raw <span style=\"color: #7a378b;\">:uri</span> t))))</pre>

<p>Random key, check. Counter starting at a random number, check. And this should coincidentally perform much better too.</p>

<pre>CL-USER&gt; (<span style=\"color: #a020f0;\">loop</span> repeat 1000000 do (new-session-token))
measuring PROFILE overhead..done
  seconds  |     gc     |     consed    |   calls   |  sec/call  |  name  
---------------------------------------------------------------
     8.637 |      0.644 | 5,423,965,408 | 1,000,000 |   0.000009 | NEW-SESSION-TOKEN
---------------------------------------------------------------
     8.637 |      0.644 | 5,423,965,408 | 1,000,000 |            | Total

estimated total profiling overhead: 1.82 seconds
overhead estimation parameters:
  8.000001e-9s/call, 1.816e-6s total profiling, 7.92e-7s internal profiling
<span style=\"color: #ff0000;\">NIL</span>
CL-USER&gt; </pre>

<p>Yup.</p>

<p>Of course, I still don't have enough confidence in my own assessment to just run with all this, so I'll be asking questions first.</p>

<span class=\"edit\">EDIT:

<p>It turns out that <a href=\"http://method-combination.net/lisp/ironclad/#prng\"><code>:ironclad</code> has a built-in CSPRNG option</a> that implements <a href=\"http://en.wikipedia.org/wiki/Fortuna_(PRNG)\">Fortuna</a>. If we use that, our implementation gets much simpler, but mildly slower<a href=\"#foot-Wed-Oct-16-165818EDT-2013\" name=\"note-Wed-Oct-16-165818EDT-2013\">[9]</a>.</p>

<pre>(ql:quickload (list <span style=\"color: #7a378b;\">:ironclad</span> <span style=\"color: #7a378b;\">:cl-base64</span>))

(<span style=\"color: #a020f0;\">let</span> ((prng (ironclad:make-prng <span style=\"color: #7a378b;\">:fortuna</span>)))
  (<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">new-session-token</span> ()
    (cl-base64:usb8-array-to-base64-string
     (ironclad:random-data 32 prng) <span style=\"color: #7a378b;\">:uri</span> t)))</pre>

<p>That's it.</p>

<p>No encryption, no fiddling with <code>random</code>, no assigning results of <code>make-random-state</code> calls. Just initialize a <code>:fortuna</code> instnce, and collect random output in batches of 32.</p>

Wed, 16 Oct, 2013</span>

<p>Other than that, what's left is putting together a session table with its own lock to store session information indexed by these IDs. Oh, and also sending them out to the client. I guess that's kind of important. Both are waiting for next time though, or this will quickly cease being \"brief\".</p>


<hr />
<h5>Footnotes</h5>
<p>1 - <a href=\"#note-Tue-Oct-15-222939EDT-2013\" name=\"foot-Tue-Oct-15-222939EDT-2013\">[back]</a> - Unless you've spoofed it, as I often do to access the many \"IE only\" pages built by the legion of typing monkeys in my current companies' HR department.</p>

<p>2 - <a href=\"#note-Tue-Oct-15-222942EDT-2013\" name=\"foot-Tue-Oct-15-222942EDT-2013\">[back]</a> - Unless you're behind a proxy, or a dynamic IP.</p>

<p>3 - <a href=\"#note-Tue-Oct-15-222945EDT-2013\" name=\"foot-Tue-Oct-15-222945EDT-2013\">[back]</a> -I'm not implementing this myself, obviously. The current plan is still to hide behind nginx for static file serving, so we can have it handle SSL certificates for us to. <a href=\"http://nginx.org/en/docs/http/configuring_https_servers.html\">It's not even terribly difficult</a>.</p>

<p>4 - <a href=\"#note-Tue-Oct-15-222952EDT-2013\" name=\"foot-Tue-Oct-15-222952EDT-2013\">[back]</a> - Except in the trivial sense that each active user should have a unique one, so if as an attacker you write a script to grab a few thousand keys, you can be sure that other people aren't using those specific ones.</p>

<p>5 - <a href=\"#note-Tue-Oct-15-222956EDT-2013\" name=\"foot-Tue-Oct-15-222956EDT-2013\">[back]</a> - Except in the trivial sense that you can avoid guessing short dictionary words, or dates or something.</p>

<p>6 - <a href=\"#note-Tue-Oct-15-222959EDT-2013\" name=\"foot-Tue-Oct-15-222959EDT-2013\">[back]</a> - That key, incidentally, should have similar properties to session tokens. It should be difficult to guess no matter how many of them you've seen, and running your own copy of Deal to extract a bunch of keys should give you no advantage when guessing another servers' secret key.</p>

<p>7 - <a href=\"#note-Tue-Oct-15-223003EDT-2013\" name=\"foot-Tue-Oct-15-223003EDT-2013\">[back]</a> - And that's not a certainty. I'm not exactly a math guy, so it's entirely possible that I'm misunderstanding the requirement at some step of this process. I'll certainly keep you up to date on any revelations.</p>

<p>8 - <a href=\"#note-Wed-Oct-16-092953EDT-2013\" name=\"foot-Wed-Oct-16-092953EDT-2013\">[back]</a> - When you think about it, all that can possibly do is make it slightly harder for attackers who've guessed a currently active session token, and if you've picked a Sufficiently Large©™ key space, the possibility of a guess seems to drop to negligible levels. Attackers who rely on sniffing get all the associated data you'll be including along with the session token, so they can still easily impersonate your users. Meanwhile, this method of guarding requires you to decrypt and validate a session token on each request you make. Not sure it's the right trade-off, but like I said, I'll keep you posted on revelations.</p>

<p>9 - <a href=\"#note-Wed-Oct-16-165818EDT-2013\" name=\"foot-Wed-Oct-16-165818EDT-2013\">[back]</a> - Also, the runtime of <code>ironclad:make-prng</code> is extremely inconsistent. It takes between 8 and 76 hippopotomi to complete, and I'm not entirely sure what plays into that. Possibly entropy shortages in the underlying OS? Which also reminds me; this version isn't Windows friendly. So if you were planning to run Deal on Windows, I'm deeply sorry for you.</p>
      "))
((5202 3723 621413000) :INSERT (153 :POSTED 3590798400))
((5202 3723 621415000) :INSERT (153 :TAG :COMMON-LISP))
((5202 3723 621417000) :INSERT (153 :TAG :IDEA-PEELING))
((5202 3723 621419000) :INSERT (153 :TAG :SECURITY))
((5202 3723 621420000) :INSERT (153 :TAG :SPECULATION))
((5202 3723 621615000) :INSERT (154 :TITLE "defsetf Examples"))
((5202 3723 621620000) :INSERT (154 :FILE "defsetf-examples.html"))
((5202 3723 621622000) :INSERT (154 :EDITED 3610022331))
((5202 3723 621624000) :INSERT
 (154 :BODY
  "<p>Have you ever defined a custom class with hash components? Something like, say, a session?</p>

<pre>(<span style=\"color: #a020f0;\">defclass</span> <span style=\"color: #228b22;\">session</span> ()
  ((started <span style=\"color: #7a378b;\">:reader</span> started <span style=\"color: #7a378b;\">:initform</span> (get-universal-time))
   (last-poked <span style=\"color: #7a378b;\">:accessor</span> last-poked <span style=\"color: #7a378b;\">:initform</span> (get-universal-time))
   (token <span style=\"color: #7a378b;\">:reader</span> token <span style=\"color: #7a378b;\">:initarg</span> <span style=\"color: #7a378b;\">:token</span>)
   (session-values <span style=\"color: #7a378b;\">:reader</span> session-values <span style=\"color: #7a378b;\">:initform</span> (make-hash-table <span style=\"color: #7a378b;\">:test</span> 'equal))))</pre>

<p>If you have, you probably also figured it would be better to define some sugar for look-ups rather than doing <code>(gethash foo (session-values bar))</code> every damn time. Something like</p>

<pre>(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">lookup</span> (key (session session))
  (gethash key (session-values session)))</pre>

<p><b>And</b> if you've gotten that far, you probably noticed that you can't just go ahead and say <code>(setf (lookup :test foo) new-val)</code>, because if you tried, you'd get this</p>

<pre>The function (COMMON-LISP:SETF COMMON-LISP-USER::LOOKUP) is undefined.
   [Condition of type UNDEFINED-FUNCTION]

Restarts:
 0: [RETRY] Retry SLIME REPL evaluation request.
 1: [*ABORT] Return to SLIME's top level.
 2: [ABORT] Abort thread (#&lt;THREAD <span style=\"color: #8b2252;\">\"repl-thread\"</span> RUNNING {10047D0113}&gt;)</pre>

<p>There are two ways of fixing this.</p>

<h3>If You Don't Need CLOS Support</h3>

<p>For instance, if your <code>lookup</code> is a function rather than a method, you can get away with doing something like this</p>

<pre>(<span style=\"color: #a020f0;\">defsetf</span> <span style=\"color: #0000ff;\">lookup</span> (key session) (new-value)
  `(setf (gethash ,key (session-values ,session)) ,new-value))</pre>

<p>or, annotated</p>

<pre>(<span style=\"color: #a020f0;\">defsetf</span> [name-of-lookup-function] (<span style=\"color: #228b22;\">&amp;rest</span> [lookip-function-args]) (new-value)
  [macro-body])</pre>

<p>Once you've defined that as appropriate, you <i>can</i> just</p>

<pre>CL-USER&gt; (lookup <span style=\"color: #7a378b;\">:test</span> foo)
<span style=\"color: #ff0000;\">NIL</span>
<span style=\"color: #ff0000;\">NIL</span>
CL-USER&gt; (setf (lookup <span style=\"color: #7a378b;\">:test</span> foo) 'new-val)
<span style=\"color: #ff0000;\">NEW-VAL</span>
CL-USER&gt; (lookup <span style=\"color: #7a378b;\">:test</span> foo)
<span style=\"color: #ff0000;\">NEW-VAL</span>
<span style=\"color: #ff0000;\">T</span>
CL-USER&gt; </pre>

<p>This isn't satisfying if the lookup abstraction you've defined is a method though. Because then you get into this problem</p>

<pre>CL-USER&gt; (<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">lookup</span> (key (session session))
  (gethash key (session-values session)))

(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">lookup</span> (key (hash hash-table))
  (gethash key hash))
STYLE-WARNING: Implicitly creating new generic function LOOKUP.
<span style=\"color: #ff0000;\">#&lt;STANDARD-METHOD LOOKUP (T HASH-TABLE) {1005048E03}&gt;</span>
CL-USER&gt; (<span style=\"color: #a020f0;\">defsetf</span> <span style=\"color: #0000ff;\">lookup</span> (key session) (new-value)
  `(setf (gethash ,key (session-values ,session)) ,new-value))
<span style=\"color: #ff0000;\">LOOKUP</span>
CL-USER&gt; (<span style=\"color: #a020f0;\">defparameter</span> <span style=\"color: #a0522d;\">foo</span> (make-instance 'session))
<span style=\"color: #ff0000;\">FOO</span>
CL-USER&gt; (<span style=\"color: #a020f0;\">defparameter</span> <span style=\"color: #a0522d;\">bar</span> (make-hash-table))
<span style=\"color: #ff0000;\">BAR</span>
CL-USER&gt; (lookup <span style=\"color: #7a378b;\">:test</span> foo)
<span style=\"color: #ff0000;\">NIL</span>
<span style=\"color: #ff0000;\">NIL</span>
CL-USER&gt; (lookup <span style=\"color: #7a378b;\">:test</span> bar)
<span style=\"color: #ff0000;\">NIL</span>
<span style=\"color: #ff0000;\">NIL</span>
CL-USER&gt; (setf (lookup <span style=\"color: #7a378b;\">:test</span> foo) 'one)
<span style=\"color: #ff0000;\">ONE</span>
CL-USER&gt; (setf (lookup <span style=\"color: #7a378b;\">:test</span> bar) 'two)

There is no applicable method for the generic function
  #&lt;STANDARD-GENERIC-FUNCTION SESSION-VALUES (1)&gt;
when called with arguments
  (#&lt;HASH-TABLE <span style=\"color: #7a378b;\">:TEST</span> EQL <span style=\"color: #7a378b;\">:COUNT</span> 0 {10051DC633}&gt;).
   [Condition of type SIMPLE-ERROR]

Restarts:
 0: [RETRY] Retry calling the generic function.
 1: [RETRY] Retry SLIME REPL evaluation request.
 2: [*ABORT] Return to SLIME's top level.
 3: [ABORT] Abort thread (#&lt;THREAD <span style=\"color: #8b2252;\">\"repl-thread\"</span> RUNNING {10047D0113}&gt;)

Backtrace:
  0: ((SB-PCL::FAST-METHOD NO-APPLICABLE-METHOD (T)) #&lt;unused argument&gt; #&lt;unused argument&gt; #&lt;STANDARD-GENERIC-FUNCTION SESSION-VALUES (1)&gt; #&lt;HASH-TABLE <span style=\"color: #7a378b;\">:TEST</span> EQL <span style=\"color: #7a378b;\">:COUNT</span> 0 {10051DC633}&gt;)
  1: (SB-PCL::CALL-NO-APPLICABLE-METHOD #&lt;STANDARD-GENERIC-FUNCTION SESSION-VALUES (1)&gt; (#&lt;HASH-TABLE <span style=\"color: #7a378b;\">:TEST</span> EQL <span style=\"color: #7a378b;\">:COUNT</span> 0 {10051DC633}&gt;))
  2: (#<span style=\"color: #7a378b;\">:EVAL-THUNK</span>)
  ...</pre>

<h3>If You Need CLOS Support</h3>

<p>Then you'll need to define a <code>setf</code> generic. In the example we've been using, you could do the following:</p>

<pre>(<span style=\"color: #a020f0;\">defgeneric</span> (<span style=\"color: #0000ff;\">setf lookup)</span> (new-value key session)
  (<span style=\"color: #7a378b;\">:documentation</span> <span style=\"color: #8b2252;\">\"Setter for lookup methods\"</span>))

(<span style=\"color: #a020f0;\">defmethod</span> (<span style=\"color: #0000ff;\">setf lookup)</span> (new-value key (session session))
  (setf (gethash key (session-values session)) new-value))

(<span style=\"color: #a020f0;\">defmethod</span> (<span style=\"color: #0000ff;\">setf lookup)</span> (new-value key (hash hash-table))
  (setf (gethash key hash) new-value))</pre>

<p>Which would then let you polymorphically use <code>setf</code> exactly the way you'd expect.</p>

<pre>CL-USER&gt; (<span style=\"color: #a020f0;\">defparameter</span> <span style=\"color: #a0522d;\">foo</span> (make-instance 'session))
<span style=\"color: #ff0000;\">FOO</span>
CL-USER&gt; (<span style=\"color: #a020f0;\">defparameter</span> <span style=\"color: #a0522d;\">foo</span> (make-hash-table))
<span style=\"color: #ff0000;\">FOO</span>
CL-USER&gt; (<span style=\"color: #a020f0;\">defparameter</span> <span style=\"color: #a0522d;\">foo</span> (make-instance 'session))
<span style=\"color: #ff0000;\">FOO</span>
CL-USER&gt; (<span style=\"color: #a020f0;\">defparameter</span> <span style=\"color: #a0522d;\">bar</span> (make-hash-table))
<span style=\"color: #ff0000;\">BAR</span>
CL-USER&gt; (list (lookup <span style=\"color: #7a378b;\">:test</span> foo) (lookup <span style=\"color: #7a378b;\">:test</span> bar))
<span style=\"color: #ff0000;\">(NIL NIL)</span>
CL-USER&gt; (setf (lookup <span style=\"color: #7a378b;\">:test</span> foo) 'session (lookup <span style=\"color: #7a378b;\">:test</span> bar) 'hash)
<span style=\"color: #ff0000;\">HASH</span>
CL-USER&gt; (list (lookup <span style=\"color: #7a378b;\">:test</span> foo) (lookup <span style=\"color: #7a378b;\">:test</span> bar))
<span style=\"color: #ff0000;\">(SESSION HASH)</span>
CL-USER&gt;</pre>

<p>There. Hopefully the next person who searches for \"<code>defsetf</code> examples\" will find something more useful than I did.</p>
"))
((5202 3723 621682000) :INSERT (154 :POSTED 3591144000))
((5202 3723 621684000) :INSERT (154 :TAG :COMMON-LISP))
((5202 3723 621685000) :INSERT (154 :TAG :LISP))
((5202 3723 621687000) :INSERT (154 :TAG :SNIPPETS))
((5202 3723 621944000) :INSERT (155 :TITLE "Xmonad Tweaks"))
((5202 3723 621948000) :INSERT (155 :FILE "xmonad-tweaks.html"))
((5202 3723 621952000) :INSERT (155 :EDITED 3610022331))
((5202 3723 621954000) :INSERT
 (155 :BODY
  "<p>Just a quickie to share a tweak I had to make to my <code>xmonad.hs</code>. Not sure if there's a better way to do this, but hey.</p>

<p>The goal was to finally, actually get working hibernation on my laptop. I usually use it in short bursts, so I just got used to shutting it down between sessions. However, I recently started using a work laptop running Windows 7 and hibernation has been useful there<a href=\"#foot-Mon-Oct-21-121457EDT-2013\" name=\"note-Mon-Oct-21-121457EDT-2013\">[1]</a>, and I'll be damned if the non-free shitbox is going to have a mildly useful feature that my machine doesn't.</p>

<p>The way you get a Debian machine to hibernate or suspend is with the appropriately named <code>pm-hibernate</code> and <code>pm-suspend</code> commands<a href=\"#foot-Mon-Oct-21-121501EDT-2013\" name=\"note-Mon-Oct-21-121501EDT-2013\">[2]</a>, so I figured this would be a fairly easy key binding</p>

<pre><span style=\"color: #a0522d;\">...</span>
, (<span style=\"color: #8b2252;\">\"C-t C-&lt;Delete&gt;\"</span>, spawn <span style=\"color: #8b2252;\">\"pm-suspend\"</span>)
, (<span style=\"color: #8b2252;\">\"C-t &lt;Delete&gt;\"</span>, spawn <span style=\"color: #8b2252;\">\"pm-hibernate\"</span>)
<span style=\"color: #a0522d;\">...</span></pre>

<p>Unfortunately, the <code>pm-*</code> are <code>root</code> user commands. And Xmonad doesn't automatically prompt for a password when you do something like <code>su -c pm-suspend</code>. <i>And</i>, unlike with <code>sudo</code>, you can't pass a password into <code>su</code>. So that approach is right out.</p>

<p>I googled around for alternatives for a little while, but What I ended up doing was finally adding myself to the <code>sudo</code> group, and defining this function for my own nefarious purposes</p>

<pre><span style=\"color: #0000ff;\">sudoSpawn</span> command <span style=\"color: #a0522d;\">=</span> withPrompt <span style=\"color: #8b2252;\">\"Password\"</span> <span style=\"color: #a0522d;\">$</span> run command
  <span style=\"color: #a020f0;\">where</span> run command password <span style=\"color: #a0522d;\">=</span> spawn <span style=\"color: #a0522d;\">$</span> concat [<span style=\"color: #8b2252;\">\"echo \"</span>, password, <span style=\"color: #8b2252;\">\" | sudo -S \"</span>, command]</pre>

<p><code>withPrompt</code> is another little utility piece I had written for some desktop changers; it's defined as</p>

<pre><span style=\"color: #0000ff;\">withPrompt</span> prompt fn <span style=\"color: #a0522d;\">=</span> inputPrompt xpConf prompt <span style=\"color: #a0522d;\">?+</span> fn</pre>

<p>The above defined, I can now bind super-user commands to Xmonad keystrokes</p>

<pre><span style=\"color: #a0522d;\">...</span>
, (<span style=\"color: #8b2252;\">\"C-t C-&lt;Delete&gt;\"</span>, sudoSpawn <span style=\"color: #8b2252;\">\"pm-suspend\"</span>)
, (<span style=\"color: #8b2252;\">\"C-t &lt;Delete&gt;\"</span>, sudoSpawn <span style=\"color: #8b2252;\">\"pm-hibernate\"</span>)
<span style=\"color: #a0522d;\">...</span></pre>

<p>with the caveat that I need to enter my password each time I invoke these. I'll see if that's too annoying. Worst case scenario, I'll pull some trickery to cache it the first time I enter it.</p>

<p>Just in case you care, my complete <code>xmonad.hs</code> now looks like:</p>

<pre><span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">System.Directory</span>
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">XMonad</span>
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">XMonad.Actions.CycleWS</span>
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">XMonad.Actions.CycleWindows</span>
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">XMonad.Actions.WindowGo</span>
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">XMonad.Actions.GridSelect</span>
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">XMonad.Prompt</span>
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">XMonad.Prompt.Input</span>
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">XMonad.Util.EZConfig</span>
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">XMonad.Util.CustomKeys</span>

<span style=\"color: #a020f0;\">import</span> <span style=\"color: #a020f0;\">qualified</span> <span style=\"color: #228b22;\">XMonad.StackSet</span> <span style=\"color: #a020f0;\">as</span> <span style=\"color: #228b22;\">S</span>

<span style=\"color: #0000ff;\">main</span> <span style=\"color: #a0522d;\">=</span> xmonad <span style=\"color: #a0522d;\">$</span> conf
       <span style=\"color: #a0522d;\">`additionalKeysP`</span>
       [ (<span style=\"color: #8b2252;\">\"C-t C-d C-b\"</span>, withFilePrompt <span style=\"color: #8b2252;\">\"Pic: \"</span> bgFolder setDesktopBackground)
       , (<span style=\"color: #8b2252;\">\"&lt;Print&gt;\"</span>, withFilePrompt <span style=\"color: #8b2252;\">\"Name: \"</span> screenshotFolder capToFile)
         
       , (<span style=\"color: #8b2252;\">\"C-t C-&lt;Delete&gt;\"</span>, sudoSpawn <span style=\"color: #8b2252;\">\"pm-suspend\"</span>)
       , (<span style=\"color: #8b2252;\">\"C-t &lt;Delete&gt;\"</span>, sudoSpawn <span style=\"color: #8b2252;\">\"pm-hibernate\"</span>)
         
       , (<span style=\"color: #8b2252;\">\"C-t p\"</span>, spawn <span style=\"color: #8b2252;\">\"dmenu_run\"</span>)
       , (<span style=\"color: #8b2252;\">\"C-t C-p\"</span>, spawn <span style=\"color: #8b2252;\">\"dmenu_run\"</span>)
       , (<span style=\"color: #8b2252;\">\"C-t &lt;Return&gt;\"</span>, spawn <span style=\"color: #8b2252;\">\"xterm\"</span>)
       , (<span style=\"color: #8b2252;\">\"C-t e\"</span>, runOrRaise <span style=\"color: #8b2252;\">\"emacs\"</span> (className <span style=\"color: #a0522d;\">=?</span> <span style=\"color: #8b2252;\">\"Emacs\"</span>))
       , (<span style=\"color: #8b2252;\">\"C-t C-e\"</span>, runOrRaise <span style=\"color: #8b2252;\">\"emacs\"</span> (className <span style=\"color: #a0522d;\">=?</span> <span style=\"color: #8b2252;\">\"Emacs\"</span>))
       , (<span style=\"color: #8b2252;\">\"C-t b\"</span>, spawn <span style=\"color: #8b2252;\">\"chromium --proxy-server=\\\"socks://localhost:9050\\\" --incognito\"</span>)
       , (<span style=\"color: #8b2252;\">\"C-t C-b\"</span>, spawn <span style=\"color: #8b2252;\">\"chromium --proxy-server=\\\"socks://localhost:9050\\\" --user-agent=\\\"Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.4 (KHTML, like Gecko) Chrome/22.0.1229.94 Safari/537.4\\\"\"</span>)
         
       , (<span style=\"color: #8b2252;\">\"C-t s\"</span>, nextWS)
       , (<span style=\"color: #8b2252;\">\"C-t C-s\"</span>, prevWS)
       , (<span style=\"color: #8b2252;\">\"C-t w\"</span>, toggleWS)
       , (<span style=\"color: #8b2252;\">\"C-t C-w\"</span>, toggleWS)
       , (<span style=\"color: #8b2252;\">\"C-t C-t\"</span>, windowSwap)
       , (<span style=\"color: #8b2252;\">\"C-t t\"</span>, windows <span style=\"color: #228b22;\">S</span><span style=\"color: #a0522d;\">.</span>swapDown)
       , (<span style=\"color: #8b2252;\">\"C-t C-j\"</span>, windows <span style=\"color: #228b22;\">S</span><span style=\"color: #a0522d;\">.</span>swapDown)
       , (<span style=\"color: #8b2252;\">\"C-t j\"</span>, windows <span style=\"color: #228b22;\">S</span><span style=\"color: #a0522d;\">.</span>focusDown)
       , (<span style=\"color: #8b2252;\">\"C-t k\"</span>, windows <span style=\"color: #228b22;\">S</span><span style=\"color: #a0522d;\">.</span>focusUp)
       , (<span style=\"color: #8b2252;\">\"C-t C-k\"</span>, windows <span style=\"color: #228b22;\">S</span><span style=\"color: #a0522d;\">.</span>swapUp)
       , (<span style=\"color: #8b2252;\">\"C-t g\"</span>, goToSelected defaultGSConfig)
         
       , (<span style=\"color: #8b2252;\">\"C-t C-&lt;Space&gt;\"</span>, sendMessage <span style=\"color: #228b22;\">NextLayout</span>)
       , (<span style=\"color: #8b2252;\">\"C-t C-h\"</span>, sendMessage <span style=\"color: #228b22;\">Shrink</span>)
       , (<span style=\"color: #8b2252;\">\"C-t C-l\"</span>, sendMessage <span style=\"color: #228b22;\">Expand</span>)
         
       ]
  <span style=\"color: #a020f0;\">where</span> conf <span style=\"color: #a0522d;\">=</span> defaultConfig { <span style=\"color: #228b22;\">XMonad</span><span style=\"color: #a0522d;\">.</span>startupHook <span style=\"color: #a0522d;\">=</span> onStartup, modMask <span style=\"color: #a0522d;\">=</span> mod4Mask }

<span style=\"color: #b22222;\">--</span><span style=\"color: #b22222;\">-------- Config Options
</span><span style=\"color: #0000ff;\">bgFolder</span> <span style=\"color: #a0522d;\">=</span> <span style=\"color: #8b2252;\">\"/home/inaimathi/pictures/backgrounds/\"</span>
<span style=\"color: #0000ff;\">screenshotFolder</span> <span style=\"color: #a0522d;\">=</span> <span style=\"color: #8b2252;\">\"/home/inaimathi/pictures/screenshots/\"</span>

<span style=\"color: #0000ff;\">onStartup</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">X</span> <span style=\"color: #228b22;\">()</span>
<span style=\"color: #0000ff;\">onStartup</span> <span style=\"color: #a0522d;\">=</span> <span style=\"color: #a020f0;\">do</span>
  spawn <span style=\"color: #8b2252;\">\"set-monitors\"</span>
  spawn <span style=\"color: #8b2252;\">\"pmount /dev/mmcblk0p1\"</span>
  setDesktopBackground <span style=\"color: #8b2252;\">\"edge-of-the-world.jpg\"</span>

<span style=\"color: #b22222;\">--</span><span style=\"color: #b22222;\">-------- Helper Functions
</span><span style=\"color: #0000ff;\">setDesktopBackground</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">MonadIO</span> m <span style=\"color: #a0522d;\">=&gt;</span> <span style=\"color: #228b22;\">String</span> <span style=\"color: #a0522d;\">-&gt;</span> m <span style=\"color: #228b22;\">()</span>
<span style=\"color: #0000ff;\">setDesktopBackground</span> pic <span style=\"color: #a0522d;\">=</span> spawn <span style=\"color: #a0522d;\">$</span> concat [<span style=\"color: #8b2252;\">\"feh --no-xinerama --bg-fill \"</span>, bgFolder, pic]
        
<span style=\"color: #0000ff;\">capToFile</span> <span style=\"color: #a0522d;\">::</span> <span style=\"color: #228b22;\">MonadIO</span> m <span style=\"color: #a0522d;\">=&gt;</span> <span style=\"color: #228b22;\">String</span> <span style=\"color: #a0522d;\">-&gt;</span> m <span style=\"color: #228b22;\">()</span>
<span style=\"color: #0000ff;\">capToFile</span> picName <span style=\"color: #a0522d;\">=</span> spawn <span style=\"color: #a0522d;\">$</span> concat [<span style=\"color: #8b2252;\">\"import \"</span>, screenshotFolder, picName]

<span style=\"color: #0000ff;\">sudoSpawn</span> command <span style=\"color: #a0522d;\">=</span> withPrompt <span style=\"color: #8b2252;\">\"Password\"</span> <span style=\"color: #a0522d;\">$</span> run command
  <span style=\"color: #a020f0;\">where</span> run command password <span style=\"color: #a0522d;\">=</span> spawn <span style=\"color: #a0522d;\">$</span> concat [<span style=\"color: #8b2252;\">\"echo \"</span>, password, <span style=\"color: #8b2252;\">\" | sudo -S \"</span>, command]

<span style=\"color: #b22222;\">--</span><span style=\"color: #b22222;\">-------- Utility
</span><span style=\"color: #0000ff;\">windowSwap</span> <span style=\"color: #a0522d;\">=</span> <span style=\"color: #a020f0;\">do</span>
  windows <span style=\"color: #228b22;\">S</span><span style=\"color: #a0522d;\">.</span>focusDown
  windows <span style=\"color: #228b22;\">S</span><span style=\"color: #a0522d;\">.</span>swapUp

<span style=\"color: #0000ff;\">xpConf</span> <span style=\"color: #a0522d;\">=</span> defaultXPConfig { position <span style=\"color: #a0522d;\">=</span> <span style=\"color: #228b22;\">Top</span> }

<span style=\"color: #0000ff;\">withPrompt</span> prompt fn <span style=\"color: #a0522d;\">=</span> inputPrompt xpConf prompt <span style=\"color: #a0522d;\">?+</span> fn

<span style=\"color: #0000ff;\">withCompletingPrompt</span> prompt completions fn <span style=\"color: #a0522d;\">=</span> 
  inputPromptWithCompl xpConf prompt comp <span style=\"color: #a0522d;\">?+</span> fn
  <span style=\"color: #a020f0;\">where</span> comp <span style=\"color: #a0522d;\">=</span> mkComplFunFromList completions

<span style=\"color: #0000ff;\">withFilePrompt</span> prompt directory fn <span style=\"color: #a0522d;\">=</span> <span style=\"color: #a020f0;\">do</span>
  files <span style=\"color: #a0522d;\">&lt;-</span> liftIO <span style=\"color: #a0522d;\">$</span> getDirectoryContents directory
  <span style=\"color: #a020f0;\">let</span> fs <span style=\"color: #a0522d;\">=</span> filter relevant files
      relevant f <span style=\"color: #a0522d;\">=</span> <span style=\"color: #8b2252;\">'.'</span> <span style=\"color: #a0522d;\">/=</span> head f
  withCompletingPrompt prompt fs fn</pre>


<hr />
<h5>Footnotes</h5>
<p>1 - <a href=\"#note-Mon-Oct-21-121457EDT-2013\" name=\"foot-Mon-Oct-21-121457EDT-2013\">[back]</a> - Granted, because the boot time on that machine is something like 5 minutes instead of the 12 seconds I'm used to waiting, Hibernate is a goddamn necessity, but I digress.</p>

<p>2 - <a href=\"#note-Mon-Oct-21-121501EDT-2013\" name=\"foot-Mon-Oct-21-121501EDT-2013\">[back]</a> - Ideally, I'd just be using hibernate, but there are some issue. I've upgraded my ram since installing the OS, which means that my <code>swap</code> partition isn't big enough to store a memory dump, and I can't seem to resize it with <code>gparted</code>, with or without <code>swapoff</code>/<code>swapon</code> magic. Luckily, I've had a larger hard drive waiting for me to crack open the box and configure it to my liking, so I'll just do that this week rather than procrastinating. In the meantime though, I'm <code>suspend</code>ing instead.</p>
"))
((5202 3723 622051000) :INSERT (155 :POSTED 3591316800))
((5202 3723 622053000) :INSERT (155 :TAG :HASKELL))
((5202 3723 622055000) :INSERT (155 :TAG :SNIPPETS))
((5202 3723 622254000) :INSERT (156 :TITLE "FBP in Common Lisp"))
((5202 3723 622259000) :INSERT (156 :FILE "fbp-in-common-lisp.html"))
((5202 3723 622261000) :INSERT (156 :EDITED 3610022331))
((5202 3723 622262000) :INSERT
 (156 :BODY "<p>Guess what!</p>

<p>No.</p>

<p>I can finally tell you what I'm doing at work. A friend has suggested that I just not mention that there are things I still can't talk about, so I won't. In any case, all the interesting stuff is fair game. Apparently, I'm allowed to talk about it in much greater detail than I can write about it because a persistent record is still frightening to some humans. Progress, I guess.</p>

<p>We've been doing <a href=\"http://en.wikipedia.org/wiki/Flow-based_programming\">Flow Based Programming</a> in <a href=\"http://www.gigamonkeys.com/book/\">Common Lisp</a>.</p>

<p><b>Fuck</b> it feels good to finally get that off my chest. I have no idea how <a href=\"http://steve-yegge.blogspot.ca/\">Yegge</a> stopped blogging. I'm guessing he hasn't, but rather just stopped publishing the results. I've been writing about one thing for the past little while, and the number of ideas I <i>need</i> to discuss with the <a href=\"http://en.wikipedia.org/wiki/Rubber_duck_debugging\">rubber duck</a> at some point is staggering. If my output rate were zero, I would probably have a pretty tenuous grip on my sanity by this point.</p>

<p>This is heading off topic. Once more, <i>with feeling</i></p>

<h3>Flow Based Programming in Common Lisp</h3>

<p>I'm not sure what I think about it yet. Lets just be clear about that up-front. You'll find plenty of FBP True Believers on the appropriate <a href=\"https://groups.google.com/forum/#!forum/flow-based-programming\">Google group</a><a href=\"#foot-Wed-Nov-06-161759EST-2013\" name=\"note-Wed-Nov-06-161759EST-2013\">[1]</a>, but I am not one of those. The fact that I'm willing to throw a couple years behind the idea implies curiosity, nothing more.</p>

<p>A matter quite apart from the underlying structure is our implementation of it, and I <b>am</b> certain that it's over-complicated. Granted, based on all the others I've seen, ours is the <i>least</i> over-complicated, but still. That's something I'll aim to fix, with a personal project as a last resort, if I can't convince anyone else about it. But I digress. Again.</p>

<p>Here's why I'm curious. This is what a basic web server looks like in flow-based terms:</p>

[fbp-web-server.jpg]

<p>And here's what it looks like once you add SSE capability to it:</p>

[fbp-web-with-SSE.jpg]

<p>and finally, here's what it looks like when we add sessions into the mix</p>

[fbp-web-with-SSE+Session.jpg]

<p>The above is by far the most useful set of images I've got for understanding what's actually going on behind the scenes of a page-view. I've worked through the principles in multiple languages and spent quite a bit of time thinking about it, but until I sat down to draw it out, it didn't feel like I <i>really</i> understood what needed to be done. You probably don't know the same languages I do, but the above is still likely intelligible to you. So that's why I'm curious.</p>

<h3>Flow Based Programming vs. Functional Programming</h3>

<p>Before I go, I want to tackle this, because several people I've talked to have gotten tripped up in the comparison. Including me. I ended up deleting a few lines from this post that said</p>

<blockquote>
  The underlying problem for my lack of \"wow\" reaction might actually be my usual languages. I'm <i>used</i> to thinking about streams moving between inter-connected, lazy processors. That's the main way I conceptualize Haskell. In fact, if you squint just a bit, it's the way you can conceptualize most functional programs, pure or not. <span class=\"sig\">-Inaimathi</span>
</blockquote>

<p>The difference is that functional programming focuses on partial conceptual separation, whereas FBP takes the isolation concept a few steps further by enforcing <i>complete</i> conceptual separation as well as complete <i>temporal</i> separation. Here's the accompanying thought experiment, just to clarify what I mean by that.</p>

<p>Suppose you were writing in a functional language and wrote the following:</p>

<pre><span style=\"color: #a020f0;\">def</span> <span style=\"color: #0000ff;\">foo</span>():
   ...
   bar(<span style=\"color: #8b2252;\">\"something\"</span>)
   baz(<span style=\"color: #8b2252;\">\"something else\"</span>)

<span style=\"color: #a020f0;\">def</span> <span style=\"color: #0000ff;\">bar</span>(arg):
   ...
   doStuff()

<span style=\"color: #a020f0;\">def</span> <span style=\"color: #0000ff;\">baz</span>(arg):
   ...
   doOtherStuff()</pre>

<p>Firstly, notice that, while the functions are conceptually separate units<a href=\"#foot-Wed-Nov-06-161805EST-2013\" name=\"note-Wed-Nov-06-161805EST-2013\">[2]</a>, <code>foo</code> still has to know about <code>bar</code> and <code>baz</code>. That prevents total isolation. Yes, you can re-define <code>bar</code> and <code>baz</code> in-flight if your language is dynamic enough, but you need to have them both defined and you need to have them named <code>bar</code> and <code>baz</code>.</p>

<p>Secondly, note that what's happening there is most likely a bunch of synchronous work. That is, when <code>foo</code> calls <code>bar</code> and <code>baz</code>, both calls complete and then <code>foo</code> returns the return value of <code>baz</code><a href=\"#foot-Wed-Nov-06-161811EST-2013\" name=\"note-Wed-Nov-06-161811EST-2013\">[3]</a>. If you wrote the equivalent in a <i>pure</i>-functional language, the actual work may happen in a different order than you see it written out, subject to what the compiler can prove about the behavior of the functions involved, but <code>bar</code> and <code>baz</code> will still complete before <code>foo</code> does. If they didn't, you'd get some unexpected behavior in any callers of <code>foo</code>.</p>

<p>Now, lets take a look at the apparently equivalent, Lisp-flavoured, FBP-style program.</p>

<pre>(<span style=\"color: #a020f0;\">define-part</span> foo ()
  ...
  (out! <span style=\"color: #7a378b;\">:out</span> <span style=\"color: #8b2252;\">\"something\"</span>)
  (out! <span style=\"color: #7a378b;\">:log</span> <span style=\"color: #8b2252;\">\"something else\"</span>))

(<span style=\"color: #a020f0;\">define-part</span> bar ()
  ...
  (<span style=\"color: #a020f0;\">do-stuff</span>))

(<span style=\"color: #a020f0;\">define-part</span> baz ()
  (<span style=\"color: #a020f0;\">do-other-stuff</span>))

(<span style=\"color: #a020f0;\">define-container</span> box 
    (<span style=\"color: #7a378b;\">:foo</span> (foo) <span style=\"color: #7a378b;\">:bar</span> (bar) <span style=\"color: #7a378b;\">:baz</span> (baz))
  ((<span style=\"color: #7a378b;\">:foo</span> <span style=\"color: #7a378b;\">:out</span>) -&gt; (<span style=\"color: #7a378b;\">:bar</span> <span style=\"color: #7a378b;\">:in</span>))
  ((<span style=\"color: #7a378b;\">:foo</span> <span style=\"color: #7a378b;\">:log</span>) -&gt; (<span style=\"color: #7a378b;\">:baz</span> <span style=\"color: #7a378b;\">:in</span>))))</pre>

<p>First, notice that <code>foo</code> doesn't know anything about <code>bar</code> or <code>baz</code>, or anything about the <i>existence</i> of either. At some point during its execution, it outputs two messages to some implementation-dependent output structure, but critically <i><code>foo</code> itself is not responsible for delivering those outputs to their consumers</i>. That allows for total part-agnosticism; you really can shuffle parts around with pin-equivalent parts and have the result work. In functional or actors-based systems, you can <i>almost</i> do the same; the exception is that since each sender/caller has to name targets in some way, you need to change small chunks of code in places where functions/actors interoperate.</p>

<p>Second, note that there's nothing in this system about the timing of <code>bar</code> and <code>baz</code>. This omission includes the fact that both or neither may run before <code>foo</code> completes. In this model of the world, if <code>bar</code> takes a while to run, neither <code>baz</code> nor <code>foo</code>, nor any of their callers are prevented from further operation. The second critical difference is, essentially, that asynchronous operation is the norm.</p>


<hr />
<h5>Footnotes</h5>
<p>1 - <a href=\"#note-Wed-Nov-06-161759EST-2013\" name=\"foot-Wed-Nov-06-161759EST-2013\">[back]</a> - Currently mostly Javascripters thanks to the hype surrounding <a href=\"http://noflojs.org/\">noflo</a>.</p>

<p>2 - <a href=\"#note-Wed-Nov-06-161805EST-2013\" name=\"foot-Wed-Nov-06-161805EST-2013\">[back]</a> - Assuming the programmer hasn't done something \"clever\" with global variables, <code>goto</code>s or <code>comefrom</code>s.</p>

<p>3 - <a href=\"#note-Wed-Nov-06-161811EST-2013\" name=\"foot-Wed-Nov-06-161811EST-2013\">[back]</a> - which happens to be the return value of <code>doOtherStuff</code>.</p>
"))
((5202 3723 622325000) :INSERT (156 :POSTED 3592702800))
((5202 3723 622327000) :INSERT (156 :TAG :COMMON-LISP))
((5202 3723 622329000) :INSERT (156 :TAG :FLOW-BASED-PROGRAMMING))
((5202 3723 622331000) :INSERT (156 :TAG :SNIPPETS))
((5202 3723 622498000) :INSERT (157 :TITLE "Briefly, Custom Server Redux"))
((5202 3723 622503000) :INSERT (157 :FILE "custom-servers-redux.html"))
((5202 3723 622505000) :INSERT (157 :EDITED 3610299952))
((5202 3723 622507000) :INSERT
 (157 :BODY
  " <p>So you already know I'm <a href=\"/article?name=deal-interlude-2.html\">building a custom HTTP server for Deal</a>. A question has arisen in my mind: how customized do I want it?</p>

<p>My initial assumption was that I'd just make it the usual general purpose HTTP server, with a few pieces focused on my end goal, but now that I'm waist deep in the guts of this thing, it occurs that I could take it further if I wanted to. For my current purposes, a relatively small subset of HTTP would do just fine. Here are the points I've noticed:</p>

<ul>
  <li>Deal never runs into the situation where both a GET and a POST parameter have the same name. As a result, I can do the Hunchentoot-standard thing and mangle parameters so that <code>get-params</code> and <code>post-params</code> are actually kept in the same associative structure. That simplifies the structure of both <code>request</code> objects and of handler functions, at the cost of differentiating between parameter types.</li>
  <li>Because there's never an ambiguity between GET and POST parameters, I don't even really need to differentiate between GET and POST <i>requests</i>. That'll simplify the class tree of incoming requests. Specifically, it'll cap its depth at 1.</li>
  <li>There are only two handlers that allow session-less requests, the rest require that the requester have a session<a href=\"#foot-Sat-Nov-09-184009EST-2013\" name=\"note-Sat-Nov-09-184009EST-2013\">[1]</a>, so what I could do is just make each request start up a session if a valid session token isn't passed in. That'll occasionally burn a few milliseconds of extra work<a href=\"#foot-Sat-Nov-09-184013EST-2013\" name=\"note-Sat-Nov-09-184013EST-2013\">[2]</a>, but it'll remove the need to assert session presence at the application level.</li>
  <li>Because Deal is already targeting recent browsers<a href=\"#foot-Sat-Nov-09-184016EST-2013\" name=\"note-Sat-Nov-09-184016EST-2013\">[3]</a>, there's no need to support any older version of HTTP.</li>
  <li>Finally, because there's <i>only one</i> handler that's going to need to handle extended connections, and the rest will always return immediately, I can more or less ignore request headers. In particular, I never care about <code>Connection</code><a href=\"#foot-Sat-Nov-09-184019EST-2013\" name=\"note-Sat-Nov-09-184019EST-2013\">[4]</a>, <code>Accept</code><a href=\"#foot-Sat-Nov-09-184022EST-2013\" name=\"note-Sat-Nov-09-184022EST-2013\">[5]</a> or <code>Cache-Control</code><a href=\"#foot-Sat-Nov-09-184025EST-2013\" name=\"note-Sat-Nov-09-184025EST-2013\">[6]</a>.</li>
</ul>

<p>Acting on each of these assumptions is going to narrow the usefulness of the server, but also significantly simplify it. The optimum is eluding me, though I suspect it might be \"as simple as possible\" given my end goal for this particular project. Interestingly, even if I decide to do the simple thing for each of the choices outlined above, the end result will still probably be a useful general-purpose game server.</p>

<p>The only really funny part is that, now that I've thought it through, implementing this system as a websocket server<a href=\"#foot-Sun-Nov-10-113904EST-2013\" name=\"note-Sun-Nov-10-113904EST-2013\">[7]</a> seems like it would yield an even simpler architecture. I'll save that one for later though. Step one: simple SSE+session based engine, make sure it works, <i>then</i> rip out its guts again and see what the other way looks like.</p>

<hr />
<h5>Footnotes</h5>
<p>1 - <a href=\"#note-Sat-Nov-09-184009EST-2013\" name=\"foot-Sat-Nov-09-184009EST-2013\">[back]</a> - And most of <i>those</i> require that the session be associated with a particular, already-instantiated game table, but optimizing for that seems like it would be going too far.</p>

<p>2 - <a href=\"#note-Sat-Nov-09-184013EST-2013\" name=\"foot-Sat-Nov-09-184013EST-2013\">[back]</a> - When someone who <i>just</i> wants to watch rather than play first checks out a table.</p>
<p>3 - <a href=\"#note-Sat-Nov-09-184016EST-2013\" name=\"foot-Sat-Nov-09-184016EST-2013\">[back]</a> - We're using quite a few features of HTML5 to make the whole thing playable.</p>

<p>4 - <a href=\"#note-Sat-Nov-09-184019EST-2013\" name=\"foot-Sat-Nov-09-184019EST-2013\">[back]</a> - That one that I mentioned will be assumed <code>keep-alive</code>, while the rest assume the reverse.</p>

<p>5 - <a href=\"#note-Sat-Nov-09-184022EST-2013\" name=\"foot-Sat-Nov-09-184022EST-2013\">[back]</a> - You're expecting <code>text/html</code> on the main request, <code>text/event-stream</code> on the subscription and <code>application/json</code> on the rest. If you can't handle those, you won't be able to play in any case.</p>
<p>6 - <a href=\"#note-Sat-Nov-09-184025EST-2013\" name=\"foot-Sat-Nov-09-184025EST-2013\">[back]</a> - Everything other than the static file handlers always re-generates content; the static handlers don't need to change unless the files themselves have actually changed.</p>

<p>7 - <a href=\"#note-Sun-Nov-10-113904EST-2013\" name=\"foot-Sun-Nov-10-113904EST-2013\">[back]</a> - Which multiple people have already recommended to me, so I'm not taking credit for that particular insight.</p>
"))
((5202 3723 622544000) :INSERT (157 :POSTED 3593048400))
((5202 3723 622548000) :INSERT (157 :TAG :GENERAL-PROGRAMMING-THOUGHTS))
((5202 3723 622550000) :INSERT (157 :TAG :IDEA-PEELING))
((5202 3723 622552000) :INSERT (157 :TAG :SPECULATION))
((5202 3723 622860000) :INSERT (158 :TITLE "From The Archives - Popularity"))
((5202 3723 622867000) :INSERT (158 :FILE "popularity.html"))
((5202 3723 622869000) :INSERT (158 :EDITED 3610301356))
((5202 3723 622870000) :INSERT
 (158 :BODY "<span class=\"edit\">EDITOR'S NOTE:

<i>This is a piece I wrote about three years ago, then sat down to copy-edit and polish up today. It was very focused on a few particular, topical anecdotes that my then-co-workers were throwing about. Having read over it equipped with three extra years of hindsight, I'm not sure I'd still be quite as vehement about my opinions as I was here, but don't disagree on any large points.</i>

Sun, 10 Nov, 2013</span>

<p>I'm writing this post because I've seen one too many comments of the sort \"Well, if PHP is so shitty, then why is it so popular?\". Typically this is the main claim in a rebuttal to \"PHP is a shit language\"<a href=\"#foot-Sun-Nov-10-173728EST-2013\" name=\"note-Sun-Nov-10-173728EST-2013\">[1]</a>, and the end result seems to be that a lot of people just sit back and think \"Oh yeah, I guess it is popular. It must not be shit, but rugged.\" Substitute  \"manly\", or \"quirky\" or similar if you like. As in, yeah, it has flaws, but they're endearing flaws. Like <a href=\"http://us2.php.net/mysql_escape_string\"><code>mysql_escape</code></a> being the deprecated precursor to a different function named <a href=\"http://php.net/manual/en/function.mysql-real-escape-string.php\"><code>mysql_real_escape_string</code></a> (itself also deprecated). And <a href=\"http://bugs.php.net/bug.php?id=12622\">static functions having an odd interpretation of \"this\"</a>. And the complete list of <a href=\"http://stackoverflow.com/questions/6822446/what-does-php-do-with-deprecated-functions\">deprecated functions</a> being longer than my average blog post thanks to the fact that they never actually get removed.</p>

<p>I don't care that we've known how to do better language design for at least thirty years, PHP iss Rugged©™, goddamit! And it's still more popular than whatever properly designed tool it is that you use!</p>

<h3>How do technologies get popular?</h3>

<p>This probably won't turn into an article where I mention Common Lisp<a href=\"#foot-Sun-Nov-10-173736EST-2013\" name=\"note-Sun-Nov-10-173736EST-2013\">[2]</a>, by the way. The idea of language popularity is almost completely irrelevant to what I'm discussing here; this could be a discussion of any sort of tool and how you'd go about picking one for a particular purpose. The source of popularity is obviously difficult to determine because relatively few things get there, so lets back off a little bit.</p>

<h3>What does it mean for a tool to be popular?</h3>

<p>Does it have to solve some specific problem better than other tools? Does it need to be better/cheaper/faster than solving that particular problem by hand? Does it need to be more fun or easier to use? Does it have better marketing/sales/promotions than the competition? Is it the first tool to solve a problem sufficiently well?</p>

<p>No. To all of the above.</p>

<p>A tool is popular when enough people have chosen it to perform a given task. Any of the above points <b>contribute to</b> a tool getting chosen, but for each, you can find a large number of counterexamples. Both tools that lacked it and became popular, and tools that had it but went nowhere. So no single element of that list of points is going to make or break you.</p>

<p>Lets look at it from the other side instead though.</p>

<h3>What does it take for someone to choose a given tool?</h3>

<p>That's a simpler question, but it should get us the same answer. If \"popularity\" is \"being chosen by enough people\" then figuring out \"how do most people choose\" should tell us \"what it means to be popular\".</p>

<p>A big reason to choose a tool<a href=\"#foot-Sun-Nov-10-173739EST-2013\" name=\"note-Sun-Nov-10-173739EST-2013\">[3]</a> is that <b>it'll get you a job</b>. Again, this has nothing to do with language choice. Lots of people claim \"I learned <code>[x]</code> to get a job\", and <code>[x]</code> can be \"Java\" or \"C#\" with the same probability as \"MS Word\", \"Photoshop\", \"Wordpress\", \"typing\", \"cooking\" or \"how to drive a bus\". So one reason people choose is to get a job. Before we drill down to the next level, any other reasons?</p>

<p><b>For fun</b>. I know about as many people who paint/design professionally as those who just do it on the weekend to relax<a href=\"#foot-Sun-Nov-10-173742EST-2013\" name=\"note-Sun-Nov-10-173742EST-2013\">[4]</a>, and I know plenty of people who just plain like to program. For fun. Like, on <a href=\"https://bentomiso.com/events\">nights and weekends</a>. Granted, not everyone works this way, and not every tool has this effect on people to the same degree<a href=\"#foot-Sun-Nov-10-173748EST-2013\" name=\"note-Sun-Nov-10-173748EST-2013\">[5]</a>, but it's still one possible reason.</p>

<p>Fitness of purpose maybe? Well, not in practice, no. Fitness of purpose is how you pick a specific class of tool. Which is to say, that's how you know you want a rotary cutter as opposed to a reciprocating saw or a pen and not a sable brush. It still doesn't tell you that you want a Dremel as opposed to a DeWalt, or a Pilot instead of a Bic<a href=\"#foot-Sun-Nov-10-173814EST-2013\" name=\"note-Sun-Nov-10-173814EST-2013\">[6]</a>, or ahem, a <a href=\"http://www.lua.org/\">Lua</a> instead of a <a href=\"http://ca.php.net/\">PHP</a>. It's also not as high a bar as people might think. I try to be objective about it, but from observation, most people tend to treat \"fitness of purpose\" as \"what tool do I currently know how to use that could sort of be put to this use?\" rather than \"what is the most effective tool for the problem I'm solving?\"</p>

<p><b>Popularity</b> is the only other big reason I can think of that tools get chosen, but I don't want to recur just yet, so we'll leave that one alone. Back up a bit.</p>

<h2>Tools are popular if they'll get you a job.</h2>

<p>When will a tool get you a job? Well, when enough employers start putting it on their job listings. Until that point, it's not worth learning it <i>just</i> for that. Tools before that point mostly get adopters that come by because it's fun for them or the tiny minority that have performed a sufficient comparison and found <i>that</i> tool to be the best fit for them out of the ones they compared. In other words <i>\"I choose tools that will get me jobs\"</i> translates to <i>\"I choose tools that employers choose\"</i>.</p>

<h2>So how do employers choose tools?</h2>

<p>Well, here, I can actually share some small amount of real-world data. Anecdotal, so take it with a grain of salt, but enough to form a theory. If anyone wants to try being the experimentalist on this one, be my guest. If you did it well enough, I'm sure it'd be publishable.</p>

<p>There are a few major points that impact on what an organization does in terms of technical tool choice<a href=\"#foot-Sun-Nov-10-173817EST-2013\" name=\"note-Sun-Nov-10-173817EST-2013\">[7]</a>.</p>

<p>The biggest one is <i>\"We'll keep using what we're using\"</i>. Which is to say, if the previous project turned out to be successful, there will be a big push to use the same tools on the next one. Interestingly, this happens even if the success of the last project had everything to do with the team pulling constant overtime, and nothing at all to do with tool choice. The tools can be actively detrimental to the goal and <i>still</i> reap a rep-boost if the project succeeds. This doesn't really answer anything. How does a company choose their tools on the first project?</p>

<p>A few different ways. The tool choice for Project Number 1™© is contingent on<a href=\"#foot-Sun-Nov-10-173820EST-2013\" name=\"note-Sun-Nov-10-173820EST-2013\">[8]</a></p>

<ol>
  <li>What do our developers know how to use?</li>
  <li>What do our vendors use?</li>
  <li>What do our clients want us to use?</li>
  <li>What's the industry standard?</li>
</ol>

<p>The first one at least has some expert input, but works oddly. You don't get choice bias towards the \"best\"<a href=\"#foot-Sun-Nov-10-173836EST-2013\" name=\"note-Sun-Nov-10-173836EST-2013\">[9]</a> tool, but rather the most popular. If Bleeb is \"better\" than Blub, but only two people on a team of ten know Bleeb whereas everyone knows Blub, then the team uses Blub<a href=\"#foot-Sun-Nov-10-173841EST-2013\" name=\"note-Sun-Nov-10-173841EST-2013\">[10]</a>. In other words, no help there; this criteria will get you the popular language without requiring any level of quality or rigor in its design principles.</p>

<p>The second one is just plain odd, and before sitting back and observing, I would have sworn that it would be a really weak reason to use a tool. Companies seem to not care though; if a given preferred vendor uses tool <code>[x]</code> for task <code>[y]</code>, then the company tends to use tool <code>[x]</code>, even if it's ridiculously awkward to <i>actually</i> use. The vendor is also a company, so they use this same process for picking their tools, so substitute that back once we're done.</p>

<p>The third one is obvious, I hope, but it also boils down to \"popularity\" because very few clients know the problem space. Typically, they listen to the first/best sales people that talk to them. They're a force though; if your target client wants it on MSSQL and .NET, then it'll either be <i>that</i> or it won't <i>be</i>.</p>

<p>The fourth one is the previous answer on a macro scale; <i>\"We'll keep using what we're using (as an industry)\"</i>. In other words, if there were lots of successful companies using tool <code>[x]</code>, we'll use it too<a href=\"#foot-Sun-Nov-10-173852EST-2013\" name=\"note-Sun-Nov-10-173852EST-2013\">[11]</a>.</p>

<p><i>Now</i>, we need to go deeper<a href=\"#foot-Sun-Nov-10-173855EST-2013\" name=\"note-Sun-Nov-10-173855EST-2013\">[12]</a>.</p>

<h3>How does the first company in an industry pick their tools?</h3>

<p>Regardless of any other decision factors, the answer is almost by definition \"before they really know what problems those tools will have to solve\", and I've already discussed that one <a href=\"/article?name=self-titled.html\">pretty thoroughly</a>. There are no clients, so they can't pick that way, there are no other companies or vendors so there is no industry standard. They might look at what similar industries do. Would they use the best possible tool for the job though? Well, no. They're likely to go the <i>\"What do our developers know how to use?\"</i> route, which we've already discussed above.</p>

<p>The big reasons <b>teams</b><a href=\"#foot-Sun-Nov-10-173906EST-2013\" name=\"note-Sun-Nov-10-173906EST-2013\">[13]</a> pick a given technology include</p>

<ul>
  <li>how easy is it to hire people that know how to use this? (easier the better)</li>
  <li>do we have existing code that we'll need to interface with? (if so, weigh whatever we used on that project favorably)</li>
  <li>have we used any technologies in the past for similar purposes to what we're doing here? (if so, weigh those favorably)</li>
</ul>

<p>and the big one</p>

<ul>
  <li>if I choose this, and anything blows up, will I still be able to make the case to non-technical humans that it was the right choice? (if not, weigh it very unfavorably)</li>
</ul>

<p>1, 2 and 3 mean that the more popular the language is, the more chance it has of getting entrenched<a href=\"#foot-Sun-Nov-10-173915EST-2013\" name=\"note-Sun-Nov-10-173915EST-2013\">[14]</a>. 4 means the same, but this time \"popular\" means overall, not just within the tech community. A non-tech has heard the name \"PHP\" before, enough times to associate it with \"the web\" and \"Facebook\" and \"Wordpress\", but probably hasn't looked into it closely enough to catch complaints from developers<a href=\"#foot-Sun-Nov-10-173918EST-2013\" name=\"note-Sun-Nov-10-173918EST-2013\">[15]</a>.</p>

<p>The end result is that, in a sufficiently large company, it's safer to use a popular tool that's poor in the technical sense than it is to use an excellent tool no one's heard of. And that's <i>also</i> been <a href=\"http://paulgraham.com/avg.html\">discussed thoroughly</a>, and <a href=\"http://www.joelonsoftware.com/items/2006/09/01.html\">this time</a> it wasn't even by me. The decision is made purely on the basis of popularity once again.</p>

<h3>Shit</h3>

<p>We just bottomed out our recursion. Just in case you haven't been keeping score, literally every single level at which a tool can be selected is likely to be filled by the most popular tool in some context, and this popularity never requires, therefore never implies, <i>anything other than popularity</i>. One more time: <b>at no point in the process of selecting a toolkit do most choosers even try to see whether it's shit or not.</b> So I don't care how popular your steaming pile of imperative, counter-intuitive security-exploits-waiting-to-happen is; it's still shit.</p>

<p>Don't let me stop you from eating it, but I remember what it tastes like so I won't be joining you. Or shaking your hand afterwards.</p>

<hr />
<h5>Footnotes</h5>
<p>1 - <a href=\"#note-Sun-Nov-10-173728EST-2013\" name=\"foot-Sun-Nov-10-173728EST-2013\">[back]</a> - Which I happen to agree with, actually. If you're looking for details on what language<b>s</b>(Spoiler warning) I'd recommend learning, you're better off reading <a href=\"/article?name=what-language-should-i-learn.html\">this</a> instead.</p>

<p>2 - <a href=\"#note-Sun-Nov-10-173736EST-2013\" name=\"foot-Sun-Nov-10-173736EST-2013\">[back]</a> - Except for that.</p>
<p>3 - <a href=\"#note-Sun-Nov-10-173739EST-2013\" name=\"foot-Sun-Nov-10-173739EST-2013\">[back]</a> - Generally among the people I know at least, no judgment here.</p>

<p>4 - <a href=\"#note-Sun-Nov-10-173742EST-2013\" name=\"foot-Sun-Nov-10-173742EST-2013\">[back]</a> - That's what I get for going to design school.</p>

<p>5 - <a href=\"#note-Sun-Nov-10-173748EST-2013\" name=\"foot-Sun-Nov-10-173748EST-2013\">[back]</a> - Point of fact, only one person I know drives a bus for fun. It's been his obsession to work for the TTC since grade 8. I haven't heard from him in a while, but I still remember his room being full of papercraft Orion 3s, and I'm pretty sure he spent every internship opportunity he had on some streetcar route or another.</p>

<p>6 - <a href=\"#note-Sun-Nov-10-173814EST-2013\" name=\"foot-Sun-Nov-10-173814EST-2013\">[back]</a> - The pen fanciers among you are probably ready to tell me that these are the worst possible examples; they're just the most popular common brand pens, not the really good stuff, where quality can make a difference. Really, I should have used <code>foo</code> and <code>bar</code>. You can go now, if you ponder that point hard enough, you pretty much got the gist of the article.</p>

<p>7 - <a href=\"#note-Sun-Nov-10-173817EST-2013\" name=\"foot-Sun-Nov-10-173817EST-2013\">[back]</a> - I'm reigning it in a bit to software tools because that's what I have experience with, but this still seems like it might be a general trend; again, experimentalists welcome.</p>

<p>8 - <a href=\"#note-Sun-Nov-10-173820EST-2013\" name=\"foot-Sun-Nov-10-173820EST-2013\">[back]</a> - In varying order, in my experience, but always on these things.</p>

<p>9 - <a href=\"#note-Sun-Nov-10-173836EST-2013\" name=\"foot-Sun-Nov-10-173836EST-2013\">[back]</a> - Which I'm still quoting. In a book, that's called \"foreshadowing\". In a game or movie, it's called \"setting up the sequel\".</p>

<p>10 - <a href=\"#note-Sun-Nov-10-173841EST-2013\" name=\"foot-Sun-Nov-10-173841EST-2013\">[back]</a> - And you get a varying amount of childish name-calling and dismissiveness towards Bleeb.</p>

<p>11 - <a href=\"#note-Sun-Nov-10-173852EST-2013\" name=\"foot-Sun-Nov-10-173852EST-2013\">[back]</a> - Again, disregarding whether the tool had any effect at all on success.</p>

<p>12 - <a href=\"#note-Sun-Nov-10-173855EST-2013\" name=\"foot-Sun-Nov-10-173855EST-2013\">[back]</a> - And at this point, all bets are off, I'm just theorizing, because I haven't observed the decision making process in an industry-defining company. That would be an interesting research project though, let me know if you've got one lined up.</p>

<p>13 - <a href=\"#note-Sun-Nov-10-173906EST-2013\" name=\"foot-Sun-Nov-10-173906EST-2013\">[back]</a> - Not individual developers, but groups of corporate developers complete with leaders, technical or not, who are ultimately responsible to non-tech people further up the hierarchy.</p>

<p>14 - <a href=\"#note-Sun-Nov-10-173915EST-2013\" name=\"foot-Sun-Nov-10-173915EST-2013\">[back]</a> - And note that both points are completely unrelated to how \"good\" a language is, and entirely dependent on how popular it is.</p>

<p>15 - <a href=\"#note-Sun-Nov-10-173918EST-2013\" name=\"foot-Sun-Nov-10-173918EST-2013\">[back]</a> - Or to determine whether there's a lot of overlap between \"good developers\" and \"developers who complain vocally about PHP\".</p>
      "))
((5202 3723 622990000) :INSERT (158 :POSTED 3593048400))
((5202 3723 622991000) :INSERT (158 :TAG :BITCHING))
((5202 3723 622993000) :INSERT (158 :TAG :GENERAL-PROGRAMMING-THOUGHTS))
((5202 3723 622995000) :INSERT (158 :TAG :IDEA-PEELING))
((5202 3723 622996000) :INSERT (158 :TAG :LANGUAGES))
((5202 3723 622998000) :INSERT (158 :TAG :SPECULATION))
((5202 3723 623122000) :INSERT
 (159 :TITLE "Toronto FBP Group -- Inaugural Meeting Videos"))
((5202 3723 623127000) :INSERT (159 :FILE "fbp-videos.html"))
((5202 3723 623129000) :INSERT (159 :EDITED 3610022331))
((5202 3723 623130000) :INSERT
 (159 :BODY
  "<p>I've managed to upload the first two videos from the first <a href=\"https://bentomiso.com/events/fbp-meetup-nov\">Toronto FBP Group</a> Meeting to <a href=\"https://vimeo.com/user22632094/videos\">Vimeo</a>.</p>

<p>First, here's <a href=\"https://vimeo.com/79320781\">Paul Tarvydas giving a brief introduction to FBP</a>. If you're a programmer that's never really heard of Flow Based Programming before, it's a pretty good start.</p>

<p>Second, here's <a href=\"https://vimeo.com/79329015\">J. Paul Morrison talking about the history of FBP</a>. He's the guy who first discovered the idea, and formalized it while he was working at IBM in the early 1970s, and he talks a bit about what led to the insight. Near the end, he also demos a visual editor he's currently working on.</p>

<p>Sadly, because of the Vimeo basic account limitations, the JP Morrison video has a pretty crappy resolution, and my quick demo talk about a noflo webserver won't be uploaded until next week.</p>

<p>If you really just want the audio and slides, you can get the relevant files right <a href=\"http://173.255.226.138/Toronto%20FBP%20Group/meeting-1/\">here</a>. You can probably get about 60% of the gist from the audio, but all three of us used some relevant visuals in our presentations. In the case of Paul T. and Paul M., a powerpoint presentation, and in my case some noflo code. I'll try to put up <code>.torrent</code> links for the HD versions of the videos when I figure out the logistics, and the third video will go up next Tuesday.</p>

<p>There were no videos from the second meetup<a href=\"#foot-Wed-Nov-13-164000EST-2013\" name=\"note-Wed-Nov-13-164000EST-2013\">[1]</a>, and there won't be any from today<a href=\"#foot-Wed-Nov-13-164003EST-2013\" name=\"note-Wed-Nov-13-164003EST-2013\">[2]</a>. We're basically trying to figure out how to pay for them; one idea I'm looking into is getting a monthly kickstarter going to let the market decide if there's enough interest to produce videos for a given month. I'm not sure how much advance notice we'll need, or how far we can actually plan out talks, but I'll keep you posted.</p>

<span class=\"edit\">EDIT:
<p>Torrents are now <a href=\"http://173.255.226.138/Toronto%20FBP%20Group/meeting-1/\">up along with the audio and presentation materials</a>. If you do end up downloading these, please seed as long as you can.</p>
Thu, 14 Nov, 2013</span>

<hr />
<h5>Footnotes</h5>
<p>1 - <a href=\"#note-Wed-Nov-13-164000EST-2013\" name=\"foot-Wed-Nov-13-164000EST-2013\">[back]</a> - We basically had a giant whiteboarding session.</p>

<p>2 - <a href=\"#note-Wed-Nov-13-164003EST-2013\" name=\"foot-Wed-Nov-13-164003EST-2013\">[back]</a> - We've got Paul T. talking about visual compilation, and Jo'sh talking about the <a href=\"http://drakon-editor.sourceforge.net/\">Drakon</a> editor.</p>
"))
((5202 3723 623155000) :INSERT (159 :POSTED 3593307600))
((5202 3723 623157000) :INSERT (159 :TAG :FLOW-BASED-PROGRAMMING))
((5202 3723 623159000) :INSERT (159 :TAG :MEDIA))
((5202 3723 623354000) :INSERT (160 :TITLE "Arbitrary Update 714"))
((5202 3723 623359000) :INSERT (160 :FILE "arbitrary-update-714.html"))
((5202 3723 623361000) :INSERT (160 :EDITED 3610022331))
((5202 3723 623365000) :INSERT
 (160 :BODY
  "<p>We're working on FBP in Common Lisp. You've heard that one before.</p>

<p>Step one was getting a basic system running. In fact, we've got two we're dealing with concurrently<a href=\"#foot-Tue-Nov-26-232106EST-2013\" name=\"note-Tue-Nov-26-232106EST-2013\">[1]</a>. Both are kind of rickety because I'm still trying to work out what the essential parts of the approach are. One deals with OS threads and the other is built on top of <a href=\"http://orthecreedence.github.io/cl-async/\">cl-async</a>. I'm liking the second one better for now, but am once again reserving judgment until I see how easily they explode.</p>

<p>Anyhow, that's price of admission, rather than the finish line. Our ultimate goal is to prove out visual programming in the large, without making anyone throw up about it. I have no idea how that's going to end up, except that I've definitely got a couple of interesting years coming up. In order to get to that ultimate goal, step two is finding or building an Acceptable™© Visual Editor.</p>

<p>And we can't find one, so \"build\" it is.</p>

<p>What we want, being that we're Lispers and polyglots to the last, can best be described as \"<a href=\"https://www.gnu.org/software/emacs/\">Emacs</a> for Diagrams\". And that doesn't seem to exist. There's a <a href=\"http://inkscape.org/\">number</a> of <a href=\"http://www.adobe.com/ca/products/illustrator.html?sdid=JRSIH&skwcid=AL!3085!10!2843941197!20355419935&ef_id=UdIbfwAAAaQ4Kybq:20131125030001:s\">general-purpose</a> vector <a href=\"https://code.google.com/p/svg-edit/\">editors</a> out there at various levels of readiness, but those are more like \"MS Word for Diagrams\". There's a \"Sublime for Diagrams\" floating around in the form of <a href=\"http://www.yworks.com/en/products_yed_about.html\">yEd</a>, and one piece of fallout from the Russian space program is <a href=\"http://drakon-editor.sourceforge.net/\">basically \"Notepad++ for Diagrams\"</a>. Microsofts' own <a href=\"http://office.microsoft.com/en-ca/visio/\">flowcharting suite</a> is something like \"Eclipse: The Extra Shit Version for Diagrams. Also You Can't See Our Source Code, Which Is Probably For The Best Because It's Mostly Garbage You'd Laugh Out Of Your Company In Any Other Context\". Finally, if we want to use <i>Emacs</i> for diagrams, the only thing even remotely workable seems to be <a href=\"http://emacs-fu.blogspot.ca/2009/01/drawing-pictures.html\"><code>artist-mode</code></a>. It's nice, I guess. Certainly better than prostate cancer. But that's not quite what we're looking for.</p>

<p>The thing we <i>are</i> looking for needs to be</p>

<ul>
  <li><b>A visual editor</b>. This needs to be a tool to let humans construct diagrams and related diagrammatic artifacts for a variety of media.</li>
  <li><b>A diagram editor</b>. We're not looking for a general purpose editor. In particular, there are very, very few things we'll be rotating, nothing we'll be coloring<a href=\"#foot-Tue-Nov-26-232113EST-2013\" name=\"note-Tue-Nov-26-232113EST-2013\">[2]</a>, and we only need one font at a fairy small variety of font sizes and weights. We'll also never be dealing with embedded bitmaps, gradients, brush-strokes, or shapes more complex than rounded rectangles/ellipses. You'd be surprised how much junk that lets you cut out.</li>
  <li><b>Fast</b>. It shouldn't take longer to draw a diagram with this thing than it would take to describe it. This means a keyboard-oriented interface with easily re-bindable keys, reasonable performance, reasonable start-up, and no half-baked expert system getting in your way by trying to guess what you're trying to do.</li>
  <li><b>Scriptable</b>. It should be possible to <i>simply</i> and <i>easily</i> construct sequences of operations to be summoned later. It should be easy to run automated queries and transformations on the programs' output and potentially edit the result in a visual manner. It should be fairly simple to select a particular subset of elements and manipulate them in some way.</li>
  <li><b>Flexible</b>. We have no idea what the visual formalism we're finally going to adopt will look like. It might require fine placement of wires and connectors, it might involve different kinds of connections, and it will certainly involve multiple different connections between two nodes<a href=\"#foot-Tue-Nov-26-232118EST-2013\" name=\"note-Tue-Nov-26-232118EST-2013\">[3]</a>. It also <i>can't</i> make any kind of semantic assumptions about what the content we're editing means, because that might change as we go through the discovery process of what kinds of processes and situations we want to formalize. This also means some sort of proper macro system, an end-user specifiable final/intermediate representation, and source code that we'll be able to tear apart if we need to.</li>
</ul>

<p>The various editors I list above are split firmly into two camps. First, there are editors aimed at non-programmer humans for general vector construction. They're fairly flexible, but because they're for mouse-pushers, they don't provide a good intermediate representation for our purposes, don't particularly care about ease-of-use or keyboard-centricity, and don't make it particularly easy to script parts of your workflow. In the second camp, there are specialized flow editors aimed at programmers or technical managers, which <i>do</i> provide a good deal of flexibility on the keyboard binding front, and provide appropriate output, but <i>also</i> make all kinds of assumptions about what you're doing, why, and how you should want to go about it.</p>

<p>If you know of something awesome that I missed, let me know, but for the moment we're rolling our own. I've been working on it for about half a week solid now, and it's taking shape pretty quickly. I showed off the pre-alpha to some folks at <a href=\"https://www.erlang-solutions.com/event/toronto-erlang-factory-lite-2013\">the Erlang conference last week</a>, and got reactions that didn't look like outright disgust. Once it takes some usable shape, I'm planning on posting some videos for you, and possibly showing it off a bit to the FBP group.</p>

<p>I was also going to talk a little bit about fact bases, and the inherent strength of simple models, but I think I'll leave that for another day. When I get permission to Free this editor, I'll have quite a bit more to say about that in any case.</p>

<hr />
<h5>Footnotes</h5>
<p>1 - <a href=\"#note-Tue-Nov-26-232106EST-2013\" name=\"foot-Tue-Nov-26-232106EST-2013\">[back]</a> - Har har, aren't I droll.</p>

<p>2 - <a href=\"#note-Tue-Nov-26-232113EST-2013\" name=\"foot-Tue-Nov-26-232113EST-2013\">[back]</a> - Except for UI purposes, obviously. The various selection/manipulation layers are going to have distinct visual cues that rely on color, but I don't count these as part of the diagram proper, even though they may be visually associated.</p>

<p>3 - <a href=\"#note-Tue-Nov-26-232118EST-2013\" name=\"foot-Tue-Nov-26-232118EST-2013\">[back]</a> - Which incidentally kills any use we might get out of svg-edit's or Inkscape's <code>connection</code> tools. Each of them assume a single connection between two shapes, anchored at each center-point. No idea if said connection can be directional or not, but we've already established that it won't do, so I'm not looking into it.</p>
   "))
((5202 3723 623418000) :INSERT (160 :POSTED 3594430800))
((5202 3723 623420000) :INSERT (160 :TAG :FLOW-BASED-PROGRAMMING))
((5202 3723 623422000) :INSERT (160 :TAG :IDEA-PEELING))
((5202 3723 623423000) :INSERT (160 :TAG :PROGRAMMING-ENVIRONMENT))
((5202 3723 623425000) :INSERT (160 :TAG :PROGRAMMING-INTERFACES))
((5202 3723 623642000) :INSERT
 (161 :TITLE "Combining SVG and HTML5 is still a Drag"))
((5202 3723 623647000) :INSERT
 (161 :FILE "combining-svg-and-html-is-still-a-drag.html"))
((5202 3723 623649000) :INSERT (161 :EDITED 3610022331))
((5202 3723 623651000) :INSERT
 (161 :BODY
  "<p>Dragging SVG elements is harder than it might appear at first glance.</p>

<p>The underlying implementation of the SVG DOM and the HTML DOM is different in current browsers you see, so the standard HTML5 drag event doesn't apply to SVG nodes. Luckily, <code>mousedown</code>, <code>mousemove</code> and <code>mouseup</code> <i>are</i> supported, so you'd think it would be a straight-forward task to implement the fucker yourself. You probably imagine, as I did initially, something that takes a selector and a list of callbacks, and implements something similar to jQuery's <code>.draggable()</code> in ~30 lines of code by</p>

<ul>
  <li>binding a callback to the targets' <code>mousedown</code>, <code>mousemove</code>, <code>mouseup</code> events</li>
  <li>storing the initial position of the element, and its delta from the mouse cursor</li>
  <li>preventing default on <code>mousedown</code></li>
  <li>in addition to firing the callback, moving the target element by manipulating <code>x</code> and <code>y</code> coordinates using the current mouse position, initial delta and initial position</li>
</ul>

<p>Maybe that's possible for the simple cases, but it's the edges that'll get you. And unless an implementation happens to dull all <i>your</i> edges, it's not really good enough.</p>

<p><b>Minor speed-bump.</b> What if you need to drag multiple elements? If you were dealing with HTML elements, it wouldn't be such a big deal, but SVG elements have different properties to represent their coordinates. Rectangles and similar have an <code>x</code> and <code>y</code> that represents their top-left corner, circles and ellipses have <code>cx</code> and <code>cy</code> that represents their center, text elements have an <code>x</code> and <code>y</code>, but theirs represents the <i>bottom</i>-left coordinate, and I'm not even getting into the path elements. Bottom line, if you want to implement something that works, you're using <code>transform</code> settings. Also, you're not doing it naively through <code>setAttribute</code>, unless you're lucky enough to have a situation where you can guarantee that no other transformations will be applied to any draggable element<a href=\"#foot-Sat-Nov-30-122522EST-2013\" name=\"note-Sat-Nov-30-122522EST-2013\">[1]</a>. The snippet that handles that particular piece looks like this in my codebase</p>

<pre>(defpsmacro =translate (elem/s dx dy)
  `(try 
    (=&gt;&gt; ,elem transform base-val (get-item 0) (set-translate ,dx ,dy))
    (<span style=\"color: #7a378b;\">:catch</span> (<span style=\"color: #ff0000; font-weight: bold;\">error</span>)
      (=set-attribute ,elem <span style=\"color: #7a378b;\">:transform</span> (+ <span style=\"color: #8b2252;\">\"translate(\"</span> ,dx <span style=\"color: #8b2252;\">\",\"</span> ,dy <span style=\"color: #8b2252;\">\")\"</span>)))))</pre>

<p>If you're one of the sad bastards who don't have macros at their disposal, I guess you're doing that or something fairly similar manually<a href=\"#foot-Sat-Nov-30-122530EST-2013\" name=\"note-Sat-Nov-30-122530EST-2013\">[2]</a>. Like I said though, no big deal either way.</p>

<p><b>Medium sized speedbump.</b> If you want to do this on an arbitrarily sized element, specifically a very small one, you'll discover that moving your cursor at even moderate speeds is enough to escape from the <code>mousemove</code> event and leave your draggable behind. One possible solution here is to also bind the <code>mouseleave</code> event and hope you never need to move fast enough to escape that too. Another approach is to have your chosen <code>mousedown</code> set up a <i>global</i> <code>mousemove</code> event, on <code>body</code> or <code>html</code>, use that to drag your element around, and have a global <code>mouseup</code> waiting to cut it off as soon as you're done<a href=\"#foot-Sat-Nov-30-122532EST-2013\" name=\"note-Sat-Nov-30-122532EST-2013\">[3]</a>. A bit hacky, but doable.</p>

<p><b>Slightly larger speedbump.</b> If you want to make these bindings switchable, you're in for a bit of a harder time. Not switchable as in \"different objects should be able to do mildly  different things\", that's a given. I mean like \"it should be possible to jump into a separate interaction mode where the same object does something mildly or wildly different under certain circumstances\". If you want that, you need a level of indirection in your listener tree that you can swap out with other functions, and that level of indirection is going to be calling an externally specified function on each event trigger. Basically, you'll want to be working with hooks rather than listeners at this point<a href=\"#foot-Sat-Nov-30-122536EST-2013\" name=\"note-Sat-Nov-30-122536EST-2013\">[4]</a>. I'll keep you posted on how this one goes in real life.</p>

<p><b>Large speedbump.</b> Suppose you want to be able to use your dragging events, <i>and</i> a <code>mouseup</code> event on the same element. Better yet, suppose you wanted to implement <code>drag</code>/<code>mousedown</code> interactions, but let the user decide what layer to apply them on at any given time. Imagine a situation where you had the elements <code>foo</code>, overlapping <code>bar</code>, overlapping <code>baz</code>, and when a <code>drag</code> or <code>mousedown</code> hits, you want to let the user decide whether they want to be <code>click</code>/<code>drag</code>ging <code>foo</code> and/or <code>bar</code> and/or <code>baz</code>. Near I can tell, there is no way of implementing this elegantly in terms of listeners on individual elements. What you need if you want this is a central listener that delegates particular events out to some intermediary functions, or eats them<a href=\"#foot-Sat-Nov-30-122539EST-2013\" name=\"note-Sat-Nov-30-122539EST-2013\">[5]</a> as appropriate.</p>

<p>Keep in mind that the last two speedbumps I hit here probably won't be felt by most people going in the same direction. Still, I went into this figuring it'd take me a half hour at the outside to implement something workable. It ended up taking me the rest of the day, and will probably cost me another hour or two when I get back in on Monday.</p>

<p>Such is development sometimes, I suppose.</p>

<hr />
<h5>Footnotes</h5>
<p>1 - <a href=\"#note-Sat-Nov-30-122522EST-2013\" name=\"foot-Sat-Nov-30-122522EST-2013\">[back]</a> - If you <i>are</i> going to have other active transformations, using the <code>setAttribute</code> method would overwrite those, which is why it's a bad idea.</p>

<p>2 - <a href=\"#note-Sat-Nov-30-122530EST-2013\" name=\"foot-Sat-Nov-30-122530EST-2013\">[back]</a> - if you <i>are</i> doing that, I should point out that the only reason I went the <code>try</code>/<code>catch</code> route here is that both <code>=&gt;&gt;</code> and <code>=set-attribute</code> take either an element or a set of elements as their first argument, and I wanted <code>=translate</code> to do the same. Since you probably won't have the same situation, you're likely better off with <code>if</code>/<code>else</code>.</p>

<p>3 - <a href=\"#note-Sat-Nov-30-122532EST-2013\" name=\"foot-Sat-Nov-30-122532EST-2013\">[back]</a> - You wouldn't want to do this naively either, unless you knew there'd be no other <code>mousemove</code> events on that top-level element. If you <i>did</i> have that, you'd want to set up a hook that you could change out rather than messing with event listeners every time you dragged something.</p>

<p>4 - <a href=\"#note-Sat-Nov-30-122536EST-2013\" name=\"foot-Sat-Nov-30-122536EST-2013\">[back]</a> - It just occurred to me that you might have no idea what I mean by \"hook\" in this context. Basically, something like this:

<pre><span style=\"color: #a020f0;\">var</span> <span style=\"color: #a0522d;\">mouseMoveHook</span> = <span style=\"color: #008b8b;\">null</span>;
document.querySelector(<span style=\"color: #8b2252;\">\"body\"</span>).addEventListener(<span style=\"color: #8b2252;\">\"mousemove\"</span>,
  <span style=\"color: #a020f0;\">function</span> (<span style=\"color: #a0522d;\">event</span>){
    <span style=\"color: #b22222;\">//</span><span style=\"color: #b22222;\">do other stuff
</span>    <span style=\"color: #a020f0;\">if</span> (mouseMoveHook) { mouseMoveHook(event) };
  });</pre>

If you have something that looks like that, you can change some of the behavior of your global <code>mousemove</code> event by assigning a new callback to the <code>mouseMoveHook</code> variable. I'm sure it's been used elsewhere, but I learned the term \"hook\" from Emacs, which provides standard event hooks in a bunch of different situations, and does it more or less this way, modulo some syntactic sugar.</p>

<p>5 - <a href=\"#note-Sat-Nov-30-122539EST-2013\" name=\"foot-Sat-Nov-30-122539EST-2013\">[back]</a> - In the case of the trailing <code>mouseup</code> event after a drag concludes.</p>
"))
((5202 3723 623711000) :INSERT (161 :POSTED 3594776400))
((5202 3723 623714000) :INSERT (161 :TAG :COMMON-LISP))
((5202 3723 623715000) :INSERT (161 :TAG :HTML))
((5202 3723 623717000) :INSERT (161 :TAG :HTML5))
((5202 3723 623718000) :INSERT (161 :TAG :IDEA-PEELING))
((5202 3723 623722000) :INSERT (161 :TAG :JAVASCRIPT))
((5202 3723 623724000) :INSERT (161 :TAG :PROGRAMMING-INTERFACES))
((5202 3723 623855000) :INSERT (162 :TITLE "Quick Update on Deal"))
((5202 3723 623859000) :INSERT (162 :FILE "quick-update-on-deal.html"))
((5202 3723 623861000) :INSERT (162 :EDITED 3610140317))
((5202 3723 623863000) :INSERT
 (162 :BODY
  "<p><a href=\"https://github.com/Inaimathi/deal\">Deal</a> proceeds apace.</p>

<p>I've spent the past while putting together a minimal, single-threaded asynchronous server to simplify the deployment process. Almost done, and you can see the progress on <a href=\"https://github.com/Inaimathi/deal/tree/house-server-port\">this branch</a> in <a href=\"https://github.com/Inaimathi/deal/tree/house-server-port/house\">this subdirectory</a>. The remaining stuff left ToDo is:</p>

<p><b>Better Errors.</b> I need to put together an appropriate assertion mechanism. Straight up <code>assert</code> works fine in a multi-threaded context, but does some mean things when you've only got the one thread. Normally, it wouldn't be that big a deal, but I have to special-case my <code>handler-case</code> statements for <code>SIMPLE-ERROR</code> in order to allow shell interruption. Unfortunately, they're both conditions of type <code>simple-error</code>, which means that if I do it naively, I either let both or neither through. What I'm planning to do is define a macro named something like <code>http-assert</code>, which will throw a type of error I can then safely convert into <a href=\"http://en.wikipedia.org/wiki/List_of_HTTP_status_codes#4xx_Client_Error\">an HTTP-<code>400</code> response</a>.</p>

<p><b>Basic Static Files.</b> Currently, I'm serving static files through <code>nginx</code> only. Which is the efficient way of doing it. However, one use-case I'm thinking of for Deal is that of a small, geographically disparate team setting up a private server for themselves. It's kind of a pain in the ass to have to set up a reverse proxy for that situation, so it would be nice if <a href=\"https://github.com/Inaimathi/deal/tree/house-server-port/house\">House</a> provided a basic file handler for people to use.</p>

<p>That's ... going to get complicated though. A first crack at the implementation is <a href=\"https://github.com/Inaimathi/deal/blob/house-server-port/house/util.lisp#L54-L90\">here</a> and <a href=\"https://github.com/Inaimathi/deal/blob/house-server-port/house/house.lisp#L196-L220\">here</a>. That only works for text files so far<a href=\"#foot-Sun-Dec-01-230324EST-2013\" name=\"note-Sun-Dec-01-230324EST-2013\">[1]</a>, and it only works for a laughably small number of mimetypes. A more complete map can be found <a href=\"http://www.stdicon.com/mimetypes\">here</a> or <a href=\"http://svn.apache.org/viewvc/httpd/httpd/branches/2.2.x/docs/conf/mime.types?view=annotate\">here</a>, but I'm not going to be anywhere near as thorough; remember, this is an edge case. This lightweight server is <i>not</i> in the business of serving out static files in an efficient manner. <i>That's</i> what things like <code>nginx</code> are for, and I've got no doubt they're doing a better job than I could.</p>

<p><b>Touch Ups</b> Sessions don't expire yet. And when they do, I'll want to give them the same kind of behavior hooks that I've got going for <code>new-session</code>. There's also the non-trivial matter of porting the rest of the Deal system to work better with the House server, but I get the feeling I'm most of the way there already.</p>

<p>Famous last words, right?</p>


<hr />
<h5>Footnotes</h5>
<p>1 - <a href=\"#note-Sun-Dec-01-230324EST-2013\" name=\"foot-Sun-Dec-01-230324EST-2013\">[back]</a> - I'm still trying to iron out kinks; in particular there seems to be some kind of character encoding issue left in the way that I just can't get my head around. I'll be <a href=\"http://stackoverflow.com/questions/20320540/serving-static-files-with-common-lisp\">asking on SO</a> shortly.</p>
"))
((5202 3723 623888000) :INSERT (162 :POSTED 3594862800))
((5202 3723 623890000) :INSERT (162 :TAG :COMMON-LISP))
((5202 3723 623892000) :INSERT (162 :TAG :JOURNAL))
((5202 3723 624154000) :INSERT (163 :TITLE "Jef Raskin on Authentication"))
((5202 3723 624158000) :INSERT (163 :FILE "jef-raskin-on-authentication.html"))
((5202 3723 624160000) :INSERT (163 :EDITED 3610022331))
((5202 3723 624162000) :INSERT
 (163 :BODY
  "<p>I've got an idea to peel, and for a change, it's not even mine. I'm in the middle of reading through a <a href=\"https://en.wikipedia.org/wiki/Jef_Raskin\">Raskin</a> book entitled <a href=\"http://www.amazon.com/The-Humane-Interface-Directions-Interactive/dp/0201379376\">\"The Humane Interface\"</a>, in which he suggests a different take on user authentication. In section <b>6-4-3</b><a href=\"#foot-Tue-Dec-10-132000EST-2013\" name=\"note-Tue-Dec-10-132000EST-2013\">[1]</a>, Raskin suggests that signing on to a system can be accomplished without requiring a user name. That is, instead of ... you know what, here, this is easier:</p>

<blockquote>
  <p>Users are doing more work than necessary when signing on to most systems. You first state who you are -- your \"handle\", \"online name\" or \"system name\" -- and then you provide a password. The name presumably tells the system who you are, and the password prevents unauthorized persons from using your account.</p>
  <p>In fact, you are telling the system who you are twice. All that is logically required is that you type a password. There is no loss of system security: The probability of guessing someone's name and password depends on how the password was chosen, its length and the like. Finding the user's online name is usually trivial; in fact, it is commonly made public so that she can be communicated with. A badly chosen password, such as your dog's name, is the most common reason for poor security.</p>
  <p>The technical argument that typing two separate strings of characters gives more security is false. If the online name is <i>j</i> characters and the password is <i>k</i> characters, the user, to sign on, must type <i>j+k</i> characters, of which only <i>k</i> characters are unknown to a potential interloper. If the password was chosen randomly -- this is the best you can do -- from a character set with <i>q</i> characters, the probability of breaking into the account on a single guess is <i>1 / q^k</i>.</p>
  <span class=\"sig\">Jef Raskin -- The Humane Interface, p183</span>
</blockquote>

<p>If you've given authentication systems anywhere near as much thought as I have, the trouble you should immediately see is that in a system like the one proposed above, <i>a password must be unique to a user</i>. Luckily, Raskin sees that one coming.</p>

<blockquote>
  <p>The question arises: How can you ensure that everybody has a unique password in a password-only system? What if two or more users chose the same password? The best option is to have the system assign them. This method can result in very unmemorable passwords, such as <code>2534-788834-003PR7</code> or <code>ty6*&gt;fj`d%d</code><a href=\"#foot-Tue-Dec-10-132003EST-2013\" name=\"note-Tue-Dec-10-132003EST-2013\">[2]</a>. Another technique is to use a random pair of dictionary words, such as <i>demijohn-shoestring</i>, <i>confirmed-tweezers</i> or <i>sulphur-dive</i>. If a dictionary of 60,000 words is used, the chance of guessing a password on the first try is one in three billion, six-hundred thousand. Using three words puts the difficulty of guessing them beyond hacking with current technology; there are 2.16 x 10^14</p> such combinations, and guessing and checking a billion of these a day, beyond what can be done at present, would still take about 10^5 days, or 275 years. That's reasonably secure. User-created passwords, at least those more readily memorized by the user, are inherently less secure.</p>
  <p>When the idea of improving the interface to a web site or a computer system by simplifying the sign-on process to require only a password is suggested, it is usually rejected on one of two grounds. Either the programmers say that that's just not the way it's done, or they say that they have no control over the sign-on procedure. But someone, of course, does have that control.</p>
  <span class=\"sig\">Jef Raskin -- The Humane Interface, p183,184</span>
</blockquote>

<p>Before I discuss this idea with my self, I have to disagree with two points. First, the odds of guessing a correct password on the first try is <i>not</i> <code>1</code> in <code>3 600 000 000</code>, or <code>1</code> in <code>(* 2.16 (expt 10 14))</code><a href=\"#foot-Tue-Dec-10-132008EST-2013\" name=\"note-Tue-Dec-10-132008EST-2013\">[3]</a>. It's <code>n</code> in whichever-you-picked, where <code>n</code> is the number of users you have. <i>With a password-only system, an attacker is no longer trying to guess a particular users' password, they are trying to guess <b>any</b> password already assigned by your system.</i> Second, I'm not entirely sure that badly chosen passwords are any longer the most common reason for poor security<a href=\"#foot-Tue-Dec-10-132011EST-2013\" name=\"note-Tue-Dec-10-132011EST-2013\">[4]</a>, but rather <a href=\"http://www.zdnet.com/ubuntu-forums-hacked-1-82m-logins-email-addresses-stolen-7000018336/\">utterly</a>, <a href=\"http://www.informationweek.com/attacks/sony-hacked-again-1-million-passwords-exposed/d/d-id/1098113?print=yes\">mind-fuckingly</a> stupid security design by password DB teams<a href=\"#foot-Tue-Dec-10-132014EST-2013\" name=\"note-Tue-Dec-10-132014EST-2013\">[5]</a>.</p>

<p>With that our of the way, lets all don our white hats<a href=\"#foot-Tue-Dec-10-132022EST-2013\" name=\"note-Tue-Dec-10-132022EST-2013\">[6]</a>, and imagine the proposed system in enough detail to implement it.</p>

<h3>How does a user log in?</h3>

<p>In the context of a web application, they've got one field to fill out, \"passphrase\", and one button to click, \"Log In\". The passphrase entered is then hashed and looked up in our user database; if it matches a passphrase hash we have on file, the user ID is retrieved and used to get the specified users' program state. We then continue along letting them do what they're actually here to do. In an ideal system, this authentication step would be entirely optional, allowing it to happen at the last possible moment, when a user needed to commit some piece of data to their server-side corpus.</p>

<p>This is easily the biggest introduced weakness I see in the proposed system. Because we only have a passphrase to work with, we can only use either an unsalted hash, or a per-server \"salt\" to keep our passphrases out of plaintext. If we didn't, that user lookup based on the password would take a long time. Scaling at <code>On</code> with number of users, with some fairly ridiculous constants tacked on. That's dangerous, because we're suddenly gambling that the rest of the application our auth system is embedded in won't allow any injection attacks, or leak database information any other way. Granted, because we're guaranteed to have unique passwords, such a disclosure isn't as easy to take advantage of as it might be, but it's still a concern.</p>

<h3>What happens when the user enters a passphrase that isn't currently assigned?</h3>

<p>There are really only two reasonable possibilities:</p>

<p><b>They get an artificial delay, followed by the above message.</b> The standard log-in procedure also needs to have an equivalent delay, otherwise attackers might abort a guess before getting the response back, which would prevent them from actually being delayed in the practical sense. It doesn't have to be long; a second or two would be enough to prevent the kind of guess hammering I've got in mind, and it wouldn't be too annoying to users provided we put in a little spinning graphic in the meanwhile<a href=\"#foot-Tue-Dec-10-132024EST-2013\" name=\"note-Tue-Dec-10-132024EST-2013\">[7]</a>.</p>

<p><b>They get a \"logged in\" response with the default state in place, and no other warning.</b> Effectively, an \"incorrect\" passphrase entry becomes a registration. Users might get annoyed at this one, since it would seem at first that their program state is gone.</p>

<p>Having thought about this for a bit, it becomes clear that there's only <i>one</i> reasonable possibility, and it's the first one.</p>

<h3>How does the registration process work?</h3>

<p>This might be context sensitive by application. For instance, <a href=\"https://github.com/Inaimathi/deal\">Deal</a> lets users play entirely anonymously. I can easily imagine a system wherein after 10 minutes of play time, a user just automatically got an in-game notice with a passphrase that would let them resume where they were. Because the server controls all the steps to a registration, it can happen behind the scenes with some game time effectively taking the place of a <a href=\"http://www.google.com/recaptcha\">Captcha</a>. This could be used with any system that lets you start off anonymously; wikis, bulletin boards, forums, etc.</p>

<p>That system, elegant as it might be from the implementation and usability side of things, wouldn't work for something like <a href=\"https://github.com/Inaimathi/goget\">GoGet</a>. Where the only possible reason to use the application is to go back later and check what you put in the first time. In that situation, you'd want the usual up-front \"Register\" button that would do the Captcha thing to make sure you're not a robot<a href=\"#foot-Tue-Dec-10-132028EST-2013\" name=\"note-Tue-Dec-10-132028EST-2013\">[8]</a>, and hand the user an account before they start doing stuff. Really, this might be re-designed too though; have the system start you off on a blank check-list, with an unobtrusive \"Log In\" form at the top of the page, with the added button \"Save\", which would register you and hand you a passphrase with which you could access the list you just made.</p>

<h3>What do we do when passphrase exhaustion occurs</h3>

<p>Granted, 216 000 000 000 000 is a large number, but it's not infinite, which means some clever bastard out there is going to find a way to cut it in half a few times for the purposes of guessing. And it doesn't take very many halvings to get that down to a tractable level. We have to deal with this problem a good deal sooner than \"passphrase exhaustion\"; if we get to the point where all passphrases are assigned, an attacker suddenly gets access to an account no matter which possibility they guess. But if we did something naive like hand out 2-word passphrases until they ran out, then an attacker who registers and receives a 3-word passphrase would know that any 2-word combination of our dictionary words will give them access to an existing account. We'd really want to generate new passphrases well before we ran out; at something like 10% exhaustion at a guess. Or better yet, don't limit passphrase length to two words, make it <code>n</code> random words, where <code>n</code> is something like</p>

<pre>(<span style=\"color: #a020f0;\">let</span> ((u-mod (/ user-count 1000000)))
  (random (+ 2 (floor u-mod)) (+ 4 (ceiling u-mod))))</pre>

<p>That should give attackers less purchase, and scale naturally with additional users.</p>

<h3>What Have We Got?</h3>

<p>Switching briefly over to my black hat, I can't see an attack on this system that would get you any traction above and beyond traditional password-based implementations<a href=\"#foot-Tue-Dec-10-132038EST-2013\" name=\"note-Tue-Dec-10-132038EST-2013\">[9]</a>. That doesn't mean there isn't a way, of course. I'll present the idea to some discerning and devious thinkers to see what they can come up with. Otherwise, we've got some interesting properties here, mainly because the server-side is the one putting everything together. We have a passphrase system that</p>

<ul>
  <li>only requires the barest interaction with the user</li>
  <li>can be initiated automatically at some point<a href=\"#foot-Tue-Dec-10-132043EST-2013\" name=\"note-Tue-Dec-10-132043EST-2013\">[10]</a></li>
  <li>will not suffer the failure mode that someone will use this same passphrase everywhere<a href=\"#foot-Tue-Dec-10-132046EST-2013\" name=\"note-Tue-Dec-10-132046EST-2013\">[11]</a>, meaning that even if the system is compromised, all an attacker has is access to an account for one particular service</li>
  <li>will never have to worry about a passphrase as shitty as \"password\" or \"12345\"</li>
</ul>

<p>On the flipside, though:</p>

<ul>
  <li>You can't change your passphrase to something you want</li>
  <li>There isn't a way to recover or reset a forgotten passphrase<a href=\"#foot-Tue-Dec-10-132049EST-2013\" name=\"note-Tue-Dec-10-132049EST-2013\">[12]</a></li>
</ul>

<p>All in all, barring someone pointing out some egregious security flaw in this approach, it seems to be worth implementing.</p>

<p>I'll see what I can do.</p>

<hr />
<h5>Footnotes</h5>
<p>1 - <a href=\"#note-Tue-Dec-10-132000EST-2013\" name=\"foot-Tue-Dec-10-132000EST-2013\">[back]</a> - Starting on pg 183 in the copy I'm holding.</p>

<p>2 - <a href=\"#note-Tue-Dec-10-132003EST-2013\" name=\"foot-Tue-Dec-10-132003EST-2013\">[back]</a> - The actual printed second password contains some unicode characters which were not accurately reproduced here.</p>

<p>3 - <a href=\"#note-Tue-Dec-10-132008EST-2013\" name=\"foot-Tue-Dec-10-132008EST-2013\">[back]</a> - Depending on how many words you decide to pack into each generated password.</p>

<p>4 - <a href=\"#note-Tue-Dec-10-132011EST-2013\" name=\"foot-Tue-Dec-10-132011EST-2013\">[back]</a> - Though it may just be a media imparted bias on my part.</p>

<p>5 - <a href=\"#note-Tue-Dec-10-132014EST-2013\" name=\"foot-Tue-Dec-10-132014EST-2013\">[back]</a> - Such as the refusal to use appropriate hashing algorithms, or inadvertent opening of various injection attacks.</p>

<p>6 - <a href=\"#note-Tue-Dec-10-132022EST-2013\" name=\"foot-Tue-Dec-10-132022EST-2013\">[back]</a> - Mine's a tuque because it's cold out and I'm in Canada, but you should feel free to don your hacking fedora, trilby, stetson, what-have-you as regionally appropriate.</p>

<p>7 - <a href=\"#note-Tue-Dec-10-132024EST-2013\" name=\"foot-Tue-Dec-10-132024EST-2013\">[back]</a> - Most authentication systems I interact with take longer anyhow.</p>

<p>8 - <a href=\"#note-Tue-Dec-10-132028EST-2013\" name=\"foot-Tue-Dec-10-132028EST-2013\">[back]</a> - Or not, really. Depending on how much traffic your system can handle, how much you care about preserving disk spce, and whether you give your users the ability to use SMTP facilities, you might get away with putting in an artificial 3 or 4 second delay before registration completes rather than trying to prevent automatic sign-ups. That's what I plan to do, in any case.</p>

<p>9 - <a href=\"#note-Tue-Dec-10-132038EST-2013\" name=\"foot-Tue-Dec-10-132038EST-2013\">[back]</a> - Apart from the situation where our ciphertext passwords have been leaked. Which, granted, isn't a high bar, but still.</p>

<p>10 - <a href=\"#note-Tue-Dec-10-132043EST-2013\" name=\"foot-Tue-Dec-10-132043EST-2013\">[back]</a> - As in the situation in Deal that would automatically hand the user a passphrase ~10 into active use of an unregistered account.</p>

<p>11 - <a href=\"#note-Tue-Dec-10-132046EST-2013\" name=\"foot-Tue-Dec-10-132046EST-2013\">[back]</a> - Hopefully, at least.</p>

<p>12 - <a href=\"#note-Tue-Dec-10-132049EST-2013\" name=\"foot-Tue-Dec-10-132049EST-2013\">[back]</a> - Since the passphrase acts as both a name and password, if you forget it, you just have to start a new account. Allowing the user to save as much of their data as possible locally would work to alleviate some of the pain from this.</p>
"))
((5202 3723 624265000) :INSERT (163 :POSTED 3595640400))
((5202 3723 624267000) :INSERT (163 :TAG :COMMON-LISP))
((5202 3723 624272000) :INSERT (163 :TAG :IDEA-PEELING))
((5202 3723 624273000) :INSERT (163 :TAG :SPECULATION))
((5202 3723 624563000) :INSERT
 (164 :TITLE "Implementing Humane Authentication"))
((5202 3723 624567000) :INSERT
 (164 :FILE "implementing-humane-authentication.html"))
((5202 3723 624569000) :INSERT (164 :EDITED 3610300681))
((5202 3723 624570000) :INSERT
 (164 :BODY
  "<p><a href=\"/article?name=jef-raskin-on-authentication.html\">Last time</a>, I mentioned the auth system proposed by Raskin in his book <a href=\"http://www.amazon.com/The-Humane-Interface-Directions-Interactive/dp/0201379376\">The Humane Interface</a>. This time, lets dissect something concrete.</p>

<p>Actually, before we get to dissecting anything, let me emphasize again that the <i>most</i> humane approach to authentication is not requiring it. If you have a system that could be exposed to anonymous users, that's what you should do. <i>If</i> you've decided that you absolutely must have some sort of authentication step, then this doesn't seem to be a bad way to go.</p>

<p>Now then...</p>

<pre><span style=\"color: #b22222;\">;;;; </span><span style=\"color: #b22222;\">raskin-auth.asd
</span>(asdf:defsystem #<span style=\"color: #7a378b;\">:raskin-auth</span>
  <span style=\"color: #7a378b;\">:serial</span> t
  <span style=\"color: #7a378b;\">:description</span> <span style=\"color: #8b2252;\">\"Implementation of the authentication system proposed in The Humane Interface\"</span>
  <span style=\"color: #7a378b;\">:author</span> <span style=\"color: #8b2252;\">\"Inaimathi &lt;<a href=\"mailto:leo.zovic&#64;gmail.com\">leo.zovic&#64;gmail.com</a>&gt;\"</span>
  <span style=\"color: #7a378b;\">:license</span> <span style=\"color: #8b2252;\">\"AGPL, as usual\"</span>
  <span style=\"color: #7a378b;\">:depends-on</span> (#<span style=\"color: #7a378b;\">:cl-ppcre</span> #<span style=\"color: #7a378b;\">:ironclad</span>)
  <span style=\"color: #7a378b;\">:components</span> ((<span style=\"color: #7a378b;\">:file</span> <span style=\"color: #8b2252;\">\"package\"</span>)
               (<span style=\"color: #7a378b;\">:file</span> <span style=\"color: #8b2252;\">\"util\"</span>)
               (<span style=\"color: #7a378b;\">:file</span> <span style=\"color: #8b2252;\">\"raskin-auth\"</span>)))</pre>

<pre><span style=\"color: #b22222;\">;;;; </span><span style=\"color: #b22222;\">package.lisp
</span>(<span style=\"color: #a020f0;\">defpackage</span> #<span style=\"color: #7a378b;\">:raskin-auth</span>
  (<span style=\"color: #7a378b;\">:use</span> #<span style=\"color: #7a378b;\">:cl</span>)
  (<span style=\"color: #7a378b;\">:export</span> #<span style=\"color: #7a378b;\">:new-account!</span> #<span style=\"color: #7a378b;\">:sign-in</span>))</pre>

<pre><span style=\"color: #b22222;\">;;;; </span><span style=\"color: #b22222;\">util.lisp
</span>(<span style=\"color: #a020f0;\">in-package</span> #<span style=\"color: #7a378b;\">:raskin-auth</span>)

<span style=\"color: #b22222;\">;;;; </span><span style=\"color: #b22222;\">Dictionary-related
</span>(<span style=\"color: #a020f0;\">defconstant</span> <span style=\"color: #a0522d;\">+dict+</span> (coerce 
                     (<span style=\"color: #a020f0;\">with-open-file</span> (s <span style=\"color: #8b2252;\">\"/usr/share/dict/american-english\"</span>)
                       (<span style=\"color: #a020f0;\">loop</span> for line = (read-line s nil <span style=\"color: #7a378b;\">:eof</span>) until (eql line <span style=\"color: #7a378b;\">:eof</span>)
                          unless (cl-ppcre:scan <span style=\"color: #8b2252;\">\"[</span><span style=\"color: #8b2252;\">^</span><span style=\"color: #8b2252;\">a-zA-Z]\"</span> line)
                          collect (string-downcase line)))
                     'vector))

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">random-words</span> (count <span style=\"color: #228b22;\">&amp;optional</span> (dict +dict+))
  (<span style=\"color: #a020f0;\">loop</span> repeat count
     collect (aref dict (random (length dict)))))

<span style=\"color: #b22222;\">;;;; </span><span style=\"color: #b22222;\">Hash-related
</span>(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">iterated-digest</span> ((count integer) (digest-spec symbol) (message string))
  (<span style=\"color: #ff0000; font-weight: bold;\">assert</span> (&gt; count 0))
  (<span style=\"color: #a020f0;\">loop</span> with res = (ironclad:ascii-string-to-byte-array message)
     repeat count do (setf res (ironclad:digest-sequence digest-spec res))
     finally (<span style=\"color: #a020f0;\">return</span> res)))</pre>

<pre><span style=\"color: #b22222;\">;;;; </span><span style=\"color: #b22222;\">raskin-auth.lisp
</span>(<span style=\"color: #a020f0;\">in-package</span> #<span style=\"color: #7a378b;\">:raskin-auth</span>)

(setf *random-state* (make-random-state t))

(<span style=\"color: #a020f0;\">defparameter</span> <span style=\"color: #a0522d;\">*users*</span> (make-hash-table <span style=\"color: #7a378b;\">:test</span> 'equal))

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">hash</span> (passphrase)
  (ironclad:byte-array-to-hex-string (iterated-digest 10000 <span style=\"color: #7a378b;\">:sha256</span> passphrase)))

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">fresh-passphrase</span> ()
  (<span style=\"color: #a020f0;\">let</span> ((u-mod (/ (hash-table-count *users*) 100000)))
    (<span style=\"color: #a020f0;\">loop</span> for num-words = (+ 2 (floor u-mod) (random (+ 2 (ceiling u-mod))))
       for passphrase = (format nil <span style=\"color: #8b2252;\">\"~{~(~a~)~^-~}\"</span> (random-words num-words))
       unless (gethash passphrase *users*) do (<span style=\"color: #a020f0;\">return</span> passphrase))))

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">new-account!</span> (<span style=\"color: #228b22;\">&amp;optional</span> (user-data t))
  (<span style=\"color: #a020f0;\">let</span> ((passphrase (fresh-passphrase)))
    (setf (gethash (hash passphrase) *users*) user-data)
    passphrase))

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">sign-in</span> (passphrase)
  (gethash (hash passphrase) *users*))</pre>

<p>And that's it. In a production system, you'd obviously want to wire everything up to some database system or other rather than using an in-memory hash-table, but this explains the concept well enough. You'd use this module by including it, then calling <code>(new-account! [user account data goes here])</code> (which will return a newly generated passphrase) and <code>(sign-in \"a-passphrase-goes-here\")</code> (which will return either <code>nil</code> or the account data you associated with the given passphrase) as necessary.</p>

<p>Lets go through it.</p>

<pre><span style=\"color: #b22222;\">;;;; </span><span style=\"color: #b22222;\">raskin-auth.asd
</span>(asdf:defsystem #<span style=\"color: #7a378b;\">:raskin-auth</span>
  <span style=\"color: #7a378b;\">:serial</span> t
  <span style=\"color: #7a378b;\">:description</span> <span style=\"color: #8b2252;\">\"Implementation of the authentication system proposed in The Humane Interface\"</span>
  <span style=\"color: #7a378b;\">:author</span> <span style=\"color: #8b2252;\">\"Inaimathi &lt;<a href=\"mailto:leo.zovic&#64;gmail.com\">leo.zovic&#64;gmail.com</a>&gt;\"</span>
  <span style=\"color: #7a378b;\">:license</span> <span style=\"color: #8b2252;\">\"AGPL, as usual\"</span>
  <span style=\"color: #7a378b;\">:depends-on</span> (#<span style=\"color: #7a378b;\">:cl-ppcre</span> #<span style=\"color: #7a378b;\">:ironclad</span>)
  <span style=\"color: #7a378b;\">:components</span> ((<span style=\"color: #7a378b;\">:file</span> <span style=\"color: #8b2252;\">\"package\"</span>)
               (<span style=\"color: #7a378b;\">:file</span> <span style=\"color: #8b2252;\">\"util\"</span>)
               (<span style=\"color: #7a378b;\">:file</span> <span style=\"color: #8b2252;\">\"raskin-auth\"</span>)))</pre>

<pre><span style=\"color: #b22222;\">;;;; </span><span style=\"color: #b22222;\">package.lisp
</span>(<span style=\"color: #a020f0;\">defpackage</span> #<span style=\"color: #7a378b;\">:raskin-auth</span>
  (<span style=\"color: #7a378b;\">:use</span> #<span style=\"color: #7a378b;\">:cl</span>)
  (<span style=\"color: #7a378b;\">:export</span> #<span style=\"color: #7a378b;\">:new-account!</span> #<span style=\"color: #7a378b;\">:sign-in</span>))</pre>

<p>That's the ASD file and package. The first makes sure you can load this system using <a href=\"http://common-lisp.net/project/asdf/\"><code>asdf</code></a> or <a href=\"http://www.quicklisp.org/beta/\"><code>quicklisp</code></a>, and the second declares your imports and exports. I'm trying something new this time and refusing to use <code>:use</code> or <code>:import-from</code> and friends. I've gotten a couple comments to the effect that it gets a bit confusing if I import symbols directly rather than labeling them inline with the package they came from, so even though <code>raskin-auth</code> <i>does</i> use things from both <a href=\"http://method-combination.net/lisp/ironclad/\"><code>ironclad</code></a> and <a href=\"http://weitz.de/cl-ppcre/\"><code>cl-ppcre</code></a>, the <code>package.lisp</code> file is staying minimal.</p>

<pre><span style=\"color: #b22222;\">;;;; </span><span style=\"color: #b22222;\">util.lisp
</span>(<span style=\"color: #a020f0;\">in-package</span> #<span style=\"color: #7a378b;\">:raskin-auth</span>)

<span style=\"color: #b22222;\">;;;; </span><span style=\"color: #b22222;\">Dictionary-related
</span>(<span style=\"color: #a020f0;\">defconstant</span> <span style=\"color: #a0522d;\">+dict+</span> (coerce 
                     (<span style=\"color: #a020f0;\">with-open-file</span> (s <span style=\"color: #8b2252;\">\"/usr/share/dict/american-english\"</span>)
                       (<span style=\"color: #a020f0;\">loop</span> for line = (read-line s nil <span style=\"color: #7a378b;\">:eof</span>) until (eql line <span style=\"color: #7a378b;\">:eof</span>)
                          unless (cl-ppcre:scan <span style=\"color: #8b2252;\">\"[</span><span style=\"color: #8b2252;\">^</span><span style=\"color: #8b2252;\">a-zA-Z]\"</span> line)
                          collect (string-downcase line)))
                     'vector))

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">random-words</span> (count <span style=\"color: #228b22;\">&amp;optional</span> (dict +dict+))
  (<span style=\"color: #a020f0;\">loop</span> repeat count
     collect (aref dict (random (length dict)))))

<span style=\"color: #b22222;\">;;;; </span><span style=\"color: #b22222;\">Hash-related
</span>(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">iterated-digest</span> ((count integer) (digest-spec symbol) (message string))
  (<span style=\"color: #ff0000; font-weight: bold;\">assert</span> (&gt; count 0))
  (<span style=\"color: #a020f0;\">loop</span> with res = (ironclad:ascii-string-to-byte-array message)
     repeat count do (setf res (ironclad:digest-sequence digest-spec res))
     finally (<span style=\"color: #a020f0;\">return</span> res)))</pre>

<p><code>random-words</code> creates a list of <code>count</code> random words by picking them out of a dictionary, which is <code>+dict+</code> by default. You don't necessarily want these words to be unique, so we don't check for that. <code>+dict+</code> is just some slightly sanitized output from <code>/usr/share/dict/american-english</code>, which is where Debian keeps the default English language dictionary. The result of that read is a <code>vector</code> of all words in the dict file that are composed entirely of lowercase letters. What we're doing, essentially is <code>shuf -n [count] /usr/share/dict/american-english</code>. Except we're filtering for some stuff, so that should really get piped through a <code>grep</code> or two. Use whatever method you'd like; the end goal is to get a list of <code>count</code> random words, from a list of ~60000 different words, each with an equal probability.</p>

<p><code>iterated-digest</code> takes a <code>count</code>, a <code>digest-spec</code> and a <code>message</code>, and applies the specified <code>digest</code> to the <code>message</code> <code>count</code> times sequentially. We'll take a look at how you call it in a second.</p>

<pre><span style=\"color: #b22222;\">;;;; </span><span style=\"color: #b22222;\">raskin-auth.lisp
</span>(<span style=\"color: #a020f0;\">in-package</span> #<span style=\"color: #7a378b;\">:raskin-auth</span>)

(setf *random-state* (make-random-state t))

(<span style=\"color: #a020f0;\">defparameter</span> <span style=\"color: #a0522d;\">*users*</span> (make-hash-table <span style=\"color: #7a378b;\">:test</span> 'equal))

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">hash</span> (passphrase)
  (ironclad:byte-array-to-hex-string (iterated-digest 10000 <span style=\"color: #7a378b;\">:sha256</span> passphrase)))

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">fresh-passphrase</span> ()
  (<span style=\"color: #a020f0;\">let</span> ((u-mod (/ (hash-table-count *users*) 100000)))
    (<span style=\"color: #a020f0;\">loop</span> for num-words = (+ 2 (floor u-mod) (random (+ 2 (ceiling u-mod))))
       for passphrase = (format nil <span style=\"color: #8b2252;\">\"~{~(~a~)~^-~}\"</span> (random-words num-words))
       unless (gethash passphrase *users*) do (<span style=\"color: #a020f0;\">return</span> passphrase))))

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">new-account!</span> (<span style=\"color: #228b22;\">&amp;optional</span> (user-data t))
  (<span style=\"color: #a020f0;\">let</span> ((passphrase (fresh-passphrase)))
    (setf (gethash (hash passphrase) *users*) user-data)
    passphrase))

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">sign-in</span> (passphrase)
  (gethash (hash passphrase) *users*))</pre>

<p><code>*users*</code> is a hash table that'll keep all of our user records<a href=\"#foot-Sat-Dec-14-125727EST-2013\" name=\"note-Sat-Dec-14-125727EST-2013\">[1]</a>, and both <code>new-account!</code> and <code>sign-in</code> are hopefully self explanatory. Let me linger on the rest of that though.</p>

<p>First, you absolutely positively need the <code>*random-state*</code> initialization. Without that line, your system will generate the same order of passphrases each time it starts up. Maybe that's not too big a deal in general, but I'm paranoid enough that I want proper, os-seeded randomness out when I'm generating authentication tokens.</p>

<p>Second, you can see the <code>iterated-digest</code> call here:</p>

<pre>(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">hash</span> (passphrase)
  (ironclad:byte-array-to-hex-string (iterated-digest 10000 <span style=\"color: #7a378b;\">:sha256</span> passphrase)))</pre>

<p>That takes a particular <code>passphrase</code> string and returns the result of applying the <code>:sha256</code> digest to it 10000 times. I guess you could make that <code>:sha512</code> if you really wanted to.</p>

<p>Finally, <code>fresh-passphrase</code> does the job of calling <code>random-words</code>, concatenating the result, and checking whether the result of <i>that</i> is already on record. It keeps going until it generates a passphrase that no one else is using at the moment, and returns that. You can see that it scales somewhat with count of users registered, just to make sure we don't get into the situation where a particular passphrase length is particularly easy to guess.</p>

<p>That's it. Again, what I see here is reasonable security.</p>

<h3>Thoughts</h3>

<p>On the one hand, you don't get to salt passphrase hashes. Which means that if anyone manages to trick a user of this auth system into revealing their ciphertexts, they'll have a mildly easier time cracking the result. And, since every passphrase is unique, they can knock out some tiny number of possibilities as they go. You also can't easily change your hashing tactic in-flight. Hypothetically, if you chose the iterated <code>:sha256</code> approach from above, and it then turned out that clever people found ways to compromise that hash, you wouldn't be able to switch your tactics on a live system easily, the way you could with a user-name-oriented system. You <i>would</i> be able to increase the number of hashings fairly easily; just modify your <code>hash</code> to do more iterations, and modify your registered users' passwords to make up the difference.</p>

<p>On the <i>other</i> hand, no one will ever have the passphrase <code>123</code> with this system. And, since they didn't pick it, they presumably won't have this same passphrase on any other service they frequent, which means a compromise here won't have to result in a mad dash to change their account passwords anywhere else fo fear of <a href=\"http://xkcd.com/792/\">exploits</a>.</p>

<p>The only other downsides seem to be that you can't choose a passphrase, and that if you forget your passphrase, you must create a new account.</p>



<hr />
<h5>Footnotes</h5>
<p>1 - <a href=\"#note-Sat-Dec-14-125727EST-2013\" name=\"foot-Sat-Dec-14-125727EST-2013\">[back]</a> -  <i>Because</i> it's a hash table, and I don't bother doing any kind of locking, the system you see specified here very likely won't do for any multi-threaded use-cases. You can either add locks, or go the whole nine and replace that hash table with an external database, but I don't need either to see the basic properties of the system, so I didn't implement them.</p>
"))
((5202 3723 624687000) :INSERT (164 :POSTED 3595986000))
((5202 3723 624689000) :INSERT (164 :TAG :ALMOST-LITERATE-PROGRAMMING))
((5202 3723 624691000) :INSERT (164 :TAG :COMMON-LISP))
((5202 3723 624930000) :INSERT (165 :TITLE "Debian Testing, Pi and Git"))
((5202 3723 624934000) :INSERT
 (165 :FILE "debian-testing-and-dicking-around-with-pis.html"))
((5202 3723 624936000) :INSERT (165 :EDITED 3610022331))
((5202 3723 624938000) :INSERT
 (165 :BODY "<p>That was a vacation, I guess.</p>

<p>It was suspiciously taxing, all in all. Time off from work hasn't been nearly as relaxing since we had a kid, but that's a digression. Over the past little while, I've managed to finally make use the 120G solid state drive I picked up half a year ago, install various distros, and put together about one third of a utility to ease a project or two I'm working on in my spare time.</p>

<h3>New Drive</h3>

<p>It's at once larger and smaller than the last one. On the one hand, thanks to its smaller physical profile, I can fit it into my laptop with no mods. On the other hand, <code>df -h</code> says <code>106G</code><a href=\"#foot-Sat-Jan-04-174331EST-2014\" name=\"note-Sat-Jan-04-174331EST-2014\">[1]</a> instead of <code>~28G</code>.</p>

<p>That's it, nothing else to see here.</p>

<h3>Fresh Install</h3>

<p>Since I was between drives anyhow, I took the opportunity to get the fresh version of <a href=\"http://www.debian.org/devel/debian-installer/\">Debian</a> up and running. That was worth it, by the by, if for no other reason than they've apparently poured enough bucketfulls of time into the networking code that I can now reliably connect to my wifi access point even if I'm not within two meters of it. They also seemed to lick a problem I kept running into wherein the shutdown process would hang the machine<a href=\"#foot-Sat-Jan-04-174334EST-2014\" name=\"note-Sat-Jan-04-174334EST-2014\">[2]</a>.</p>

<p>There were a few changes in my install routine, which is still vaguely based on</p>

<pre><span style=\"color: #b22222;\">## </span><span style=\"color: #b22222;\">temporarily add
</span><span style=\"color: #b22222;\">## </span><span style=\"color: #b22222;\">deb http://packages.linuxmint.com debian import
</span><span style=\"color: #b22222;\">## </span><span style=\"color: #b22222;\">and `contrib non-free` to /apt/sources.lisp
</span>
apt-get install firmware-ralink firmware-realtek
apt-get install screen make emacs24 git gitk wicd-curses pmount htop gnupg unetbootin
apt-get install mplayer feh pacpl imagemagick x-window-system dmenu xmonad gimp inkscape firefox
apt-get install python-pip sbcl vrms

<span style=\"color: #b22222;\">## </span><span style=\"color: #b22222;\">remove the temporary repos</span></pre>

<p>There are a couple of changes there from my usual. Firstly, <a href=\"https://www.mozilla.org/en-US/firefox/new/\">Firefox</a> has become my go-to browser. Its absorbed most of the goodness from Chromium, including the reduced toolbar footprint and fantastic JS console. It also has support for adblock, and a fairly good RSS feed reader, and it's no longer slow as molasses<a href=\"#foot-Sat-Jan-04-174337EST-2014\" name=\"note-Sat-Jan-04-174337EST-2014\">[3]</a>. This raises the problem of the Debian packaging though; in the official repos, <code>apt-get install firefox</code> gets you a pretty ham-fisted re-brand with no plugin support called <a href=\"http://packages.debian.org/unstable/web/iceweasel\">\"Iceweasel\"</a>. What I ended up doing, as you can see above, is temporarily adding the <a href=\"http://www.linuxmint.com/\">Linux Mint</a> repo to install that<a href=\"#foot-Sat-Jan-04-174339EST-2014\" name=\"note-Sat-Jan-04-174339EST-2014\">[4]</a>. Secondly, I'm installing <code>emacs24</code> rather than just plain <code>emacs</code>. This is because the current default for <code>emacs</code> in Jessie is Emacs 23.something, and that doesn't have one of the main features I'm looking to finally adopt.</p>

<p>Emacs 24 supports <a href=\"https://www.gnu.org/software/emacs/manual/html_node/emacs/Package-Installation.html#Package-Installation\"><code>package</code></a> out of the box. In practice, this means adding</p>

<pre>(<span style=\"color: #a020f0;\">require</span> '<span style=\"color: #008b8b;\">package</span>)
(add-to-list 'package-archives '(<span style=\"color: #8b2252;\">\"melpa\"</span> . <span style=\"color: #8b2252;\">\"http://melpa.milkbox.net/packages/\"</span>) t)</pre>

<p>to my <code>.emacs</code> instead of toting my old <code>.emacs.d/</code> around. I can't actually remember every library I <i>used</i> to have around, so the list I settled on this time out ended up being</p>

aes auto-complete autopair highlight-parentheses htmlize skewer-mode magit markdown-mode paredit redo+ smart-tab yasnippet

<p>Which covers pretty much everything. Oh, one thing. I spent about half an hour figuring out what was going wrong with my <code>.emacs</code> config; libraries I was certain had been installed were coming back with <code>not found</code> errors when I tried to <code>require</code> them. It turns out that when you add a directory to the load path, you don't automatically add all its subdirectories. As you can see by the above list of packages, I use quite a few, each of which gets its own sub-directory in <code>.emacs.d/elpa/</code>, and wildcards don't work here either. So I was forced to add the following to <a href=\"https://github.com/Inaimathi/emacs-utils/blob/master/convenience.el\">convenience.el</a>, just to save myself the tedium</p>

<pre>(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">starts-with-dot-p</span> (path)
  (= (aref path 0) ?.))

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">list-subdirectories</span> (path)
  (<span style=\"color: #a020f0;\">let</span> ((all (mapcar 
              (<span style=\"color: #a020f0;\">lambda</span> (name) (concat (file-name-as-directory path) name))
              (remove-if #'starts-with-dot-p (directory-files path)))))
    (remove-if-not #'file-directory-p all)))

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">add-to-load-path</span> (dirs)
  (mapc (<span style=\"color: #a020f0;\">lambda</span> (p) (add-to-list 'load-path p)) dirs))</pre>

<p>then called this near the top of that <code>.emacs</code> file:</p>

<pre>(add-to-load-path (list-subdirectories <span style=\"color: #8b2252;\">\"~/.emacs.d/elpa\"</span>))</pre>

<p>This let me continue as normal. The only omission from that emacs package list is <a href=\"http://common-lisp.net/project/slime/\"><code>slime</code></a>, which I've lately been installing from <code>sbcl</code> or what-have-you with <code>(ql:quickload :quicklisp-slime-helper)</code> rather than through Emacs itself. It works exactly as well as you'd expect, which is to say flawlessly.</p>

<h3>Dicking Around With Pis</h3>

<p>Doing that got me into an installing mood, so I also formatted a fresh couple of SD cards with the latest versions of <a href=\"http://archlinuxarm.org/platforms/armv6/raspberry-pi\">ARM Arch</a> and <a href=\"http://www.raspbian.org/\">Raspbian</a> respectively. I did this with the vague intention of getting <code>deal</code> to work with one or both, and it looks like <i>that</i>'ll take a bit more work than just a straight-up <code>ql:quickload</code>. Differences before I get to that though.</p>

<p>The RPi arch is much closer to what I'm used to on my laptop. A brutally minimal installation of the few core utilities you need to get basic shit done, and <i>nothing else</i>. Specifically, it gives you <code>pacman</code>, <code>perl</code>, a working <code>ssh</code> server and a minimally intrusive wireless connection mechanism that could replace <code>wicd-curses</code> for me. Raspbian, by contrast, bundles a mandatory window environment along with a bunch of crap that's probably nice for most humans looking to use it as a desktop replacement, but that I'll never end up touching. Also, they bundle Scratch as well as Python 2 <i>and</i> 3. Finally, while they do provide an <code>ssh</code> server, it's off by default, and the first time you boot a Raspbian image, it <i>forces</i> <code>raspi-config</code>, which means that you <i>must</i> connect a Raspbian Pi to a monitor and keyboard at least once.</p>

<p>That minimalism ends up biting Arch a bit though; it doesn't come with the standard <code>raspi-config</code> utility, which lets you dick around with the hardware to some small extent, and easily resize the installation partition to fill the SD card<a href=\"#foot-Sat-Jan-04-174349EST-2014\" name=\"note-Sat-Jan-04-174349EST-2014\">[5]</a>. The other thing that bites ARM Arch in the ass, as far as I'm concerned, is the fact that its package manager has very few of the things I want to install. Out of my usual menagerie, I found <code>screen</code>, <code>make</code>, <code>clisp</code>, <code>python</code>, <code>emacs</code> and nothing else. By contrast, I had to <code>apt-get --purge</code> a bunch of things over on Raspbian, but I <i>was</i> eventually able to get it working with an almost copy of my laptop environment.</p>

<p>Almost, because Lisp still has some problems.</p>

<p>Specifically, <code>clisp</code> segfaults on both ARM Arch <i>and</i> Raspbian when you try to load anything with <code>quicklisp</code>, while the ARM <a href=\"http://ccl.clozure.com/download.html\">ccl</a> failed to run at all on Arch<a href=\"#foot-Sat-Jan-04-174352EST-2014\" name=\"note-Sat-Jan-04-174352EST-2014\">[6]</a>. Raspbian <i>did</i> run <code>ccl</code> appropriately, but errored out on me for two reasons. Firstly, there's something unsupported about the <code>:ironclad</code> MD5 digest, and secondly, the ARM architecture seems to treat bivalent streams differently than x86. Which means that even running its custom <a href=\"https://github.com/Inaimathi/deal/tree/master/house\"><code>house</code></a> server, <code>:deal</code> errored out.</p>

<p>I'll be trying to fix that over the next little while.</p>

<h3>cl-git-fs</h3>

<p>Finally, on a merely semi-related note, I'm working on a couple of projects on my own time that are eventually going to want to do some sort of file management. And I figured it would be nice not to have to bring <code>git</code> into it manually after the fact. To that end, I took a look at how <a href=\"http://gitit.net/\"><code>gitit</code></a> manages the trick of using git as a faux-database for its wiki pages. It's <a href=\"http://hackage.haskell.org/package/filestore-0.3.2/docs/src/Data-FileStore-Git.html\">not that complicated</a>, as it turns out. And <a href=\"https://github.com/Inaimathi/cl-git-fs\">here's</a> the result of spending an hour or two porting that piece of functionality to Common Lisp.</p>

<p>The biggest problem I'm running into is that there isn't a standard <code>shell-command</code> or <code>run-program</code> defined in the various Lisps I want to support.</p>

<p>I'm tossing it up to <a href=\"https://github.com/Inaimathi\">my github</a>, but calling it <code>0.01</code> because there's a fuckton of functionality and documentation missing. In particular, it currently only supports SBCL on Linux, and a few of the external API functions still return raw string results, rather than properly parsed CLOS instances. The documentation and parsing will be a priority no matter what, but I'll only see how it runs on other platforms and implementations as I need to deploy to them.</p>


<hr />
<h5>Footnotes</h5>
<p>1 - <a href=\"#note-Sat-Jan-04-174331EST-2014\" name=\"foot-Sat-Jan-04-174331EST-2014\">[back]</a> - Of course, the drive box says 128G, so Samsung and all drive manufacturers are lying shitbags, but I'm digressing again.</p>
<p>2 - <a href=\"#note-Sat-Jan-04-174334EST-2014\" name=\"foot-Sat-Jan-04-174334EST-2014\">[back]</a> - And therefore keep drawing power until a forced shutdown.</p>
<p>3 - <a href=\"#note-Sat-Jan-04-174337EST-2014\" name=\"foot-Sat-Jan-04-174337EST-2014\">[back]</a> - which it was last time I played around with it.</p>
<p>4 - <a href=\"#note-Sat-Jan-04-174339EST-2014\" name=\"foot-Sat-Jan-04-174339EST-2014\">[back]</a> - No, since you ask, I've never just straight up tried Mint. It has something in common with most of the distros I get recommended, which is that it cribs heavily from Debian on everything that matters, and then tries to differentiate on the desktop environment almost entirely. Not that this is bad for end users I guess, but as you can see from the <code>x-window-system</code> and <code>xmonad</code> items in that installation list above, I do not use what you would think of as \"a desktop environment\". Don't let that stop you from trying it, of course, but <i>I'm</i> not going to.</p>
<p>5 - <a href=\"#note-Sat-Jan-04-174349EST-2014\" name=\"foot-Sat-Jan-04-174349EST-2014\">[back]</a> - You can still do this externally via <code>gparted</code> when you image your SD card.</p>
<p>6 - <a href=\"#note-Sat-Jan-04-174352EST-2014\" name=\"foot-Sat-Jan-04-174352EST-2014\">[back]</a> - running the included binary gave me a \"wrong architecture\" error, even though there's no way that's accurate.</p>
"))
((5202 3723 625025000) :INSERT (165 :POSTED 3597800400))
((5202 3723 625026000) :INSERT (165 :TAG :COMMON-LISP))
((5202 3723 625028000) :INSERT (165 :TAG :ELISP))
((5202 3723 625030000) :INSERT (165 :TAG :EMACS))
((5202 3723 625031000) :INSERT (165 :TAG :GIT))
((5202 3723 625033000) :INSERT (165 :TAG :HARDWARE))
((5202 3723 625034000) :INSERT (165 :TAG :HASKELL))
((5202 3723 625036000) :INSERT (165 :TAG :PROGRAMMING-ENVIRONMENT))
((5202 3723 625039000) :INSERT (165 :TAG :PROGRAMMING-INTERFACES))
((5202 3723 625289000) :INSERT (166 :TITLE "Which Lisp Should I Learn?"))
((5202 3723 625294000) :INSERT (166 :FILE "recommendations.html"))
((5202 3723 625296000) :INSERT (166 :EDITED 3610300934))
((5202 3723 625298000) :INSERT
 (166 :BODY
  "<p>I don't know why this keeps coming up lately, but it does. So, here we go:</p>

<h3>My Recommendation</h3>

<p>If you want to learn your first Lisp and already know something about the JVM<a href=\"#foot-Fri-Jan-24-105200EST-2014\" name=\"note-Fri-Jan-24-105200EST-2014\">[1]</a>, you should learn <a href=\"http://clojure.org/\">Clojure</a><a href=\"#foot-Fri-Jan-24-105205EST-2014\" name=\"note-Fri-Jan-24-105205EST-2014\">[2]</a>. Otherwise, you should learn Scheme. Specifically, I recommend going the route that takes you through <a href=\"http://racket-lang.org/\">Racket</a><a href=\"#foot-Fri-Jan-24-105208EST-2014\" name=\"note-Fri-Jan-24-105208EST-2014\">[3]</a>, and possibly through <a href=\"https://github.com/sarabander/sicp-pdf/raw/master/sicp.pdf\">SICP</a> or <a href=\"http://htdp.org/\">HTDP</a>.</p>

<p>If you absolutely, positively must, I guess go ahead and learn Common Lisp.</p>

<h3>Why</h3>

<p>Clojure the language, as opposed to the current, main, half-fused-with-JVM implementation, is cleaner and more consistent than Common Lisp, which should help you learn it more easily. I've gotten back talk about how there are lots more noobs learning Clojure, and as a result their libraries are in some disarray, and about the fact that the JVM is a sack of donkey balls you have to bite into every time you hit some sort of error<a href=\"#foot-Fri-Jan-24-105212EST-2014\" name=\"note-Fri-Jan-24-105212EST-2014\">[4]</a>, and about the general Clojure community pre-disposition to fashion trends. All of which may or may not be true, but I'm specifically talking about <i>the language</i>, not its ecosystem or stalwarts. Now granted, all of Racket, Clojure and Common Lisp are</p>

<ol>
  <li>built out of s-expressions</li>
  <li>have <code>defmacro</code></li>
</ol>

<p>so depending on how much work you're willing to put in, you can do whatever the fuck you want in all of them<a href=\"#foot-Fri-Jan-24-105237EST-2014\" name=\"note-Fri-Jan-24-105237EST-2014\">[5]</a>. However, in addition to knowing about prefix notation, and macros, and general Lisp program structure, here's an incomplete list of idiosyncrasies of Common Lisp that you have to commit to memory before you can be effective in it:</p>

<ul>
  <li>Functions and variables are in different namespaces, and each has constructs that deal with them explicitly. You need to use <code>defvar</code>/<code>defun</code> and <code>let</code>/<code>flet</code> depending on whether you're using functions or variables. If you're passing symbol names around, symbols that denote variables can be sent around as <code>'foo</code> whereas symbols that denote functions should be sent around as <code>#'foo</code>. If you're trying to pass a function around in the variable <code>foo</code>, you need to <code>(funcall foo arg)</code> or possibly <code>(apply foo args)</code>, rather than just <code>(foo arg)</code>.</li>
  <li>Most functions that deal with lists are functional, except the standard <code>sort</code> and the default <code>mapcan</code>, both of which destructively modify the list you pass them.</li>
  <li>You can define methods for your classes, but can't easily use certain default names that are bound to top-level functions. Such as <code>length</code>, or the arithmetic primitives. Which is why you frequently see methods like <code>duration-add</code> or <code>matrix-mult</code>.</li>
  <li>There are 7 commonly used equality operators, <code>eq</code>, <code>eql</code>, <code>equal</code>, <code>equalp</code>, <code>string=</code>, <code>char=</code> and <code>=</code><a href=\"#foot-Fri-Jan-24-105253EST-2014\" name=\"note-Fri-Jan-24-105253EST-2014\">[6]</a>, each of which has mildly different, sometimes implementation-specific, behavior. Granted, because CL isn't a pure language, you need at least 2 of those, but 7 is still a bit much to have people memorize.</li>
  <li>There are three different local binding mechanisms that you must decide between depending on whether you want to be able to refer to earlier symbols in the same binding set, or whether you want symbols to be able to refer to themselves. You use <code>let</code>/<code>flet</code> if you don't care, <code>let*</code> for variables where you want later bindings to be able to refer to earlier ones, and <code>labels</code> for functions where you want bindings to be able to refer to themselves or earlier bindings.</li>
  <li>There are many, <i>many</i> implementations of Common Lisp. The popular ones at the moment are <a href=\"http://www.sbcl.org/\">SBCL</a> and <a href=\"http://ccl.clozure.com/download.html\">CCL</a>, but I've personally seen <a href=\"http://www.clisp.org/\">CLISP</a>, <a href=\"http://ecls.sourceforge.net/\">ECL</a> and <a href=\"http://www.lispworks.com/products/lispworks.html\">Lispworks</a> around too. More are available, and you might run into a lot of them in the wild. If you want to write portable code, you have to jump through some hoops. The implementation-specifics range from the finer points of equality operator behaviors, to the behavior of <code>handler-case</code><a href=\"#foot-Fri-Jan-24-105327EST-2014\" name=\"note-Fri-Jan-24-105327EST-2014\">[7]</a>, to the types you can specialize on with <code>defmethod</code>, to the presence and behavior of threads, to the contexts in which you can pass streams around, to the names of various extension functions. For a small but representative example, take a look at <a href=\"https://github.com/Inaimathi/cl-git-fs/blob/master/util.lisp#L12-L56\">what it takes to temporarily change your current directory in an implementation-independent way</a>.</li>
  <li>Indexing into different constructs takes different forms. You need <code>nth</code> for lists, <code>aref</code> for arrays and vectors, <code>gethash</code> for hashes and <code>slot-value</code> for CLOS instances<a href=\"#foot-Fri-Jan-24-105330EST-2014\" name=\"note-Fri-Jan-24-105330EST-2014\">[8]</a>.</li>
  <li>You can't use the symbol <code>t</code> anywhere. No, not even local scopes. If you try, you'll get warnings or errors<a href=\"#foot-Fri-Jan-24-105333EST-2014\" name=\"note-Fri-Jan-24-105333EST-2014\">[9]</a>, because <code>t</code> is the top-level designated Truth symbol, even though anything other than <code>NIL</code> <a href=\"/article?name=truthy-and-falsy.html\">evaluates truthily</a> in a boolean context.</li>
  <li>A hash isn't a list, and a CLOS instance isn't anything like either. One way you'd <i>like</i> them to be similar is when you're traversing them. It seems fairly reasonable to expect <code>map</code>-likes to operate on hashes by treating them as a sequence of key/value pairs, and instances by treating their bound slots as key/value pairs. This is not how things work. If you want to map over instances that way, you need to do something like <a href=\"https://github.com/Inaimathi/cl-mop/blob/master/package.lisp\">this</a> and <a href=\"https://github.com/Inaimathi/cl-mop/blob/master/cl-mop.lisp#L6-L21\">this</a>. If you want to <code>map</code> over hashes, you either use the hilariously mis-named <code>maphash</code><a href=\"#foot-Fri-Jan-24-105336EST-2014\" name=\"note-Fri-Jan-24-105336EST-2014\">[10]</a> or some idiosyncratic piece of the <a href=\"http://www.gigamonkeys.com/book/loop-for-black-belts.html\"><code>loop</code> DSL</a> that lets you iterate over hash keys and hash values.</li>
  <li>Common Lisp is case-insensitive. It takes whatever symbol input from you and upcases it internally. So <code>foo-bar</code> and <code>foo-Bar</code> both become <code>FOO-BAR</code> behind the scenes. This is usually not a huge problem, unless you try to interoperate cleanly with newer data standards like CSS or JSON. That leaves you fumbling with <code>string</code>s in situations where <code>symbol</code>s and/or <code>keyword</code>s really ought to do.</li>
</ul>

<p>Like I said, this is a small sample. Just the stuff I thought of off the top of my head. I'm sure I could come up with more if I put a day or two into it. And I'm far from the most experienced Lisper out there, others would have more finer points for you, I'm sure. But that's half the problem with little issues like this; experienced Lispers completely forget about them. It's the newbs that have trouble cramming these things into their heads.</p>

<p>When I take a good look at that list, and then imagine the situations that led to each element, it's difficult to conclude that a wrong decision was made at any given point in time. Unfortunately, the sum of all of those potentially correct decisions is a giant system, the inherent rules of which look inconsistent if not outright hostile to human minds.</p>

<p>I don't know if Clojure solves all of them.</p>

<p>I've done very little work with it, for reasons entirely unrelated to the language. For all I know, when you get deep enough into it, you get to inconsistencies and/or restrictions which are worse than anything I've pointed out or could. Also, just in the interests of clarity, in case the \"Common Lisp\" sitting comfortably at the top of this blogs' tag list wasn't enough of a hint, I use Common Lisp. I <i>like</i> Common Lisp. But it's primarily because I've internalized enough minutia to feel comfortable in it.</p>

<p>But do me a favor, if you're a CL user, either hop over to this <a href=\"http://tryclj.com/\">web REPL</a>, or install <code>leiningen</code> then hop into your local <code>lein repl</code> and type along here:</p>

<pre>user=&gt; (<span style=\"color: #a020f0;\">def</span> <span style=\"color: #0000ff;\">thing</span> [8 7 6 5 4 3 2 1])
#'user/thing
user=&gt; (thing 0)
8
user=&gt; (thing 3)
5
user=&gt;(<span style=\"color: #483d8b;\">map</span> (<span style=\"color: #a020f0;\">fn</span> [n] (<span style=\"color: #483d8b;\">+</span> 3 n)) thing)
(11 10 9 8 7 6 5 4)
user=&gt; (<span style=\"color: #a020f0;\">def</span> <span style=\"color: #0000ff;\">thing</span> {<span style=\"color: #008b8b;\">:a</span> 1 <span style=\"color: #008b8b;\">:b</span> 2 <span style=\"color: #008b8b;\">:c</span> 3})
#'user/thing
user=&gt; (thing <span style=\"color: #008b8b;\">:c</span>)
3
user=&gt; (thing <span style=\"color: #008b8b;\">:d</span> 6)
6
user=&gt; (thing <span style=\"color: #008b8b;\">:a</span> 6)
1
user=&gt; (<span style=\"color: #483d8b;\">map</span> (<span style=\"color: #a020f0;\">fn</span> [[k v]] (<span style=\"color: #483d8b;\">+</span> v 2)) thing)
(3 4 5)
user=&gt; (<span style=\"color: #a020f0;\">def</span> <span style=\"color: #0000ff;\">thing</span> #{1 2 3 4 5}) <span style=\"color: #b22222;\">;; </span><span style=\"color: #b22222;\">a set, in case you were wondering
</span>#'user/thing
user=&gt; (thing 3)
3
user=&gt; (thing 0) 
nil
user=&gt; (<span style=\"color: #483d8b;\">map</span> (<span style=\"color: #a020f0;\">fn</span> [a] (<span style=\"color: #483d8b;\">+</span> a 2)) thing)
(3 4 5 6 7)
user=&gt; (<span style=\"color: #a020f0;\">def</span> <span style=\"color: #0000ff;\">triple</span> (<span style=\"color: #a020f0;\">fn</span> [a] (<span style=\"color: #483d8b;\">*</span> a 3)))
#'user/triple
user=&gt; (triple 4)
12
user=&gt; (<span style=\"color: #483d8b;\">map</span> triple thing)
(3 6 9 12 15)
user=&gt; (<span style=\"color: #483d8b;\">map</span> (<span style=\"color: #a020f0;\">fn</span> [a] (<span style=\"color: #a020f0;\">let</span> [t (<span style=\"color: #483d8b;\">-</span> (triple a) 5)] (<span style=\"color: #483d8b;\">*</span> 2 t))) thing)
(-4 2 8 14 20)</pre>

<p>Now think about how you would go about explaining to a novice programmer that it has to be more complicated than that.</p>

<hr />
<h5>Footnotes</h5>
<p>1 - <a href=\"#note-Fri-Jan-24-105200EST-2014\" name=\"foot-Fri-Jan-24-105200EST-2014\">[back]</a> - And don't have a strong dislike for it, obviously.</p>

<p>2 - <a href=\"#note-Fri-Jan-24-105205EST-2014\" name=\"foot-Fri-Jan-24-105205EST-2014\">[back]</a> - Install it through <a href=\"https://github.com/technomancy/leiningen\">Leiningen</a>, which is available in the <a href=\"http://packages.debian.org/sid/leiningen\">Debian repos</a> in stable and unstable.</p>

<p>3 - <a href=\"#note-Fri-Jan-24-105208EST-2014\" name=\"foot-Fri-Jan-24-105208EST-2014\">[back]</a> - Yes, I'm fully aware that the Racket guys are trying to push this \"We're totally not Scheme\" thing. They're close enough from an external perspective. Just don't tell Jay McCarthy I said so.</p>

<p>4 - <a href=\"#note-Fri-Jan-24-105212EST-2014\" name=\"foot-Fri-Jan-24-105212EST-2014\">[back]</a> - Which is certainly true, but mildly preferable to the alternative as long as you're used to that sort of thing.</p>

<p>5 - <a href=\"#note-Fri-Jan-24-105237EST-2014\" name=\"foot-Fri-Jan-24-105237EST-2014\">[back]</a> - Except that Clojure is apparently missing Reader macros, which I always thought were kind of half-assedly implemented in Common Lisp. For what I consider the full-ass version, take a look at <a href=\"http://www.haskell.org/haskellwiki/Quasiquotation\">how Haskell does it</a>.</p>

<p>6 - <a href=\"#note-Fri-Jan-24-105253EST-2014\" name=\"foot-Fri-Jan-24-105253EST-2014\">[back]</a> - Plus how many ever <code>*-equal</code> functions you define for your own classes.</p>

<p>7 - <a href=\"#note-Fri-Jan-24-105327EST-2014\" name=\"foot-Fri-Jan-24-105327EST-2014\">[back]</a> - The Common Lisp answer to the problems that call for <code>try</code>/<code>catch</code> in other languages.</p>

<p>8 - <a href=\"#note-Fri-Jan-24-105330EST-2014\" name=\"foot-Fri-Jan-24-105330EST-2014\">[back]</a> - For the last, you can also define your own selectors using <code>:reader</code> or <code>:accessor</code> declarations.</p>

<p>9 - <a href=\"#note-Fri-Jan-24-105333EST-2014\" name=\"foot-Fri-Jan-24-105333EST-2014\">[back]</a> - Which specific warning or error depends on implementation.</p>

<p>10 - <a href=\"#note-Fri-Jan-24-105336EST-2014\" name=\"foot-Fri-Jan-24-105336EST-2014\">[back]</a> - Because it's not very much like <code>map</code>. It returns nil and works by side-effect. Meaning that if you expect a sequence from it, you'll need to construct it yourself.</p>
"))
((5202 3723 625393000) :INSERT (166 :POSTED 3599528400))
((5202 3723 625395000) :INSERT (166 :TAG :CLOJURE))
((5202 3723 625397000) :INSERT (166 :TAG :COMMON-LISP))
((5202 3723 625398000) :INSERT (166 :TAG :LISP))
((5202 3723 625400000) :INSERT (166 :TAG :SCHEME))
((5202 3723 625593000) :INSERT
 (167 :TITLE "Update, and the Finer Points of Quasimodes"))
((5202 3723 625598000) :INSERT
 (167 :FILE "update-and-the-finer-points-of-quasimodes.html"))
((5202 3723 625601000) :INSERT (167 :EDITED 3610022331))
((5202 3723 625603000) :INSERT
 (167 :BODY
  "<p>I was going to say \"this'll just be a quick update\", but on reflection, I'm not sure that's true. I want to discuss two specific things I recently implemented, as well as what's been going on lately project-wise.</p>

<p>First things first.</p>

<h3>AOSA Chapter</h3>

<p>I'm doing a chapter for the upcoming book called <i><a href=\"https://github.com/aosabook/500lines\">500 Lines or Less</a></i>. It's the fourth installment in the <a href=\"http://aosabook.org/en/index.html\">Architecture of Open Source Applications series</a>. To, I should hope, no ones' surprise, I'm doing a write-up of the <a href=\"https://github.com/Inaimathi/house\">House</a> asynchronous server currently serving as the back-end for the <a href=\"https://github.com/Inaimathi/deal\">Deal</a> project. I've seen fit to simplify the server a bit for entry, since the real live one masses slightly more than 500 lines. You can see the result <a href=\"https://github.com/Inaimathi/500lines/tree/master/async-web-server\">here</a>; that's the House server with the session and static file mechanisms stripped out, which happens to weigh in at just over 400 lines of fairly readable Common Lisp. The first 1/2 draft of the prose write-up is <a href=\"https://github.com/Inaimathi/500lines/blob/master/async-web-server/writeup.md\">here</a>.</p>

<p>This process is new to me. Granted, I write a fuck-ton, but I'm usually also the editor and proofreader. Frankly, I don't envy anyone that job. It may not look like it, but I end up chopping a good half of my output before it gets posted anywhere, and then tweak about a third of the result after the fact. Hopefully, involving other eyes will mean a more refined exposition than I usually manage.</p>

<h3>2dmacs</h3>

<p>I'm still working on that visual editor at work. Internally, we've taken to calling the project \"<code>2dmacs</code>\", pronounced \"two-dee-macs\". Hopefully, I can live up to the name. We're going to do some user trials tomorrow, just to see what the target audience of 5 thinks. It's still missing one or two big features, mostly history related and mostly pretty straight-forward to implement. But based on my own experience, it's already more productive than the alternatives for the sorts of things we'll be doing. I'll let you know how it goes.</p>

<p>Now then, moving on to a couple of implementation details. Except that I still can't show you code. Sorry.</p>

<h3>Quasimodes</h3>

<p>Quasimodes are another thing I picked up from <a href=\"http://www.amazon.com/The-Humane-Interface-Directions-Interactive/dp/0201379376\">that Raskin book</a><a href=\"#foot-Tue-Jan-28-214701EST-2014\" name=\"note-Tue-Jan-28-214701EST-2014\">[1]</a>. The idea is to let holding a particular key kick off a different interaction mode and cancel out of it on release. Raskin's example is of the <code>Caps Lock</code> and <code>Shift</code> keys. Basically, <code>Caps Lock</code> switches the user into a mode where standard keyboard keys do something different, whereas <code>Shift</code> activates a quasimode to the same ends. The argument is that the second is better because there's no confusion about what state the system is currently in. If you're holding shift, you're in shout mode. If you're not, you're not. Comparatively, as long as your keyboard has a Caps Lock key, you might be dumped into Shout mode by an accidental keypress. If you've ever tried to type in a password, you know the problems this can cause. Quasimodes neatly sidestep the issue by keeping a mode active only as long as the user deliberately holds a particular key.</p>

<p>Implementing this in Javascript turns out to be non-trivial. Even after you've built up your own little event system around the various input actions a user can take. What you naively need to do is capture the <code>keydown</code> event, activate a given quasimode<a href=\"#foot-Tue-Jan-28-214704EST-2014\" name=\"note-Tue-Jan-28-214704EST-2014\">[2]</a>, and clean up when you get a <code>keyup</code> corresponding to the initiating <code>keydown</code>.</p>

<p>That has some implications, though.</p>

<p>First, it requires the ability to <i>optionally</i> route events through particular functions. Which means that you have to have a layer of indirection between the default HTML event handlers and your systems' commands. Luckily, the system I'm building had that already for unrelated reasons, but if you're trying to do this properly in <i>your</i> system, it might mean some architectural changes.</p>

<p>Second, because we're dealing with browser events, we need to be able to cancel out of a quasimode with something other than the initiating keydown event<a href=\"#foot-Tue-Jan-28-214707EST-2014\" name=\"note-Tue-Jan-28-214707EST-2014\">[3]</a>. In my case, I had already wired <code>&lt;<span style=\"color: #0000ff;\">esc</span>&gt;</code> as the generic cancel button. It already drops you out of half-completed keystrokes and resets some small pieces of internal state to their original positions. So it made perfect sense to just add \"exit any quasimodes\" to the list of things it does.</p>

<p>Finally, unless you want to let quasimodes monopolize the keys they'll be bound to, it means having some logic involved that distinguishes between a regular keypress and a quasimode invocation. That ended up being resolved a touch hackily; if you press a quasimode key, but don't trip any of that modes' internal bindings before releasing it, it gets interpreted as a vanilla keypress. Not sure that's the best approach long-term, but I can't think of a simpler one off the top of my head.</p>

<h3>Selections</h3>

<p>A particular type of quasimode that gave me some pause is area selection. It turns out this is more complicated than you'd think at first glance. If you have a system that models various things as sets of points, and points as well as things are selectable and groupable, then there are a bunch of independent axes that you might be thinking about selections:</p>

<p><b>additive/subtractive/replacing</b> You might reasonably be looking to add to your existing selection, remove elements from it, or replace your existing selection with the set of elements you're about to specify by area.</p>

<p><b>intersecting/containing</b> You might want to select any thing whose bounding box <i>touches</i> your selection, or you might want to limit yourself to objects that are entirely <i>contained</i> inside said selection.</p>

<p><b>element/point</b> You might want to select things, or you might want to select the points that compose them.</p>

<p><b>top-level/deep</b> You might want to select the top-level groups of elements, or you might want to select the leaf nodes.</p>

<p>The point here is that these are all axes on which the user might choose independently, and most of them are reasonable choices. However, you don't want to have 24 different quasimodes, or even one quasimode with 23 different modifier keys to accomodate them all. After giving it some thought, I made the drag-select interaction default to an <b>additive, intersecting, element, top-level</b> selection. My intuition is that <b>point</b> and <b>subtractive</b> selections are going to be rare and simple enough that we won't need area support for them, that <b>replacing</b> selections are easy enough to counterfeit by hitting the <code>clear-selection</code> keystroke before making a selection, and that I can add modifier keys to distinguish between <b>intersecting/containing</b> and <b>top-level/deep</b> if needed. I'll let you know how that goes too.</p>

<hr />
<h5>Footnotes</h5>
<p>1 - <a href=\"#note-Tue-Jan-28-214701EST-2014\" name=\"foot-Tue-Jan-28-214701EST-2014\">[back]</a> - Which I thoroughly recommend for anyone involved in interface design of any kind. I'm kind of surprised they never made me read it in college, alongside <a href=\"http://www.amazon.com/The-Design-Everyday-Things-Expanded/dp/0465050654\">Design of Everyday Things</a>.</p>

<p>2 - <a href=\"#note-Tue-Jan-28-214704EST-2014\" name=\"foot-Tue-Jan-28-214704EST-2014\">[back]</a> - Which means running its bindings instead of the global ones for the duration.</p>

<p>3 - <a href=\"#note-Tue-Jan-28-214707EST-2014\" name=\"foot-Tue-Jan-28-214707EST-2014\">[back]</a> - An alert, or forced focus switch might take the user away from our window before we get the intended key released.</p>
"))
((5202 3723 625661000) :INSERT (167 :POSTED 3599874000))
((5202 3723 625662000) :INSERT (167 :TAG :IDEA-PEELING))
((5202 3723 625868000) :INSERT (168 :TITLE "Fact Bases and Total History"))
((5202 3723 625873000) :INSERT (168 :FILE "fact-bases-and-total-history.html"))
((5202 3723 625875000) :INSERT (168 :EDITED 3610022331))
((5202 3723 625876000) :INSERT
 (168 :BODY
  "<p>No, since you ask, I haven't read anything related to <a href=\"http://www.datomic.com/\">datomic</a>, though <a href=\"https://github.com/CompSciCabal\">friends</a> keep telling me I <i>should</i>. This is just stuff we've been talking about at the <a href=\"https://github.com/CompSciCabal/SMRTYPRTY/tree/master/sicp\">Toronto SICP reading group</a>, and a couple of other places.</p>

<p>The context was mildly different; we had this conversation in relation to the notional bank accounts from <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-19.html#%_chap_3\">chapter 3 of SICP</a> where they introduce mutable state. The discussed version would have been simpler to optimize and manipulate, since it was entirely numeric, but I've <i>also</i> got <a href=\"https://en.wikipedia.org/wiki/Triplestore\">fact-bases</a> on my mind thanks to a <a href=\"https://github.com/guitarvydas\">now co-worker</a> who's thought pretty deeply about them.</p>

<p>The conversation touched on total-history data-structures, and their effects on performance and convenience. The end result is <a href=\"https://github.com/Inaimathi/fact-base\">this little project</a> I just put together over the course of half an afternoon.</p>

<h3>Let me back up...</h3>

<p>Imagine a toy bank account.</p>

<p>The basic one proposed in the book is as simple as a balance, a <code>get</code>ter, and a pair of setters named <code>deposit</code> and <code>withdraw</code>. You could add more detail, like interest rates and appropriate calculation functions, authentication mechanisms, and a designated owners list, but that's all beside the point.</p>

<p>Regardless of how much detail you imagined, you probably think about the principal structure being <code>the current balance</code>, hence simple numeric value of some precision. A total-history bank account is not that; it's a starting state (lets say 0), as well as The Total History (hence the name) of all transactions or modifications affecting it. So, instead of something like</p>

<pre>$50.34</pre>

<p>you're looking at a thing more like</p>

<pre>'(...
  (3600901270 <span style=\"color: #483d8b;\">:deposit</span> +100)
  (3600913394 <span style=\"color: #483d8b;\">:withdraw</span> -20)
  (3600913519 <span style=\"color: #483d8b;\">:purchase</span> -29.66))</pre>

<p>stretching back from the beginning of the accounts' existence to <code>now</code>. This means that you have access to the \"current value\" of the account at any given time in its history. You can go back and check what happened and when, and if you like, you can ask questions like \"What would it look like today if I had made an extra deposit here, and an extra withdrawal here?\" In order to get the current value, you <i>have</i> to project it. That is, you need to go back through history and apply all the recorded events in order to see what falls out the other end. If you really are doing basic numeric modifications, it's pretty easy to parallelize some parts of that projection process, but I'll leave that as a thought experiment for the reader.</p>

<p>Bank accounts aren't the only things you can model this way; specifically, fact-bases can be usefully thought of in this manner.</p>

<h3>Now then...</h3>

<p>It turns out that total-history structures give you some interesting properties and challenges.</p>

<p>First, if you want <i>all</i> of history, you can never delete anything. You have to put in deletion tokens which remove some element or class of elements from your corpus. <i>Because</i> you can never delete anything, a total-history data-structure has the nice property of being append-only. Which means that you can play some neat optimization tricks in serializing it to disk, like say, clustering deltas. This comes in really handy for very large data sets, or ones which are updated very frequently. Since you're only dealing with shipping diffs around, you can easily save yourself bandwidth on keeping copies in sync, or you could easily break your corpus up across different physical drives. Undo/redo also becomes fairly simple to layer on top of a corpus that already uses this approach.</p>

<p>Second, time-stamping becomes pretty critical. If you took a look at <a href=\"https://github.com/Inaimathi/fact-base\">that github link above</a>, and poked around in <a href=\"https://github.com/Inaimathi/fact-base/blob/master/fact-base.lisp\">here</a>, you'll have noticed that I'm using <a href=\"http://common-lisp.net/project/local-time/\"><code>local-time</code></a> rather than <a href=\"http://www.lispworks.com/documentation/HyperSpec/Body/f_get_un.htm\"><code>get-universal-time</code></a> because I need much finer granularity than seconds. Going to microseconds doesn't fully solve the problem, of course; if your throughput is high enough, there might still be collisions, and therefore potential data loss/duplication on updates. Putting something scalable together in Erlang would be easier, because <a href=\"http://www.erlang.org/doc/man/erlang.html#now-0\"><code>now/0</code></a> <i>guarantees</i> unique values on subsequent invocations.</p>

<p>Still open decisions are how to go about storing deletion tokens, and when/how aggressively to prune history. A passable answer for the second is \"never\", so that's what I'm going with for the moment. The first one doesn't seem to have a right answer.</p>

<h3>Storing deletion tokens...</h3>

<p>The three approaches I can see off the top of my head are storing a deletion index, storing a deletion value, and storing a deletion template. I'm doing the third at the moment, though I'm not convinced it's the right approach. So lets start with that.</p>

<b>Deletion Template</b>

<p>Basically the deletion primitive looks like <code>(delete! (list _ :subject _) fact-base)</code>, which goes through and deletes any fact whose second element is <code>:subject</code>, and also keeps that matching template as an indicator. A deletion entry then looks like</p>

<pre>(&lt;timestamp&gt; <span style=\"color: #483d8b;\">:delete</span> (list _ <span style=\"color: #483d8b;\">:subject</span> _))</pre>

<p>When you go to apply this particular deletion token, you'll need to create the function that checks for a match against it, then run that function across your built up state, removing anything it marks. There are three downsides here. First, this deletion token might pick up things other than the specific facts that it actually deletes in any particular traversal, which means that prospective evaluation gets more complicated. Second, because it's ambiguous, you can't easily reverse it; if you're building up state, you can't just back up over a deletion token, you need to throw away your accumulated state and start from the beginning again to get to the point you were at before applying it. Third, because it involves keeping a piece of match logic in the record, this approach means pulling out <code>eval</code> during de-serialization.</p>

<p>On the flip-side, it's easily parallelizable, and it doesn't care one whit about the order of the facts its traversing or the direction of traversal.</p>

<b>Deletion Index</b>

<p>This approach just has you keep the offset of the removed fact. A deletion token looks like</p>

<pre>(&lt;timestamp&gt; <span style=\"color: #483d8b;\">:delete</span> 37)</pre>

<p>or maybe </p>

<pre>(&lt;timestamp&gt; <span style=\"color: #483d8b;\">:delete</span> (list 13 572 1335))</pre>

<p>To apply this one, you go back through your built-up state and drop the <code>nth</code> elements. Mostly the same downsides as the <b>Deletion Template</b>; it gets a bit tricky when you want prospective change projection and it isn't cleanly reversible. It's mildly easier on memory, since we're just slinging integers around, and it doesn't need <code>eval</code>, but it suddenly matters which direction you're traversing your corpus in, it matters how your corpus is ordered, and I could see it getting in the way of parallelization later.</p>

<b>Deletion Value</b>

<p>A deletion value token looks something like</p>

<pre>(&lt;timestamp&gt; <span style=\"color: #483d8b;\">:delete</span> (&lt;id&gt; <span style=\"color: #483d8b;\">:subject</span> <span style=\"color: #8b2252;\">\"whatever the third value is\"</span>))</pre>

<p>You apply this by going through the accumulated corpus and removing the first fact that matches it. Granted, it's slower in general (because applying it in general involves an arbitrary tree-compare), and it's more wasteful of disk space (because we have to store those arbitrary trees as well as comparing them with facts to remove). But. Depending on how strictly you enforce it, this one is more easily reversible, and it doesn't need <code>eval</code> either, since it's just storing a value.</p>

<h3>Wrapping up...</h3>

<p>A couple of other thoughts I'd like to leave percolating:</p>

<ul>
  <li>It might be possible to get the best of both worlds by making sure that a deletion token remembers the particular members it removed <i>at application time</i>. That would let both the Template and Index approach reverse easily, though it would complicate the projection process somewhat.</li>
  <li>It might be useful to have a layer of meta-tokens. That is, insertions in <code>history</code> that modify other history entries. Off the top of my head, only <code>:ignore</code> or <code>:duplicate</code> seem like they'd be significantly useful. On the plus side, you now have a meta layer to these histories which gives you more flexibility in using them. On the other hand, you now need to have one of efficient reversals, a two-pass loading procedure, or really <i>really</i> shitty performance for heavily meta-tagged histories.</li>
</ul>

<p>That's that. Not the most flowing narrative I've ever produced, but I think it touched on one or two interesting ideas. And anyhow, I'm still chewing over most of this. I'll let you know how it goes, and if I end up finding a real use for it.</p>
"))
((5202 3723 625944000) :INSERT (168 :POSTED 3600910800))
((5202 3723 625946000) :INSERT (168 :TAG :COMMON-LISP))
((5202 3723 625948000) :INSERT (168 :TAG :DATABASES))
((5202 3723 625949000) :INSERT (168 :TAG :ERLANG))
((5202 3723 625953000) :INSERT (168 :TAG :IDEA-PEELING))
((5202 3723 625954000) :INSERT (168 :TAG :SPECULATION))
((5202 3723 626409000) :INSERT
 (169 :TITLE "Autocompletion Example with Ports in Elm"))
((5202 3723 626413000) :INSERT (169 :FILE "elm-and-pure.html"))
((5202 3723 626415000) :INSERT (169 :EDITED 3610298923))
((5202 3723 626416000) :INSERT
 (169 :BODY
  "<p>Two things on the agenda today. First, Elm has gotten some improvements that might mean I end up using it in production at some point. Second, I tried a new language called <a href=\"http://purelang.bitbucket.org/\">Pure</a>, which I found by searching for \"dynamically typed haskell\". Stick around if that sounds interesting.</p>

<span class=\"edit\">EDIT:
<p>Do not bother sticking around if that sounds interesting. I ended up talking about Elm so much that I never got into Pure.</p>

Tue, 18 Feb, 2014</span>

<h3>Elm Lang</h3>

<p>For those of you just joining us, <a href=\"http://elm-lang.org/\">Elm</a> is a pure-functional, statically typed, optionally-type-inferring language closely based on <a href=\"http://www.haskell.org/haskellwiki/Haskell\">Haskell</a>, which targets a JavaScript-hosted VM for deployment. That is, there's an <code>elm-runtime.js</code> which Elm code compiles to target, and the result is highly reactive web front-ends that don't require any mucking around with the DOM. Now that we're all on the same page...</p>

<h3>Elm. Again.</h3>

<p>This came up at a recent <a href=\"https://bentomiso.com/events/toronto-code-retreat-2014-feb\">Code Retreat</a>, and it looks interesting as fuck in context with the FBP stuff I've been doing at work recently. The problem we were solving at the event was autocompletion. That is, given a partial input, return possible completions from some dictionary. Here's a short<a href=\"#foot-Mon-Feb-17-150009EST-2014\" name=\"note-Mon-Feb-17-150009EST-2014\">[1]</a> implementation in Elm.</p>

<pre><span style=\"color: #a020f0;\">module</span> <span style=\"color: #228b22;\">Autocomplete</span> <span style=\"color: #a020f0;\">where</span>

<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">String</span>
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Keyboard</span>
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Graphics.Input</span> <span style=\"color: #a020f0;\">as</span> <span style=\"color: #228b22;\">Input</span>

(field, content) <span style=\"color: #a0522d;\">=</span> <span style=\"color: #228b22;\">Input</span><span style=\"color: #a0522d;\">.</span>field <span style=\"color: #8b2252;\">\"Enter text\"</span>

fState <span style=\"color: #0000ff;\">:</span> [<span style=\"color: #228b22;\">String</span>] <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Input.FieldState</span>
<span style=\"color: #0000ff;\">fState</span> comps <span style=\"color: #a0522d;\">=</span> <span style=\"color: #a020f0;\">case</span> comps <span style=\"color: #a020f0;\">of</span>
                 <span style=\"color: #228b22;\">[]</span> <span style=\"color: #a0522d;\">-&gt;</span> {string <span style=\"color: #a0522d;\">=</span> <span style=\"color: #8b2252;\">\"\"</span>, selectionStart<span style=\"color: #a0522d;\">=</span>0, selectionEnd<span style=\"color: #a0522d;\">=</span>0}
                 <span style=\"color: #a020f0;\">_</span>  <span style=\"color: #a0522d;\">-&gt;</span> {string <span style=\"color: #a0522d;\">=</span> (head comps), selectionStart<span style=\"color: #a0522d;\">=</span>0, selectionEnd<span style=\"color: #a0522d;\">=</span>0}

<span style=\"color: #0000ff;\">esc</span> <span style=\"color: #a0522d;\">=</span> <span style=\"color: #228b22;\">Keyboard</span><span style=\"color: #a0522d;\">.</span>isDown 27
<span style=\"color: #0000ff;\">ctrlSpace</span> <span style=\"color: #a0522d;\">=</span> dropRepeats <span style=\"color: #a0522d;\">.</span> lift and <span style=\"color: #a0522d;\">&lt;|</span> combine [<span style=\"color: #228b22;\">Keyboard</span><span style=\"color: #a0522d;\">.</span>ctrl, <span style=\"color: #228b22;\">Keyboard</span><span style=\"color: #a0522d;\">.</span>space]

empty <span style=\"color: #0000ff;\">:</span> <span style=\"color: #228b22;\">Signal</span> <span style=\"color: #228b22;\">Element</span>
<span style=\"color: #0000ff;\">empty</span> <span style=\"color: #a0522d;\">=</span> sampleOn (merge <span style=\"color: #228b22;\">Keyboard</span><span style=\"color: #a0522d;\">.</span>enter esc) <span style=\"color: #a0522d;\">.</span> fst <span style=\"color: #a0522d;\">&lt;|</span> <span style=\"color: #228b22;\">Input</span><span style=\"color: #a0522d;\">.</span>field <span style=\"color: #8b2252;\">\"Enter text\"</span>

completeElem <span style=\"color: #0000ff;\">:</span> <span style=\"color: #228b22;\">Signal</span> <span style=\"color: #228b22;\">Element</span>
<span style=\"color: #0000ff;\">completeElem</span> <span style=\"color: #a0522d;\">=</span> lift ((<span style=\"color: #228b22;\">Input</span><span style=\"color: #a0522d;\">.</span>fields <span style=\"color: #228b22;\">Input</span><span style=\"color: #a0522d;\">.</span>emptyFieldState)<span style=\"color: #a0522d;\">.</span>field id <span style=\"color: #8b2252;\">\"Enter text\"</span>) <span style=\"color: #a0522d;\">.</span> sampleOn ctrlSpace <span style=\"color: #a0522d;\">.</span> lift fState <span style=\"color: #a0522d;\">&lt;|</span> lift completions content

completions <span style=\"color: #0000ff;\">:</span> <span style=\"color: #228b22;\">String</span> <span style=\"color: #a0522d;\">-&gt;</span> [<span style=\"color: #228b22;\">String</span>]
<span style=\"color: #0000ff;\">completions</span> partial <span style=\"color: #a0522d;\">=</span> <span style=\"color: #a020f0;\">if</span> <span style=\"color: #a0522d;\">|</span> 0 <span style=\"color: #a0522d;\">&lt;</span> <span style=\"color: #228b22;\">String</span><span style=\"color: #a0522d;\">.</span>length partial <span style=\"color: #a0522d;\">-&gt;</span> filter (<span style=\"color: #228b22;\">String</span><span style=\"color: #a0522d;\">.</span>startsWith partial) wordList
                         <span style=\"color: #a0522d;\">|</span> otherwise          <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">[]</span>

<span style=\"color: #0000ff;\">main</span> <span style=\"color: #a0522d;\">=</span> lift2 above (merges [field, completeElem, empty]) <span style=\"color: #a0522d;\">.</span> lift asText <span style=\"color: #a0522d;\">&lt;|</span> lift completions content

<span style=\"color: #b22222;\">--</span><span style=\"color: #b22222;\">- Dummy data
</span>wordList <span style=\"color: #0000ff;\">:</span> [<span style=\"color: #228b22;\">String</span>]
<span style=\"color: #0000ff;\">wordList</span> <span style=\"color: #a0522d;\">=</span> <span style=\"color: #228b22;\">String</span><span style=\"color: #a0522d;\">.</span>words <span style=\"color: #8b2252;\">\"one two three four five six seven eight nine ten\"</span></pre>

<p>The point here is: there's an input that displays completions as you type. If you hit the <code>enter</code> or <code>esc</code> keys, that input is cleared, and if you hit <code>Ctrl+Space</code>, it's filled with the top completion. The above doesn't let you select a different completion, which it should, but it's a pretty instructive example.</p>

<p>Lets go through it.</p>

<pre><span style=\"color: #a020f0;\">module</span> <span style=\"color: #228b22;\">Autocomplete</span> <span style=\"color: #a020f0;\">where</span>

<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">String</span>
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Keyboard</span>
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Graphics.Input</span> <span style=\"color: #a020f0;\">as</span> <span style=\"color: #228b22;\">Input</span></pre>

<p>Module and import declarations. Nothing to see here, move along.</p>

<pre>(field, content) <span style=\"color: #a0522d;\">=</span> <span style=\"color: #228b22;\">Input</span><span style=\"color: #a0522d;\">.</span>field <span style=\"color: #8b2252;\">\"Enter text\"</span>

fState <span style=\"color: #0000ff;\">:</span> [<span style=\"color: #228b22;\">String</span>] <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Input.FieldState</span>
<span style=\"color: #0000ff;\">fState</span> comps <span style=\"color: #a0522d;\">=</span> <span style=\"color: #a020f0;\">case</span> comps <span style=\"color: #a020f0;\">of</span>
                 <span style=\"color: #228b22;\">[]</span> <span style=\"color: #a0522d;\">-&gt;</span> {string <span style=\"color: #a0522d;\">=</span> <span style=\"color: #8b2252;\">\"\"</span>, selectionStart<span style=\"color: #a0522d;\">=</span>0, selectionEnd<span style=\"color: #a0522d;\">=</span>0}
                 <span style=\"color: #a020f0;\">_</span>  <span style=\"color: #a0522d;\">-&gt;</span> {string <span style=\"color: #a0522d;\">=</span> (head comps), selectionStart<span style=\"color: #a0522d;\">=</span>0, selectionEnd<span style=\"color: #a0522d;\">=</span>(<span style=\"color: #228b22;\">String</span><span style=\"color: #a0522d;\">.</span>length <span style=\"color: #a0522d;\">&lt;|</span> head comps)}</pre>

<p>The first line in this bit sets up a <code>field</code>, which is represented as a pair of <code>Signal</code>s; one for the element and one for the content. Signals are a pretty good way of modeling state changes over time in a purely-functional context. You can think of one as the infinite stream of possible values it'll contain, the current of which your program will be continuously operating. An input <code>field</code> is a <i>pair</i> of signals because you'd like to be able to change it<a href=\"#foot-Mon-Feb-17-150016EST-2014\" name=\"note-Mon-Feb-17-150016EST-2014\">[2]</a>, as well as receive updates about its state changes. We'll do that by combining several signals on particular sample points, and <code>FieldState</code> is the type we can eventually funnel into a field.</p>

<pre><span style=\"color: #0000ff;\">esc</span> <span style=\"color: #a0522d;\">=</span> <span style=\"color: #228b22;\">Keyboard</span><span style=\"color: #a0522d;\">.</span>isDown 27
<span style=\"color: #0000ff;\">ctrlSpace</span> <span style=\"color: #a0522d;\">=</span> dropRepeats <span style=\"color: #a0522d;\">.</span> lift and <span style=\"color: #a0522d;\">&lt;|</span> combine [<span style=\"color: #228b22;\">Keyboard</span><span style=\"color: #a0522d;\">.</span>ctrl, <span style=\"color: #228b22;\">Keyboard</span><span style=\"color: #a0522d;\">.</span>space]</pre>

<p>These represent two different signals we'd like from the <code>Keyboard</code> module. The first will be <code>True</code> whenever the Escape key is down<a href=\"#foot-Mon-Feb-17-150022EST-2014\" name=\"note-Mon-Feb-17-150022EST-2014\">[3]</a>, the second will be <code>True</code> when both the <code>Ctrl</code> and <code>Space</code> key are pressed<a href=\"#foot-Mon-Feb-17-150025EST-2014\" name=\"note-Mon-Feb-17-150025EST-2014\">[4]</a>. The types at each step might be useful. In particular, <code>ctrlSpace : Signal Bool</code>, <code>combine <span style=\"color: #0000ff;\">:</span> [<span style=\"color: #228b22;\">Signal</span> a] <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Signal</span> [a]</code> and <code><span style=\"color: #0000ff;\">lift</span> and <span style=\"color: #228b22;\">:</span> <span style=\"color: #228b22;\">Signal</span> [<span style=\"color: #228b22;\">Bool</span>] <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Signal</span> <span style=\"color: #228b22;\">Bool</span></code>. The <code>dropRepeats</code> is the only chunklet whose type signature will give you no further understanding <a href=\"#foot-Mon-Feb-17-150223EST-2014\" name=\"note-Mon-Feb-17-150223EST-2014\">[5]</a>; it's there to prevent partial signal changes from triggering a \"change\" in the <code>ctrlSpace</code> signal itself. Also, on a syntax note, the <code>&lt;|</code> is identical to <a href=\"http://stackoverflow.com/a/1290727/190887\">Haskell's $</a>.</p>

<p>Onward.</p>

<pre>empty <span style=\"color: #0000ff;\">:</span> <span style=\"color: #228b22;\">Signal</span> <span style=\"color: #228b22;\">Element</span>
<span style=\"color: #0000ff;\">empty</span> <span style=\"color: #a0522d;\">=</span> sampleOn (merge <span style=\"color: #228b22;\">Keyboard</span><span style=\"color: #a0522d;\">.</span>enter esc) <span style=\"color: #a0522d;\">.</span> fst <span style=\"color: #a0522d;\">&lt;|</span> <span style=\"color: #228b22;\">Input</span><span style=\"color: #a0522d;\">.</span>field <span style=\"color: #8b2252;\">\"Enter text\"</span>

completeElem <span style=\"color: #0000ff;\">:</span> <span style=\"color: #228b22;\">Signal</span> <span style=\"color: #228b22;\">Element</span>
<span style=\"color: #0000ff;\">completeElem</span> <span style=\"color: #a0522d;\">=</span> lift ((<span style=\"color: #228b22;\">Input</span><span style=\"color: #a0522d;\">.</span>fields <span style=\"color: #228b22;\">Input</span><span style=\"color: #a0522d;\">.</span>emptyFieldState)<span style=\"color: #a0522d;\">.</span>field id <span style=\"color: #8b2252;\">\"Enter text\"</span>) <span style=\"color: #a0522d;\">.</span> sampleOn ctrlSpace <span style=\"color: #a0522d;\">.</span> lift fState <span style=\"color: #a0522d;\">&lt;|</span> lift completions content

completions <span style=\"color: #0000ff;\">:</span> <span style=\"color: #228b22;\">String</span> <span style=\"color: #a0522d;\">-&gt;</span> [<span style=\"color: #228b22;\">String</span>]
<span style=\"color: #0000ff;\">completions</span> partial <span style=\"color: #a0522d;\">=</span> <span style=\"color: #a020f0;\">if</span> <span style=\"color: #a0522d;\">|</span> 0 <span style=\"color: #a0522d;\">&lt;</span> <span style=\"color: #228b22;\">String</span><span style=\"color: #a0522d;\">.</span>length partial <span style=\"color: #a0522d;\">-&gt;</span> filter (<span style=\"color: #228b22;\">String</span><span style=\"color: #a0522d;\">.</span>startsWith partial) wordList
                         <span style=\"color: #a0522d;\">|</span> otherwise          <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">[]</span></pre>

<p>This is the real meat right here. <code>empty</code> is the signal of empty elements which will \"changes\" whenever the <code>enter</code> or <code>esc</code> keys are pressed<a href=\"#foot-Mon-Feb-17-150245EST-2014\" name=\"note-Mon-Feb-17-150245EST-2014\">[6]</a>. <code>completeElem</code> is the signal of filled elements that \"changes\" whenever the user hits <code>Ctrl + Space</code>. Finally, <code>completions</code> is the signal of completions of the current text in the main input.</p>

<pre><span style=\"color: #0000ff;\">main</span> <span style=\"color: #a0522d;\">=</span> lift2 above (merges [field, completeElem, empty]) <span style=\"color: #a0522d;\">.</span> lift asText <span style=\"color: #a0522d;\">&lt;|</span> lift completions content

<span style=\"color: #b22222;\">--</span><span style=\"color: #b22222;\">- Dummy data
</span>wordList <span style=\"color: #0000ff;\">:</span> [<span style=\"color: #228b22;\">String</span>]
<span style=\"color: #0000ff;\">wordList</span> <span style=\"color: #a0522d;\">=</span> <span style=\"color: #228b22;\">String</span><span style=\"color: #a0522d;\">.</span>words <span style=\"color: #8b2252;\">\"one two three four five six seven eight nine ten\"</span></pre>

<p>These remaining lines render the input and completions to screen, and set up the extremely minimal test dictionary. That's it. What we have here is exactly what was described. An input, backed by a word list, which is cleared on either Enter or Esc, and completed on Ctrl+Space.</p>

<h3>The New Part</h3>

<p>None of that was new.</p>

<p>If you've read any of the articles on this blog tagged Elm, you'd have known all of it already. The new part is that you can now have your Elm programs communicate with the outside world. In the case we're considering above, a solitary auto-completing input is pretty useless. But imagine if you could use it essentially as a minibuffer in a larger project. You'd want to be able to pass it new completion lists, and you'd want it to notify you when the user entered some input. It goes without saying that you'd like all this to be encapsulated within a known, non-global namespace, so that you could combine your Elm minibuffer with arbitrary JS projects.</p>

<p>So, lets do it.</p>

<pre><span style=\"color: #a020f0;\">module</span> <span style=\"color: #228b22;\">Autocomplete</span> <span style=\"color: #a020f0;\">where</span>

<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">String</span>
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Keyboard</span>
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Graphics.Input</span> <span style=\"color: #a020f0;\">as</span> <span style=\"color: #228b22;\">Input</span>

(field, content) <span style=\"color: #a0522d;\">=</span> <span style=\"color: #228b22;\">Input</span><span style=\"color: #a0522d;\">.</span>field <span style=\"color: #8b2252;\">\"Enter text\"</span>

fState <span style=\"color: #0000ff;\">:</span> [<span style=\"color: #228b22;\">String</span>] <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Input.FieldState</span>
<span style=\"color: #0000ff;\">fState</span> comps <span style=\"color: #a0522d;\">=</span> <span style=\"color: #a020f0;\">case</span> comps <span style=\"color: #a020f0;\">of</span>
                 <span style=\"color: #228b22;\">[]</span> <span style=\"color: #a0522d;\">-&gt;</span> {string <span style=\"color: #a0522d;\">=</span> <span style=\"color: #8b2252;\">\"\"</span>, selectionStart<span style=\"color: #a0522d;\">=</span>0, selectionEnd<span style=\"color: #a0522d;\">=</span>0}
                 <span style=\"color: #a020f0;\">_</span>  <span style=\"color: #a0522d;\">-&gt;</span> {string <span style=\"color: #a0522d;\">=</span> (head comps), selectionStart<span style=\"color: #a0522d;\">=</span>0, selectionEnd<span style=\"color: #a0522d;\">=</span> (<span style=\"color: #228b22;\">String</span><span style=\"color: #a0522d;\">.</span>length <span style=\"color: #a0522d;\">&lt;|</span> head comps)}

<span style=\"color: #0000ff;\">esc</span> <span style=\"color: #a0522d;\">=</span> <span style=\"color: #228b22;\">Keyboard</span><span style=\"color: #a0522d;\">.</span>isDown 27
<span style=\"color: #0000ff;\">ctrlSpace</span> <span style=\"color: #a0522d;\">=</span> dropRepeats <span style=\"color: #a0522d;\">.</span> lift and <span style=\"color: #a0522d;\">&lt;|</span> combine [<span style=\"color: #228b22;\">Keyboard</span><span style=\"color: #a0522d;\">.</span>ctrl, <span style=\"color: #228b22;\">Keyboard</span><span style=\"color: #a0522d;\">.</span>space]

empty <span style=\"color: #0000ff;\">:</span> <span style=\"color: #228b22;\">Signal</span> <span style=\"color: #228b22;\">Element</span>
<span style=\"color: #0000ff;\">empty</span> <span style=\"color: #a0522d;\">=</span> sampleOn (merge <span style=\"color: #228b22;\">Keyboard</span><span style=\"color: #a0522d;\">.</span>enter esc) <span style=\"color: #a0522d;\">.</span> fst <span style=\"color: #a0522d;\">&lt;|</span> <span style=\"color: #228b22;\">Input</span><span style=\"color: #a0522d;\">.</span>field <span style=\"color: #8b2252;\">\"Enter text\"</span>

completeElem <span style=\"color: #0000ff;\">:</span> <span style=\"color: #228b22;\">Signal</span> <span style=\"color: #228b22;\">Element</span>
<span style=\"color: #0000ff;\">completeElem</span> <span style=\"color: #a0522d;\">=</span> lift ((<span style=\"color: #228b22;\">Input</span><span style=\"color: #a0522d;\">.</span>fields <span style=\"color: #228b22;\">Input</span><span style=\"color: #a0522d;\">.</span>emptyFieldState)<span style=\"color: #a0522d;\">.</span>field id <span style=\"color: #8b2252;\">\"Enter text\"</span>) <span style=\"color: #a0522d;\">.</span> sampleOn ctrlSpace <span style=\"color: #a0522d;\">.</span> lift fState <span style=\"color: #a0522d;\">&lt;|</span> lift2 completions content wordList

completions <span style=\"color: #0000ff;\">:</span> <span style=\"color: #228b22;\">String</span> <span style=\"color: #a0522d;\">-&gt;</span> [<span style=\"color: #228b22;\">String</span>] <span style=\"color: #a0522d;\">-&gt;</span> [<span style=\"color: #228b22;\">String</span>]
<span style=\"color: #0000ff;\">completions</span> partial wordList <span style=\"color: #a0522d;\">=</span> <span style=\"color: #a020f0;\">if</span> <span style=\"color: #a0522d;\">|</span> 0 <span style=\"color: #a0522d;\">&lt;</span> <span style=\"color: #228b22;\">String</span><span style=\"color: #a0522d;\">.</span>length partial <span style=\"color: #a0522d;\">-&gt;</span> filter (<span style=\"color: #228b22;\">String</span><span style=\"color: #a0522d;\">.</span>startsWith partial) wordList
                                  <span style=\"color: #a0522d;\">|</span> otherwise          <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">[]</span>

<span style=\"color: #0000ff;\">main</span> <span style=\"color: #a0522d;\">=</span> lift2 above (merges [field, completeElem, empty]) <span style=\"color: #a0522d;\">.</span> lift asText <span style=\"color: #a0522d;\">&lt;|</span> lift2 completions content wordList

<span style=\"color: #0000ff;\">port</span> wordList <span style=\"color: #228b22;\">:</span> <span style=\"color: #228b22;\">Signal</span> [<span style=\"color: #228b22;\">String</span>]

<span style=\"color: #0000ff;\">port</span> output <span style=\"color: #228b22;\">:</span> <span style=\"color: #228b22;\">Signal</span> <span style=\"color: #228b22;\">String</span>
<span style=\"color: #0000ff;\">port</span> output <span style=\"color: #a0522d;\">=</span> keepIf (<span style=\"color: #a0522d;\">\\</span>s <span style=\"color: #a0522d;\">-&gt;</span> s<span style=\"color: #a0522d;\">/=</span><span style=\"color: #8b2252;\">\"\"</span>) <span style=\"color: #8b2252;\">\"\"</span> (sampleOn <span style=\"color: #228b22;\">Keyboard</span><span style=\"color: #a0522d;\">.</span>enter content)</pre>

<p>That's a minimally changed <code>.elm</code> file. The differences are</p>

<ul>
  <li>We've added port declarations at the bottom there. One incoming, which is just a type declaration, and one outgoing, which has a type declaration and a transmitter function.</li>
  <li>We've changed <code>completions</code> so that it takes its <code>wordList</code> as input</li>
  <li>Anywhere we used to call <code>completions</code> with <code>lift completions content</code>, we now have to call it with <code>lift2 completions content wordList</code></li>
</ul>

<p>The file you'd embed that module into would look something like this<a href=\"#foot-Mon-Feb-17-150258EST-2014\" name=\"note-Mon-Feb-17-150258EST-2014\">[7]</a></p>

<pre>&lt;<span style=\"color: #0000ff;\">html</span> <span style=\"color: #a0522d;\">xmlns</span>=<span style=\"color: #8b2252;\">\"http://www.w3.org/1999/xhtml\"</span> <span style=\"color: #483d8b;\">xml</span>:<span style=\"color: #a0522d;\">lang</span>=<span style=\"color: #8b2252;\">\"en\"</span> <span style=\"color: #a0522d;\">lang</span>=<span style=\"color: #8b2252;\">\"en\"</span>&gt;
  &lt;<span style=\"color: #0000ff;\">head</span>&gt;
    &lt;<span style=\"color: #0000ff;\">title</span>&gt;<span style=\"font-weight: bold; text-decoration: underline;\">Embedding Autocomplete - Elm</span>&lt;/<span style=\"color: #0000ff;\">title</span>&gt;
    &lt;<span style=\"color: #0000ff;\">script</span> <span style=\"color: #a0522d;\">type</span>=<span style=\"color: #8b2252;\">\"text/javascript\"</span> <span style=\"color: #a0522d;\">src</span>=<span style=\"color: #8b2252;\">\"/elm-runtime.js\"</span>&gt;&lt;/<span style=\"color: #0000ff;\">script</span>&gt;
    &lt;<span style=\"color: #0000ff;\">script</span> <span style=\"color: #a0522d;\">type</span>=<span style=\"color: #8b2252;\">\"text/javascript\"</span> <span style=\"color: #a0522d;\">src</span>=<span style=\"color: #8b2252;\">\"/build/Autocomplete.js\"</span>&gt;&lt;/<span style=\"color: #0000ff;\">script</span>&gt;
  &lt;/<span style=\"color: #0000ff;\">head</span>&gt;
  &lt;<span style=\"color: #0000ff;\">body</span>&gt;
    &lt;<span style=\"color: #0000ff;\">div</span> <span style=\"color: #a0522d;\">id</span>=<span style=\"color: #8b2252;\">\"auto\"</span> <span style=\"color: #a0522d;\">style</span>=<span style=\"color: #8b2252;\">\"position: absolute; left: 50px; top: 50px; width: 600px; height: 100px; border: 2px dashed #000;\"</span>&gt;&lt;/<span style=\"color: #0000ff;\">div</span>&gt;
    &lt;<span style=\"color: #0000ff;\">script</span> <span style=\"color: #a0522d;\">type</span>=<span style=\"color: #8b2252;\">\"text/javascript\"</span>&gt;
      var can = Elm.embed(Elm.Autocomplete, 
                          document.getElementById(<span style=\"color: #8b2252;\">\"auto\"</span>), 
                          {wordList: [<span style=\"color: #8b2252;\">\"one\"</span>, <span style=\"color: #8b2252;\">\"two\"</span>, <span style=\"color: #8b2252;\">\"three\"</span>, <span style=\"color: #8b2252;\">\"four\"</span>, <span style=\"color: #8b2252;\">\"five\"</span>, <span style=\"color: #8b2252;\">\"six\"</span>, <span style=\"color: #8b2252;\">\"seven\"</span>, <span style=\"color: #8b2252;\">\"eight\"</span>, <span style=\"color: #8b2252;\">\"nine\"</span>, <span style=\"color: #8b2252;\">\"ten\"</span>]});
      can.ports.output.subscribe(function (msg) { console.log(<span style=\"color: #8b2252;\">\"FROM MINIBUFFER :: \"</span>, msg) })
    &lt;/<span style=\"color: #0000ff;\">script</span>&gt;
  &lt;/<span style=\"color: #0000ff;\">body</span>&gt;
&lt;/<span style=\"color: #0000ff;\">html</span>&gt;</pre>

<span class=\"edit\">EDIT:

<p>You can find a running demo of the above <a href=\"http://173.255.226.138/elm-sample/embed.html\">here</a>.</p>
Sat, 22 Feb, 2014</span>

<p>The relevant bits are the positioned <code>div</code>, which will contain our program, and the <code>Elm.embed</code> call, which sets it up. Note especially the third argument; you have to do that for any input ports in the component you're embedding. Finally, note the <code>subscribe</code> call which fits that output port we defined with a listener, in this case a naive one that just prints everything it gets to the console.</p>

<p>This is awesome.</p>

<p>It's awesome enough that I'm seriously considering Elm for some production work <i>at</i> work. Because I want to apply Elm in the places where it'll do massive amounts of good, and leave the other stuff to stateful JavaScript programs. Using the ports approach above, I can get exactly that. If there was something similar for Hskell, I'd probably have taken the plunge and built something with it by now<a href=\"#foot-Mon-Feb-17-150312EST-2014\" name=\"note-Mon-Feb-17-150312EST-2014\">[8]</a>.</p>

<h3>In Case You're Reading, <a href=\"https://github.com/evancz\">evancz</a></h3>

<p>There are still a <a href=\"/article?name=elm-in-practice.html\">few minor headaches with the language</a>, though thankfully I didn't have to stub my toe on most of them this time around. The only ones that ended up being annoying, or will be very shortly are</p>

<ul>
  <li><b>No signal defaults from within <code><span style=\"font-weight: bold;\">.elm</span></code> files</b>. This bites during development. When you have an Elm module that will depend on an outside signal for its operation, you have to set a default value for that signal outside. This is ok once you've got the embedding file together, but it does mean that that second <code>Autocomplete.elm</code> file above will give you the error 

<pre>Initialization Error: port 'wordList' was not given an input!
    Open the developer console for more details.</pre>

if you try to run it standalone without modifications. The workaround I've been using is to comment out the <code>port</code> declaration line, and add one that reads <code><span style=\"color: #0000ff;\">wordList</span> <span style=\"color: #a0522d;\">=</span> constant [<span style=\"color: #8b2252;\">\"one\"</span>, <span style=\"color: #8b2252;\">\"two\"</span>, <span style=\"color: #8b2252;\">\"three\"</span>, <span style=\"color: #8b2252;\">\"four\"</span>, <span style=\"color: #8b2252;\">\"five\"</span>, <span style=\"color: #8b2252;\">\"six\"</span>]</code>. It works, but I'd rather not have to do it.</li>
  <li><b>No Haskell-style sections</b>. It only bit once in this program, and it's tolerable, but I'd much rather write <code>(<span style=\"color: #a0522d;\">/=</span><span style=\"color: #8b2252;\">\"\"</span>)</code> than the equivalent, but syntactically noisier <code>(<span style=\"color: #a0522d;\">\\</span>s <span style=\"color: #a0522d;\">-&gt;</span> s <span style=\"color: #a0522d;\">/=</span> <span style=\"color: #8b2252;\">\"\"</span>)</code>.</li>
  <li><b>No Indexing</b>. I'm almost convinced this has to be an omission on my part, and there's actually a way to do it out of the box, because it seems mildly bizarre to have <a href=\"http://library.elm-lang.org/catalog/evancz-Elm/0.11/List\"><code>List.head</code></a> and <a href=\"http://library.elm-lang.org/catalog/evancz-Elm/0.11/String\"><code>String.sub</code></a> in a language, but no list indexing operator or function. If there is one, just point me to it. In the meantime, you can define your own minimal version as <code>(<span style=\"color: #0000ff;\">!!</span>) lst ix <span style=\"color: #a0522d;\">=</span> lst <span style=\"color: #a0522d;\">|&gt;</span> drop ix <span style=\"color: #a0522d;\">|&gt;</span> head</code>, or maybe 

<pre>(<span style=\"color: #0000ff;\">!!</span>) lst ix <span style=\"color: #a0522d;\">=</span> <span style=\"color: #a020f0;\">case</span> drop ix lst <span style=\"color: #a020f0;\">of</span>
                <span style=\"color: #228b22;\">[]</span> <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Nothing</span>
                sub <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Just</span> <span style=\"color: #a0522d;\">&lt;|</span> head sub</pre>

 if getting out of array bounds gives you pause. Neither of these deals with negative indices, but they'll give you trivial indexing capabilities.</li>
</ul>

<p>That's that, I guess. I <i>was</i> going to talk a bit about <a href=\"http://purelang.bitbucket.org/\">Pure</a>. And <a href=\"http://en.wikipedia.org/wiki/Forth_%28programming_language%29\">Forth</a>. And maybe incidentally a bit about <a href=\"http://gcc.gnu.org/c99status.html\">C</a>, but this is way longer than I was expecting already, so I think I'll call it for today.</p>

<hr />
<h5>Footnotes</h5>
<p>1 - <a href=\"#note-Mon-Feb-17-150009EST-2014\" name=\"foot-Mon-Feb-17-150009EST-2014\">[back]</a> - Admittedly this took something like hours total. Writing it involved a lot of experimentation and documentation browsing, and I did a quick clean-up pass afterwards. I'm really hoping the development time goes down as I get more practice with the language and type system.</p>

<p>2 - <a href=\"#note-Mon-Feb-17-150016EST-2014\" name=\"foot-Mon-Feb-17-150016EST-2014\">[back]</a> - Actually hang on. If you're new to the FRP thing, I should clarify that you never <i>really</i> change things. Remember; any stateful component is represented as the lazy, infinite list of its complete history. What I really meant by the shorthand \"change it\" is \"merge multiple signals of the same type in a way that gives one of them primacy in certain situations\". It's counter-intuitive the first few times, but it's helpful to keep the perspective in mind when you're dealing with Elms.</p>

<p>3 - <a href=\"#note-Mon-Feb-17-150022EST-2014\" name=\"foot-Mon-Feb-17-150022EST-2014\">[back]</a> - And hence will change on a <code>keyDown</code> or <code>keyUp</code> event for that key.</p>

<p>4 - <a href=\"#note-Mon-Feb-17-150025EST-2014\" name=\"foot-Mon-Feb-17-150025EST-2014\">[back]</a> - And will therefore change on either ctrl/space <code>keyDown</code>, whichever is second and on ctrl/space <code>keyUp</code>, whichever is first.</p>

<p>5 - <a href=\"#note-Mon-Feb-17-150223EST-2014\" name=\"foot-Mon-Feb-17-150223EST-2014\">[back]</a> - It's <code>dropRepeats <span style=\"color: #0000ff;\">:</span> <span style=\"color: #228b22;\">Signal</span> a <span style=\"color: #a0522d;\">-&gt;</span> <span style=\"color: #228b22;\">Signal</span> a</code>, in case you really, <i>really</i> care.</p>

<p>6 - <a href=\"#note-Mon-Feb-17-150245EST-2014\" name=\"foot-Mon-Feb-17-150245EST-2014\">[back]</a> - That's the <code>(merge Keyboard.enter esc)</code>.</p>

<p>7 - <a href=\"#note-Mon-Feb-17-150258EST-2014\" name=\"foot-Mon-Feb-17-150258EST-2014\">[back]</a> - Assuming those were accurate urls for <code>elm-runtime.js</code> and <code>Autocomplete.js</code> on your system.</p>

<p>8 - <a href=\"#note-Mon-Feb-17-150312EST-2014\" name=\"foot-Mon-Feb-17-150312EST-2014\">[back]</a> - For the record, there <i>might</i> be something like it for Haskell, you'll hear excited giggling from me if I happen to find it. For the moment, I'm still evaluating <a href=\"http://www.haskell.org/haskellwiki/Functional_Reactive_Programming\">the FRP section of the Hasekellwiki</a>.</p>
"))
((5202 3723 626635000) :INSERT (169 :POSTED 3601602000))
((5202 3723 626637000) :INSERT (169 :TAG :ALMOST-LITERATE-PROGRAMMING))
((5202 3723 626639000) :INSERT (169 :TAG :ELM))
((5202 3723 626640000) :INSERT (169 :TAG :FLOW-BASED-PROGRAMMING))
((5202 3723 626642000) :INSERT (169 :TAG :HTML))
((5202 3723 626801000) :INSERT (170 :TITLE "Flow-Based Games"))
((5202 3723 626805000) :INSERT (170 :FILE "flow-based-games.html"))
((5202 3723 626807000) :INSERT (170 :EDITED 3610022331))
((5202 3723 626808000) :INSERT
 (170 :BODY
  "<p>So I just tried to write what I thought was a fairly simple game prototype tentatively titled \"Gratuitous Resource Gathering\" using <a href=\"http://elm-lang.org/\">Elm</a>. Something in the style of <a href=\"http://orteil.dashnet.org/cookieclicker/\">Cookie Clicker</a>(DO NOT click that link if you were planning on doing anything today). Here's how far I got:</p>

<pre><span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Mouse</span>
<span style=\"color: #a020f0;\">import</span> <span style=\"color: #228b22;\">Time</span>

<span style=\"color: #0000ff;\">port</span> resourceA <span style=\"color: #228b22;\">:</span> <span style=\"color: #228b22;\">Signal</span> <span style=\"color: #228b22;\">Bool</span>
<span style=\"color: #0000ff;\">port</span> building <span style=\"color: #228b22;\">:</span> <span style=\"color: #228b22;\">Signal</span> <span style=\"color: #228b22;\">String</span>

<span style=\"color: #0000ff;\">buildingCost</span> <span style=\"color: #a0522d;\">=</span> foldp (<span style=\"color: #a0522d;\">+</span>) 0 <span style=\"color: #a0522d;\">&lt;|</span> keepWhen (lift2 (<span style=\"color: #a0522d;\">&gt;</span>) (constant 50) balance) 0 <span style=\"color: #a0522d;\">&lt;|</span> sampleOn building <span style=\"color: #a0522d;\">&lt;|</span> constant 50

<span style=\"color: #0000ff;\">tickIncrement</span> <span style=\"color: #a0522d;\">=</span> foldp (<span style=\"color: #a0522d;\">+</span>) 0 <span style=\"color: #a0522d;\">&lt;|</span> sampleOn buildingCost <span style=\"color: #a0522d;\">&lt;|</span> constant 0<span style=\"color: #a0522d;\">.</span>01
<span style=\"color: #0000ff;\">tick</span> <span style=\"color: #a0522d;\">=</span> sampleOn (every <span style=\"color: #228b22;\">Time</span><span style=\"color: #a0522d;\">.</span>millisecond) <span style=\"color: #a0522d;\">&lt;|</span> constant <span style=\"color: #228b22;\">True</span>

<span style=\"color: #0000ff;\">spent</span> <span style=\"color: #a0522d;\">=</span> foldp (<span style=\"color: #a0522d;\">+</span>) 0 <span style=\"color: #a0522d;\">&lt;|</span> merges [ sampleOn building buildingCost ]

<span style=\"color: #0000ff;\">gathered</span> <span style=\"color: #a0522d;\">=</span> foldp (<span style=\"color: #a0522d;\">+</span>) 0 <span style=\"color: #a0522d;\">&lt;|</span> merges [ sampleOn resourceA <span style=\"color: #a0522d;\">&lt;|</span> constant 1
                                 , sampleOn tick tickIncrement ]

<span style=\"color: #0000ff;\">balance</span> <span style=\"color: #a0522d;\">=</span> lift round <span style=\"color: #a0522d;\">&lt;|</span> lift2 (<span style=\"color: #a0522d;\">-</span>) gathered spent

<span style=\"color: #0000ff;\">main</span> <span style=\"color: #a0522d;\">=</span> lift (flow down) <span style=\"color: #a0522d;\">&lt;|</span> combine [ lift asText balance ]</pre>

<p>That's almost the complete game, except for one very annoying detail: it doesn't work. When I try to run it in the appropriate HTML harness, I get</p>

<pre>s2 is undefined
    Open the developer console for more details.</pre>

<p>The reason is that <code>buildingCost</code> signal. When the user purchases a building, I need to check whether they have enough resource balance to buy it. However, the <code>balance</code> is the sum of two other signals, <code>gathered</code> and <code>spent</code>, the second of which <i>is affected by building purchases</i>. Looks like circular signals aren't a thing in Elm right now. I'm not sure how to resolve this inside the language, and I already told you all about ports last time, so my natural first reaction was to think about how I'd go about computing that price check outside the Elm module. Unfortunately, once I started mentally pulling things out of Elm, I quickly arrived at the conclusion that the whole thing would probably need to be turned inside-out. In other words, I'd be using Elm purely as a way of avoiding manual DOM manipulation in one or two components of a mostly Javascript project.</p>

<p>Maybe that'd still be worth it, but it feels quite unsatisfying.</p>

<p>No real idea what to do about it though. I'll talk to some people I consider smarter than me and see what they think. Hopefully there's a reasonable way around the problem that doesn't include doing most of it in manual JS.</p>

<p>In the meantime, I hacked together something in <a href=\"https://github.com/dxnn/daimio\">Daimio</a>.</p>

<pre>outer
        @resource-click dom-on-click resource
        @building-click dom-on-click building
        @show dom-set-html display

        @timer every-half-second

        $building-cost 5
        $click-increment 1
        $tick-increment 0
        $balance 0

        inc-balance 
                { __ | add $balance | &gt;$balance }
        dec-balance 
                { __ | subtract value __ from $balance | &gt;$balance }

        can-afford
                { __ | ($building-cost $balance) | max | eq $balance }
        
        @resource-click -&gt; {__ | $click-increment } -&gt; inc-balance -&gt; @show
        @building-click -&gt; can-afford -&gt; { __ | then $building-cost else 0} -&gt; dec-balance -&gt; @show
                           can-afford -&gt; { __ | then 10 else 0 | add $tick-increment | &gt;$tick-increment }
                           can-afford -&gt; { __ | then <span style=\"color: #8b2252;\">\"Buying...\"</span> | tap }

        @timer -&gt; {__ | $tick-increment } -&gt; inc-balance -&gt; { __ | $balance } -&gt;  @show</pre>

<p>No highlighting mode for that one yet; I'm workin' on it. Also, the above was kind of non-trivial because I had to add my own timer event, <i>and</i> I still want to figure out how to factor out the process of buying a building. But it works well enough on my machine. I'll post the full project up to my <a href=\"https://github.com/Inaimathi\">github</a> once I do a bit more thinking about it.</p>
"))
((5202 3723 626849000) :INSERT (170 :POSTED 3603070800))
((5202 3723 626851000) :INSERT (170 :TAG :DAIMIO))
((5202 3723 626852000) :INSERT (170 :TAG :ELM))
((5202 3723 626854000) :INSERT (170 :TAG :FLOW-BASED-PROGRAMMING))
((5202 3723 627061000) :INSERT (171 :TITLE "Housekeeping"))
((5202 3723 627066000) :INSERT (171 :FILE "housekeeping.html"))
((5202 3723 627067000) :INSERT (171 :EDITED 3610299434))
((5202 3723 627069000) :INSERT
 (171 :BODY
  "<p>Just some quick housekeeping while I draft up my next proper piece.</p>

<h3>cl-cwd</h3>

<p>A friend of mine mentioned that he had to hack up <code>cl-git-fs</code> to make it export <code>cwd</code> and <code>with-cwd</code>. Which was surprising when I heard it, but really shouldn't have been. This is the sort of problem Common Lispers seem to solve by copy/pasting a few implementation-specific snippets into projects that need the functionality. That's not good enough for me. So, here's <a href=\"https://github.com/Inaimathi/cl-cwd\"><code>cl-cwd</code></a>; a library to get/manipulate/temporarily manipulate your current working directory in a cross-platform and cross-implementation way. Patches and bug reports welcome as always, and hopefully it's useful for you. I <i>haven't</i> gotten around to hacking the same components out of <code>cl-git-fs</code>, but I might eventually. Or, I might just use the <code>os</code> section of <a href=\"http://quickdocs.org/uiop/\">UIOP</a>, which was only pointed out to me after I posted that <code>cl-cwd</code> repo. I'm not entirely sure what the right approach here is; are monolithic utility libraries preferable to very small, single-purpose packages? Not sure, but I kind of prefer the smaller, specific ones for my own purposes. Even though it never wastes enough resources to matter to me, it's deeply irritating on some level to include <b>all</b> of <a href=\"http://www.cliki.net/Alexandria\"><code>:alexandria</code></a> and <a href=\"http://www.cliki.net/Anaphora\"><code>:anaphora</code></a> for, essentially <code>with-gensyms</code>, <code>aif</code>, <code>awhen</code> and <code>alambda</code>.</p>

<h3><code>fact-base</code> updates and relevant minutia</h3>

<p>I've gotten some work done on <a href=\"https://github.com/Inaimathi/fact-base\"><code>fact-base</code></a>, which on reflection really should have been called <code>cl-triple-store</code>, with an eye on using it in production. We'll see if it actually happens, or if it just remains an idle fancy, but</p>

<ol>
  <li>you can now add <code>index</code>es to your fact bases, which should make data retrieval faster<a href=\"#foot-Thu-Mar-20-195226EDT-2014\" name=\"note-Thu-Mar-20-195226EDT-2014\">[1]</a></li>
  <li>writing deltas is now quite efficient<a href=\"#foot-Thu-Mar-20-195230EDT-2014\" name=\"note-Thu-Mar-20-195230EDT-2014\">[2]</a></li>
</ol>

<p>Again, let me know if it's useful, or if it's sooooo-close-to-being-useful-if-it-only-had-this-one-feature. I might do something about it at this stage.</p>

<p>The only related piece of minutia is that I've found myself reading a lot about <a href=\"http://minikanren.org/\">miniKanren</a>, <a href=\"https://github.com/clojure/core.logic\">core.logic</a> and <a href=\"https://en.wikipedia.org/wiki/Logic_programming\">logic programming</a> in general. I <i>think</i> it might be a really good way to query structures like these triple-stores I've been building lately. Also, it turns out <a href=\"http://common-lisp.net/project/cl-kanren-trs/\">someone's already done most of the work of implementing that in CL</a> for me, so I <a href=\"https://github.com/Inaimathi/cl-kanren-trs\">forked it</a> and added/changed the few chunklets I needed to. Matthew Swank, if you're reading this and care, let me know and I'll send you patches. I assumed you wouldn't care, since the copyright line said <code>2008</code>, but I might have been wrong.</p>

<h3>Editors</h3>

<p>Someone finally sat down and walked me through the installation for <a href=\"http://www.lighttable.com/\">Light Table</a><a href=\"#foot-Thu-Mar-20-195232EDT-2014\" name=\"note-Thu-Mar-20-195232EDT-2014\">[3]</a>. I haven't been paying attention to the propaganda, so I'm not entirely sure exactly how this is going to revolutionize editing<a href=\"#foot-Thu-Mar-20-195235EDT-2014\" name=\"note-Thu-Mar-20-195235EDT-2014\">[4]</a>, but it looks promising for a prototype. I was able to get to a productive-ish point with it within about an hour, and that's a high bar. I remember learning Emacs<a href=\"#foot-Thu-Mar-20-195237EDT-2014\" name=\"note-Thu-Mar-20-195237EDT-2014\">[5]</a> over the course of <i>weeks</i>.</p>

<p>Another one I tried enough to appreciate is <a href=\"http://ipython.org/notebook.html\">IPython Notebook</a>. The idea of a browser-based editor has, shall we say, <a href=\"/article?name=update-and-the-finer-points-of-quasimodes.html\">crossed my mind</a>, but the idea of applying it to 1D coding hadn't occurred to me. I gotta say, I like the idea, and I'll be trying to do something about that right <a href=\"https://github.com/Inaimathi/cl-notebook\">here</a>. I've only got the easy part done so far; a front-end of <a href=\"http://codemirror.net/\">code-mirror</a> rigged up to a Lisp process that evaluates things and sends the result values back<a href=\"#foot-Thu-Mar-20-195240EDT-2014\" name=\"note-Thu-Mar-20-195240EDT-2014\">[6]</a>. The hard part is going to involve a persistence layer, multiple cells, multiple notebooks and probably some smaller browsing/presentation/generation features to let me do whatever<a href=\"#foot-Thu-Mar-20-195242EDT-2014\" name=\"note-Thu-Mar-20-195242EDT-2014\">[7]</a>. Spoiler warning: <a href=\"https://github.com/Inaimathi/fact-base\"><code>fact-base</code></a> and its history/indexing operations will feature prominently. The ultimate goal is no less than replacing Emacs as my Common Lisp IDE of choice.</p>

<p>And that's sort of why I've been on another editor/tools kick lately.</p>

<p>I've been talking to some friends in the local programming community, and we seem to have collectively decided that we really, <i>really</i> want Light Table to succeed because it sucks not being able to recommend anything as a starting tool for Common Lisp development to programming newbies. Our options right now are what can charitably be referred to as <a href=\"https://www.gnu.org/software/emacs/\">a very intimidating operating system/rss aggregator/IRC client/moustache trimmer</a><a href=\"#foot-Thu-Mar-20-195245EDT-2014\" name=\"note-Thu-Mar-20-195245EDT-2014\">[8]</a>, <a href=\"https://www.eclipse.org/\">a <i>wannabe</i> very intimidating blah blah blah</a>, <a href=\"http://www.sublimetext.com/\">a very pretty, passably comfortable pair of handcuffs</a>, <a href=\"http://www.lispworks.com/\">a very performant, robust, ridiculously expensive pair of handcuffs</a>, and <a href=\"http://stackoverflow.com/questions/94792/using-vim-for-lisp-development\">vim</a>. If you're recommending Scheme, there's also <a href=\"http://www.racket-lang.org/\">Racket</a><a href=\"#foot-Thu-Mar-20-195247EDT-2014\" name=\"note-Thu-Mar-20-195247EDT-2014\">[9]</a>, but that still doesn't count as a Common Lisp environment.</p>

<p>Any or all of those are things I'd recommend to people who are already programmers. One of them is something that I'd recommend to people looking to learn languages for the sake of learning them. But there isn't a tool anywhere on that list that compares to something like <a href=\"http://docs.python.org/2/library/idle.html\">Idle</a> or, more to the point, <a href=\"http://www.lighttable.com/\">Light Table</a>. I don't think it's quite at the point where I'd switch over to it myself, but I sincerely hope it gets there. And I'll be devoting some effort to pushing that along. You can too, <a href=\"https://github.com/LightTable/LightTable\">since it's up</a> and <a href=\"https://github.com/LightTable/LightTable/blob/master/LICENSE.md#gnu-general-public-license\">properly licensed</a> and all...</p>


<hr />
<h5>Footnotes</h5>
<p>1 - <a href=\"#note-Thu-Mar-20-195226EDT-2014\" name=\"foot-Thu-Mar-20-195226EDT-2014\">[back]</a> - There's an article either in the works or already posted, depending on what order I decide to put these up.</p>
<p>2 - <a href=\"#note-Thu-Mar-20-195230EDT-2014\" name=\"foot-Thu-Mar-20-195230EDT-2014\">[back]</a> - From a macro-optimization perspective; I'm sure I could pull some micro-optimizations on it too, but I'm not into that.</p>
<p>3 - <a href=\"#note-Thu-Mar-20-195232EDT-2014\" name=\"foot-Thu-Mar-20-195232EDT-2014\">[back]</a> - Turns out that even the <a href=\"https://packages.debian.org/sid/leiningen\">Debian Unstable</a> repo doesn't have a recent enough version of <a href=\"https://github.com/technomancy/leiningen\">Leiningen</a>. I needed to latest using <a href=\"https://raw.github.com/technomancy/leiningen/stable/bin/lein\">this</a>.</p>
<p>4 - <a href=\"#note-Thu-Mar-20-195235EDT-2014\" name=\"foot-Thu-Mar-20-195235EDT-2014\">[back]</a> - In fact, the only visible revolutionization of \"randomly putting shit in your buffers that you can't edit instead of giving you a goddamn REPL\" is profoundly annoying, though it's possible to disagree about these things. I guess I can imagine it looking really snazzy in presentations and demo videos.</p>
<p>5 - <a href=\"#note-Thu-Mar-20-195237EDT-2014\" name=\"foot-Thu-Mar-20-195237EDT-2014\">[back]</a> - ...and before that jEdit, and before that Eclipse.</p>
<p>6 - <a href=\"#note-Thu-Mar-20-195240EDT-2014\" name=\"foot-Thu-Mar-20-195240EDT-2014\">[back]</a> - And yes, it handles multiple values as well as <code>*standard-output*</code> emissions, in case you were wondering.</p>
<p>7 - <a href=\"#note-Thu-Mar-20-195242EDT-2014\" name=\"foot-Thu-Mar-20-195242EDT-2014\">[back]</a> - At minimum the possibility to write <code>:cl-who</code>/<code>:cl-css</code> instead of markdown, a way of installing libraries that doesn't go through quicklisp, and maybe some git/<a href=\"https://github.com/edicl/drakma\">drakma</a>/shell support. I may end up having to add non-shitty static file serving to <code>house</code> for this...</p>
<p>8 - <a href=\"#note-Thu-Mar-20-195245EDT-2014\" name=\"foot-Thu-Mar-20-195245EDT-2014\">[back]</a> - <a href=\"http://common-lisp.net/project/lispbox/\">Pre-built Lisp IDE version</a> optional.</p>
<p>9 - <a href=\"#note-Thu-Mar-20-195247EDT-2014\" name=\"foot-Thu-Mar-20-195247EDT-2014\">[back]</a> - Which I do wholeheartedly recommend; it's very cool.</p>
"))
((5202 3723 627137000) :INSERT (171 :POSTED 3604276800))
((5202 3723 627139000) :INSERT (171 :TAG :BITCHING))
((5202 3723 627141000) :INSERT (171 :TAG :CLOJURE))
((5202 3723 627142000) :INSERT (171 :TAG :COMMON-LISP))
((5202 3723 627145000) :INSERT (171 :TAG :DATABASES))
((5202 3723 627147000) :INSERT (171 :TAG :EMACS))
((5202 3723 627148000) :INSERT (171 :TAG :GENERAL-PROGRAMMING-THOUGHTS))
((5202 3723 627150000) :INSERT (171 :TAG :GENERAL-UPDATE))
((5202 3723 627152000) :INSERT (171 :TAG :JOURNAL))
((5202 3723 627153000) :INSERT (171 :TAG :PROGRAMMING-ENVIRONMENT))
((5202 3723 627155000) :INSERT (171 :TAG :PROGRAMMING-INTERFACES))
((5202 3723 627156000) :INSERT (171 :TAG :SPECULATION))
((5202 3723 627425000) :INSERT (172 :TITLE "Fact Base Indices"))
((5202 3723 627429000) :INSERT (172 :FILE "fact-base-indices.html"))
((5202 3723 627431000) :INSERT (172 :EDITED 3610022331))
((5202 3723 627432000) :INSERT
 (172 :BODY
  "<p>Got through a late-night programming binge, followed by more of the same on my lunch break, followed by a couple more days of thought and work during downtime. It's up at my <a href=\"https://github.com/Inaimathi/fact-base\">fact-base implementation</a>. Basically, we have indices now. Fairly naive, simple indices, but they should suffice for what I'm up to<a href=\"#foot-Tue-Mar-25-150513EDT-2014\" name=\"note-Tue-Mar-25-150513EDT-2014\">[1]</a>.</p>

<p>Before we get to discussing any code, lets back up and discuss the idea of an <code>index</code> for a moment.</p>

<h3>The Idea of an <code>index</code></h3>

<p>An <code>index</code> in this context is an extra layer on top of our fact storage engine that keeps track of what we've put in/taken out in a way that makes certain things easier to look up. It's easier for fact-bases than it is for relational databases. Since every fact is made up of three components<a href=\"#foot-Tue-Mar-25-150529EDT-2014\" name=\"note-Tue-Mar-25-150529EDT-2014\">[3]</a>, all we have to do is keep an index by one or two slots. What we're basically looking to do is a really fast lookup of some subset of all facts in a base based on one or two of those keys<a href=\"#foot-Tue-Mar-25-150535EDT-2014\" name=\"note-Tue-Mar-25-150535EDT-2014\">[4]</a>. The way I've chosen to do it, after some advice from friends who've used systems something like this, is by maintaining hash tables<a href=\"#foot-Tue-Mar-25-150538EDT-2014\" name=\"note-Tue-Mar-25-150538EDT-2014\">[5]</a> in memory that give you shortcuts to some specified indices. We're trading space<a href=\"#foot-Tue-Mar-25-150541EDT-2014\" name=\"note-Tue-Mar-25-150541EDT-2014\">[6]</a> for time<a href=\"#foot-Tue-Mar-25-150544EDT-2014\" name=\"note-Tue-Mar-25-150544EDT-2014\">[7]</a>.</p>

<h3>The Post-Explanation Version</h3>

<p>This was a much different article initially; I was going to discuss some bone-headed intermediate states for this code before getting to the \"final\"<a href=\"#foot-Tue-Mar-25-150547EDT-2014\" name=\"note-Tue-Mar-25-150547EDT-2014\">[8]</a>. It ended up looking like a stupid idea in this particular instance because the previous versions weren't things I'd consider running after having thought through it a bit more. </p>

<p>I try to do that a fair amount these days.</p> 

<p>Not the stupid implementations thing, though that's also true. I mean sit down with another actual human being and talk them through the code I just wrote. It's not <i>quite</i> as good as blogging about it, but it's faster and turns up almost as many issues. It also has an added benefit that blogging doesn't seem to give me, which is showing me when I'm completely off my nut. Anyhow, here's what I had after I explained the thing to someone, poured some shower time into thinking about it, and drafting the first version of this post:</p>

<pre>(<span style=\"color: #a020f0;\">in-package</span> #<span style=\"color: #483d8b;\">:fact-base</span>)

(<span style=\"color: #a020f0;\">defclass</span> <span style=\"color: #228b22;\">index</span> ()
  ((table <span style=\"color: #483d8b;\">:reader</span> table <span style=\"color: #483d8b;\">:initform</span> (make-hash-table <span style=\"color: #483d8b;\">:test</span> 'equal))))

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">make-index</span> (indices)
  (<span style=\"color: #a020f0;\">let</span> ((index (make-instance 'index)))
    (<span style=\"color: #a020f0;\">loop</span> for ix in indices
       do (setf (gethash ix (table index))
                (make-hash-table <span style=\"color: #483d8b;\">:test</span> 'equal)))
    index))

(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">indexed?</span> ((state index) (ix-type symbol))
  (gethash ix-type (table state)))

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">decide-index</span> (<span style=\"color: #228b22;\">&amp;optional</span> a b c)
  (<span style=\"color: #a020f0;\">cond</span> ((and a b c) (list <span style=\"color: #483d8b;\">:abc</span> a b c))
        ((and a b) (list <span style=\"color: #483d8b;\">:ab</span> a b))
        ((and a c) (list <span style=\"color: #483d8b;\">:ac</span> a c))
        ((and b c) (list <span style=\"color: #483d8b;\">:bc</span> b c))
        ((and a) (list <span style=\"color: #483d8b;\">:a</span> a))
        ((and b) (list <span style=\"color: #483d8b;\">:b</span> b))
        ((and c) (list <span style=\"color: #483d8b;\">:c</span> c))))

(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">format-index</span> ((ix-type symbol) (fact list))
  (<span style=\"color: #a020f0;\">destructuring-bind</span> (a b c) fact
    (<span style=\"color: #a020f0;\">case</span> ix-type
      (<span style=\"color: #483d8b;\">:abc</span> (list a b c))
      (<span style=\"color: #483d8b;\">:ab</span> (list a b))
      (<span style=\"color: #483d8b;\">:ac</span> (list a c))
      (<span style=\"color: #483d8b;\">:bc</span> (list b c))
      (<span style=\"color: #483d8b;\">:a</span> (list a))
      (<span style=\"color: #483d8b;\">:b</span> (list b))
      (<span style=\"color: #483d8b;\">:c</span> (list c)))))

(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">map-insert!</span> ((facts list) (state index))
  (<span style=\"color: #a020f0;\">dolist</span> (f facts) (insert! f state)))

(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">insert!</span> ((fact list) (state index))
  (<span style=\"color: #a020f0;\">loop</span> for ix being the hash-keys of (table state)
     for ix-table being the hash-values of (table state)
     do (push fact (gethash (format-index ix fact) ix-table))))

(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">delete!</span> ((fact list) (state index))
  (<span style=\"color: #a020f0;\">loop</span> for ix being the hash-keys of (table state)
     for ix-table being the hash-values of (table state)
     for formatted = (format-index ix fact)
     do (setf (gethash formatted ix-table) 
              (remove fact (gethash formatted ix-table) <span style=\"color: #483d8b;\">:test</span> #'equal <span style=\"color: #483d8b;\">:count</span> 1))
     unless (gethash formatted ix-table) do (remhash formatted ix-table)))

<span style=\"color: #b22222;\">;;;;; </span><span style=\"color: #b22222;\">Show methods
</span><span style=\"color: #b22222;\">;; </span><span style=\"color: #b22222;\">Entirely for debugging purposes. 
</span><span style=\"color: #b22222;\">;; </span><span style=\"color: #b22222;\">Do not use in production. 
</span><span style=\"color: #b22222;\">;; </span><span style=\"color: #b22222;\">Seriously.
</span>(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">show</span> (thing <span style=\"color: #228b22;\">&amp;optional</span> (depth 0))
  (format t <span style=\"color: #8b2252;\">\"~a~a\"</span> (make-string depth <span style=\"color: #483d8b;\">:initial-element</span> #\\space) thing))

(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">show</span> ((tbl hash-table) <span style=\"color: #228b22;\">&amp;optional</span> (depth 0))
  (<span style=\"color: #a020f0;\">loop</span> for k being the hash-keys of tbl
     for v being the hash-values of tbl
     do (format t <span style=\"color: #8b2252;\">\"~a~5@a -&gt;~%\"</span> 
                (make-string depth <span style=\"color: #483d8b;\">:initial-element</span> #\\space) k)
     do (show v (+ depth 8))
     do (format t <span style=\"color: #8b2252;\">\"~%\"</span>)))

(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">show</span> ((ix index) <span style=\"color: #228b22;\">&amp;optional</span> (depth 0))
  (show (table ix) depth))</pre>

<p>There, that's not so intimidating, is it? The actual interface to these indices is in <a href=\"https://github.com/Inaimathi/fact-base/blob/master/fact-base.lisp#L45-L58\"><code>fact-base.lisp</code></a>, but the above contains most of the functionality. First, ignore the <code>show</code> methods at the bottom there. That was just a piece of hackery to give me a usable visual representation of an index while I was debugging this beast. Lets start at the top.</p>

<pre>(<span style=\"color: #a020f0;\">defclass</span> <span style=\"color: #228b22;\">index</span> ()
  ((table <span style=\"color: #483d8b;\">:reader</span> table <span style=\"color: #483d8b;\">:initform</span> (make-hash-table <span style=\"color: #483d8b;\">:test</span> 'equal))))

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">make-index</span> (indices)
  (<span style=\"color: #a020f0;\">let</span> ((index (make-instance 'index)))
    (<span style=\"color: #a020f0;\">loop</span> for ix in indices
       do (setf (gethash ix (table index))
                (make-hash-table <span style=\"color: #483d8b;\">:test</span> 'equal)))
    index))

(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">indexed?</span> ((state index) (ix-type symbol))
  (gethash ix-type (table state)))</pre>

<p>An <code>index</code> has a table of bindings. You'd call <code>make-index</code> in a way resembling <code>(make-index '(:a :b :bc :ac))</code>, which would give you back an <code>index</code> with room to dissect a fact base into chunklets keyed off of</p>

<ol>
  <li>the first element</li>
  <li>the second element</li>
  <li>the second then the third element</li>
  <li>the first then the third element</li>
</ol>

<p>No, I have no idea if I'll ever actually need a setup like this. The <code>indexed?</code> method takes an <code>index</code> and an <code>ix-type</code> symbol and tells you whether the given <code>index</code> is tracking that particular type of lookup.</p>

<pre>(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">decide-index</span> (<span style=\"color: #228b22;\">&amp;optional</span> a b c)
  (<span style=\"color: #a020f0;\">cond</span> ((and a b c) (list <span style=\"color: #483d8b;\">:abc</span> a b c))
        ((and a b) (list <span style=\"color: #483d8b;\">:ab</span> a b))
        ((and a c) (list <span style=\"color: #483d8b;\">:ac</span> a c))
        ((and b c) (list <span style=\"color: #483d8b;\">:bc</span> b c))
        ((and a) (list <span style=\"color: #483d8b;\">:a</span> a))
        ((and b) (list <span style=\"color: #483d8b;\">:b</span> b))
        ((and c) (list <span style=\"color: #483d8b;\">:c</span> c))))

(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">format-index</span> ((ix-type symbol) (fact list))
  (<span style=\"color: #a020f0;\">destructuring-bind</span> (a b c) fact
    `(,ix-type
      ,@ (<span style=\"color: #a020f0;\">case</span> ix-type
           (<span style=\"color: #483d8b;\">:abc</span> (list a b c))
           (<span style=\"color: #483d8b;\">:ab</span> (list a b))
           (<span style=\"color: #483d8b;\">:ac</span> (list a c))
           (<span style=\"color: #483d8b;\">:bc</span> (list b c))
           (<span style=\"color: #483d8b;\">:a</span> (list a))
           (<span style=\"color: #483d8b;\">:b</span> (list b))
           (<span style=\"color: #483d8b;\">:c</span> (list c))))))</pre>

<p>Those both map an index type to the components they'll need for insertion/lookup. I've thought about factoring out the obvious pattern, and even wrote some prototype code to do it, but it turns out that for 6 indices, the macrology involved is more complicated than the trivial lookup-table thing. If <code>fact-base</code> were an arbitrary storage system, this would probably be complicated enough to <code>macro</code> away, but the whole point is that I'm only ever storing triples. Which means I'm never going to need more <code>index</code> types than this, and usually much less.</p>

<pre>(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">map-insert!</span> ((facts list) (state index))
  (<span style=\"color: #a020f0;\">dolist</span> (f facts) (insert! f state)))

(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">insert!</span> ((fact list) (state index))
  (<span style=\"color: #a020f0;\">loop</span> for ix being the hash-keys of (table state)
     for ix-table being the hash-values of (table state)
     do (push fact (gethash (format-index ix fact) ix-table))))

(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">delete!</span> ((fact list) (state index))
  (<span style=\"color: #a020f0;\">loop</span> for ix being the hash-keys of (table state)
     for ix-table being the hash-values of (table state)
     for formatted = (format-index ix fact)
     do (setf (gethash formatted ix-table) 
              (remove fact (gethash formatted ix-table) <span style=\"color: #483d8b;\">:test</span> #'equal <span style=\"color: #483d8b;\">:count</span> 1))
     unless (gethash formatted ix-table) do (remhash formatted ix-table)))</pre>

<p>These three utility methods at the end are exactly what you'd expect. <code>insert!</code> takes a fact and an <code>index</code> and inserts one into the other, into how-many-ever particular lookups that <code>index</code> is tracking. <code>map-insert!</code> is a shorthand for inserting a bunch of facts at once into the same <code>index</code>. And finally, <code>delete!</code> takes a fact and removes it from all <code>index</code> lookups, then cleans up empty lookup lists.</p>

<p>And that's that. You've got a quick run-through of how this works out in practice <a href=\"https://github.com/Inaimathi/fact-base#example-usage\">here</a>. I get the feeling I'll be talking about deltas, forking and the applications of fact bases before long, but we shall see.</p>


<hr />
<h5>Footnotes</h5>
<p>1 - <a href=\"#note-Tue-Mar-25-150513EDT-2014\" name=\"foot-Tue-Mar-25-150513EDT-2014\">[back]</a> - Granted, because \"what I'm up to\" at this point \"an almost trivial semi-anonymous forum for a local meetup group\", and \"an almost trivial notebook-style REPL for common lisp\", that's true of almost any data storage technique ever, but still. The naive, index-less storage was giving <a href=\"https://github.com/Inaimathi/cl-kanren-trs\">cl-kanren</a><a href=\"#foot-Tue-Mar-25-150519EDT-2014\" name=\"note-Tue-Mar-25-150519EDT-2014\">[2]</a> a bit more trouble than I wanted it to when I pushed the stored entry count past 10000 or so. Which is not satisfactory. So yeah, this index is basically a search-space optimization for my database traversals. I'll let you know how it goes.</p>

<p>2 - <a href=\"#note-Tue-Mar-25-150519EDT-2014\" name=\"foot-Tue-Mar-25-150519EDT-2014\">[back]</a> - Which I'll also have to talk about before long, if for no reason other than to get some ideas out of my head temporarily.</p>

<p>3 - <a href=\"#note-Tue-Mar-25-150529EDT-2014\" name=\"foot-Tue-Mar-25-150529EDT-2014\">[back]</a> - The second two might be compound structures, but it's still only three top-level elements.</p>

<p>4 - <a href=\"#note-Tue-Mar-25-150535EDT-2014\" name=\"foot-Tue-Mar-25-150535EDT-2014\">[back]</a> - If you have none of the three components of the fact you're looking for, you can't do better than \"all facts\"; if you have all of them, you already have the fact you're looking for. So we're only interested in the other two cases.</p>

<p>5 - <a href=\"#note-Tue-Mar-25-150538EDT-2014\" name=\"foot-Tue-Mar-25-150538EDT-2014\">[back]</a> - There's no particular reason you couldn't use some tree structure if you like, but hashes are easy, and they come with Common lisp, so...</p>

<p>6 - <a href=\"#note-Tue-Mar-25-150541EDT-2014\" name=\"foot-Tue-Mar-25-150541EDT-2014\">[back]</a> - Which is in ample supply these days.</p>

<p>7 - <a href=\"#note-Tue-Mar-25-150544EDT-2014\" name=\"foot-Tue-Mar-25-150544EDT-2014\">[back]</a> - Which is always a vanishingly scarce resource.</p>

<p>8 - <a href=\"#note-Tue-Mar-25-150547EDT-2014\" name=\"foot-Tue-Mar-25-150547EDT-2014\">[back]</a> - Which isn't really final any more; I've updated it several times since the stuff here.</p>
"))
((5202 3723 627555000) :INSERT (172 :POSTED 3604708800))
((5202 3723 627558000) :INSERT (172 :TAG :ALMOST-LITERATE-PROGRAMMING))
((5202 3723 627559000) :INSERT (172 :TAG :COMMON-LISP))
((5202 3723 627561000) :INSERT (172 :TAG :DATABASES))
((5202 3723 627789000) :INSERT (173 :TITLE "Buildapp Minutia"))
((5202 3723 627794000) :INSERT (173 :FILE "buildapp-minutia.html"))
((5202 3723 627796000) :INSERT (173 :EDITED 3610022331))
((5202 3723 627797000) :INSERT
 (173 :BODY
  "<p>Before I get to telling you <a href=\"https://github.com/Inaimathi/cl-notebook#cl-notebook\">what I've been up to lately</a>, let me share some insight into what it takes to build Lisp executables on Windows and Linux. This is something I had to do recently at work. I wouldn't normally bother, but we still have Windows dev boxes, and it seemed like an interesting enough exercise. In no particular order, here are things you need to think about when you're putting things together with <a href=\"http://www.xach.com/lisp/buildapp/\"><code>buildapp</code></a>.</p>

<h3>Be careful with your storage folders</h3>

<p>My usual tactic for this sort of thing is to store static files and stored files in the project directory. It's easy to do because I just get to use relative paths everywhere, and it works well enough if your distribution plan is basically <code>git clone https://github.com/you/whatever.git</code>. The only downside is that you have to run the program in the context of its project directory, or have random <code>static</code> folders pop up in random places.</p>

<p>For people who don't just randomly write Lisp code for fun, this isn't exactly acceptable. To do proper binary deployment for a more general audience, you need to make sure that there's a single consistent place for your program to store stuff. And if you want to be cross-platform about it, you can't just do <code>(defvar *storage* \"~/project-name/\")</code> and call it a day. Fortunately, <a href=\"http://www.lispworks.com/documentation/HyperSpec/Body/f_user_h.htm#user-homedir-pathname\"><code>user-homedir-pathname</code></a> it a thing, so what I ended up doing is setting my storage directory to <code>(merge-pathnames \".project-name/\" (user-homedir-pathname))</code>. However, it wasn't quite that simple.</p>

<p>My <i>other</i> usual tactic is to just put such config variable declarations in the appropriate <code>package.lisp</code> file, and leave it at that. Unfortunately, when I tried that with <code>buildapp</code>, the first teammate who tried it responded with</p>

<blockquote>Why is this complaining that \"C:\\Users\\Inaimathi\\2dmacs\\\" doesn't exist?</blockquote>

<p>The problem is that <code>buildapp</code> takes your image and binary and ships it, including anything you did at compile or config time. What I really wanted was for my binary to check <i>at runtime</i> what the users' home directory is and use that as the starting point for its own storage directory. The way I ended up doing that, though I'm sure others are possible, was to define the appropriate variables where I'd usually put them, then set them again in the entry-point function. Mine happened to be called <code>main</code>, because why not, so what you'd see if you looked into the appropriate files is<a href=\"#foot-Sat-Apr-05-175204EDT-2014\" name=\"note-Sat-Apr-05-175204EDT-2014\">[1]</a></p>

<pre><span style=\"color: #b22222;\">;;; </span><span style=\"color: #b22222;\">package.lisp
</span>
...

(<span style=\"color: #a020f0;\">defparameter</span> <span style=\"color: #a0522d;\">*storage*</span> nil)

...</pre>

<pre><span style=\"color: #b22222;\">;;; </span><span style=\"color: #b22222;\">start.lisp
</span>
...

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">main</span> (<span style=\"color: #228b22;\">&amp;optional</span> argv)
  ...
  (setf *storage (merge-pathnames <span style=\"color: #8b2252;\">\".2dmacs/\"</span> (user-homedir-pathname)))
  ...
  )</pre>

<p>That lets the appropriate functions access storage files, but makes sure that <code>*storage*</code> will ultimately be set to the appropriate directory on the users' machine rather than yours.</p>

<h3>Native SBCL shell sucks balls under Windows</h3>

<p>We had a couple problems deploying a specific part of the system that dealt with running external programs. And like the title says, that was balls on Windows. Not that I expected it to run perfectly across operating systems, but it turned out to be particularly thorny. First off, <code>external-program</code> doesn't do what we wanted. It kinda does, but doesn't seem to let you have a hook in to search the users' environment variables for program locations. Luckily, we're using SBCL, and its native <code>sb-ext:run-program</code> <i>does</i> give you this facility in the form of the <code>search</code> keyword argument. Also, for some reason SBCL handles streams really oddly in Windows? Not sure why, but the end result was that I couldn't capture <code>*standard-output*</code> in the way I wanted to in one part of the code. We ended up dealing with that by calling <code>sb-ext:run-program</code> with <code>:output :stream</code>, then collecting the result through <code>sb-ext:process-output</code> instead of direct stream capture. Cool, I guess. It <i>seemed</i> to work in testing. But the particular shell command we were using started seizing up once we hit a particular corpus size<a href=\"#foot-Sat-Apr-05-175223EDT-2014\" name=\"note-Sat-Apr-05-175223EDT-2014\">[2]</a>. The solution we ended up taking was using <code>uiop:run-program</code> instead. It deals with streams the way I was expecting <i>and</i> handles all shell commands we've thrown at it so far very snappily.</p>
 
<h3>Finding dependencies is ... non-trivial</h3>

<p><code>buildapp</code> doesn't load dependencies automatically. It expects you to pass it a bunch of <code>--load-system</code> command line arguments for things you want included in the final binary. The first thing I did was check the docs. There didn't seem to be a <code>dependency-tree</code> call anywhere, so I wrote <a href=\"http://stackoverflow.com/a/22732580/190887\">this one</a>. On a whim though, I dropped by <code>#lisp</code>, where I got the opportunity to ask <a href=\"<a href=\"http://xach.com/\">\">Zach</a> about it<a href=\"#foot-Sat-Apr-05-175227EDT-2014\" name=\"note-Sat-Apr-05-175227EDT-2014\">[3]</a>. It turns out that what I wrote is really only going to get you the dependencies declared in <code>asdf</code> files, and there are apparently enough people out there who hook manual <code>load</code> or <code>ql:quickload</code> statements in through odd, ad-hoc ways that he doesn't go that route. Turns out that what he does is <code>asdf:load-system</code>/<code>ql:quickload</code> the thing he wants to build, then runs <code>ql:write-asdf-manifest-file</code> to find the list of all systems included in the image after everything relevant has been loaded. The <code>buildapp</code> call you make after that needs to look something like <code>buildapp --asdf-manifest wherever/you/had/ql:write-manifest-file/output.txt --load-system foo --load-system bar ... --entry your-entry-fn --output your-program-name</code>. Mildly annoying, but at least it'll get you what you need.</p>

<hr />
<h5>Footnotes</h5>
<p>1 - <a href=\"#note-Sat-Apr-05-175204EDT-2014\" name=\"foot-Sat-Apr-05-175204EDT-2014\">[back]</a> - Ok, it's mildly more complicated than this too, because I wanted to deal with some command line arguments, and I wanted some static files to be <i>optionally</i> re-generated at each program load. You can still see the basic principle.</p>

<p>2 - <a href=\"#note-Sat-Apr-05-175223EDT-2014\" name=\"foot-Sat-Apr-05-175223EDT-2014\">[back]</a> - If you must know, it was <code>git ls-tree</code>, and the call started hanging around the time that we committed the ~third file into the target repository.</p>

<p>3 - <a href=\"#note-Sat-Apr-05-175227EDT-2014\" name=\"foot-Sat-Apr-05-175227EDT-2014\">[back]</a> - Here's the transcript, for those of you who want the details:</p>

<pre>13:58 &lt;<span style=\"color: #0000ff;\">inaimathi</span>&gt; Anyone here who knows things about asdf
                  dependencies, and is willing to answer
                  questions/lend an eye?
13:58 &lt;<span style=\"color: #0000ff;\">Xach</span>&gt; inaimathi: I know a bit. What's up?
13:59 &lt;<span style=\"color: #0000ff;\">inaimathi</span>&gt; I'm trying to find the dependency tree
                  (preferably ordered) of a given asdf system.
13:59 &lt;<span style=\"color: #0000ff;\">inaimathi</span>&gt; Is there a build-in way of doing that?
13:59 &lt;<span style=\"color: #0000ff;\">inaimathi</span>&gt; *built
13:59 &lt;<span style=\"color: #0000ff;\">inaimathi</span>&gt; Hm
14:00 &lt;<span style=\"color: #0000ff;\">inaimathi</span>&gt; Actually, you might be able to help with the
                  larger problem too. The real problem is that I'm
                  trying to run buildapp for a project, and I want
                  to know what systems I need to load as part of
                  the shell command.
14:00 &lt;<span style=\"color: #0000ff;\">Xach</span>&gt; oh. the way i do that is to load the project once with
             dependencies downloaded automatically and then note
             what was loaded.
14:00 &lt;<span style=\"color: #0000ff;\">Xach</span>&gt; then i load it again with just those things.
14:01 &lt;<span style=\"color: #0000ff;\">Xach</span>&gt; it is not great but arbitrary things load during
             find-system time so i'm not sure if there's a nice way
             around it.
14:01 &lt;<span style=\"color: #0000ff;\">inaimathi</span>&gt; How do I go about doing that?
14:02 &lt;<span style=\"color: #0000ff;\">inaimathi</span>&gt; That is, loading a project while getting output
                  of what's being loaded. Is there a ql flag or
                  something?
14:03 &lt;<span style=\"color: #0000ff;\">Xach</span>&gt; inaimathi: i don't actually note the specifics. i just
             load it, and then have quicklisp dump out an index to
             the currently installed libraries via
             (ql:write-asdf-manifest-file
             <span style=\"color: #8b2252;\">\"/path/to/my/project/system-index.txt\"</span>)
14:03 &lt;<span style=\"color: #0000ff;\">inaimathi</span>&gt; Ah
14:03 &lt;<span style=\"color: #0000ff;\">Xach</span>&gt; then i use buildapp --asdf-manifest system-index.txt
             --&lt;<span style=\"color: #0000ff;\">the</span> rest of the stuff&gt;
14:04 &lt;<span style=\"color: #0000ff;\">Xach</span>&gt; Each time I make a new project I refine the makefile
             technique a little more
14:05 &lt;<span style=\"color: #0000ff;\">inaimathi</span>&gt; Ok then. Do you think something like
                  http://stackoverflow.com/a/22732580/190887 could
                  be a valid approach, or is that going to miss
                  things?
14:07 &lt;<span style=\"color: #0000ff;\">Xach</span>&gt; inaimathi: One difficulty arises from .asd files with
             things like (eval-when ... (asdf:load-system
             <span style=\"color: #8b2252;\">\"some-prerequisite\"</span>))
14:07 &lt;<span style=\"color: #0000ff;\">inaimathi</span>&gt; Right; those wouldn't be noted by the asdf system
                  itself.
14:07 &lt;<span style=\"color: #0000ff;\">inaimathi</span>&gt; Dammit.
14:08 &lt;<span style=\"color: #0000ff;\">Xach</span>&gt; I also don't know if the slot you're looking at
             includes :defsystem-depends-on dependencies.
14:08 &lt;<span style=\"color: #0000ff;\">Xach</span>&gt; inaimathi: I once asked about how to do this on
             asdf-devel and I got an answer I didn't really
             understand (it was complicated) and I haven't
             revisited it. And I'm not sure there's an archive you
             can search for it.
14:09 &lt;<span style=\"color: #0000ff;\">rtoym</span>&gt; asdf-devel is on gmane.org
14:10 &lt;<span style=\"color: #0000ff;\">inaimathi</span>&gt; Hm. I'll take the asdf-manifest-file approach for
                  the moment, and probably ask around on asdf-devel
                  later.
14:10 &lt;<span style=\"color: #0000ff;\">inaimathi</span>&gt; Thanks!
</pre>
"))
((5202 3723 627877000) :INSERT (173 :POSTED 3605659200))
((5202 3723 627879000) :INSERT (173 :TAG :COMMON-LISP))
((5202 3723 628287000) :INSERT (174 :TITLE "Querying Fact Bases"))
((5202 3723 628292000) :INSERT (174 :FILE "querying-fact-bases.html"))
((5202 3723 628296000) :INSERT (174 :EDITED 3610300563))
((5202 3723 628297000) :INSERT
 (174 :BODY
  "<p>So it seems that a lot of people are into this logic programming thing I've been reading about lately. There's the already mentioned Reasoned Schemer trio of Friedman/Byrd/Kiselyov behind the beautiful but arcane <a href=\"http://minikanren.org/\">miniKanren language</a>, a prolog-like contained in Peter Norvig's <a href=\"http://norvig.com/paip.html\">Paradigms of Artificial Intelligence Programming</a> chapters 11, 12 and 14, another one in Graham's <a href=\"http://www.paulgraham.com/onlisp.html\">On Lisp</a> chapters 19, 22, 23, 24 and yet another in <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-29.html#%_sec_4.4\">chapter 4.4</a> of <a href=\"http://mitpress.mit.edu/sicp/full-text/book/book.html\">Abelson and Sussman's SICP</a>. So there's a lot of literature around dealing with how you go about building a unifier or pattern-matcher<a href=\"#foot-Thu-Apr-10-000043EDT-2014\" name=\"note-Thu-Apr-10-000043EDT-2014\">[1]</a>.</p>

<p>Anyway, I've been consuming this literature for a while, and the part I want to zoom in on is searching the database. The other stuff is easy; a unifier can be straight-forwardly built in about ten lines<a href=\"#foot-Thu-Apr-10-000046EDT-2014\" name=\"note-Thu-Apr-10-000046EDT-2014\">[2]</a> and handling variables is the same tree-traversal stuff you've seen a hundred times before, but the actual search never seems to be the focus of these things. And I'm looking for a particular type of search for <a href=\"https://github.com/Inaimathi/fact-base\"><code>fact-base</code></a>. I showed it off recently at a <a href=\"http://lispwiki.inaimathi.ca/\">Toronto Lisp Group</a> meeting along with the app it's supposed to enable and mentioned that querying is mildly annoying when you get to compound queries. Specifically, I took as an example the very simple database</p>

<pre>(<span style=\"color: #a020f0;\">defparameter</span> <span style=\"color: #a0522d;\">base</span> (make-fact-base))
(insert! base (list 0 <span style=\"color: #483d8b;\">:message</span> <span style=\"color: #8b2252;\">\"This is a sample message\"</span>))
(insert! base (list 1 <span style=\"color: #483d8b;\">:message</span> <span style=\"color: #8b2252;\">\"This is another one\"</span>))
(insert! base (list 1 <span style=\"color: #483d8b;\">:author</span> <span style=\"color: #8b2252;\">\"Inaimathi\"</span>))
(insert! base (list 2 <span style=\"color: #483d8b;\">:message</span> <span style=\"color: #8b2252;\">\"That second one was written by me. This one is a meta-message (also by me).\"</span>))
(insert! base (list 2 <span style=\"color: #483d8b;\">:author</span> <span style=\"color: #8b2252;\">\"Inaimathi\"</span>))
(insert! base (list 2 <span style=\"color: #483d8b;\">:type</span> <span style=\"color: #483d8b;\">:meta</span>))</pre>

<p>and pointed out that in order to find <code>All the message bodies authored by Inaimathi</code>, you'd have to take two steps</p>

<ol>
  <li>traverse the database looking for facts that have <code>'(:author \"Inaimathi\")</code> for a <code>rest</code></li>
  <li>get all the facts that have the same <code>first</code> as one of the above and the <code>second</code> <code>:message</code>, and collect their <code>third</code>s</li>
</ol>

<p>In actual lisp, that looks like</p>

<pre>(<span style=\"color: #a020f0;\">loop</span> for (a b c) in (lookup base <span style=\"color: #483d8b;\">:b</span> <span style=\"color: #483d8b;\">:author</span> <span style=\"color: #483d8b;\">:c</span> <span style=\"color: #8b2252;\">\"Inaimathi\"</span>) 
      collect (caddar (lookup base <span style=\"color: #483d8b;\">:a</span> a <span style=\"color: #483d8b;\">:b</span> <span style=\"color: #483d8b;\">:message</span>)))</pre>

<p>That's even passably fast, thanks to <a href=\"/article?name=fact-base-indices.html\">our <code>index</code> system</a>, but it's annoying to write, and it forces me to do a <code>fact-base-&gt;objects</code> conversion in some places rather than write out these multi-stage iterations myself. What I'd like to be able to do in the above is something like</p>

<pre>(for-all (and (?id <span style=\"color: #483d8b;\">:author</span> <span style=\"color: #8b2252;\">\"Inaimathi\"</span>) (?id <span style=\"color: #483d8b;\">:message</span> ?message)) <span style=\"color: #483d8b;\">:in</span> my-fact-base <span style=\"color: #483d8b;\">:get</span> ?message)</pre>

<p>and have the system figure it out for me. Granted in this situation, you don't gain very much, but it would be a compounding gain for more complex queries. For instance, if I suddenly decided I want to select <code>All the message bodies authored by Inaimathi pertaining to other messages</code>, the query language version handles it very simply:</p>

<pre>(for-all (and (?id <span style=\"color: #483d8b;\">:author</span> <span style=\"color: #8b2252;\">\"Inaimathi\"</span>) (?id <span style=\"color: #483d8b;\">:message</span> ?message) (?id <span style=\"color: #483d8b;\">:type</span> <span style=\"color: #483d8b;\">:meta</span>)) <span style=\"color: #483d8b;\">:in</span> my-fact-base <span style=\"color: #483d8b;\">:get</span> ?message)</pre>

<p>whereas the manual version would add another level of iteration I'd need to work through. Oh, and have fun with the situation where you only want the first 5 or so hits. The easiest solution with the manual approach is searching the entire space and throwing away all but the first <code>n</code> results. You <i>could</i> do better, but you're suddenly in the <i>supremely</i> annoying situation where your queries all look mildly different, but perform the same basic task.</p>

<p>What I figure I'd want is a lazy or lazy-ish way of getting the results. The lazy solution can easily be converted to the eager solution later, but it's really painful to take the eager approach and <i>then</i> find out that you only needed to do about 4% of the work done. I'll be using <a href=\"http://en.wikipedia.org/wiki/Generator_%28computer_programming%29\">generators</a>, rather than outright lazy sequences just because they're mildly easier to put together. For a single goal, that's trivial.</p>

<pre>(for-all (?id <span style=\"color: #483d8b;\">:author</span> <span style=\"color: #8b2252;\">\"Inaimathi\"</span>) <span style=\"color: #483d8b;\">:in</span> my-fact-base)</pre>

<p>All you have to do here is have a generator that runs over the facts in <code>my-fact-base</code> and returns the next matching one it finds. Something like</p>

<pre>(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">match-single</span> (goal bindings facts)
  (<span style=\"color: #a020f0;\">let</span> ((fs facts))
    (<span style=\"color: #a020f0;\">lambda</span> ()
      (<span style=\"color: #a020f0;\">loop</span> for res = (unify goal (pop fs) bindings)
         unless (fail? res) do (<span style=\"color: #a020f0;\">return</span> res)
         while fs
         finally (<span style=\"color: #a020f0;\">return</span> (fail))))))</pre>

<p>would do fine. I'm pointedly refusing to commit to an implementation of <code>(fail)</code>, <code>unify</code> and <code>bindings</code> at each point for the purposes of this post, but am using the stuff out of <a href=\"http://norvig.com/paip/README.html\">Norvig's PAIP source code</a>. For the uninitiated: A <code>goal</code> is the thing you're trying to match; it's an expression that may contain some <code>variable</code>s. A <code>variable</code> is a thing that you can substitute; it can either be unbound or assigned a value in a particular set of <code>bindings</code>. If a <code>unification</code> fails, it returns <code>(fail)</code>, and if it's successful it returns the set of <code>bindings</code> that would make that unification expression true. For instance, if you unified <code>?a</code> with <code>5</code>, starting with empty bindings, <code>unify</code> would return the set of <code>bindings</code> in which <code>?a</code> is bound to <code>5</code>.</p>

<p>So the above <code>match-single</code> definition would return a generator which, when called, would either <code>(fail)</code>, <i>or</i> return the environment resulting from <code>unify</code>ing the next element of <code>facts</code> with <code>goal</code>. Hopefully, straight-forward, though you may need to do a bit of reading up on it if you've never seen the terms before.</p>

<p>The next easiest thing to do would be handling a set of <code>or</code>ed goals. That is</p>

<pre>(for-all (or (?id <span style=\"color: #483d8b;\">:author</span> <span style=\"color: #8b2252;\">\"Aaron\"</span>) (?id <span style=\"color: #483d8b;\">:author</span> <span style=\"color: #8b2252;\">\"Bradley\"</span>)) <span style=\"color: #483d8b;\">:in</span> my-fact-base)</pre>

<p>It's basically the same thing, except that instead of applying a single goal and checking if it sticks, we're applying several goals in sequence and seeing if any of them stick. Something like</p>

<pre>(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">match-ors</span> (goals bindings facts)
  (<span style=\"color: #a020f0;\">let</span> ((fs facts))
    (<span style=\"color: #a020f0;\">flet</span> ((try-goals (f)
             (<span style=\"color: #a020f0;\">loop</span> for g in goals 
                when (unify g f bindings) (<span style=\"color: #a020f0;\">return</span> it)
                finally (<span style=\"color: #a020f0;\">return</span> (fail)))))
      (<span style=\"color: #a020f0;\">lambda</span> ()
        (<span style=\"color: #a020f0;\">loop</span> for res = (try-goals (pop fs))
           unless (fail? res) do (<span style=\"color: #a020f0;\">return</span> res)
           while fs
           finally (<span style=\"color: #a020f0;\">return</span> (fail)))))))</pre>

<p>which is by my estimation only marginally more complicated. The tricky part is traversing a fact-base in order to satisfy <code>and</code>ed goals. Like in that example I mentioned near the beginning:</p>

<pre>(for-all (and (?id <span style=\"color: #483d8b;\">:author</span> <span style=\"color: #8b2252;\">\"Inaimathi\"</span>) (?id <span style=\"color: #483d8b;\">:message</span> ?message) (?id <span style=\"color: #483d8b;\">:type</span> <span style=\"color: #483d8b;\">:meta</span>)) <span style=\"color: #483d8b;\">:in</span> my-fact-base <span style=\"color: #483d8b;\">:get</span> ?message)</pre>

<p>Think about it.</p>

<p>What you want here is fairly complicated to express in English. I'm still trying to return a generator from the whole thing, but expressing its behavior is a complex.</p>

<p>If you only get one goal, you want to fall through to a call to <code>match-single</code>; that's still fairly straight-forward. The magic happens at more than one goal. And I just deleted about four paragraphs of prose that would have thoroughly confused you. It's not a very easy set of concepts to express in English because it refers to pieces of itself fairly often.</p>

<p>Lets try it this way:</p>

<pre>(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">match-ands</span> (goals bindings facts)
  (<span style=\"color: #a020f0;\">let</span> ((generator (match-single (first goals) bindings facts))
        (rest-generator))
    (<span style=\"color: #a020f0;\">if</span> (null (cdr goals))
        generator
        (<span style=\"color: #a020f0;\">labels</span> ((next-gen ()
                   (<span style=\"color: #a020f0;\">let</span> ((res (funcall generator)))
                     (<span style=\"color: #a020f0;\">if</span> (fail? res)
                         (fail)
                         (setf rest-generator (match-ands (rest goals) res facts)))))
                 (backtrack! ()
                   (<span style=\"color: #a020f0;\">if</span> (fail? (next-gen))
                       (fail)
                       (next)))
                 (next ()
                   (<span style=\"color: #a020f0;\">if</span> (null rest-generator)
                       (backtrack!)
                       (<span style=\"color: #a020f0;\">let</span> ((res (funcall rest-generator)))
                         (<span style=\"color: #a020f0;\">if</span> (fail? res)
                             (backtrack!)
                             res)))))
          #'next))))</pre>

<p>Now, chunk by chunk</p>

<pre>(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">match-ands</span> (goals bindings facts)
  (<span style=\"color: #a020f0;\">let</span> ((generator (match-single (first goals) bindings facts))
        (rest-generator))
    (<span style=\"color: #a020f0;\">if</span> (null (cdr goals))
        generator
        ...</pre>

<p>By the time we're calling this function, I assume that it'll be handed at least one goal. You always want the generator of your first goal, and if you only get the one goal, you just return said generator and you're done. Multiple goals are where you need to pull fancy footwork. Again, one chunk at a time:</p>

<pre>        ...
        (<span style=\"color: #a020f0;\">labels</span> ((next-gen ()
                   (<span style=\"color: #a020f0;\">let</span> ((res (funcall generator)))
                     (<span style=\"color: #a020f0;\">if</span> (fail? res)
                         (fail)
                         (setf rest-generator (match-ands (rest goals) res facts)))))
                 ...</pre>

<p>This is where we set the <code>rest-generator</code> from earlier. It's just the procedure that will return the next result from proving the rest of the goals given the set of <code>bindings</code> built from proving the first goal into the starting set of <code>bindings</code> given to <code>match-ands</code> initially. If calling the first goals' generator fails, we likewise fail; otherwise we set <code>rest-generator</code> to the generator we create by passing the result back up to <code>match-ands</code>.</p>

<pre>                 ...
                 (backtrack! ()
                   (<span style=\"color: #a020f0;\">if</span> (fail? (next-gen))
                       (fail)
                       (next)))
                 ...</pre>

<p>Occasionally, we have to backtrack. Which in this context means we try to call <code>next-gen</code>. If that fails, we likewise fail, otherwise we invoke <code>next</code>. Which...</p>

<pre>                 ...
                 (next ()
                   (<span style=\"color: #a020f0;\">if</span> (null rest-generator)
                       (backtrack!)
                       (<span style=\"color: #a020f0;\">let</span> ((res (funcall rest-generator)))
                         (<span style=\"color: #a020f0;\">if</span> (fail? res)
                             (backtrack!)
                             res)))))
                       ...</pre>

<p>...sets up an initial <code>rest-generator</code> if there isn't one, then tries to call it. If that fails, we <code>backtrack!</code><a href=\"#foot-Thu-Apr-10-000130EDT-2014\" name=\"note-Thu-Apr-10-000130EDT-2014\">[3]</a>, otherwise we return the result.</p>

<pre>          ...
          #'next))))</pre>

<p>That <code>next</code> function I just described is the generator we want for a multi-goal proof, which means that it's the final return value from <code>match-ands</code>.</p>

<p>The only required piece of infrastructure left is <code>for-all</code> itself. We want it to be able to provide results, or do something with them lazily. Which means it'll look something like</p>

<pre>(<span style=\"color: #a020f0;\">defmacro</span> <span style=\"color: #0000ff;\">for-all</span> (goal-term <span style=\"color: #228b22;\">&amp;key</span> in get apply)
  (<span style=\"color: #ff0000; font-weight: bold;\">assert</span> in nil <span style=\"color: #8b2252;\">\"Need a database to query...\"</span>)
  (<span style=\"color: #a020f0;\">when</span> (and get apply)
    (format t <span style=\"color: #8b2252;\">\":apply and :get arguments passed in; ignoring :get\"</span>))
  (<span style=\"color: #a020f0;\">with-gensyms</span> (template gen res facts)
    `(<span style=\"color: #a020f0;\">let*</span> ((,facts ,in)
            (,gen ,(<span style=\"color: #a020f0;\">cond</span> ((eq 'and (car goal-term))
                          `(match-ands ',(replace-anonymous (rest goal-term)) +succeed+ ,facts))
                         ((eq 'or (car goal-term))
                          `(match-ors ',(replace-anonymous (rest goal-term)) +succeed+ ,facts))
                         (t
                          `(match-single ',goal-term +succeed+ ,facts))))
            ,@(<span style=\"color: #a020f0;\">unless</span> apply
              `((,template ',(replace-anonymous (or get goal-term))))))
       (<span style=\"color: #a020f0;\">loop</span> for ,res = (funcall ,gen)
          while ,res collect ,(<span style=\"color: #a020f0;\">if</span> apply
                                  `(apply (<span style=\"color: #a020f0;\">lambda</span> ,(variables-in apply) ,apply)
                                          (subst-bindings ,res ',(variables-in apply)))
                                  `(subst-bindings ,res ,template))))))</pre>

<p>Which isn't nearly as complicated as it seems at first glance. Lets go through that too.</p>

<pre>(<span style=\"color: #a020f0;\">defmacro</span> <span style=\"color: #0000ff;\">for-all</span> (goal-term <span style=\"color: #228b22;\">&amp;key</span> in get apply)
  (<span style=\"color: #ff0000; font-weight: bold;\">assert</span> in nil <span style=\"color: #8b2252;\">\"Need a database to query...\"</span>)
  (<span style=\"color: #a020f0;\">when</span> (and get apply)
    (format t <span style=\"color: #8b2252;\">\":apply and :get arguments passed in; ignoring :get\"</span>))
    ...</pre>

<p>arguments, and trying to be helpful with invocation errors. We want the thing to be <i>readable</i> too, which is why I use \"mandatory\" keyword arguments in this one.</p>

<pre>  ...
  (<span style=\"color: #a020f0;\">with-gensyms</span> (template gen res facts)
    `(<span style=\"color: #a020f0;\">let*</span> ((,facts ,in)
            (,gen ,(<span style=\"color: #a020f0;\">cond</span> ((eq 'and (car goal-term))
                          `(match-ands ',(replace-anonymous (rest goal-term)) +succeed+ ,facts))
                         ((eq 'or (car goal-term))
                          `(match-ors ',(replace-anonymous (rest goal-term)) +succeed+ ,facts))
                         (t
                          `(match-single ',goal-term +succeed+ ,facts))))
   ...</pre>

<p>we're setting up some name sanitation for certain words we'd like to use in the definition that should still be usable by the callers of <code>for-all</code>. Note the use of <code>replace-anonymous</code>, the definition can be found in Norvig's prolog implementation. The entirety of that <code>cond</code> decides which of our matchers we're going to use to traverse our corpus.</p>

<pre>            ...
            ,@(<span style=\"color: #a020f0;\">unless</span> apply
              `((,template ',(replace-anonymous (or get goal-term))))))
            ...</pre>

<p>If we get passed the <code>apply</code> argument, we'll be doing something special later. Otherwise, we'll want to slot our results into the template in <code>gen</code>, and failing <i>that</i>, just slot it back into the querying goal form.</p>

<pre>       ...
       (<span style=\"color: #a020f0;\">loop</span> for ,res = (funcall ,gen)
          while ,res collect ,(<span style=\"color: #a020f0;\">if</span> apply
                                  `(apply (<span style=\"color: #a020f0;\">lambda</span> ,(variables-in apply) ,apply)
                                          (subst-bindings ,res ',(variables-in apply)))
                                  `(subst-bindings ,res ,template))))))</pre>

<p>And that's the meat of it. We're going to be grabbing results out of our generator. As you can see, the special thing we're doing with the <code>apply</code> argument is stitching up a function to <code>apply</code> to a substituted list of our results. If we didn't get an <code>apply</code>, we're just slotting said result back into the <code>template</code> we defined earlier. I find that seeing some macroexpansions really helps understanding at this stage. So, here are the basics:</p>

<p><b>Plain single-goal:</b></p>
<pre>CL-USER&gt; (macroexpand '(for-all (?id <span style=\"color: #483d8b;\">:author</span> <span style=\"color: #8b2252;\">\"Inaimathi\"</span>) <span style=\"color: #483d8b;\">:in</span> my-fact-base))
(<span style=\"color: #a020f0;\">LET*</span> ((#<span style=\"color: #483d8b;\">:FACTS1073</span> MY-FACT-BASE)
       (#<span style=\"color: #483d8b;\">:GEN1071</span>
        (MATCH-SINGLE '(?ID <span style=\"color: #483d8b;\">:AUTHOR</span> <span style=\"color: #8b2252;\">\"Inaimathi\"</span>) +SUCCEED+ #<span style=\"color: #483d8b;\">:FACTS1073</span>))
       (#<span style=\"color: #483d8b;\">:TEMPLATE1070</span> '(?ID <span style=\"color: #483d8b;\">:AUTHOR</span> <span style=\"color: #8b2252;\">\"Inaimathi\"</span>)))
  (<span style=\"color: #a020f0;\">LOOP</span> FOR #<span style=\"color: #483d8b;\">:RES1072</span> = (FUNCALL #<span style=\"color: #483d8b;\">:GEN1071</span>)
        WHILE #<span style=\"color: #483d8b;\">:RES1072</span>
        COLLECT (SUBST-BINDINGS #<span style=\"color: #483d8b;\">:RES1072</span> #<span style=\"color: #483d8b;\">:TEMPLATE1070</span>)))
T</pre>

<p><b><code>or</code>-goals:</b></p>
<pre>CL-USER&gt; (macroexpand '(for-all (or (?id <span style=\"color: #483d8b;\">:author</span> <span style=\"color: #8b2252;\">\"Inaimathi\"</span>) (?id <span style=\"color: #483d8b;\">:message</span> ?message)) <span style=\"color: #483d8b;\">:in</span> my-fact-base))
(<span style=\"color: #a020f0;\">LET*</span> ((#<span style=\"color: #483d8b;\">:FACTS1077</span> MY-FACT-BASE)
       (#<span style=\"color: #483d8b;\">:GEN1075</span>
        (MATCH-ORS '((?ID <span style=\"color: #483d8b;\">:AUTHOR</span> <span style=\"color: #8b2252;\">\"Inaimathi\"</span>) (?ID <span style=\"color: #483d8b;\">:MESSAGE</span> ?MESSAGE))
                   +SUCCEED+ #<span style=\"color: #483d8b;\">:FACTS1077</span>))
       (#<span style=\"color: #483d8b;\">:TEMPLATE1074</span> '(OR (?ID <span style=\"color: #483d8b;\">:AUTHOR</span> <span style=\"color: #8b2252;\">\"Inaimathi\"</span>) (?ID <span style=\"color: #483d8b;\">:MESSAGE</span> ?MESSAGE))))
  (<span style=\"color: #a020f0;\">LOOP</span> FOR #<span style=\"color: #483d8b;\">:RES1076</span> = (FUNCALL #<span style=\"color: #483d8b;\">:GEN1075</span>)
        WHILE #<span style=\"color: #483d8b;\">:RES1076</span>
        COLLECT (SUBST-BINDINGS #<span style=\"color: #483d8b;\">:RES1076</span> #<span style=\"color: #483d8b;\">:TEMPLATE1074</span>)))
T</pre>

<p><b><code>and</code>-goals:</b></p>
<pre>CL-USER&gt; (macroexpand '(for-all (and (?id <span style=\"color: #483d8b;\">:author</span> <span style=\"color: #8b2252;\">\"Inaimathi\"</span>) (?id <span style=\"color: #483d8b;\">:message</span> ?message)) <span style=\"color: #483d8b;\">:in</span> my-fact-base))
(<span style=\"color: #a020f0;\">LET*</span> ((#<span style=\"color: #483d8b;\">:FACTS1081</span> MY-FACT-BASE)
       (#<span style=\"color: #483d8b;\">:GEN1079</span>
        (MATCH-ANDS '((?ID <span style=\"color: #483d8b;\">:AUTHOR</span> <span style=\"color: #8b2252;\">\"Inaimathi\"</span>) (?ID <span style=\"color: #483d8b;\">:MESSAGE</span> ?MESSAGE))
                    +SUCCEED+ #<span style=\"color: #483d8b;\">:FACTS1081</span>))
       (#<span style=\"color: #483d8b;\">:TEMPLATE1078</span>
        '(AND (?ID <span style=\"color: #483d8b;\">:AUTHOR</span> <span style=\"color: #8b2252;\">\"Inaimathi\"</span>) (?ID <span style=\"color: #483d8b;\">:MESSAGE</span> ?MESSAGE))))
  (<span style=\"color: #a020f0;\">LOOP</span> FOR #<span style=\"color: #483d8b;\">:RES1080</span> = (FUNCALL #<span style=\"color: #483d8b;\">:GEN1079</span>)
        WHILE #<span style=\"color: #483d8b;\">:RES1080</span>
        COLLECT (SUBST-BINDINGS #<span style=\"color: #483d8b;\">:RES1080</span> #<span style=\"color: #483d8b;\">:TEMPLATE1078</span>)))
T</pre>

<p><b>Using the <code><span style=\"color: #483d8b;\">:get</span></code> option</b></p>
<pre>CL-USER&gt; (macroexpand '(for-all (and (?id <span style=\"color: #483d8b;\">:author</span> <span style=\"color: #8b2252;\">\"Inaimathi\"</span>) (?id <span style=\"color: #483d8b;\">:message</span> ?message)) <span style=\"color: #483d8b;\">:in</span> my-fact-base <span style=\"color: #483d8b;\">:get</span> ?message))
(<span style=\"color: #a020f0;\">LET*</span> ((#<span style=\"color: #483d8b;\">:FACTS1085</span> MY-FACT-BASE)
       (#<span style=\"color: #483d8b;\">:GEN1083</span>
        (MATCH-ANDS '((?ID <span style=\"color: #483d8b;\">:AUTHOR</span> <span style=\"color: #8b2252;\">\"Inaimathi\"</span>) (?ID <span style=\"color: #483d8b;\">:MESSAGE</span> ?MESSAGE))
                    +SUCCEED+ #<span style=\"color: #483d8b;\">:FACTS1085</span>))
       (#<span style=\"color: #483d8b;\">:TEMPLATE1082</span> '?MESSAGE))
  (<span style=\"color: #a020f0;\">LOOP</span> FOR #<span style=\"color: #483d8b;\">:RES1084</span> = (FUNCALL #<span style=\"color: #483d8b;\">:GEN1083</span>)
        WHILE #<span style=\"color: #483d8b;\">:RES1084</span>
        COLLECT (SUBST-BINDINGS #<span style=\"color: #483d8b;\">:RES1084</span> #<span style=\"color: #483d8b;\">:TEMPLATE1082</span>)))
T</pre>

<p><b>Using the <code><span style=\"color: #483d8b;\">:apply</span></code> option</b></p>
<pre>CL-USER&gt; (macroexpand '(for-all (and (?id <span style=\"color: #483d8b;\">:author</span> <span style=\"color: #8b2252;\">\"Inaimathi\"</span>) (?id <span style=\"color: #483d8b;\">:message</span> ?message)) <span style=\"color: #483d8b;\">:in</span> my-fact-base <span style=\"color: #483d8b;\">:apply</span> (format t <span style=\"color: #8b2252;\">\"~s~%   -Inaimathi\"</span> ?message)))
(<span style=\"color: #a020f0;\">LET*</span> ((#<span style=\"color: #483d8b;\">:FACTS1089</span> MY-FACT-BASE)
       (#<span style=\"color: #483d8b;\">:GEN1087</span>
        (MATCH-ANDS '((?ID <span style=\"color: #483d8b;\">:AUTHOR</span> <span style=\"color: #8b2252;\">\"Inaimathi\"</span>) (?ID <span style=\"color: #483d8b;\">:MESSAGE</span> ?MESSAGE))
                    +SUCCEED+ #<span style=\"color: #483d8b;\">:FACTS1089</span>)))
  (<span style=\"color: #a020f0;\">LOOP</span> FOR #<span style=\"color: #483d8b;\">:RES1088</span> = (FUNCALL #<span style=\"color: #483d8b;\">:GEN1087</span>)
        WHILE #<span style=\"color: #483d8b;\">:RES1088</span>
        COLLECT (APPLY
                 (<span style=\"color: #a020f0;\">LAMBDA</span> (?MESSAGE) (FORMAT T <span style=\"color: #8b2252;\">\"~s~%   -Inaimathi\"</span> ?MESSAGE))
                 (SUBST-BINDINGS #<span style=\"color: #483d8b;\">:RES1088</span> '(?MESSAGE)))))
T
CL-USER&gt; </pre>

<p>And that's that. Granted, the <i>implementation</i> is a bit more complicated than just writing manual loops, but I'm convinced there are a couple wins here. Firstly, the invocation is simpler, which means that the above definitions will eventually \"pay for themselves\" in terms of complexity. Secondly, it seems like I could fairly easily mod this into <a href=\"http://common-lisp.net/project/parenscript/\"><code>parenscript</code></a>-friendly forms, which means this'll save me from having to convert fact-bases to object lists on the client side. But that's something I'll tell you about next time.</p>

<hr />
<h5>Footnotes</h5>
<p>1 - <a href=\"#note-Thu-Apr-10-000043EDT-2014\" name=\"foot-Thu-Apr-10-000043EDT-2014\">[back]</a> - Almost always using the question-mark-prefix notation for logic variables for some reason. I'm not sure what the approach gains or loses you yet. I guess in the case of miniKanren, it gains you the ability to unify on vectors since there's no ambiguity, and it might make it easier to read the resulting programs, but I'm not banking on that.</p>

<p>2 - <a href=\"#note-Thu-Apr-10-000046EDT-2014\" name=\"foot-Thu-Apr-10-000046EDT-2014\">[back]</a> - Though do go over Norvig's version to see a dissection of the common bugs.</p>

<p>3 - <a href=\"#note-Thu-Apr-10-000130EDT-2014\" name=\"foot-Thu-Apr-10-000130EDT-2014\">[back]</a> - And remember, <code>backtrack!</code> itself fails if it runs out of search space.</p>
"))
((5202 3723 628486000) :INSERT (174 :POSTED 3606004800))
((5202 3723 628488000) :INSERT (174 :TAG :ALMOST-LITERATE-PROGRAMMING))
((5202 3723 628489000) :INSERT (174 :TAG :COMMON-LISP))
((5202 3723 628491000) :INSERT (174 :TAG :DATABASES))
((5202 3723 628984000) :INSERT (175 :TITLE "Querying Fact Bases Redux"))
((5202 3723 628989000) :INSERT (175 :FILE "querying-fact-bases-redux.html"))
((5202 3723 628990000) :INSERT (175 :EDITED 3610310856))
((5202 3723 628992000) :INSERT
 (175 :BODY
  "<p>So I <a href=\"https://github.com/Inaimathi/fact-base/blob/b2d1dd7e9ecf0e62d8a10d30dfec7570cdfdae04/unify.lisp\">put together</a> that thing I talked about <a href=\"/article?name=querying-fact-bases.html\">last time</a>, only to discover three things.</p>

<p><b>Firstly</b>, the only places I actually needed lazy operation could be handled by passing a body directly to the query macro.</p>

<p><b>Secondly</b>, when I loaded the thing up, worked up a 40k fact corpus<a href=\"#foot-Sat-Apr-12-205143EDT-2014\" name=\"note-Sat-Apr-12-205143EDT-2014\">[1]</a> and ran</p>

<pre>(for-all (and (?id <span style=\"color: #483d8b;\">:user</span> ?name) (?id <span style=\"color: #483d8b;\">:time</span> ?time) (?id <span style=\"color: #483d8b;\">:number</span> 62))
         <span style=\"color: #483d8b;\">:in</span> *base* <span style=\"color: #483d8b;\">:get</span> (list ?id ?time ?name))</pre>

<p>I'd get this:</p>

<img src=\"/static/img/slime-eval-screen.png\" class=\"middle\" alt=\"Surely REPL will deliver...\" />

<p>You may have noticed that this <i>isn't</i> an animated gif. It hangs there for something on the order of thirty seconds, more if profiling is on, and then returns the expected result. So that won't really do. There's some interesting points I'll talk about later, that have to do with clause order and the underlying operations. But, even though this is probably the worst way to write this particular query, it should return in under a second.</p>

<p><b>Thirdly</b>, that I had exactly zero use cases for <code>or</code> goals. This might change, but until then, it looks like I don't even need unification<a href=\"#foot-Sat-Apr-12-205435EDT-2014\" name=\"note-Sat-Apr-12-205435EDT-2014\">[2]</a>.</p>

<p>So as a result, I sat down and took the precise opposite approach to traversal that I tried last time. Instead of trying to keep it elegant and lazy, lets make it hacky and eager. Here's our problem, once again:</p>

<pre>(for-all (?id <span style=\"color: #483d8b;\">:user</span> ?name) 
         <span style=\"color: #483d8b;\">:in</span> *base* <span style=\"color: #483d8b;\">:get</span> (list ?id ?name))</pre>

<p>should basically be the same as</p>

<pre>(<span style=\"color: #a020f0;\">loop</span> for (a b c) in (current *base*) when (eq b <span style=\"color: #483d8b;\">:user</span>) collect (list a c))</pre>

<p>and</p>

<pre>(for-all (and (?id <span style=\"color: #483d8b;\">:user</span> ?name) (?id <span style=\"color: #483d8b;\">:time</span> ?time) (?id <span style=\"color: #483d8b;\">:number</span> 62) 
         <span style=\"color: #483d8b;\">:in</span> *base* <span style=\"color: #483d8b;\">:get</span> ?time))</pre>

<p>should more or less be equivalent to</p>

<pre>(<span style=\"color: #a020f0;\">loop</span> for (a b c) in (current *base*) 
   when (eq b <span style=\"color: #483d8b;\">:user</span>)
   append (<span style=\"color: #a020f0;\">loop</span> for (d e f) in (current *base*)
             when (and (eq d a) (eq e <span style=\"color: #483d8b;\">:time</span>)))
             append (<span style=\"color: #a020f0;\">loop</span> for (g h i) in (current *base*)
                       when (and (eq g d) (eq h <span style=\"color: #483d8b;\">:number</span>) (= i 62))
                       collect f))</pre>

<p>Except, you know, it should be smarter about using indices where it can. But that's a pretty straight-forward specification.</p>

<h3><code>lookup</code> and <code>decide-index</code> changes - take 1</h3>

<p>The first thing I had to do was change <code>lookup</code> and <code>decide-index</code> a bit, because I wanted them to be mildly less naive. And yeah, I broke down and added some macrology to pull out all the repetition in the index-related functions. Turns out that was a good thing.</p>

<pre>(<span style=\"color: #a020f0;\">defmacro</span> <span style=\"color: #0000ff;\">lookup-index</span> (state <span style=\"color: #228b22;\">&amp;rest</span> indices)
  (<span style=\"color: #a020f0;\">with-gensyms</span> (st)
    `(<span style=\"color: #a020f0;\">let</span> ((,st ,state))
       (<span style=\"color: #a020f0;\">cond</span> ,@(<span style=\"color: #a020f0;\">loop</span> for i in indices 
                  for syms = (key-&gt;symbols i)
                  collect `((and (indexed? (index ,st) ,i)
                                 ,@syms)
                            (list ,i ,@syms)))))))

(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">decide-index</span> ((state fact-base) <span style=\"color: #228b22;\">&amp;optional</span> a b c)
  (lookup-index state <span style=\"color: #483d8b;\">:abc</span> <span style=\"color: #483d8b;\">:ab</span> <span style=\"color: #483d8b;\">:ac</span> <span style=\"color: #483d8b;\">:bc</span> <span style=\"color: #483d8b;\">:a</span> <span style=\"color: #483d8b;\">:b</span> <span style=\"color: #483d8b;\">:c</span>))</pre>

<p>Short version is, the function now takes a <code>fact-base</code> in addition to an <code>a</code>, <code>b</code> and <code>c</code>, and checks whether a particular type of index is kept for a fact base before otherwise seeing whether it would be appropriate for the current query.</p>

<pre>(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">lookup</span> ((state fact-base) <span style=\"color: #228b22;\">&amp;key</span> a b c)
  (<span style=\"color: #a020f0;\">if</span> (every #'not (list a b c))
      (current state)
      (<span style=\"color: #a020f0;\">let</span> ((ix (aif (decide-index state a b c)
                     (gethash (rest it) (gethash (first it) (table (index state))))
                     (current state))))
        (<span style=\"color: #a020f0;\">loop</span> for f in ix
           when (and (or (not a) (equal a (first f)))
                     (or (not b) (equal b (second f)))
                     (or (not c) (equal c (third f))))
           collect f))))</pre>

<p><code>lookup</code> now has to be mindful of this, and has to check that the indexed facts match the incoming query. Because we're now potentially using a more general index than the query calls for. My gut tells me this is still a net increase in performance since last time, even though our best case is now <code>On</code> with the size of the result rather than <code>01</code>. If it comes to it, I'll go back and make that more efficient.</p>

<p>Actually, lets fix it right now.</p>

<h3><code>lookup</code> and <code>decide-index</code> changes - take 2</h3>

<pre>(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">lookup</span> ((state fact-base) <span style=\"color: #228b22;\">&amp;key</span> a b c)
  (<span style=\"color: #a020f0;\">if</span> (every #'not (list a b c))
      (current state)
      (<span style=\"color: #a020f0;\">multiple-value-bind</span> (index ideal-index) (decide-index state a b c)
        (<span style=\"color: #a020f0;\">let</span> ((ix (<span style=\"color: #a020f0;\">if</span> index
                      (gethash (rest index) (gethash (first index) (table (index state))))
                      (current state))))
          (<span style=\"color: #a020f0;\">if</span> (and index (eq (first index) ideal-index))
              ix
              (<span style=\"color: #a020f0;\">loop</span> for f in ix
                 when (and (or (not a) (equal a (first f)))
                           (or (not b) (equal b (second f)))
                           (or (not c) (equal c (third f))))
                 collect f))))))</pre>

<p>That more complicated version of lookup expects two values instead of one; which <code>index</code> we're using, and which <code>index</code> we'd ideally use. If the two are the same, we just return the results of our lookup, otherwise we have to do the narrowing traversal. That's about as efficient as it's going to get without making it lazy. Which I guess I could, but not right now. However, we also need a modified <code>decide-index</code> to pull this little trick off. And that's going to be fugly.</p>

<pre>(<span style=\"color: #a020f0;\">defmacro</span> <span style=\"color: #0000ff;\">lookup-index</span> (state <span style=\"color: #228b22;\">&amp;rest</span> indices)
  (<span style=\"color: #a020f0;\">with-gensyms</span> (ix ideal applicable?)
    `(<span style=\"color: #a020f0;\">let</span> ((,ix (index ,state))
           (,ideal))
       ,@(<span style=\"color: #a020f0;\">loop</span> for i in indices 
            for syms = (key-&gt;symbols i)
            collect `(<span style=\"color: #a020f0;\">let</span> ((,applicable? (and ,@syms)))
                       (<span style=\"color: #a020f0;\">when</span> (and (null ,ideal) ,applicable?) (setf ,ideal ,i))
                       (<span style=\"color: #a020f0;\">when</span> (and (indexed? ,ix ,i) ,applicable?)
                         (<span style=\"color: #a020f0;\">return-from</span> decide-index 
                           (values (list ,i ,@syms) ,ideal)))))
       (values nil ,ideal))))

(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">decide-index</span> ((state fact-base) <span style=\"color: #228b22;\">&amp;optional</span> a b c)
  (lookup-index state <span style=\"color: #483d8b;\">:abc</span> <span style=\"color: #483d8b;\">:ab</span> <span style=\"color: #483d8b;\">:ac</span> <span style=\"color: #483d8b;\">:bc</span> <span style=\"color: #483d8b;\">:a</span> <span style=\"color: #483d8b;\">:b</span> <span style=\"color: #483d8b;\">:c</span>))</pre>

<p>Say what you will about imperative programming; it's efficient. That's a single pass over the relevant indices that returns both the least general applicable index, and the ideal index for a given query. Which means we can now profitably compare the two in <code>lookup</code>, which means that our best case is back up to <code>O1</code>, since we don't need to traverse queries for things we've indexed.</p>

<p>With those modifications, I can pull some fancier crap in translating <code>for-all</code> calls into <code>loop</code>s. Specifically, I can do this:</p>

<h3>This</h3>

<pre>(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">goal-&gt;destructuring-form</span> (goal <span style=\"color: #228b22;\">&amp;key</span> (bindings (make-hash-table)))
  (<span style=\"color: #a020f0;\">labels</span> ((rec (elem)
             (<span style=\"color: #a020f0;\">cond</span> ((listp elem)
                    (mapcar #'rec elem))
                   ((or (eq '? elem) (not (variable? elem)))
                    (gensym))
                   ((and (variable? elem) (gethash elem bindings))
                    (gensym))
                   ((variable? elem)
                    (setf (gethash elem bindings) t)
                    elem)
                   (t (<span style=\"color: #ff0000; font-weight: bold;\">error</span> <span style=\"color: #8b2252;\">\"Somethings' up. goal-&gt;destructuring-form~%     ~s~%     ~s~%     ~s\"</span>
                             bindings goal elem)))))
    (mapcar #'rec goal)))

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">goal-&gt;lookup</span> (base goal <span style=\"color: #228b22;\">&amp;key</span> (bindings (make-hash-table)))
  (<span style=\"color: #a020f0;\">flet</span> ((-&gt;ix (elem)
           (<span style=\"color: #a020f0;\">cond</span> ((and (variable? elem) (gethash elem bindings))
                  elem)
                 ((any-variables? elem)
                  nil)
                 (t elem))))
    (<span style=\"color: #a020f0;\">destructuring-bind</span> (a b c) goal
      `(lookup ,base 
               <span style=\"color: #483d8b;\">:a</span> ,(-&gt;ix a) 
               <span style=\"color: #483d8b;\">:b</span> ,(-&gt;ix b)
               <span style=\"color: #483d8b;\">:c</span> ,(-&gt;ix c)))))

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">goal-&gt;or-expression</span> (a b c goal)
  (<span style=\"color: #a020f0;\">flet</span> ((test (term elem) `(equal ,term ,elem)))
    `(and ,(test a (first goal))
          ,(test b (second goal))
          ,(test c (third goal)))))

(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">handle-goals</span> ((goal-type (eql 'and)) base goals collecting)
  (<span style=\"color: #a020f0;\">let</span> ((bindings (make-hash-table)))
    (<span style=\"color: #a020f0;\">labels</span> ((single-goal (destruct lookup tail)
               `(<span style=\"color: #a020f0;\">loop</span> for ,destruct in ,lookup ,@tail))
             (rec (goals)
               <span style=\"color: #b22222;\">;; </span><span style=\"color: #b22222;\">We want to generate the lookups first, 
               ;; because the bindings are going to be generated
               ;; from the result of the lookup. Meaning, if the bindings 
               ;; are established in a given destruct clause,
               ;; they won't be usable until the NEXT lookup.
               ;; Therefore, even though it isn't immediately obvious, 
               ;; order matters in this let* form
</span>
               (<span style=\"color: #a020f0;\">let*</span> ((lookup (goal-&gt;lookup base (first goals) <span style=\"color: #483d8b;\">:bindings</span> bindings))
                      (destruct (goal-&gt;destructuring-form (first goals) <span style=\"color: #483d8b;\">:bindings</span> bindings)))
                 (<span style=\"color: #a020f0;\">if</span> (null (cdr goals))
                     (single-goal destruct lookup `(collect ,collecting))
                     (single-goal destruct lookup `(append ,(rec (rest goals))))))))
      (rec (rest goals)))))

(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">handle-goals</span> (goal-type base goals collecting)
  <span style=\"color: #b22222;\">;; </span><span style=\"color: #b22222;\">Same story here as in handle-goals (eql 'and) method
</span>  (<span style=\"color: #a020f0;\">let*</span> ((bindings (make-hash-table))
         (lookup (goal-&gt;lookup base goals <span style=\"color: #483d8b;\">:bindings</span> bindings))
         (destruct (goal-&gt;destructuring-form goals <span style=\"color: #483d8b;\">:bindings</span> bindings)))
    `(<span style=\"color: #a020f0;\">loop</span> for ,destruct in ,lookup collect ,collecting)))

(<span style=\"color: #a020f0;\">defmacro</span> <span style=\"color: #0000ff;\">for-all</span> (goal-term <span style=\"color: #228b22;\">&amp;key</span> in get)
  (<span style=\"color: #a020f0;\">with-gensyms</span> (base)
    (<span style=\"color: #a020f0;\">let</span> ((template (replace-anonymous (or get `(list ,@(variables-in goal-term))))))
      `(<span style=\"color: #a020f0;\">let</span> ((,base ,in))
         ,(handle-goals (first goal-term) base goal-term template)))))</pre>

<p>We'll go through it in a minute, but the point of these changes is that writing</p>

<pre>(for-all (and (?id <span style=\"color: #483d8b;\">:user</span> ?name) (?id <span style=\"color: #483d8b;\">:time</span> ?time) (?id <span style=\"color: #483d8b;\">:number</span> 62))
         <span style=\"color: #483d8b;\">:in</span> *base* <span style=\"color: #483d8b;\">:get</span> (list ?id ?time ?name))</pre>

<p>should expand directly into something like</p>

<pre>(<span style=\"color: #a020f0;\">LET</span> ((#<span style=\"color: #483d8b;\">:BASE1122</span> *BASE*))
  (<span style=\"color: #a020f0;\">LOOP</span> FOR (?ID #<span style=\"color: #483d8b;\">:G1123</span> ?NAME) 
     IN (LOOKUP #<span style=\"color: #483d8b;\">:BASE1122</span> <span style=\"color: #483d8b;\">:A</span> NIL <span style=\"color: #483d8b;\">:B</span> <span style=\"color: #483d8b;\">:USER</span> <span style=\"color: #483d8b;\">:C</span> NIL)
     APPEND (<span style=\"color: #a020f0;\">LOOP</span> FOR (#<span style=\"color: #483d8b;\">:G1124</span> #<span style=\"color: #483d8b;\">:G1125</span> ?TIME) 
               IN (LOOKUP #<span style=\"color: #483d8b;\">:BASE1122</span> <span style=\"color: #483d8b;\">:A</span> ?ID <span style=\"color: #483d8b;\">:B</span> <span style=\"color: #483d8b;\">:TIME</span> <span style=\"color: #483d8b;\">:C</span> NIL)
               APPEND (<span style=\"color: #a020f0;\">LOOP</span> FOR (#<span style=\"color: #483d8b;\">:G1126</span> #<span style=\"color: #483d8b;\">:G1127</span> #<span style=\"color: #483d8b;\">:G1128</span>) 
                         IN (LOOKUP #<span style=\"color: #483d8b;\">:BASE1122</span> <span style=\"color: #483d8b;\">:A</span> ?ID <span style=\"color: #483d8b;\">:B</span> <span style=\"color: #483d8b;\">:NUMBER</span> <span style=\"color: #483d8b;\">:C</span> 62)
                         COLLECT (LIST ?ID ?TIME ?NAME)))))</pre>

<p>rather than the lazy-ish generator tree from last time. Thanks to our re-structuring of <code>lookup</code>, this is about as efficient as it's going to get without re-jigging goal order. The only edge case we have is what happens if the entire goal is perfectly indexable, except it seems that the programmer would use <code>lookup</code> directly in those situations<a href=\"#foot-Sat-Apr-12-205517EDT-2014\" name=\"note-Sat-Apr-12-205517EDT-2014\">[3]</a>.</p>

<p>On to the code review. Reading. Whatever.</p>

<pre>(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">goal-&gt;destructuring-form</span> (goal <span style=\"color: #228b22;\">&amp;key</span> (bindings (make-hash-table)))
  (<span style=\"color: #a020f0;\">labels</span> ((rec (elem)
             (<span style=\"color: #a020f0;\">cond</span> ((listp elem)
                    (mapcar #'rec elem))
                   ((or (eq '? elem) (not (variable? elem)))
                    (gensym))
                   ((and (variable? elem) (gethash elem bindings))
                    (gensym))
                   ((variable? elem)
                    (setf (gethash elem bindings) t)
                    elem)
                   (t (<span style=\"color: #ff0000; font-weight: bold;\">error</span> <span style=\"color: #8b2252;\">\"Somethings' up. goal-&gt;destructuring-form~%     ~s~%     ~s~%     ~s\"</span>
                             bindings goal elem)))))
    (mapcar #'rec goal)))</pre>

<p>step one of the transformation is to put together the <code>destructuring-form</code> for a particular goal</p>

<pre><span style=\"color: #b22222;\">;;             </span><span style=\"color: #b22222;\">this thing
</span><span style=\"color: #b22222;\">;;          </span><span style=\"color: #b22222;\">vvvvvvvvvvvvvvvvvvv
</span>  (<span style=\"color: #a020f0;\">LOOP</span> FOR (?ID #<span style=\"color: #483d8b;\">:G1123</span> ?NAME) IN (LOOKUP #<span style=\"color: #483d8b;\">:BASE1122</span> <span style=\"color: #483d8b;\">:A</span> NIL <span style=\"color: #483d8b;\">:B</span> <span style=\"color: #483d8b;\">:USER</span> <span style=\"color: #483d8b;\">:C</span> NIL)
...</pre>

<p>In order to do that, we have to replace everything <i>other</i> than variables with <code>gensym</code> calls, but keep the same tree structure. <code>loop</code> does deep destructuring, so we can get away with using this as a pattern-matching strategy. We also need to replace already bound variables from previous <code>destructuring-form</code>s with the same <code>gensym</code> calls so they don't get re-assigned unnecessarily.</p>

<pre>(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">goal-&gt;lookup</span> (base goal <span style=\"color: #228b22;\">&amp;key</span> (bindings (make-hash-table)))
  (<span style=\"color: #a020f0;\">flet</span> ((-&gt;ix (elem)
           (<span style=\"color: #a020f0;\">cond</span> ((and (variable? elem) (gethash elem bindings))
                  elem)
                 ((any-variables? elem)
                  nil)
                 (t elem))))
    (<span style=\"color: #a020f0;\">destructuring-bind</span> (a b c) goal
      `(lookup ,base 
               <span style=\"color: #483d8b;\">:a</span> ,(-&gt;ix a) 
               <span style=\"color: #483d8b;\">:b</span> ,(-&gt;ix b)
               <span style=\"color: #483d8b;\">:c</span> ,(-&gt;ix c)))))</pre>

<p>The next thing we need to put together is a given goals' <code>lookup</code> clause</p>

<pre><span style=\"color: #b22222;\">;;                                       </span><span style=\"color: #b22222;\">this thing
</span><span style=\"color: #b22222;\">;;                                 </span><span style=\"color: #b22222;\">vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
</span>  (<span style=\"color: #a020f0;\">LOOP</span> FOR (?ID #<span style=\"color: #483d8b;\">:G1123</span> ?NAME) IN (LOOKUP #<span style=\"color: #483d8b;\">:BASE1122</span> <span style=\"color: #483d8b;\">:A</span> NIL <span style=\"color: #483d8b;\">:B</span> <span style=\"color: #483d8b;\">:USER</span> <span style=\"color: #483d8b;\">:C</span> NIL)
...</pre>

<p>We're being conservative at the moment, but there's an optimization or two I could still make here. The way we're dealing with these is:</p>

<ol>
  <li>if a given goal-component is a variable, then look it up by its value in the current bindings<a href=\"#foot-Sat-Apr-12-205533EDT-2014\" name=\"note-Sat-Apr-12-205533EDT-2014\">[4]</a></li>
  <li>if a given goal-component is a compound form which <i>contains</i> any variables, don't index by it<a href=\"#foot-Sat-Apr-12-205537EDT-2014\" name=\"note-Sat-Apr-12-205537EDT-2014\">[5]</a></li>
  <li>otherwise, use it as an index</li>
</ol>

<p>Onwards to <code>handle-goal</code>; the real meat of this approach. Lets take a look at how we deal with singleton goals first</p>

<pre>(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">handle-goals</span> (goal-type base goals collecting)
  <span style=\"color: #b22222;\">;; </span><span style=\"color: #b22222;\">Same story here as in handle-goals (eql 'and) method
</span>  (<span style=\"color: #a020f0;\">let*</span> ((bindings (make-hash-table))
         (lookup (goal-&gt;lookup base goals <span style=\"color: #483d8b;\">:bindings</span> bindings))
         (destruct (goal-&gt;destructuring-form goals <span style=\"color: #483d8b;\">:bindings</span> bindings)))
    `(<span style=\"color: #a020f0;\">loop</span> for ,destruct in ,lookup collect ,collecting)))</pre>

<p>Easy, right? grab the results of <code>goal-&gt;lookup</code> and <code>goal-&gt;destructuring-form</code> and stitch them into a <code>loop</code> along with the <code>collecting</code> clause. Nothing fancy here, except for that cryptic note about a different method definition.</p>

<pre>(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">handle-goals</span> ((goal-type (eql 'and)) base goals collecting)
  (<span style=\"color: #a020f0;\">let</span> ((bindings (make-hash-table)))
    (<span style=\"color: #a020f0;\">labels</span> ((single-goal (destruct lookup tail)
               `(<span style=\"color: #a020f0;\">loop</span> for ,destruct in ,lookup ,@tail))
             (rec (goals)
               <span style=\"color: #b22222;\">;; </span><span style=\"color: #b22222;\">We want to generate the lookups first, 
               ;; because the bindings are going to be generated
               ;; from the result of the lookup. Meaning, if the bindings 
               ;; are established in a given destruct clause,
               ;; they won't be usable until the NEXT lookup.
               ;; Therefore, even though it isn't immediately obvious, 
               ;; order matters in this let* form
</span>               (<span style=\"color: #a020f0;\">let*</span> ((lookup (goal-&gt;lookup base (first goals) <span style=\"color: #483d8b;\">:bindings</span> bindings))
                      (destruct (goal-&gt;destructuring-form (first goals) <span style=\"color: #483d8b;\">:bindings</span> bindings)))
                 (<span style=\"color: #a020f0;\">if</span> (null (cdr goals))
                     (single-goal destruct lookup `(collect ,collecting))
                     (single-goal destruct lookup `(append ,(rec (rest goals))))))))
      (rec (rest goals)))))</pre>

<p>And this is the full story<a href=\"#foot-Sat-Apr-12-205604EDT-2014\" name=\"note-Sat-Apr-12-205604EDT-2014\">[6]</a>. Because of the specific way we want <code>lookup</code> and <code>destruct</code> to interact with their containing <code>bindings</code>, their order matters quite a bit. Play around with the macroexpander if you don't quite see it from just the definition.</p>

<p>Anyhow, the way we deal with <code>and</code> goals is by building up a chain of <code>loop</code> forms, each one dealing with a single goal while taking the previous goals into account. All but the last one need to <code>append</code> their results, while the last needs to <code>collect</code> them. The only part we've got left is the now trivial step of putting together the <code>for-all</code> macro interface to the rest of this compilation pipeline<a href=\"#foot-Sat-Apr-12-205609EDT-2014\" name=\"note-Sat-Apr-12-205609EDT-2014\">[7]</a>.</p>

<pre>(<span style=\"color: #a020f0;\">defmacro</span> <span style=\"color: #0000ff;\">for-all</span> (goal-term <span style=\"color: #228b22;\">&amp;key</span> in collecting)
  (<span style=\"color: #a020f0;\">with-gensyms</span> (base)
    (<span style=\"color: #a020f0;\">let</span> ((template (replace-anonymous (or get `(list ,@(variables-in goal-term))))))
      `(<span style=\"color: #a020f0;\">let</span> ((,base ,in))
         ,(handle-goals (first goal-term) base goal-term template)))))</pre>

<p>Tadaah!</p>

<p>I haven't yet put together an equivalent facility for the old <code>apply</code> keyword arg, but because of how we've changed up the underlying code processors, <code>collecting</code> can now trivially handle things like</p>

<pre>(for-all (and (?id <span style=\"color: #483d8b;\">:user</span> ?name) (?id <span style=\"color: #483d8b;\">:time</span> ?time) (?id <span style=\"color: #483d8b;\">:number</span> 62))
         <span style=\"color: #483d8b;\">:in</span> *base* <span style=\"color: #483d8b;\">:collecting</span> (list ?name (+ ?id ?time 62)))</pre>

<p>This concludes the part of this post wherein I talk about implementation details. The rest is just one or two interesting notes about traversals. If you're getting bored, or tired, this is a pretty good break-point for you.</p>

<h3>Traversal Notes</h3>

<p>Near the beginning of this piece, I said</p>

<blockquote>...this is probably the worst way to write this particular query...<span class=\"sig\">-Inaimathi</span></blockquote>

<p>referring to</p>

<pre>(for-all (and (?id <span style=\"color: #483d8b;\">:user</span> ?name) (?id <span style=\"color: #483d8b;\">:time</span> ?time) (?id <span style=\"color: #483d8b;\">:number</span> 62))
         <span style=\"color: #483d8b;\">:in</span> *base* <span style=\"color: #483d8b;\">:get</span> (list ?id ?time ?name))</pre>

<p>and the reason should be fairly obvious now that we know exactly how we go about finding these answers. Remember, the expansion for this form, after compensating for the different keyword argument in our new <code>for-all</code>, is</p>

<pre>(<span style=\"color: #a020f0;\">LET</span> ((#<span style=\"color: #483d8b;\">:BASE1262</span> *BASE*))
  (<span style=\"color: #a020f0;\">LOOP</span> FOR (?ID #<span style=\"color: #483d8b;\">:G1263</span> ?NAME) 
    IN (LOOKUP #<span style=\"color: #483d8b;\">:BASE1262</span> <span style=\"color: #483d8b;\">:A</span> NIL <span style=\"color: #483d8b;\">:B</span> <span style=\"color: #483d8b;\">:USER</span> <span style=\"color: #483d8b;\">:C</span> NIL)
    APPEND (<span style=\"color: #a020f0;\">LOOP</span> FOR (#<span style=\"color: #483d8b;\">:G1264</span> #<span style=\"color: #483d8b;\">:G1265</span> ?TIME) 
              IN (LOOKUP #<span style=\"color: #483d8b;\">:BASE1262</span> <span style=\"color: #483d8b;\">:A</span> ?ID <span style=\"color: #483d8b;\">:B</span> <span style=\"color: #483d8b;\">:TIME</span> <span style=\"color: #483d8b;\">:C</span> NIL)
              APPEND (<span style=\"color: #a020f0;\">LOOP</span> FOR (#<span style=\"color: #483d8b;\">:G1266</span> #<span style=\"color: #483d8b;\">:G1267</span> #<span style=\"color: #483d8b;\">:G1268</span>) 
                        IN (LOOKUP #<span style=\"color: #483d8b;\">:BASE1262</span> <span style=\"color: #483d8b;\">:A</span> ?ID <span style=\"color: #483d8b;\">:B</span> <span style=\"color: #483d8b;\">:NUMBER</span> <span style=\"color: #483d8b;\">:C</span> 62)
                        COLLECT (LIST ?ID ?TIME ?NAME)))))</pre>

<p>and just so that we're perfectly clear on what that means, here's the Lisp-esque pseudo-code</p>

<pre>(for-each goal-1
    append (for-each goal-2 
               append (for-each goal-3
                          collect [some list of components])))</pre>

<p>Now granted, we're aggressively using indices where we can, so we can slice a lot of the constant time out of this equation depending on how often such an operation happens, but <i>no matter</i> how efficiently we slice it, we're going to take a number of steps equal to <code>goal-3 * (goal-2 * goal-1)</code>. That is, we're going <code>On</code> over the candidates for the last goal, for each candidate of the previous goal, for each candidate of the previous goal and so on.</p>

<p>This is why the indices help us a lot. If we couldn't effectively discount swathes of our initial corpus, the performance characteristic would be <code>On^m</code> where <code>n</code> is the size of our fact base and <code>m</code> is the number of goals. Meaning that it behooves us to cut as many candidates as early as possible, since early reductions in our problem space will give us much better returns.</p>

<p>In other words, to paraphrasingly re-iterate Norvig, even though</p>

<pre>(for-all (and (?id <span style=\"color: #483d8b;\">:user</span> ?name) (?id <span style=\"color: #483d8b;\">:time</span> ?time) (?id <span style=\"color: #483d8b;\">:number</span> 62))
         <span style=\"color: #483d8b;\">:in</span> *base* <span style=\"color: #483d8b;\">:get</span> (list ?id ?time ?name))</pre>

<p>and</p>

<pre>(for-all (and (?id <span style=\"color: #483d8b;\">:number</span> 62) (?id <span style=\"color: #483d8b;\">:time</span> ?time) (?id <span style=\"color: #483d8b;\">:user</span> ?name))
         <span style=\"color: #483d8b;\">:in</span> *base* <span style=\"color: #483d8b;\">:get</span> (list ?id ?time ?name))</pre>

<p>are logically equivalent, the latter is going to perform noticeably better, because <code>(?id :number 62)</code> has a much smaller set of candidate facts than <code>(?id :user ?name)</code> in our particular corpus. One interesting exercise, which I'll leave for next time, would be to have <code>for-all</code> try to optimally sort its <code>and</code> goals by putting the smallest candidate lists at the beginning so as to reduce the search-space with no thought required from the user. The above is a trivial example; there's one goal that has more indexable terms in it than the others, so in general<a href=\"#foot-Sat-Apr-12-205638EDT-2014\" name=\"note-Sat-Apr-12-205638EDT-2014\">[8]</a> it will probably yield a smaller candidate list. The real way about this feels like it would be to aggressively index goals at the start of a query and sample their corpus size, then sort on that. Not sure if that would cost more than it buys me though, since it feels like that would get complex fast.</p>

<p>Anyway, like I said, I'll leave it for next time.</p>

<p>If I end up seeing performance issues in the things I'm building out of <a href=\"https://github.com/Inaimathi/fact-base\"><code>fact-base</code></a>.</p>

<p>And I get bored.</p>


<hr />
<h5>Footnotes</h5>
<p>1 - <a href=\"#note-Sat-Apr-12-205143EDT-2014\" name=\"foot-Sat-Apr-12-205143EDT-2014\">[back]</a> - Like this, if you're interested:

<pre>(<span style=\"color: #a020f0;\">defparameter</span> <span style=\"color: #a0522d;\">*base*</span> (make-fact-base <span style=\"color: #483d8b;\">:indices</span> '(<span style=\"color: #483d8b;\">:a</span> <span style=\"color: #483d8b;\">:ab</span> <span style=\"color: #483d8b;\">:abc</span>)))

(<span style=\"color: #a020f0;\">defmethod</span> <span style=\"color: #0000ff;\">test-generate!</span> (n)
  (<span style=\"color: #a020f0;\">loop</span> repeat n
     do (multi-insert! 
         *base* `((<span style=\"color: #483d8b;\">:number</span> ,(random 100)) (<span style=\"color: #483d8b;\">:type</span> <span style=\"color: #483d8b;\">:digit</span>) 
                  (<span style=\"color: #483d8b;\">:time</span> ,(get-universal-time)) 
                  (<span style=\"color: #483d8b;\">:user</span> ,(nth (random 7) '(<span style=\"color: #8b2252;\">\"Inaimathi\"</span> <span style=\"color: #8b2252;\">\"Anon\"</span> <span style=\"color: #8b2252;\">\"Someone Else\"</span> <span style=\"color: #8b2252;\">\"Albert\"</span> <span style=\"color: #8b2252;\">\"Beatrice\"</span> <span style=\"color: #8b2252;\">\"Charles\"</span> <span style=\"color: #8b2252;\">\"Daria\"</span>)))))))

(test-generate! 10000)</pre></p>

<p>2 - <a href=\"#note-Sat-Apr-12-205435EDT-2014\" name=\"foot-Sat-Apr-12-205435EDT-2014\">[back]</a> - Which makes things much simpler for this approach. Hopefully, you'll see why as we go.</p>

<p>3 - <a href=\"#note-Sat-Apr-12-205517EDT-2014\" name=\"foot-Sat-Apr-12-205517EDT-2014\">[back]</a> - and they can, since it's still an <code><span style=\"color: #483d8b;\">:export</span></code>ed symbol itself.</p>

<p>4 - <a href=\"#note-Sat-Apr-12-205533EDT-2014\" name=\"foot-Sat-Apr-12-205533EDT-2014\">[back]</a> - if it has been bound by a previous <code>destructuring-form</code>, it'll be assigned by this point, which means we'll be able to index by it. Otherwise, <code>gethash</code> will return <code>nil</code>, which is exactly what we want.</p>

<p>5 - <a href=\"#note-Sat-Apr-12-205537EDT-2014\" name=\"foot-Sat-Apr-12-205537EDT-2014\">[back]</a> - This is where we could be a bit more efficient, in case you're interested. If we wanted to be very precise about it, we'd say that we <i>could</i> use a compound form with variables as an index, provided that all of its variables have been bound prior to this point in the traversal. I'm leaving it out for now because 

<ul>
  <li>it would further complicate an already tricky chunk of code </li>
  <li>I'm not sure how often this edge case would happen in practice and </li>
  <li>if it <i>does</i> happen, the current result will be a slightly less efficient traversal, which doesn't sound too bad. If the consequence were incorrect results instead, I'd have reconsidered</li>
</ul>
</p>

<p>6 - <a href=\"#note-Sat-Apr-12-205604EDT-2014\" name=\"foot-Sat-Apr-12-205604EDT-2014\">[back]</a> - As an aside, this is the first place I've seen in something like 8 years where a comment is appropriate. It doesn't mirror the code to which it pertains <i>and</i> it explains a non-obvious but necessary facet of the implementation. Usually, I'd either work out some naming scheme that would make the point obvious, or just factor out the chunk of code that needs explanation. There doesn't need to be a simple way of doing either here<a href=\"#foot-Sat-Apr-12-205721EDT-2014\" name=\"note-Sat-Apr-12-205721EDT-2014\">[9]</a>.</p>

<p>7 - <a href=\"#note-Sat-Apr-12-205609EDT-2014\" name=\"foot-Sat-Apr-12-205609EDT-2014\">[back]</a> - And just to highlight this, it <i>is</i> a compilation pipeline. I mentioned this at a semi-Lisp-related meet-up lately, and it's true enough to repeat to the internets: a good way of conceptualizing a Common Lisp macro is as a compiler that takes some Lisp code and emits different Lisp code. Because of the way Lisp is structured, we get the first chunk of an actual compilation pipeline for free, and essentially start with a tokenized input. It's a pretty powerful technique once you get your head around it.</p>

<p>8 - <a href=\"#note-Sat-Apr-12-205638EDT-2014\" name=\"foot-Sat-Apr-12-205638EDT-2014\">[back]</a> - Though not necessarily in plenty of specific cases.</p>

<p>9 - <a href=\"#note-Sat-Apr-12-205721EDT-2014\" name=\"foot-Sat-Apr-12-205721EDT-2014\">[back]</a> - Though I guess I could factor that let out into a <code>with-for-all-forms</code> if it turned out I had to repeat it in many places.</p>
"))
((5202 3723 629233000) :INSERT (175 :POSTED 3606264000))
((5202 3723 629235000) :INSERT (175 :TAG :ALMOST-LITERATE-PROGRAMMING))
((5202 3723 629236000) :INSERT (175 :TAG :COMMON-LISP))
((5202 3723 629238000) :INSERT (175 :TAG :DATABASES))
((5202 3723 629637000) :INSERT (176 :TITLE "cl-notebook Introductory Thoughts"))
((5202 3723 629641000) :INSERT
 (176 :FILE "cl-notebook--introductory-thoughts.html"))
((5202 3723 629645000) :INSERT (176 :EDITED 3610301025))
((5202 3723 629647000) :INSERT
 (176 :BODY "<STYLE TYPE=\"text/css\" MEDIA=\"screen\"><!--
.cm-s-default .cm-keyword {color: #708;}
.cm-s-default .cm-atom {color: #219;}
.cm-s-default .cm-number {color: #164;}
.cm-s-default .cm-def {color: #00f;}
.cm-s-default .cm-variable {color: black;}
.cm-s-default .cm-variable-2 {color: #05a;}
.cm-s-default .cm-variable-3 {color: #085;}
.cm-s-default .cm-property {color: black;}
.cm-s-default .cm-operator {color: black;}
.cm-s-default .cm-comment {color: #a50;}
.cm-s-default .cm-string {color: #a11;}
.cm-s-default .cm-string-2 {color: #f50;}
.cm-s-default .cm-meta {color: #555;}
.cm-s-default .cm-qualifier {color: #555;}
.cm-s-default .cm-builtin {color: #30a;}
.cm-s-default .cm-bracket {color: #997;}
.cm-s-default .cm-tag {color: #170;}
.cm-s-default .cm-attribute {color: #00c;}
.cm-s-default .cm-header {color: blue;}
.cm-s-default .cm-quote {color: #090;}
.cm-s-default .cm-hr {color: #999;}
.cm-s-default .cm-link {color: #00c;}
.cm-s-default .cm-error {color: #f00;}

.result { border: 1px solid #ccc; background-color: #fff; list-style-type: none; margin: 0px; margin-top: 5px; padding: 0px; }
.stdout { margin: 0px; padding: 5px; color: #8b2252; background-color: #efefef; }
.result li { padding: 5px; }
.result .type { color: #228b22; }
.warnings .condition-contents { background-color: #fc6; color: #c60; border: 1px solid #c60; padding: 5px; margin: 5px 0px; }
.result .error { background-color: #fdd; color: #933; }
.condition-contents { list-style-type: none; margin: 0px; padding: 0px; }
.condition-contents .condition-type { font-weight: bolder; }
.condition-contents .condition-property { font-style: oblique; }
.condition-contents .condition-property .label { display: inline-block; margin-right: 5px; font-size: small; }
--></STYLE><p>So it's about time I talked about <a href='https://github.com/Inaimathi/cl-notebook'>this thing</a>, and what the hell exactly I'm thinking. Because I've been working on it for a while, and while it's still kind of buggy, I've already found myself wanting some of the features it has when working with Emacs, or other text editors I've had to work with.</p><h3>Notebooks</h3><p>Actually, before I get to that, a little exposition. As far as I know, notebook-style editors already exist for <a href='http://ipython.org/notebook.html'>Python</a>, <a href='https://github.com/ramnathv/rNotebook'>R</a>, and <a href='http://gorilla-repl.org/index.html'>Clojure</a>. And a second one for <a href='https://github.com/kovasb/session'>Clojure</a>. The general idea is to have a web-based interface, with code being divided into small, re-arrangable chunks called <code>cells</code>, each of which are associated with their evluation results. Some cells are code in whichever language the notebook supports, others are just prose, usually in <code>markdown</code>. The idea is that you get a dynamic environment that lets you selectively evaluate small chunklets of code, and intersperse relevant documentation in the form of prose and tests.</p><p>As someone who's been eyeing <a href='http://literateprogramming.com/'>literate programming techniques</a> for a while, this predictably appeals to me. So I've built my own, for my language of choice.</p><h3><code>cl-notebook</code></h3><p>You can find it at the other end of <a href='https://github.com/Inaimathi/cl-notebook'>that github link I start out with</a>. Last time I <a href='/article?name=housekeeping.html'>mentioned this project</a> in passing, I noted that the ultimate goal was replacing Emacs as my Common Lisp IDE of choice, and that's no small task. Despite the existence of <a href='https://github.com/achengs/subpar'><code>subpar</code></a>, I don't have proper s-expression navigation yet, and I haven't wired up proper auto-completion or argument hinting yet, and there's a bunch of other stuff I still want to build, ranging from the necessary to the frivolous. On the whole, I think I'm on the right track, because certain things are somewhat easier here, and because there are some features that I find myself missing when I hop back into <code>emacs</code>.</p><p>Lets just get those out of the way right now, actually. Firstly, I get to program in my browser, which is surprisingly elegant once I hop into full-screen mode. It lets me tab over to search for relevant links to talk about, and since my browser can be set to start up with previously open tabs, I get to resume editing exactly where I was in a later session. Secondly, because of the <a href='https://github.com/Inaimathi/fact-base'>back-end storage system I'm using</a>, I get to have a running history of all the edits I've ever made, which is updated every time I evaluate a cell (I'm working on having it implicitly updated every so often between evaluations, but don't have that part checked in). Thirdly, I've got exporters wired up that let me put together a book, then export it as an HTML page, or as a <code>.lisp</code> file. And I'm planning to add two more, one to just extract tests and a second to just hand me an executable from the given book.</p><p>The first one is minor, and makes it all the easier to randomly check my email or github notifications, so pros and cons. The third could concievably be wired together in Emacs. The second one is huge. I don't know about you, but I've been programmed to hit <code>save</code> every few seconds in whatever editor I've got open just because crashes happen, and I don't want them to be too painful. I guess I could have wired up <code>emacs</code> to do that every so often, but it sounds fiddly as hell. You don't particularly <i>want</i> a standard editor saving every three seconds or so; you might be in the middle of an edit the currently keyed-in part of which doesn't make sense by itself, and most editors 'save' by <i>overwriting your existing file</i>. Which is exactly what you don't want when you've got an unfinished code edit. Hopefully, adding total-history retention to the equation softens the blow.</p><h3>Core Concepts</h3><p>Code is organized into <code>book</code>s. Each <code>book</code> is the complete history of a bunch of <code>cell</code>s. A <code>cell</code> can contain <code>code</code>, <code>tests</code>, or <code>markup</code> in a particular language (currently just Common Lisp, but given how many languages I blog about, it'll probably need at least highlighting support for a few more). The cells' language and type impacts the evaluation approach we take on the back end, as well as which exports it appears in, and in what form. Specifically, <code>common-lisp/markup</code> cells are evaluated as <code>:cl-who</code> forms, don't appear in <code>.lisp</code> exports and only contribute their results to an <code>.html</code> export. By contrast <code>common-lisp/code</code> is straight up evaluated (capturing warnings, errors and standard-output), contribute their contents to <code>.lisp</code> exports, and both their contents and results to <code>.html</code> exports.</p><p>In addition to a type, language and id, a cell has a <code>contents</code>, <code>result</code>, and a <code>noise</code>. The contents is what the user has typed in, the result is what that contents evaluates to and the noise dictates how the results are displayed. This is a <code>normal</code> cell:</p><pre class=\"cm-s-default\"><span class=\"cm-bracket\">(</span><span class=\"cm-variable\">+</span> <span class=\"cm-number\">1</span> <span class=\"cm-number\">2</span><span class=\"cm-bracket\">)</span>
<span class=\"cm-bracket\">(</span><span class=\"cm-variable\">+</span> <span class=\"cm-number\">2</span> <span class=\"cm-number\">3</span><span class=\"cm-bracket\">)</span>
<span class=\"cm-bracket\">(</span><span class=\"cm-variable\">format</span> <span class=\"cm-string-2\">t</span> <span class=\"cm-string\">\"Testing \"</span><span class=\"cm-bracket\">)</span>
<span class=\"cm-bracket\">(</span><span class=\"cm-variable\">+</span> <span class=\"cm-number\">3</span> <span class=\"cm-number\">4</span><span class=\"cm-bracket\">)</span>
<span class=\"cm-bracket\">(</span><span class=\"cm-variable\">format</span> <span class=\"cm-string-2\">t</span> <span class=\"cm-string\">\"testing\"</span><span class=\"cm-bracket\">)</span>
<span class=\"cm-bracket\">(</span><span class=\"cm-variable\">format</span> <span class=\"cm-string-2\">t</span> <span class=\"cm-string\">\". One two.~%\"</span><span class=\"cm-bracket\">)</span>
<span class=\"cm-bracket\">(</span><span class=\"cm-variable\">format</span> <span class=\"cm-string-2\">t</span> <span class=\"cm-string\">\"Testing.\"</span><span class=\"cm-bracket\">)</span>
<span class=\"cm-bracket\">(</span><span class=\"cm-variable\">+</span> <span class=\"cm-number\">4</span> <span class=\"cm-number\">5</span><span class=\"cm-bracket\">)</span></pre><pre><p onclick=\"selectContents(event, this)\" class=\"stdout\">Testing testing. One two.
Testing.</p><span onclick=\"selectContents(event, this)\" class=\"warnings\"></span><ul onclick=\"selectContents(event, this)\" class=\"result\"><li><span class=\"value\">9</span><span class=\"type\"> :: integer</span></li></ul></pre><p>This is the same cell with a <code>noise</code> of <code>verbose</code>: </p><pre class=\"cm-s-default\"><span class=\"cm-bracket\">(</span><span class=\"cm-variable\">+</span> <span class=\"cm-number\">1</span> <span class=\"cm-number\">2</span><span class=\"cm-bracket\">)</span>
<span class=\"cm-bracket\">(</span><span class=\"cm-variable\">+</span> <span class=\"cm-number\">2</span> <span class=\"cm-number\">3</span><span class=\"cm-bracket\">)</span>
<span class=\"cm-bracket\">(</span><span class=\"cm-variable\">format</span> <span class=\"cm-string-2\">t</span> <span class=\"cm-string\">\"Testing \"</span><span class=\"cm-bracket\">)</span>
<span class=\"cm-bracket\">(</span><span class=\"cm-variable\">+</span> <span class=\"cm-number\">3</span> <span class=\"cm-number\">4</span><span class=\"cm-bracket\">)</span>
<span class=\"cm-bracket\">(</span><span class=\"cm-variable\">format</span> <span class=\"cm-string-2\">t</span> <span class=\"cm-string\">\"testing\"</span><span class=\"cm-bracket\">)</span>
<span class=\"cm-bracket\">(</span><span class=\"cm-variable\">format</span> <span class=\"cm-string-2\">t</span> <span class=\"cm-string\">\". One two.~%\"</span><span class=\"cm-bracket\">)</span>
<span class=\"cm-bracket\">(</span><span class=\"cm-variable\">format</span> <span class=\"cm-string-2\">t</span> <span class=\"cm-string\">\"Testing.\"</span><span class=\"cm-bracket\">)</span>
<span class=\"cm-bracket\">(</span><span class=\"cm-variable\">+</span> <span class=\"cm-number\">4</span> <span class=\"cm-number\">5</span><span class=\"cm-bracket\">)</span></pre><pre><ul onclick=\"selectContents(event, this)\" class=\"result\"><li><span class=\"value\">3</span><span class=\"type\"> :: integer</span></li></ul><ul onclick=\"selectContents(event, this)\" class=\"result\"><li><span class=\"value\">5</span><span class=\"type\"> :: integer</span></li></ul><p onclick=\"selectContents(event, this)\" class=\"stdout\">Testing </p><ul onclick=\"selectContents(event, this)\" class=\"result\"><li><span class=\"value\">NIL</span><span class=\"type\"> :: null</span></li></ul><ul onclick=\"selectContents(event, this)\" class=\"result\"><li><span class=\"value\">7</span><span class=\"type\"> :: integer</span></li></ul><p onclick=\"selectContents(event, this)\" class=\"stdout\">testing</p><ul onclick=\"selectContents(event, this)\" class=\"result\"><li><span class=\"value\">NIL</span><span class=\"type\"> :: null</span></li></ul><p onclick=\"selectContents(event, this)\" class=\"stdout\">. One two.
</p><ul onclick=\"selectContents(event, this)\" class=\"result\"><li><span class=\"value\">NIL</span><span class=\"type\"> :: null</span></li></ul><p onclick=\"selectContents(event, this)\" class=\"stdout\">Testing.</p><ul onclick=\"selectContents(event, this)\" class=\"result\"><li><span class=\"value\">NIL</span><span class=\"type\"> :: null</span></li></ul><ul onclick=\"selectContents(event, this)\" class=\"result\"><li><span class=\"value\">9</span><span class=\"type\"> :: integer</span></li></ul></pre><p>And again with <code>terse</code></p><pre class=\"cm-s-default\"><span class=\"cm-bracket\">(</span><span class=\"cm-variable\">+</span> <span class=\"cm-number\">1</span> <span class=\"cm-number\">2</span><span class=\"cm-bracket\">)</span>
<span class=\"cm-bracket\">(</span><span class=\"cm-variable\">+</span> <span class=\"cm-number\">2</span> <span class=\"cm-number\">3</span><span class=\"cm-bracket\">)</span>
<span class=\"cm-bracket\">(</span><span class=\"cm-variable\">format</span> <span class=\"cm-string-2\">t</span> <span class=\"cm-string\">\"Testing \"</span><span class=\"cm-bracket\">)</span>
<span class=\"cm-bracket\">(</span><span class=\"cm-variable\">+</span> <span class=\"cm-number\">3</span> <span class=\"cm-number\">4</span><span class=\"cm-bracket\">)</span>
<span class=\"cm-bracket\">(</span><span class=\"cm-variable\">format</span> <span class=\"cm-string-2\">t</span> <span class=\"cm-string\">\"testing\"</span><span class=\"cm-bracket\">)</span>
<span class=\"cm-bracket\">(</span><span class=\"cm-variable\">format</span> <span class=\"cm-string-2\">t</span> <span class=\"cm-string\">\". One two.~%\"</span><span class=\"cm-bracket\">)</span>
<span class=\"cm-bracket\">(</span><span class=\"cm-variable\">format</span> <span class=\"cm-string-2\">t</span> <span class=\"cm-string\">\"Testing.\"</span><span class=\"cm-bracket\">)</span>
<span class=\"cm-bracket\">(</span><span class=\"cm-variable\">+</span> <span class=\"cm-number\">4</span> <span class=\"cm-number\">5</span><span class=\"cm-bracket\">)</span></pre><pre><ul onclick=\"selectContents(event, this)\" class=\"result\"><li><span class=\"value\">9</span><span class=\"type\"> :: integer</span></li></ul></pre><p>There's also a <code>silent</code> setting which lets you ignore the evaluation result entirely.</p><p>You can edit a cell (changing its contents), evaluate it (changing its result) delete it, change any of its mentioned properties, or change the order of cells in a notebook. Each of these is an event that gets initiated by a <code>POST</code> request and gets completed with an  <code>event-stream</code> message to any listening front-ends (which means I'll relatively easily be able to make this a multi-user editor when I get to that point). Enough low level stuff, here's an example.</p><h3>Example</h3><p>This is a piece of code I actually wrote using <code>cl-notebook</code>.</p><hr /><p>A parameter is a thing that starts with <code>#-</code>. It might be nullary or unary. A parameter followed by a parameter or an empty list is interpreted as nullary. A parameter followed by a non-parameter is unary. Command line args are more complicated in the general case, but not in <code>cl-notebook</code></p><pre class=\"cm-s-default\"><span class=\"cm-bracket\">(</span><span class=\"cm-def\">defun</span> <span class=\"cm-variable\">parse-args!</span> <span class=\"cm-bracket\">(</span><span class=\"cm-variable\">raw</span><span class=\"cm-bracket\">)</span>
   <span class=\"cm-bracket\">(</span><span class=\"cm-variable\">pop</span> <span class=\"cm-variable\">raw</span><span class=\"cm-bracket\">)</span>
   <span class=\"cm-bracket\">(</span><span class=\"cm-def\">flet</span> <span class=\"cm-bracket\">(</span><span class=\"cm-bracket\">(</span><span class=\"cm-variable\">param?</span> <span class=\"cm-bracket\">(</span><span class=\"cm-variable\">str</span><span class=\"cm-bracket\">)</span> <span class=\"cm-bracket\">(</span><span class=\"cm-variable\">eql</span> <span class=\"cm-error\">#\\</span><span class=\"cm-variable\">-</span> <span class=\"cm-bracket\">(</span><span class=\"cm-variable\">first-char</span> <span class=\"cm-variable\">str</span><span class=\"cm-bracket\">)</span><span class=\"cm-bracket\">)</span><span class=\"cm-bracket\">)</span>
          <span class=\"cm-bracket\">(</span><span class=\"cm-variable\">-&gt;param</span> <span class=\"cm-bracket\">(</span><span class=\"cm-variable\">str</span><span class=\"cm-bracket\">)</span> <span class=\"cm-bracket\">(</span><span class=\"cm-variable\">intern</span> <span class=\"cm-bracket\">(</span><span class=\"cm-variable\">string-upcase</span> <span class=\"cm-bracket\">(</span><span class=\"cm-variable\">string-left-trim</span> <span class=\"cm-string\">\"-\"</span> <span class=\"cm-variable\">str</span><span class=\"cm-bracket\">)</span><span class=\"cm-bracket\">)</span> <span class=\"cm-keyword\">:keyword</span><span class=\"cm-bracket\">)</span><span class=\"cm-bracket\">)</span>
          <span class=\"cm-bracket\">(</span><span class=\"cm-variable\">-&gt;arg</span> <span class=\"cm-bracket\">(</span><span class=\"cm-variable\">str</span><span class=\"cm-bracket\">)</span> <span class=\"cm-bracket\">(</span><span class=\"cm-variable\">or</span> <span class=\"cm-bracket\">(</span><span class=\"cm-variable\">parse-integer</span> <span class=\"cm-variable\">str</span> <span class=\"cm-keyword\">:junk-allowed</span> <span class=\"cm-string-2\">t</span><span class=\"cm-bracket\">)</span> <span class=\"cm-variable\">str</span><span class=\"cm-bracket\">)</span><span class=\"cm-bracket\">)</span><span class=\"cm-bracket\">)</span>
      <span class=\"cm-bracket\">(</span><span class=\"cm-builtin\">loop</span> <span class=\"cm-builtin\">for</span> <span class=\"cm-variable\">next</span> <span class=\"cm-variable\">=</span> <span class=\"cm-bracket\">(</span><span class=\"cm-variable\">pop</span> <span class=\"cm-variable\">raw</span><span class=\"cm-bracket\">)</span> <span class=\"cm-variable\">while</span> <span class=\"cm-variable\">next</span>
            <span class=\"cm-variable\">if</span> <span class=\"cm-bracket\">(</span><span class=\"cm-variable\">and</span> <span class=\"cm-bracket\">(</span><span class=\"cm-variable\">param?</span> <span class=\"cm-variable\">next</span><span class=\"cm-bracket\">)</span> <span class=\"cm-bracket\">(</span><span class=\"cm-variable\">or</span> <span class=\"cm-bracket\">(</span><span class=\"cm-variable\">not</span> <span class=\"cm-variable\">raw</span><span class=\"cm-bracket\">)</span> <span class=\"cm-bracket\">(</span><span class=\"cm-variable\">param?</span> <span class=\"cm-bracket\">(</span><span class=\"cm-variable\">car</span> <span class=\"cm-variable\">raw</span><span class=\"cm-bracket\">)</span><span class=\"cm-bracket\">)</span><span class=\"cm-bracket\">)</span><span class=\"cm-bracket\">)</span>
              <span class=\"cm-variable\">collect</span> <span class=\"cm-bracket\">(</span><span class=\"cm-variable\">cons</span> <span class=\"cm-bracket\">(</span><span class=\"cm-variable\">-&gt;param</span> <span class=\"cm-variable\">next</span><span class=\"cm-bracket\">)</span> <span class=\"cm-string-2\">t</span><span class=\"cm-bracket\">)</span> <span class=\"cm-variable\">into</span> <span class=\"cm-variable\">params</span>
            <span class=\"cm-variable\">else</span> <span class=\"cm-variable\">if</span> <span class=\"cm-bracket\">(</span><span class=\"cm-variable\">param?</span> <span class=\"cm-variable\">next</span><span class=\"cm-bracket\">)</span>
              <span class=\"cm-variable\">collect</span> <span class=\"cm-bracket\">(</span><span class=\"cm-variable\">cons</span> <span class=\"cm-bracket\">(</span><span class=\"cm-variable\">-&gt;param</span> <span class=\"cm-variable\">next</span><span class=\"cm-bracket\">)</span> <span class=\"cm-bracket\">(</span><span class=\"cm-variable\">-&gt;arg</span> <span class=\"cm-bracket\">(</span><span class=\"cm-variable\">pop</span> <span class=\"cm-variable\">raw</span><span class=\"cm-bracket\">)</span><span class=\"cm-bracket\">)</span><span class=\"cm-bracket\">)</span> <span class=\"cm-variable\">into</span> <span class=\"cm-variable\">params</span>
            <span class=\"cm-variable\">else</span> <span class=\"cm-variable\">collect</span> <span class=\"cm-variable\">next</span> <span class=\"cm-variable\">into</span> <span class=\"cm-variable\">args</span>
            <span class=\"cm-variable\">finally</span> <span class=\"cm-bracket\">(</span><span class=\"cm-variable\">return</span> <span class=\"cm-bracket\">(</span><span class=\"cm-variable\">values</span> <span class=\"cm-variable\">params</span> <span class=\"cm-variable\">args</span><span class=\"cm-bracket\">)</span><span class=\"cm-bracket\">)</span><span class=\"cm-bracket\">)</span><span class=\"cm-bracket\">)</span><span class=\"cm-bracket\">)</span>

<span class=\"cm-bracket\">(</span><span class=\"cm-def\">defun</span> <span class=\"cm-variable\">get-param</span> <span class=\"cm-bracket\">(</span><span class=\"cm-variable\">names</span> <span class=\"cm-variable\">params</span><span class=\"cm-bracket\">)</span> 
  <span class=\"cm-bracket\">(</span><span class=\"cm-builtin\">loop</span> <span class=\"cm-builtin\">for</span> <span class=\"cm-bracket\">(</span><span class=\"cm-variable\">a</span> . <span class=\"cm-variable\">b</span><span class=\"cm-bracket\">)</span> <span class=\"cm-builtin\">in</span> <span class=\"cm-variable\">params</span> 
     <span class=\"cm-variable\">if</span> <span class=\"cm-bracket\">(</span><span class=\"cm-variable\">member</span> <span class=\"cm-variable\">a</span> <span class=\"cm-variable\">names</span><span class=\"cm-bracket\">)</span> <span class=\"cm-builtin\">do</span> <span class=\"cm-bracket\">(</span><span class=\"cm-variable\">return</span> <span class=\"cm-variable\">b</span><span class=\"cm-bracket\">)</span><span class=\"cm-bracket\">)</span><span class=\"cm-bracket\">)</span></pre><pre><ul onclick=\"selectContents(event, this)\" class=\"result\"><li><span class=\"value\">GET-PARAM</span><span class=\"type\"> :: symbol</span></li></ul></pre><pre class=\"cm-s-default\"><span class=\"cm-bracket\">(</span><span class=\"cm-variable\">parse-args!</span> <span class=\"cm-atom\">'</span><span class=\"cm-bracket\">(</span><span class=\"cm-string\">\"./prog-name\"</span> <span class=\"cm-string\">\"-f\"</span> <span class=\"cm-string\">\"-h\"</span> <span class=\"cm-string\">\"something\"</span><span class=\"cm-bracket\">)</span><span class=\"cm-bracket\">)</span>
<span class=\"cm-bracket\">(</span><span class=\"cm-variable\">parse-args!</span> <span class=\"cm-atom\">'</span><span class=\"cm-bracket\">(</span><span class=\"cm-string\">\"./prog-name\"</span> <span class=\"cm-string\">\"a\"</span> <span class=\"cm-string\">\"b\"</span> <span class=\"cm-string\">\"c\"</span> <span class=\"cm-string\">\"d\"</span><span class=\"cm-bracket\">)</span><span class=\"cm-bracket\">)</span>
<span class=\"cm-bracket\">(</span><span class=\"cm-variable\">parse-args!</span> <span class=\"cm-atom\">'</span><span class=\"cm-bracket\">(</span><span class=\"cm-string\">\"./prog-name\"</span> <span class=\"cm-string\">\"-p\"</span> <span class=\"cm-string\">\"4040\"</span><span class=\"cm-bracket\">)</span><span class=\"cm-bracket\">)</span>

<span class=\"cm-bracket\">(</span><span class=\"cm-variable\">get-param</span> <span class=\"cm-atom\">'</span><span class=\"cm-bracket\">(</span><span class=\"cm-keyword\">:f</span> <span class=\"cm-keyword\">:force</span><span class=\"cm-bracket\">)</span> <span class=\"cm-bracket\">(</span><span class=\"cm-variable\">parse-args!</span> <span class=\"cm-atom\">'</span><span class=\"cm-bracket\">(</span><span class=\"cm-string\">\"./prog-name\"</span> <span class=\"cm-string\">\"-f\"</span> <span class=\"cm-string\">\"-h\"</span> <span class=\"cm-string\">\"something\"</span><span class=\"cm-bracket\">)</span><span class=\"cm-bracket\">)</span><span class=\"cm-bracket\">)</span>
<span class=\"cm-bracket\">(</span><span class=\"cm-variable\">get-param</span> <span class=\"cm-atom\">'</span><span class=\"cm-bracket\">(</span><span class=\"cm-keyword\">:p</span> <span class=\"cm-keyword\">:port</span><span class=\"cm-bracket\">)</span> <span class=\"cm-bracket\">(</span><span class=\"cm-variable\">parse-args!</span> <span class=\"cm-atom\">'</span><span class=\"cm-bracket\">(</span><span class=\"cm-string\">\"./prog-name\"</span> <span class=\"cm-string\">\"-p\"</span> <span class=\"cm-string\">\"4040\"</span><span class=\"cm-bracket\">)</span><span class=\"cm-bracket\">)</span><span class=\"cm-bracket\">)</span>
<span class=\"cm-bracket\">(</span><span class=\"cm-variable\">get-param</span> <span class=\"cm-atom\">'</span><span class=\"cm-bracket\">(</span><span class=\"cm-keyword\">:p</span> <span class=\"cm-keyword\">:port</span><span class=\"cm-bracket\">)</span> <span class=\"cm-bracket\">(</span><span class=\"cm-variable\">parse-args!</span> <span class=\"cm-atom\">'</span><span class=\"cm-bracket\">(</span><span class=\"cm-string\">\"./prog-name\"</span> <span class=\"cm-string\">\"--port\"</span> <span class=\"cm-string\">\"4040\"</span><span class=\"cm-bracket\">)</span><span class=\"cm-bracket\">)</span><span class=\"cm-bracket\">)</span>
<span class=\"cm-bracket\">(</span><span class=\"cm-variable\">get-param</span> <span class=\"cm-atom\">'</span><span class=\"cm-bracket\">(</span><span class=\"cm-keyword\">:p</span> <span class=\"cm-keyword\">:port</span><span class=\"cm-bracket\">)</span> <span class=\"cm-bracket\">(</span><span class=\"cm-variable\">parse-args!</span> <span class=\"cm-atom\">'</span><span class=\"cm-bracket\">(</span><span class=\"cm-string\">\"./prog-name\"</span> <span class=\"cm-string\">\"--frob\"</span> <span class=\"cm-string\">\"4040\"</span><span class=\"cm-bracket\">)</span><span class=\"cm-bracket\">)</span><span class=\"cm-bracket\">)</span></pre><pre><ul onclick=\"selectContents(event, this)\" class=\"result\"><li><span class=\"value\">((:F . T) (:H . \"something\"))</span><span class=\"type\"> :: cons</span></li><li><span class=\"value\">NIL</span><span class=\"type\"> :: null</span></li></ul><ul onclick=\"selectContents(event, this)\" class=\"result\"><li><span class=\"value\">NIL</span><span class=\"type\"> :: null</span></li><li><span class=\"value\">(\"a\" \"b\" \"c\" \"d\")</span><span class=\"type\"> :: cons</span></li></ul><ul onclick=\"selectContents(event, this)\" class=\"result\"><li><span class=\"value\">((:P . 4040))</span><span class=\"type\"> :: cons</span></li><li><span class=\"value\">NIL</span><span class=\"type\"> :: null</span></li></ul><ul onclick=\"selectContents(event, this)\" class=\"result\"><li><span class=\"value\">T</span><span class=\"type\"> :: boolean</span></li></ul><ul onclick=\"selectContents(event, this)\" class=\"result\"><li><span class=\"value\">4040</span><span class=\"type\"> :: integer</span></li></ul><ul onclick=\"selectContents(event, this)\" class=\"result\"><li><span class=\"value\">4040</span><span class=\"type\"> :: integer</span></li></ul><ul onclick=\"selectContents(event, this)\" class=\"result\"><li><span class=\"value\">NIL</span><span class=\"type\"> :: null</span></li></ul></pre><hr /><p>It's a small utility function for parsing command line arguments in <code>:cl-notebook</code>. You can see all the relevant features on display there; it starts with some documentation prose in a <code>markup</code> cell, has definitions in a <code>code</code> cell, and finally a bunch of example invocations of each thing in a <code>tests</code> cell. They're not <i>really</i> tests, because they don't encode my assumptions about the return values of those calls, but you could imagine them doing so. The point is, they won't be part of a <code>.lisp</code> export, but <i>will</i> show up in an <code>html</code> export like this one.</p><p>That's it for the introductory thoughts. I'll try to gather some insights into such editors into the next piece I put together. And I'll continue dogfooding until it gets good enough to call \"delicious\".</p>
"))
((5202 3723 629828000) :INSERT (176 :POSTED 3606955200))
((5202 3723 629829000) :INSERT (176 :TAG :CL-NOTEBOOK))
((5202 3723 629831000) :INSERT (176 :TAG :COMMON-LISP))
((5202 3723 629833000) :INSERT (176 :TAG :PROGRAMMING-ENVIRONMENT))
((5202 3723 629834000) :INSERT (176 :TAG :PROGRAMMING-INTERFACES))
((5202 3723 630074000) :INSERT (177 :TITLE "cl-notebook Thoughts"))
((5202 3723 630078000) :INSERT (177 :FILE "cl-notebook-thoughts.html"))
((5202 3723 630080000) :INSERT (177 :EDITED 3610140607))
((5202 3723 630082000) :INSERT
 (177 :BODY "<STYLE TYPE=\"text/css\" MEDIA=\"screen\"><!--
.cm-s-default .cm-keyword {color: #708;}
.cm-s-default .cm-atom {color: #219;}
.cm-s-default .cm-number {color: #164;}
.cm-s-default .cm-def {color: #00f;}
.cm-s-default .cm-variable {color: black;}
.cm-s-default .cm-variable-2 {color: #05a;}
.cm-s-default .cm-variable-3 {color: #085;}
.cm-s-default .cm-property {color: black;}
.cm-s-default .cm-operator {color: black;}
.cm-s-default .cm-comment {color: #a50;}
.cm-s-default .cm-string {color: #a11;}
.cm-s-default .cm-string-2 {color: #f50;}
.cm-s-default .cm-meta {color: #555;}
.cm-s-default .cm-qualifier {color: #555;}
.cm-s-default .cm-builtin {color: #30a;}
.cm-s-default .cm-bracket {color: #997;}
.cm-s-default .cm-tag {color: #170;}
.cm-s-default .cm-attribute {color: #00c;}
.cm-s-default .cm-header {color: blue;}
.cm-s-default .cm-quote {color: #090;}
.cm-s-default .cm-hr {color: #999;}
.cm-s-default .cm-link {color: #00c;}
.cm-s-default .cm-error {color: #f00;}

.result { border: 1px solid #ccc; background-color: #fff; list-style-type: none; margin: 0px; margin-top: 5px; padding: 0px; }
.stdout { margin: 0px; padding: 5px; color: #8b2252; background-color: #efefef; }
.result li { padding: 5px; }
.result .type { color: #228b22; }
.warnings .condition-contents { background-color: #fc6; color: #c60; border: 1px solid #c60; padding: 5px; margin: 5px 0px; }
.result .error { background-color: #fdd; color: #933; }
.condition-contents { list-style-type: none; margin: 0px; padding: 0px; }
.condition-contents .condition-type { font-weight: bolder; }
.condition-contents .condition-property { font-style: oblique; }
.condition-contents .condition-property .label { display: inline-block; margin-right: 5px; font-size: small; }
--></STYLE><p>No nuts and bolts this time. Here's a random collection of insights I've had while trying to put together the version 0.1 of a notebook style editor:</p><h3>Being async Pays</h3><p>My initial assumption was that evaluation would be an inline thing. That is, you send out a <code>POST</code> request, that code is evaluated synchronously, saved out to your fact base, and the HTTP response consists of that evaluated result which you can then display prettily on the front-end. Turns out that's a big fat no. Even discounting any issues with the Common Lisp return model, and the eventual attempt at making this a multi-user editor, the synchronous approach doesn't quite work. Which I found out the first time I accidentally wrote a <code>loop</code> without the required <code>while</code>. Something like</p><pre class=\"cm-s-default\"><span class=\"cm-bracket\">(</span><span class=\"cm-builtin\">loop</span> <span class=\"cm-builtin\">for</span> <span class=\"cm-variable\">next</span> <span class=\"cm-variable\">=</span> <span class=\"cm-bracket\">(</span><span class=\"cm-variable\">pop</span> <span class=\"cm-variable\">stack</span><span class=\"cm-bracket\">)</span> <span class=\"cm-builtin\">do</span> <span class=\"cm-bracket\">(</span><span class=\"cm-variable\">something-to-next</span><span class=\"cm-bracket\">)</span><span class=\"cm-bracket\">)</span></pre><p>The trouble should be obvious. That's the sort of computation that you want off in its own isolated thread. And you want to be able to kill that thread if it turns out to be as boneheaded a mistake as that was, which means that you have to notify the front-end of computations in progress, go off and perform it, then notify the front-end again when you're done. And that's not something you can do synchronously.</p><p>In the end, I end up spawning a single tracked thread to do the work of evaluation. I notify the front-ends when it begins work, and then again when it completes. At any point in between, a front-end can send a termination signal to kill that thread rather than waiting it out to completion. You can see the implementation <a href='https://github.com/Inaimathi/cl-notebook/blob/master/cl-notebook.lisp#L51-L70'>here</a>, <a href='https://github.com/Inaimathi/cl-notebook/blob/master/cl-notebook.lisp#L162-L163'>here</a>, and <a href='https://github.com/Inaimathi/cl-notebook/blob/master/cl-notebook.lisp#L126-L131'>here</a>. This will <i>entirely</i> coincidentally make it much easier to extend <code>cl-notebook</code> to a multi-user editor later.</p><h3>Being surgical pays. Sometimes. Not in the way you'd think.</h3><p>The first version of this editor basically spat out the complete current notebook state at the front-end on each action, and the front-end re-drew <i>the entire thing</i> on every change. You'd think that the sheer inefficiency of this approach would get to me, but you'd be wrong. It was actually fast enough that had performance been the only factor, I'd have left it at that. The problem with that approach is that you end up clobbering giant chunks of client-side state each time. In particular, re-drawing every cell (and hence, re-initializing each of their <code>CodeMirror</code> instances) meant that I was blowing away undo information for each editor window every time <i>anything</i> happened. And that's annoying as fuck. I'm not sure anyone's formalized the point into a commandment yet, but you really should act as though they have: Thou Shalt Not Mangle Thy Clients' Data. That applies no matter how temporary the data is. Even if your job is to take said data and transform it in some way, say for instance by evaluating it, you should do so with a copy instead of a destructive change. And even when you absolutely <i>must</i> be destructive, be as selectively destructive as you possibly can.</p><h3>Thinking About Space Doesn't Pay. No, not even that much.</h3><p>I almost left this one out entirely because it seemed so self-evident, but on reflection, it's something I've had to learn too. Space doesn't even begin to matter for systems like this. I'm talking both about memory and about disk space. Yes, there are some applications for which this is not the case, but it's true as a rule.</p><p>The <code>fact-base</code> project in particular has been sticking in my craw in this sense. I kept thinking things like 'Holy shit, I'm keeping history for every cell, on every edit forever. This is going to be huge! I'll have to figure out a way to condense these files, or start them off from a non-zero state so that I can throw out history at some point!'</p><p>Completely pointless.</p><p>At the beginning of the <code>cl-notebook</code> effort, I started a scratch file which I've been steadily editing, putting through various save/auto-save tests and just all round mauling with updates. This thing has been around for months at this point, and it's taken much harder beatings than the average notebook ever will. Wanna know what its current total size is?</p><pre>inaimathi@self:~/.cl-notebook/books$ ls -lh base-zg1mm23z
-rw-r--r-- 1 inaimathi inaimathi 675K Apr 20 21:47 base-zg1mm23z
inaimathi@self:~/.cl-notebook/books$</pre><p>That's smaller than many Word and PDF documents I've worked with, and those don't bother keeping my entire editing history around. So I figure I can get away with treating disk space as if it were infinite for my purposes. Absolute worst case scenario, I'll compress it. And since I'm dealing with plaintext files, that should be rather effective.</p><pre>inaimathi@self:~/.cl-notebook/books$ pack -t tar.gz base-zg1mm23z
base-zg1mm23z
inaimathi@self:~/.cl-notebook/books$ ls -lh base-zg1mm*
-rw-r--r-- 1 inaimathi inaimathi 675K Apr 20 21:47 base-zg1mm23z
-rw-r--r-- 1 inaimathi inaimathi  23K Apr 20 21:47 base-zg1mm23z.tar.gz</pre><p>Yeah. I think that'll be good enough.</p><h3>Return Values are Complicated</h3><p>I mean, I knew that already, but it turns out there are even more intricacies here. I initially assumed I'd be able to just keep a single return value per cell (by which I mean the return from a single Lisp function, which can be zero, one or more values). Then it hit me that a <code>cell</code> might have more than one expression in it. <i>Then</i> it hit me that return values aren't enough; you need to be able to handle <code>*standard-output*</code> emissions and warnings on a per-expression basis rather than on a per-cell basis, and that we'd want type annotations in some places since we'll be serializing various things to strings and it would otherwise get confusing. Then <i>I</i> hit me and sat down to write down something workable. Each cell now stores a <code>result</code>, which is zero or more <code>values</code>, each of which is actually a <code>value</code> and a <code>type</code>.</p><p>That lets the front end figure out what it needs to do on a per cell basis, which means that the server-side implementation of a cells' <code>noise</code> becomes very mechanically simple. It's basically just an extra fact we keep around as a label, which the front-end queries to decide how to transform the high-detail <code>result</code>.</p><h3><code>cell-type</code> is not the same thing as <code>cell-language</code></h3><p>Early on, I had this idea that I'd be semi-implicit about what's in a cell. At that point there were two <code>cell-type</code>s; <code>common-lisp</code> and <code>cl-who</code>. The idea would be that this single <code>cell-type</code> would determine both display and evaluation properties of the contained code. Nope, as it turns out. And the thing that finally made this clear to me is thinking about how I'd treat test code. It's still Common Lisp, you see, so I'd still be evaluating it the same way as any other code cell, but I didn't want it showing up in certain exports.</p><p>The solution I ended up settling on is to be explicit about everything. Each cell now has a <code>cell-type</code> as well as a <code>cell-language</code>. The first one being one of <code>markup</code> (for prose blocks), <code>code</code> (for code blocks), and <code>tests</code> (for code blocks that I'd want to separate from actual runtime code).</p><h3>Naming things is difficult</h3><p>I think there's a joke about this somewhere. Something along the lines of </p><blockquote>The only two difficult problems in programming are naming things, cache invalidation and off-by-one errors.</blockquote><p>and man did that ever bite me this time. It's obviously bad to tie the file-system name of something to its display name, if for no reason other than it opens up various injection vectors that you'd rather not open up. It turns out it gets even more complicated when you're dealing with history trees of various documents, and you're trying to reduce headaches for your users. Here, think about this problem for a bit. Say you had a document type that you'd let your users name. We're obviously not naming the on-disk file after the display name of the document, so this is a matter of storing a record in the document that'll keep a user-entered name around for reference purposes. That gives you the additional benefit of being able to roll back renames, and the ability to see what a given document was called at some point in the past. Now, say you want to be able to branch said document. That is, instead of being a single history line, you want to be able to designate certain timelines as belonging to different branches than others. What you need now is four different levels of naming. Five, depending on how ham-handedly you've decided to store and relate those branches. At minimum you need</p><ul><li>The filename of the document, which is different from</li><li>The display name of the same document (which might be different in different branches, and at different points in time), which is different from</li><li>The display name of a particular branch of the document (which might need to be human readable, or user entered) which is different from</li><li>The collective, still human-readable name for a set of branches belonging to one document.</li></ul><p>If you've stored a branch collective as a file/folder on disk, you'll have to name that too. So, what would you do?</p><p>Confronted with this problem, I punted. Branching is basically going to be a copying operation. What you'll eventually get, once I put the branching system together and you try to use it, is a complete, self-contained fact base that happens to (possibly temporarily) have the same display-name as its origin (plus the word 'branch'), and a fact or two that point to a specific time point in that origin. From there, they'll diverge and be entirely separate entities. No, I'm not entirely sure this is the best approach, or even an acceptable approach, but it seems to be the only way to avoid asking the user to manage four different names in the space of one document. So I'll take it.</p><p>There's probably more where those came from, but they're all I could pull out of my head at short-ish notice. I'll try to let you know how the rest of the project goes, as it happens.</p>
"))
((5202 3723 630171000) :INSERT (177 :POSTED 3607041600))
((5202 3723 630172000) :INSERT (177 :TAG :CL-NOTEBOOK))
((5202 3723 630174000) :INSERT (177 :TAG :GENERAL-PROGRAMMING-THOUGHTS))
((5202 3723 630176000) :INSERT (177 :TAG :PROGRAMMING-ENVIRONMENT))
((5202 3723 630177000) :INSERT (177 :TAG :PROGRAMMING-INTERFACES))
((5202 3723 630385000) :INSERT (178 :TITLE "Arbitrary Update 932"))
((5202 3723 630389000) :INSERT (178 :FILE "arbitrary-update-932.html"))
((5202 3723 630391000) :INSERT (178 :EDITED 3610310672))
((5202 3723 630392000) :INSERT
 (178 :BODY
  "<p>It's been a while. Sadly/happily, I've been busy working on the <a href=\"https://github.com/Inaimathi/500lines/blob/master/async-web-server/writeup.md\"><code>house</code> write-up</a> for <a href=\"http://aosabook.org/blog/\">AOSA 4</a> and thinking pretty hard about a <a href=\"https://github.com/Inaimathi/cl-notebook\"><code>cl-notebook</code></a>-related submission to <a href=\"http://www.future-programming.org/call.html\">this</a>, so any spare writing time I've had has been getting pointed directly away from this blog. This is going to be a pretty incoherent update, mainly focused at getting various things out of my head rather than making any kind of sense. It's a quick cross-section/pressure-release related to things I've been thinking about lately, not a catalyst for learning or external discussion.</p>

<h3>cl-notebook/fact-base</h3>

<p>I'm noticing that there's a very common pattern in the <a href=\"https://github.com/Inaimathi/cl-notebook\"><code>cl-notebook</code></a> use-case for <a href=\"https://github.com/Inaimathi/fact-base\"><code>fact-base</code></a>. Specifically, the deletion of a record followed by the insertion of a very similar new record.</p>

<pre>  (<span style=\"color: #a020f0;\">let</span> ((cont-fact (first (lookup book <span style=\"color: #483d8b;\">:a</span> cell-id <span style=\"color: #483d8b;\">:b</span> <span style=\"color: #483d8b;\">:contents</span>)))
        (val-fact (first (lookup book <span style=\"color: #483d8b;\">:a</span> cell-id <span style=\"color: #483d8b;\">:b</span> <span style=\"color: #483d8b;\">:result</span>)))
        (cell-lang (caddar (lookup book <span style=\"color: #483d8b;\">:a</span> cell-id <span style=\"color: #483d8b;\">:b</span> <span style=\"color: #483d8b;\">:cell-language</span>)))
        (cell-type (caddar (lookup book <span style=\"color: #483d8b;\">:a</span> cell-id <span style=\"color: #483d8b;\">:b</span> <span style=\"color: #483d8b;\">:cell-type</span>))))
    (delete! book cont-fact)
    (insert! book (list cell-id <span style=\"color: #483d8b;\">:contents</span> contents))
    (publish! <span style=\"color: #483d8b;\">:cl-notebook-updates</span> (update <span style=\"color: #483d8b;\">:book</span> (notebook-name book) <span style=\"color: #483d8b;\">:cell</span> cell-id <span style=\"color: #483d8b;\">:action</span> 'content-changed <span style=\"color: #483d8b;\">:contents</span> contents))
  ...</pre>

<p>What I'm trying to express there is a change in an existing record. It's mildly annoying for two reasons. First, it means that I need to effectively store every change twice in the form of a before-and-after shot (which, granted, I kind of need to keep doing if I want easy reversibility on edits). Second, and more importantly, it means that a history interface for something being backed by a fact base is going to need to be more complex than I'd like. Instead of naively displaying states, I'll need to make sure to intelligently handle the situation where a user moves history to a point between a deletion and new insertion of a particular fact. I'm going to shortly be making such an interface for <code>cl-notebook</code>, so this is going to get painfully relevant very soon. This has me seriously considering adding a third token to <code>fact-base</code>, <code>:modify</code>, specifically to address this.</p>

<h3>Memory</h3>

<img src=\"/static/img/thinkin-bout-memory-management.png\" class=\"middle\" alt=\"An issue of gunshowcomic.com with some naughty words scribbled out and replaced with 'memory management' used for comedic effect.\" />

<p>Whatever language you're currently using, managing memory is something that you're ultimately doing. Whether it's manually, or through various schemes that do it on your behalf. The ultimate goal of all of these approaches is twofold:</p>

<ul>
  <li>make sure that a new allocation doesn't clobber a chunk of memory that's still being used by something</li>
  <li>make sure that you never build up enough memory junk that you can't allocate a new block when you need to</li>
</ul>

<p>The general approaches seem to be</p>

<h2>Not</h2>

<p>For sufficiently short-running programs, a reasonable approach is to just build up junk constantly and let it come out in the wash after the program ends. This is a pretty narrow use case, since you can't clobber memory held by another program, and you can't use more memory than exists on the machine running you, but it's sometimes an option. I'm... not actually aware of a language that takes this approach.</p>

<h2>Manual</h2>

<p>This is the C/C++ approach. You, the programmer, get to declare exactly what pieces are being used and when. Whether that's on a procedure-by-procedure or datastructure-by-datastructure basis, you're ultimately responsible for memory yourself directly. The upside is that there's no garbage collection overhead. The downside is that every procedure/datastructure has to manage memory acceptably, otherwise things start blowing up in various hard-to-diagnose ways.</p>

<h2>Mark-and-sweep and variants</h2>

<p>One of the automatic memory management approaches. The general idea here is</p>

<ul>
  <li>keep a free memory list, and track of all things allocated by the program</li>
  <li>every so often (either at a time interval, or every <code>n</code> allocations, or maybe just when you try to allocate memory and your free list is empty), traverse the list of all things and free the ones that aren't being used any more</li>
</ul>

<p>A variant on this known as <b>generational garbage collection</b> is keeping several buckets of allocated things, rather than one. You'd partition objects based on how long they've been around so that you don't waste much time traversing long-lived data every time through. This is the variant that I've seen discussed most often, and I kind of get the impression that it's also the one getting the most research time thrown at it, but I'm not entirely sure why. Oh, incidentally, languages like Common Lisp, Java and Python use this one.</p>

<h2>Reference-counting</h2>

<p>Another automatic approach, also known as <b>deterministic garbage collection</b>. As far as I understand, Perl does this. The idea is to keep a special eye on language primitives that create or destroy references to objects, and to keep track of how many references to a particular object exist. Every time a relevant primitive is called, modify the reference count for the target, and collect it if that count is zero afterwards. I'm not sure what the pitfalls are in practice, but there seems to be a lot less discussion about this approach than about the previous.</p>

<h2>Circular Memory</h2>

<p>I only vaguely understand this one, and from what I understand, it's fairly limited, but here goes. The situation you'd want to use this or something like it is when a particular allocation is only needed for a short time before being discarded, and can be discarded sequentially. If you're in that situation, what you can do is figure out how much memory you have, then allocate things to it in order and hop back to the beginning when you're done. You need a pointer to the next block you can use (which you update every time you need to allocate a new thing), and a pointer to the first still-relevant block (which you update every time you free something). If the two ever overlap, you know you have a problem. Shapes other than circular are possible. For instance, you could have some sort of self-referential tree structure that accomplishes the same thing for mildly different use cases.</p>

<h3>Decentralization</h3>

<p>This isn't a thing related to memory; this is separate.</p>

<p>I've got this pattern of</p>

<ol>
  <li>assuming problem <code>foo</code> is solved</li>
  <li>going on about my business for a while</li>
  <li>taking a close look at <code>foo</code> for the purposes of implementing something related to it</li>
  <li>suddenly realizing that <code>foo</code> is not only unsolved, but can't possibly <i>be</i> solved</li>
  <li>thinking about it really hard in an obsessive/compulsive sort of way</li>
  <li>learning to live with a deep dissatisfaction about some small part of the universe</li>
</ol>

<p>This has happened for identity, free will, type systems, <a href=\"/article?name=strifebarge-update.html\">authentication</a>, and most recently decentralization.</p>

<p>More will follow, I'm sure.</p>

<p>I heard about the <a href=\"http://stackoverflow.com/questions/1032006/will-html5-allow-web-apps-to-make-peer-to-peer-http-connections\">peer-to-peer connection mechanisms in development for HTML5</a>, and figured it would be nice to put something nice and small together using it. To that end, I'd absorbed and discussed the idea of <a href=\"http://en.wikipedia.org/wiki/Mental_poker\">mental poker</a> with a couple of people, and thought I had the hard parts under control. It turns out that this new set of functionality is still going to need central servers to set up the connections though, at which point I dismissed the approach only to notice a cognitive rupture. <i>Every</i> \"distributed\" protocol seems to need a central server to bootstrap. The web needs DNS, torrents need trackers, cell-phones need satellites and/or transmission stations, etc etc.</p>

<p>This fundamentally shifts the problem in my mind. If we're going to be burdened with some central functional cluster <i>anyway</i>, it looks like a better problem to solve might be \"how do we perform tasks with multiple 'central' clusters\" rather than \"how do we have as few central structures as possible\".</p>

<p>Fuck you if it doesn't make sense. It's late and I'm piping a stream of consciousness here. I was also going to talk about a few other things on my mind; assembler, the pain of implementing HTTP in Windows-based Lisp, and some new revelations about Flow Based Programming in particular, but I'm about to lose coherence entirely, and nobody wants that.</p>

<p>I'll let you know what, if anything, comes of any of these meditations. For the moment, you'll have to tolerate some more radio silence.</p>
"))
((5202 3723 630461000) :INSERT (178 :POSTED 3609547200))
((5202 3723 630463000) :INSERT (178 :TAG :GENERAL-PROGRAMMING-THOUGHTS))
((5202 3723 630465000) :INSERT (178 :TAG :GENERAL-UPDATE))
((5202 3723 630468000) :INSERT (178 :TAG :IDEA-PEELING))
((5202 3729 183111000) :INSERT (179 :TITLE "Goodbye Blogger"))
((5202 3729 183127000) :INSERT (179 :FILE "goodbye-blogger.html"))
((5202 3729 183131000) :INSERT (179 :EDITED 3610279710))
((5202 3729 183134000) :INSERT
 (179 :BODY
  "<p>This has actually been a long time coming, with or without <a href=\"http://langnostic.blogspot.com/\">this garbage</a>. The point at which I could write my own blog server from scratch in an afternoon or two was passed long ago, and I'd similarly long ago run into the situation where I'd found myself apologizing for using Google services. Mostly because of things like YouTube prompting you to use your real name, and the forcible pushing of G+, and \"One account. All of Google.\"</p>

<p>So whether or not they decided to lock that blog down for non-specific terms-of-service violations, I was eventually going to set up a site on my own box, at my own domain that did precisely what I wanted a blog to do. The lock just sort of forced my hand.</p>

<p>The starting point was when I jumped over to my blog to find a link to <a href=\"https://github.com/adambard/learnxinyminutes-docs\">X in Y</a> from my sidebar. Only to instead find a Firefox Attack Page warning telling me about an image that was causing some issues<a href=\"#foot-Wed-May-28-112820EDT-2014\" name=\"note-Wed-May-28-112820EDT-2014\">[1]</a>. So I hopped onto the various contact links and tried to see what was going on. First, with the <a href=\"https://www.stopbadware.org/\">project maintainers</a> of the warning modules, which yielded this conversation:</p>

<blockquote>Me: May 21 (7 days ago)
<p>To: contact@stopbadware.org</p>
<p>I just saw one of your warnings on a blogspot.com site (specifically langnostic.blogspot.com, which I know to lack malware as I administer it). Not sure if this is a false positive or an oversight of some sort on my part. I'm not about to go through the de-blacklist process for blogspot.com, but wanted to let you know about it.</p>
</blockquote>

<blockquote>StopBadware Team: May 21 (7 days ago)
<p>To: me</p>
<p>Thank you for contacting StopBadware. Answers to many common questions, including how to remove warnings about badware on your site, may be found in our FAQ at https://www.stopbadware.org/faq.</p>
<p>If your message requires an answer that is not provided by the FAQ, we will try our best to be in touch soon. You may also find assistance in our online community at https://www.BadwareBusters.org.</p>
<p>Regards,</p>
<p>The StopBadware team</p>
<p>--</p>
<p>StopBadware is a 501(c)3 non-profit organization based in Cambridge, Massachusetts, USA. We are supported by individual donors and partners such as Google, Mozilla, Qualys,and Yandex. For more information, visit https://www.stopbadware.org.</p>
</blockquote>

<blockquote>StopBadware Team: May 21 (7 days ago)
<p>To: me</p>
<p>Hi Leo,</p>
<p>StopBadware doesn't make warnings or have a list of bad sites. The warnings link to us because we're a nonprofit organization that helps website owners figure out how to clean up hacked sites. Google is the company blacklisting your blog for malware. Here are their diagnostics: http://google.com/safebrowsing/diagnostic?site=http://langnostic.blogspot.com.</p>
<p>The Safe Browsing page indicates that \"bikereviews. com\" is the domain functioning as an intermediary for distributing malware to your visitors. We ran a quick check on your blog using a free, open tool maintained by one of our community forum moderators (his code name is Redleg). Here's the tool: http://aw-snap.info/blogger-tool/. </p>
<p>And here's the output from the tool: http://aw-snap.info/blogger-tool/?tgt=http%3A%2F%2Flangnostic.blogspot.com. A search for \"bikereviews. com\" (space added) reveals that your blog has what looks to be a JPG image sourced from bikereviews. com, starting on line 1381. That site was probably hacked to serve malware and your blog was likely roped into that distribution process. </p>
<p>After you clean that off your site, here are directions on removing Google's malware warnings:</p>
<p>Via Google directly (requires that you add and verify your site in Webmaster Tools): https://support.google.com/webmasters/answer/168328</p>
<p>Via StopBadware's independent review process: https://www.stopbadware.org/blacklisted-by-google</p>
<p>Hope that helps!</p>
<p>The StopBadware team</p>
</blockquote>

<blockquote>Me: May 21 (7 days ago)
<p>To: StopBadware</p>
<p>It did. Thanks for your response. It turns out that I had picked the \"from the web\" option to post an image a few posts ago (the lines you highlighted using aw-snap.info/blogger-tool/; thanks for pointing me in the right direction, that saved some time), and that sets up a link to the original domain rather than downloading the target and serving it from blogspot.com. My bad; I should have checked that at the time.</p>
<p>I've fixed the problem and submitted an automated review request through Google.</p>
</blockquote>

<blockquote>StopBadware Team: May 21 (7 days ago)
<p>To: me</p>
<p>Great! We hope you don't have any further issues. </p>
<p>Cheers,</p>
<p>The StopBadware team</p>
</blockquote>

<p>So the result of that was identifying my mistake and fixing it. Instead of hotlinking, I downloaded, then uploaded the picture of that bike lock onto blogger, so that it would be served from a <code>blogger</code> domain. Then I asked for a review of my blog, whereupon it was locked as authors-only, <i>in addition</i> to being flagged as an attack page.</p>

<img src=\"/static/img/locked-blog.png\" class=\"middle\" alt=\"A locked blog page screenshot.\" />

<p>Fantastic.</p>

<p>So I hit up Bloggers' support forum where I had <a href=\"https://productforums.google.com/forum/#!msg/blogger/rTbpSj30Y8Q/8CXXbmUGj_sJ\">this exchange</a> with a polite and relatively prompt gentleman who nevertheless failed to be of any help at all.</p>

<p>You might be asking why I didn't just click on this \"Request Unlock Review\" button in my blogger account</p>

<img src=\"/static/img/unlock-review.png\" class=\"middle\" alt=\"Salvation?\" />

<p>It's because when I click it, I get this</p>

<img src=\"/static/img/verify-account.png\" class=\"middle\" alt=\"Nope! Hahaha!\" />

<p>And, no, a company that has this level of customer service, along with a noted anti-privacy bias doesn't get my permission to find out my phone number.</p>

<p>The blog is toast, the only way of reviving it seems to be to spend more frustrating hours dicking around with Google's automated systems and/or explicitly giving them more of my personal information. And I can write code faster than that. And I enjoy writing code. And the code would be Lisp.</p>

<p>So <a href=\"https://github.com/Inaimathi/langnostic\">here we are</a>.</p>

<p>Now the only thing I have to do is figure out what I'm doing to get the hell away from gmail.</p>


<hr />
<h5>Footnotes</h5>
<p>1 - <a href=\"#note-Wed-May-28-112820EDT-2014\" name=\"foot-Wed-May-28-112820EDT-2014\">[back]</a> - This was a picture of a bike lock that I had hotlinked from the manufacturer's site. No, I don't feel bad about it, my blog never got anywhere near enough views to make this an issue.</p>
"))
((5202 3729 183212000) :INSERT (179 :POSTED 3610314129))
((5202 3729 183215000) :INSERT (179 :CURRENT T))
((5202 3729 183217000) :INSERT (179 :TAG :BITCHING))
((5221 86229 551311000) :DELETE (179 :CURRENT T))
((5221 86229 551889000) :INSERT
 (180 :TITLE "Future Of Programming, Memory and Minutia"))
((5221 86229 551906000) :INSERT
 (180 :FILE "future-of-programming-memory-and-minutia.html"))
((5221 86229 551910000) :INSERT (180 :EDITED 3611598435))
((5221 86229 551913000) :INSERT
 (180 :BODY
  "<p>Fairly boring update time. I still haven't really had enough time to tear into the next real article I've got planned, but its been long enough that I need to release mental steam.</p>

<h3>Future of Programming</h3>

<p>So <a href=\"https://vimeo.com/97623064\">this</a> is a thing. I'm not sure how I feel about it since it was a zero-edit, one sitting walk-through of a still very incomplete version of <a href=\"https://github.com/Inaimathi/cl-notebook\"><code>cl-notebook</code></a>, but at least it's a thing. I recently submitted it to John Edwards et als' <a href=\"http://www.future-programming.org/call.html\">Future of Programming workshop</a> where, I guess, I'm hoping to get in as a token \"blast from the past\" entry. The funny part is that even if I get selected to participate at these conferences, there's no way in hell I could go. My passport is somewhat out of date, and I've got a family to care for and a job to do here. Hopefully they've got a remote option I guess?</p>

<p>Someone just sort of mentioned the thing off-hand, and I immediately assumed from the title that this was just a mechanism by which to get more feedback on particular programming projects you were working on. Presenting to <a href=\"https://thestrangeloop.com/\">this crowd</a> isn't something I thought was part of the deal.</p>

<h3>Memory</h3>

<p>So it turns out that the memory management landscape I briefly mused about <a href=\"/article?name=arbitrary-update-932.html\">last time</a> is even simpler than I thought. Because \"tracers\" and \"refernce counters\" <a href=\"http://www.cs.virginia.edu/~cs415/reading/bacon-garbage.pdf\">turn out to be duals</a>. You can either follow that link to the paper, or <a href=\"https://www.youtube.com/watch?v=XtUtfARSIv8\">this one</a> to the <a href=\"https://www.youtube.com/channel/UCoj4eQh_dZR37lL78ymC6XA\">Papers We Love</a> video explaining it. Both elucidate wonderfully.</p>

<p>So there isn't even five different ways of approaching memory, there's four.</p>

<h3>HTTP On Windows...</h3>

<p>...is a sack of balls. It's especially a sack of balls in Lisp (or leastwise SBCL), which tries to be clever about how to parse incoming line-endings. Let me back up a bit first.</p>

<p>Since I've apparently got some Windows users now, <code>house</code> kind of has to fly on it. Which means that I've had to add little pieces of compatibility cruft like</p>

<pre>...
#-win32(wait-for-input (cons server (alexandria:hash-table-keys conns)) <span style=\"color: #483d8b;\">:ready-only</span> t)
<span style=\"color: #b22222;\">#+win32(wait-for-input (cons server (alexandria:hash-table-keys conns)) :ready-only t :timeout 5)</span>
...</pre>

<p>I mean, it's nice that I <i>can</i>, but it would be even nicer if <code>usocket</code> didn't randomly require a <code>:timeout</code> argument to <code>wait-for-input</code> on Windows. It's marginally plausible that the underlying implementation there might turn out to eat massive piles of shit, so this might just be an escape hatch to keep it from shit-eating itself into an early grave, but it's still mildly annoying.</p>

<p>However, one such piece of compatibility code crosses the line into outright infuriating.</p>

<pre>(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">line-terminated?</span> (lst)
  (starts-with-subseq 
   #-win32(list #\\linefeed #\\return #\\linefeed #\\return)
   <span style=\"color: #b22222;\">#+win32(list #\\newline #\\newline)</span>
   lst))</pre>

<p>Why do I need this? It's because platform-specific line-endings read from a <code>char</code> stream are returned as <code>#\\newline</code>. On Linux machines, <code>#\\newline</code> is synonymous with <code>#\\linefeed</code>. Literally.</p>

<pre>CL-USER&gt; (eq #\\linefeed #\\newline)
T
CL-USER&gt; </pre>

<p>The situation's different on Windows though. There, a line ends with <code>CRLF</code>. Which happens to be the actual specified line-ending for HTTP. Combining these fairly sensical decisions gets you the situation that you <i>can't</i> check for a char-stream HTTP line-ending on Windows by looking for a terminating <code>CRLF</code>.</p>

<p>Why don't I just use a byte stream instead? Especially since I already need bi-valent streams to serve up images and similar?</p>

<pre>CL-USER&gt; (describe #'read-char-no-hang)
#&lt;FUNCTION READ-CHAR-NO-HANG&gt;
  [compiled function]

Lambda-list: (<span style=\"color: #228b22;\">&amp;OPTIONAL</span> (STREAM *STANDARD-INPUT*) (EOF-ERROR-P T)
              EOF-VALUE RECURSIVE-P)
Declared type: (FUNCTION (<span style=\"color: #228b22;\">&amp;OPTIONAL</span> (OR STREAM (MEMBER NIL T)) T T T)
                (VALUES T <span style=\"color: #228b22;\">&amp;OPTIONAL</span>))
Derived type: (FUNCTION (<span style=\"color: #228b22;\">&amp;OPTIONAL</span> T T T T) (VALUES T <span style=\"color: #228b22;\">&amp;OPTIONAL</span>))
Known attributes: explicit-check
Source file: SYS:SRC<span style=\"color: #b22222;\">;</span><span style=\"color: #b22222;\">CODE;STREAM.LISP
</span><span style=\"color: #b22222;\">; </span><span style=\"color: #b22222;\">No value
</span>
CL-USER&gt; (describe #'read-byte-no-hang)
The function COMMON-LISP-USER::READ-BYTE-NO-HANG is undefined.
   [Condition of type UNDEFINED-FUNCTION]

Restarts:
 0: [RETRY] Retry SLIME REPL evaluation request.
 1: [*ABORT] Return to SLIME's top level.
 2: [ABORT] Abort thread (#&lt;THREAD <span style=\"color: #8b2252;\">\"repl-thread\"</span> RUNNING {10046F8063}&gt;)

Backtrace:
  0: (SB-INT:SIMPLE-EVAL-IN-LEXENV (FUNCTION READ-BYTE-NO-HANG) #&lt;NULL-LEXENV&gt;)
  1: (SB-INT:SIMPLE-EVAL-IN-LEXENV (DESCRIBE (FUNCTION READ-BYTE-NO-HANG)) #&lt;NULL-LEXENV&gt;)
  2: (EVAL (DESCRIBE (FUNCTION READ-BYTE-NO-HANG)))
  ...</pre>

<p>It's because there's no non-blocking way to grab a <code>byte</code> out of a stream. There <i>is</i> such a way to grab a <code>char</code>, but that doesn't help in this situation. Anyway, the end result of all of this is that ugly little hack that makes the line-ending check conditional on execution platform.</p>

<h3><a href=\"https://github.com/Inaimathi/fact-base\"><code>fact-base</code></a> changes</h3>

<p>Two changes I'd been considering for a while got pushed recently.</p>

<p>Firstly, there's an intermediate data-structure backing <code>delta</code>s and <code>history</code>s. It's extremely simple; just a linked list you can push to the back of. The end result is saving a tiny bit of time when reading or writing things, because you suddenly don't need to reverse anything for it to work properly. Not big, and this changes literally nothing as far as <i>users</i> of <code>fact-base</code> are concerned, but it feels better not to have to toss <code>reverse</code> into the equation every so often.</p>

<p>Secondly, and more relevantly for <code>cl-notebook</code>, there's now a primitive <code>:change</code> token. It doesn't reduce disk usage because both the complete before and after facts are kept on record, but <i>does</i> make changes atomic in <code>history</code>. Which will mildly help with the deep undo/branch interface I still need to put together.</p>
"))
((5221 86229 551964000) :INSERT (180 :POSTED 3611598438))
((5221 86229 551966000) :INSERT (180 :CURRENT T))
((5221 86229 551969000) :INSERT (180 :TAG :BITCHING))
((5221 86229 551971000) :INSERT (180 :TAG :IDEA-PEELING))
((5221 86229 551974000) :INSERT (180 :TAG :SPECULATION))
((5222 1068 247851000) :DELETE (180 :CURRENT T))
((5222 1068 247946000) :INSERT (181 :TITLE "How Unification Works"))
((5222 1068 247957000) :INSERT (181 :FILE "how-unification-works.html"))
((5222 1068 247969000) :INSERT (181 :EDITED 3612039462))
((5222 1068 247972000) :INSERT
 (181 :BODY "<p>So here's how unification works.</p>

<pre>(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">unify</span> (x y <span style=\"color: #228b22;\">&amp;optional</span> bindings)
  (<span style=\"color: #a020f0;\">cond</span> ((fail? bindings) +fail+)
        ((eql x y) bindings)
        ((variable? x) (unify-variable x y bindings))
        ((variable? y) (unify-variable y x bindings))
        ((and (stringp x) (stringp y))
         (<span style=\"color: #a020f0;\">if</span> (string= x y) bindings +fail+))
        ((and (consp x) (consp y))
         (unify (rest x) (rest y)
                (unify (first x) (first y) bindings)))
        (t +fail+)))

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">unify-variable</span> (var x bindings)
  (<span style=\"color: #a020f0;\">cond</span> ((get-binding var bindings)
         (unify (lookup-binding var bindings) x bindings))
        ((and (variable? x) (get-binding x bindings))
         (unify var (lookup-binding x bindings) bindings))
        ((occurs-check var x bindings)
         +fail+)
        (t (extend-bindings var x bindings))))</pre>

<p>That's a joke.</p>

<p>The above is an implementation of unification in Common Lisp. It's a very mildly modified version of the unifier that <a href=\"http://norvig.com/\">Norvig</a> built in <a href=\"http://norvig.com/paip/README.html\">PAIP</a>. What a lot of people don't grasp intuitively<a href=\"#foot-Tue-Jun-17-201209EDT-2014\" name=\"note-Tue-Jun-17-201209EDT-2014\">[1]</a> is that unifiers don't return expressions, they return environments.</p>

<pre>FACT-BASE&gt; (unify '(?a <span style=\"color: #483d8b;\">:test</span> 1) '(<span style=\"color: #483d8b;\">:blah</span> ?b 1))
<span style=\"color: #ff0000;\">((?B . </span><span style=\"color: #ff0000;\">:TEST</span><span style=\"color: #ff0000;\">) (?A . </span><span style=\"color: #ff0000;\">:BLAH</span><span style=\"color: #ff0000;\">))</span>
FACT-BASE&gt; </pre>

<p>This particular implementation represents environments is as <a href=\"http://www.cs.cmu.edu/Groups/AI/html/cltl/clm/node153.html\">association list</a>, but that's not a requirement. An <code>environment</code> is a key/value structure that tells you what variables are bound to which values. The three possible outputs of <code>unify</code> are:</p>

<p><b>Failure</b>, which is the unsuccessful empty environment. Here's an example:</p>

<pre>FACT-BASE&gt; (unify '(?a <span style=\"color: #483d8b;\">:test</span> 1) '(<span style=\"color: #483d8b;\">:blah</span> ?b 2))
<span style=\"color: #ff0000;\">#</span><span style=\"color: #ff0000;\">:FAIL973</span>
FACT-BASE&gt; </pre>

<p>The problem there is that <code>1</code> and <code>2</code> are different constant values, so these two terms can't be <code>unify</code>ied. This is fundamentally different from</p>

<p><b>Success</b>, which is the <i>successful</i> empty environment. You get this by successfully <code>unify</code>ing terms with no variables. For example,</p>

<pre>FACT-BASE&gt; (unify '(<span style=\"color: #483d8b;\">:blah</span> <span style=\"color: #483d8b;\">:test</span> 2) '(<span style=\"color: #483d8b;\">:blah</span> <span style=\"color: #483d8b;\">:test</span> 2))
<span style=\"color: #ff0000;\">NIL</span>
FACT-BASE&gt; </pre>

<p>This particular implementation of <code>unify</code> uses the empty list (<code>NIL</code>) as the empty success. And finally, <code>unify</code> might return </p>

<p><b>An Environment</b>, which is a set of bindings under which the given unification is true. Once again,</p>

<pre>FACT-BASE&gt; (unify '(?a <span style=\"color: #483d8b;\">:test</span> 1) '(<span style=\"color: #483d8b;\">:blah</span> ?b 1))
<span style=\"color: #ff0000;\">((?B . </span><span style=\"color: #ff0000;\">:TEST</span><span style=\"color: #ff0000;\">) (?A . </span><span style=\"color: #ff0000;\">:BLAH</span><span style=\"color: #ff0000;\">))</span>
FACT-BASE&gt; </pre>

<p>What this is saying is</p>

<blockquote>If <code>?a</code> were bound to <code>:BLAH</code> and <code>?b</code> were bound to <code>:TEST</code>, these two terms would be equal</blockquote>

<p>Now, by default, <code>unify</code> starts with the empty environment, but it doesn't have to.</p>

<pre>FACT-BASE&gt; (unify '(?a <span style=\"color: #483d8b;\">:test</span> 1) '(<span style=\"color: #483d8b;\">:blah</span> ?b 1) '((?a . <span style=\"color: #483d8b;\">:FOO</span>)))
<span style=\"color: #ff0000;\">#</span><span style=\"color: #ff0000;\">:FAIL973</span>
FACT-BASE&gt; </pre>

<p>If <code>unify</code> tries to work on these same terms, but <code>?a</code> is already bound to <code>:foo</code>, it can do nothing but fail. Yes, you could unbind a particular variable, but that's skipping ahead a bit. Backtracking is dealt with at a different level than straight-up unification. In fact...</p>

<h2>How <code>for-all</code> Works</h2>

<pre>(<span style=\"color: #a020f0;\">defmacro</span> <span style=\"color: #0000ff;\">for-all</span> (goal-term <span style=\"color: #228b22;\">&amp;key</span> in collect do)
  (<span style=\"color: #a020f0;\">with-gensyms</span> (gen res)
    `(<span style=\"color: #a020f0;\">let</span> ((,gen ,(<span style=\"color: #a020f0;\">if</span> (and (symbolp (first goal-term))
                           (member (-&gt;key (first goal-term))
                                   (list <span style=\"color: #483d8b;\">:quote</span> <span style=\"color: #483d8b;\">:backq-list</span> <span style=\"color: #483d8b;\">:backq-list*</span>)))
                      `(make-goal ,in ,goal-term)
                      `(make-goal ,in ',goal-term))))
       (<span style=\"color: #a020f0;\">loop</span> for ,res = (funcall ,gen)
          until (fail? ,res)
            ,(<span style=\"color: #a020f0;\">if</span> do 'do 'collect)
            ,(<span style=\"color: #a020f0;\">if</span> (or collect do)
                 `(apply (<span style=\"color: #a020f0;\">lambda</span> ,(variables-in goal-term)
                           ,(or collect do))
                         (subst-bindings ,res ',(variables-in goal-term)))
                 `(subst-bindings ,res ',(variables-in goal-term)))))))</pre>

<p>Hah! This'll get funny eventually, I swear. In all seriousness, understanding this implementation of <code>for-all</code> is entirely optional to understanding how you use <code>unify</code> to query a fact-base. Here's a simple query:</p>

<pre>(for-all (?id <span style=\"color: #483d8b;\">:rectangle</span> nil) <span style=\"color: #483d8b;\">:in</span> base <span style=\"color: #483d8b;\">:do</span> (push (list ?id <span style=\"color: #483d8b;\">:sicp-constraint</span> nil) base))</pre>

<p>This pushes a new fact into the fact-base <code>base</code> for each individual fact that <code>unify</code>ies with the pattern <code>(?id :rectangle nil)</code>. And that's more or less how you read it:</p>

<blockquote>For all environments which makes this query true in the knowledge-base <code>base</code>, do <code>(push (list ?id :sicp-constraint nil) base)</code>.</blockquote>

<p>Here's a more complicated query:</p>

<pre>(for-all (and (?id <span style=\"color: #483d8b;\">:line-segment</span> nil)
                (?id <span style=\"color: #483d8b;\">:start</span> ?start) (?id <span style=\"color: #483d8b;\">:end</span> ?end)
                (?id2 <span style=\"color: #483d8b;\">:line-segment</span> nil)
                (lisp (not (equal ?id ?id2)))
                (or (?id2 <span style=\"color: #483d8b;\">:start</span> ?end) (?id2 <span style=\"color: #483d8b;\">:end</span> ?start)
                    (?id2 <span style=\"color: #483d8b;\">:start</span> ?start) (?id2 <span style=\"color: #483d8b;\">:end</span> ?end)))
           <span style=\"color: #483d8b;\">:in</span> base <span style=\"color: #483d8b;\">:do</span> (push (list ?id <span style=\"color: #483d8b;\">:line-connects-to-line</span> ?id2) base))</pre>

<p>In fact, this is about the upper bound of complexity you're likely to run into in a single query. You can the full statement more or less the same way as above, but the \"this query\" part is much more complicated. In this case, rather than just going through each fact in <code>base</code> and <code>unify</code>ing it, <code>for-all</code> needs to run a deeper query. The top-level <code>and</code> there means that these sub-clauses are dependent on each other. So what it does is go through <code>base</code> looking for a fact that <code>unify</code>ies with <code>(?id :line-segment nil)</code>. If it finds such a fact, lets say it looks like <code>(27 :line-segment nil)</code>, it then tries to satisfy the next <code>and</code> clause under the resulting set of bindings. That is, it tries to find another <code>fact</code> in <code>base</code> that satisfies</p>

<pre>(unify fact (?id <span style=\"color: #483d8b;\">:start</span> ?start) '((?id . 27)))</pre>

<p>If <i>that</i> works, it keeps going. Either until it gets to the end of its clauses, in which case it returns the presumably fairly large <code>environment</code> which satisfies all of them, or until it gets to a sub-clause that fails. If that first sub-clause fails, <code>for-all</code> is out of answers in the given <code>base</code>, and is therefore done. If it were to fail on some other clause, it backtracks. That is, if <code>(unify fact (?id :start ?start) '((?id . 27)))</code> fails above, <code>for-all</code> will go back to the first goal and start searching where it left off until it finds another satisfying fact, then try to move up the tower again.</p>

<p>Hopefully, that clarified more than it confused.</p>

<hr />
<h5>Footnotes</h5>
<p>1 - <a href=\"#note-Tue-Jun-17-201209EDT-2014\" name=\"foot-Tue-Jun-17-201209EDT-2014\">[back]</a> - And don't worry if this set includes you; it included me too, until I spent three weeks or so hitting my head against it repeatedly.</p>
"))
((5222 1068 248091000) :INSERT (181 :POSTED 3612039468))
((5222 1068 248094000) :INSERT (181 :CURRENT T))
((5222 1068 248098000) :INSERT (181 :TAG :COMMON-LISP))
((5222 1068 248101000) :INSERT (181 :TAG :LOGIC-PROGRAMMING))
((5222 9633 333109000) :DELETE (181 :EDITED 3612039462))
((5222 9633 333247000) :DELETE
 (181 :BODY "<p>So here's how unification works.</p>

<pre>(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">unify</span> (x y <span style=\"color: #228b22;\">&amp;optional</span> bindings)
  (<span style=\"color: #a020f0;\">cond</span> ((fail? bindings) +fail+)
        ((eql x y) bindings)
        ((variable? x) (unify-variable x y bindings))
        ((variable? y) (unify-variable y x bindings))
        ((and (stringp x) (stringp y))
         (<span style=\"color: #a020f0;\">if</span> (string= x y) bindings +fail+))
        ((and (consp x) (consp y))
         (unify (rest x) (rest y)
                (unify (first x) (first y) bindings)))
        (t +fail+)))

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">unify-variable</span> (var x bindings)
  (<span style=\"color: #a020f0;\">cond</span> ((get-binding var bindings)
         (unify (lookup-binding var bindings) x bindings))
        ((and (variable? x) (get-binding x bindings))
         (unify var (lookup-binding x bindings) bindings))
        ((occurs-check var x bindings)
         +fail+)
        (t (extend-bindings var x bindings))))</pre>

<p>That's a joke.</p>

<p>The above is an implementation of unification in Common Lisp. It's a very mildly modified version of the unifier that <a href=\"http://norvig.com/\">Norvig</a> built in <a href=\"http://norvig.com/paip/README.html\">PAIP</a>. What a lot of people don't grasp intuitively<a href=\"#foot-Tue-Jun-17-201209EDT-2014\" name=\"note-Tue-Jun-17-201209EDT-2014\">[1]</a> is that unifiers don't return expressions, they return environments.</p>

<pre>FACT-BASE&gt; (unify '(?a <span style=\"color: #483d8b;\">:test</span> 1) '(<span style=\"color: #483d8b;\">:blah</span> ?b 1))
<span style=\"color: #ff0000;\">((?B . </span><span style=\"color: #ff0000;\">:TEST</span><span style=\"color: #ff0000;\">) (?A . </span><span style=\"color: #ff0000;\">:BLAH</span><span style=\"color: #ff0000;\">))</span>
FACT-BASE&gt; </pre>

<p>This particular implementation represents environments is as <a href=\"http://www.cs.cmu.edu/Groups/AI/html/cltl/clm/node153.html\">association list</a>, but that's not a requirement. An <code>environment</code> is a key/value structure that tells you what variables are bound to which values. The three possible outputs of <code>unify</code> are:</p>

<p><b>Failure</b>, which is the unsuccessful empty environment. Here's an example:</p>

<pre>FACT-BASE&gt; (unify '(?a <span style=\"color: #483d8b;\">:test</span> 1) '(<span style=\"color: #483d8b;\">:blah</span> ?b 2))
<span style=\"color: #ff0000;\">#</span><span style=\"color: #ff0000;\">:FAIL973</span>
FACT-BASE&gt; </pre>

<p>The problem there is that <code>1</code> and <code>2</code> are different constant values, so these two terms can't be <code>unify</code>ied. This is fundamentally different from</p>

<p><b>Success</b>, which is the <i>successful</i> empty environment. You get this by successfully <code>unify</code>ing terms with no variables. For example,</p>

<pre>FACT-BASE&gt; (unify '(<span style=\"color: #483d8b;\">:blah</span> <span style=\"color: #483d8b;\">:test</span> 2) '(<span style=\"color: #483d8b;\">:blah</span> <span style=\"color: #483d8b;\">:test</span> 2))
<span style=\"color: #ff0000;\">NIL</span>
FACT-BASE&gt; </pre>

<p>This particular implementation of <code>unify</code> uses the empty list (<code>NIL</code>) as the empty success. And finally, <code>unify</code> might return </p>

<p><b>An Environment</b>, which is a set of bindings under which the given unification is true. Once again,</p>

<pre>FACT-BASE&gt; (unify '(?a <span style=\"color: #483d8b;\">:test</span> 1) '(<span style=\"color: #483d8b;\">:blah</span> ?b 1))
<span style=\"color: #ff0000;\">((?B . </span><span style=\"color: #ff0000;\">:TEST</span><span style=\"color: #ff0000;\">) (?A . </span><span style=\"color: #ff0000;\">:BLAH</span><span style=\"color: #ff0000;\">))</span>
FACT-BASE&gt; </pre>

<p>What this is saying is</p>

<blockquote>If <code>?a</code> were bound to <code>:BLAH</code> and <code>?b</code> were bound to <code>:TEST</code>, these two terms would be equal</blockquote>

<p>Now, by default, <code>unify</code> starts with the empty environment, but it doesn't have to.</p>

<pre>FACT-BASE&gt; (unify '(?a <span style=\"color: #483d8b;\">:test</span> 1) '(<span style=\"color: #483d8b;\">:blah</span> ?b 1) '((?a . <span style=\"color: #483d8b;\">:FOO</span>)))
<span style=\"color: #ff0000;\">#</span><span style=\"color: #ff0000;\">:FAIL973</span>
FACT-BASE&gt; </pre>

<p>If <code>unify</code> tries to work on these same terms, but <code>?a</code> is already bound to <code>:foo</code>, it can do nothing but fail. Yes, you could unbind a particular variable, but that's skipping ahead a bit. Backtracking is dealt with at a different level than straight-up unification. In fact...</p>

<h2>How <code>for-all</code> Works</h2>

<pre>(<span style=\"color: #a020f0;\">defmacro</span> <span style=\"color: #0000ff;\">for-all</span> (goal-term <span style=\"color: #228b22;\">&amp;key</span> in collect do)
  (<span style=\"color: #a020f0;\">with-gensyms</span> (gen res)
    `(<span style=\"color: #a020f0;\">let</span> ((,gen ,(<span style=\"color: #a020f0;\">if</span> (and (symbolp (first goal-term))
                           (member (-&gt;key (first goal-term))
                                   (list <span style=\"color: #483d8b;\">:quote</span> <span style=\"color: #483d8b;\">:backq-list</span> <span style=\"color: #483d8b;\">:backq-list*</span>)))
                      `(make-goal ,in ,goal-term)
                      `(make-goal ,in ',goal-term))))
       (<span style=\"color: #a020f0;\">loop</span> for ,res = (funcall ,gen)
          until (fail? ,res)
            ,(<span style=\"color: #a020f0;\">if</span> do 'do 'collect)
            ,(<span style=\"color: #a020f0;\">if</span> (or collect do)
                 `(apply (<span style=\"color: #a020f0;\">lambda</span> ,(variables-in goal-term)
                           ,(or collect do))
                         (subst-bindings ,res ',(variables-in goal-term)))
                 `(subst-bindings ,res ',(variables-in goal-term)))))))</pre>

<p>Hah! This'll get funny eventually, I swear. In all seriousness, understanding this implementation of <code>for-all</code> is entirely optional to understanding how you use <code>unify</code> to query a fact-base. Here's a simple query:</p>

<pre>(for-all (?id <span style=\"color: #483d8b;\">:rectangle</span> nil) <span style=\"color: #483d8b;\">:in</span> base <span style=\"color: #483d8b;\">:do</span> (push (list ?id <span style=\"color: #483d8b;\">:sicp-constraint</span> nil) base))</pre>

<p>This pushes a new fact into the fact-base <code>base</code> for each individual fact that <code>unify</code>ies with the pattern <code>(?id :rectangle nil)</code>. And that's more or less how you read it:</p>

<blockquote>For all environments which makes this query true in the knowledge-base <code>base</code>, do <code>(push (list ?id :sicp-constraint nil) base)</code>.</blockquote>

<p>Here's a more complicated query:</p>

<pre>(for-all (and (?id <span style=\"color: #483d8b;\">:line-segment</span> nil)
                (?id <span style=\"color: #483d8b;\">:start</span> ?start) (?id <span style=\"color: #483d8b;\">:end</span> ?end)
                (?id2 <span style=\"color: #483d8b;\">:line-segment</span> nil)
                (lisp (not (equal ?id ?id2)))
                (or (?id2 <span style=\"color: #483d8b;\">:start</span> ?end) (?id2 <span style=\"color: #483d8b;\">:end</span> ?start)
                    (?id2 <span style=\"color: #483d8b;\">:start</span> ?start) (?id2 <span style=\"color: #483d8b;\">:end</span> ?end)))
           <span style=\"color: #483d8b;\">:in</span> base <span style=\"color: #483d8b;\">:do</span> (push (list ?id <span style=\"color: #483d8b;\">:line-connects-to-line</span> ?id2) base))</pre>

<p>In fact, this is about the upper bound of complexity you're likely to run into in a single query. You can the full statement more or less the same way as above, but the \"this query\" part is much more complicated. In this case, rather than just going through each fact in <code>base</code> and <code>unify</code>ing it, <code>for-all</code> needs to run a deeper query. The top-level <code>and</code> there means that these sub-clauses are dependent on each other. So what it does is go through <code>base</code> looking for a fact that <code>unify</code>ies with <code>(?id :line-segment nil)</code>. If it finds such a fact, lets say it looks like <code>(27 :line-segment nil)</code>, it then tries to satisfy the next <code>and</code> clause under the resulting set of bindings. That is, it tries to find another <code>fact</code> in <code>base</code> that satisfies</p>

<pre>(unify fact (?id <span style=\"color: #483d8b;\">:start</span> ?start) '((?id . 27)))</pre>

<p>If <i>that</i> works, it keeps going. Either until it gets to the end of its clauses, in which case it returns the presumably fairly large <code>environment</code> which satisfies all of them, or until it gets to a sub-clause that fails. If that first sub-clause fails, <code>for-all</code> is out of answers in the given <code>base</code>, and is therefore done. If it were to fail on some other clause, it backtracks. That is, if <code>(unify fact (?id :start ?start) '((?id . 27)))</code> fails above, <code>for-all</code> will go back to the first goal and start searching where it left off until it finds another satisfying fact, then try to move up the tower again.</p>

<p>Hopefully, that clarified more than it confused.</p>

<hr />
<h5>Footnotes</h5>
<p>1 - <a href=\"#note-Tue-Jun-17-201209EDT-2014\" name=\"foot-Tue-Jun-17-201209EDT-2014\">[back]</a> - And don't worry if this set includes you; it included me too, until I spent three weeks or so hitting my head against it repeatedly.</p>
"))
((5222 9633 333892000) :INSERT
 (181 :BODY "<p>So here's how unification works.</p>

<pre>(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">unify</span> (x y <span style=\"color: #228b22;\">&amp;optional</span> bindings)
  (<span style=\"color: #a020f0;\">cond</span> ((fail? bindings) +fail+)
        ((eql x y) bindings)
        ((variable? x) (unify-variable x y bindings))
        ((variable? y) (unify-variable y x bindings))
        ((and (stringp x) (stringp y))
         (<span style=\"color: #a020f0;\">if</span> (string= x y) bindings +fail+))
        ((and (consp x) (consp y))
         (unify (rest x) (rest y)
                (unify (first x) (first y) bindings)))
        (t +fail+)))

(<span style=\"color: #a020f0;\">defun</span> <span style=\"color: #0000ff;\">unify-variable</span> (var x bindings)
  (<span style=\"color: #a020f0;\">cond</span> ((get-binding var bindings)
         (unify (lookup-binding var bindings) x bindings))
        ((and (variable? x) (get-binding x bindings))
         (unify var (lookup-binding x bindings) bindings))
        ((occurs-check var x bindings)
         +fail+)
        (t (extend-bindings var x bindings))))</pre>

<p>That's a joke.</p>

<p>The above is an implementation of unification in Common Lisp. It won't, by itself, tell you how unification works, or the resulting implications. It's a very mildly modified version of the unifier that <a href=\"http://norvig.com/\">Norvig</a> built in <a href=\"http://norvig.com/paip/README.html\">PAIP</a>. What a lot of people don't grasp intuitively<a href=\"#foot-Tue-Jun-17-201209EDT-2014\" name=\"note-Tue-Jun-17-201209EDT-2014\">[1]</a> is that unifiers don't return expressions, they return environments.</p>

<pre>FACT-BASE&gt; (unify '(?a <span style=\"color: #483d8b;\">:test</span> 1) '(<span style=\"color: #483d8b;\">:blah</span> ?b 1))
<span style=\"color: #ff0000;\">((?B . </span><span style=\"color: #ff0000;\">:TEST</span><span style=\"color: #ff0000;\">) (?A . </span><span style=\"color: #ff0000;\">:BLAH</span><span style=\"color: #ff0000;\">))</span>
FACT-BASE&gt; </pre>

<p>This particular implementation represents environments as <a href=\"http://www.cs.cmu.edu/Groups/AI/html/cltl/clm/node153.html\">association list</a>, but that's not a requirement. An <code>environment</code> is a key/value structure that tells you what variables are bound to which values. The three possible outputs of <code>unify</code> are:</p>

<p><b>Failure</b>, which is the unsuccessful empty environment. Here's an example:</p>

<pre>FACT-BASE&gt; (unify '(?a <span style=\"color: #483d8b;\">:test</span> 1) '(<span style=\"color: #483d8b;\">:blah</span> ?b 2))
<span style=\"color: #ff0000;\">#</span><span style=\"color: #ff0000;\">:FAIL973</span>
FACT-BASE&gt; </pre>

<p>The problem there is that <code>1</code> and <code>2</code> are different constant values, so these two terms can't be <code>unify</code>ied. This is fundamentally different from</p>

<p><b>Success</b>, which is the <i>successful</i> empty environment. You get this by successfully <code>unify</code>ing terms with no variables. For example,</p>

<pre>FACT-BASE&gt; (unify '(<span style=\"color: #483d8b;\">:blah</span> <span style=\"color: #483d8b;\">:test</span> 2) '(<span style=\"color: #483d8b;\">:blah</span> <span style=\"color: #483d8b;\">:test</span> 2))
<span style=\"color: #ff0000;\">NIL</span>
FACT-BASE&gt; </pre>

<p>This particular implementation of <code>unify</code> uses the empty list (<code>NIL</code>) as the empty success. And finally, <code>unify</code> might return </p>

<p><b>An Environment</b>, which is a set of bindings under which the given unification is true. Once again,</p>

<pre>FACT-BASE&gt; (unify '(?a <span style=\"color: #483d8b;\">:test</span> 1) '(<span style=\"color: #483d8b;\">:blah</span> ?b 1))
<span style=\"color: #ff0000;\">((?B . </span><span style=\"color: #ff0000;\">:TEST</span><span style=\"color: #ff0000;\">) (?A . </span><span style=\"color: #ff0000;\">:BLAH</span><span style=\"color: #ff0000;\">))</span>
FACT-BASE&gt; </pre>

<p>What this is saying is</p>

<blockquote>If <code>?a</code> were bound to <code>:BLAH</code> and <code>?b</code> were bound to <code>:TEST</code>, these two terms would be equal</blockquote>

<p>Now, by default, <code>unify</code> starts with the empty environment, but it doesn't have to.</p>

<pre>FACT-BASE&gt; (unify '(?a <span style=\"color: #483d8b;\">:test</span> 1) '(<span style=\"color: #483d8b;\">:blah</span> ?b 1) '((?a . <span style=\"color: #483d8b;\">:FOO</span>)))
<span style=\"color: #ff0000;\">#</span><span style=\"color: #ff0000;\">:FAIL973</span>
FACT-BASE&gt; </pre>

<p>If <code>unify</code> tries to work on these same terms, but <code>?a</code> is already bound to <code>:foo</code>, it can do nothing but fail. Yes, you could unbind a particular variable, but that's skipping ahead a bit. Backtracking is dealt with at a different level than straight-up unification. In fact...</p>

<h2>How <code>for-all</code> Works</h2>

<p>Here's how <code>for-all</code> works.</p>

<pre>(<span style=\"color: #a020f0;\">defmacro</span> <span style=\"color: #0000ff;\">for-all</span> (goal-term <span style=\"color: #228b22;\">&amp;key</span> in collect do)
  (<span style=\"color: #a020f0;\">with-gensyms</span> (gen res)
    `(<span style=\"color: #a020f0;\">let</span> ((,gen ,(<span style=\"color: #a020f0;\">if</span> (and (symbolp (first goal-term))
                           (member (-&gt;key (first goal-term))
                                   (list <span style=\"color: #483d8b;\">:quote</span> <span style=\"color: #483d8b;\">:backq-list</span> <span style=\"color: #483d8b;\">:backq-list*</span>)))
                      `(make-goal ,in ,goal-term)
                      `(make-goal ,in ',goal-term))))
       (<span style=\"color: #a020f0;\">loop</span> for ,res = (funcall ,gen)
          until (fail? ,res)
            ,(<span style=\"color: #a020f0;\">if</span> do 'do 'collect)
            ,(<span style=\"color: #a020f0;\">if</span> (or collect do)
                 `(apply (<span style=\"color: #a020f0;\">lambda</span> ,(variables-in goal-term)
                           ,(or collect do))
                         (subst-bindings ,res ',(variables-in goal-term)))
                 `(subst-bindings ,res ',(variables-in goal-term)))))))</pre>

<p>Hah!</p>

<p>This'll get funny eventually, I swear. In all seriousness, understanding this implementation of <code>for-all</code> is entirely optional to understanding how you use <code>unify</code> to query a fact-base. Here's a simple query:</p>

<pre>(for-all (?id <span style=\"color: #483d8b;\">:rectangle</span> nil) <span style=\"color: #483d8b;\">:in</span> base <span style=\"color: #483d8b;\">:do</span> (push (list ?id <span style=\"color: #483d8b;\">:sicp-constraint</span> nil) base))</pre>

<p>This pushes a new fact into the fact-base <code>base</code> for each individual fact that <code>unify</code>ies with the pattern <code>(?id :rectangle nil)</code>. And that's more or less how you read it:</p>

<blockquote>For all environments which makes this query true in the knowledge-base <code>base</code>, do <code>(push (list ?id :sicp-constraint nil) base)</code>.</blockquote>

<p>Here's a more complicated query:</p>

<pre>(for-all (and (?id <span style=\"color: #483d8b;\">:line-segment</span> nil)
                (?id <span style=\"color: #483d8b;\">:start</span> ?start) (?id <span style=\"color: #483d8b;\">:end</span> ?end)
                (?id2 <span style=\"color: #483d8b;\">:line-segment</span> nil)
                (lisp (not (equal ?id ?id2)))
                (or (?id2 <span style=\"color: #483d8b;\">:start</span> ?end) (?id2 <span style=\"color: #483d8b;\">:end</span> ?start)
                    (?id2 <span style=\"color: #483d8b;\">:start</span> ?start) (?id2 <span style=\"color: #483d8b;\">:end</span> ?end)))
           <span style=\"color: #483d8b;\">:in</span> base <span style=\"color: #483d8b;\">:do</span> (push (list ?id <span style=\"color: #483d8b;\">:line-connects-to-line</span> ?id2) base))</pre>

<p>In fact, this is about the upper bound of complexity you're likely to run into in a single query. You can read the full statement more or less the same way as above, but the \"this query\" part is much more complicated. In this case, rather than just going through each fact in <code>base</code> and <code>unify</code>ing it, <code>for-all</code> needs to run a deeper query. The top-level <code>and</code> there means that these sub-clauses are dependent on each other. So what it does is go through <code>base</code> looking for a fact that <code>unify</code>ies with <code>(?id :line-segment nil)</code>. If it finds such a fact, lets say it looks like <code>(27 :line-segment nil)</code>, it then tries to satisfy the next <code>and</code> clause under the resulting set of bindings. That is, it tries to find another <code>fact</code> in <code>base</code> that satisfies</p>

<pre>(unify fact (?id <span style=\"color: #483d8b;\">:start</span> ?start) '((?id . 27)))</pre>

<p>If <i>that</i> works, it keeps going. Either until it gets to the end of its clauses, in which case it returns the presumably fairly large <code>environment</code> which satisfies all of them, or until it gets to a sub-clause that fails. If that first sub-clause fails, <code>for-all</code> is out of answers in the given <code>base</code>, and is therefore done. If it were to fail on some other clause, it backtracks. That is, if <code>(unify fact (?id :start ?start) '((?id . 27)))</code> fails above, <code>for-all</code> will go back to the first goal and start searching where it left off until it finds another satisfying fact, then try to move up the tower again.</p>

<p>Hopefully, that clarified more than it confused.</p>

<hr />
<h5>Footnotes</h5>
<p>1 - <a href=\"#note-Tue-Jun-17-201209EDT-2014\" name=\"foot-Tue-Jun-17-201209EDT-2014\">[back]</a> - And don't worry if this set includes you; it included me too, until I spent three weeks or so hitting my head against it repeatedly.</p>
"))
((5222 9633 334075000) :INSERT (181 :EDITED 3612047668))
